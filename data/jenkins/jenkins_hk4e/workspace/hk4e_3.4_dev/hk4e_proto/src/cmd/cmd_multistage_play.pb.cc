// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_multistage_play.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cmd/cmd_multistage_play.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
class InBattleMechanicusBuildingInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleMechanicusBuildingInfo>
     _instance;
} _InBattleMechanicusBuildingInfo_default_instance_;
class InBattleMechanicusPlayerInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleMechanicusPlayerInfo>
     _instance;
} _InBattleMechanicusPlayerInfo_default_instance_;
class InBattleMechanicusMonsterInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleMechanicusMonsterInfo>
     _instance;
} _InBattleMechanicusMonsterInfo_default_instance_;
class InBattleMechanicusCardInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleMechanicusCardInfo>
     _instance;
} _InBattleMechanicusCardInfo_default_instance_;
class InBattleMechanicusInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleMechanicusInfo>
     _instance;
} _InBattleMechanicusInfo_default_instance_;
class InBattleFleurFairInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleFleurFairInfo>
     _instance;
} _InBattleFleurFairInfo_default_instance_;
class CharAmusementAvatarInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CharAmusementAvatarInfo>
     _instance;
} _CharAmusementAvatarInfo_default_instance_;
class CharAmusementInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CharAmusementInfo>
     _instance;
} _CharAmusementInfo_default_instance_;
class BrickBreakerStageInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BrickBreakerStageInfo>
     _instance;
} _BrickBreakerStageInfo_default_instance_;
class CoinCollectStageInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CoinCollectStageInfo>
     _instance;
} _CoinCollectStageInfo_default_instance_;
class LanV3BoatStageInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LanV3BoatStageInfo>
     _instance;
} _LanV3BoatStageInfo_default_instance_;
class MultistagePlayInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MultistagePlayInfo>
     _instance;
  const ::proto::InBattleMechanicusInfo* mechanicus_info_;
  const ::proto::InBattleFleurFairInfo* fleur_fair_info_;
  const ::proto::HideAndSeekStageInfo* hide_and_seek_info_;
  const ::proto::InBattleChessInfo* chess_info_;
  const ::proto::InBattleIrodoriChessInfo* irodori_chess_info_;
  const ::proto::CharAmusementInfo* char_amusement_info_;
  const ::proto::BrickBreakerStageInfo* brick_breaker_info_;
  const ::proto::CoinCollectStageInfo* coin_collect_info_;
  const ::proto::LanV3BoatStageInfo* lan_v3_boat_info_;
} _MultistagePlayInfo_default_instance_;
class MultistagePlayInfoNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MultistagePlayInfoNotify>
     _instance;
} _MultistagePlayInfoNotify_default_instance_;
class MultistagePlayFinishStageReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MultistagePlayFinishStageReq>
     _instance;
} _MultistagePlayFinishStageReq_default_instance_;
class InBattleMechanicusExcapeMonsterNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleMechanicusExcapeMonsterNotify>
     _instance;
} _InBattleMechanicusExcapeMonsterNotify_default_instance_;
class InBattleMechanicusLeftMonsterNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleMechanicusLeftMonsterNotify>
     _instance;
} _InBattleMechanicusLeftMonsterNotify_default_instance_;
class InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleMechanicusBuildingPointsNotify::InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry>
     _instance;
} _InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry_default_instance_;
class InBattleMechanicusBuildingPointsNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleMechanicusBuildingPointsNotify>
     _instance;
} _InBattleMechanicusBuildingPointsNotify_default_instance_;
class InBattleMechanicusPickCardReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleMechanicusPickCardReq>
     _instance;
} _InBattleMechanicusPickCardReq_default_instance_;
class InBattleMechanicusPickCardRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleMechanicusPickCardRsp>
     _instance;
} _InBattleMechanicusPickCardRsp_default_instance_;
class InBattleMechanicusPickCardNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleMechanicusPickCardNotify>
     _instance;
} _InBattleMechanicusPickCardNotify_default_instance_;
class InBattleMechanicusConfirmCardReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleMechanicusConfirmCardReq>
     _instance;
} _InBattleMechanicusConfirmCardReq_default_instance_;
class InBattleMechanicusConfirmCardRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleMechanicusConfirmCardRsp>
     _instance;
} _InBattleMechanicusConfirmCardRsp_default_instance_;
class InBattleMechanicusConfirmCardNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleMechanicusConfirmCardNotify>
     _instance;
} _InBattleMechanicusConfirmCardNotify_default_instance_;
class InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleMechanicusCardResultNotify::InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry>
     _instance;
} _InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry_default_instance_;
class InBattleMechanicusCardResultNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleMechanicusCardResultNotify>
     _instance;
} _InBattleMechanicusCardResultNotify_default_instance_;
class MultistagePlayFinishStageRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MultistagePlayFinishStageRsp>
     _instance;
} _MultistagePlayFinishStageRsp_default_instance_;
class MultistageSettleWatcherInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MultistageSettleWatcherInfo>
     _instance;
} _MultistageSettleWatcherInfo_default_instance_;
class InBattleMechanicusSettleNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleMechanicusSettleNotify>
     _instance;
} _InBattleMechanicusSettleNotify_default_instance_;
class InBattleMechanicusSettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleMechanicusSettleInfo>
     _instance;
} _InBattleMechanicusSettleInfo_default_instance_;
class MultistagePlaySettleNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MultistagePlaySettleNotify>
     _instance;
  const ::proto::InBattleMechanicusSettleInfo* mechanicus_settle_info_;
  const ::proto::InBattleChessSettleInfo* chess_settle_info_;
  const ::proto::InBattleIrodoriChessSettleInfo* irodori_chess_settle_info_;
} _MultistagePlaySettleNotify_default_instance_;
class MultistagePlayStageEndNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MultistagePlayStageEndNotify>
     _instance;
} _MultistagePlayStageEndNotify_default_instance_;
class MultistagePlayEndNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MultistagePlayEndNotify>
     _instance;
} _MultistagePlayEndNotify_default_instance_;
class FleurFairBuffEnergyNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FleurFairBuffEnergyNotify>
     _instance;
} _FleurFairBuffEnergyNotify_default_instance_;
class FleurFairGallerySettleInfo_EnergyStatMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FleurFairGallerySettleInfo::FleurFairGallerySettleInfo_EnergyStatMapEntry>
     _instance;
} _FleurFairGallerySettleInfo_EnergyStatMapEntry_default_instance_;
class FleurFairGallerySettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FleurFairGallerySettleInfo>
     _instance;
} _FleurFairGallerySettleInfo_default_instance_;
class FleurFairPlayerStatInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FleurFairPlayerStatInfo>
     _instance;
} _FleurFairPlayerStatInfo_default_instance_;
class FleurFairBossSettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FleurFairBossSettleInfo>
     _instance;
} _FleurFairBossSettleInfo_default_instance_;
class FleurFairStageSettleNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FleurFairStageSettleNotify>
     _instance;
  const ::proto::FleurFairGallerySettleInfo* gallery_settle_info_;
  const ::proto::FleurFairBossSettleInfo* boss_settle_info_;
} _FleurFairStageSettleNotify_default_instance_;
class FleurFairFinishGalleryStageNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FleurFairFinishGalleryStageNotify>
     _instance;
} _FleurFairFinishGalleryStageNotify_default_instance_;
class HideAndSeekPlayerBattleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HideAndSeekPlayerBattleInfo>
     _instance;
} _HideAndSeekPlayerBattleInfo_default_instance_;
class HideAndSeekStageInfo_BattleInfoMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HideAndSeekStageInfo::HideAndSeekStageInfo_BattleInfoMapEntry>
     _instance;
} _HideAndSeekStageInfo_BattleInfoMapEntry_default_instance_;
class HideAndSeekStageInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HideAndSeekStageInfo>
     _instance;
} _HideAndSeekStageInfo_default_instance_;
class HideAndSeekSelectAvatarReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HideAndSeekSelectAvatarReq>
     _instance;
} _HideAndSeekSelectAvatarReq_default_instance_;
class HideAndSeekSelectAvatarRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HideAndSeekSelectAvatarRsp>
     _instance;
} _HideAndSeekSelectAvatarRsp_default_instance_;
class HideAndSeekSetReadyReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HideAndSeekSetReadyReq>
     _instance;
} _HideAndSeekSetReadyReq_default_instance_;
class HideAndSeekSetReadyRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HideAndSeekSetReadyRsp>
     _instance;
} _HideAndSeekSetReadyRsp_default_instance_;
class HideAndSeekSettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HideAndSeekSettleInfo>
     _instance;
} _HideAndSeekSettleInfo_default_instance_;
class HideAndSeekSettleNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HideAndSeekSettleNotify>
     _instance;
} _HideAndSeekSettleNotify_default_instance_;
class HideAndSeekPlayerReadyNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HideAndSeekPlayerReadyNotify>
     _instance;
} _HideAndSeekPlayerReadyNotify_default_instance_;
class HideAndSeekPlayerSetAvatarNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HideAndSeekPlayerSetAvatarNotify>
     _instance;
} _HideAndSeekPlayerSetAvatarNotify_default_instance_;
class ChessCardInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChessCardInfo>
     _instance;
} _ChessCardInfo_default_instance_;
class InBattleChessInfo_PlayerInfoMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleChessInfo::InBattleChessInfo_PlayerInfoMapEntry>
     _instance;
} _InBattleChessInfo_PlayerInfoMapEntry_default_instance_;
class InBattleChessInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleChessInfo>
     _instance;
} _InBattleChessInfo_default_instance_;
class InBattleChessSettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleChessSettleInfo>
     _instance;
} _InBattleChessSettleInfo_default_instance_;
class ChessPlayerInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChessPlayerInfo>
     _instance;
} _ChessPlayerInfo_default_instance_;
class ChessMonsterInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChessMonsterInfo>
     _instance;
} _ChessMonsterInfo_default_instance_;
class ChessEntranceInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChessEntranceInfo>
     _instance;
} _ChessEntranceInfo_default_instance_;
class ChessEntranceDetailInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChessEntranceDetailInfo>
     _instance;
} _ChessEntranceDetailInfo_default_instance_;
class ChessMysteryInfo_EntrancePointMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChessMysteryInfo::ChessMysteryInfo_EntrancePointMapEntry>
     _instance;
} _ChessMysteryInfo_EntrancePointMapEntry_default_instance_;
class ChessMysteryInfo_DetailInfoMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChessMysteryInfo::ChessMysteryInfo_DetailInfoMapEntry>
     _instance;
} _ChessMysteryInfo_DetailInfoMapEntry_default_instance_;
class ChessMysteryInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChessMysteryInfo>
     _instance;
} _ChessMysteryInfo_default_instance_;
class ChessNormalCardInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChessNormalCardInfo>
     _instance;
} _ChessNormalCardInfo_default_instance_;
class ChessPickCardReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChessPickCardReq>
     _instance;
} _ChessPickCardReq_default_instance_;
class ChessPickCardRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChessPickCardRsp>
     _instance;
} _ChessPickCardRsp_default_instance_;
class ChessPickCardNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChessPickCardNotify>
     _instance;
} _ChessPickCardNotify_default_instance_;
class ChessManualRefreshCardsReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChessManualRefreshCardsReq>
     _instance;
} _ChessManualRefreshCardsReq_default_instance_;
class ChessManualRefreshCardsRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChessManualRefreshCardsRsp>
     _instance;
} _ChessManualRefreshCardsRsp_default_instance_;
class ChessPlayerInfoNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChessPlayerInfoNotify>
     _instance;
} _ChessPlayerInfoNotify_default_instance_;
class ChessLeftMonstersNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChessLeftMonstersNotify>
     _instance;
} _ChessLeftMonstersNotify_default_instance_;
class ChessEscapedMonstersNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChessEscapedMonstersNotify>
     _instance;
} _ChessEscapedMonstersNotify_default_instance_;
class ChessSelectedCardsNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChessSelectedCardsNotify>
     _instance;
} _ChessSelectedCardsNotify_default_instance_;
class GlobalBuildingInfoNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GlobalBuildingInfoNotify>
     _instance;
} _GlobalBuildingInfoNotify_default_instance_;
class InBattleIrodoriChessInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleIrodoriChessInfo>
     _instance;
} _InBattleIrodoriChessInfo_default_instance_;
class IrodoriChessMonsterInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IrodoriChessMonsterInfo>
     _instance;
} _IrodoriChessMonsterInfo_default_instance_;
class IrodoriChessEntranceInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IrodoriChessEntranceInfo>
     _instance;
} _IrodoriChessEntranceInfo_default_instance_;
class IrodoriChessEntranceDetailInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IrodoriChessEntranceDetailInfo>
     _instance;
} _IrodoriChessEntranceDetailInfo_default_instance_;
class IrodoriChessMysteryInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IrodoriChessMysteryInfo>
     _instance;
} _IrodoriChessMysteryInfo_default_instance_;
class InBattleIrodoriChessSettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InBattleIrodoriChessSettleInfo>
     _instance;
} _InBattleIrodoriChessSettleInfo_default_instance_;
class IrodoriChessPlayerInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IrodoriChessPlayerInfo>
     _instance;
} _IrodoriChessPlayerInfo_default_instance_;
class IrodoriChessPlayerInfoNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IrodoriChessPlayerInfoNotify>
     _instance;
} _IrodoriChessPlayerInfoNotify_default_instance_;
class IrodoriChessLeftMonsterNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IrodoriChessLeftMonsterNotify>
     _instance;
} _IrodoriChessLeftMonsterNotify_default_instance_;
class BrickBreakerPlayerBattleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BrickBreakerPlayerBattleInfo>
     _instance;
} _BrickBreakerPlayerBattleInfo_default_instance_;
class BrickBreakerPlayerReadyNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BrickBreakerPlayerReadyNotify>
     _instance;
} _BrickBreakerPlayerReadyNotify_default_instance_;
class BrickBreakerPlayerSetAvatarNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BrickBreakerPlayerSetAvatarNotify>
     _instance;
} _BrickBreakerPlayerSetAvatarNotify_default_instance_;
class BrickBreakerPlayerSetSkillNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BrickBreakerPlayerSetSkillNotify>
     _instance;
} _BrickBreakerPlayerSetSkillNotify_default_instance_;
class BrickBreakerSetReadyReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BrickBreakerSetReadyReq>
     _instance;
} _BrickBreakerSetReadyReq_default_instance_;
class BrickBreakerSetReadyRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BrickBreakerSetReadyRsp>
     _instance;
} _BrickBreakerSetReadyRsp_default_instance_;
class BrickBreakerSelectAvatarReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BrickBreakerSelectAvatarReq>
     _instance;
} _BrickBreakerSelectAvatarReq_default_instance_;
class BrickBreakerSelectAvatarRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BrickBreakerSelectAvatarRsp>
     _instance;
} _BrickBreakerSelectAvatarRsp_default_instance_;
class BrickBreakerSelectSkillReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BrickBreakerSelectSkillReq>
     _instance;
} _BrickBreakerSelectSkillReq_default_instance_;
class BrickBreakerSelectSkillRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BrickBreakerSelectSkillRsp>
     _instance;
} _BrickBreakerSelectSkillRsp_default_instance_;
class BrickBreakerSetChangingReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BrickBreakerSetChangingReq>
     _instance;
} _BrickBreakerSetChangingReq_default_instance_;
class BrickBreakerSetChangingRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BrickBreakerSetChangingRsp>
     _instance;
} _BrickBreakerSetChangingRsp_default_instance_;
class BrickBreakerPlayerSetChangingNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BrickBreakerPlayerSetChangingNotify>
     _instance;
} _BrickBreakerPlayerSetChangingNotify_default_instance_;
class CoinCollectTeamAvatarInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CoinCollectTeamAvatarInfo>
     _instance;
} _CoinCollectTeamAvatarInfo_default_instance_;
class CoinCollectPlayerInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CoinCollectPlayerInfo>
     _instance;
} _CoinCollectPlayerInfo_default_instance_;
class CoinCollectPrepareStageNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CoinCollectPrepareStageNotify>
     _instance;
} _CoinCollectPrepareStageNotify_default_instance_;
class LanV3BoatSettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LanV3BoatSettleInfo>
     _instance;
} _LanV3BoatSettleInfo_default_instance_;
class LanV3BoatSettleNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LanV3BoatSettleNotify>
     _instance;
} _LanV3BoatSettleNotify_default_instance_;

namespace protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[100];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[7];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusBuildingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusBuildingInfo, building_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusBuildingInfo, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusBuildingInfo, cost_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusBuildingInfo, refund_points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusPlayerInfo, pick_card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusPlayerInfo, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusPlayerInfo, building_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusPlayerInfo, is_card_confirmed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusPlayerInfo, building_points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusMonsterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusMonsterInfo, monster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusMonsterInfo, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusMonsterInfo, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusCardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusCardInfo, rand_effect_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusCardInfo, end_round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusCardInfo, challenge_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusCardInfo, cost_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusCardInfo, card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusCardInfo, begin_round_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusInfo, left_monster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusInfo, wait_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusInfo, entrance_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusInfo, exit_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusInfo, history_card_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusInfo, max_excape_monster_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusInfo, building_stage_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusInfo, duration_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusInfo, stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusInfo, total_round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusInfo, monster_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusInfo, excaped_monster_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusInfo, round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusInfo, pick_card_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusInfo, player_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusInfo, wait_begin_time_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusInfo, begin_time_ms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleFleurFairInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleFleurFairInfo, gallery_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleFleurFairInfo, gallery_stage_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleFleurFairInfo, preview_stage_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleFleurFairInfo, ability_group_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleFleurFairInfo, preview_display_duration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAmusementAvatarInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAmusementAvatarInfo, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAmusementAvatarInfo, punish_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAmusementAvatarInfo, avatar_id_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAmusementInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAmusementInfo, total_cost_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAmusementInfo, stage_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAmusementInfo, level_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAmusementInfo, preview_stage_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAmusementInfo, avatar_info_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerStageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerStageInfo, level_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerStageInfo, stage_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerStageInfo, battle_info_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectStageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectStageInfo, level_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectStageInfo, play_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectStageInfo, player_info_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanV3BoatStageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanV3BoatStageInfo, player_uid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanV3BoatStageInfo, map_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanV3BoatStageInfo, is_single_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayInfo, play_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayInfo, play_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayInfo, stage_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayInfo, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayInfo, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayInfo, begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayInfo, stage_index_),
  offsetof(MultistagePlayInfoDefaultTypeInternal, mechanicus_info_),
  offsetof(MultistagePlayInfoDefaultTypeInternal, fleur_fair_info_),
  offsetof(MultistagePlayInfoDefaultTypeInternal, hide_and_seek_info_),
  offsetof(MultistagePlayInfoDefaultTypeInternal, chess_info_),
  offsetof(MultistagePlayInfoDefaultTypeInternal, irodori_chess_info_),
  offsetof(MultistagePlayInfoDefaultTypeInternal, char_amusement_info_),
  offsetof(MultistagePlayInfoDefaultTypeInternal, brick_breaker_info_),
  offsetof(MultistagePlayInfoDefaultTypeInternal, coin_collect_info_),
  offsetof(MultistagePlayInfoDefaultTypeInternal, lan_v3_boat_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayInfo, detail_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayInfoNotify, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayFinishStageReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayFinishStageReq, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayFinishStageReq, play_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusExcapeMonsterNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusExcapeMonsterNotify, excaped_monster_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusLeftMonsterNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusLeftMonsterNotify, left_monster_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusBuildingPointsNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusBuildingPointsNotify, player_building_points_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusPickCardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusPickCardReq, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusPickCardReq, play_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusPickCardReq, card_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusPickCardRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusPickCardRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusPickCardRsp, card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusPickCardRsp, play_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusPickCardRsp, group_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusPickCardNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusPickCardNotify, player_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusPickCardNotify, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusPickCardNotify, play_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusPickCardNotify, card_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusConfirmCardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusConfirmCardReq, play_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusConfirmCardReq, card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusConfirmCardReq, group_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusConfirmCardRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusConfirmCardRsp, play_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusConfirmCardRsp, card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusConfirmCardRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusConfirmCardRsp, group_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusConfirmCardNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusConfirmCardNotify, play_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusConfirmCardNotify, card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusConfirmCardNotify, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusConfirmCardNotify, player_uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusCardResultNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusCardResultNotify, wait_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusCardResultNotify, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusCardResultNotify, card_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusCardResultNotify, wait_begin_time_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusCardResultNotify, player_confirmed_card_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusCardResultNotify, play_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayFinishStageRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayFinishStageRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayFinishStageRsp, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayFinishStageRsp, play_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistageSettleWatcherInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistageSettleWatcherInfo, total_progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistageSettleWatcherInfo, cur_progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistageSettleWatcherInfo, watcher_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistageSettleWatcherInfo, is_inverse_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusSettleNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusSettleNotify, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusSettleNotify, scene_time_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusSettleNotify, difficulty_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusSettleNotify, total_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusSettleNotify, watcher_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusSettleNotify, real_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusSettleNotify, is_success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusSettleNotify, play_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusSettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusSettleInfo, scene_time_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusSettleInfo, total_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusSettleInfo, real_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusSettleInfo, watcher_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusSettleInfo, is_success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusSettleInfo, play_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusSettleInfo, difficulty_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleMechanicusSettleInfo, group_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlaySettleNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlaySettleNotify, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlaySettleNotify, play_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlaySettleNotify, group_id_),
  offsetof(MultistagePlaySettleNotifyDefaultTypeInternal, mechanicus_settle_info_),
  offsetof(MultistagePlaySettleNotifyDefaultTypeInternal, chess_settle_info_),
  offsetof(MultistagePlaySettleNotifyDefaultTypeInternal, irodori_chess_settle_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlaySettleNotify, detail_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayStageEndNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayStageEndNotify, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayStageEndNotify, play_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayEndNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayEndNotify, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultistagePlayEndNotify, play_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairBuffEnergyNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairBuffEnergyNotify, energy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairGallerySettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairGallerySettleInfo, energy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairGallerySettleInfo, gallery_stage_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairGallerySettleInfo, energy_stat_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairGallerySettleInfo, gallery_stage_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairGallerySettleInfo, is_success_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairPlayerStatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairPlayerStatInfo, online_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairPlayerStatInfo, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairPlayerStatInfo, profile_picture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairPlayerStatInfo, stat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairPlayerStatInfo, head_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairPlayerStatInfo, nick_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairPlayerStatInfo, param_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairBossSettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairBossSettleInfo, reward_token_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairBossSettleInfo, stat_info_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairBossSettleInfo, is_success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairBossSettleInfo, energy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairBossSettleInfo, cost_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairStageSettleNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairStageSettleNotify, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairStageSettleNotify, stage_type_),
  offsetof(FleurFairStageSettleNotifyDefaultTypeInternal, gallery_settle_info_),
  offsetof(FleurFairStageSettleNotifyDefaultTypeInternal, boss_settle_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairStageSettleNotify, detail_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleurFairFinishGalleryStageNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekPlayerBattleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekPlayerBattleInfo, costume_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekPlayerBattleInfo, skill_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekPlayerBattleInfo, is_ready_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekPlayerBattleInfo, avatar_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekStageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekStageInfo, map_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekStageInfo, is_record_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekStageInfo, stage_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekStageInfo, battle_info_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekStageInfo, hider_uid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekStageInfo, hunter_uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSelectAvatarReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSelectAvatarReq, avatar_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSelectAvatarRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSelectAvatarRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSelectAvatarRsp, avatar_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSetReadyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSetReadyRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSetReadyRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSettleInfo, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSettleInfo, profile_picture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSettleInfo, card_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSettleInfo, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSettleInfo, head_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSettleInfo, online_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSettleNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSettleNotify, cost_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSettleNotify, settle_info_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSettleNotify, winner_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSettleNotify, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSettleNotify, play_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSettleNotify, is_record_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSettleNotify, score_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekSettleNotify, stage_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekPlayerReadyNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekPlayerReadyNotify, uid_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekPlayerSetAvatarNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekPlayerSetAvatarNotify, avatar_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekPlayerSetAvatarNotify, costume_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekPlayerSetAvatarNotify, uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessCardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessCardInfo, effect_stack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessCardInfo, card_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleChessInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleChessInfo, ban_card_tag_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleChessInfo, round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleChessInfo, selected_card_info_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleChessInfo, mystery_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleChessInfo, player_info_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleChessInfo, max_escapable_monsters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleChessInfo, excaped_monsters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleChessInfo, total_round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleChessInfo, left_monsters_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleChessSettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleChessSettleInfo, is_success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleChessSettleInfo, chess_exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleChessSettleInfo, chess_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleChessSettleInfo, old_chess_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleChessSettleInfo, score_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleChessSettleInfo, scene_time_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleChessSettleInfo, old_chess_exp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPlayerInfo, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPlayerInfo, free_refresh_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPlayerInfo, candidate_card_info_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPlayerInfo, building_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPlayerInfo, candidate_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPlayerInfo, free_refresh_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPlayerInfo, refresh_cost_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessMonsterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessMonsterInfo, monster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessMonsterInfo, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessMonsterInfo, affix_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessEntranceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessEntranceInfo, monster_info_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessEntranceInfo, entrance_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessEntranceInfo, entrance_point_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessEntranceDetailInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessEntranceDetailInfo, info_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessMysteryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessMysteryInfo, entrance_point_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessMysteryInfo, exit_point_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessMysteryInfo, detail_info_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessNormalCardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessNormalCardInfo, card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessNormalCardInfo, cost_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessNormalCardInfo, is_attach_curse_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPickCardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPickCardReq, card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPickCardReq, card_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPickCardRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPickCardRsp, card_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPickCardRsp, card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPickCardRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPickCardNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPickCardNotify, curse_card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPickCardNotify, normal_card_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessManualRefreshCardsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessManualRefreshCardsRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessManualRefreshCardsRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPlayerInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessPlayerInfoNotify, player_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessLeftMonstersNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessLeftMonstersNotify, left_monsters_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessEscapedMonstersNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessEscapedMonstersNotify, excaped_monsters_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessSelectedCardsNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessSelectedCardsNotify, selected_card_info_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalBuildingInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalBuildingInfoNotify, current_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalBuildingInfoNotify, building_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalBuildingInfoNotify, max_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleIrodoriChessInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleIrodoriChessInfo, mystery_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleIrodoriChessInfo, left_monsters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleIrodoriChessInfo, selected_card_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleIrodoriChessInfo, building_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleIrodoriChessInfo, settle_score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriChessMonsterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriChessMonsterInfo, grant_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriChessMonsterInfo, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriChessMonsterInfo, monster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriChessMonsterInfo, affix_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriChessEntranceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriChessEntranceInfo, monster_info_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriChessEntranceInfo, entrance_point_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriChessEntranceDetailInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriChessEntranceDetailInfo, info_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriChessMysteryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriChessMysteryInfo, entrance_detail_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriChessMysteryInfo, entrance_point_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriChessMysteryInfo, exit_point_id_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleIrodoriChessSettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleIrodoriChessSettleInfo, is_new_record_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleIrodoriChessSettleInfo, is_activity_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleIrodoriChessSettleInfo, scene_time_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleIrodoriChessSettleInfo, settle_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleIrodoriChessSettleInfo, is_perfect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InBattleIrodoriChessSettleInfo, kill_monster_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriChessPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriChessPlayerInfo, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriChessPlayerInfo, building_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriChessPlayerInfo, settle_score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriChessPlayerInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriChessPlayerInfoNotify, player_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriChessLeftMonsterNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriChessLeftMonsterNotify, left_monsters_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerPlayerBattleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerPlayerBattleInfo, skill_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerPlayerBattleInfo, is_ready_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerPlayerBattleInfo, is_changing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerPlayerBattleInfo, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerPlayerBattleInfo, avatar_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerPlayerBattleInfo, costume_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerPlayerBattleInfo, nickname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerPlayerReadyNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerPlayerReadyNotify, uid_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerPlayerSetAvatarNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerPlayerSetAvatarNotify, avatar_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerPlayerSetAvatarNotify, costume_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerPlayerSetAvatarNotify, uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerPlayerSetSkillNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerPlayerSetSkillNotify, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerPlayerSetSkillNotify, skill_id_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerSetReadyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerSetReadyRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerSetReadyRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerSelectAvatarReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerSelectAvatarReq, avatar_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerSelectAvatarRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerSelectAvatarRsp, avatar_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerSelectAvatarRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerSelectSkillReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerSelectSkillReq, skill_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerSelectSkillRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerSelectSkillRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerSelectSkillRsp, skill_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerSetChangingReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerSetChangingReq, is_changing_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerSetChangingRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerSetChangingRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerPlayerSetChangingNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerPlayerSetChangingNotify, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrickBreakerPlayerSetChangingNotify, is_changing_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectTeamAvatarInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectTeamAvatarInfo, costume_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectTeamAvatarInfo, avatar_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectPlayerInfo, choose_skill_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectPlayerInfo, player_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectPlayerInfo, player_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectPlayerInfo, is_prepare_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectPlayerInfo, avatar_info_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectPrepareStageNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectPrepareStageNotify, coin_collect_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanV3BoatSettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanV3BoatSettleInfo, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanV3BoatSettleInfo, online_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanV3BoatSettleInfo, head_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanV3BoatSettleInfo, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanV3BoatSettleInfo, profile_picture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanV3BoatSettleInfo, card_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanV3BoatSettleNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanV3BoatSettleNotify, is_gallery_succ_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanV3BoatSettleNotify, winner_uid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanV3BoatSettleNotify, is_single_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanV3BoatSettleNotify, stage_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanV3BoatSettleNotify, score_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanV3BoatSettleNotify, settle_info_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanV3BoatSettleNotify, play_index_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(InBattleMechanicusBuildingInfo)},
  { 9, -1, sizeof(InBattleMechanicusPlayerInfo)},
  { 19, -1, sizeof(InBattleMechanicusMonsterInfo)},
  { 27, -1, sizeof(InBattleMechanicusCardInfo)},
  { 38, -1, sizeof(InBattleMechanicusInfo)},
  { 60, -1, sizeof(InBattleFleurFairInfo)},
  { 70, -1, sizeof(CharAmusementAvatarInfo)},
  { 78, -1, sizeof(CharAmusementInfo)},
  { 88, -1, sizeof(BrickBreakerStageInfo)},
  { 96, -1, sizeof(CoinCollectStageInfo)},
  { 104, -1, sizeof(LanV3BoatStageInfo)},
  { 112, -1, sizeof(MultistagePlayInfo)},
  { 134, -1, sizeof(MultistagePlayInfoNotify)},
  { 140, -1, sizeof(MultistagePlayFinishStageReq)},
  { 147, -1, sizeof(InBattleMechanicusExcapeMonsterNotify)},
  { 153, -1, sizeof(InBattleMechanicusLeftMonsterNotify)},
  { 159, -1, sizeof(InBattleMechanicusBuildingPointsNotify)},
  { 165, -1, sizeof(InBattleMechanicusPickCardReq)},
  { 173, -1, sizeof(InBattleMechanicusPickCardRsp)},
  { 182, -1, sizeof(InBattleMechanicusPickCardNotify)},
  { 191, -1, sizeof(InBattleMechanicusConfirmCardReq)},
  { 199, -1, sizeof(InBattleMechanicusConfirmCardRsp)},
  { 208, -1, sizeof(InBattleMechanicusConfirmCardNotify)},
  { 217, -1, sizeof(InBattleMechanicusCardResultNotify)},
  { 228, -1, sizeof(MultistagePlayFinishStageRsp)},
  { 236, -1, sizeof(MultistageSettleWatcherInfo)},
  { 245, -1, sizeof(InBattleMechanicusSettleNotify)},
  { 258, -1, sizeof(InBattleMechanicusSettleInfo)},
  { 271, -1, sizeof(MultistagePlaySettleNotify)},
  { 282, -1, sizeof(MultistagePlayStageEndNotify)},
  { 289, -1, sizeof(MultistagePlayEndNotify)},
  { 296, -1, sizeof(FleurFairBuffEnergyNotify)},
  { 302, -1, sizeof(FleurFairGallerySettleInfo)},
  { 312, -1, sizeof(FleurFairPlayerStatInfo)},
  { 324, -1, sizeof(FleurFairBossSettleInfo)},
  { 334, -1, sizeof(FleurFairStageSettleNotify)},
  { 343, -1, sizeof(FleurFairFinishGalleryStageNotify)},
  { 348, -1, sizeof(HideAndSeekPlayerBattleInfo)},
  { 357, -1, sizeof(HideAndSeekStageInfo)},
  { 368, -1, sizeof(HideAndSeekSelectAvatarReq)},
  { 374, -1, sizeof(HideAndSeekSelectAvatarRsp)},
  { 381, -1, sizeof(HideAndSeekSetReadyReq)},
  { 386, -1, sizeof(HideAndSeekSetReadyRsp)},
  { 392, -1, sizeof(HideAndSeekSettleInfo)},
  { 403, -1, sizeof(HideAndSeekSettleNotify)},
  { 416, -1, sizeof(HideAndSeekPlayerReadyNotify)},
  { 422, -1, sizeof(HideAndSeekPlayerSetAvatarNotify)},
  { 430, -1, sizeof(ChessCardInfo)},
  { 437, -1, sizeof(InBattleChessInfo)},
  { 451, -1, sizeof(InBattleChessSettleInfo)},
  { 463, -1, sizeof(ChessPlayerInfo)},
  { 475, -1, sizeof(ChessMonsterInfo)},
  { 483, -1, sizeof(ChessEntranceInfo)},
  { 491, -1, sizeof(ChessEntranceDetailInfo)},
  { 497, -1, sizeof(ChessMysteryInfo)},
  { 505, -1, sizeof(ChessNormalCardInfo)},
  { 513, -1, sizeof(ChessPickCardReq)},
  { 520, -1, sizeof(ChessPickCardRsp)},
  { 528, -1, sizeof(ChessPickCardNotify)},
  { 535, -1, sizeof(ChessManualRefreshCardsReq)},
  { 540, -1, sizeof(ChessManualRefreshCardsRsp)},
  { 546, -1, sizeof(ChessPlayerInfoNotify)},
  { 552, -1, sizeof(ChessLeftMonstersNotify)},
  { 558, -1, sizeof(ChessEscapedMonstersNotify)},
  { 564, -1, sizeof(ChessSelectedCardsNotify)},
  { 570, -1, sizeof(GlobalBuildingInfoNotify)},
  { 578, -1, sizeof(InBattleIrodoriChessInfo)},
  { 588, -1, sizeof(IrodoriChessMonsterInfo)},
  { 597, -1, sizeof(IrodoriChessEntranceInfo)},
  { 604, -1, sizeof(IrodoriChessEntranceDetailInfo)},
  { 610, -1, sizeof(IrodoriChessMysteryInfo)},
  { 618, -1, sizeof(InBattleIrodoriChessSettleInfo)},
  { 629, -1, sizeof(IrodoriChessPlayerInfo)},
  { 637, -1, sizeof(IrodoriChessPlayerInfoNotify)},
  { 643, -1, sizeof(IrodoriChessLeftMonsterNotify)},
  { 649, -1, sizeof(BrickBreakerPlayerBattleInfo)},
  { 661, -1, sizeof(BrickBreakerPlayerReadyNotify)},
  { 667, -1, sizeof(BrickBreakerPlayerSetAvatarNotify)},
  { 675, -1, sizeof(BrickBreakerPlayerSetSkillNotify)},
  { 682, -1, sizeof(BrickBreakerSetReadyReq)},
  { 687, -1, sizeof(BrickBreakerSetReadyRsp)},
  { 693, -1, sizeof(BrickBreakerSelectAvatarReq)},
  { 699, -1, sizeof(BrickBreakerSelectAvatarRsp)},
  { 706, -1, sizeof(BrickBreakerSelectSkillReq)},
  { 712, -1, sizeof(BrickBreakerSelectSkillRsp)},
  { 719, -1, sizeof(BrickBreakerSetChangingReq)},
  { 725, -1, sizeof(BrickBreakerSetChangingRsp)},
  { 731, -1, sizeof(BrickBreakerPlayerSetChangingNotify)},
  { 738, -1, sizeof(CoinCollectTeamAvatarInfo)},
  { 745, -1, sizeof(CoinCollectPlayerInfo)},
  { 755, -1, sizeof(CoinCollectPrepareStageNotify)},
  { 761, -1, sizeof(LanV3BoatSettleInfo)},
  { 772, -1, sizeof(LanV3BoatSettleNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleMechanicusBuildingInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleMechanicusPlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleMechanicusMonsterInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleMechanicusCardInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleMechanicusInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleFleurFairInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CharAmusementAvatarInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CharAmusementInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BrickBreakerStageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CoinCollectStageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LanV3BoatStageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MultistagePlayInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MultistagePlayInfoNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MultistagePlayFinishStageReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleMechanicusExcapeMonsterNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleMechanicusLeftMonsterNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleMechanicusBuildingPointsNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleMechanicusPickCardReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleMechanicusPickCardRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleMechanicusPickCardNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleMechanicusConfirmCardReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleMechanicusConfirmCardRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleMechanicusConfirmCardNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleMechanicusCardResultNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MultistagePlayFinishStageRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MultistageSettleWatcherInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleMechanicusSettleNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleMechanicusSettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MultistagePlaySettleNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MultistagePlayStageEndNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MultistagePlayEndNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FleurFairBuffEnergyNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FleurFairGallerySettleInfo_EnergyStatMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FleurFairGallerySettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FleurFairPlayerStatInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FleurFairBossSettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FleurFairStageSettleNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FleurFairFinishGalleryStageNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HideAndSeekPlayerBattleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HideAndSeekStageInfo_BattleInfoMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HideAndSeekStageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HideAndSeekSelectAvatarReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HideAndSeekSelectAvatarRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HideAndSeekSetReadyReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HideAndSeekSetReadyRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HideAndSeekSettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HideAndSeekSettleNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HideAndSeekPlayerReadyNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HideAndSeekPlayerSetAvatarNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChessCardInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleChessInfo_PlayerInfoMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleChessInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleChessSettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChessPlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChessMonsterInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChessEntranceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChessEntranceDetailInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChessMysteryInfo_EntrancePointMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChessMysteryInfo_DetailInfoMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChessMysteryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChessNormalCardInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChessPickCardReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChessPickCardRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChessPickCardNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChessManualRefreshCardsReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChessManualRefreshCardsRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChessPlayerInfoNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChessLeftMonstersNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChessEscapedMonstersNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChessSelectedCardsNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GlobalBuildingInfoNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleIrodoriChessInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IrodoriChessMonsterInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IrodoriChessEntranceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IrodoriChessEntranceDetailInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IrodoriChessMysteryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InBattleIrodoriChessSettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IrodoriChessPlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IrodoriChessPlayerInfoNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IrodoriChessLeftMonsterNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BrickBreakerPlayerBattleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BrickBreakerPlayerReadyNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BrickBreakerPlayerSetAvatarNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BrickBreakerPlayerSetSkillNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BrickBreakerSetReadyReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BrickBreakerSetReadyRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BrickBreakerSelectAvatarReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BrickBreakerSelectAvatarRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BrickBreakerSelectSkillReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BrickBreakerSelectSkillRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BrickBreakerSetChangingReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BrickBreakerSetChangingRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BrickBreakerPlayerSetChangingNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CoinCollectTeamAvatarInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CoinCollectPlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CoinCollectPrepareStageNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LanV3BoatSettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LanV3BoatSettleNotify_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cmd/cmd_multistage_play.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[16].reflection = InBattleMechanicusBuildingPointsNotify::InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry::CreateReflection(file_level_metadata[16].descriptor, _InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[24].reflection = InBattleMechanicusCardResultNotify::InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry::CreateReflection(file_level_metadata[24].descriptor, _InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[34].reflection = FleurFairGallerySettleInfo::FleurFairGallerySettleInfo_EnergyStatMapEntry::CreateReflection(file_level_metadata[34].descriptor, _FleurFairGallerySettleInfo_EnergyStatMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[41].reflection = HideAndSeekStageInfo::HideAndSeekStageInfo_BattleInfoMapEntry::CreateReflection(file_level_metadata[41].descriptor, _HideAndSeekStageInfo_BattleInfoMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[52].reflection = InBattleChessInfo::InBattleChessInfo_PlayerInfoMapEntry::CreateReflection(file_level_metadata[52].descriptor, _InBattleChessInfo_PlayerInfoMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[59].reflection = ChessMysteryInfo::ChessMysteryInfo_EntrancePointMapEntry::CreateReflection(file_level_metadata[59].descriptor, _ChessMysteryInfo_EntrancePointMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[60].reflection = ChessMysteryInfo::ChessMysteryInfo_DetailInfoMapEntry::CreateReflection(file_level_metadata[60].descriptor, _ChessMysteryInfo_DetailInfoMapEntry_default_instance_._instance.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 100);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::protobuf_define_2eproto::InitDefaults();
  _InBattleMechanicusBuildingInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleMechanicusBuildingInfo_default_instance_);_InBattleMechanicusPlayerInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleMechanicusPlayerInfo_default_instance_);_InBattleMechanicusMonsterInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleMechanicusMonsterInfo_default_instance_);_InBattleMechanicusCardInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleMechanicusCardInfo_default_instance_);_InBattleMechanicusInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleMechanicusInfo_default_instance_);_InBattleFleurFairInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleFleurFairInfo_default_instance_);_CharAmusementAvatarInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CharAmusementAvatarInfo_default_instance_);_CharAmusementInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CharAmusementInfo_default_instance_);_BrickBreakerStageInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BrickBreakerStageInfo_default_instance_);_CoinCollectStageInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CoinCollectStageInfo_default_instance_);_LanV3BoatStageInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LanV3BoatStageInfo_default_instance_);_MultistagePlayInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MultistagePlayInfo_default_instance_);_MultistagePlayInfoNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MultistagePlayInfoNotify_default_instance_);_MultistagePlayFinishStageReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MultistagePlayFinishStageReq_default_instance_);_InBattleMechanicusExcapeMonsterNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleMechanicusExcapeMonsterNotify_default_instance_);_InBattleMechanicusLeftMonsterNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleMechanicusLeftMonsterNotify_default_instance_);_InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry_default_instance_);_InBattleMechanicusBuildingPointsNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleMechanicusBuildingPointsNotify_default_instance_);_InBattleMechanicusPickCardReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleMechanicusPickCardReq_default_instance_);_InBattleMechanicusPickCardRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleMechanicusPickCardRsp_default_instance_);_InBattleMechanicusPickCardNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleMechanicusPickCardNotify_default_instance_);_InBattleMechanicusConfirmCardReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleMechanicusConfirmCardReq_default_instance_);_InBattleMechanicusConfirmCardRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleMechanicusConfirmCardRsp_default_instance_);_InBattleMechanicusConfirmCardNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleMechanicusConfirmCardNotify_default_instance_);_InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry_default_instance_);_InBattleMechanicusCardResultNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleMechanicusCardResultNotify_default_instance_);_MultistagePlayFinishStageRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MultistagePlayFinishStageRsp_default_instance_);_MultistageSettleWatcherInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MultistageSettleWatcherInfo_default_instance_);_InBattleMechanicusSettleNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleMechanicusSettleNotify_default_instance_);_InBattleMechanicusSettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleMechanicusSettleInfo_default_instance_);_MultistagePlaySettleNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MultistagePlaySettleNotify_default_instance_);_MultistagePlayStageEndNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MultistagePlayStageEndNotify_default_instance_);_MultistagePlayEndNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MultistagePlayEndNotify_default_instance_);_FleurFairBuffEnergyNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FleurFairBuffEnergyNotify_default_instance_);_FleurFairGallerySettleInfo_EnergyStatMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FleurFairGallerySettleInfo_EnergyStatMapEntry_default_instance_);_FleurFairGallerySettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FleurFairGallerySettleInfo_default_instance_);_FleurFairPlayerStatInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FleurFairPlayerStatInfo_default_instance_);_FleurFairBossSettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FleurFairBossSettleInfo_default_instance_);_FleurFairStageSettleNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FleurFairStageSettleNotify_default_instance_);_FleurFairFinishGalleryStageNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FleurFairFinishGalleryStageNotify_default_instance_);_HideAndSeekPlayerBattleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HideAndSeekPlayerBattleInfo_default_instance_);_HideAndSeekStageInfo_BattleInfoMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HideAndSeekStageInfo_BattleInfoMapEntry_default_instance_);_HideAndSeekStageInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HideAndSeekStageInfo_default_instance_);_HideAndSeekSelectAvatarReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HideAndSeekSelectAvatarReq_default_instance_);_HideAndSeekSelectAvatarRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HideAndSeekSelectAvatarRsp_default_instance_);_HideAndSeekSetReadyReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HideAndSeekSetReadyReq_default_instance_);_HideAndSeekSetReadyRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HideAndSeekSetReadyRsp_default_instance_);_HideAndSeekSettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HideAndSeekSettleInfo_default_instance_);_HideAndSeekSettleNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HideAndSeekSettleNotify_default_instance_);_HideAndSeekPlayerReadyNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HideAndSeekPlayerReadyNotify_default_instance_);_HideAndSeekPlayerSetAvatarNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HideAndSeekPlayerSetAvatarNotify_default_instance_);_ChessCardInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChessCardInfo_default_instance_);_InBattleChessInfo_PlayerInfoMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleChessInfo_PlayerInfoMapEntry_default_instance_);_InBattleChessInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleChessInfo_default_instance_);_InBattleChessSettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleChessSettleInfo_default_instance_);_ChessPlayerInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChessPlayerInfo_default_instance_);_ChessMonsterInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChessMonsterInfo_default_instance_);_ChessEntranceInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChessEntranceInfo_default_instance_);_ChessEntranceDetailInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChessEntranceDetailInfo_default_instance_);_ChessMysteryInfo_EntrancePointMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChessMysteryInfo_EntrancePointMapEntry_default_instance_);_ChessMysteryInfo_DetailInfoMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChessMysteryInfo_DetailInfoMapEntry_default_instance_);_ChessMysteryInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChessMysteryInfo_default_instance_);_ChessNormalCardInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChessNormalCardInfo_default_instance_);_ChessPickCardReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChessPickCardReq_default_instance_);_ChessPickCardRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChessPickCardRsp_default_instance_);_ChessPickCardNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChessPickCardNotify_default_instance_);_ChessManualRefreshCardsReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChessManualRefreshCardsReq_default_instance_);_ChessManualRefreshCardsRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChessManualRefreshCardsRsp_default_instance_);_ChessPlayerInfoNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChessPlayerInfoNotify_default_instance_);_ChessLeftMonstersNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChessLeftMonstersNotify_default_instance_);_ChessEscapedMonstersNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChessEscapedMonstersNotify_default_instance_);_ChessSelectedCardsNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChessSelectedCardsNotify_default_instance_);_GlobalBuildingInfoNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GlobalBuildingInfoNotify_default_instance_);_InBattleIrodoriChessInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleIrodoriChessInfo_default_instance_);_IrodoriChessMonsterInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IrodoriChessMonsterInfo_default_instance_);_IrodoriChessEntranceInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IrodoriChessEntranceInfo_default_instance_);_IrodoriChessEntranceDetailInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IrodoriChessEntranceDetailInfo_default_instance_);_IrodoriChessMysteryInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IrodoriChessMysteryInfo_default_instance_);_InBattleIrodoriChessSettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InBattleIrodoriChessSettleInfo_default_instance_);_IrodoriChessPlayerInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IrodoriChessPlayerInfo_default_instance_);_IrodoriChessPlayerInfoNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IrodoriChessPlayerInfoNotify_default_instance_);_IrodoriChessLeftMonsterNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IrodoriChessLeftMonsterNotify_default_instance_);_BrickBreakerPlayerBattleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BrickBreakerPlayerBattleInfo_default_instance_);_BrickBreakerPlayerReadyNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BrickBreakerPlayerReadyNotify_default_instance_);_BrickBreakerPlayerSetAvatarNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BrickBreakerPlayerSetAvatarNotify_default_instance_);_BrickBreakerPlayerSetSkillNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BrickBreakerPlayerSetSkillNotify_default_instance_);_BrickBreakerSetReadyReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BrickBreakerSetReadyReq_default_instance_);_BrickBreakerSetReadyRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BrickBreakerSetReadyRsp_default_instance_);_BrickBreakerSelectAvatarReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BrickBreakerSelectAvatarReq_default_instance_);_BrickBreakerSelectAvatarRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BrickBreakerSelectAvatarRsp_default_instance_);_BrickBreakerSelectSkillReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BrickBreakerSelectSkillReq_default_instance_);_BrickBreakerSelectSkillRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BrickBreakerSelectSkillRsp_default_instance_);_BrickBreakerSetChangingReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BrickBreakerSetChangingReq_default_instance_);_BrickBreakerSetChangingRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BrickBreakerSetChangingRsp_default_instance_);_BrickBreakerPlayerSetChangingNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BrickBreakerPlayerSetChangingNotify_default_instance_);_CoinCollectTeamAvatarInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CoinCollectTeamAvatarInfo_default_instance_);_CoinCollectPlayerInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CoinCollectPlayerInfo_default_instance_);_CoinCollectPrepareStageNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CoinCollectPrepareStageNotify_default_instance_);_LanV3BoatSettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LanV3BoatSettleInfo_default_instance_);_LanV3BoatSettleNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LanV3BoatSettleNotify_default_instance_);_MultistagePlayInfo_default_instance_.mechanicus_info_ = const_cast< ::proto::InBattleMechanicusInfo*>(
      ::proto::InBattleMechanicusInfo::internal_default_instance());
  _MultistagePlayInfo_default_instance_.fleur_fair_info_ = const_cast< ::proto::InBattleFleurFairInfo*>(
      ::proto::InBattleFleurFairInfo::internal_default_instance());
  _MultistagePlayInfo_default_instance_.hide_and_seek_info_ = const_cast< ::proto::HideAndSeekStageInfo*>(
      ::proto::HideAndSeekStageInfo::internal_default_instance());
  _MultistagePlayInfo_default_instance_.chess_info_ = const_cast< ::proto::InBattleChessInfo*>(
      ::proto::InBattleChessInfo::internal_default_instance());
  _MultistagePlayInfo_default_instance_.irodori_chess_info_ = const_cast< ::proto::InBattleIrodoriChessInfo*>(
      ::proto::InBattleIrodoriChessInfo::internal_default_instance());
  _MultistagePlayInfo_default_instance_.char_amusement_info_ = const_cast< ::proto::CharAmusementInfo*>(
      ::proto::CharAmusementInfo::internal_default_instance());
  _MultistagePlayInfo_default_instance_.brick_breaker_info_ = const_cast< ::proto::BrickBreakerStageInfo*>(
      ::proto::BrickBreakerStageInfo::internal_default_instance());
  _MultistagePlayInfo_default_instance_.coin_collect_info_ = const_cast< ::proto::CoinCollectStageInfo*>(
      ::proto::CoinCollectStageInfo::internal_default_instance());
  _MultistagePlayInfo_default_instance_.lan_v3_boat_info_ = const_cast< ::proto::LanV3BoatStageInfo*>(
      ::proto::LanV3BoatStageInfo::internal_default_instance());
  _MultistagePlayInfoNotify_default_instance_._instance.get_mutable()->info_ = const_cast< ::proto::MultistagePlayInfo*>(
      ::proto::MultistagePlayInfo::internal_default_instance());
  _InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry_default_instance_._instance.get_mutable());
  _InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry_default_instance_._instance.get_mutable());
  _InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _MultistagePlaySettleNotify_default_instance_.mechanicus_settle_info_ = const_cast< ::proto::InBattleMechanicusSettleInfo*>(
      ::proto::InBattleMechanicusSettleInfo::internal_default_instance());
  _MultistagePlaySettleNotify_default_instance_.chess_settle_info_ = const_cast< ::proto::InBattleChessSettleInfo*>(
      ::proto::InBattleChessSettleInfo::internal_default_instance());
  _MultistagePlaySettleNotify_default_instance_.irodori_chess_settle_info_ = const_cast< ::proto::InBattleIrodoriChessSettleInfo*>(
      ::proto::InBattleIrodoriChessSettleInfo::internal_default_instance());
  _FleurFairGallerySettleInfo_EnergyStatMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_FleurFairGallerySettleInfo_EnergyStatMapEntry_default_instance_._instance.get_mutable());
  _FleurFairGallerySettleInfo_EnergyStatMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _FleurFairPlayerStatInfo_default_instance_._instance.get_mutable()->profile_picture_ = const_cast< ::proto::ProfilePicture*>(
      ::proto::ProfilePicture::internal_default_instance());
  _FleurFairStageSettleNotify_default_instance_.gallery_settle_info_ = const_cast< ::proto::FleurFairGallerySettleInfo*>(
      ::proto::FleurFairGallerySettleInfo::internal_default_instance());
  _FleurFairStageSettleNotify_default_instance_.boss_settle_info_ = const_cast< ::proto::FleurFairBossSettleInfo*>(
      ::proto::FleurFairBossSettleInfo::internal_default_instance());
  _HideAndSeekStageInfo_BattleInfoMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_HideAndSeekStageInfo_BattleInfoMapEntry_default_instance_._instance.get_mutable());
  _HideAndSeekStageInfo_BattleInfoMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _HideAndSeekSettleInfo_default_instance_._instance.get_mutable()->profile_picture_ = const_cast< ::proto::ProfilePicture*>(
      ::proto::ProfilePicture::internal_default_instance());
  _InBattleChessInfo_PlayerInfoMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_InBattleChessInfo_PlayerInfoMapEntry_default_instance_._instance.get_mutable());
  _InBattleChessInfo_PlayerInfoMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _InBattleChessInfo_default_instance_._instance.get_mutable()->mystery_info_ = const_cast< ::proto::ChessMysteryInfo*>(
      ::proto::ChessMysteryInfo::internal_default_instance());
  _ChessMysteryInfo_EntrancePointMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_ChessMysteryInfo_EntrancePointMapEntry_default_instance_._instance.get_mutable());
  _ChessMysteryInfo_EntrancePointMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _ChessMysteryInfo_DetailInfoMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_ChessMysteryInfo_DetailInfoMapEntry_default_instance_._instance.get_mutable());
  _ChessMysteryInfo_DetailInfoMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _ChessPickCardNotify_default_instance_._instance.get_mutable()->normal_card_info_ = const_cast< ::proto::ChessNormalCardInfo*>(
      ::proto::ChessNormalCardInfo::internal_default_instance());
  _ChessPlayerInfoNotify_default_instance_._instance.get_mutable()->player_info_ = const_cast< ::proto::ChessPlayerInfo*>(
      ::proto::ChessPlayerInfo::internal_default_instance());
  _InBattleIrodoriChessInfo_default_instance_._instance.get_mutable()->mystery_info_ = const_cast< ::proto::IrodoriChessMysteryInfo*>(
      ::proto::IrodoriChessMysteryInfo::internal_default_instance());
  _IrodoriChessMysteryInfo_default_instance_._instance.get_mutable()->entrance_detail_info_ = const_cast< ::proto::IrodoriChessEntranceDetailInfo*>(
      ::proto::IrodoriChessEntranceDetailInfo::internal_default_instance());
  _IrodoriChessPlayerInfoNotify_default_instance_._instance.get_mutable()->player_info_ = const_cast< ::proto::IrodoriChessPlayerInfo*>(
      ::proto::IrodoriChessPlayerInfo::internal_default_instance());
  _CoinCollectPrepareStageNotify_default_instance_._instance.get_mutable()->coin_collect_info_ = const_cast< ::proto::CoinCollectStageInfo*>(
      ::proto::CoinCollectStageInfo::internal_default_instance());
  _LanV3BoatSettleInfo_default_instance_._instance.get_mutable()->profile_picture_ = const_cast< ::proto::ProfilePicture*>(
      ::proto::ProfilePicture::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035cmd/cmd_multistage_play.proto\022\005proto\032\014"
      "define.proto\"p\n\036InBattleMechanicusBuildi"
      "ngInfo\022\023\n\013building_id\030\010 \001(\r\022\r\n\005level\030\007 \001"
      "(\r\022\023\n\013cost_points\030\002 \001(\r\022\025\n\rrefund_points"
      "\030\013 \001(\r\"\263\001\n\034InBattleMechanicusPlayerInfo\022"
      "\024\n\014pick_card_id\030\005 \001(\r\022\013\n\003uid\030\016 \001(\r\022<\n\rbu"
      "ilding_list\030\004 \003(\0132%.proto.InBattleMechan"
      "icusBuildingInfo\022\031\n\021is_card_confirmed\030\r "
      "\001(\010\022\027\n\017building_points\030\003 \001(\r\"Q\n\035InBattle"
      "MechanicusMonsterInfo\022\022\n\nmonster_id\030\001 \001("
      "\r\022\r\n\005level\030\016 \001(\r\022\r\n\005count\030\r \001(\r\"\310\001\n\032InBa"
      "ttleMechanicusCardInfo\022\026\n\016rand_effect_id"
      "\030\014 \001(\r\022\021\n\tend_round\030\003 \001(\r\022D\n\017challenge_s"
      "tate\030\005 \001(\0162+.proto.InBattleMechanicusCar"
      "dChallengeState\022\023\n\013cost_points\030\001 \001(\r\022\017\n\007"
      "card_id\030\013 \001(\r\022\023\n\013begin_round\030\010 \001(\r\"\333\004\n\026I"
      "nBattleMechanicusInfo\022\024\n\014left_monster\030\005 "
      "\001(\r\022\024\n\014wait_seconds\030\r \001(\r\022\026\n\rentrance_li"
      "st\030\232\003 \003(\r\022\021\n\texit_list\030s \003(\r\022<\n\021history_"
      "card_list\030\013 \003(\0132!.proto.InBattleMechanic"
      "usCardInfo\022\036\n\026max_excape_monster_num\030\n \001"
      "(\r\022\037\n\027building_stage_duration\030\004 \001(\r\022\023\n\013d"
      "uration_ms\030\010 \001(\004\0221\n\005stage\030\t \001(\0162\".proto."
      "InBattleMechanicusStageType\022\023\n\013total_rou"
      "nd\030\014 \001(\r\022:\n\014monster_list\030\016 \003(\0132$.proto.I"
      "nBattleMechanicusMonsterInfo\022\033\n\023excaped_"
      "monster_num\030\006 \001(\r\022\r\n\005round\030\003 \001(\r\0229\n\016pick"
      "_card_list\030\017 \003(\0132!.proto.InBattleMechani"
      "cusCardInfo\0228\n\013player_list\030\007 \003(\0132#.proto"
      ".InBattleMechanicusPlayerInfo\022\032\n\022wait_be"
      "gin_time_us\030\001 \001(\004\022\025\n\rbegin_time_ms\030\002 \001(\004"
      "\"\253\001\n\025InBattleFleurFairInfo\022\027\n\017gallery_id"
      "_list\030\005 \003(\r\022\033\n\023gallery_stage_index\030\006 \001(\r"
      "\022\033\n\023preview_stage_index\030\010 \001(\r\022\035\n\025ability"
      "_group_id_list\030\002 \003(\r\022 \n\030preview_display_"
      "duration\030\014 \001(\r\"S\n\027CharAmusementAvatarInf"
      "o\022\013\n\003uid\030\013 \001(\r\022\023\n\013punish_time\030\007 \001(\r\022\026\n\016a"
      "vatar_id_list\030\n \003(\r\"\247\001\n\021CharAmusementInf"
      "o\022\027\n\017total_cost_time\030\013 \001(\r\022\020\n\010stage_id\030\002"
      " \001(\r\022\020\n\010level_id\030\n \001(\r\022\033\n\023preview_stage_"
      "index\030\004 \001(\r\0228\n\020avatar_info_list\030\005 \003(\0132\036."
      "proto.CharAmusementAvatarInfo\"\232\001\n\025BrickB"
      "reakerStageInfo\022\020\n\010level_id\030\017 \001(\r\0220\n\nsta"
      "ge_type\030\001 \001(\0162\034.proto.BrickBreakerStageT"
      "ype\022=\n\020battle_info_list\030\002 \003(\0132#.proto.Br"
      "ickBreakerPlayerBattleInfo\"t\n\024CoinCollec"
      "tStageInfo\022\020\n\010level_id\030\003 \001(\r\022\022\n\nplay_ind"
      "ex\030\017 \001(\r\0226\n\020player_info_list\030\t \003(\0132\034.pro"
      "to.CoinCollectPlayerInfo\"P\n\022LanV3BoatSta"
      "geInfo\022\027\n\017player_uid_list\030\002 \003(\r\022\016\n\006map_i"
      "d\030\n \001(\r\022\021\n\tis_single\030\r \001(\010\"\261\005\n\022Multistag"
      "ePlayInfo\022\022\n\nplay_index\030\r \001(\r\022\021\n\tplay_ty"
      "pe\030\013 \001(\r\022\022\n\nstage_type\030\n \001(\r\022\020\n\010duration"
      "\030\010 \001(\r\022\020\n\010group_id\030\014 \001(\r\022\022\n\nbegin_time\030\t"
      " \001(\r\022\023\n\013stage_index\030\001 \001(\r\0229\n\017mechanicus_"
      "info\030\266\n \001(\0132\035.proto.InBattleMechanicusIn"
      "foH\000\0228\n\017fleur_fair_info\030\250\010 \001(\0132\034.proto.I"
      "nBattleFleurFairInfoH\000\0229\n\022hide_and_seek_"
      "info\030l \001(\0132\033.proto.HideAndSeekStageInfoH"
      "\000\022/\n\nchess_info\030\336\r \001(\0132\030.proto.InBattleC"
      "hessInfoH\000\022>\n\022irodori_chess_info\030\223\004 \001(\0132"
      "\037.proto.InBattleIrodoriChessInfoH\000\0228\n\023ch"
      "ar_amusement_info\030\304\002 \001(\0132\030.proto.CharAmu"
      "sementInfoH\000\022;\n\022brick_breaker_info\030\254\017 \001("
      "\0132\034.proto.BrickBreakerStageInfoH\000\0229\n\021coi"
      "n_collect_info\030\253\010 \001(\0132\033.proto.CoinCollec"
      "tStageInfoH\000\0226\n\020lan_v3_boat_info\030\211\016 \001(\0132"
      "\031.proto.LanV3BoatStageInfoH\000B\010\n\006detail\"C"
      "\n\030MultistagePlayInfoNotify\022\'\n\004info\030\r \001(\013"
      "2\031.proto.MultistagePlayInfo\"D\n\034Multistag"
      "ePlayFinishStageReq\022\020\n\010group_id\030\014 \001(\r\022\022\n"
      "\nplay_index\030\017 \001(\r\"D\n%InBattleMechanicusE"
      "xcapeMonsterNotify\022\033\n\023excaped_monster_nu"
      "m\030\004 \001(\r\";\n#InBattleMechanicusLeftMonster"
      "Notify\022\024\n\014left_monster\030\016 \001(\r\"\330\001\n&InBattl"
      "eMechanicusBuildingPointsNotify\022n\n\032playe"
      "r_building_points_map\030\004 \003(\0132J.proto.InBa"
      "ttleMechanicusBuildingPointsNotify.Playe"
      "rBuildingPointsMapEntry\032>\n\034PlayerBuildin"
      "gPointsMapEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 "
      "\001(\r:\0028\001\"V\n\035InBattleMechanicusPickCardReq"
      "\022\020\n\010group_id\030\013 \001(\r\022\022\n\nplay_index\030\007 \001(\r\022\017"
      "\n\007card_id\030\001 \001(\r\"g\n\035InBattleMechanicusPic"
      "kCardRsp\022\017\n\007retcode\030\013 \001(\005\022\017\n\007card_id\030\002 \001"
      "(\r\022\022\n\nplay_index\030\004 \001(\r\022\020\n\010group_id\030\t \001(\r"
      "\"m\n InBattleMechanicusPickCardNotify\022\022\n\n"
      "player_uid\030\006 \001(\r\022\020\n\010group_id\030\007 \001(\r\022\022\n\npl"
      "ay_index\030\010 \001(\r\022\017\n\007card_id\030\n \001(\r\"Y\n InBat"
      "tleMechanicusConfirmCardReq\022\022\n\nplay_inde"
      "x\030\006 \001(\r\022\017\n\007card_id\030\001 \001(\r\022\020\n\010group_id\030\003 \001"
      "(\r\"j\n InBattleMechanicusConfirmCardRsp\022\022"
      "\n\nplay_index\030\002 \001(\r\022\017\n\007card_id\030\016 \001(\r\022\017\n\007r"
      "etcode\030\013 \001(\005\022\020\n\010group_id\030\006 \001(\r\"p\n#InBatt"
      "leMechanicusConfirmCardNotify\022\022\n\nplay_in"
      "dex\030\013 \001(\r\022\017\n\007card_id\030\r \001(\r\022\020\n\010group_id\030\n"
      " \001(\r\022\022\n\nplayer_uid\030\002 \001(\r\"\333\002\n\"InBattleMec"
      "hanicusCardResultNotify\022\024\n\014wait_seconds\030"
      "\006 \001(\r\022\020\n\010group_id\030\002 \001(\r\0224\n\tcard_list\030\t \003"
      "(\0132!.proto.InBattleMechanicusCardInfo\022\032\n"
      "\022wait_begin_time_us\030\007 \001(\004\022h\n\031player_conf"
      "irmed_card_map\030\014 \003(\0132E.proto.InBattleMec"
      "hanicusCardResultNotify.PlayerConfirmedC"
      "ardMapEntry\022\022\n\nplay_index\030\010 \001(\r\032=\n\033Playe"
      "rConfirmedCardMapEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005v"
      "alue\030\002 \001(\r:\0028\001\"U\n\034MultistagePlayFinishSt"
      "ageRsp\022\017\n\007retcode\030\013 \001(\005\022\020\n\010group_id\030\014 \001("
      "\r\022\022\n\nplay_index\030\006 \001(\r\"s\n\033MultistageSettl"
      "eWatcherInfo\022\026\n\016total_progress\030\r \001(\r\022\024\n\014"
      "cur_progress\030\005 \001(\r\022\022\n\nwatcher_id\030\007 \001(\r\022\022"
      "\n\nis_inverse\030\014 \001(\010\"\363\001\n\036InBattleMechanicu"
      "sSettleNotify\022\020\n\010group_id\030\017 \001(\r\022\025\n\rscene"
      "_time_ms\030\013 \001(\004\022\035\n\025difficulty_percentage\030"
      "\006 \001(\r\022\023\n\013total_token\030\007 \001(\r\0228\n\014watcher_li"
      "st\030\003 \003(\0132\".proto.MultistageSettleWatcher"
      "Info\022\022\n\nreal_token\030\r \001(\r\022\022\n\nis_success\030\002"
      " \001(\010\022\022\n\nplay_index\030\016 \001(\r\"\361\001\n\034InBattleMec"
      "hanicusSettleInfo\022\025\n\rscene_time_ms\030\017 \001(\004"
      "\022\023\n\013total_token\030\004 \001(\r\022\022\n\nreal_token\030\010 \001("
      "\r\0228\n\014watcher_list\030\007 \003(\0132\".proto.Multista"
      "geSettleWatcherInfo\022\022\n\nis_success\030\006 \001(\010\022"
      "\022\n\nplay_index\030\003 \001(\r\022\035\n\025difficulty_percen"
      "tage\030\n \001(\r\022\020\n\010group_id\030\r \001(\r\"\237\002\n\032Multist"
      "agePlaySettleNotify\022\022\n\nplay_index\030\016 \001(\r\022"
      "\020\n\010group_id\030\004 \001(\r\022F\n\026mechanicus_settle_i"
      "nfo\030\372\n \001(\0132#.proto.InBattleMechanicusSet"
      "tleInfoH\000\022<\n\021chess_settle_info\030\203\n \001(\0132\036."
      "proto.InBattleChessSettleInfoH\000\022K\n\031irodo"
      "ri_chess_settle_info\030\344\004 \001(\0132%.proto.InBa"
      "ttleIrodoriChessSettleInfoH\000B\010\n\006detail\"D"
      "\n\034MultistagePlayStageEndNotify\022\020\n\010group_"
      "id\030\017 \001(\r\022\022\n\nplay_index\030\t \001(\r\"\?\n\027Multista"
      "gePlayEndNotify\022\020\n\010group_id\030\005 \001(\r\022\022\n\npla"
      "y_index\030\r \001(\r\"+\n\031FleurFairBuffEnergyNoti"
      "fy\022\016\n\006energy\030\004 \001(\r\"\377\001\n\032FleurFairGalleryS"
      "ettleInfo\022\016\n\006energy\030\002 \001(\r\022\033\n\023gallery_sta"
      "ge_index\030\013 \001(\r\022M\n\017energy_stat_map\030\006 \003(\0132"
      "4.proto.FleurFairGallerySettleInfo.Energ"
      "yStatMapEntry\022\033\n\023gallery_stage_count\030\t \001"
      "(\r\022\022\n\nis_success\030\001 \001(\010\0324\n\022EnergyStatMapE"
      "ntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\005:\0028\001\"\260\001\n"
      "\027FleurFairPlayerStatInfo\022\021\n\tonline_id\030\013 "
      "\001(\t\022\013\n\003uid\030\010 \001(\r\022.\n\017profile_picture\030\001 \001("
      "\0132\025.proto.ProfilePicture\022\017\n\007stat_id\030\003 \001("
      "\r\022\022\n\nhead_image\030\006 \001(\r\022\021\n\tnick_name\030\017 \001(\t"
      "\022\r\n\005param\030\005 \001(\005\"\242\001\n\027FleurFairBossSettleI"
      "nfo\022\030\n\020reward_token_num\030\017 \001(\r\0226\n\016stat_in"
      "fo_list\030\001 \003(\0132\036.proto.FleurFairPlayerSta"
      "tInfo\022\022\n\nis_success\030\n \001(\010\022\016\n\006energy\030\014 \001("
      "\r\022\021\n\tcost_time\030\010 \001(\r\"\270\001\n\032FleurFairStageS"
      "ettleNotify\022\022\n\nstage_type\030\n \001(\r\022@\n\023galle"
      "ry_settle_info\030\r \001(\0132!.proto.FleurFairGa"
      "llerySettleInfoH\000\022:\n\020boss_settle_info\030\016 "
      "\001(\0132\036.proto.FleurFairBossSettleInfoH\000B\010\n"
      "\006detail\"#\n!FleurFairFinishGalleryStageNo"
      "tify\"j\n\033HideAndSeekPlayerBattleInfo\022\022\n\nc"
      "ostume_id\030\003 \001(\r\022\022\n\nskill_list\030\017 \003(\r\022\020\n\010i"
      "s_ready\030\014 \001(\010\022\021\n\tavatar_id\030\006 \001(\r\"\277\002\n\024Hid"
      "eAndSeekStageInfo\022\016\n\006map_id\030\010 \001(\r\022\027\n\017is_"
      "record_score\030\003 \001(\010\022/\n\nstage_type\030\007 \001(\0162\033"
      ".proto.HideAndSeekStageType\022G\n\017battle_in"
      "fo_map\030\002 \003(\0132..proto.HideAndSeekStageInf"
      "o.BattleInfoMapEntry\022\026\n\016hider_uid_list\030\001"
      " \003(\r\022\022\n\nhunter_uid\030\n \001(\r\032X\n\022BattleInfoMa"
      "pEntry\022\013\n\003key\030\001 \001(\r\0221\n\005value\030\002 \001(\0132\".pro"
      "to.HideAndSeekPlayerBattleInfo:\0028\001\"/\n\032Hi"
      "deAndSeekSelectAvatarReq\022\021\n\tavatar_id\030\010 "
      "\001(\r\"@\n\032HideAndSeekSelectAvatarRsp\022\017\n\007ret"
      "code\030\002 \001(\005\022\021\n\tavatar_id\030\003 \001(\r\"\030\n\026HideAnd"
      "SeekSetReadyReq\")\n\026HideAndSeekSetReadyRs"
      "p\022\017\n\007retcode\030\013 \001(\005\"\276\001\n\025HideAndSeekSettle"
      "Info\022\013\n\003uid\030\002 \001(\r\022.\n\017profile_picture\030\001 \001"
      "(\0132\025.proto.ProfilePicture\022/\n\tcard_list\030\010"
      " \003(\0132\034.proto.ExhibitionDisplayInfo\022\020\n\010ni"
      "ckname\030\003 \001(\t\022\022\n\nhead_image\030\004 \001(\r\022\021\n\tonli"
      "ne_id\030\n \001(\t\"\202\003\n\027HideAndSeekSettleNotify\022"
      "\021\n\tcost_time\030\002 \001(\r\0226\n\020settle_info_list\030\010"
      " \003(\0132\034.proto.HideAndSeekSettleInfo\022\023\n\013wi"
      "nner_list\030\017 \003(\r\022;\n\006reason\030\004 \001(\0162+.proto."
      "HideAndSeekSettleNotify.SettleReason\022\022\n\n"
      "play_index\030\r \001(\r\022\027\n\017is_record_score\030\006 \001("
      "\010\0220\n\nscore_list\030\t \003(\0132\034.proto.Exhibition"
      "DisplayInfo\022\022\n\nstage_type\030\016 \001(\r\"W\n\014Settl"
      "eReason\022\032\n\026SETTLE_REASON_TIME_OUT\020\000\022\023\n\017S"
      "ETTLE_PLAY_END\020\001\022\026\n\022SETTLE_PLAYER_QUIT\020\002"
      "\"0\n\034HideAndSeekPlayerReadyNotify\022\020\n\010uid_"
      "list\030\005 \003(\r\"V\n HideAndSeekPlayerSetAvatar"
      "Notify\022\021\n\tavatar_id\030\002 \001(\r\022\022\n\ncostume_id\030"
      "\r \001(\r\022\013\n\003uid\030\005 \001(\r\"6\n\rChessCardInfo\022\024\n\014e"
      "ffect_stack\030\014 \001(\r\022\017\n\007card_id\030\013 \001(\r\"\235\003\n\021I"
      "nBattleChessInfo\022\031\n\021ban_card_tag_list\030\002 "
      "\003(\r\022\r\n\005round\030\004 \001(\r\0225\n\027selected_card_info"
      "_list\030\t \003(\0132\024.proto.ChessCardInfo\022-\n\014mys"
      "tery_info\030\001 \001(\0132\027.proto.ChessMysteryInfo"
      "\022D\n\017player_info_map\030\010 \003(\0132+.proto.InBatt"
      "leChessInfo.PlayerInfoMapEntry\022\036\n\026max_es"
      "capable_monsters\030\006 \001(\r\022\030\n\020excaped_monste"
      "rs\030\014 \001(\r\022\023\n\013total_round\030\016 \001(\r\022\025\n\rleft_mo"
      "nsters\030\017 \001(\r\032L\n\022PlayerInfoMapEntry\022\013\n\003ke"
      "y\030\001 \001(\r\022%\n\005value\030\002 \001(\0132\026.proto.ChessPlay"
      "erInfo:\0028\001\"\316\001\n\027InBattleChessSettleInfo\022\022"
      "\n\nis_success\030\007 \001(\010\022\021\n\tchess_exp\030\013 \001(\r\022\023\n"
      "\013chess_level\030\r \001(\r\022\027\n\017old_chess_level\030\n "
      "\001(\r\0220\n\nscore_list\030\001 \003(\0132\034.proto.Exhibiti"
      "onDisplayInfo\022\025\n\rscene_time_ms\030\016 \001(\004\022\025\n\r"
      "old_chess_exp\030\002 \001(\r\"\334\001\n\017ChessPlayerInfo\022"
      "\013\n\003uid\030\005 \001(\r\022\032\n\022free_refresh_limit\030\n \001(\r"
      "\022<\n\030candidate_card_info_list\030\003 \003(\0132\032.pro"
      "to.ChessNormalCardInfo\022\027\n\017building_point"
      "s\030\014 \001(\r\022\027\n\017candidate_index\030\006 \001(\r\022\032\n\022free"
      "_refresh_count\030\r \001(\r\022\024\n\014refresh_cost\030\007 \001"
      "(\r\"I\n\020ChessMonsterInfo\022\022\n\nmonster_id\030\014 \001"
      "(\r\022\r\n\005level\030\002 \001(\r\022\022\n\naffix_list\030\r \003(\r\"z\n"
      "\021ChessEntranceInfo\0222\n\021monster_info_list\030"
      "\016 \003(\0132\027.proto.ChessMonsterInfo\022\026\n\016entran"
      "ce_index\030\017 \001(\r\022\031\n\021entrance_point_id\030\010 \001("
      "\r\"F\n\027ChessEntranceDetailInfo\022+\n\tinfo_lis"
      "t\030\004 \003(\0132\030.proto.ChessEntranceInfo\"\315\002\n\020Ch"
      "essMysteryInfo\022I\n\022entrance_point_map\030\r \003"
      "(\0132-.proto.ChessMysteryInfo.EntrancePoin"
      "tMapEntry\022\032\n\022exit_point_id_list\030\003 \003(\r\022C\n"
      "\017detail_info_map\030\005 \003(\0132*.proto.ChessMyst"
      "eryInfo.DetailInfoMapEntry\0327\n\025EntrancePo"
      "intMapEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:"
      "\0028\001\032T\n\022DetailInfoMapEntry\022\013\n\003key\030\001 \001(\r\022-"
      "\n\005value\030\002 \001(\0132\036.proto.ChessEntranceDetai"
      "lInfo:\0028\001\"T\n\023ChessNormalCardInfo\022\017\n\007card"
      "_id\030\002 \001(\r\022\023\n\013cost_points\030\017 \001(\r\022\027\n\017is_att"
      "ach_curse\030\006 \001(\010\"7\n\020ChessPickCardReq\022\017\n\007c"
      "ard_id\030\001 \001(\r\022\022\n\ncard_index\030\004 \001(\r\"H\n\020Ches"
      "sPickCardRsp\022\022\n\ncard_index\030\013 \001(\r\022\017\n\007card"
      "_id\030\001 \001(\r\022\017\n\007retcode\030\004 \001(\005\"b\n\023ChessPickC"
      "ardNotify\022\025\n\rcurse_card_id\030\r \001(\r\0224\n\020norm"
      "al_card_info\030\001 \001(\0132\032.proto.ChessNormalCa"
      "rdInfo\"\034\n\032ChessManualRefreshCardsReq\"-\n\032"
      "ChessManualRefreshCardsRsp\022\017\n\007retcode\030\014 "
      "\001(\005\"D\n\025ChessPlayerInfoNotify\022+\n\013player_i"
      "nfo\030\n \001(\0132\026.proto.ChessPlayerInfo\"0\n\027Che"
      "ssLeftMonstersNotify\022\025\n\rleft_monsters\030\006 "
      "\001(\r\"6\n\032ChessEscapedMonstersNotify\022\030\n\020exc"
      "aped_monsters\030\016 \001(\r\"Q\n\030ChessSelectedCard"
      "sNotify\0225\n\027selected_card_info_list\030\004 \003(\013"
      "2\024.proto.ChessCardInfo\"l\n\030GlobalBuilding"
      "InfoNotify\022\023\n\013current_num\030\005 \001(\r\022*\n\rbuild"
      "ing_list\030\003 \003(\0132\023.proto.BuildingInfo\022\017\n\007m"
      "ax_num\030\r \001(\r\"\265\001\n\030InBattleIrodoriChessInf"
      "o\0224\n\014mystery_info\030\003 \001(\0132\036.proto.IrodoriC"
      "hessMysteryInfo\022\025\n\rleft_monsters\030\014 \001(\r\022\035"
      "\n\025selected_card_id_list\030\r \003(\r\022\027\n\017buildin"
      "g_points\030\007 \001(\r\022\024\n\014settle_score\030\004 \001(\r\"f\n\027"
      "IrodoriChessMonsterInfo\022\024\n\014grant_points\030"
      "\006 \001(\r\022\r\n\005level\030\r \001(\r\022\022\n\nmonster_id\030\016 \001(\r"
      "\022\022\n\naffix_list\030\013 \003(\r\"p\n\030IrodoriChessEntr"
      "anceInfo\0229\n\021monster_info_list\030\006 \003(\0132\036.pr"
      "oto.IrodoriChessMonsterInfo\022\031\n\021entrance_"
      "point_id\030\004 \001(\r\"T\n\036IrodoriChessEntranceDe"
      "tailInfo\0222\n\tinfo_list\030\017 \003(\0132\037.proto.Irod"
      "oriChessEntranceInfo\"\232\001\n\027IrodoriChessMys"
      "teryInfo\022C\n\024entrance_detail_info\030\005 \001(\0132%"
      ".proto.IrodoriChessEntranceDetailInfo\022\036\n"
      "\026entrance_point_id_list\030\002 \003(\r\022\032\n\022exit_po"
      "int_id_list\030\r \003(\r\"\253\001\n\036InBattleIrodoriChe"
      "ssSettleInfo\022\025\n\ris_new_record\030\005 \001(\010\022\027\n\017i"
      "s_activity_end\030\002 \001(\010\022\025\n\rscene_time_ms\030\001 "
      "\001(\004\022\024\n\014settle_score\030\003 \001(\r\022\022\n\nis_perfect\030"
      "\014 \001(\010\022\030\n\020kill_monster_num\030\007 \001(\r\"T\n\026Irodo"
      "riChessPlayerInfo\022\013\n\003uid\030\004 \001(\r\022\027\n\017buildi"
      "ng_points\030\t \001(\r\022\024\n\014settle_score\030\003 \001(\r\"R\n"
      "\034IrodoriChessPlayerInfoNotify\0222\n\013player_"
      "info\030\006 \001(\0132\035.proto.IrodoriChessPlayerInf"
      "o\"6\n\035IrodoriChessLeftMonsterNotify\022\025\n\rle"
      "ft_monsters\030\010 \001(\r\"\237\001\n\034BrickBreakerPlayer"
      "BattleInfo\022\022\n\nskill_list\030\n \003(\r\022\020\n\010is_rea"
      "dy\030\016 \001(\010\022\023\n\013is_changing\030\013 \001(\010\022\013\n\003uid\030\017 \001"
      "(\r\022\021\n\tavatar_id\030\t \003(\r\022\022\n\ncostume_id\030\r \003("
      "\r\022\020\n\010nickname\030\003 \001(\t\"1\n\035BrickBreakerPlaye"
      "rReadyNotify\022\020\n\010uid_list\030\016 \003(\r\"a\n!BrickB"
      "reakerPlayerSetAvatarNotify\022\026\n\016avatar_id"
      "_list\030\010 \003(\r\022\027\n\017costume_id_list\030\013 \003(\r\022\013\n\003"
      "uid\030\t \001(\r\"F\n BrickBreakerPlayerSetSkillN"
      "otify\022\013\n\003uid\030\010 \001(\r\022\025\n\rskill_id_list\030\016 \003("
      "\r\"\031\n\027BrickBreakerSetReadyReq\"*\n\027BrickBre"
      "akerSetReadyRsp\022\017\n\007retcode\030\002 \001(\005\"0\n\033Bric"
      "kBreakerSelectAvatarReq\022\021\n\tavatar_id\030\002 \003"
      "(\r\"A\n\033BrickBreakerSelectAvatarRsp\022\021\n\tava"
      "tar_id\030\010 \003(\r\022\017\n\007retcode\030\004 \001(\005\".\n\032BrickBr"
      "eakerSelectSkillReq\022\020\n\010skill_id\030\006 \003(\r\"\?\n"
      "\032BrickBreakerSelectSkillRsp\022\017\n\007retcode\030\n"
      " \001(\005\022\020\n\010skill_id\030\013 \003(\r\"1\n\032BrickBreakerSe"
      "tChangingReq\022\023\n\013is_changing\030\013 \001(\010\"-\n\032Bri"
      "ckBreakerSetChangingRsp\022\017\n\007retcode\030\002 \001(\005"
      "\"G\n#BrickBreakerPlayerSetChangingNotify\022"
      "\013\n\003uid\030\017 \001(\r\022\023\n\013is_changing\030\007 \001(\010\"B\n\031Coi"
      "nCollectTeamAvatarInfo\022\022\n\ncostume_id\030\004 \001"
      "(\r\022\021\n\tavatar_id\030\n \001(\r\"\251\001\n\025CoinCollectPla"
      "yerInfo\022\027\n\017choose_skill_no\030\005 \001(\r\022\022\n\nplay"
      "er_uid\030\014 \001(\r\022\023\n\013player_name\030\013 \001(\t\022\022\n\nis_"
      "prepare\030\016 \001(\010\022:\n\020avatar_info_list\030\n \003(\0132"
      " .proto.CoinCollectTeamAvatarInfo\"W\n\035Coi"
      "nCollectPrepareStageNotify\0226\n\021coin_colle"
      "ct_info\030\003 \001(\0132\033.proto.CoinCollectStageIn"
      "fo\"\274\001\n\023LanV3BoatSettleInfo\022\013\n\003uid\030\010 \001(\r\022"
      "\021\n\tonline_id\030\r \001(\t\022\022\n\nhead_image\030\n \001(\r\022\020"
      "\n\010nickname\030\016 \001(\t\022.\n\017profile_picture\030\014 \001("
      "\0132\025.proto.ProfilePicture\022/\n\tcard_list\030\001 "
      "\003(\0132\034.proto.ExhibitionDisplayInfo\"\354\001\n\025La"
      "nV3BoatSettleNotify\022\027\n\017is_gallery_succ\030\n"
      " \001(\010\022\027\n\017winner_uid_list\030\002 \003(\r\022\021\n\tis_sing"
      "le\030\010 \001(\010\022\022\n\nstage_type\030\014 \001(\r\0220\n\nscore_li"
      "st\030\001 \003(\0132\034.proto.ExhibitionDisplayInfo\0224"
      "\n\020settle_info_list\030\r \003(\0132\032.proto.LanV3Bo"
      "atSettleInfo\022\022\n\nplay_index\030\004 \001(\r*\265\003\n\022Mul"
      "tistagePlayType\022\034\n\030MULTISTAGE_PLAY_TYPE_"
      "NON\020\000\022#\n\037MULTISTAGE_PLAY_TYPE_MECHANICUS"
      "\020\001\022#\n\037MULTISTAGE_PLAY_TYPE_FLEUR_FAIR\020\002\022"
      "&\n\"MULTISTAGE_PLAY_TYPE_HIDE_AND_SEEK\020\003\022"
      ")\n%MULTISTAGE_PLAY_TYPE_BOUNCE_CONJURING"
      "\020\004\022\036\n\032MULTISTAGE_PLAY_TYPE_CHESS\020\005\022&\n\"MU"
      "LTISTAGE_PLAY_TYPE_IRODORI_CHESS\020\006\022\'\n#MU"
      "LTISTAGE_PLAY_TYPE_CHAR_AMUSEMENT\020\007\022&\n\"M"
      "ULTISTAGE_PLAY_TYPE_BRICK_BREAKER\020\010\022%\n!M"
      "ULTISTAGE_PLAY_TYPE_COIN_COLLECT\020\t\022$\n MU"
      "LTISTAGE_PLAY_TYPE_LAN_V3_BOAT\020\n*\267\001\n\033InB"
      "attleMechanicusStageType\022#\n\037IN_BATTLE_ME"
      "CHANICUS_STAGE_NONE\020\000\022$\n IN_BATTLE_MECHA"
      "NICUS_STAGE_BUILD\020\001\022(\n$IN_BATTLE_MECHANI"
      "CUS_STAGE_CARD_FLIP\020\002\022#\n\037IN_BATTLE_MECHA"
      "NICUS_STAGE_KILL\020\003*\345\001\n$InBattleMechanicu"
      "sCardChallengeState\022,\n(IN_BATTLE_MECHANI"
      "CUS_CARD_CHALLENGE_NONE\020\000\0220\n,IN_BATTLE_M"
      "ECHANICUS_CARD_CHALLENGE_ON_GOING\020\001\022,\n(I"
      "N_BATTLE_MECHANICUS_CARD_CHALLENGE_FAIL\020"
      "\002\022/\n+IN_BATTLE_MECHANICUS_CARD_CHALLENGE"
      "_SUCCESS\020\003*\317\001\n\024HideAndSeekStageType\022\037\n\033H"
      "IDE_AND_SEEK_STAGE_PREPARE\020\000\022\034\n\030HIDE_AND"
      "_SEEK_STAGE_PICK\020\001\022\034\n\030HIDE_AND_SEEK_STAG"
      "E_GAME\020\002\022\034\n\030HIDE_AND_SEEK_STAGE_HIDE\020\003\022\034"
      "\n\030HIDE_AND_SEEK_STAGE_SEEK\020\004\022\036\n\032HIDE_AND"
      "_SEEK_STAGE_SETTLE\020\005*\262\001\n\025BrickBreakerSta"
      "geType\022\037\n\033BRICK_BREAKER_STAGE_PREPARE\020\000\022"
      "\034\n\030BRICK_BREAKER_STAGE_PICK\020\001\022\034\n\030BRICK_B"
      "REAKER_STAGE_GAME\020\002\022\034\n\030BRICK_BREAKER_STA"
      "GE_PLAY\020\003\022\036\n\032BRICK_BREAKER_STAGE_SETTLE\020"
      "\004*\235\001\n\023LanV3BoatKickReason\022\033\n\027LAN_V3_KICK"
      "_REASON_NONE\020\000\022#\n\037LAN_V3_KICK_REASON_EXI"
      "T_VEHICLE\020\001\022!\n\035LAN_V3_KICK_REASON_AVATAR"
      "_DIE\020\002\022!\n\035LAN_V3_KICK_REASON_SLOW_ENTER\020"
      "\003B(Z&github.com/teyvat-helper/hk4e-proto"
      "/pbb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 13891);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cmd/cmd_multistage_play.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_define_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto

const ::google::protobuf::EnumDescriptor* HideAndSeekSettleNotify_SettleReason_descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_enum_descriptors[0];
}
bool HideAndSeekSettleNotify_SettleReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HideAndSeekSettleNotify_SettleReason HideAndSeekSettleNotify::SETTLE_REASON_TIME_OUT;
const HideAndSeekSettleNotify_SettleReason HideAndSeekSettleNotify::SETTLE_PLAY_END;
const HideAndSeekSettleNotify_SettleReason HideAndSeekSettleNotify::SETTLE_PLAYER_QUIT;
const HideAndSeekSettleNotify_SettleReason HideAndSeekSettleNotify::SettleReason_MIN;
const HideAndSeekSettleNotify_SettleReason HideAndSeekSettleNotify::SettleReason_MAX;
const int HideAndSeekSettleNotify::SettleReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MultistagePlayType_descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_enum_descriptors[1];
}
bool MultistagePlayType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* InBattleMechanicusStageType_descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_enum_descriptors[2];
}
bool InBattleMechanicusStageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* InBattleMechanicusCardChallengeState_descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_enum_descriptors[3];
}
bool InBattleMechanicusCardChallengeState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HideAndSeekStageType_descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_enum_descriptors[4];
}
bool HideAndSeekStageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BrickBreakerStageType_descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_enum_descriptors[5];
}
bool BrickBreakerStageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LanV3BoatKickReason_descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_enum_descriptors[6];
}
bool LanV3BoatKickReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InBattleMechanicusBuildingInfo::kBuildingIdFieldNumber;
const int InBattleMechanicusBuildingInfo::kLevelFieldNumber;
const int InBattleMechanicusBuildingInfo::kCostPointsFieldNumber;
const int InBattleMechanicusBuildingInfo::kRefundPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InBattleMechanicusBuildingInfo::InBattleMechanicusBuildingInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InBattleMechanicusBuildingInfo)
}
InBattleMechanicusBuildingInfo::InBattleMechanicusBuildingInfo(const InBattleMechanicusBuildingInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cost_points_, &from.cost_points_,
    static_cast<size_t>(reinterpret_cast<char*>(&refund_points_) -
    reinterpret_cast<char*>(&cost_points_)) + sizeof(refund_points_));
  // @@protoc_insertion_point(copy_constructor:proto.InBattleMechanicusBuildingInfo)
}

void InBattleMechanicusBuildingInfo::SharedCtor() {
  ::memset(&cost_points_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refund_points_) -
      reinterpret_cast<char*>(&cost_points_)) + sizeof(refund_points_));
  _cached_size_ = 0;
}

InBattleMechanicusBuildingInfo::~InBattleMechanicusBuildingInfo() {
  // @@protoc_insertion_point(destructor:proto.InBattleMechanicusBuildingInfo)
  SharedDtor();
}

void InBattleMechanicusBuildingInfo::SharedDtor() {
}

void InBattleMechanicusBuildingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InBattleMechanicusBuildingInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InBattleMechanicusBuildingInfo& InBattleMechanicusBuildingInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

InBattleMechanicusBuildingInfo* InBattleMechanicusBuildingInfo::New(::google::protobuf::Arena* arena) const {
  InBattleMechanicusBuildingInfo* n = new InBattleMechanicusBuildingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InBattleMechanicusBuildingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InBattleMechanicusBuildingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cost_points_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refund_points_) -
      reinterpret_cast<char*>(&cost_points_)) + sizeof(refund_points_));
  _internal_metadata_.Clear();
}

bool InBattleMechanicusBuildingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InBattleMechanicusBuildingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 cost_points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 building_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &building_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 refund_points = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refund_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InBattleMechanicusBuildingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InBattleMechanicusBuildingInfo)
  return false;
#undef DO_
}

void InBattleMechanicusBuildingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InBattleMechanicusBuildingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cost_points = 2;
  if (this->cost_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cost_points(), output);
  }

  // uint32 level = 7;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // uint32 building_id = 8;
  if (this->building_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->building_id(), output);
  }

  // uint32 refund_points = 11;
  if (this->refund_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->refund_points(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InBattleMechanicusBuildingInfo)
}

::google::protobuf::uint8* InBattleMechanicusBuildingInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InBattleMechanicusBuildingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cost_points = 2;
  if (this->cost_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cost_points(), target);
  }

  // uint32 level = 7;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  // uint32 building_id = 8;
  if (this->building_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->building_id(), target);
  }

  // uint32 refund_points = 11;
  if (this->refund_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->refund_points(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InBattleMechanicusBuildingInfo)
  return target;
}

size_t InBattleMechanicusBuildingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InBattleMechanicusBuildingInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 cost_points = 2;
  if (this->cost_points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cost_points());
  }

  // uint32 level = 7;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // uint32 building_id = 8;
  if (this->building_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->building_id());
  }

  // uint32 refund_points = 11;
  if (this->refund_points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->refund_points());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InBattleMechanicusBuildingInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InBattleMechanicusBuildingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InBattleMechanicusBuildingInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InBattleMechanicusBuildingInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InBattleMechanicusBuildingInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InBattleMechanicusBuildingInfo)
    MergeFrom(*source);
  }
}

void InBattleMechanicusBuildingInfo::MergeFrom(const InBattleMechanicusBuildingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InBattleMechanicusBuildingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cost_points() != 0) {
    set_cost_points(from.cost_points());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.building_id() != 0) {
    set_building_id(from.building_id());
  }
  if (from.refund_points() != 0) {
    set_refund_points(from.refund_points());
  }
}

void InBattleMechanicusBuildingInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InBattleMechanicusBuildingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InBattleMechanicusBuildingInfo::CopyFrom(const InBattleMechanicusBuildingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InBattleMechanicusBuildingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InBattleMechanicusBuildingInfo::IsInitialized() const {
  return true;
}

void InBattleMechanicusBuildingInfo::Swap(InBattleMechanicusBuildingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InBattleMechanicusBuildingInfo::InternalSwap(InBattleMechanicusBuildingInfo* other) {
  using std::swap;
  swap(cost_points_, other->cost_points_);
  swap(level_, other->level_);
  swap(building_id_, other->building_id_);
  swap(refund_points_, other->refund_points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InBattleMechanicusBuildingInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InBattleMechanicusBuildingInfo

// uint32 building_id = 8;
void InBattleMechanicusBuildingInfo::clear_building_id() {
  building_id_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusBuildingInfo::building_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusBuildingInfo.building_id)
  return building_id_;
}
void InBattleMechanicusBuildingInfo::set_building_id(::google::protobuf::uint32 value) {
  
  building_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusBuildingInfo.building_id)
}

// uint32 level = 7;
void InBattleMechanicusBuildingInfo::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusBuildingInfo::level() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusBuildingInfo.level)
  return level_;
}
void InBattleMechanicusBuildingInfo::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusBuildingInfo.level)
}

// uint32 cost_points = 2;
void InBattleMechanicusBuildingInfo::clear_cost_points() {
  cost_points_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusBuildingInfo::cost_points() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusBuildingInfo.cost_points)
  return cost_points_;
}
void InBattleMechanicusBuildingInfo::set_cost_points(::google::protobuf::uint32 value) {
  
  cost_points_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusBuildingInfo.cost_points)
}

// uint32 refund_points = 11;
void InBattleMechanicusBuildingInfo::clear_refund_points() {
  refund_points_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusBuildingInfo::refund_points() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusBuildingInfo.refund_points)
  return refund_points_;
}
void InBattleMechanicusBuildingInfo::set_refund_points(::google::protobuf::uint32 value) {
  
  refund_points_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusBuildingInfo.refund_points)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InBattleMechanicusPlayerInfo::kPickCardIdFieldNumber;
const int InBattleMechanicusPlayerInfo::kUidFieldNumber;
const int InBattleMechanicusPlayerInfo::kBuildingListFieldNumber;
const int InBattleMechanicusPlayerInfo::kIsCardConfirmedFieldNumber;
const int InBattleMechanicusPlayerInfo::kBuildingPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InBattleMechanicusPlayerInfo::InBattleMechanicusPlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InBattleMechanicusPlayerInfo)
}
InBattleMechanicusPlayerInfo::InBattleMechanicusPlayerInfo(const InBattleMechanicusPlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      building_list_(from.building_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&building_points_, &from.building_points_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&building_points_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:proto.InBattleMechanicusPlayerInfo)
}

void InBattleMechanicusPlayerInfo::SharedCtor() {
  ::memset(&building_points_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&building_points_)) + sizeof(uid_));
  _cached_size_ = 0;
}

InBattleMechanicusPlayerInfo::~InBattleMechanicusPlayerInfo() {
  // @@protoc_insertion_point(destructor:proto.InBattleMechanicusPlayerInfo)
  SharedDtor();
}

void InBattleMechanicusPlayerInfo::SharedDtor() {
}

void InBattleMechanicusPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InBattleMechanicusPlayerInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InBattleMechanicusPlayerInfo& InBattleMechanicusPlayerInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

InBattleMechanicusPlayerInfo* InBattleMechanicusPlayerInfo::New(::google::protobuf::Arena* arena) const {
  InBattleMechanicusPlayerInfo* n = new InBattleMechanicusPlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InBattleMechanicusPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InBattleMechanicusPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  building_list_.Clear();
  ::memset(&building_points_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&building_points_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

bool InBattleMechanicusPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InBattleMechanicusPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 building_points = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &building_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.InBattleMechanicusBuildingInfo building_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_building_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pick_card_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pick_card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_card_confirmed = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_card_confirmed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uid = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InBattleMechanicusPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InBattleMechanicusPlayerInfo)
  return false;
#undef DO_
}

void InBattleMechanicusPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InBattleMechanicusPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 building_points = 3;
  if (this->building_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->building_points(), output);
  }

  // repeated .proto.InBattleMechanicusBuildingInfo building_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->building_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->building_list(static_cast<int>(i)), output);
  }

  // uint32 pick_card_id = 5;
  if (this->pick_card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pick_card_id(), output);
  }

  // bool is_card_confirmed = 13;
  if (this->is_card_confirmed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_card_confirmed(), output);
  }

  // uint32 uid = 14;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InBattleMechanicusPlayerInfo)
}

::google::protobuf::uint8* InBattleMechanicusPlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InBattleMechanicusPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 building_points = 3;
  if (this->building_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->building_points(), target);
  }

  // repeated .proto.InBattleMechanicusBuildingInfo building_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->building_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->building_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 pick_card_id = 5;
  if (this->pick_card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pick_card_id(), target);
  }

  // bool is_card_confirmed = 13;
  if (this->is_card_confirmed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_card_confirmed(), target);
  }

  // uint32 uid = 14;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InBattleMechanicusPlayerInfo)
  return target;
}

size_t InBattleMechanicusPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InBattleMechanicusPlayerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.InBattleMechanicusBuildingInfo building_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->building_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->building_list(static_cast<int>(i)));
    }
  }

  // uint32 building_points = 3;
  if (this->building_points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->building_points());
  }

  // uint32 pick_card_id = 5;
  if (this->pick_card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pick_card_id());
  }

  // bool is_card_confirmed = 13;
  if (this->is_card_confirmed() != 0) {
    total_size += 1 + 1;
  }

  // uint32 uid = 14;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InBattleMechanicusPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InBattleMechanicusPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InBattleMechanicusPlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InBattleMechanicusPlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InBattleMechanicusPlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InBattleMechanicusPlayerInfo)
    MergeFrom(*source);
  }
}

void InBattleMechanicusPlayerInfo::MergeFrom(const InBattleMechanicusPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InBattleMechanicusPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  building_list_.MergeFrom(from.building_list_);
  if (from.building_points() != 0) {
    set_building_points(from.building_points());
  }
  if (from.pick_card_id() != 0) {
    set_pick_card_id(from.pick_card_id());
  }
  if (from.is_card_confirmed() != 0) {
    set_is_card_confirmed(from.is_card_confirmed());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void InBattleMechanicusPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InBattleMechanicusPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InBattleMechanicusPlayerInfo::CopyFrom(const InBattleMechanicusPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InBattleMechanicusPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InBattleMechanicusPlayerInfo::IsInitialized() const {
  return true;
}

void InBattleMechanicusPlayerInfo::Swap(InBattleMechanicusPlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InBattleMechanicusPlayerInfo::InternalSwap(InBattleMechanicusPlayerInfo* other) {
  using std::swap;
  building_list_.InternalSwap(&other->building_list_);
  swap(building_points_, other->building_points_);
  swap(pick_card_id_, other->pick_card_id_);
  swap(is_card_confirmed_, other->is_card_confirmed_);
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InBattleMechanicusPlayerInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InBattleMechanicusPlayerInfo

// uint32 pick_card_id = 5;
void InBattleMechanicusPlayerInfo::clear_pick_card_id() {
  pick_card_id_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusPlayerInfo::pick_card_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPlayerInfo.pick_card_id)
  return pick_card_id_;
}
void InBattleMechanicusPlayerInfo::set_pick_card_id(::google::protobuf::uint32 value) {
  
  pick_card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPlayerInfo.pick_card_id)
}

// uint32 uid = 14;
void InBattleMechanicusPlayerInfo::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusPlayerInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPlayerInfo.uid)
  return uid_;
}
void InBattleMechanicusPlayerInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPlayerInfo.uid)
}

// repeated .proto.InBattleMechanicusBuildingInfo building_list = 4;
int InBattleMechanicusPlayerInfo::building_list_size() const {
  return building_list_.size();
}
void InBattleMechanicusPlayerInfo::clear_building_list() {
  building_list_.Clear();
}
const ::proto::InBattleMechanicusBuildingInfo& InBattleMechanicusPlayerInfo::building_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPlayerInfo.building_list)
  return building_list_.Get(index);
}
::proto::InBattleMechanicusBuildingInfo* InBattleMechanicusPlayerInfo::mutable_building_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.InBattleMechanicusPlayerInfo.building_list)
  return building_list_.Mutable(index);
}
::proto::InBattleMechanicusBuildingInfo* InBattleMechanicusPlayerInfo::add_building_list() {
  // @@protoc_insertion_point(field_add:proto.InBattleMechanicusPlayerInfo.building_list)
  return building_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusBuildingInfo >*
InBattleMechanicusPlayerInfo::mutable_building_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleMechanicusPlayerInfo.building_list)
  return &building_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusBuildingInfo >&
InBattleMechanicusPlayerInfo::building_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleMechanicusPlayerInfo.building_list)
  return building_list_;
}

// bool is_card_confirmed = 13;
void InBattleMechanicusPlayerInfo::clear_is_card_confirmed() {
  is_card_confirmed_ = false;
}
bool InBattleMechanicusPlayerInfo::is_card_confirmed() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPlayerInfo.is_card_confirmed)
  return is_card_confirmed_;
}
void InBattleMechanicusPlayerInfo::set_is_card_confirmed(bool value) {
  
  is_card_confirmed_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPlayerInfo.is_card_confirmed)
}

// uint32 building_points = 3;
void InBattleMechanicusPlayerInfo::clear_building_points() {
  building_points_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusPlayerInfo::building_points() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPlayerInfo.building_points)
  return building_points_;
}
void InBattleMechanicusPlayerInfo::set_building_points(::google::protobuf::uint32 value) {
  
  building_points_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPlayerInfo.building_points)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InBattleMechanicusMonsterInfo::kMonsterIdFieldNumber;
const int InBattleMechanicusMonsterInfo::kLevelFieldNumber;
const int InBattleMechanicusMonsterInfo::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InBattleMechanicusMonsterInfo::InBattleMechanicusMonsterInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InBattleMechanicusMonsterInfo)
}
InBattleMechanicusMonsterInfo::InBattleMechanicusMonsterInfo(const InBattleMechanicusMonsterInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&level_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:proto.InBattleMechanicusMonsterInfo)
}

void InBattleMechanicusMonsterInfo::SharedCtor() {
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&level_)) + sizeof(count_));
  _cached_size_ = 0;
}

InBattleMechanicusMonsterInfo::~InBattleMechanicusMonsterInfo() {
  // @@protoc_insertion_point(destructor:proto.InBattleMechanicusMonsterInfo)
  SharedDtor();
}

void InBattleMechanicusMonsterInfo::SharedDtor() {
}

void InBattleMechanicusMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InBattleMechanicusMonsterInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InBattleMechanicusMonsterInfo& InBattleMechanicusMonsterInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

InBattleMechanicusMonsterInfo* InBattleMechanicusMonsterInfo::New(::google::protobuf::Arena* arena) const {
  InBattleMechanicusMonsterInfo* n = new InBattleMechanicusMonsterInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InBattleMechanicusMonsterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InBattleMechanicusMonsterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&level_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

bool InBattleMechanicusMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InBattleMechanicusMonsterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 monster_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 count = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InBattleMechanicusMonsterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InBattleMechanicusMonsterInfo)
  return false;
#undef DO_
}

void InBattleMechanicusMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InBattleMechanicusMonsterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 monster_id = 1;
  if (this->monster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monster_id(), output);
  }

  // uint32 count = 13;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->count(), output);
  }

  // uint32 level = 14;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->level(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InBattleMechanicusMonsterInfo)
}

::google::protobuf::uint8* InBattleMechanicusMonsterInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InBattleMechanicusMonsterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 monster_id = 1;
  if (this->monster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monster_id(), target);
  }

  // uint32 count = 13;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->count(), target);
  }

  // uint32 level = 14;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->level(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InBattleMechanicusMonsterInfo)
  return target;
}

size_t InBattleMechanicusMonsterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InBattleMechanicusMonsterInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 level = 14;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // uint32 monster_id = 1;
  if (this->monster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->monster_id());
  }

  // uint32 count = 13;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InBattleMechanicusMonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InBattleMechanicusMonsterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InBattleMechanicusMonsterInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InBattleMechanicusMonsterInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InBattleMechanicusMonsterInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InBattleMechanicusMonsterInfo)
    MergeFrom(*source);
  }
}

void InBattleMechanicusMonsterInfo::MergeFrom(const InBattleMechanicusMonsterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InBattleMechanicusMonsterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.monster_id() != 0) {
    set_monster_id(from.monster_id());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void InBattleMechanicusMonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InBattleMechanicusMonsterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InBattleMechanicusMonsterInfo::CopyFrom(const InBattleMechanicusMonsterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InBattleMechanicusMonsterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InBattleMechanicusMonsterInfo::IsInitialized() const {
  return true;
}

void InBattleMechanicusMonsterInfo::Swap(InBattleMechanicusMonsterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InBattleMechanicusMonsterInfo::InternalSwap(InBattleMechanicusMonsterInfo* other) {
  using std::swap;
  swap(level_, other->level_);
  swap(monster_id_, other->monster_id_);
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InBattleMechanicusMonsterInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InBattleMechanicusMonsterInfo

// uint32 monster_id = 1;
void InBattleMechanicusMonsterInfo::clear_monster_id() {
  monster_id_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusMonsterInfo::monster_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusMonsterInfo.monster_id)
  return monster_id_;
}
void InBattleMechanicusMonsterInfo::set_monster_id(::google::protobuf::uint32 value) {
  
  monster_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusMonsterInfo.monster_id)
}

// uint32 level = 14;
void InBattleMechanicusMonsterInfo::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusMonsterInfo::level() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusMonsterInfo.level)
  return level_;
}
void InBattleMechanicusMonsterInfo::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusMonsterInfo.level)
}

// uint32 count = 13;
void InBattleMechanicusMonsterInfo::clear_count() {
  count_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusMonsterInfo::count() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusMonsterInfo.count)
  return count_;
}
void InBattleMechanicusMonsterInfo::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusMonsterInfo.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InBattleMechanicusCardInfo::kRandEffectIdFieldNumber;
const int InBattleMechanicusCardInfo::kEndRoundFieldNumber;
const int InBattleMechanicusCardInfo::kChallengeStateFieldNumber;
const int InBattleMechanicusCardInfo::kCostPointsFieldNumber;
const int InBattleMechanicusCardInfo::kCardIdFieldNumber;
const int InBattleMechanicusCardInfo::kBeginRoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InBattleMechanicusCardInfo::InBattleMechanicusCardInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InBattleMechanicusCardInfo)
}
InBattleMechanicusCardInfo::InBattleMechanicusCardInfo(const InBattleMechanicusCardInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cost_points_, &from.cost_points_,
    static_cast<size_t>(reinterpret_cast<char*>(&rand_effect_id_) -
    reinterpret_cast<char*>(&cost_points_)) + sizeof(rand_effect_id_));
  // @@protoc_insertion_point(copy_constructor:proto.InBattleMechanicusCardInfo)
}

void InBattleMechanicusCardInfo::SharedCtor() {
  ::memset(&cost_points_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rand_effect_id_) -
      reinterpret_cast<char*>(&cost_points_)) + sizeof(rand_effect_id_));
  _cached_size_ = 0;
}

InBattleMechanicusCardInfo::~InBattleMechanicusCardInfo() {
  // @@protoc_insertion_point(destructor:proto.InBattleMechanicusCardInfo)
  SharedDtor();
}

void InBattleMechanicusCardInfo::SharedDtor() {
}

void InBattleMechanicusCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InBattleMechanicusCardInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InBattleMechanicusCardInfo& InBattleMechanicusCardInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

InBattleMechanicusCardInfo* InBattleMechanicusCardInfo::New(::google::protobuf::Arena* arena) const {
  InBattleMechanicusCardInfo* n = new InBattleMechanicusCardInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InBattleMechanicusCardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InBattleMechanicusCardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cost_points_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rand_effect_id_) -
      reinterpret_cast<char*>(&cost_points_)) + sizeof(rand_effect_id_));
  _internal_metadata_.Clear();
}

bool InBattleMechanicusCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InBattleMechanicusCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 cost_points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end_round = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.InBattleMechanicusCardChallengeState challenge_state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_challenge_state(static_cast< ::proto::InBattleMechanicusCardChallengeState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 begin_round = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rand_effect_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_effect_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InBattleMechanicusCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InBattleMechanicusCardInfo)
  return false;
#undef DO_
}

void InBattleMechanicusCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InBattleMechanicusCardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cost_points = 1;
  if (this->cost_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cost_points(), output);
  }

  // uint32 end_round = 3;
  if (this->end_round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end_round(), output);
  }

  // .proto.InBattleMechanicusCardChallengeState challenge_state = 5;
  if (this->challenge_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->challenge_state(), output);
  }

  // uint32 begin_round = 8;
  if (this->begin_round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->begin_round(), output);
  }

  // uint32 card_id = 11;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->card_id(), output);
  }

  // uint32 rand_effect_id = 12;
  if (this->rand_effect_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->rand_effect_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InBattleMechanicusCardInfo)
}

::google::protobuf::uint8* InBattleMechanicusCardInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InBattleMechanicusCardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cost_points = 1;
  if (this->cost_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cost_points(), target);
  }

  // uint32 end_round = 3;
  if (this->end_round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end_round(), target);
  }

  // .proto.InBattleMechanicusCardChallengeState challenge_state = 5;
  if (this->challenge_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->challenge_state(), target);
  }

  // uint32 begin_round = 8;
  if (this->begin_round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->begin_round(), target);
  }

  // uint32 card_id = 11;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->card_id(), target);
  }

  // uint32 rand_effect_id = 12;
  if (this->rand_effect_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->rand_effect_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InBattleMechanicusCardInfo)
  return target;
}

size_t InBattleMechanicusCardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InBattleMechanicusCardInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 cost_points = 1;
  if (this->cost_points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cost_points());
  }

  // uint32 end_round = 3;
  if (this->end_round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_round());
  }

  // .proto.InBattleMechanicusCardChallengeState challenge_state = 5;
  if (this->challenge_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->challenge_state());
  }

  // uint32 begin_round = 8;
  if (this->begin_round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->begin_round());
  }

  // uint32 card_id = 11;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  // uint32 rand_effect_id = 12;
  if (this->rand_effect_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rand_effect_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InBattleMechanicusCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InBattleMechanicusCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InBattleMechanicusCardInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InBattleMechanicusCardInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InBattleMechanicusCardInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InBattleMechanicusCardInfo)
    MergeFrom(*source);
  }
}

void InBattleMechanicusCardInfo::MergeFrom(const InBattleMechanicusCardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InBattleMechanicusCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cost_points() != 0) {
    set_cost_points(from.cost_points());
  }
  if (from.end_round() != 0) {
    set_end_round(from.end_round());
  }
  if (from.challenge_state() != 0) {
    set_challenge_state(from.challenge_state());
  }
  if (from.begin_round() != 0) {
    set_begin_round(from.begin_round());
  }
  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
  if (from.rand_effect_id() != 0) {
    set_rand_effect_id(from.rand_effect_id());
  }
}

void InBattleMechanicusCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InBattleMechanicusCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InBattleMechanicusCardInfo::CopyFrom(const InBattleMechanicusCardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InBattleMechanicusCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InBattleMechanicusCardInfo::IsInitialized() const {
  return true;
}

void InBattleMechanicusCardInfo::Swap(InBattleMechanicusCardInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InBattleMechanicusCardInfo::InternalSwap(InBattleMechanicusCardInfo* other) {
  using std::swap;
  swap(cost_points_, other->cost_points_);
  swap(end_round_, other->end_round_);
  swap(challenge_state_, other->challenge_state_);
  swap(begin_round_, other->begin_round_);
  swap(card_id_, other->card_id_);
  swap(rand_effect_id_, other->rand_effect_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InBattleMechanicusCardInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InBattleMechanicusCardInfo

// uint32 rand_effect_id = 12;
void InBattleMechanicusCardInfo::clear_rand_effect_id() {
  rand_effect_id_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusCardInfo::rand_effect_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusCardInfo.rand_effect_id)
  return rand_effect_id_;
}
void InBattleMechanicusCardInfo::set_rand_effect_id(::google::protobuf::uint32 value) {
  
  rand_effect_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusCardInfo.rand_effect_id)
}

// uint32 end_round = 3;
void InBattleMechanicusCardInfo::clear_end_round() {
  end_round_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusCardInfo::end_round() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusCardInfo.end_round)
  return end_round_;
}
void InBattleMechanicusCardInfo::set_end_round(::google::protobuf::uint32 value) {
  
  end_round_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusCardInfo.end_round)
}

// .proto.InBattleMechanicusCardChallengeState challenge_state = 5;
void InBattleMechanicusCardInfo::clear_challenge_state() {
  challenge_state_ = 0;
}
::proto::InBattleMechanicusCardChallengeState InBattleMechanicusCardInfo::challenge_state() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusCardInfo.challenge_state)
  return static_cast< ::proto::InBattleMechanicusCardChallengeState >(challenge_state_);
}
void InBattleMechanicusCardInfo::set_challenge_state(::proto::InBattleMechanicusCardChallengeState value) {
  
  challenge_state_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusCardInfo.challenge_state)
}

// uint32 cost_points = 1;
void InBattleMechanicusCardInfo::clear_cost_points() {
  cost_points_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusCardInfo::cost_points() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusCardInfo.cost_points)
  return cost_points_;
}
void InBattleMechanicusCardInfo::set_cost_points(::google::protobuf::uint32 value) {
  
  cost_points_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusCardInfo.cost_points)
}

// uint32 card_id = 11;
void InBattleMechanicusCardInfo::clear_card_id() {
  card_id_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusCardInfo::card_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusCardInfo.card_id)
  return card_id_;
}
void InBattleMechanicusCardInfo::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusCardInfo.card_id)
}

// uint32 begin_round = 8;
void InBattleMechanicusCardInfo::clear_begin_round() {
  begin_round_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusCardInfo::begin_round() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusCardInfo.begin_round)
  return begin_round_;
}
void InBattleMechanicusCardInfo::set_begin_round(::google::protobuf::uint32 value) {
  
  begin_round_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusCardInfo.begin_round)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InBattleMechanicusInfo::kLeftMonsterFieldNumber;
const int InBattleMechanicusInfo::kWaitSecondsFieldNumber;
const int InBattleMechanicusInfo::kEntranceListFieldNumber;
const int InBattleMechanicusInfo::kExitListFieldNumber;
const int InBattleMechanicusInfo::kHistoryCardListFieldNumber;
const int InBattleMechanicusInfo::kMaxExcapeMonsterNumFieldNumber;
const int InBattleMechanicusInfo::kBuildingStageDurationFieldNumber;
const int InBattleMechanicusInfo::kDurationMsFieldNumber;
const int InBattleMechanicusInfo::kStageFieldNumber;
const int InBattleMechanicusInfo::kTotalRoundFieldNumber;
const int InBattleMechanicusInfo::kMonsterListFieldNumber;
const int InBattleMechanicusInfo::kExcapedMonsterNumFieldNumber;
const int InBattleMechanicusInfo::kRoundFieldNumber;
const int InBattleMechanicusInfo::kPickCardListFieldNumber;
const int InBattleMechanicusInfo::kPlayerListFieldNumber;
const int InBattleMechanicusInfo::kWaitBeginTimeUsFieldNumber;
const int InBattleMechanicusInfo::kBeginTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InBattleMechanicusInfo::InBattleMechanicusInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InBattleMechanicusInfo)
}
InBattleMechanicusInfo::InBattleMechanicusInfo(const InBattleMechanicusInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      player_list_(from.player_list_),
      history_card_list_(from.history_card_list_),
      monster_list_(from.monster_list_),
      pick_card_list_(from.pick_card_list_),
      exit_list_(from.exit_list_),
      entrance_list_(from.entrance_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&wait_begin_time_us_, &from.wait_begin_time_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&wait_seconds_) -
    reinterpret_cast<char*>(&wait_begin_time_us_)) + sizeof(wait_seconds_));
  // @@protoc_insertion_point(copy_constructor:proto.InBattleMechanicusInfo)
}

void InBattleMechanicusInfo::SharedCtor() {
  ::memset(&wait_begin_time_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wait_seconds_) -
      reinterpret_cast<char*>(&wait_begin_time_us_)) + sizeof(wait_seconds_));
  _cached_size_ = 0;
}

InBattleMechanicusInfo::~InBattleMechanicusInfo() {
  // @@protoc_insertion_point(destructor:proto.InBattleMechanicusInfo)
  SharedDtor();
}

void InBattleMechanicusInfo::SharedDtor() {
}

void InBattleMechanicusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InBattleMechanicusInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InBattleMechanicusInfo& InBattleMechanicusInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

InBattleMechanicusInfo* InBattleMechanicusInfo::New(::google::protobuf::Arena* arena) const {
  InBattleMechanicusInfo* n = new InBattleMechanicusInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InBattleMechanicusInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InBattleMechanicusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_list_.Clear();
  history_card_list_.Clear();
  monster_list_.Clear();
  pick_card_list_.Clear();
  exit_list_.Clear();
  entrance_list_.Clear();
  ::memset(&wait_begin_time_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wait_seconds_) -
      reinterpret_cast<char*>(&wait_begin_time_us_)) + sizeof(wait_seconds_));
  _internal_metadata_.Clear();
}

bool InBattleMechanicusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InBattleMechanicusInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 wait_begin_time_us = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wait_begin_time_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 begin_time_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begin_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 round = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 building_stage_duration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &building_stage_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 left_monster = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_monster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 excaped_monster_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &excaped_monster_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.InBattleMechanicusPlayerInfo player_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 duration_ms = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.InBattleMechanicusStageType stage = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stage(static_cast< ::proto::InBattleMechanicusStageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_excape_monster_num = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_excape_monster_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.InBattleMechanicusCardInfo history_card_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_card_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_round = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wait_seconds = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wait_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.InBattleMechanicusMonsterInfo monster_list = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monster_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.InBattleMechanicusCardInfo pick_card_list = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pick_card_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 exit_list = 115;
      case 115: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 922 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_exit_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 920 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 922u, input, this->mutable_exit_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 entrance_list = 410;
      case 410: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 3282 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_entrance_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 3280 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 3282u, input, this->mutable_entrance_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InBattleMechanicusInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InBattleMechanicusInfo)
  return false;
#undef DO_
}

void InBattleMechanicusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InBattleMechanicusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 wait_begin_time_us = 1;
  if (this->wait_begin_time_us() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->wait_begin_time_us(), output);
  }

  // uint64 begin_time_ms = 2;
  if (this->begin_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->begin_time_ms(), output);
  }

  // uint32 round = 3;
  if (this->round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->round(), output);
  }

  // uint32 building_stage_duration = 4;
  if (this->building_stage_duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->building_stage_duration(), output);
  }

  // uint32 left_monster = 5;
  if (this->left_monster() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->left_monster(), output);
  }

  // uint32 excaped_monster_num = 6;
  if (this->excaped_monster_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->excaped_monster_num(), output);
  }

  // repeated .proto.InBattleMechanicusPlayerInfo player_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->player_list(static_cast<int>(i)), output);
  }

  // uint64 duration_ms = 8;
  if (this->duration_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->duration_ms(), output);
  }

  // .proto.InBattleMechanicusStageType stage = 9;
  if (this->stage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->stage(), output);
  }

  // uint32 max_excape_monster_num = 10;
  if (this->max_excape_monster_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->max_excape_monster_num(), output);
  }

  // repeated .proto.InBattleMechanicusCardInfo history_card_list = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_card_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->history_card_list(static_cast<int>(i)), output);
  }

  // uint32 total_round = 12;
  if (this->total_round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->total_round(), output);
  }

  // uint32 wait_seconds = 13;
  if (this->wait_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->wait_seconds(), output);
  }

  // repeated .proto.InBattleMechanicusMonsterInfo monster_list = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->monster_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->monster_list(static_cast<int>(i)), output);
  }

  // repeated .proto.InBattleMechanicusCardInfo pick_card_list = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pick_card_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->pick_card_list(static_cast<int>(i)), output);
  }

  // repeated uint32 exit_list = 115;
  if (this->exit_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(115, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _exit_list_cached_byte_size_));
  }
  for (int i = 0, n = this->exit_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->exit_list(i), output);
  }

  // repeated uint32 entrance_list = 410;
  if (this->entrance_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(410, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _entrance_list_cached_byte_size_));
  }
  for (int i = 0, n = this->entrance_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->entrance_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InBattleMechanicusInfo)
}

::google::protobuf::uint8* InBattleMechanicusInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InBattleMechanicusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 wait_begin_time_us = 1;
  if (this->wait_begin_time_us() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->wait_begin_time_us(), target);
  }

  // uint64 begin_time_ms = 2;
  if (this->begin_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->begin_time_ms(), target);
  }

  // uint32 round = 3;
  if (this->round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->round(), target);
  }

  // uint32 building_stage_duration = 4;
  if (this->building_stage_duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->building_stage_duration(), target);
  }

  // uint32 left_monster = 5;
  if (this->left_monster() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->left_monster(), target);
  }

  // uint32 excaped_monster_num = 6;
  if (this->excaped_monster_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->excaped_monster_num(), target);
  }

  // repeated .proto.InBattleMechanicusPlayerInfo player_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->player_list(static_cast<int>(i)), deterministic, target);
  }

  // uint64 duration_ms = 8;
  if (this->duration_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->duration_ms(), target);
  }

  // .proto.InBattleMechanicusStageType stage = 9;
  if (this->stage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->stage(), target);
  }

  // uint32 max_excape_monster_num = 10;
  if (this->max_excape_monster_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->max_excape_monster_num(), target);
  }

  // repeated .proto.InBattleMechanicusCardInfo history_card_list = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_card_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->history_card_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 total_round = 12;
  if (this->total_round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->total_round(), target);
  }

  // uint32 wait_seconds = 13;
  if (this->wait_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->wait_seconds(), target);
  }

  // repeated .proto.InBattleMechanicusMonsterInfo monster_list = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->monster_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->monster_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.InBattleMechanicusCardInfo pick_card_list = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pick_card_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->pick_card_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 exit_list = 115;
  if (this->exit_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      115,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _exit_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->exit_list_, target);
  }

  // repeated uint32 entrance_list = 410;
  if (this->entrance_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      410,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _entrance_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->entrance_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InBattleMechanicusInfo)
  return target;
}

size_t InBattleMechanicusInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InBattleMechanicusInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.InBattleMechanicusPlayerInfo player_list = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->player_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.InBattleMechanicusCardInfo history_card_list = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->history_card_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history_card_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.InBattleMechanicusMonsterInfo monster_list = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->monster_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monster_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.InBattleMechanicusCardInfo pick_card_list = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->pick_card_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pick_card_list(static_cast<int>(i)));
    }
  }

  // repeated uint32 exit_list = 115;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->exit_list_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _exit_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 entrance_list = 410;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->entrance_list_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _entrance_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint64 wait_begin_time_us = 1;
  if (this->wait_begin_time_us() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->wait_begin_time_us());
  }

  // uint64 begin_time_ms = 2;
  if (this->begin_time_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->begin_time_ms());
  }

  // uint32 round = 3;
  if (this->round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->round());
  }

  // uint32 building_stage_duration = 4;
  if (this->building_stage_duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->building_stage_duration());
  }

  // uint32 left_monster = 5;
  if (this->left_monster() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->left_monster());
  }

  // uint32 excaped_monster_num = 6;
  if (this->excaped_monster_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->excaped_monster_num());
  }

  // uint64 duration_ms = 8;
  if (this->duration_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->duration_ms());
  }

  // .proto.InBattleMechanicusStageType stage = 9;
  if (this->stage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());
  }

  // uint32 max_excape_monster_num = 10;
  if (this->max_excape_monster_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_excape_monster_num());
  }

  // uint32 total_round = 12;
  if (this->total_round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_round());
  }

  // uint32 wait_seconds = 13;
  if (this->wait_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wait_seconds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InBattleMechanicusInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InBattleMechanicusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InBattleMechanicusInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InBattleMechanicusInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InBattleMechanicusInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InBattleMechanicusInfo)
    MergeFrom(*source);
  }
}

void InBattleMechanicusInfo::MergeFrom(const InBattleMechanicusInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InBattleMechanicusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_list_.MergeFrom(from.player_list_);
  history_card_list_.MergeFrom(from.history_card_list_);
  monster_list_.MergeFrom(from.monster_list_);
  pick_card_list_.MergeFrom(from.pick_card_list_);
  exit_list_.MergeFrom(from.exit_list_);
  entrance_list_.MergeFrom(from.entrance_list_);
  if (from.wait_begin_time_us() != 0) {
    set_wait_begin_time_us(from.wait_begin_time_us());
  }
  if (from.begin_time_ms() != 0) {
    set_begin_time_ms(from.begin_time_ms());
  }
  if (from.round() != 0) {
    set_round(from.round());
  }
  if (from.building_stage_duration() != 0) {
    set_building_stage_duration(from.building_stage_duration());
  }
  if (from.left_monster() != 0) {
    set_left_monster(from.left_monster());
  }
  if (from.excaped_monster_num() != 0) {
    set_excaped_monster_num(from.excaped_monster_num());
  }
  if (from.duration_ms() != 0) {
    set_duration_ms(from.duration_ms());
  }
  if (from.stage() != 0) {
    set_stage(from.stage());
  }
  if (from.max_excape_monster_num() != 0) {
    set_max_excape_monster_num(from.max_excape_monster_num());
  }
  if (from.total_round() != 0) {
    set_total_round(from.total_round());
  }
  if (from.wait_seconds() != 0) {
    set_wait_seconds(from.wait_seconds());
  }
}

void InBattleMechanicusInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InBattleMechanicusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InBattleMechanicusInfo::CopyFrom(const InBattleMechanicusInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InBattleMechanicusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InBattleMechanicusInfo::IsInitialized() const {
  return true;
}

void InBattleMechanicusInfo::Swap(InBattleMechanicusInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InBattleMechanicusInfo::InternalSwap(InBattleMechanicusInfo* other) {
  using std::swap;
  player_list_.InternalSwap(&other->player_list_);
  history_card_list_.InternalSwap(&other->history_card_list_);
  monster_list_.InternalSwap(&other->monster_list_);
  pick_card_list_.InternalSwap(&other->pick_card_list_);
  exit_list_.InternalSwap(&other->exit_list_);
  entrance_list_.InternalSwap(&other->entrance_list_);
  swap(wait_begin_time_us_, other->wait_begin_time_us_);
  swap(begin_time_ms_, other->begin_time_ms_);
  swap(round_, other->round_);
  swap(building_stage_duration_, other->building_stage_duration_);
  swap(left_monster_, other->left_monster_);
  swap(excaped_monster_num_, other->excaped_monster_num_);
  swap(duration_ms_, other->duration_ms_);
  swap(stage_, other->stage_);
  swap(max_excape_monster_num_, other->max_excape_monster_num_);
  swap(total_round_, other->total_round_);
  swap(wait_seconds_, other->wait_seconds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InBattleMechanicusInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InBattleMechanicusInfo

// uint32 left_monster = 5;
void InBattleMechanicusInfo::clear_left_monster() {
  left_monster_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusInfo::left_monster() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.left_monster)
  return left_monster_;
}
void InBattleMechanicusInfo::set_left_monster(::google::protobuf::uint32 value) {
  
  left_monster_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.left_monster)
}

// uint32 wait_seconds = 13;
void InBattleMechanicusInfo::clear_wait_seconds() {
  wait_seconds_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusInfo::wait_seconds() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.wait_seconds)
  return wait_seconds_;
}
void InBattleMechanicusInfo::set_wait_seconds(::google::protobuf::uint32 value) {
  
  wait_seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.wait_seconds)
}

// repeated uint32 entrance_list = 410;
int InBattleMechanicusInfo::entrance_list_size() const {
  return entrance_list_.size();
}
void InBattleMechanicusInfo::clear_entrance_list() {
  entrance_list_.Clear();
}
::google::protobuf::uint32 InBattleMechanicusInfo::entrance_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.entrance_list)
  return entrance_list_.Get(index);
}
void InBattleMechanicusInfo::set_entrance_list(int index, ::google::protobuf::uint32 value) {
  entrance_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.entrance_list)
}
void InBattleMechanicusInfo::add_entrance_list(::google::protobuf::uint32 value) {
  entrance_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.InBattleMechanicusInfo.entrance_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
InBattleMechanicusInfo::entrance_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleMechanicusInfo.entrance_list)
  return entrance_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
InBattleMechanicusInfo::mutable_entrance_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleMechanicusInfo.entrance_list)
  return &entrance_list_;
}

// repeated uint32 exit_list = 115;
int InBattleMechanicusInfo::exit_list_size() const {
  return exit_list_.size();
}
void InBattleMechanicusInfo::clear_exit_list() {
  exit_list_.Clear();
}
::google::protobuf::uint32 InBattleMechanicusInfo::exit_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.exit_list)
  return exit_list_.Get(index);
}
void InBattleMechanicusInfo::set_exit_list(int index, ::google::protobuf::uint32 value) {
  exit_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.exit_list)
}
void InBattleMechanicusInfo::add_exit_list(::google::protobuf::uint32 value) {
  exit_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.InBattleMechanicusInfo.exit_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
InBattleMechanicusInfo::exit_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleMechanicusInfo.exit_list)
  return exit_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
InBattleMechanicusInfo::mutable_exit_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleMechanicusInfo.exit_list)
  return &exit_list_;
}

// repeated .proto.InBattleMechanicusCardInfo history_card_list = 11;
int InBattleMechanicusInfo::history_card_list_size() const {
  return history_card_list_.size();
}
void InBattleMechanicusInfo::clear_history_card_list() {
  history_card_list_.Clear();
}
const ::proto::InBattleMechanicusCardInfo& InBattleMechanicusInfo::history_card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.history_card_list)
  return history_card_list_.Get(index);
}
::proto::InBattleMechanicusCardInfo* InBattleMechanicusInfo::mutable_history_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.InBattleMechanicusInfo.history_card_list)
  return history_card_list_.Mutable(index);
}
::proto::InBattleMechanicusCardInfo* InBattleMechanicusInfo::add_history_card_list() {
  // @@protoc_insertion_point(field_add:proto.InBattleMechanicusInfo.history_card_list)
  return history_card_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusCardInfo >*
InBattleMechanicusInfo::mutable_history_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleMechanicusInfo.history_card_list)
  return &history_card_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusCardInfo >&
InBattleMechanicusInfo::history_card_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleMechanicusInfo.history_card_list)
  return history_card_list_;
}

// uint32 max_excape_monster_num = 10;
void InBattleMechanicusInfo::clear_max_excape_monster_num() {
  max_excape_monster_num_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusInfo::max_excape_monster_num() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.max_excape_monster_num)
  return max_excape_monster_num_;
}
void InBattleMechanicusInfo::set_max_excape_monster_num(::google::protobuf::uint32 value) {
  
  max_excape_monster_num_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.max_excape_monster_num)
}

// uint32 building_stage_duration = 4;
void InBattleMechanicusInfo::clear_building_stage_duration() {
  building_stage_duration_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusInfo::building_stage_duration() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.building_stage_duration)
  return building_stage_duration_;
}
void InBattleMechanicusInfo::set_building_stage_duration(::google::protobuf::uint32 value) {
  
  building_stage_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.building_stage_duration)
}

// uint64 duration_ms = 8;
void InBattleMechanicusInfo::clear_duration_ms() {
  duration_ms_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 InBattleMechanicusInfo::duration_ms() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.duration_ms)
  return duration_ms_;
}
void InBattleMechanicusInfo::set_duration_ms(::google::protobuf::uint64 value) {
  
  duration_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.duration_ms)
}

// .proto.InBattleMechanicusStageType stage = 9;
void InBattleMechanicusInfo::clear_stage() {
  stage_ = 0;
}
::proto::InBattleMechanicusStageType InBattleMechanicusInfo::stage() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.stage)
  return static_cast< ::proto::InBattleMechanicusStageType >(stage_);
}
void InBattleMechanicusInfo::set_stage(::proto::InBattleMechanicusStageType value) {
  
  stage_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.stage)
}

// uint32 total_round = 12;
void InBattleMechanicusInfo::clear_total_round() {
  total_round_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusInfo::total_round() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.total_round)
  return total_round_;
}
void InBattleMechanicusInfo::set_total_round(::google::protobuf::uint32 value) {
  
  total_round_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.total_round)
}

// repeated .proto.InBattleMechanicusMonsterInfo monster_list = 14;
int InBattleMechanicusInfo::monster_list_size() const {
  return monster_list_.size();
}
void InBattleMechanicusInfo::clear_monster_list() {
  monster_list_.Clear();
}
const ::proto::InBattleMechanicusMonsterInfo& InBattleMechanicusInfo::monster_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.monster_list)
  return monster_list_.Get(index);
}
::proto::InBattleMechanicusMonsterInfo* InBattleMechanicusInfo::mutable_monster_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.InBattleMechanicusInfo.monster_list)
  return monster_list_.Mutable(index);
}
::proto::InBattleMechanicusMonsterInfo* InBattleMechanicusInfo::add_monster_list() {
  // @@protoc_insertion_point(field_add:proto.InBattleMechanicusInfo.monster_list)
  return monster_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusMonsterInfo >*
InBattleMechanicusInfo::mutable_monster_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleMechanicusInfo.monster_list)
  return &monster_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusMonsterInfo >&
InBattleMechanicusInfo::monster_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleMechanicusInfo.monster_list)
  return monster_list_;
}

// uint32 excaped_monster_num = 6;
void InBattleMechanicusInfo::clear_excaped_monster_num() {
  excaped_monster_num_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusInfo::excaped_monster_num() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.excaped_monster_num)
  return excaped_monster_num_;
}
void InBattleMechanicusInfo::set_excaped_monster_num(::google::protobuf::uint32 value) {
  
  excaped_monster_num_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.excaped_monster_num)
}

// uint32 round = 3;
void InBattleMechanicusInfo::clear_round() {
  round_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusInfo::round() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.round)
  return round_;
}
void InBattleMechanicusInfo::set_round(::google::protobuf::uint32 value) {
  
  round_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.round)
}

// repeated .proto.InBattleMechanicusCardInfo pick_card_list = 15;
int InBattleMechanicusInfo::pick_card_list_size() const {
  return pick_card_list_.size();
}
void InBattleMechanicusInfo::clear_pick_card_list() {
  pick_card_list_.Clear();
}
const ::proto::InBattleMechanicusCardInfo& InBattleMechanicusInfo::pick_card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.pick_card_list)
  return pick_card_list_.Get(index);
}
::proto::InBattleMechanicusCardInfo* InBattleMechanicusInfo::mutable_pick_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.InBattleMechanicusInfo.pick_card_list)
  return pick_card_list_.Mutable(index);
}
::proto::InBattleMechanicusCardInfo* InBattleMechanicusInfo::add_pick_card_list() {
  // @@protoc_insertion_point(field_add:proto.InBattleMechanicusInfo.pick_card_list)
  return pick_card_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusCardInfo >*
InBattleMechanicusInfo::mutable_pick_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleMechanicusInfo.pick_card_list)
  return &pick_card_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusCardInfo >&
InBattleMechanicusInfo::pick_card_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleMechanicusInfo.pick_card_list)
  return pick_card_list_;
}

// repeated .proto.InBattleMechanicusPlayerInfo player_list = 7;
int InBattleMechanicusInfo::player_list_size() const {
  return player_list_.size();
}
void InBattleMechanicusInfo::clear_player_list() {
  player_list_.Clear();
}
const ::proto::InBattleMechanicusPlayerInfo& InBattleMechanicusInfo::player_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.player_list)
  return player_list_.Get(index);
}
::proto::InBattleMechanicusPlayerInfo* InBattleMechanicusInfo::mutable_player_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.InBattleMechanicusInfo.player_list)
  return player_list_.Mutable(index);
}
::proto::InBattleMechanicusPlayerInfo* InBattleMechanicusInfo::add_player_list() {
  // @@protoc_insertion_point(field_add:proto.InBattleMechanicusInfo.player_list)
  return player_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusPlayerInfo >*
InBattleMechanicusInfo::mutable_player_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleMechanicusInfo.player_list)
  return &player_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusPlayerInfo >&
InBattleMechanicusInfo::player_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleMechanicusInfo.player_list)
  return player_list_;
}

// uint64 wait_begin_time_us = 1;
void InBattleMechanicusInfo::clear_wait_begin_time_us() {
  wait_begin_time_us_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 InBattleMechanicusInfo::wait_begin_time_us() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.wait_begin_time_us)
  return wait_begin_time_us_;
}
void InBattleMechanicusInfo::set_wait_begin_time_us(::google::protobuf::uint64 value) {
  
  wait_begin_time_us_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.wait_begin_time_us)
}

// uint64 begin_time_ms = 2;
void InBattleMechanicusInfo::clear_begin_time_ms() {
  begin_time_ms_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 InBattleMechanicusInfo::begin_time_ms() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.begin_time_ms)
  return begin_time_ms_;
}
void InBattleMechanicusInfo::set_begin_time_ms(::google::protobuf::uint64 value) {
  
  begin_time_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.begin_time_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InBattleFleurFairInfo::kGalleryIdListFieldNumber;
const int InBattleFleurFairInfo::kGalleryStageIndexFieldNumber;
const int InBattleFleurFairInfo::kPreviewStageIndexFieldNumber;
const int InBattleFleurFairInfo::kAbilityGroupIdListFieldNumber;
const int InBattleFleurFairInfo::kPreviewDisplayDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InBattleFleurFairInfo::InBattleFleurFairInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InBattleFleurFairInfo)
}
InBattleFleurFairInfo::InBattleFleurFairInfo(const InBattleFleurFairInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ability_group_id_list_(from.ability_group_id_list_),
      gallery_id_list_(from.gallery_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&preview_display_duration_, &from.preview_display_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&preview_stage_index_) -
    reinterpret_cast<char*>(&preview_display_duration_)) + sizeof(preview_stage_index_));
  // @@protoc_insertion_point(copy_constructor:proto.InBattleFleurFairInfo)
}

void InBattleFleurFairInfo::SharedCtor() {
  ::memset(&preview_display_duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preview_stage_index_) -
      reinterpret_cast<char*>(&preview_display_duration_)) + sizeof(preview_stage_index_));
  _cached_size_ = 0;
}

InBattleFleurFairInfo::~InBattleFleurFairInfo() {
  // @@protoc_insertion_point(destructor:proto.InBattleFleurFairInfo)
  SharedDtor();
}

void InBattleFleurFairInfo::SharedDtor() {
}

void InBattleFleurFairInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InBattleFleurFairInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InBattleFleurFairInfo& InBattleFleurFairInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

InBattleFleurFairInfo* InBattleFleurFairInfo::New(::google::protobuf::Arena* arena) const {
  InBattleFleurFairInfo* n = new InBattleFleurFairInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InBattleFleurFairInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InBattleFleurFairInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ability_group_id_list_.Clear();
  gallery_id_list_.Clear();
  ::memset(&preview_display_duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preview_stage_index_) -
      reinterpret_cast<char*>(&preview_display_duration_)) + sizeof(preview_stage_index_));
  _internal_metadata_.Clear();
}

bool InBattleFleurFairInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InBattleFleurFairInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ability_group_id_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ability_group_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_ability_group_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 gallery_id_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gallery_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_gallery_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gallery_stage_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_stage_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 preview_stage_index = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preview_stage_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 preview_display_duration = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preview_display_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InBattleFleurFairInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InBattleFleurFairInfo)
  return false;
#undef DO_
}

void InBattleFleurFairInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InBattleFleurFairInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 ability_group_id_list = 2;
  if (this->ability_group_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _ability_group_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->ability_group_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->ability_group_id_list(i), output);
  }

  // repeated uint32 gallery_id_list = 5;
  if (this->gallery_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _gallery_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->gallery_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->gallery_id_list(i), output);
  }

  // uint32 gallery_stage_index = 6;
  if (this->gallery_stage_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gallery_stage_index(), output);
  }

  // uint32 preview_stage_index = 8;
  if (this->preview_stage_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->preview_stage_index(), output);
  }

  // uint32 preview_display_duration = 12;
  if (this->preview_display_duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->preview_display_duration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InBattleFleurFairInfo)
}

::google::protobuf::uint8* InBattleFleurFairInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InBattleFleurFairInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 ability_group_id_list = 2;
  if (this->ability_group_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _ability_group_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->ability_group_id_list_, target);
  }

  // repeated uint32 gallery_id_list = 5;
  if (this->gallery_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _gallery_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->gallery_id_list_, target);
  }

  // uint32 gallery_stage_index = 6;
  if (this->gallery_stage_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gallery_stage_index(), target);
  }

  // uint32 preview_stage_index = 8;
  if (this->preview_stage_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->preview_stage_index(), target);
  }

  // uint32 preview_display_duration = 12;
  if (this->preview_display_duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->preview_display_duration(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InBattleFleurFairInfo)
  return target;
}

size_t InBattleFleurFairInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InBattleFleurFairInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 ability_group_id_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ability_group_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ability_group_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 gallery_id_list = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->gallery_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _gallery_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 preview_display_duration = 12;
  if (this->preview_display_duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->preview_display_duration());
  }

  // uint32 gallery_stage_index = 6;
  if (this->gallery_stage_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_stage_index());
  }

  // uint32 preview_stage_index = 8;
  if (this->preview_stage_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->preview_stage_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InBattleFleurFairInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InBattleFleurFairInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InBattleFleurFairInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InBattleFleurFairInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InBattleFleurFairInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InBattleFleurFairInfo)
    MergeFrom(*source);
  }
}

void InBattleFleurFairInfo::MergeFrom(const InBattleFleurFairInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InBattleFleurFairInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ability_group_id_list_.MergeFrom(from.ability_group_id_list_);
  gallery_id_list_.MergeFrom(from.gallery_id_list_);
  if (from.preview_display_duration() != 0) {
    set_preview_display_duration(from.preview_display_duration());
  }
  if (from.gallery_stage_index() != 0) {
    set_gallery_stage_index(from.gallery_stage_index());
  }
  if (from.preview_stage_index() != 0) {
    set_preview_stage_index(from.preview_stage_index());
  }
}

void InBattleFleurFairInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InBattleFleurFairInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InBattleFleurFairInfo::CopyFrom(const InBattleFleurFairInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InBattleFleurFairInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InBattleFleurFairInfo::IsInitialized() const {
  return true;
}

void InBattleFleurFairInfo::Swap(InBattleFleurFairInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InBattleFleurFairInfo::InternalSwap(InBattleFleurFairInfo* other) {
  using std::swap;
  ability_group_id_list_.InternalSwap(&other->ability_group_id_list_);
  gallery_id_list_.InternalSwap(&other->gallery_id_list_);
  swap(preview_display_duration_, other->preview_display_duration_);
  swap(gallery_stage_index_, other->gallery_stage_index_);
  swap(preview_stage_index_, other->preview_stage_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InBattleFleurFairInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InBattleFleurFairInfo

// repeated uint32 gallery_id_list = 5;
int InBattleFleurFairInfo::gallery_id_list_size() const {
  return gallery_id_list_.size();
}
void InBattleFleurFairInfo::clear_gallery_id_list() {
  gallery_id_list_.Clear();
}
::google::protobuf::uint32 InBattleFleurFairInfo::gallery_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleFleurFairInfo.gallery_id_list)
  return gallery_id_list_.Get(index);
}
void InBattleFleurFairInfo::set_gallery_id_list(int index, ::google::protobuf::uint32 value) {
  gallery_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.InBattleFleurFairInfo.gallery_id_list)
}
void InBattleFleurFairInfo::add_gallery_id_list(::google::protobuf::uint32 value) {
  gallery_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.InBattleFleurFairInfo.gallery_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
InBattleFleurFairInfo::gallery_id_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleFleurFairInfo.gallery_id_list)
  return gallery_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
InBattleFleurFairInfo::mutable_gallery_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleFleurFairInfo.gallery_id_list)
  return &gallery_id_list_;
}

// uint32 gallery_stage_index = 6;
void InBattleFleurFairInfo::clear_gallery_stage_index() {
  gallery_stage_index_ = 0u;
}
::google::protobuf::uint32 InBattleFleurFairInfo::gallery_stage_index() const {
  // @@protoc_insertion_point(field_get:proto.InBattleFleurFairInfo.gallery_stage_index)
  return gallery_stage_index_;
}
void InBattleFleurFairInfo::set_gallery_stage_index(::google::protobuf::uint32 value) {
  
  gallery_stage_index_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleFleurFairInfo.gallery_stage_index)
}

// uint32 preview_stage_index = 8;
void InBattleFleurFairInfo::clear_preview_stage_index() {
  preview_stage_index_ = 0u;
}
::google::protobuf::uint32 InBattleFleurFairInfo::preview_stage_index() const {
  // @@protoc_insertion_point(field_get:proto.InBattleFleurFairInfo.preview_stage_index)
  return preview_stage_index_;
}
void InBattleFleurFairInfo::set_preview_stage_index(::google::protobuf::uint32 value) {
  
  preview_stage_index_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleFleurFairInfo.preview_stage_index)
}

// repeated uint32 ability_group_id_list = 2;
int InBattleFleurFairInfo::ability_group_id_list_size() const {
  return ability_group_id_list_.size();
}
void InBattleFleurFairInfo::clear_ability_group_id_list() {
  ability_group_id_list_.Clear();
}
::google::protobuf::uint32 InBattleFleurFairInfo::ability_group_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleFleurFairInfo.ability_group_id_list)
  return ability_group_id_list_.Get(index);
}
void InBattleFleurFairInfo::set_ability_group_id_list(int index, ::google::protobuf::uint32 value) {
  ability_group_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.InBattleFleurFairInfo.ability_group_id_list)
}
void InBattleFleurFairInfo::add_ability_group_id_list(::google::protobuf::uint32 value) {
  ability_group_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.InBattleFleurFairInfo.ability_group_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
InBattleFleurFairInfo::ability_group_id_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleFleurFairInfo.ability_group_id_list)
  return ability_group_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
InBattleFleurFairInfo::mutable_ability_group_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleFleurFairInfo.ability_group_id_list)
  return &ability_group_id_list_;
}

// uint32 preview_display_duration = 12;
void InBattleFleurFairInfo::clear_preview_display_duration() {
  preview_display_duration_ = 0u;
}
::google::protobuf::uint32 InBattleFleurFairInfo::preview_display_duration() const {
  // @@protoc_insertion_point(field_get:proto.InBattleFleurFairInfo.preview_display_duration)
  return preview_display_duration_;
}
void InBattleFleurFairInfo::set_preview_display_duration(::google::protobuf::uint32 value) {
  
  preview_display_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleFleurFairInfo.preview_display_duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CharAmusementAvatarInfo::kUidFieldNumber;
const int CharAmusementAvatarInfo::kPunishTimeFieldNumber;
const int CharAmusementAvatarInfo::kAvatarIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CharAmusementAvatarInfo::CharAmusementAvatarInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CharAmusementAvatarInfo)
}
CharAmusementAvatarInfo::CharAmusementAvatarInfo(const CharAmusementAvatarInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      avatar_id_list_(from.avatar_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&punish_time_, &from.punish_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&punish_time_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:proto.CharAmusementAvatarInfo)
}

void CharAmusementAvatarInfo::SharedCtor() {
  ::memset(&punish_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&punish_time_)) + sizeof(uid_));
  _cached_size_ = 0;
}

CharAmusementAvatarInfo::~CharAmusementAvatarInfo() {
  // @@protoc_insertion_point(destructor:proto.CharAmusementAvatarInfo)
  SharedDtor();
}

void CharAmusementAvatarInfo::SharedDtor() {
}

void CharAmusementAvatarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharAmusementAvatarInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CharAmusementAvatarInfo& CharAmusementAvatarInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

CharAmusementAvatarInfo* CharAmusementAvatarInfo::New(::google::protobuf::Arena* arena) const {
  CharAmusementAvatarInfo* n = new CharAmusementAvatarInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CharAmusementAvatarInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CharAmusementAvatarInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_id_list_.Clear();
  ::memset(&punish_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&punish_time_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

bool CharAmusementAvatarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CharAmusementAvatarInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 punish_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &punish_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 avatar_id_list = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_avatar_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 82u, input, this->mutable_avatar_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CharAmusementAvatarInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CharAmusementAvatarInfo)
  return false;
#undef DO_
}

void CharAmusementAvatarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CharAmusementAvatarInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 punish_time = 7;
  if (this->punish_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->punish_time(), output);
  }

  // repeated uint32 avatar_id_list = 10;
  if (this->avatar_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _avatar_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->avatar_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->avatar_id_list(i), output);
  }

  // uint32 uid = 11;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CharAmusementAvatarInfo)
}

::google::protobuf::uint8* CharAmusementAvatarInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CharAmusementAvatarInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 punish_time = 7;
  if (this->punish_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->punish_time(), target);
  }

  // repeated uint32 avatar_id_list = 10;
  if (this->avatar_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _avatar_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->avatar_id_list_, target);
  }

  // uint32 uid = 11;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CharAmusementAvatarInfo)
  return target;
}

size_t CharAmusementAvatarInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CharAmusementAvatarInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 avatar_id_list = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->avatar_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _avatar_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 punish_time = 7;
  if (this->punish_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->punish_time());
  }

  // uint32 uid = 11;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharAmusementAvatarInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CharAmusementAvatarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CharAmusementAvatarInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CharAmusementAvatarInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CharAmusementAvatarInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CharAmusementAvatarInfo)
    MergeFrom(*source);
  }
}

void CharAmusementAvatarInfo::MergeFrom(const CharAmusementAvatarInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CharAmusementAvatarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatar_id_list_.MergeFrom(from.avatar_id_list_);
  if (from.punish_time() != 0) {
    set_punish_time(from.punish_time());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void CharAmusementAvatarInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CharAmusementAvatarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharAmusementAvatarInfo::CopyFrom(const CharAmusementAvatarInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CharAmusementAvatarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharAmusementAvatarInfo::IsInitialized() const {
  return true;
}

void CharAmusementAvatarInfo::Swap(CharAmusementAvatarInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CharAmusementAvatarInfo::InternalSwap(CharAmusementAvatarInfo* other) {
  using std::swap;
  avatar_id_list_.InternalSwap(&other->avatar_id_list_);
  swap(punish_time_, other->punish_time_);
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CharAmusementAvatarInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CharAmusementAvatarInfo

// uint32 uid = 11;
void CharAmusementAvatarInfo::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 CharAmusementAvatarInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.CharAmusementAvatarInfo.uid)
  return uid_;
}
void CharAmusementAvatarInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.CharAmusementAvatarInfo.uid)
}

// uint32 punish_time = 7;
void CharAmusementAvatarInfo::clear_punish_time() {
  punish_time_ = 0u;
}
::google::protobuf::uint32 CharAmusementAvatarInfo::punish_time() const {
  // @@protoc_insertion_point(field_get:proto.CharAmusementAvatarInfo.punish_time)
  return punish_time_;
}
void CharAmusementAvatarInfo::set_punish_time(::google::protobuf::uint32 value) {
  
  punish_time_ = value;
  // @@protoc_insertion_point(field_set:proto.CharAmusementAvatarInfo.punish_time)
}

// repeated uint32 avatar_id_list = 10;
int CharAmusementAvatarInfo::avatar_id_list_size() const {
  return avatar_id_list_.size();
}
void CharAmusementAvatarInfo::clear_avatar_id_list() {
  avatar_id_list_.Clear();
}
::google::protobuf::uint32 CharAmusementAvatarInfo::avatar_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.CharAmusementAvatarInfo.avatar_id_list)
  return avatar_id_list_.Get(index);
}
void CharAmusementAvatarInfo::set_avatar_id_list(int index, ::google::protobuf::uint32 value) {
  avatar_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.CharAmusementAvatarInfo.avatar_id_list)
}
void CharAmusementAvatarInfo::add_avatar_id_list(::google::protobuf::uint32 value) {
  avatar_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.CharAmusementAvatarInfo.avatar_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CharAmusementAvatarInfo::avatar_id_list() const {
  // @@protoc_insertion_point(field_list:proto.CharAmusementAvatarInfo.avatar_id_list)
  return avatar_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CharAmusementAvatarInfo::mutable_avatar_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.CharAmusementAvatarInfo.avatar_id_list)
  return &avatar_id_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CharAmusementInfo::kTotalCostTimeFieldNumber;
const int CharAmusementInfo::kStageIdFieldNumber;
const int CharAmusementInfo::kLevelIdFieldNumber;
const int CharAmusementInfo::kPreviewStageIndexFieldNumber;
const int CharAmusementInfo::kAvatarInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CharAmusementInfo::CharAmusementInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CharAmusementInfo)
}
CharAmusementInfo::CharAmusementInfo(const CharAmusementInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      avatar_info_list_(from.avatar_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stage_id_, &from.stage_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_cost_time_) -
    reinterpret_cast<char*>(&stage_id_)) + sizeof(total_cost_time_));
  // @@protoc_insertion_point(copy_constructor:proto.CharAmusementInfo)
}

void CharAmusementInfo::SharedCtor() {
  ::memset(&stage_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_cost_time_) -
      reinterpret_cast<char*>(&stage_id_)) + sizeof(total_cost_time_));
  _cached_size_ = 0;
}

CharAmusementInfo::~CharAmusementInfo() {
  // @@protoc_insertion_point(destructor:proto.CharAmusementInfo)
  SharedDtor();
}

void CharAmusementInfo::SharedDtor() {
}

void CharAmusementInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharAmusementInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CharAmusementInfo& CharAmusementInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

CharAmusementInfo* CharAmusementInfo::New(::google::protobuf::Arena* arena) const {
  CharAmusementInfo* n = new CharAmusementInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CharAmusementInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CharAmusementInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_info_list_.Clear();
  ::memset(&stage_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_cost_time_) -
      reinterpret_cast<char*>(&stage_id_)) + sizeof(total_cost_time_));
  _internal_metadata_.Clear();
}

bool CharAmusementInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CharAmusementInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 stage_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 preview_stage_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preview_stage_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.CharAmusementAvatarInfo avatar_info_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_avatar_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_cost_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_cost_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CharAmusementInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CharAmusementInfo)
  return false;
#undef DO_
}

void CharAmusementInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CharAmusementInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stage_id = 2;
  if (this->stage_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stage_id(), output);
  }

  // uint32 preview_stage_index = 4;
  if (this->preview_stage_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->preview_stage_index(), output);
  }

  // repeated .proto.CharAmusementAvatarInfo avatar_info_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->avatar_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->avatar_info_list(static_cast<int>(i)), output);
  }

  // uint32 level_id = 10;
  if (this->level_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->level_id(), output);
  }

  // uint32 total_cost_time = 11;
  if (this->total_cost_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->total_cost_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CharAmusementInfo)
}

::google::protobuf::uint8* CharAmusementInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CharAmusementInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stage_id = 2;
  if (this->stage_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stage_id(), target);
  }

  // uint32 preview_stage_index = 4;
  if (this->preview_stage_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->preview_stage_index(), target);
  }

  // repeated .proto.CharAmusementAvatarInfo avatar_info_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->avatar_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->avatar_info_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 level_id = 10;
  if (this->level_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->level_id(), target);
  }

  // uint32 total_cost_time = 11;
  if (this->total_cost_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->total_cost_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CharAmusementInfo)
  return target;
}

size_t CharAmusementInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CharAmusementInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.CharAmusementAvatarInfo avatar_info_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->avatar_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatar_info_list(static_cast<int>(i)));
    }
  }

  // uint32 stage_id = 2;
  if (this->stage_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stage_id());
  }

  // uint32 preview_stage_index = 4;
  if (this->preview_stage_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->preview_stage_index());
  }

  // uint32 level_id = 10;
  if (this->level_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level_id());
  }

  // uint32 total_cost_time = 11;
  if (this->total_cost_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_cost_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharAmusementInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CharAmusementInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CharAmusementInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CharAmusementInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CharAmusementInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CharAmusementInfo)
    MergeFrom(*source);
  }
}

void CharAmusementInfo::MergeFrom(const CharAmusementInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CharAmusementInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatar_info_list_.MergeFrom(from.avatar_info_list_);
  if (from.stage_id() != 0) {
    set_stage_id(from.stage_id());
  }
  if (from.preview_stage_index() != 0) {
    set_preview_stage_index(from.preview_stage_index());
  }
  if (from.level_id() != 0) {
    set_level_id(from.level_id());
  }
  if (from.total_cost_time() != 0) {
    set_total_cost_time(from.total_cost_time());
  }
}

void CharAmusementInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CharAmusementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharAmusementInfo::CopyFrom(const CharAmusementInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CharAmusementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharAmusementInfo::IsInitialized() const {
  return true;
}

void CharAmusementInfo::Swap(CharAmusementInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CharAmusementInfo::InternalSwap(CharAmusementInfo* other) {
  using std::swap;
  avatar_info_list_.InternalSwap(&other->avatar_info_list_);
  swap(stage_id_, other->stage_id_);
  swap(preview_stage_index_, other->preview_stage_index_);
  swap(level_id_, other->level_id_);
  swap(total_cost_time_, other->total_cost_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CharAmusementInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CharAmusementInfo

// uint32 total_cost_time = 11;
void CharAmusementInfo::clear_total_cost_time() {
  total_cost_time_ = 0u;
}
::google::protobuf::uint32 CharAmusementInfo::total_cost_time() const {
  // @@protoc_insertion_point(field_get:proto.CharAmusementInfo.total_cost_time)
  return total_cost_time_;
}
void CharAmusementInfo::set_total_cost_time(::google::protobuf::uint32 value) {
  
  total_cost_time_ = value;
  // @@protoc_insertion_point(field_set:proto.CharAmusementInfo.total_cost_time)
}

// uint32 stage_id = 2;
void CharAmusementInfo::clear_stage_id() {
  stage_id_ = 0u;
}
::google::protobuf::uint32 CharAmusementInfo::stage_id() const {
  // @@protoc_insertion_point(field_get:proto.CharAmusementInfo.stage_id)
  return stage_id_;
}
void CharAmusementInfo::set_stage_id(::google::protobuf::uint32 value) {
  
  stage_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CharAmusementInfo.stage_id)
}

// uint32 level_id = 10;
void CharAmusementInfo::clear_level_id() {
  level_id_ = 0u;
}
::google::protobuf::uint32 CharAmusementInfo::level_id() const {
  // @@protoc_insertion_point(field_get:proto.CharAmusementInfo.level_id)
  return level_id_;
}
void CharAmusementInfo::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CharAmusementInfo.level_id)
}

// uint32 preview_stage_index = 4;
void CharAmusementInfo::clear_preview_stage_index() {
  preview_stage_index_ = 0u;
}
::google::protobuf::uint32 CharAmusementInfo::preview_stage_index() const {
  // @@protoc_insertion_point(field_get:proto.CharAmusementInfo.preview_stage_index)
  return preview_stage_index_;
}
void CharAmusementInfo::set_preview_stage_index(::google::protobuf::uint32 value) {
  
  preview_stage_index_ = value;
  // @@protoc_insertion_point(field_set:proto.CharAmusementInfo.preview_stage_index)
}

// repeated .proto.CharAmusementAvatarInfo avatar_info_list = 5;
int CharAmusementInfo::avatar_info_list_size() const {
  return avatar_info_list_.size();
}
void CharAmusementInfo::clear_avatar_info_list() {
  avatar_info_list_.Clear();
}
const ::proto::CharAmusementAvatarInfo& CharAmusementInfo::avatar_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.CharAmusementInfo.avatar_info_list)
  return avatar_info_list_.Get(index);
}
::proto::CharAmusementAvatarInfo* CharAmusementInfo::mutable_avatar_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CharAmusementInfo.avatar_info_list)
  return avatar_info_list_.Mutable(index);
}
::proto::CharAmusementAvatarInfo* CharAmusementInfo::add_avatar_info_list() {
  // @@protoc_insertion_point(field_add:proto.CharAmusementInfo.avatar_info_list)
  return avatar_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::CharAmusementAvatarInfo >*
CharAmusementInfo::mutable_avatar_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.CharAmusementInfo.avatar_info_list)
  return &avatar_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::CharAmusementAvatarInfo >&
CharAmusementInfo::avatar_info_list() const {
  // @@protoc_insertion_point(field_list:proto.CharAmusementInfo.avatar_info_list)
  return avatar_info_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrickBreakerStageInfo::kLevelIdFieldNumber;
const int BrickBreakerStageInfo::kStageTypeFieldNumber;
const int BrickBreakerStageInfo::kBattleInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrickBreakerStageInfo::BrickBreakerStageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BrickBreakerStageInfo)
}
BrickBreakerStageInfo::BrickBreakerStageInfo(const BrickBreakerStageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      battle_info_list_(from.battle_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stage_type_, &from.stage_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_id_) -
    reinterpret_cast<char*>(&stage_type_)) + sizeof(level_id_));
  // @@protoc_insertion_point(copy_constructor:proto.BrickBreakerStageInfo)
}

void BrickBreakerStageInfo::SharedCtor() {
  ::memset(&stage_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_id_) -
      reinterpret_cast<char*>(&stage_type_)) + sizeof(level_id_));
  _cached_size_ = 0;
}

BrickBreakerStageInfo::~BrickBreakerStageInfo() {
  // @@protoc_insertion_point(destructor:proto.BrickBreakerStageInfo)
  SharedDtor();
}

void BrickBreakerStageInfo::SharedDtor() {
}

void BrickBreakerStageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrickBreakerStageInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BrickBreakerStageInfo& BrickBreakerStageInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

BrickBreakerStageInfo* BrickBreakerStageInfo::New(::google::protobuf::Arena* arena) const {
  BrickBreakerStageInfo* n = new BrickBreakerStageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrickBreakerStageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BrickBreakerStageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battle_info_list_.Clear();
  ::memset(&stage_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_id_) -
      reinterpret_cast<char*>(&stage_type_)) + sizeof(level_id_));
  _internal_metadata_.Clear();
}

bool BrickBreakerStageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BrickBreakerStageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.BrickBreakerStageType stage_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stage_type(static_cast< ::proto::BrickBreakerStageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.BrickBreakerPlayerBattleInfo battle_info_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BrickBreakerStageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BrickBreakerStageInfo)
  return false;
#undef DO_
}

void BrickBreakerStageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BrickBreakerStageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.BrickBreakerStageType stage_type = 1;
  if (this->stage_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stage_type(), output);
  }

  // repeated .proto.BrickBreakerPlayerBattleInfo battle_info_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->battle_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battle_info_list(static_cast<int>(i)), output);
  }

  // uint32 level_id = 15;
  if (this->level_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->level_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BrickBreakerStageInfo)
}

::google::protobuf::uint8* BrickBreakerStageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BrickBreakerStageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.BrickBreakerStageType stage_type = 1;
  if (this->stage_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stage_type(), target);
  }

  // repeated .proto.BrickBreakerPlayerBattleInfo battle_info_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->battle_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->battle_info_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 level_id = 15;
  if (this->level_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->level_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BrickBreakerStageInfo)
  return target;
}

size_t BrickBreakerStageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BrickBreakerStageInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.BrickBreakerPlayerBattleInfo battle_info_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->battle_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_info_list(static_cast<int>(i)));
    }
  }

  // .proto.BrickBreakerStageType stage_type = 1;
  if (this->stage_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage_type());
  }

  // uint32 level_id = 15;
  if (this->level_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrickBreakerStageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BrickBreakerStageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BrickBreakerStageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BrickBreakerStageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BrickBreakerStageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BrickBreakerStageInfo)
    MergeFrom(*source);
  }
}

void BrickBreakerStageInfo::MergeFrom(const BrickBreakerStageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BrickBreakerStageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  battle_info_list_.MergeFrom(from.battle_info_list_);
  if (from.stage_type() != 0) {
    set_stage_type(from.stage_type());
  }
  if (from.level_id() != 0) {
    set_level_id(from.level_id());
  }
}

void BrickBreakerStageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BrickBreakerStageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrickBreakerStageInfo::CopyFrom(const BrickBreakerStageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BrickBreakerStageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrickBreakerStageInfo::IsInitialized() const {
  return true;
}

void BrickBreakerStageInfo::Swap(BrickBreakerStageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrickBreakerStageInfo::InternalSwap(BrickBreakerStageInfo* other) {
  using std::swap;
  battle_info_list_.InternalSwap(&other->battle_info_list_);
  swap(stage_type_, other->stage_type_);
  swap(level_id_, other->level_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrickBreakerStageInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrickBreakerStageInfo

// uint32 level_id = 15;
void BrickBreakerStageInfo::clear_level_id() {
  level_id_ = 0u;
}
::google::protobuf::uint32 BrickBreakerStageInfo::level_id() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerStageInfo.level_id)
  return level_id_;
}
void BrickBreakerStageInfo::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerStageInfo.level_id)
}

// .proto.BrickBreakerStageType stage_type = 1;
void BrickBreakerStageInfo::clear_stage_type() {
  stage_type_ = 0;
}
::proto::BrickBreakerStageType BrickBreakerStageInfo::stage_type() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerStageInfo.stage_type)
  return static_cast< ::proto::BrickBreakerStageType >(stage_type_);
}
void BrickBreakerStageInfo::set_stage_type(::proto::BrickBreakerStageType value) {
  
  stage_type_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerStageInfo.stage_type)
}

// repeated .proto.BrickBreakerPlayerBattleInfo battle_info_list = 2;
int BrickBreakerStageInfo::battle_info_list_size() const {
  return battle_info_list_.size();
}
void BrickBreakerStageInfo::clear_battle_info_list() {
  battle_info_list_.Clear();
}
const ::proto::BrickBreakerPlayerBattleInfo& BrickBreakerStageInfo::battle_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerStageInfo.battle_info_list)
  return battle_info_list_.Get(index);
}
::proto::BrickBreakerPlayerBattleInfo* BrickBreakerStageInfo::mutable_battle_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BrickBreakerStageInfo.battle_info_list)
  return battle_info_list_.Mutable(index);
}
::proto::BrickBreakerPlayerBattleInfo* BrickBreakerStageInfo::add_battle_info_list() {
  // @@protoc_insertion_point(field_add:proto.BrickBreakerStageInfo.battle_info_list)
  return battle_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::BrickBreakerPlayerBattleInfo >*
BrickBreakerStageInfo::mutable_battle_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerStageInfo.battle_info_list)
  return &battle_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::BrickBreakerPlayerBattleInfo >&
BrickBreakerStageInfo::battle_info_list() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerStageInfo.battle_info_list)
  return battle_info_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoinCollectStageInfo::kLevelIdFieldNumber;
const int CoinCollectStageInfo::kPlayIndexFieldNumber;
const int CoinCollectStageInfo::kPlayerInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoinCollectStageInfo::CoinCollectStageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CoinCollectStageInfo)
}
CoinCollectStageInfo::CoinCollectStageInfo(const CoinCollectStageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      player_info_list_(from.player_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_id_, &from.level_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_index_) -
    reinterpret_cast<char*>(&level_id_)) + sizeof(play_index_));
  // @@protoc_insertion_point(copy_constructor:proto.CoinCollectStageInfo)
}

void CoinCollectStageInfo::SharedCtor() {
  ::memset(&level_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_index_) -
      reinterpret_cast<char*>(&level_id_)) + sizeof(play_index_));
  _cached_size_ = 0;
}

CoinCollectStageInfo::~CoinCollectStageInfo() {
  // @@protoc_insertion_point(destructor:proto.CoinCollectStageInfo)
  SharedDtor();
}

void CoinCollectStageInfo::SharedDtor() {
}

void CoinCollectStageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoinCollectStageInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CoinCollectStageInfo& CoinCollectStageInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

CoinCollectStageInfo* CoinCollectStageInfo::New(::google::protobuf::Arena* arena) const {
  CoinCollectStageInfo* n = new CoinCollectStageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CoinCollectStageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CoinCollectStageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_info_list_.Clear();
  ::memset(&level_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_index_) -
      reinterpret_cast<char*>(&level_id_)) + sizeof(play_index_));
  _internal_metadata_.Clear();
}

bool CoinCollectStageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CoinCollectStageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 level_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.CoinCollectPlayerInfo player_info_list = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_index = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CoinCollectStageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CoinCollectStageInfo)
  return false;
#undef DO_
}

void CoinCollectStageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CoinCollectStageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level_id = 3;
  if (this->level_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level_id(), output);
  }

  // repeated .proto.CoinCollectPlayerInfo player_info_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->player_info_list(static_cast<int>(i)), output);
  }

  // uint32 play_index = 15;
  if (this->play_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->play_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CoinCollectStageInfo)
}

::google::protobuf::uint8* CoinCollectStageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CoinCollectStageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level_id = 3;
  if (this->level_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level_id(), target);
  }

  // repeated .proto.CoinCollectPlayerInfo player_info_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->player_info_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 play_index = 15;
  if (this->play_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->play_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CoinCollectStageInfo)
  return target;
}

size_t CoinCollectStageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CoinCollectStageInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.CoinCollectPlayerInfo player_info_list = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->player_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info_list(static_cast<int>(i)));
    }
  }

  // uint32 level_id = 3;
  if (this->level_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level_id());
  }

  // uint32 play_index = 15;
  if (this->play_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoinCollectStageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CoinCollectStageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CoinCollectStageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CoinCollectStageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CoinCollectStageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CoinCollectStageInfo)
    MergeFrom(*source);
  }
}

void CoinCollectStageInfo::MergeFrom(const CoinCollectStageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CoinCollectStageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_info_list_.MergeFrom(from.player_info_list_);
  if (from.level_id() != 0) {
    set_level_id(from.level_id());
  }
  if (from.play_index() != 0) {
    set_play_index(from.play_index());
  }
}

void CoinCollectStageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CoinCollectStageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoinCollectStageInfo::CopyFrom(const CoinCollectStageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CoinCollectStageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoinCollectStageInfo::IsInitialized() const {
  return true;
}

void CoinCollectStageInfo::Swap(CoinCollectStageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoinCollectStageInfo::InternalSwap(CoinCollectStageInfo* other) {
  using std::swap;
  player_info_list_.InternalSwap(&other->player_info_list_);
  swap(level_id_, other->level_id_);
  swap(play_index_, other->play_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CoinCollectStageInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CoinCollectStageInfo

// uint32 level_id = 3;
void CoinCollectStageInfo::clear_level_id() {
  level_id_ = 0u;
}
::google::protobuf::uint32 CoinCollectStageInfo::level_id() const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectStageInfo.level_id)
  return level_id_;
}
void CoinCollectStageInfo::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CoinCollectStageInfo.level_id)
}

// uint32 play_index = 15;
void CoinCollectStageInfo::clear_play_index() {
  play_index_ = 0u;
}
::google::protobuf::uint32 CoinCollectStageInfo::play_index() const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectStageInfo.play_index)
  return play_index_;
}
void CoinCollectStageInfo::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.CoinCollectStageInfo.play_index)
}

// repeated .proto.CoinCollectPlayerInfo player_info_list = 9;
int CoinCollectStageInfo::player_info_list_size() const {
  return player_info_list_.size();
}
void CoinCollectStageInfo::clear_player_info_list() {
  player_info_list_.Clear();
}
const ::proto::CoinCollectPlayerInfo& CoinCollectStageInfo::player_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectStageInfo.player_info_list)
  return player_info_list_.Get(index);
}
::proto::CoinCollectPlayerInfo* CoinCollectStageInfo::mutable_player_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CoinCollectStageInfo.player_info_list)
  return player_info_list_.Mutable(index);
}
::proto::CoinCollectPlayerInfo* CoinCollectStageInfo::add_player_info_list() {
  // @@protoc_insertion_point(field_add:proto.CoinCollectStageInfo.player_info_list)
  return player_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::CoinCollectPlayerInfo >*
CoinCollectStageInfo::mutable_player_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.CoinCollectStageInfo.player_info_list)
  return &player_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::CoinCollectPlayerInfo >&
CoinCollectStageInfo::player_info_list() const {
  // @@protoc_insertion_point(field_list:proto.CoinCollectStageInfo.player_info_list)
  return player_info_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LanV3BoatStageInfo::kPlayerUidListFieldNumber;
const int LanV3BoatStageInfo::kMapIdFieldNumber;
const int LanV3BoatStageInfo::kIsSingleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LanV3BoatStageInfo::LanV3BoatStageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.LanV3BoatStageInfo)
}
LanV3BoatStageInfo::LanV3BoatStageInfo(const LanV3BoatStageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      player_uid_list_(from.player_uid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&map_id_, &from.map_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_single_) -
    reinterpret_cast<char*>(&map_id_)) + sizeof(is_single_));
  // @@protoc_insertion_point(copy_constructor:proto.LanV3BoatStageInfo)
}

void LanV3BoatStageInfo::SharedCtor() {
  ::memset(&map_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_single_) -
      reinterpret_cast<char*>(&map_id_)) + sizeof(is_single_));
  _cached_size_ = 0;
}

LanV3BoatStageInfo::~LanV3BoatStageInfo() {
  // @@protoc_insertion_point(destructor:proto.LanV3BoatStageInfo)
  SharedDtor();
}

void LanV3BoatStageInfo::SharedDtor() {
}

void LanV3BoatStageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LanV3BoatStageInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LanV3BoatStageInfo& LanV3BoatStageInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

LanV3BoatStageInfo* LanV3BoatStageInfo::New(::google::protobuf::Arena* arena) const {
  LanV3BoatStageInfo* n = new LanV3BoatStageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LanV3BoatStageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.LanV3BoatStageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_uid_list_.Clear();
  ::memset(&map_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_single_) -
      reinterpret_cast<char*>(&map_id_)) + sizeof(is_single_));
  _internal_metadata_.Clear();
}

bool LanV3BoatStageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.LanV3BoatStageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 player_uid_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_uid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_player_uid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 map_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_single = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_single_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.LanV3BoatStageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.LanV3BoatStageInfo)
  return false;
#undef DO_
}

void LanV3BoatStageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.LanV3BoatStageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 player_uid_list = 2;
  if (this->player_uid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _player_uid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->player_uid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->player_uid_list(i), output);
  }

  // uint32 map_id = 10;
  if (this->map_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->map_id(), output);
  }

  // bool is_single = 13;
  if (this->is_single() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_single(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.LanV3BoatStageInfo)
}

::google::protobuf::uint8* LanV3BoatStageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.LanV3BoatStageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 player_uid_list = 2;
  if (this->player_uid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _player_uid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->player_uid_list_, target);
  }

  // uint32 map_id = 10;
  if (this->map_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->map_id(), target);
  }

  // bool is_single = 13;
  if (this->is_single() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_single(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.LanV3BoatStageInfo)
  return target;
}

size_t LanV3BoatStageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.LanV3BoatStageInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 player_uid_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->player_uid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _player_uid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 map_id = 10;
  if (this->map_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->map_id());
  }

  // bool is_single = 13;
  if (this->is_single() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LanV3BoatStageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.LanV3BoatStageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LanV3BoatStageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LanV3BoatStageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.LanV3BoatStageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.LanV3BoatStageInfo)
    MergeFrom(*source);
  }
}

void LanV3BoatStageInfo::MergeFrom(const LanV3BoatStageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.LanV3BoatStageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_uid_list_.MergeFrom(from.player_uid_list_);
  if (from.map_id() != 0) {
    set_map_id(from.map_id());
  }
  if (from.is_single() != 0) {
    set_is_single(from.is_single());
  }
}

void LanV3BoatStageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.LanV3BoatStageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LanV3BoatStageInfo::CopyFrom(const LanV3BoatStageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.LanV3BoatStageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanV3BoatStageInfo::IsInitialized() const {
  return true;
}

void LanV3BoatStageInfo::Swap(LanV3BoatStageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LanV3BoatStageInfo::InternalSwap(LanV3BoatStageInfo* other) {
  using std::swap;
  player_uid_list_.InternalSwap(&other->player_uid_list_);
  swap(map_id_, other->map_id_);
  swap(is_single_, other->is_single_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LanV3BoatStageInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LanV3BoatStageInfo

// repeated uint32 player_uid_list = 2;
int LanV3BoatStageInfo::player_uid_list_size() const {
  return player_uid_list_.size();
}
void LanV3BoatStageInfo::clear_player_uid_list() {
  player_uid_list_.Clear();
}
::google::protobuf::uint32 LanV3BoatStageInfo::player_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatStageInfo.player_uid_list)
  return player_uid_list_.Get(index);
}
void LanV3BoatStageInfo::set_player_uid_list(int index, ::google::protobuf::uint32 value) {
  player_uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.LanV3BoatStageInfo.player_uid_list)
}
void LanV3BoatStageInfo::add_player_uid_list(::google::protobuf::uint32 value) {
  player_uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.LanV3BoatStageInfo.player_uid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LanV3BoatStageInfo::player_uid_list() const {
  // @@protoc_insertion_point(field_list:proto.LanV3BoatStageInfo.player_uid_list)
  return player_uid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LanV3BoatStageInfo::mutable_player_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.LanV3BoatStageInfo.player_uid_list)
  return &player_uid_list_;
}

// uint32 map_id = 10;
void LanV3BoatStageInfo::clear_map_id() {
  map_id_ = 0u;
}
::google::protobuf::uint32 LanV3BoatStageInfo::map_id() const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatStageInfo.map_id)
  return map_id_;
}
void LanV3BoatStageInfo::set_map_id(::google::protobuf::uint32 value) {
  
  map_id_ = value;
  // @@protoc_insertion_point(field_set:proto.LanV3BoatStageInfo.map_id)
}

// bool is_single = 13;
void LanV3BoatStageInfo::clear_is_single() {
  is_single_ = false;
}
bool LanV3BoatStageInfo::is_single() const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatStageInfo.is_single)
  return is_single_;
}
void LanV3BoatStageInfo::set_is_single(bool value) {
  
  is_single_ = value;
  // @@protoc_insertion_point(field_set:proto.LanV3BoatStageInfo.is_single)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultistagePlayInfo::kPlayIndexFieldNumber;
const int MultistagePlayInfo::kPlayTypeFieldNumber;
const int MultistagePlayInfo::kStageTypeFieldNumber;
const int MultistagePlayInfo::kDurationFieldNumber;
const int MultistagePlayInfo::kGroupIdFieldNumber;
const int MultistagePlayInfo::kBeginTimeFieldNumber;
const int MultistagePlayInfo::kStageIndexFieldNumber;
const int MultistagePlayInfo::kMechanicusInfoFieldNumber;
const int MultistagePlayInfo::kFleurFairInfoFieldNumber;
const int MultistagePlayInfo::kHideAndSeekInfoFieldNumber;
const int MultistagePlayInfo::kChessInfoFieldNumber;
const int MultistagePlayInfo::kIrodoriChessInfoFieldNumber;
const int MultistagePlayInfo::kCharAmusementInfoFieldNumber;
const int MultistagePlayInfo::kBrickBreakerInfoFieldNumber;
const int MultistagePlayInfo::kCoinCollectInfoFieldNumber;
const int MultistagePlayInfo::kLanV3BoatInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultistagePlayInfo::MultistagePlayInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MultistagePlayInfo)
}
MultistagePlayInfo::MultistagePlayInfo(const MultistagePlayInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stage_index_, &from.stage_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&stage_index_)) + sizeof(group_id_));
  clear_has_detail();
  switch (from.detail_case()) {
    case kMechanicusInfo: {
      mutable_mechanicus_info()->::proto::InBattleMechanicusInfo::MergeFrom(from.mechanicus_info());
      break;
    }
    case kFleurFairInfo: {
      mutable_fleur_fair_info()->::proto::InBattleFleurFairInfo::MergeFrom(from.fleur_fair_info());
      break;
    }
    case kHideAndSeekInfo: {
      mutable_hide_and_seek_info()->::proto::HideAndSeekStageInfo::MergeFrom(from.hide_and_seek_info());
      break;
    }
    case kChessInfo: {
      mutable_chess_info()->::proto::InBattleChessInfo::MergeFrom(from.chess_info());
      break;
    }
    case kIrodoriChessInfo: {
      mutable_irodori_chess_info()->::proto::InBattleIrodoriChessInfo::MergeFrom(from.irodori_chess_info());
      break;
    }
    case kCharAmusementInfo: {
      mutable_char_amusement_info()->::proto::CharAmusementInfo::MergeFrom(from.char_amusement_info());
      break;
    }
    case kBrickBreakerInfo: {
      mutable_brick_breaker_info()->::proto::BrickBreakerStageInfo::MergeFrom(from.brick_breaker_info());
      break;
    }
    case kCoinCollectInfo: {
      mutable_coin_collect_info()->::proto::CoinCollectStageInfo::MergeFrom(from.coin_collect_info());
      break;
    }
    case kLanV3BoatInfo: {
      mutable_lan_v3_boat_info()->::proto::LanV3BoatStageInfo::MergeFrom(from.lan_v3_boat_info());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.MultistagePlayInfo)
}

void MultistagePlayInfo::SharedCtor() {
  ::memset(&stage_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&stage_index_)) + sizeof(group_id_));
  clear_has_detail();
  _cached_size_ = 0;
}

MultistagePlayInfo::~MultistagePlayInfo() {
  // @@protoc_insertion_point(destructor:proto.MultistagePlayInfo)
  SharedDtor();
}

void MultistagePlayInfo::SharedDtor() {
  if (has_detail()) {
    clear_detail();
  }
}

void MultistagePlayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultistagePlayInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultistagePlayInfo& MultistagePlayInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

MultistagePlayInfo* MultistagePlayInfo::New(::google::protobuf::Arena* arena) const {
  MultistagePlayInfo* n = new MultistagePlayInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultistagePlayInfo::clear_detail() {
// @@protoc_insertion_point(one_of_clear_start:proto.MultistagePlayInfo)
  switch (detail_case()) {
    case kMechanicusInfo: {
      delete detail_.mechanicus_info_;
      break;
    }
    case kFleurFairInfo: {
      delete detail_.fleur_fair_info_;
      break;
    }
    case kHideAndSeekInfo: {
      delete detail_.hide_and_seek_info_;
      break;
    }
    case kChessInfo: {
      delete detail_.chess_info_;
      break;
    }
    case kIrodoriChessInfo: {
      delete detail_.irodori_chess_info_;
      break;
    }
    case kCharAmusementInfo: {
      delete detail_.char_amusement_info_;
      break;
    }
    case kBrickBreakerInfo: {
      delete detail_.brick_breaker_info_;
      break;
    }
    case kCoinCollectInfo: {
      delete detail_.coin_collect_info_;
      break;
    }
    case kLanV3BoatInfo: {
      delete detail_.lan_v3_boat_info_;
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DETAIL_NOT_SET;
}


void MultistagePlayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MultistagePlayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&stage_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&stage_index_)) + sizeof(group_id_));
  clear_detail();
  _internal_metadata_.Clear();
}

bool MultistagePlayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MultistagePlayInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 stage_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 duration = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 begin_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 stage_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 group_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_index = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.HideAndSeekStageInfo hide_and_seek_info = 108;
      case 108: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 866 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hide_and_seek_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.CharAmusementInfo char_amusement_info = 324;
      case 324: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 2594 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_char_amusement_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.InBattleIrodoriChessInfo irodori_chess_info = 531;
      case 531: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 4250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_irodori_chess_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.InBattleFleurFairInfo fleur_fair_info = 1064;
      case 1064: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 8514 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fleur_fair_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.CoinCollectStageInfo coin_collect_info = 1067;
      case 1067: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 8538 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coin_collect_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.InBattleMechanicusInfo mechanicus_info = 1334;
      case 1334: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 10674 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mechanicus_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.InBattleChessInfo chess_info = 1758;
      case 1758: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 14066 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chess_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.LanV3BoatStageInfo lan_v3_boat_info = 1801;
      case 1801: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 14410 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lan_v3_boat_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.BrickBreakerStageInfo brick_breaker_info = 1964;
      case 1964: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 15714 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brick_breaker_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MultistagePlayInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MultistagePlayInfo)
  return false;
#undef DO_
}

void MultistagePlayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MultistagePlayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stage_index = 1;
  if (this->stage_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stage_index(), output);
  }

  // uint32 duration = 8;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->duration(), output);
  }

  // uint32 begin_time = 9;
  if (this->begin_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->begin_time(), output);
  }

  // uint32 stage_type = 10;
  if (this->stage_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->stage_type(), output);
  }

  // uint32 play_type = 11;
  if (this->play_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->play_type(), output);
  }

  // uint32 group_id = 12;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->group_id(), output);
  }

  // uint32 play_index = 13;
  if (this->play_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->play_index(), output);
  }

  // .proto.HideAndSeekStageInfo hide_and_seek_info = 108;
  if (has_hide_and_seek_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, *detail_.hide_and_seek_info_, output);
  }

  // .proto.CharAmusementInfo char_amusement_info = 324;
  if (has_char_amusement_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      324, *detail_.char_amusement_info_, output);
  }

  // .proto.InBattleIrodoriChessInfo irodori_chess_info = 531;
  if (has_irodori_chess_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      531, *detail_.irodori_chess_info_, output);
  }

  // .proto.InBattleFleurFairInfo fleur_fair_info = 1064;
  if (has_fleur_fair_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1064, *detail_.fleur_fair_info_, output);
  }

  // .proto.CoinCollectStageInfo coin_collect_info = 1067;
  if (has_coin_collect_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1067, *detail_.coin_collect_info_, output);
  }

  // .proto.InBattleMechanicusInfo mechanicus_info = 1334;
  if (has_mechanicus_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1334, *detail_.mechanicus_info_, output);
  }

  // .proto.InBattleChessInfo chess_info = 1758;
  if (has_chess_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1758, *detail_.chess_info_, output);
  }

  // .proto.LanV3BoatStageInfo lan_v3_boat_info = 1801;
  if (has_lan_v3_boat_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1801, *detail_.lan_v3_boat_info_, output);
  }

  // .proto.BrickBreakerStageInfo brick_breaker_info = 1964;
  if (has_brick_breaker_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1964, *detail_.brick_breaker_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MultistagePlayInfo)
}

::google::protobuf::uint8* MultistagePlayInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MultistagePlayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stage_index = 1;
  if (this->stage_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stage_index(), target);
  }

  // uint32 duration = 8;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->duration(), target);
  }

  // uint32 begin_time = 9;
  if (this->begin_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->begin_time(), target);
  }

  // uint32 stage_type = 10;
  if (this->stage_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->stage_type(), target);
  }

  // uint32 play_type = 11;
  if (this->play_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->play_type(), target);
  }

  // uint32 group_id = 12;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->group_id(), target);
  }

  // uint32 play_index = 13;
  if (this->play_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->play_index(), target);
  }

  // .proto.HideAndSeekStageInfo hide_and_seek_info = 108;
  if (has_hide_and_seek_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        108, *detail_.hide_and_seek_info_, deterministic, target);
  }

  // .proto.CharAmusementInfo char_amusement_info = 324;
  if (has_char_amusement_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        324, *detail_.char_amusement_info_, deterministic, target);
  }

  // .proto.InBattleIrodoriChessInfo irodori_chess_info = 531;
  if (has_irodori_chess_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        531, *detail_.irodori_chess_info_, deterministic, target);
  }

  // .proto.InBattleFleurFairInfo fleur_fair_info = 1064;
  if (has_fleur_fair_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1064, *detail_.fleur_fair_info_, deterministic, target);
  }

  // .proto.CoinCollectStageInfo coin_collect_info = 1067;
  if (has_coin_collect_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1067, *detail_.coin_collect_info_, deterministic, target);
  }

  // .proto.InBattleMechanicusInfo mechanicus_info = 1334;
  if (has_mechanicus_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1334, *detail_.mechanicus_info_, deterministic, target);
  }

  // .proto.InBattleChessInfo chess_info = 1758;
  if (has_chess_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1758, *detail_.chess_info_, deterministic, target);
  }

  // .proto.LanV3BoatStageInfo lan_v3_boat_info = 1801;
  if (has_lan_v3_boat_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1801, *detail_.lan_v3_boat_info_, deterministic, target);
  }

  // .proto.BrickBreakerStageInfo brick_breaker_info = 1964;
  if (has_brick_breaker_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1964, *detail_.brick_breaker_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MultistagePlayInfo)
  return target;
}

size_t MultistagePlayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MultistagePlayInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 stage_index = 1;
  if (this->stage_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stage_index());
  }

  // uint32 duration = 8;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  // uint32 play_index = 13;
  if (this->play_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_index());
  }

  // uint32 begin_time = 9;
  if (this->begin_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->begin_time());
  }

  // uint32 stage_type = 10;
  if (this->stage_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stage_type());
  }

  // uint32 play_type = 11;
  if (this->play_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_type());
  }

  // uint32 group_id = 12;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  switch (detail_case()) {
    // .proto.InBattleMechanicusInfo mechanicus_info = 1334;
    case kMechanicusInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.mechanicus_info_);
      break;
    }
    // .proto.InBattleFleurFairInfo fleur_fair_info = 1064;
    case kFleurFairInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.fleur_fair_info_);
      break;
    }
    // .proto.HideAndSeekStageInfo hide_and_seek_info = 108;
    case kHideAndSeekInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.hide_and_seek_info_);
      break;
    }
    // .proto.InBattleChessInfo chess_info = 1758;
    case kChessInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.chess_info_);
      break;
    }
    // .proto.InBattleIrodoriChessInfo irodori_chess_info = 531;
    case kIrodoriChessInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.irodori_chess_info_);
      break;
    }
    // .proto.CharAmusementInfo char_amusement_info = 324;
    case kCharAmusementInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.char_amusement_info_);
      break;
    }
    // .proto.BrickBreakerStageInfo brick_breaker_info = 1964;
    case kBrickBreakerInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.brick_breaker_info_);
      break;
    }
    // .proto.CoinCollectStageInfo coin_collect_info = 1067;
    case kCoinCollectInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.coin_collect_info_);
      break;
    }
    // .proto.LanV3BoatStageInfo lan_v3_boat_info = 1801;
    case kLanV3BoatInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.lan_v3_boat_info_);
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultistagePlayInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MultistagePlayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MultistagePlayInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultistagePlayInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MultistagePlayInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MultistagePlayInfo)
    MergeFrom(*source);
  }
}

void MultistagePlayInfo::MergeFrom(const MultistagePlayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MultistagePlayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stage_index() != 0) {
    set_stage_index(from.stage_index());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.play_index() != 0) {
    set_play_index(from.play_index());
  }
  if (from.begin_time() != 0) {
    set_begin_time(from.begin_time());
  }
  if (from.stage_type() != 0) {
    set_stage_type(from.stage_type());
  }
  if (from.play_type() != 0) {
    set_play_type(from.play_type());
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  switch (from.detail_case()) {
    case kMechanicusInfo: {
      mutable_mechanicus_info()->::proto::InBattleMechanicusInfo::MergeFrom(from.mechanicus_info());
      break;
    }
    case kFleurFairInfo: {
      mutable_fleur_fair_info()->::proto::InBattleFleurFairInfo::MergeFrom(from.fleur_fair_info());
      break;
    }
    case kHideAndSeekInfo: {
      mutable_hide_and_seek_info()->::proto::HideAndSeekStageInfo::MergeFrom(from.hide_and_seek_info());
      break;
    }
    case kChessInfo: {
      mutable_chess_info()->::proto::InBattleChessInfo::MergeFrom(from.chess_info());
      break;
    }
    case kIrodoriChessInfo: {
      mutable_irodori_chess_info()->::proto::InBattleIrodoriChessInfo::MergeFrom(from.irodori_chess_info());
      break;
    }
    case kCharAmusementInfo: {
      mutable_char_amusement_info()->::proto::CharAmusementInfo::MergeFrom(from.char_amusement_info());
      break;
    }
    case kBrickBreakerInfo: {
      mutable_brick_breaker_info()->::proto::BrickBreakerStageInfo::MergeFrom(from.brick_breaker_info());
      break;
    }
    case kCoinCollectInfo: {
      mutable_coin_collect_info()->::proto::CoinCollectStageInfo::MergeFrom(from.coin_collect_info());
      break;
    }
    case kLanV3BoatInfo: {
      mutable_lan_v3_boat_info()->::proto::LanV3BoatStageInfo::MergeFrom(from.lan_v3_boat_info());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
}

void MultistagePlayInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MultistagePlayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultistagePlayInfo::CopyFrom(const MultistagePlayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MultistagePlayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultistagePlayInfo::IsInitialized() const {
  return true;
}

void MultistagePlayInfo::Swap(MultistagePlayInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultistagePlayInfo::InternalSwap(MultistagePlayInfo* other) {
  using std::swap;
  swap(stage_index_, other->stage_index_);
  swap(duration_, other->duration_);
  swap(play_index_, other->play_index_);
  swap(begin_time_, other->begin_time_);
  swap(stage_type_, other->stage_type_);
  swap(play_type_, other->play_type_);
  swap(group_id_, other->group_id_);
  swap(detail_, other->detail_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultistagePlayInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultistagePlayInfo

// uint32 play_index = 13;
void MultistagePlayInfo::clear_play_index() {
  play_index_ = 0u;
}
::google::protobuf::uint32 MultistagePlayInfo::play_index() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.play_index)
  return play_index_;
}
void MultistagePlayInfo::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayInfo.play_index)
}

// uint32 play_type = 11;
void MultistagePlayInfo::clear_play_type() {
  play_type_ = 0u;
}
::google::protobuf::uint32 MultistagePlayInfo::play_type() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.play_type)
  return play_type_;
}
void MultistagePlayInfo::set_play_type(::google::protobuf::uint32 value) {
  
  play_type_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayInfo.play_type)
}

// uint32 stage_type = 10;
void MultistagePlayInfo::clear_stage_type() {
  stage_type_ = 0u;
}
::google::protobuf::uint32 MultistagePlayInfo::stage_type() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.stage_type)
  return stage_type_;
}
void MultistagePlayInfo::set_stage_type(::google::protobuf::uint32 value) {
  
  stage_type_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayInfo.stage_type)
}

// uint32 duration = 8;
void MultistagePlayInfo::clear_duration() {
  duration_ = 0u;
}
::google::protobuf::uint32 MultistagePlayInfo::duration() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.duration)
  return duration_;
}
void MultistagePlayInfo::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayInfo.duration)
}

// uint32 group_id = 12;
void MultistagePlayInfo::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 MultistagePlayInfo::group_id() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.group_id)
  return group_id_;
}
void MultistagePlayInfo::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayInfo.group_id)
}

// uint32 begin_time = 9;
void MultistagePlayInfo::clear_begin_time() {
  begin_time_ = 0u;
}
::google::protobuf::uint32 MultistagePlayInfo::begin_time() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.begin_time)
  return begin_time_;
}
void MultistagePlayInfo::set_begin_time(::google::protobuf::uint32 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayInfo.begin_time)
}

// uint32 stage_index = 1;
void MultistagePlayInfo::clear_stage_index() {
  stage_index_ = 0u;
}
::google::protobuf::uint32 MultistagePlayInfo::stage_index() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.stage_index)
  return stage_index_;
}
void MultistagePlayInfo::set_stage_index(::google::protobuf::uint32 value) {
  
  stage_index_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayInfo.stage_index)
}

// .proto.InBattleMechanicusInfo mechanicus_info = 1334;
bool MultistagePlayInfo::has_mechanicus_info() const {
  return detail_case() == kMechanicusInfo;
}
void MultistagePlayInfo::set_has_mechanicus_info() {
  _oneof_case_[0] = kMechanicusInfo;
}
void MultistagePlayInfo::clear_mechanicus_info() {
  if (has_mechanicus_info()) {
    delete detail_.mechanicus_info_;
    clear_has_detail();
  }
}
 const ::proto::InBattleMechanicusInfo& MultistagePlayInfo::mechanicus_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.mechanicus_info)
  return has_mechanicus_info()
      ? *detail_.mechanicus_info_
      : ::proto::InBattleMechanicusInfo::default_instance();
}
::proto::InBattleMechanicusInfo* MultistagePlayInfo::mutable_mechanicus_info() {
  if (!has_mechanicus_info()) {
    clear_detail();
    set_has_mechanicus_info();
    detail_.mechanicus_info_ = new ::proto::InBattleMechanicusInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlayInfo.mechanicus_info)
  return detail_.mechanicus_info_;
}
::proto::InBattleMechanicusInfo* MultistagePlayInfo::release_mechanicus_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlayInfo.mechanicus_info)
  if (has_mechanicus_info()) {
    clear_has_detail();
    ::proto::InBattleMechanicusInfo* temp = detail_.mechanicus_info_;
    detail_.mechanicus_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MultistagePlayInfo::set_allocated_mechanicus_info(::proto::InBattleMechanicusInfo* mechanicus_info) {
  clear_detail();
  if (mechanicus_info) {
    set_has_mechanicus_info();
    detail_.mechanicus_info_ = mechanicus_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlayInfo.mechanicus_info)
}

// .proto.InBattleFleurFairInfo fleur_fair_info = 1064;
bool MultistagePlayInfo::has_fleur_fair_info() const {
  return detail_case() == kFleurFairInfo;
}
void MultistagePlayInfo::set_has_fleur_fair_info() {
  _oneof_case_[0] = kFleurFairInfo;
}
void MultistagePlayInfo::clear_fleur_fair_info() {
  if (has_fleur_fair_info()) {
    delete detail_.fleur_fair_info_;
    clear_has_detail();
  }
}
 const ::proto::InBattleFleurFairInfo& MultistagePlayInfo::fleur_fair_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.fleur_fair_info)
  return has_fleur_fair_info()
      ? *detail_.fleur_fair_info_
      : ::proto::InBattleFleurFairInfo::default_instance();
}
::proto::InBattleFleurFairInfo* MultistagePlayInfo::mutable_fleur_fair_info() {
  if (!has_fleur_fair_info()) {
    clear_detail();
    set_has_fleur_fair_info();
    detail_.fleur_fair_info_ = new ::proto::InBattleFleurFairInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlayInfo.fleur_fair_info)
  return detail_.fleur_fair_info_;
}
::proto::InBattleFleurFairInfo* MultistagePlayInfo::release_fleur_fair_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlayInfo.fleur_fair_info)
  if (has_fleur_fair_info()) {
    clear_has_detail();
    ::proto::InBattleFleurFairInfo* temp = detail_.fleur_fair_info_;
    detail_.fleur_fair_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MultistagePlayInfo::set_allocated_fleur_fair_info(::proto::InBattleFleurFairInfo* fleur_fair_info) {
  clear_detail();
  if (fleur_fair_info) {
    set_has_fleur_fair_info();
    detail_.fleur_fair_info_ = fleur_fair_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlayInfo.fleur_fair_info)
}

// .proto.HideAndSeekStageInfo hide_and_seek_info = 108;
bool MultistagePlayInfo::has_hide_and_seek_info() const {
  return detail_case() == kHideAndSeekInfo;
}
void MultistagePlayInfo::set_has_hide_and_seek_info() {
  _oneof_case_[0] = kHideAndSeekInfo;
}
void MultistagePlayInfo::clear_hide_and_seek_info() {
  if (has_hide_and_seek_info()) {
    delete detail_.hide_and_seek_info_;
    clear_has_detail();
  }
}
 const ::proto::HideAndSeekStageInfo& MultistagePlayInfo::hide_and_seek_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.hide_and_seek_info)
  return has_hide_and_seek_info()
      ? *detail_.hide_and_seek_info_
      : ::proto::HideAndSeekStageInfo::default_instance();
}
::proto::HideAndSeekStageInfo* MultistagePlayInfo::mutable_hide_and_seek_info() {
  if (!has_hide_and_seek_info()) {
    clear_detail();
    set_has_hide_and_seek_info();
    detail_.hide_and_seek_info_ = new ::proto::HideAndSeekStageInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlayInfo.hide_and_seek_info)
  return detail_.hide_and_seek_info_;
}
::proto::HideAndSeekStageInfo* MultistagePlayInfo::release_hide_and_seek_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlayInfo.hide_and_seek_info)
  if (has_hide_and_seek_info()) {
    clear_has_detail();
    ::proto::HideAndSeekStageInfo* temp = detail_.hide_and_seek_info_;
    detail_.hide_and_seek_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MultistagePlayInfo::set_allocated_hide_and_seek_info(::proto::HideAndSeekStageInfo* hide_and_seek_info) {
  clear_detail();
  if (hide_and_seek_info) {
    set_has_hide_and_seek_info();
    detail_.hide_and_seek_info_ = hide_and_seek_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlayInfo.hide_and_seek_info)
}

// .proto.InBattleChessInfo chess_info = 1758;
bool MultistagePlayInfo::has_chess_info() const {
  return detail_case() == kChessInfo;
}
void MultistagePlayInfo::set_has_chess_info() {
  _oneof_case_[0] = kChessInfo;
}
void MultistagePlayInfo::clear_chess_info() {
  if (has_chess_info()) {
    delete detail_.chess_info_;
    clear_has_detail();
  }
}
 const ::proto::InBattleChessInfo& MultistagePlayInfo::chess_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.chess_info)
  return has_chess_info()
      ? *detail_.chess_info_
      : ::proto::InBattleChessInfo::default_instance();
}
::proto::InBattleChessInfo* MultistagePlayInfo::mutable_chess_info() {
  if (!has_chess_info()) {
    clear_detail();
    set_has_chess_info();
    detail_.chess_info_ = new ::proto::InBattleChessInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlayInfo.chess_info)
  return detail_.chess_info_;
}
::proto::InBattleChessInfo* MultistagePlayInfo::release_chess_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlayInfo.chess_info)
  if (has_chess_info()) {
    clear_has_detail();
    ::proto::InBattleChessInfo* temp = detail_.chess_info_;
    detail_.chess_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MultistagePlayInfo::set_allocated_chess_info(::proto::InBattleChessInfo* chess_info) {
  clear_detail();
  if (chess_info) {
    set_has_chess_info();
    detail_.chess_info_ = chess_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlayInfo.chess_info)
}

// .proto.InBattleIrodoriChessInfo irodori_chess_info = 531;
bool MultistagePlayInfo::has_irodori_chess_info() const {
  return detail_case() == kIrodoriChessInfo;
}
void MultistagePlayInfo::set_has_irodori_chess_info() {
  _oneof_case_[0] = kIrodoriChessInfo;
}
void MultistagePlayInfo::clear_irodori_chess_info() {
  if (has_irodori_chess_info()) {
    delete detail_.irodori_chess_info_;
    clear_has_detail();
  }
}
 const ::proto::InBattleIrodoriChessInfo& MultistagePlayInfo::irodori_chess_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.irodori_chess_info)
  return has_irodori_chess_info()
      ? *detail_.irodori_chess_info_
      : ::proto::InBattleIrodoriChessInfo::default_instance();
}
::proto::InBattleIrodoriChessInfo* MultistagePlayInfo::mutable_irodori_chess_info() {
  if (!has_irodori_chess_info()) {
    clear_detail();
    set_has_irodori_chess_info();
    detail_.irodori_chess_info_ = new ::proto::InBattleIrodoriChessInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlayInfo.irodori_chess_info)
  return detail_.irodori_chess_info_;
}
::proto::InBattleIrodoriChessInfo* MultistagePlayInfo::release_irodori_chess_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlayInfo.irodori_chess_info)
  if (has_irodori_chess_info()) {
    clear_has_detail();
    ::proto::InBattleIrodoriChessInfo* temp = detail_.irodori_chess_info_;
    detail_.irodori_chess_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MultistagePlayInfo::set_allocated_irodori_chess_info(::proto::InBattleIrodoriChessInfo* irodori_chess_info) {
  clear_detail();
  if (irodori_chess_info) {
    set_has_irodori_chess_info();
    detail_.irodori_chess_info_ = irodori_chess_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlayInfo.irodori_chess_info)
}

// .proto.CharAmusementInfo char_amusement_info = 324;
bool MultistagePlayInfo::has_char_amusement_info() const {
  return detail_case() == kCharAmusementInfo;
}
void MultistagePlayInfo::set_has_char_amusement_info() {
  _oneof_case_[0] = kCharAmusementInfo;
}
void MultistagePlayInfo::clear_char_amusement_info() {
  if (has_char_amusement_info()) {
    delete detail_.char_amusement_info_;
    clear_has_detail();
  }
}
 const ::proto::CharAmusementInfo& MultistagePlayInfo::char_amusement_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.char_amusement_info)
  return has_char_amusement_info()
      ? *detail_.char_amusement_info_
      : ::proto::CharAmusementInfo::default_instance();
}
::proto::CharAmusementInfo* MultistagePlayInfo::mutable_char_amusement_info() {
  if (!has_char_amusement_info()) {
    clear_detail();
    set_has_char_amusement_info();
    detail_.char_amusement_info_ = new ::proto::CharAmusementInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlayInfo.char_amusement_info)
  return detail_.char_amusement_info_;
}
::proto::CharAmusementInfo* MultistagePlayInfo::release_char_amusement_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlayInfo.char_amusement_info)
  if (has_char_amusement_info()) {
    clear_has_detail();
    ::proto::CharAmusementInfo* temp = detail_.char_amusement_info_;
    detail_.char_amusement_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MultistagePlayInfo::set_allocated_char_amusement_info(::proto::CharAmusementInfo* char_amusement_info) {
  clear_detail();
  if (char_amusement_info) {
    set_has_char_amusement_info();
    detail_.char_amusement_info_ = char_amusement_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlayInfo.char_amusement_info)
}

// .proto.BrickBreakerStageInfo brick_breaker_info = 1964;
bool MultistagePlayInfo::has_brick_breaker_info() const {
  return detail_case() == kBrickBreakerInfo;
}
void MultistagePlayInfo::set_has_brick_breaker_info() {
  _oneof_case_[0] = kBrickBreakerInfo;
}
void MultistagePlayInfo::clear_brick_breaker_info() {
  if (has_brick_breaker_info()) {
    delete detail_.brick_breaker_info_;
    clear_has_detail();
  }
}
 const ::proto::BrickBreakerStageInfo& MultistagePlayInfo::brick_breaker_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.brick_breaker_info)
  return has_brick_breaker_info()
      ? *detail_.brick_breaker_info_
      : ::proto::BrickBreakerStageInfo::default_instance();
}
::proto::BrickBreakerStageInfo* MultistagePlayInfo::mutable_brick_breaker_info() {
  if (!has_brick_breaker_info()) {
    clear_detail();
    set_has_brick_breaker_info();
    detail_.brick_breaker_info_ = new ::proto::BrickBreakerStageInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlayInfo.brick_breaker_info)
  return detail_.brick_breaker_info_;
}
::proto::BrickBreakerStageInfo* MultistagePlayInfo::release_brick_breaker_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlayInfo.brick_breaker_info)
  if (has_brick_breaker_info()) {
    clear_has_detail();
    ::proto::BrickBreakerStageInfo* temp = detail_.brick_breaker_info_;
    detail_.brick_breaker_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MultistagePlayInfo::set_allocated_brick_breaker_info(::proto::BrickBreakerStageInfo* brick_breaker_info) {
  clear_detail();
  if (brick_breaker_info) {
    set_has_brick_breaker_info();
    detail_.brick_breaker_info_ = brick_breaker_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlayInfo.brick_breaker_info)
}

// .proto.CoinCollectStageInfo coin_collect_info = 1067;
bool MultistagePlayInfo::has_coin_collect_info() const {
  return detail_case() == kCoinCollectInfo;
}
void MultistagePlayInfo::set_has_coin_collect_info() {
  _oneof_case_[0] = kCoinCollectInfo;
}
void MultistagePlayInfo::clear_coin_collect_info() {
  if (has_coin_collect_info()) {
    delete detail_.coin_collect_info_;
    clear_has_detail();
  }
}
 const ::proto::CoinCollectStageInfo& MultistagePlayInfo::coin_collect_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.coin_collect_info)
  return has_coin_collect_info()
      ? *detail_.coin_collect_info_
      : ::proto::CoinCollectStageInfo::default_instance();
}
::proto::CoinCollectStageInfo* MultistagePlayInfo::mutable_coin_collect_info() {
  if (!has_coin_collect_info()) {
    clear_detail();
    set_has_coin_collect_info();
    detail_.coin_collect_info_ = new ::proto::CoinCollectStageInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlayInfo.coin_collect_info)
  return detail_.coin_collect_info_;
}
::proto::CoinCollectStageInfo* MultistagePlayInfo::release_coin_collect_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlayInfo.coin_collect_info)
  if (has_coin_collect_info()) {
    clear_has_detail();
    ::proto::CoinCollectStageInfo* temp = detail_.coin_collect_info_;
    detail_.coin_collect_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MultistagePlayInfo::set_allocated_coin_collect_info(::proto::CoinCollectStageInfo* coin_collect_info) {
  clear_detail();
  if (coin_collect_info) {
    set_has_coin_collect_info();
    detail_.coin_collect_info_ = coin_collect_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlayInfo.coin_collect_info)
}

// .proto.LanV3BoatStageInfo lan_v3_boat_info = 1801;
bool MultistagePlayInfo::has_lan_v3_boat_info() const {
  return detail_case() == kLanV3BoatInfo;
}
void MultistagePlayInfo::set_has_lan_v3_boat_info() {
  _oneof_case_[0] = kLanV3BoatInfo;
}
void MultistagePlayInfo::clear_lan_v3_boat_info() {
  if (has_lan_v3_boat_info()) {
    delete detail_.lan_v3_boat_info_;
    clear_has_detail();
  }
}
 const ::proto::LanV3BoatStageInfo& MultistagePlayInfo::lan_v3_boat_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.lan_v3_boat_info)
  return has_lan_v3_boat_info()
      ? *detail_.lan_v3_boat_info_
      : ::proto::LanV3BoatStageInfo::default_instance();
}
::proto::LanV3BoatStageInfo* MultistagePlayInfo::mutable_lan_v3_boat_info() {
  if (!has_lan_v3_boat_info()) {
    clear_detail();
    set_has_lan_v3_boat_info();
    detail_.lan_v3_boat_info_ = new ::proto::LanV3BoatStageInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlayInfo.lan_v3_boat_info)
  return detail_.lan_v3_boat_info_;
}
::proto::LanV3BoatStageInfo* MultistagePlayInfo::release_lan_v3_boat_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlayInfo.lan_v3_boat_info)
  if (has_lan_v3_boat_info()) {
    clear_has_detail();
    ::proto::LanV3BoatStageInfo* temp = detail_.lan_v3_boat_info_;
    detail_.lan_v3_boat_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MultistagePlayInfo::set_allocated_lan_v3_boat_info(::proto::LanV3BoatStageInfo* lan_v3_boat_info) {
  clear_detail();
  if (lan_v3_boat_info) {
    set_has_lan_v3_boat_info();
    detail_.lan_v3_boat_info_ = lan_v3_boat_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlayInfo.lan_v3_boat_info)
}

bool MultistagePlayInfo::has_detail() const {
  return detail_case() != DETAIL_NOT_SET;
}
void MultistagePlayInfo::clear_has_detail() {
  _oneof_case_[0] = DETAIL_NOT_SET;
}
MultistagePlayInfo::DetailCase MultistagePlayInfo::detail_case() const {
  return MultistagePlayInfo::DetailCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultistagePlayInfoNotify::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultistagePlayInfoNotify::MultistagePlayInfoNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MultistagePlayInfoNotify)
}
MultistagePlayInfoNotify::MultistagePlayInfoNotify(const MultistagePlayInfoNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::proto::MultistagePlayInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.MultistagePlayInfoNotify)
}

void MultistagePlayInfoNotify::SharedCtor() {
  info_ = NULL;
  _cached_size_ = 0;
}

MultistagePlayInfoNotify::~MultistagePlayInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.MultistagePlayInfoNotify)
  SharedDtor();
}

void MultistagePlayInfoNotify::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void MultistagePlayInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultistagePlayInfoNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultistagePlayInfoNotify& MultistagePlayInfoNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

MultistagePlayInfoNotify* MultistagePlayInfoNotify::New(::google::protobuf::Arena* arena) const {
  MultistagePlayInfoNotify* n = new MultistagePlayInfoNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultistagePlayInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MultistagePlayInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  _internal_metadata_.Clear();
}

bool MultistagePlayInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MultistagePlayInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.MultistagePlayInfo info = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MultistagePlayInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MultistagePlayInfoNotify)
  return false;
#undef DO_
}

void MultistagePlayInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MultistagePlayInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.MultistagePlayInfo info = 13;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MultistagePlayInfoNotify)
}

::google::protobuf::uint8* MultistagePlayInfoNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MultistagePlayInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.MultistagePlayInfo info = 13;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MultistagePlayInfoNotify)
  return target;
}

size_t MultistagePlayInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MultistagePlayInfoNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.MultistagePlayInfo info = 13;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultistagePlayInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MultistagePlayInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const MultistagePlayInfoNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultistagePlayInfoNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MultistagePlayInfoNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MultistagePlayInfoNotify)
    MergeFrom(*source);
  }
}

void MultistagePlayInfoNotify::MergeFrom(const MultistagePlayInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MultistagePlayInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::proto::MultistagePlayInfo::MergeFrom(from.info());
  }
}

void MultistagePlayInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MultistagePlayInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultistagePlayInfoNotify::CopyFrom(const MultistagePlayInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MultistagePlayInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultistagePlayInfoNotify::IsInitialized() const {
  return true;
}

void MultistagePlayInfoNotify::Swap(MultistagePlayInfoNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultistagePlayInfoNotify::InternalSwap(MultistagePlayInfoNotify* other) {
  using std::swap;
  swap(info_, other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultistagePlayInfoNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultistagePlayInfoNotify

// .proto.MultistagePlayInfo info = 13;
bool MultistagePlayInfoNotify::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void MultistagePlayInfoNotify::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::proto::MultistagePlayInfo& MultistagePlayInfoNotify::info() const {
  const ::proto::MultistagePlayInfo* p = info_;
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfoNotify.info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::MultistagePlayInfo*>(
      &::proto::_MultistagePlayInfo_default_instance_);
}
::proto::MultistagePlayInfo* MultistagePlayInfoNotify::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::proto::MultistagePlayInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlayInfoNotify.info)
  return info_;
}
::proto::MultistagePlayInfo* MultistagePlayInfoNotify::release_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlayInfoNotify.info)
  
  ::proto::MultistagePlayInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void MultistagePlayInfoNotify::set_allocated_info(::proto::MultistagePlayInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlayInfoNotify.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultistagePlayFinishStageReq::kGroupIdFieldNumber;
const int MultistagePlayFinishStageReq::kPlayIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultistagePlayFinishStageReq::MultistagePlayFinishStageReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MultistagePlayFinishStageReq)
}
MultistagePlayFinishStageReq::MultistagePlayFinishStageReq(const MultistagePlayFinishStageReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&group_id_, &from.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_index_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(play_index_));
  // @@protoc_insertion_point(copy_constructor:proto.MultistagePlayFinishStageReq)
}

void MultistagePlayFinishStageReq::SharedCtor() {
  ::memset(&group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_index_) -
      reinterpret_cast<char*>(&group_id_)) + sizeof(play_index_));
  _cached_size_ = 0;
}

MultistagePlayFinishStageReq::~MultistagePlayFinishStageReq() {
  // @@protoc_insertion_point(destructor:proto.MultistagePlayFinishStageReq)
  SharedDtor();
}

void MultistagePlayFinishStageReq::SharedDtor() {
}

void MultistagePlayFinishStageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultistagePlayFinishStageReq::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultistagePlayFinishStageReq& MultistagePlayFinishStageReq::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

MultistagePlayFinishStageReq* MultistagePlayFinishStageReq::New(::google::protobuf::Arena* arena) const {
  MultistagePlayFinishStageReq* n = new MultistagePlayFinishStageReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultistagePlayFinishStageReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MultistagePlayFinishStageReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_index_) -
      reinterpret_cast<char*>(&group_id_)) + sizeof(play_index_));
  _internal_metadata_.Clear();
}

bool MultistagePlayFinishStageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MultistagePlayFinishStageReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 group_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_index = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MultistagePlayFinishStageReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MultistagePlayFinishStageReq)
  return false;
#undef DO_
}

void MultistagePlayFinishStageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MultistagePlayFinishStageReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_id = 12;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->group_id(), output);
  }

  // uint32 play_index = 15;
  if (this->play_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->play_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MultistagePlayFinishStageReq)
}

::google::protobuf::uint8* MultistagePlayFinishStageReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MultistagePlayFinishStageReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_id = 12;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->group_id(), target);
  }

  // uint32 play_index = 15;
  if (this->play_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->play_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MultistagePlayFinishStageReq)
  return target;
}

size_t MultistagePlayFinishStageReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MultistagePlayFinishStageReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 group_id = 12;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  // uint32 play_index = 15;
  if (this->play_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultistagePlayFinishStageReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MultistagePlayFinishStageReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MultistagePlayFinishStageReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultistagePlayFinishStageReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MultistagePlayFinishStageReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MultistagePlayFinishStageReq)
    MergeFrom(*source);
  }
}

void MultistagePlayFinishStageReq::MergeFrom(const MultistagePlayFinishStageReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MultistagePlayFinishStageReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.play_index() != 0) {
    set_play_index(from.play_index());
  }
}

void MultistagePlayFinishStageReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MultistagePlayFinishStageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultistagePlayFinishStageReq::CopyFrom(const MultistagePlayFinishStageReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MultistagePlayFinishStageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultistagePlayFinishStageReq::IsInitialized() const {
  return true;
}

void MultistagePlayFinishStageReq::Swap(MultistagePlayFinishStageReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultistagePlayFinishStageReq::InternalSwap(MultistagePlayFinishStageReq* other) {
  using std::swap;
  swap(group_id_, other->group_id_);
  swap(play_index_, other->play_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultistagePlayFinishStageReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultistagePlayFinishStageReq

// uint32 group_id = 12;
void MultistagePlayFinishStageReq::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 MultistagePlayFinishStageReq::group_id() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayFinishStageReq.group_id)
  return group_id_;
}
void MultistagePlayFinishStageReq::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayFinishStageReq.group_id)
}

// uint32 play_index = 15;
void MultistagePlayFinishStageReq::clear_play_index() {
  play_index_ = 0u;
}
::google::protobuf::uint32 MultistagePlayFinishStageReq::play_index() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayFinishStageReq.play_index)
  return play_index_;
}
void MultistagePlayFinishStageReq::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayFinishStageReq.play_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InBattleMechanicusExcapeMonsterNotify::kExcapedMonsterNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InBattleMechanicusExcapeMonsterNotify::InBattleMechanicusExcapeMonsterNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InBattleMechanicusExcapeMonsterNotify)
}
InBattleMechanicusExcapeMonsterNotify::InBattleMechanicusExcapeMonsterNotify(const InBattleMechanicusExcapeMonsterNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  excaped_monster_num_ = from.excaped_monster_num_;
  // @@protoc_insertion_point(copy_constructor:proto.InBattleMechanicusExcapeMonsterNotify)
}

void InBattleMechanicusExcapeMonsterNotify::SharedCtor() {
  excaped_monster_num_ = 0u;
  _cached_size_ = 0;
}

InBattleMechanicusExcapeMonsterNotify::~InBattleMechanicusExcapeMonsterNotify() {
  // @@protoc_insertion_point(destructor:proto.InBattleMechanicusExcapeMonsterNotify)
  SharedDtor();
}

void InBattleMechanicusExcapeMonsterNotify::SharedDtor() {
}

void InBattleMechanicusExcapeMonsterNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InBattleMechanicusExcapeMonsterNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InBattleMechanicusExcapeMonsterNotify& InBattleMechanicusExcapeMonsterNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

InBattleMechanicusExcapeMonsterNotify* InBattleMechanicusExcapeMonsterNotify::New(::google::protobuf::Arena* arena) const {
  InBattleMechanicusExcapeMonsterNotify* n = new InBattleMechanicusExcapeMonsterNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InBattleMechanicusExcapeMonsterNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InBattleMechanicusExcapeMonsterNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  excaped_monster_num_ = 0u;
  _internal_metadata_.Clear();
}

bool InBattleMechanicusExcapeMonsterNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InBattleMechanicusExcapeMonsterNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 excaped_monster_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &excaped_monster_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InBattleMechanicusExcapeMonsterNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InBattleMechanicusExcapeMonsterNotify)
  return false;
#undef DO_
}

void InBattleMechanicusExcapeMonsterNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InBattleMechanicusExcapeMonsterNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 excaped_monster_num = 4;
  if (this->excaped_monster_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->excaped_monster_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InBattleMechanicusExcapeMonsterNotify)
}

::google::protobuf::uint8* InBattleMechanicusExcapeMonsterNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InBattleMechanicusExcapeMonsterNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 excaped_monster_num = 4;
  if (this->excaped_monster_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->excaped_monster_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InBattleMechanicusExcapeMonsterNotify)
  return target;
}

size_t InBattleMechanicusExcapeMonsterNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InBattleMechanicusExcapeMonsterNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 excaped_monster_num = 4;
  if (this->excaped_monster_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->excaped_monster_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InBattleMechanicusExcapeMonsterNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InBattleMechanicusExcapeMonsterNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const InBattleMechanicusExcapeMonsterNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InBattleMechanicusExcapeMonsterNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InBattleMechanicusExcapeMonsterNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InBattleMechanicusExcapeMonsterNotify)
    MergeFrom(*source);
  }
}

void InBattleMechanicusExcapeMonsterNotify::MergeFrom(const InBattleMechanicusExcapeMonsterNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InBattleMechanicusExcapeMonsterNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.excaped_monster_num() != 0) {
    set_excaped_monster_num(from.excaped_monster_num());
  }
}

void InBattleMechanicusExcapeMonsterNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InBattleMechanicusExcapeMonsterNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InBattleMechanicusExcapeMonsterNotify::CopyFrom(const InBattleMechanicusExcapeMonsterNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InBattleMechanicusExcapeMonsterNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InBattleMechanicusExcapeMonsterNotify::IsInitialized() const {
  return true;
}

void InBattleMechanicusExcapeMonsterNotify::Swap(InBattleMechanicusExcapeMonsterNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InBattleMechanicusExcapeMonsterNotify::InternalSwap(InBattleMechanicusExcapeMonsterNotify* other) {
  using std::swap;
  swap(excaped_monster_num_, other->excaped_monster_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InBattleMechanicusExcapeMonsterNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InBattleMechanicusExcapeMonsterNotify

// uint32 excaped_monster_num = 4;
void InBattleMechanicusExcapeMonsterNotify::clear_excaped_monster_num() {
  excaped_monster_num_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusExcapeMonsterNotify::excaped_monster_num() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusExcapeMonsterNotify.excaped_monster_num)
  return excaped_monster_num_;
}
void InBattleMechanicusExcapeMonsterNotify::set_excaped_monster_num(::google::protobuf::uint32 value) {
  
  excaped_monster_num_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusExcapeMonsterNotify.excaped_monster_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InBattleMechanicusLeftMonsterNotify::kLeftMonsterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InBattleMechanicusLeftMonsterNotify::InBattleMechanicusLeftMonsterNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InBattleMechanicusLeftMonsterNotify)
}
InBattleMechanicusLeftMonsterNotify::InBattleMechanicusLeftMonsterNotify(const InBattleMechanicusLeftMonsterNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  left_monster_ = from.left_monster_;
  // @@protoc_insertion_point(copy_constructor:proto.InBattleMechanicusLeftMonsterNotify)
}

void InBattleMechanicusLeftMonsterNotify::SharedCtor() {
  left_monster_ = 0u;
  _cached_size_ = 0;
}

InBattleMechanicusLeftMonsterNotify::~InBattleMechanicusLeftMonsterNotify() {
  // @@protoc_insertion_point(destructor:proto.InBattleMechanicusLeftMonsterNotify)
  SharedDtor();
}

void InBattleMechanicusLeftMonsterNotify::SharedDtor() {
}

void InBattleMechanicusLeftMonsterNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InBattleMechanicusLeftMonsterNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InBattleMechanicusLeftMonsterNotify& InBattleMechanicusLeftMonsterNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

InBattleMechanicusLeftMonsterNotify* InBattleMechanicusLeftMonsterNotify::New(::google::protobuf::Arena* arena) const {
  InBattleMechanicusLeftMonsterNotify* n = new InBattleMechanicusLeftMonsterNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InBattleMechanicusLeftMonsterNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InBattleMechanicusLeftMonsterNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  left_monster_ = 0u;
  _internal_metadata_.Clear();
}

bool InBattleMechanicusLeftMonsterNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InBattleMechanicusLeftMonsterNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 left_monster = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_monster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InBattleMechanicusLeftMonsterNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InBattleMechanicusLeftMonsterNotify)
  return false;
#undef DO_
}

void InBattleMechanicusLeftMonsterNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InBattleMechanicusLeftMonsterNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 left_monster = 14;
  if (this->left_monster() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->left_monster(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InBattleMechanicusLeftMonsterNotify)
}

::google::protobuf::uint8* InBattleMechanicusLeftMonsterNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InBattleMechanicusLeftMonsterNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 left_monster = 14;
  if (this->left_monster() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->left_monster(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InBattleMechanicusLeftMonsterNotify)
  return target;
}

size_t InBattleMechanicusLeftMonsterNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InBattleMechanicusLeftMonsterNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 left_monster = 14;
  if (this->left_monster() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->left_monster());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InBattleMechanicusLeftMonsterNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InBattleMechanicusLeftMonsterNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const InBattleMechanicusLeftMonsterNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InBattleMechanicusLeftMonsterNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InBattleMechanicusLeftMonsterNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InBattleMechanicusLeftMonsterNotify)
    MergeFrom(*source);
  }
}

void InBattleMechanicusLeftMonsterNotify::MergeFrom(const InBattleMechanicusLeftMonsterNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InBattleMechanicusLeftMonsterNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.left_monster() != 0) {
    set_left_monster(from.left_monster());
  }
}

void InBattleMechanicusLeftMonsterNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InBattleMechanicusLeftMonsterNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InBattleMechanicusLeftMonsterNotify::CopyFrom(const InBattleMechanicusLeftMonsterNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InBattleMechanicusLeftMonsterNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InBattleMechanicusLeftMonsterNotify::IsInitialized() const {
  return true;
}

void InBattleMechanicusLeftMonsterNotify::Swap(InBattleMechanicusLeftMonsterNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InBattleMechanicusLeftMonsterNotify::InternalSwap(InBattleMechanicusLeftMonsterNotify* other) {
  using std::swap;
  swap(left_monster_, other->left_monster_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InBattleMechanicusLeftMonsterNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InBattleMechanicusLeftMonsterNotify

// uint32 left_monster = 14;
void InBattleMechanicusLeftMonsterNotify::clear_left_monster() {
  left_monster_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusLeftMonsterNotify::left_monster() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusLeftMonsterNotify.left_monster)
  return left_monster_;
}
void InBattleMechanicusLeftMonsterNotify::set_left_monster(::google::protobuf::uint32 value) {
  
  left_monster_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusLeftMonsterNotify.left_monster)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

InBattleMechanicusBuildingPointsNotify::InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry::InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry() {}
InBattleMechanicusBuildingPointsNotify::InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry::InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata InBattleMechanicusBuildingPointsNotify::InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[16];
}
void InBattleMechanicusBuildingPointsNotify::InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void InBattleMechanicusBuildingPointsNotify::InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry::MergeFrom(const InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InBattleMechanicusBuildingPointsNotify::kPlayerBuildingPointsMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InBattleMechanicusBuildingPointsNotify::InBattleMechanicusBuildingPointsNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InBattleMechanicusBuildingPointsNotify)
}
InBattleMechanicusBuildingPointsNotify::InBattleMechanicusBuildingPointsNotify(const InBattleMechanicusBuildingPointsNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_building_points_map_.MergeFrom(from.player_building_points_map_);
  // @@protoc_insertion_point(copy_constructor:proto.InBattleMechanicusBuildingPointsNotify)
}

void InBattleMechanicusBuildingPointsNotify::SharedCtor() {
  _cached_size_ = 0;
}

InBattleMechanicusBuildingPointsNotify::~InBattleMechanicusBuildingPointsNotify() {
  // @@protoc_insertion_point(destructor:proto.InBattleMechanicusBuildingPointsNotify)
  SharedDtor();
}

void InBattleMechanicusBuildingPointsNotify::SharedDtor() {
}

void InBattleMechanicusBuildingPointsNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InBattleMechanicusBuildingPointsNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InBattleMechanicusBuildingPointsNotify& InBattleMechanicusBuildingPointsNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

InBattleMechanicusBuildingPointsNotify* InBattleMechanicusBuildingPointsNotify::New(::google::protobuf::Arena* arena) const {
  InBattleMechanicusBuildingPointsNotify* n = new InBattleMechanicusBuildingPointsNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InBattleMechanicusBuildingPointsNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InBattleMechanicusBuildingPointsNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_building_points_map_.Clear();
  _internal_metadata_.Clear();
}

bool InBattleMechanicusBuildingPointsNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InBattleMechanicusBuildingPointsNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, uint32> player_building_points_map = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry::Parser< ::google::protobuf::internal::MapField<
              InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&player_building_points_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InBattleMechanicusBuildingPointsNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InBattleMechanicusBuildingPointsNotify)
  return false;
#undef DO_
}

void InBattleMechanicusBuildingPointsNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InBattleMechanicusBuildingPointsNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> player_building_points_map = 4;
  if (!this->player_building_points_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->player_building_points_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->player_building_points_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->player_building_points_map().begin();
          it != this->player_building_points_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(player_building_points_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->player_building_points_map().begin();
          it != this->player_building_points_map().end(); ++it) {
        entry.reset(player_building_points_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InBattleMechanicusBuildingPointsNotify)
}

::google::protobuf::uint8* InBattleMechanicusBuildingPointsNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InBattleMechanicusBuildingPointsNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> player_building_points_map = 4;
  if (!this->player_building_points_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->player_building_points_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->player_building_points_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->player_building_points_map().begin();
          it != this->player_building_points_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(player_building_points_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->player_building_points_map().begin();
          it != this->player_building_points_map().end(); ++it) {
        entry.reset(player_building_points_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InBattleMechanicusBuildingPointsNotify)
  return target;
}

size_t InBattleMechanicusBuildingPointsNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InBattleMechanicusBuildingPointsNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, uint32> player_building_points_map = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->player_building_points_map_size());
  {
    ::google::protobuf::scoped_ptr<InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->player_building_points_map().begin();
        it != this->player_building_points_map().end(); ++it) {
      entry.reset(player_building_points_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InBattleMechanicusBuildingPointsNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InBattleMechanicusBuildingPointsNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const InBattleMechanicusBuildingPointsNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InBattleMechanicusBuildingPointsNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InBattleMechanicusBuildingPointsNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InBattleMechanicusBuildingPointsNotify)
    MergeFrom(*source);
  }
}

void InBattleMechanicusBuildingPointsNotify::MergeFrom(const InBattleMechanicusBuildingPointsNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InBattleMechanicusBuildingPointsNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_building_points_map_.MergeFrom(from.player_building_points_map_);
}

void InBattleMechanicusBuildingPointsNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InBattleMechanicusBuildingPointsNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InBattleMechanicusBuildingPointsNotify::CopyFrom(const InBattleMechanicusBuildingPointsNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InBattleMechanicusBuildingPointsNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InBattleMechanicusBuildingPointsNotify::IsInitialized() const {
  return true;
}

void InBattleMechanicusBuildingPointsNotify::Swap(InBattleMechanicusBuildingPointsNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InBattleMechanicusBuildingPointsNotify::InternalSwap(InBattleMechanicusBuildingPointsNotify* other) {
  using std::swap;
  player_building_points_map_.Swap(&other->player_building_points_map_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InBattleMechanicusBuildingPointsNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InBattleMechanicusBuildingPointsNotify

// map<uint32, uint32> player_building_points_map = 4;
int InBattleMechanicusBuildingPointsNotify::player_building_points_map_size() const {
  return player_building_points_map_.size();
}
void InBattleMechanicusBuildingPointsNotify::clear_player_building_points_map() {
  player_building_points_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
InBattleMechanicusBuildingPointsNotify::player_building_points_map() const {
  // @@protoc_insertion_point(field_map:proto.InBattleMechanicusBuildingPointsNotify.player_building_points_map)
  return player_building_points_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
InBattleMechanicusBuildingPointsNotify::mutable_player_building_points_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.InBattleMechanicusBuildingPointsNotify.player_building_points_map)
  return player_building_points_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InBattleMechanicusPickCardReq::kGroupIdFieldNumber;
const int InBattleMechanicusPickCardReq::kPlayIndexFieldNumber;
const int InBattleMechanicusPickCardReq::kCardIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InBattleMechanicusPickCardReq::InBattleMechanicusPickCardReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InBattleMechanicusPickCardReq)
}
InBattleMechanicusPickCardReq::InBattleMechanicusPickCardReq(const InBattleMechanicusPickCardReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&card_id_, &from.card_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&card_id_)) + sizeof(group_id_));
  // @@protoc_insertion_point(copy_constructor:proto.InBattleMechanicusPickCardReq)
}

void InBattleMechanicusPickCardReq::SharedCtor() {
  ::memset(&card_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&card_id_)) + sizeof(group_id_));
  _cached_size_ = 0;
}

InBattleMechanicusPickCardReq::~InBattleMechanicusPickCardReq() {
  // @@protoc_insertion_point(destructor:proto.InBattleMechanicusPickCardReq)
  SharedDtor();
}

void InBattleMechanicusPickCardReq::SharedDtor() {
}

void InBattleMechanicusPickCardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InBattleMechanicusPickCardReq::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InBattleMechanicusPickCardReq& InBattleMechanicusPickCardReq::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

InBattleMechanicusPickCardReq* InBattleMechanicusPickCardReq::New(::google::protobuf::Arena* arena) const {
  InBattleMechanicusPickCardReq* n = new InBattleMechanicusPickCardReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InBattleMechanicusPickCardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InBattleMechanicusPickCardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&card_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&card_id_)) + sizeof(group_id_));
  _internal_metadata_.Clear();
}

bool InBattleMechanicusPickCardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InBattleMechanicusPickCardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 card_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_index = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 group_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InBattleMechanicusPickCardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InBattleMechanicusPickCardReq)
  return false;
#undef DO_
}

void InBattleMechanicusPickCardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InBattleMechanicusPickCardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 1;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->card_id(), output);
  }

  // uint32 play_index = 7;
  if (this->play_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->play_index(), output);
  }

  // uint32 group_id = 11;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->group_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InBattleMechanicusPickCardReq)
}

::google::protobuf::uint8* InBattleMechanicusPickCardReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InBattleMechanicusPickCardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 1;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->card_id(), target);
  }

  // uint32 play_index = 7;
  if (this->play_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->play_index(), target);
  }

  // uint32 group_id = 11;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->group_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InBattleMechanicusPickCardReq)
  return target;
}

size_t InBattleMechanicusPickCardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InBattleMechanicusPickCardReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 card_id = 1;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  // uint32 play_index = 7;
  if (this->play_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_index());
  }

  // uint32 group_id = 11;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InBattleMechanicusPickCardReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InBattleMechanicusPickCardReq)
  GOOGLE_DCHECK_NE(&from, this);
  const InBattleMechanicusPickCardReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InBattleMechanicusPickCardReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InBattleMechanicusPickCardReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InBattleMechanicusPickCardReq)
    MergeFrom(*source);
  }
}

void InBattleMechanicusPickCardReq::MergeFrom(const InBattleMechanicusPickCardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InBattleMechanicusPickCardReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
  if (from.play_index() != 0) {
    set_play_index(from.play_index());
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
}

void InBattleMechanicusPickCardReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InBattleMechanicusPickCardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InBattleMechanicusPickCardReq::CopyFrom(const InBattleMechanicusPickCardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InBattleMechanicusPickCardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InBattleMechanicusPickCardReq::IsInitialized() const {
  return true;
}

void InBattleMechanicusPickCardReq::Swap(InBattleMechanicusPickCardReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InBattleMechanicusPickCardReq::InternalSwap(InBattleMechanicusPickCardReq* other) {
  using std::swap;
  swap(card_id_, other->card_id_);
  swap(play_index_, other->play_index_);
  swap(group_id_, other->group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InBattleMechanicusPickCardReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InBattleMechanicusPickCardReq

// uint32 group_id = 11;
void InBattleMechanicusPickCardReq::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusPickCardReq::group_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPickCardReq.group_id)
  return group_id_;
}
void InBattleMechanicusPickCardReq::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPickCardReq.group_id)
}

// uint32 play_index = 7;
void InBattleMechanicusPickCardReq::clear_play_index() {
  play_index_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusPickCardReq::play_index() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPickCardReq.play_index)
  return play_index_;
}
void InBattleMechanicusPickCardReq::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPickCardReq.play_index)
}

// uint32 card_id = 1;
void InBattleMechanicusPickCardReq::clear_card_id() {
  card_id_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusPickCardReq::card_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPickCardReq.card_id)
  return card_id_;
}
void InBattleMechanicusPickCardReq::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPickCardReq.card_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InBattleMechanicusPickCardRsp::kRetcodeFieldNumber;
const int InBattleMechanicusPickCardRsp::kCardIdFieldNumber;
const int InBattleMechanicusPickCardRsp::kPlayIndexFieldNumber;
const int InBattleMechanicusPickCardRsp::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InBattleMechanicusPickCardRsp::InBattleMechanicusPickCardRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InBattleMechanicusPickCardRsp)
}
InBattleMechanicusPickCardRsp::InBattleMechanicusPickCardRsp(const InBattleMechanicusPickCardRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&card_id_, &from.card_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&card_id_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:proto.InBattleMechanicusPickCardRsp)
}

void InBattleMechanicusPickCardRsp::SharedCtor() {
  ::memset(&card_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&card_id_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

InBattleMechanicusPickCardRsp::~InBattleMechanicusPickCardRsp() {
  // @@protoc_insertion_point(destructor:proto.InBattleMechanicusPickCardRsp)
  SharedDtor();
}

void InBattleMechanicusPickCardRsp::SharedDtor() {
}

void InBattleMechanicusPickCardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InBattleMechanicusPickCardRsp::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InBattleMechanicusPickCardRsp& InBattleMechanicusPickCardRsp::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

InBattleMechanicusPickCardRsp* InBattleMechanicusPickCardRsp::New(::google::protobuf::Arena* arena) const {
  InBattleMechanicusPickCardRsp* n = new InBattleMechanicusPickCardRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InBattleMechanicusPickCardRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InBattleMechanicusPickCardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&card_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&card_id_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool InBattleMechanicusPickCardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InBattleMechanicusPickCardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 card_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 group_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InBattleMechanicusPickCardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InBattleMechanicusPickCardRsp)
  return false;
#undef DO_
}

void InBattleMechanicusPickCardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InBattleMechanicusPickCardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 2;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->card_id(), output);
  }

  // uint32 play_index = 4;
  if (this->play_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->play_index(), output);
  }

  // uint32 group_id = 9;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->group_id(), output);
  }

  // int32 retcode = 11;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InBattleMechanicusPickCardRsp)
}

::google::protobuf::uint8* InBattleMechanicusPickCardRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InBattleMechanicusPickCardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 2;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->card_id(), target);
  }

  // uint32 play_index = 4;
  if (this->play_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->play_index(), target);
  }

  // uint32 group_id = 9;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->group_id(), target);
  }

  // int32 retcode = 11;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InBattleMechanicusPickCardRsp)
  return target;
}

size_t InBattleMechanicusPickCardRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InBattleMechanicusPickCardRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 card_id = 2;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  // uint32 play_index = 4;
  if (this->play_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_index());
  }

  // uint32 group_id = 9;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  // int32 retcode = 11;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InBattleMechanicusPickCardRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InBattleMechanicusPickCardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const InBattleMechanicusPickCardRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InBattleMechanicusPickCardRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InBattleMechanicusPickCardRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InBattleMechanicusPickCardRsp)
    MergeFrom(*source);
  }
}

void InBattleMechanicusPickCardRsp::MergeFrom(const InBattleMechanicusPickCardRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InBattleMechanicusPickCardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
  if (from.play_index() != 0) {
    set_play_index(from.play_index());
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void InBattleMechanicusPickCardRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InBattleMechanicusPickCardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InBattleMechanicusPickCardRsp::CopyFrom(const InBattleMechanicusPickCardRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InBattleMechanicusPickCardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InBattleMechanicusPickCardRsp::IsInitialized() const {
  return true;
}

void InBattleMechanicusPickCardRsp::Swap(InBattleMechanicusPickCardRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InBattleMechanicusPickCardRsp::InternalSwap(InBattleMechanicusPickCardRsp* other) {
  using std::swap;
  swap(card_id_, other->card_id_);
  swap(play_index_, other->play_index_);
  swap(group_id_, other->group_id_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InBattleMechanicusPickCardRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InBattleMechanicusPickCardRsp

// int32 retcode = 11;
void InBattleMechanicusPickCardRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 InBattleMechanicusPickCardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPickCardRsp.retcode)
  return retcode_;
}
void InBattleMechanicusPickCardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPickCardRsp.retcode)
}

// uint32 card_id = 2;
void InBattleMechanicusPickCardRsp::clear_card_id() {
  card_id_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusPickCardRsp::card_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPickCardRsp.card_id)
  return card_id_;
}
void InBattleMechanicusPickCardRsp::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPickCardRsp.card_id)
}

// uint32 play_index = 4;
void InBattleMechanicusPickCardRsp::clear_play_index() {
  play_index_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusPickCardRsp::play_index() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPickCardRsp.play_index)
  return play_index_;
}
void InBattleMechanicusPickCardRsp::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPickCardRsp.play_index)
}

// uint32 group_id = 9;
void InBattleMechanicusPickCardRsp::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusPickCardRsp::group_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPickCardRsp.group_id)
  return group_id_;
}
void InBattleMechanicusPickCardRsp::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPickCardRsp.group_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InBattleMechanicusPickCardNotify::kPlayerUidFieldNumber;
const int InBattleMechanicusPickCardNotify::kGroupIdFieldNumber;
const int InBattleMechanicusPickCardNotify::kPlayIndexFieldNumber;
const int InBattleMechanicusPickCardNotify::kCardIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InBattleMechanicusPickCardNotify::InBattleMechanicusPickCardNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InBattleMechanicusPickCardNotify)
}
InBattleMechanicusPickCardNotify::InBattleMechanicusPickCardNotify(const InBattleMechanicusPickCardNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_uid_, &from.player_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_id_) -
    reinterpret_cast<char*>(&player_uid_)) + sizeof(card_id_));
  // @@protoc_insertion_point(copy_constructor:proto.InBattleMechanicusPickCardNotify)
}

void InBattleMechanicusPickCardNotify::SharedCtor() {
  ::memset(&player_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_id_) -
      reinterpret_cast<char*>(&player_uid_)) + sizeof(card_id_));
  _cached_size_ = 0;
}

InBattleMechanicusPickCardNotify::~InBattleMechanicusPickCardNotify() {
  // @@protoc_insertion_point(destructor:proto.InBattleMechanicusPickCardNotify)
  SharedDtor();
}

void InBattleMechanicusPickCardNotify::SharedDtor() {
}

void InBattleMechanicusPickCardNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InBattleMechanicusPickCardNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InBattleMechanicusPickCardNotify& InBattleMechanicusPickCardNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

InBattleMechanicusPickCardNotify* InBattleMechanicusPickCardNotify::New(::google::protobuf::Arena* arena) const {
  InBattleMechanicusPickCardNotify* n = new InBattleMechanicusPickCardNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InBattleMechanicusPickCardNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InBattleMechanicusPickCardNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_id_) -
      reinterpret_cast<char*>(&player_uid_)) + sizeof(card_id_));
  _internal_metadata_.Clear();
}

bool InBattleMechanicusPickCardNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InBattleMechanicusPickCardNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 player_uid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 group_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_index = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InBattleMechanicusPickCardNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InBattleMechanicusPickCardNotify)
  return false;
#undef DO_
}

void InBattleMechanicusPickCardNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InBattleMechanicusPickCardNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 6;
  if (this->player_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->player_uid(), output);
  }

  // uint32 group_id = 7;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->group_id(), output);
  }

  // uint32 play_index = 8;
  if (this->play_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->play_index(), output);
  }

  // uint32 card_id = 10;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->card_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InBattleMechanicusPickCardNotify)
}

::google::protobuf::uint8* InBattleMechanicusPickCardNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InBattleMechanicusPickCardNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 6;
  if (this->player_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->player_uid(), target);
  }

  // uint32 group_id = 7;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->group_id(), target);
  }

  // uint32 play_index = 8;
  if (this->play_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->play_index(), target);
  }

  // uint32 card_id = 10;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->card_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InBattleMechanicusPickCardNotify)
  return target;
}

size_t InBattleMechanicusPickCardNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InBattleMechanicusPickCardNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 player_uid = 6;
  if (this->player_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_uid());
  }

  // uint32 group_id = 7;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  // uint32 play_index = 8;
  if (this->play_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_index());
  }

  // uint32 card_id = 10;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InBattleMechanicusPickCardNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InBattleMechanicusPickCardNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const InBattleMechanicusPickCardNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InBattleMechanicusPickCardNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InBattleMechanicusPickCardNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InBattleMechanicusPickCardNotify)
    MergeFrom(*source);
  }
}

void InBattleMechanicusPickCardNotify::MergeFrom(const InBattleMechanicusPickCardNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InBattleMechanicusPickCardNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_uid() != 0) {
    set_player_uid(from.player_uid());
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.play_index() != 0) {
    set_play_index(from.play_index());
  }
  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
}

void InBattleMechanicusPickCardNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InBattleMechanicusPickCardNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InBattleMechanicusPickCardNotify::CopyFrom(const InBattleMechanicusPickCardNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InBattleMechanicusPickCardNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InBattleMechanicusPickCardNotify::IsInitialized() const {
  return true;
}

void InBattleMechanicusPickCardNotify::Swap(InBattleMechanicusPickCardNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InBattleMechanicusPickCardNotify::InternalSwap(InBattleMechanicusPickCardNotify* other) {
  using std::swap;
  swap(player_uid_, other->player_uid_);
  swap(group_id_, other->group_id_);
  swap(play_index_, other->play_index_);
  swap(card_id_, other->card_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InBattleMechanicusPickCardNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InBattleMechanicusPickCardNotify

// uint32 player_uid = 6;
void InBattleMechanicusPickCardNotify::clear_player_uid() {
  player_uid_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusPickCardNotify::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPickCardNotify.player_uid)
  return player_uid_;
}
void InBattleMechanicusPickCardNotify::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPickCardNotify.player_uid)
}

// uint32 group_id = 7;
void InBattleMechanicusPickCardNotify::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusPickCardNotify::group_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPickCardNotify.group_id)
  return group_id_;
}
void InBattleMechanicusPickCardNotify::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPickCardNotify.group_id)
}

// uint32 play_index = 8;
void InBattleMechanicusPickCardNotify::clear_play_index() {
  play_index_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusPickCardNotify::play_index() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPickCardNotify.play_index)
  return play_index_;
}
void InBattleMechanicusPickCardNotify::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPickCardNotify.play_index)
}

// uint32 card_id = 10;
void InBattleMechanicusPickCardNotify::clear_card_id() {
  card_id_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusPickCardNotify::card_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPickCardNotify.card_id)
  return card_id_;
}
void InBattleMechanicusPickCardNotify::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPickCardNotify.card_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InBattleMechanicusConfirmCardReq::kPlayIndexFieldNumber;
const int InBattleMechanicusConfirmCardReq::kCardIdFieldNumber;
const int InBattleMechanicusConfirmCardReq::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InBattleMechanicusConfirmCardReq::InBattleMechanicusConfirmCardReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InBattleMechanicusConfirmCardReq)
}
InBattleMechanicusConfirmCardReq::InBattleMechanicusConfirmCardReq(const InBattleMechanicusConfirmCardReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&card_id_, &from.card_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_index_) -
    reinterpret_cast<char*>(&card_id_)) + sizeof(play_index_));
  // @@protoc_insertion_point(copy_constructor:proto.InBattleMechanicusConfirmCardReq)
}

void InBattleMechanicusConfirmCardReq::SharedCtor() {
  ::memset(&card_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_index_) -
      reinterpret_cast<char*>(&card_id_)) + sizeof(play_index_));
  _cached_size_ = 0;
}

InBattleMechanicusConfirmCardReq::~InBattleMechanicusConfirmCardReq() {
  // @@protoc_insertion_point(destructor:proto.InBattleMechanicusConfirmCardReq)
  SharedDtor();
}

void InBattleMechanicusConfirmCardReq::SharedDtor() {
}

void InBattleMechanicusConfirmCardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InBattleMechanicusConfirmCardReq::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InBattleMechanicusConfirmCardReq& InBattleMechanicusConfirmCardReq::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

InBattleMechanicusConfirmCardReq* InBattleMechanicusConfirmCardReq::New(::google::protobuf::Arena* arena) const {
  InBattleMechanicusConfirmCardReq* n = new InBattleMechanicusConfirmCardReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InBattleMechanicusConfirmCardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InBattleMechanicusConfirmCardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&card_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_index_) -
      reinterpret_cast<char*>(&card_id_)) + sizeof(play_index_));
  _internal_metadata_.Clear();
}

bool InBattleMechanicusConfirmCardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InBattleMechanicusConfirmCardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 card_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 group_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InBattleMechanicusConfirmCardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InBattleMechanicusConfirmCardReq)
  return false;
#undef DO_
}

void InBattleMechanicusConfirmCardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InBattleMechanicusConfirmCardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 1;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->card_id(), output);
  }

  // uint32 group_id = 3;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  // uint32 play_index = 6;
  if (this->play_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->play_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InBattleMechanicusConfirmCardReq)
}

::google::protobuf::uint8* InBattleMechanicusConfirmCardReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InBattleMechanicusConfirmCardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 1;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->card_id(), target);
  }

  // uint32 group_id = 3;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->group_id(), target);
  }

  // uint32 play_index = 6;
  if (this->play_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->play_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InBattleMechanicusConfirmCardReq)
  return target;
}

size_t InBattleMechanicusConfirmCardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InBattleMechanicusConfirmCardReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 card_id = 1;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  // uint32 group_id = 3;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  // uint32 play_index = 6;
  if (this->play_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InBattleMechanicusConfirmCardReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InBattleMechanicusConfirmCardReq)
  GOOGLE_DCHECK_NE(&from, this);
  const InBattleMechanicusConfirmCardReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InBattleMechanicusConfirmCardReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InBattleMechanicusConfirmCardReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InBattleMechanicusConfirmCardReq)
    MergeFrom(*source);
  }
}

void InBattleMechanicusConfirmCardReq::MergeFrom(const InBattleMechanicusConfirmCardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InBattleMechanicusConfirmCardReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.play_index() != 0) {
    set_play_index(from.play_index());
  }
}

void InBattleMechanicusConfirmCardReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InBattleMechanicusConfirmCardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InBattleMechanicusConfirmCardReq::CopyFrom(const InBattleMechanicusConfirmCardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InBattleMechanicusConfirmCardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InBattleMechanicusConfirmCardReq::IsInitialized() const {
  return true;
}

void InBattleMechanicusConfirmCardReq::Swap(InBattleMechanicusConfirmCardReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InBattleMechanicusConfirmCardReq::InternalSwap(InBattleMechanicusConfirmCardReq* other) {
  using std::swap;
  swap(card_id_, other->card_id_);
  swap(group_id_, other->group_id_);
  swap(play_index_, other->play_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InBattleMechanicusConfirmCardReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InBattleMechanicusConfirmCardReq

// uint32 play_index = 6;
void InBattleMechanicusConfirmCardReq::clear_play_index() {
  play_index_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusConfirmCardReq::play_index() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusConfirmCardReq.play_index)
  return play_index_;
}
void InBattleMechanicusConfirmCardReq::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusConfirmCardReq.play_index)
}

// uint32 card_id = 1;
void InBattleMechanicusConfirmCardReq::clear_card_id() {
  card_id_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusConfirmCardReq::card_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusConfirmCardReq.card_id)
  return card_id_;
}
void InBattleMechanicusConfirmCardReq::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusConfirmCardReq.card_id)
}

// uint32 group_id = 3;
void InBattleMechanicusConfirmCardReq::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusConfirmCardReq::group_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusConfirmCardReq.group_id)
  return group_id_;
}
void InBattleMechanicusConfirmCardReq::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusConfirmCardReq.group_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InBattleMechanicusConfirmCardRsp::kPlayIndexFieldNumber;
const int InBattleMechanicusConfirmCardRsp::kCardIdFieldNumber;
const int InBattleMechanicusConfirmCardRsp::kRetcodeFieldNumber;
const int InBattleMechanicusConfirmCardRsp::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InBattleMechanicusConfirmCardRsp::InBattleMechanicusConfirmCardRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InBattleMechanicusConfirmCardRsp)
}
InBattleMechanicusConfirmCardRsp::InBattleMechanicusConfirmCardRsp(const InBattleMechanicusConfirmCardRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&play_index_, &from.play_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_id_) -
    reinterpret_cast<char*>(&play_index_)) + sizeof(card_id_));
  // @@protoc_insertion_point(copy_constructor:proto.InBattleMechanicusConfirmCardRsp)
}

void InBattleMechanicusConfirmCardRsp::SharedCtor() {
  ::memset(&play_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_id_) -
      reinterpret_cast<char*>(&play_index_)) + sizeof(card_id_));
  _cached_size_ = 0;
}

InBattleMechanicusConfirmCardRsp::~InBattleMechanicusConfirmCardRsp() {
  // @@protoc_insertion_point(destructor:proto.InBattleMechanicusConfirmCardRsp)
  SharedDtor();
}

void InBattleMechanicusConfirmCardRsp::SharedDtor() {
}

void InBattleMechanicusConfirmCardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InBattleMechanicusConfirmCardRsp::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InBattleMechanicusConfirmCardRsp& InBattleMechanicusConfirmCardRsp::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

InBattleMechanicusConfirmCardRsp* InBattleMechanicusConfirmCardRsp::New(::google::protobuf::Arena* arena) const {
  InBattleMechanicusConfirmCardRsp* n = new InBattleMechanicusConfirmCardRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InBattleMechanicusConfirmCardRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InBattleMechanicusConfirmCardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&play_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_id_) -
      reinterpret_cast<char*>(&play_index_)) + sizeof(card_id_));
  _internal_metadata_.Clear();
}

bool InBattleMechanicusConfirmCardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InBattleMechanicusConfirmCardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 play_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 group_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InBattleMechanicusConfirmCardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InBattleMechanicusConfirmCardRsp)
  return false;
#undef DO_
}

void InBattleMechanicusConfirmCardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InBattleMechanicusConfirmCardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_index = 2;
  if (this->play_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->play_index(), output);
  }

  // uint32 group_id = 6;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->group_id(), output);
  }

  // int32 retcode = 11;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->retcode(), output);
  }

  // uint32 card_id = 14;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->card_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InBattleMechanicusConfirmCardRsp)
}

::google::protobuf::uint8* InBattleMechanicusConfirmCardRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InBattleMechanicusConfirmCardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_index = 2;
  if (this->play_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->play_index(), target);
  }

  // uint32 group_id = 6;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->group_id(), target);
  }

  // int32 retcode = 11;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->retcode(), target);
  }

  // uint32 card_id = 14;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->card_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InBattleMechanicusConfirmCardRsp)
  return target;
}

size_t InBattleMechanicusConfirmCardRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InBattleMechanicusConfirmCardRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 play_index = 2;
  if (this->play_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_index());
  }

  // uint32 group_id = 6;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  // int32 retcode = 11;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 card_id = 14;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InBattleMechanicusConfirmCardRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InBattleMechanicusConfirmCardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const InBattleMechanicusConfirmCardRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InBattleMechanicusConfirmCardRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InBattleMechanicusConfirmCardRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InBattleMechanicusConfirmCardRsp)
    MergeFrom(*source);
  }
}

void InBattleMechanicusConfirmCardRsp::MergeFrom(const InBattleMechanicusConfirmCardRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InBattleMechanicusConfirmCardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.play_index() != 0) {
    set_play_index(from.play_index());
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
}

void InBattleMechanicusConfirmCardRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InBattleMechanicusConfirmCardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InBattleMechanicusConfirmCardRsp::CopyFrom(const InBattleMechanicusConfirmCardRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InBattleMechanicusConfirmCardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InBattleMechanicusConfirmCardRsp::IsInitialized() const {
  return true;
}

void InBattleMechanicusConfirmCardRsp::Swap(InBattleMechanicusConfirmCardRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InBattleMechanicusConfirmCardRsp::InternalSwap(InBattleMechanicusConfirmCardRsp* other) {
  using std::swap;
  swap(play_index_, other->play_index_);
  swap(group_id_, other->group_id_);
  swap(retcode_, other->retcode_);
  swap(card_id_, other->card_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InBattleMechanicusConfirmCardRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InBattleMechanicusConfirmCardRsp

// uint32 play_index = 2;
void InBattleMechanicusConfirmCardRsp::clear_play_index() {
  play_index_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusConfirmCardRsp::play_index() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusConfirmCardRsp.play_index)
  return play_index_;
}
void InBattleMechanicusConfirmCardRsp::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusConfirmCardRsp.play_index)
}

// uint32 card_id = 14;
void InBattleMechanicusConfirmCardRsp::clear_card_id() {
  card_id_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusConfirmCardRsp::card_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusConfirmCardRsp.card_id)
  return card_id_;
}
void InBattleMechanicusConfirmCardRsp::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusConfirmCardRsp.card_id)
}

// int32 retcode = 11;
void InBattleMechanicusConfirmCardRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 InBattleMechanicusConfirmCardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusConfirmCardRsp.retcode)
  return retcode_;
}
void InBattleMechanicusConfirmCardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusConfirmCardRsp.retcode)
}

// uint32 group_id = 6;
void InBattleMechanicusConfirmCardRsp::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusConfirmCardRsp::group_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusConfirmCardRsp.group_id)
  return group_id_;
}
void InBattleMechanicusConfirmCardRsp::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusConfirmCardRsp.group_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InBattleMechanicusConfirmCardNotify::kPlayIndexFieldNumber;
const int InBattleMechanicusConfirmCardNotify::kCardIdFieldNumber;
const int InBattleMechanicusConfirmCardNotify::kGroupIdFieldNumber;
const int InBattleMechanicusConfirmCardNotify::kPlayerUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InBattleMechanicusConfirmCardNotify::InBattleMechanicusConfirmCardNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InBattleMechanicusConfirmCardNotify)
}
InBattleMechanicusConfirmCardNotify::InBattleMechanicusConfirmCardNotify(const InBattleMechanicusConfirmCardNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_uid_, &from.player_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_id_) -
    reinterpret_cast<char*>(&player_uid_)) + sizeof(card_id_));
  // @@protoc_insertion_point(copy_constructor:proto.InBattleMechanicusConfirmCardNotify)
}

void InBattleMechanicusConfirmCardNotify::SharedCtor() {
  ::memset(&player_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_id_) -
      reinterpret_cast<char*>(&player_uid_)) + sizeof(card_id_));
  _cached_size_ = 0;
}

InBattleMechanicusConfirmCardNotify::~InBattleMechanicusConfirmCardNotify() {
  // @@protoc_insertion_point(destructor:proto.InBattleMechanicusConfirmCardNotify)
  SharedDtor();
}

void InBattleMechanicusConfirmCardNotify::SharedDtor() {
}

void InBattleMechanicusConfirmCardNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InBattleMechanicusConfirmCardNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InBattleMechanicusConfirmCardNotify& InBattleMechanicusConfirmCardNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

InBattleMechanicusConfirmCardNotify* InBattleMechanicusConfirmCardNotify::New(::google::protobuf::Arena* arena) const {
  InBattleMechanicusConfirmCardNotify* n = new InBattleMechanicusConfirmCardNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InBattleMechanicusConfirmCardNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InBattleMechanicusConfirmCardNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_id_) -
      reinterpret_cast<char*>(&player_uid_)) + sizeof(card_id_));
  _internal_metadata_.Clear();
}

bool InBattleMechanicusConfirmCardNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InBattleMechanicusConfirmCardNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 player_uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 group_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_index = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InBattleMechanicusConfirmCardNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InBattleMechanicusConfirmCardNotify)
  return false;
#undef DO_
}

void InBattleMechanicusConfirmCardNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InBattleMechanicusConfirmCardNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 2;
  if (this->player_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_uid(), output);
  }

  // uint32 group_id = 10;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->group_id(), output);
  }

  // uint32 play_index = 11;
  if (this->play_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->play_index(), output);
  }

  // uint32 card_id = 13;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->card_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InBattleMechanicusConfirmCardNotify)
}

::google::protobuf::uint8* InBattleMechanicusConfirmCardNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InBattleMechanicusConfirmCardNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 2;
  if (this->player_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_uid(), target);
  }

  // uint32 group_id = 10;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->group_id(), target);
  }

  // uint32 play_index = 11;
  if (this->play_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->play_index(), target);
  }

  // uint32 card_id = 13;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->card_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InBattleMechanicusConfirmCardNotify)
  return target;
}

size_t InBattleMechanicusConfirmCardNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InBattleMechanicusConfirmCardNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 player_uid = 2;
  if (this->player_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_uid());
  }

  // uint32 group_id = 10;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  // uint32 play_index = 11;
  if (this->play_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_index());
  }

  // uint32 card_id = 13;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InBattleMechanicusConfirmCardNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InBattleMechanicusConfirmCardNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const InBattleMechanicusConfirmCardNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InBattleMechanicusConfirmCardNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InBattleMechanicusConfirmCardNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InBattleMechanicusConfirmCardNotify)
    MergeFrom(*source);
  }
}

void InBattleMechanicusConfirmCardNotify::MergeFrom(const InBattleMechanicusConfirmCardNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InBattleMechanicusConfirmCardNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_uid() != 0) {
    set_player_uid(from.player_uid());
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.play_index() != 0) {
    set_play_index(from.play_index());
  }
  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
}

void InBattleMechanicusConfirmCardNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InBattleMechanicusConfirmCardNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InBattleMechanicusConfirmCardNotify::CopyFrom(const InBattleMechanicusConfirmCardNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InBattleMechanicusConfirmCardNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InBattleMechanicusConfirmCardNotify::IsInitialized() const {
  return true;
}

void InBattleMechanicusConfirmCardNotify::Swap(InBattleMechanicusConfirmCardNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InBattleMechanicusConfirmCardNotify::InternalSwap(InBattleMechanicusConfirmCardNotify* other) {
  using std::swap;
  swap(player_uid_, other->player_uid_);
  swap(group_id_, other->group_id_);
  swap(play_index_, other->play_index_);
  swap(card_id_, other->card_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InBattleMechanicusConfirmCardNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InBattleMechanicusConfirmCardNotify

// uint32 play_index = 11;
void InBattleMechanicusConfirmCardNotify::clear_play_index() {
  play_index_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusConfirmCardNotify::play_index() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusConfirmCardNotify.play_index)
  return play_index_;
}
void InBattleMechanicusConfirmCardNotify::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusConfirmCardNotify.play_index)
}

// uint32 card_id = 13;
void InBattleMechanicusConfirmCardNotify::clear_card_id() {
  card_id_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusConfirmCardNotify::card_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusConfirmCardNotify.card_id)
  return card_id_;
}
void InBattleMechanicusConfirmCardNotify::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusConfirmCardNotify.card_id)
}

// uint32 group_id = 10;
void InBattleMechanicusConfirmCardNotify::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusConfirmCardNotify::group_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusConfirmCardNotify.group_id)
  return group_id_;
}
void InBattleMechanicusConfirmCardNotify::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusConfirmCardNotify.group_id)
}

// uint32 player_uid = 2;
void InBattleMechanicusConfirmCardNotify::clear_player_uid() {
  player_uid_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusConfirmCardNotify::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusConfirmCardNotify.player_uid)
  return player_uid_;
}
void InBattleMechanicusConfirmCardNotify::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusConfirmCardNotify.player_uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

InBattleMechanicusCardResultNotify::InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry::InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry() {}
InBattleMechanicusCardResultNotify::InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry::InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata InBattleMechanicusCardResultNotify::InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[24];
}
void InBattleMechanicusCardResultNotify::InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void InBattleMechanicusCardResultNotify::InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry::MergeFrom(const InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InBattleMechanicusCardResultNotify::kWaitSecondsFieldNumber;
const int InBattleMechanicusCardResultNotify::kGroupIdFieldNumber;
const int InBattleMechanicusCardResultNotify::kCardListFieldNumber;
const int InBattleMechanicusCardResultNotify::kWaitBeginTimeUsFieldNumber;
const int InBattleMechanicusCardResultNotify::kPlayerConfirmedCardMapFieldNumber;
const int InBattleMechanicusCardResultNotify::kPlayIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InBattleMechanicusCardResultNotify::InBattleMechanicusCardResultNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InBattleMechanicusCardResultNotify)
}
InBattleMechanicusCardResultNotify::InBattleMechanicusCardResultNotify(const InBattleMechanicusCardResultNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      card_list_(from.card_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_confirmed_card_map_.MergeFrom(from.player_confirmed_card_map_);
  ::memcpy(&group_id_, &from.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_index_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(play_index_));
  // @@protoc_insertion_point(copy_constructor:proto.InBattleMechanicusCardResultNotify)
}

void InBattleMechanicusCardResultNotify::SharedCtor() {
  ::memset(&group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_index_) -
      reinterpret_cast<char*>(&group_id_)) + sizeof(play_index_));
  _cached_size_ = 0;
}

InBattleMechanicusCardResultNotify::~InBattleMechanicusCardResultNotify() {
  // @@protoc_insertion_point(destructor:proto.InBattleMechanicusCardResultNotify)
  SharedDtor();
}

void InBattleMechanicusCardResultNotify::SharedDtor() {
}

void InBattleMechanicusCardResultNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InBattleMechanicusCardResultNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InBattleMechanicusCardResultNotify& InBattleMechanicusCardResultNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

InBattleMechanicusCardResultNotify* InBattleMechanicusCardResultNotify::New(::google::protobuf::Arena* arena) const {
  InBattleMechanicusCardResultNotify* n = new InBattleMechanicusCardResultNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InBattleMechanicusCardResultNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InBattleMechanicusCardResultNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_list_.Clear();
  player_confirmed_card_map_.Clear();
  ::memset(&group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_index_) -
      reinterpret_cast<char*>(&group_id_)) + sizeof(play_index_));
  _internal_metadata_.Clear();
}

bool InBattleMechanicusCardResultNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InBattleMechanicusCardResultNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 group_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wait_seconds = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wait_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 wait_begin_time_us = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wait_begin_time_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_index = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.InBattleMechanicusCardInfo card_list = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> player_confirmed_card_map = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry::Parser< ::google::protobuf::internal::MapField<
              InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&player_confirmed_card_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InBattleMechanicusCardResultNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InBattleMechanicusCardResultNotify)
  return false;
#undef DO_
}

void InBattleMechanicusCardResultNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InBattleMechanicusCardResultNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_id = 2;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // uint32 wait_seconds = 6;
  if (this->wait_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->wait_seconds(), output);
  }

  // uint64 wait_begin_time_us = 7;
  if (this->wait_begin_time_us() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->wait_begin_time_us(), output);
  }

  // uint32 play_index = 8;
  if (this->play_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->play_index(), output);
  }

  // repeated .proto.InBattleMechanicusCardInfo card_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->card_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->card_list(static_cast<int>(i)), output);
  }

  // map<uint32, uint32> player_confirmed_card_map = 12;
  if (!this->player_confirmed_card_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->player_confirmed_card_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->player_confirmed_card_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->player_confirmed_card_map().begin();
          it != this->player_confirmed_card_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(player_confirmed_card_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->player_confirmed_card_map().begin();
          it != this->player_confirmed_card_map().end(); ++it) {
        entry.reset(player_confirmed_card_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InBattleMechanicusCardResultNotify)
}

::google::protobuf::uint8* InBattleMechanicusCardResultNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InBattleMechanicusCardResultNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_id = 2;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group_id(), target);
  }

  // uint32 wait_seconds = 6;
  if (this->wait_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->wait_seconds(), target);
  }

  // uint64 wait_begin_time_us = 7;
  if (this->wait_begin_time_us() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->wait_begin_time_us(), target);
  }

  // uint32 play_index = 8;
  if (this->play_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->play_index(), target);
  }

  // repeated .proto.InBattleMechanicusCardInfo card_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->card_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->card_list(static_cast<int>(i)), deterministic, target);
  }

  // map<uint32, uint32> player_confirmed_card_map = 12;
  if (!this->player_confirmed_card_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->player_confirmed_card_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->player_confirmed_card_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->player_confirmed_card_map().begin();
          it != this->player_confirmed_card_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(player_confirmed_card_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->player_confirmed_card_map().begin();
          it != this->player_confirmed_card_map().end(); ++it) {
        entry.reset(player_confirmed_card_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InBattleMechanicusCardResultNotify)
  return target;
}

size_t InBattleMechanicusCardResultNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InBattleMechanicusCardResultNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.InBattleMechanicusCardInfo card_list = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->card_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card_list(static_cast<int>(i)));
    }
  }

  // map<uint32, uint32> player_confirmed_card_map = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->player_confirmed_card_map_size());
  {
    ::google::protobuf::scoped_ptr<InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->player_confirmed_card_map().begin();
        it != this->player_confirmed_card_map().end(); ++it) {
      entry.reset(player_confirmed_card_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 group_id = 2;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  // uint32 wait_seconds = 6;
  if (this->wait_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wait_seconds());
  }

  // uint64 wait_begin_time_us = 7;
  if (this->wait_begin_time_us() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->wait_begin_time_us());
  }

  // uint32 play_index = 8;
  if (this->play_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InBattleMechanicusCardResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InBattleMechanicusCardResultNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const InBattleMechanicusCardResultNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InBattleMechanicusCardResultNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InBattleMechanicusCardResultNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InBattleMechanicusCardResultNotify)
    MergeFrom(*source);
  }
}

void InBattleMechanicusCardResultNotify::MergeFrom(const InBattleMechanicusCardResultNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InBattleMechanicusCardResultNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_list_.MergeFrom(from.card_list_);
  player_confirmed_card_map_.MergeFrom(from.player_confirmed_card_map_);
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.wait_seconds() != 0) {
    set_wait_seconds(from.wait_seconds());
  }
  if (from.wait_begin_time_us() != 0) {
    set_wait_begin_time_us(from.wait_begin_time_us());
  }
  if (from.play_index() != 0) {
    set_play_index(from.play_index());
  }
}

void InBattleMechanicusCardResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InBattleMechanicusCardResultNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InBattleMechanicusCardResultNotify::CopyFrom(const InBattleMechanicusCardResultNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InBattleMechanicusCardResultNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InBattleMechanicusCardResultNotify::IsInitialized() const {
  return true;
}

void InBattleMechanicusCardResultNotify::Swap(InBattleMechanicusCardResultNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InBattleMechanicusCardResultNotify::InternalSwap(InBattleMechanicusCardResultNotify* other) {
  using std::swap;
  card_list_.InternalSwap(&other->card_list_);
  player_confirmed_card_map_.Swap(&other->player_confirmed_card_map_);
  swap(group_id_, other->group_id_);
  swap(wait_seconds_, other->wait_seconds_);
  swap(wait_begin_time_us_, other->wait_begin_time_us_);
  swap(play_index_, other->play_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InBattleMechanicusCardResultNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InBattleMechanicusCardResultNotify

// uint32 wait_seconds = 6;
void InBattleMechanicusCardResultNotify::clear_wait_seconds() {
  wait_seconds_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusCardResultNotify::wait_seconds() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusCardResultNotify.wait_seconds)
  return wait_seconds_;
}
void InBattleMechanicusCardResultNotify::set_wait_seconds(::google::protobuf::uint32 value) {
  
  wait_seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusCardResultNotify.wait_seconds)
}

// uint32 group_id = 2;
void InBattleMechanicusCardResultNotify::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusCardResultNotify::group_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusCardResultNotify.group_id)
  return group_id_;
}
void InBattleMechanicusCardResultNotify::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusCardResultNotify.group_id)
}

// repeated .proto.InBattleMechanicusCardInfo card_list = 9;
int InBattleMechanicusCardResultNotify::card_list_size() const {
  return card_list_.size();
}
void InBattleMechanicusCardResultNotify::clear_card_list() {
  card_list_.Clear();
}
const ::proto::InBattleMechanicusCardInfo& InBattleMechanicusCardResultNotify::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusCardResultNotify.card_list)
  return card_list_.Get(index);
}
::proto::InBattleMechanicusCardInfo* InBattleMechanicusCardResultNotify::mutable_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.InBattleMechanicusCardResultNotify.card_list)
  return card_list_.Mutable(index);
}
::proto::InBattleMechanicusCardInfo* InBattleMechanicusCardResultNotify::add_card_list() {
  // @@protoc_insertion_point(field_add:proto.InBattleMechanicusCardResultNotify.card_list)
  return card_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusCardInfo >*
InBattleMechanicusCardResultNotify::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleMechanicusCardResultNotify.card_list)
  return &card_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusCardInfo >&
InBattleMechanicusCardResultNotify::card_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleMechanicusCardResultNotify.card_list)
  return card_list_;
}

// uint64 wait_begin_time_us = 7;
void InBattleMechanicusCardResultNotify::clear_wait_begin_time_us() {
  wait_begin_time_us_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 InBattleMechanicusCardResultNotify::wait_begin_time_us() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusCardResultNotify.wait_begin_time_us)
  return wait_begin_time_us_;
}
void InBattleMechanicusCardResultNotify::set_wait_begin_time_us(::google::protobuf::uint64 value) {
  
  wait_begin_time_us_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusCardResultNotify.wait_begin_time_us)
}

// map<uint32, uint32> player_confirmed_card_map = 12;
int InBattleMechanicusCardResultNotify::player_confirmed_card_map_size() const {
  return player_confirmed_card_map_.size();
}
void InBattleMechanicusCardResultNotify::clear_player_confirmed_card_map() {
  player_confirmed_card_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
InBattleMechanicusCardResultNotify::player_confirmed_card_map() const {
  // @@protoc_insertion_point(field_map:proto.InBattleMechanicusCardResultNotify.player_confirmed_card_map)
  return player_confirmed_card_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
InBattleMechanicusCardResultNotify::mutable_player_confirmed_card_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.InBattleMechanicusCardResultNotify.player_confirmed_card_map)
  return player_confirmed_card_map_.MutableMap();
}

// uint32 play_index = 8;
void InBattleMechanicusCardResultNotify::clear_play_index() {
  play_index_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusCardResultNotify::play_index() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusCardResultNotify.play_index)
  return play_index_;
}
void InBattleMechanicusCardResultNotify::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusCardResultNotify.play_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultistagePlayFinishStageRsp::kRetcodeFieldNumber;
const int MultistagePlayFinishStageRsp::kGroupIdFieldNumber;
const int MultistagePlayFinishStageRsp::kPlayIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultistagePlayFinishStageRsp::MultistagePlayFinishStageRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MultistagePlayFinishStageRsp)
}
MultistagePlayFinishStageRsp::MultistagePlayFinishStageRsp(const MultistagePlayFinishStageRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&group_id_, &from.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:proto.MultistagePlayFinishStageRsp)
}

void MultistagePlayFinishStageRsp::SharedCtor() {
  ::memset(&group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&group_id_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

MultistagePlayFinishStageRsp::~MultistagePlayFinishStageRsp() {
  // @@protoc_insertion_point(destructor:proto.MultistagePlayFinishStageRsp)
  SharedDtor();
}

void MultistagePlayFinishStageRsp::SharedDtor() {
}

void MultistagePlayFinishStageRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultistagePlayFinishStageRsp::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultistagePlayFinishStageRsp& MultistagePlayFinishStageRsp::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

MultistagePlayFinishStageRsp* MultistagePlayFinishStageRsp::New(::google::protobuf::Arena* arena) const {
  MultistagePlayFinishStageRsp* n = new MultistagePlayFinishStageRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultistagePlayFinishStageRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MultistagePlayFinishStageRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&group_id_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool MultistagePlayFinishStageRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MultistagePlayFinishStageRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 play_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 group_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MultistagePlayFinishStageRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MultistagePlayFinishStageRsp)
  return false;
#undef DO_
}

void MultistagePlayFinishStageRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MultistagePlayFinishStageRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_index = 6;
  if (this->play_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->play_index(), output);
  }

  // int32 retcode = 11;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->retcode(), output);
  }

  // uint32 group_id = 12;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->group_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MultistagePlayFinishStageRsp)
}

::google::protobuf::uint8* MultistagePlayFinishStageRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MultistagePlayFinishStageRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_index = 6;
  if (this->play_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->play_index(), target);
  }

  // int32 retcode = 11;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->retcode(), target);
  }

  // uint32 group_id = 12;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->group_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MultistagePlayFinishStageRsp)
  return target;
}

size_t MultistagePlayFinishStageRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MultistagePlayFinishStageRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 group_id = 12;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  // uint32 play_index = 6;
  if (this->play_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_index());
  }

  // int32 retcode = 11;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultistagePlayFinishStageRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MultistagePlayFinishStageRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const MultistagePlayFinishStageRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultistagePlayFinishStageRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MultistagePlayFinishStageRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MultistagePlayFinishStageRsp)
    MergeFrom(*source);
  }
}

void MultistagePlayFinishStageRsp::MergeFrom(const MultistagePlayFinishStageRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MultistagePlayFinishStageRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.play_index() != 0) {
    set_play_index(from.play_index());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void MultistagePlayFinishStageRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MultistagePlayFinishStageRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultistagePlayFinishStageRsp::CopyFrom(const MultistagePlayFinishStageRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MultistagePlayFinishStageRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultistagePlayFinishStageRsp::IsInitialized() const {
  return true;
}

void MultistagePlayFinishStageRsp::Swap(MultistagePlayFinishStageRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultistagePlayFinishStageRsp::InternalSwap(MultistagePlayFinishStageRsp* other) {
  using std::swap;
  swap(group_id_, other->group_id_);
  swap(play_index_, other->play_index_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultistagePlayFinishStageRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultistagePlayFinishStageRsp

// int32 retcode = 11;
void MultistagePlayFinishStageRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 MultistagePlayFinishStageRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayFinishStageRsp.retcode)
  return retcode_;
}
void MultistagePlayFinishStageRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayFinishStageRsp.retcode)
}

// uint32 group_id = 12;
void MultistagePlayFinishStageRsp::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 MultistagePlayFinishStageRsp::group_id() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayFinishStageRsp.group_id)
  return group_id_;
}
void MultistagePlayFinishStageRsp::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayFinishStageRsp.group_id)
}

// uint32 play_index = 6;
void MultistagePlayFinishStageRsp::clear_play_index() {
  play_index_ = 0u;
}
::google::protobuf::uint32 MultistagePlayFinishStageRsp::play_index() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayFinishStageRsp.play_index)
  return play_index_;
}
void MultistagePlayFinishStageRsp::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayFinishStageRsp.play_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultistageSettleWatcherInfo::kTotalProgressFieldNumber;
const int MultistageSettleWatcherInfo::kCurProgressFieldNumber;
const int MultistageSettleWatcherInfo::kWatcherIdFieldNumber;
const int MultistageSettleWatcherInfo::kIsInverseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultistageSettleWatcherInfo::MultistageSettleWatcherInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MultistageSettleWatcherInfo)
}
MultistageSettleWatcherInfo::MultistageSettleWatcherInfo(const MultistageSettleWatcherInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_progress_, &from.cur_progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_progress_) -
    reinterpret_cast<char*>(&cur_progress_)) + sizeof(total_progress_));
  // @@protoc_insertion_point(copy_constructor:proto.MultistageSettleWatcherInfo)
}

void MultistageSettleWatcherInfo::SharedCtor() {
  ::memset(&cur_progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_progress_) -
      reinterpret_cast<char*>(&cur_progress_)) + sizeof(total_progress_));
  _cached_size_ = 0;
}

MultistageSettleWatcherInfo::~MultistageSettleWatcherInfo() {
  // @@protoc_insertion_point(destructor:proto.MultistageSettleWatcherInfo)
  SharedDtor();
}

void MultistageSettleWatcherInfo::SharedDtor() {
}

void MultistageSettleWatcherInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultistageSettleWatcherInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultistageSettleWatcherInfo& MultistageSettleWatcherInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

MultistageSettleWatcherInfo* MultistageSettleWatcherInfo::New(::google::protobuf::Arena* arena) const {
  MultistageSettleWatcherInfo* n = new MultistageSettleWatcherInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultistageSettleWatcherInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MultistageSettleWatcherInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cur_progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_progress_) -
      reinterpret_cast<char*>(&cur_progress_)) + sizeof(total_progress_));
  _internal_metadata_.Clear();
}

bool MultistageSettleWatcherInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MultistageSettleWatcherInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 cur_progress = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 watcher_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &watcher_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_inverse = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_inverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_progress = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MultistageSettleWatcherInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MultistageSettleWatcherInfo)
  return false;
#undef DO_
}

void MultistageSettleWatcherInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MultistageSettleWatcherInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cur_progress = 5;
  if (this->cur_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cur_progress(), output);
  }

  // uint32 watcher_id = 7;
  if (this->watcher_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->watcher_id(), output);
  }

  // bool is_inverse = 12;
  if (this->is_inverse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_inverse(), output);
  }

  // uint32 total_progress = 13;
  if (this->total_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->total_progress(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MultistageSettleWatcherInfo)
}

::google::protobuf::uint8* MultistageSettleWatcherInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MultistageSettleWatcherInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cur_progress = 5;
  if (this->cur_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cur_progress(), target);
  }

  // uint32 watcher_id = 7;
  if (this->watcher_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->watcher_id(), target);
  }

  // bool is_inverse = 12;
  if (this->is_inverse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_inverse(), target);
  }

  // uint32 total_progress = 13;
  if (this->total_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->total_progress(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MultistageSettleWatcherInfo)
  return target;
}

size_t MultistageSettleWatcherInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MultistageSettleWatcherInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 cur_progress = 5;
  if (this->cur_progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_progress());
  }

  // uint32 watcher_id = 7;
  if (this->watcher_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->watcher_id());
  }

  // bool is_inverse = 12;
  if (this->is_inverse() != 0) {
    total_size += 1 + 1;
  }

  // uint32 total_progress = 13;
  if (this->total_progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_progress());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultistageSettleWatcherInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MultistageSettleWatcherInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MultistageSettleWatcherInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultistageSettleWatcherInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MultistageSettleWatcherInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MultistageSettleWatcherInfo)
    MergeFrom(*source);
  }
}

void MultistageSettleWatcherInfo::MergeFrom(const MultistageSettleWatcherInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MultistageSettleWatcherInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cur_progress() != 0) {
    set_cur_progress(from.cur_progress());
  }
  if (from.watcher_id() != 0) {
    set_watcher_id(from.watcher_id());
  }
  if (from.is_inverse() != 0) {
    set_is_inverse(from.is_inverse());
  }
  if (from.total_progress() != 0) {
    set_total_progress(from.total_progress());
  }
}

void MultistageSettleWatcherInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MultistageSettleWatcherInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultistageSettleWatcherInfo::CopyFrom(const MultistageSettleWatcherInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MultistageSettleWatcherInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultistageSettleWatcherInfo::IsInitialized() const {
  return true;
}

void MultistageSettleWatcherInfo::Swap(MultistageSettleWatcherInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultistageSettleWatcherInfo::InternalSwap(MultistageSettleWatcherInfo* other) {
  using std::swap;
  swap(cur_progress_, other->cur_progress_);
  swap(watcher_id_, other->watcher_id_);
  swap(is_inverse_, other->is_inverse_);
  swap(total_progress_, other->total_progress_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultistageSettleWatcherInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultistageSettleWatcherInfo

// uint32 total_progress = 13;
void MultistageSettleWatcherInfo::clear_total_progress() {
  total_progress_ = 0u;
}
::google::protobuf::uint32 MultistageSettleWatcherInfo::total_progress() const {
  // @@protoc_insertion_point(field_get:proto.MultistageSettleWatcherInfo.total_progress)
  return total_progress_;
}
void MultistageSettleWatcherInfo::set_total_progress(::google::protobuf::uint32 value) {
  
  total_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistageSettleWatcherInfo.total_progress)
}

// uint32 cur_progress = 5;
void MultistageSettleWatcherInfo::clear_cur_progress() {
  cur_progress_ = 0u;
}
::google::protobuf::uint32 MultistageSettleWatcherInfo::cur_progress() const {
  // @@protoc_insertion_point(field_get:proto.MultistageSettleWatcherInfo.cur_progress)
  return cur_progress_;
}
void MultistageSettleWatcherInfo::set_cur_progress(::google::protobuf::uint32 value) {
  
  cur_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistageSettleWatcherInfo.cur_progress)
}

// uint32 watcher_id = 7;
void MultistageSettleWatcherInfo::clear_watcher_id() {
  watcher_id_ = 0u;
}
::google::protobuf::uint32 MultistageSettleWatcherInfo::watcher_id() const {
  // @@protoc_insertion_point(field_get:proto.MultistageSettleWatcherInfo.watcher_id)
  return watcher_id_;
}
void MultistageSettleWatcherInfo::set_watcher_id(::google::protobuf::uint32 value) {
  
  watcher_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistageSettleWatcherInfo.watcher_id)
}

// bool is_inverse = 12;
void MultistageSettleWatcherInfo::clear_is_inverse() {
  is_inverse_ = false;
}
bool MultistageSettleWatcherInfo::is_inverse() const {
  // @@protoc_insertion_point(field_get:proto.MultistageSettleWatcherInfo.is_inverse)
  return is_inverse_;
}
void MultistageSettleWatcherInfo::set_is_inverse(bool value) {
  
  is_inverse_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistageSettleWatcherInfo.is_inverse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InBattleMechanicusSettleNotify::kGroupIdFieldNumber;
const int InBattleMechanicusSettleNotify::kSceneTimeMsFieldNumber;
const int InBattleMechanicusSettleNotify::kDifficultyPercentageFieldNumber;
const int InBattleMechanicusSettleNotify::kTotalTokenFieldNumber;
const int InBattleMechanicusSettleNotify::kWatcherListFieldNumber;
const int InBattleMechanicusSettleNotify::kRealTokenFieldNumber;
const int InBattleMechanicusSettleNotify::kIsSuccessFieldNumber;
const int InBattleMechanicusSettleNotify::kPlayIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InBattleMechanicusSettleNotify::InBattleMechanicusSettleNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InBattleMechanicusSettleNotify)
}
InBattleMechanicusSettleNotify::InBattleMechanicusSettleNotify(const InBattleMechanicusSettleNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      watcher_list_(from.watcher_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_success_, &from.is_success_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&is_success_)) + sizeof(group_id_));
  // @@protoc_insertion_point(copy_constructor:proto.InBattleMechanicusSettleNotify)
}

void InBattleMechanicusSettleNotify::SharedCtor() {
  ::memset(&is_success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&is_success_)) + sizeof(group_id_));
  _cached_size_ = 0;
}

InBattleMechanicusSettleNotify::~InBattleMechanicusSettleNotify() {
  // @@protoc_insertion_point(destructor:proto.InBattleMechanicusSettleNotify)
  SharedDtor();
}

void InBattleMechanicusSettleNotify::SharedDtor() {
}

void InBattleMechanicusSettleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InBattleMechanicusSettleNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InBattleMechanicusSettleNotify& InBattleMechanicusSettleNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

InBattleMechanicusSettleNotify* InBattleMechanicusSettleNotify::New(::google::protobuf::Arena* arena) const {
  InBattleMechanicusSettleNotify* n = new InBattleMechanicusSettleNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InBattleMechanicusSettleNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InBattleMechanicusSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  watcher_list_.Clear();
  ::memset(&is_success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&is_success_)) + sizeof(group_id_));
  _internal_metadata_.Clear();
}

bool InBattleMechanicusSettleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InBattleMechanicusSettleNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.MultistageSettleWatcherInfo watcher_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_watcher_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 difficulty_percentage = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_token = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 scene_time_ms = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scene_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 real_token = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &real_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_index = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 group_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InBattleMechanicusSettleNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InBattleMechanicusSettleNotify)
  return false;
#undef DO_
}

void InBattleMechanicusSettleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InBattleMechanicusSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_success = 2;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_success(), output);
  }

  // repeated .proto.MultistageSettleWatcherInfo watcher_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->watcher_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->watcher_list(static_cast<int>(i)), output);
  }

  // uint32 difficulty_percentage = 6;
  if (this->difficulty_percentage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->difficulty_percentage(), output);
  }

  // uint32 total_token = 7;
  if (this->total_token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->total_token(), output);
  }

  // uint64 scene_time_ms = 11;
  if (this->scene_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->scene_time_ms(), output);
  }

  // uint32 real_token = 13;
  if (this->real_token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->real_token(), output);
  }

  // uint32 play_index = 14;
  if (this->play_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->play_index(), output);
  }

  // uint32 group_id = 15;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->group_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InBattleMechanicusSettleNotify)
}

::google::protobuf::uint8* InBattleMechanicusSettleNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InBattleMechanicusSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_success = 2;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_success(), target);
  }

  // repeated .proto.MultistageSettleWatcherInfo watcher_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->watcher_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->watcher_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 difficulty_percentage = 6;
  if (this->difficulty_percentage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->difficulty_percentage(), target);
  }

  // uint32 total_token = 7;
  if (this->total_token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->total_token(), target);
  }

  // uint64 scene_time_ms = 11;
  if (this->scene_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->scene_time_ms(), target);
  }

  // uint32 real_token = 13;
  if (this->real_token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->real_token(), target);
  }

  // uint32 play_index = 14;
  if (this->play_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->play_index(), target);
  }

  // uint32 group_id = 15;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->group_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InBattleMechanicusSettleNotify)
  return target;
}

size_t InBattleMechanicusSettleNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InBattleMechanicusSettleNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.MultistageSettleWatcherInfo watcher_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->watcher_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->watcher_list(static_cast<int>(i)));
    }
  }

  // bool is_success = 2;
  if (this->is_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 difficulty_percentage = 6;
  if (this->difficulty_percentage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->difficulty_percentage());
  }

  // uint32 total_token = 7;
  if (this->total_token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_token());
  }

  // uint32 real_token = 13;
  if (this->real_token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->real_token());
  }

  // uint64 scene_time_ms = 11;
  if (this->scene_time_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->scene_time_ms());
  }

  // uint32 play_index = 14;
  if (this->play_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_index());
  }

  // uint32 group_id = 15;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InBattleMechanicusSettleNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InBattleMechanicusSettleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const InBattleMechanicusSettleNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InBattleMechanicusSettleNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InBattleMechanicusSettleNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InBattleMechanicusSettleNotify)
    MergeFrom(*source);
  }
}

void InBattleMechanicusSettleNotify::MergeFrom(const InBattleMechanicusSettleNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InBattleMechanicusSettleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  watcher_list_.MergeFrom(from.watcher_list_);
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.difficulty_percentage() != 0) {
    set_difficulty_percentage(from.difficulty_percentage());
  }
  if (from.total_token() != 0) {
    set_total_token(from.total_token());
  }
  if (from.real_token() != 0) {
    set_real_token(from.real_token());
  }
  if (from.scene_time_ms() != 0) {
    set_scene_time_ms(from.scene_time_ms());
  }
  if (from.play_index() != 0) {
    set_play_index(from.play_index());
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
}

void InBattleMechanicusSettleNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InBattleMechanicusSettleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InBattleMechanicusSettleNotify::CopyFrom(const InBattleMechanicusSettleNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InBattleMechanicusSettleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InBattleMechanicusSettleNotify::IsInitialized() const {
  return true;
}

void InBattleMechanicusSettleNotify::Swap(InBattleMechanicusSettleNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InBattleMechanicusSettleNotify::InternalSwap(InBattleMechanicusSettleNotify* other) {
  using std::swap;
  watcher_list_.InternalSwap(&other->watcher_list_);
  swap(is_success_, other->is_success_);
  swap(difficulty_percentage_, other->difficulty_percentage_);
  swap(total_token_, other->total_token_);
  swap(real_token_, other->real_token_);
  swap(scene_time_ms_, other->scene_time_ms_);
  swap(play_index_, other->play_index_);
  swap(group_id_, other->group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InBattleMechanicusSettleNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InBattleMechanicusSettleNotify

// uint32 group_id = 15;
void InBattleMechanicusSettleNotify::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusSettleNotify::group_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleNotify.group_id)
  return group_id_;
}
void InBattleMechanicusSettleNotify::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleNotify.group_id)
}

// uint64 scene_time_ms = 11;
void InBattleMechanicusSettleNotify::clear_scene_time_ms() {
  scene_time_ms_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 InBattleMechanicusSettleNotify::scene_time_ms() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleNotify.scene_time_ms)
  return scene_time_ms_;
}
void InBattleMechanicusSettleNotify::set_scene_time_ms(::google::protobuf::uint64 value) {
  
  scene_time_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleNotify.scene_time_ms)
}

// uint32 difficulty_percentage = 6;
void InBattleMechanicusSettleNotify::clear_difficulty_percentage() {
  difficulty_percentage_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusSettleNotify::difficulty_percentage() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleNotify.difficulty_percentage)
  return difficulty_percentage_;
}
void InBattleMechanicusSettleNotify::set_difficulty_percentage(::google::protobuf::uint32 value) {
  
  difficulty_percentage_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleNotify.difficulty_percentage)
}

// uint32 total_token = 7;
void InBattleMechanicusSettleNotify::clear_total_token() {
  total_token_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusSettleNotify::total_token() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleNotify.total_token)
  return total_token_;
}
void InBattleMechanicusSettleNotify::set_total_token(::google::protobuf::uint32 value) {
  
  total_token_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleNotify.total_token)
}

// repeated .proto.MultistageSettleWatcherInfo watcher_list = 3;
int InBattleMechanicusSettleNotify::watcher_list_size() const {
  return watcher_list_.size();
}
void InBattleMechanicusSettleNotify::clear_watcher_list() {
  watcher_list_.Clear();
}
const ::proto::MultistageSettleWatcherInfo& InBattleMechanicusSettleNotify::watcher_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleNotify.watcher_list)
  return watcher_list_.Get(index);
}
::proto::MultistageSettleWatcherInfo* InBattleMechanicusSettleNotify::mutable_watcher_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.InBattleMechanicusSettleNotify.watcher_list)
  return watcher_list_.Mutable(index);
}
::proto::MultistageSettleWatcherInfo* InBattleMechanicusSettleNotify::add_watcher_list() {
  // @@protoc_insertion_point(field_add:proto.InBattleMechanicusSettleNotify.watcher_list)
  return watcher_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::MultistageSettleWatcherInfo >*
InBattleMechanicusSettleNotify::mutable_watcher_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleMechanicusSettleNotify.watcher_list)
  return &watcher_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::MultistageSettleWatcherInfo >&
InBattleMechanicusSettleNotify::watcher_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleMechanicusSettleNotify.watcher_list)
  return watcher_list_;
}

// uint32 real_token = 13;
void InBattleMechanicusSettleNotify::clear_real_token() {
  real_token_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusSettleNotify::real_token() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleNotify.real_token)
  return real_token_;
}
void InBattleMechanicusSettleNotify::set_real_token(::google::protobuf::uint32 value) {
  
  real_token_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleNotify.real_token)
}

// bool is_success = 2;
void InBattleMechanicusSettleNotify::clear_is_success() {
  is_success_ = false;
}
bool InBattleMechanicusSettleNotify::is_success() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleNotify.is_success)
  return is_success_;
}
void InBattleMechanicusSettleNotify::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleNotify.is_success)
}

// uint32 play_index = 14;
void InBattleMechanicusSettleNotify::clear_play_index() {
  play_index_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusSettleNotify::play_index() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleNotify.play_index)
  return play_index_;
}
void InBattleMechanicusSettleNotify::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleNotify.play_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InBattleMechanicusSettleInfo::kSceneTimeMsFieldNumber;
const int InBattleMechanicusSettleInfo::kTotalTokenFieldNumber;
const int InBattleMechanicusSettleInfo::kRealTokenFieldNumber;
const int InBattleMechanicusSettleInfo::kWatcherListFieldNumber;
const int InBattleMechanicusSettleInfo::kIsSuccessFieldNumber;
const int InBattleMechanicusSettleInfo::kPlayIndexFieldNumber;
const int InBattleMechanicusSettleInfo::kDifficultyPercentageFieldNumber;
const int InBattleMechanicusSettleInfo::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InBattleMechanicusSettleInfo::InBattleMechanicusSettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InBattleMechanicusSettleInfo)
}
InBattleMechanicusSettleInfo::InBattleMechanicusSettleInfo(const InBattleMechanicusSettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      watcher_list_(from.watcher_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&play_index_, &from.play_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&scene_time_ms_) -
    reinterpret_cast<char*>(&play_index_)) + sizeof(scene_time_ms_));
  // @@protoc_insertion_point(copy_constructor:proto.InBattleMechanicusSettleInfo)
}

void InBattleMechanicusSettleInfo::SharedCtor() {
  ::memset(&play_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_time_ms_) -
      reinterpret_cast<char*>(&play_index_)) + sizeof(scene_time_ms_));
  _cached_size_ = 0;
}

InBattleMechanicusSettleInfo::~InBattleMechanicusSettleInfo() {
  // @@protoc_insertion_point(destructor:proto.InBattleMechanicusSettleInfo)
  SharedDtor();
}

void InBattleMechanicusSettleInfo::SharedDtor() {
}

void InBattleMechanicusSettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InBattleMechanicusSettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InBattleMechanicusSettleInfo& InBattleMechanicusSettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

InBattleMechanicusSettleInfo* InBattleMechanicusSettleInfo::New(::google::protobuf::Arena* arena) const {
  InBattleMechanicusSettleInfo* n = new InBattleMechanicusSettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InBattleMechanicusSettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InBattleMechanicusSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  watcher_list_.Clear();
  ::memset(&play_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_time_ms_) -
      reinterpret_cast<char*>(&play_index_)) + sizeof(scene_time_ms_));
  _internal_metadata_.Clear();
}

bool InBattleMechanicusSettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InBattleMechanicusSettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 play_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_success = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.MultistageSettleWatcherInfo watcher_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_watcher_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 real_token = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &real_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 difficulty_percentage = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 group_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 scene_time_ms = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scene_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InBattleMechanicusSettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InBattleMechanicusSettleInfo)
  return false;
#undef DO_
}

void InBattleMechanicusSettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InBattleMechanicusSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_index = 3;
  if (this->play_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->play_index(), output);
  }

  // uint32 total_token = 4;
  if (this->total_token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_token(), output);
  }

  // bool is_success = 6;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_success(), output);
  }

  // repeated .proto.MultistageSettleWatcherInfo watcher_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->watcher_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->watcher_list(static_cast<int>(i)), output);
  }

  // uint32 real_token = 8;
  if (this->real_token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->real_token(), output);
  }

  // uint32 difficulty_percentage = 10;
  if (this->difficulty_percentage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->difficulty_percentage(), output);
  }

  // uint32 group_id = 13;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->group_id(), output);
  }

  // uint64 scene_time_ms = 15;
  if (this->scene_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->scene_time_ms(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InBattleMechanicusSettleInfo)
}

::google::protobuf::uint8* InBattleMechanicusSettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InBattleMechanicusSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_index = 3;
  if (this->play_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->play_index(), target);
  }

  // uint32 total_token = 4;
  if (this->total_token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_token(), target);
  }

  // bool is_success = 6;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_success(), target);
  }

  // repeated .proto.MultistageSettleWatcherInfo watcher_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->watcher_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->watcher_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 real_token = 8;
  if (this->real_token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->real_token(), target);
  }

  // uint32 difficulty_percentage = 10;
  if (this->difficulty_percentage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->difficulty_percentage(), target);
  }

  // uint32 group_id = 13;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->group_id(), target);
  }

  // uint64 scene_time_ms = 15;
  if (this->scene_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->scene_time_ms(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InBattleMechanicusSettleInfo)
  return target;
}

size_t InBattleMechanicusSettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InBattleMechanicusSettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.MultistageSettleWatcherInfo watcher_list = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->watcher_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->watcher_list(static_cast<int>(i)));
    }
  }

  // uint32 play_index = 3;
  if (this->play_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_index());
  }

  // uint32 total_token = 4;
  if (this->total_token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_token());
  }

  // bool is_success = 6;
  if (this->is_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 real_token = 8;
  if (this->real_token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->real_token());
  }

  // uint32 difficulty_percentage = 10;
  if (this->difficulty_percentage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->difficulty_percentage());
  }

  // uint32 group_id = 13;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  // uint64 scene_time_ms = 15;
  if (this->scene_time_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->scene_time_ms());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InBattleMechanicusSettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InBattleMechanicusSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InBattleMechanicusSettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InBattleMechanicusSettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InBattleMechanicusSettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InBattleMechanicusSettleInfo)
    MergeFrom(*source);
  }
}

void InBattleMechanicusSettleInfo::MergeFrom(const InBattleMechanicusSettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InBattleMechanicusSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  watcher_list_.MergeFrom(from.watcher_list_);
  if (from.play_index() != 0) {
    set_play_index(from.play_index());
  }
  if (from.total_token() != 0) {
    set_total_token(from.total_token());
  }
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.real_token() != 0) {
    set_real_token(from.real_token());
  }
  if (from.difficulty_percentage() != 0) {
    set_difficulty_percentage(from.difficulty_percentage());
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.scene_time_ms() != 0) {
    set_scene_time_ms(from.scene_time_ms());
  }
}

void InBattleMechanicusSettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InBattleMechanicusSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InBattleMechanicusSettleInfo::CopyFrom(const InBattleMechanicusSettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InBattleMechanicusSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InBattleMechanicusSettleInfo::IsInitialized() const {
  return true;
}

void InBattleMechanicusSettleInfo::Swap(InBattleMechanicusSettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InBattleMechanicusSettleInfo::InternalSwap(InBattleMechanicusSettleInfo* other) {
  using std::swap;
  watcher_list_.InternalSwap(&other->watcher_list_);
  swap(play_index_, other->play_index_);
  swap(total_token_, other->total_token_);
  swap(is_success_, other->is_success_);
  swap(real_token_, other->real_token_);
  swap(difficulty_percentage_, other->difficulty_percentage_);
  swap(group_id_, other->group_id_);
  swap(scene_time_ms_, other->scene_time_ms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InBattleMechanicusSettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InBattleMechanicusSettleInfo

// uint64 scene_time_ms = 15;
void InBattleMechanicusSettleInfo::clear_scene_time_ms() {
  scene_time_ms_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 InBattleMechanicusSettleInfo::scene_time_ms() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleInfo.scene_time_ms)
  return scene_time_ms_;
}
void InBattleMechanicusSettleInfo::set_scene_time_ms(::google::protobuf::uint64 value) {
  
  scene_time_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleInfo.scene_time_ms)
}

// uint32 total_token = 4;
void InBattleMechanicusSettleInfo::clear_total_token() {
  total_token_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusSettleInfo::total_token() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleInfo.total_token)
  return total_token_;
}
void InBattleMechanicusSettleInfo::set_total_token(::google::protobuf::uint32 value) {
  
  total_token_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleInfo.total_token)
}

// uint32 real_token = 8;
void InBattleMechanicusSettleInfo::clear_real_token() {
  real_token_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusSettleInfo::real_token() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleInfo.real_token)
  return real_token_;
}
void InBattleMechanicusSettleInfo::set_real_token(::google::protobuf::uint32 value) {
  
  real_token_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleInfo.real_token)
}

// repeated .proto.MultistageSettleWatcherInfo watcher_list = 7;
int InBattleMechanicusSettleInfo::watcher_list_size() const {
  return watcher_list_.size();
}
void InBattleMechanicusSettleInfo::clear_watcher_list() {
  watcher_list_.Clear();
}
const ::proto::MultistageSettleWatcherInfo& InBattleMechanicusSettleInfo::watcher_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleInfo.watcher_list)
  return watcher_list_.Get(index);
}
::proto::MultistageSettleWatcherInfo* InBattleMechanicusSettleInfo::mutable_watcher_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.InBattleMechanicusSettleInfo.watcher_list)
  return watcher_list_.Mutable(index);
}
::proto::MultistageSettleWatcherInfo* InBattleMechanicusSettleInfo::add_watcher_list() {
  // @@protoc_insertion_point(field_add:proto.InBattleMechanicusSettleInfo.watcher_list)
  return watcher_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::MultistageSettleWatcherInfo >*
InBattleMechanicusSettleInfo::mutable_watcher_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleMechanicusSettleInfo.watcher_list)
  return &watcher_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::MultistageSettleWatcherInfo >&
InBattleMechanicusSettleInfo::watcher_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleMechanicusSettleInfo.watcher_list)
  return watcher_list_;
}

// bool is_success = 6;
void InBattleMechanicusSettleInfo::clear_is_success() {
  is_success_ = false;
}
bool InBattleMechanicusSettleInfo::is_success() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleInfo.is_success)
  return is_success_;
}
void InBattleMechanicusSettleInfo::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleInfo.is_success)
}

// uint32 play_index = 3;
void InBattleMechanicusSettleInfo::clear_play_index() {
  play_index_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusSettleInfo::play_index() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleInfo.play_index)
  return play_index_;
}
void InBattleMechanicusSettleInfo::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleInfo.play_index)
}

// uint32 difficulty_percentage = 10;
void InBattleMechanicusSettleInfo::clear_difficulty_percentage() {
  difficulty_percentage_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusSettleInfo::difficulty_percentage() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleInfo.difficulty_percentage)
  return difficulty_percentage_;
}
void InBattleMechanicusSettleInfo::set_difficulty_percentage(::google::protobuf::uint32 value) {
  
  difficulty_percentage_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleInfo.difficulty_percentage)
}

// uint32 group_id = 13;
void InBattleMechanicusSettleInfo::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 InBattleMechanicusSettleInfo::group_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleInfo.group_id)
  return group_id_;
}
void InBattleMechanicusSettleInfo::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleInfo.group_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultistagePlaySettleNotify::kPlayIndexFieldNumber;
const int MultistagePlaySettleNotify::kGroupIdFieldNumber;
const int MultistagePlaySettleNotify::kMechanicusSettleInfoFieldNumber;
const int MultistagePlaySettleNotify::kChessSettleInfoFieldNumber;
const int MultistagePlaySettleNotify::kIrodoriChessSettleInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultistagePlaySettleNotify::MultistagePlaySettleNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MultistagePlaySettleNotify)
}
MultistagePlaySettleNotify::MultistagePlaySettleNotify(const MultistagePlaySettleNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&group_id_, &from.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_index_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(play_index_));
  clear_has_detail();
  switch (from.detail_case()) {
    case kMechanicusSettleInfo: {
      mutable_mechanicus_settle_info()->::proto::InBattleMechanicusSettleInfo::MergeFrom(from.mechanicus_settle_info());
      break;
    }
    case kChessSettleInfo: {
      mutable_chess_settle_info()->::proto::InBattleChessSettleInfo::MergeFrom(from.chess_settle_info());
      break;
    }
    case kIrodoriChessSettleInfo: {
      mutable_irodori_chess_settle_info()->::proto::InBattleIrodoriChessSettleInfo::MergeFrom(from.irodori_chess_settle_info());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.MultistagePlaySettleNotify)
}

void MultistagePlaySettleNotify::SharedCtor() {
  ::memset(&group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_index_) -
      reinterpret_cast<char*>(&group_id_)) + sizeof(play_index_));
  clear_has_detail();
  _cached_size_ = 0;
}

MultistagePlaySettleNotify::~MultistagePlaySettleNotify() {
  // @@protoc_insertion_point(destructor:proto.MultistagePlaySettleNotify)
  SharedDtor();
}

void MultistagePlaySettleNotify::SharedDtor() {
  if (has_detail()) {
    clear_detail();
  }
}

void MultistagePlaySettleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultistagePlaySettleNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultistagePlaySettleNotify& MultistagePlaySettleNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

MultistagePlaySettleNotify* MultistagePlaySettleNotify::New(::google::protobuf::Arena* arena) const {
  MultistagePlaySettleNotify* n = new MultistagePlaySettleNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultistagePlaySettleNotify::clear_detail() {
// @@protoc_insertion_point(one_of_clear_start:proto.MultistagePlaySettleNotify)
  switch (detail_case()) {
    case kMechanicusSettleInfo: {
      delete detail_.mechanicus_settle_info_;
      break;
    }
    case kChessSettleInfo: {
      delete detail_.chess_settle_info_;
      break;
    }
    case kIrodoriChessSettleInfo: {
      delete detail_.irodori_chess_settle_info_;
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DETAIL_NOT_SET;
}


void MultistagePlaySettleNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MultistagePlaySettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_index_) -
      reinterpret_cast<char*>(&group_id_)) + sizeof(play_index_));
  clear_detail();
  _internal_metadata_.Clear();
}

bool MultistagePlaySettleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MultistagePlaySettleNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 group_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_index = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.InBattleIrodoriChessSettleInfo irodori_chess_settle_info = 612;
      case 612: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 4898 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_irodori_chess_settle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.InBattleChessSettleInfo chess_settle_info = 1283;
      case 1283: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 10266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chess_settle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.InBattleMechanicusSettleInfo mechanicus_settle_info = 1402;
      case 1402: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 11218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mechanicus_settle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MultistagePlaySettleNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MultistagePlaySettleNotify)
  return false;
#undef DO_
}

void MultistagePlaySettleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MultistagePlaySettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_id = 4;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_id(), output);
  }

  // uint32 play_index = 14;
  if (this->play_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->play_index(), output);
  }

  // .proto.InBattleIrodoriChessSettleInfo irodori_chess_settle_info = 612;
  if (has_irodori_chess_settle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      612, *detail_.irodori_chess_settle_info_, output);
  }

  // .proto.InBattleChessSettleInfo chess_settle_info = 1283;
  if (has_chess_settle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1283, *detail_.chess_settle_info_, output);
  }

  // .proto.InBattleMechanicusSettleInfo mechanicus_settle_info = 1402;
  if (has_mechanicus_settle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1402, *detail_.mechanicus_settle_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MultistagePlaySettleNotify)
}

::google::protobuf::uint8* MultistagePlaySettleNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MultistagePlaySettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_id = 4;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->group_id(), target);
  }

  // uint32 play_index = 14;
  if (this->play_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->play_index(), target);
  }

  // .proto.InBattleIrodoriChessSettleInfo irodori_chess_settle_info = 612;
  if (has_irodori_chess_settle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        612, *detail_.irodori_chess_settle_info_, deterministic, target);
  }

  // .proto.InBattleChessSettleInfo chess_settle_info = 1283;
  if (has_chess_settle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1283, *detail_.chess_settle_info_, deterministic, target);
  }

  // .proto.InBattleMechanicusSettleInfo mechanicus_settle_info = 1402;
  if (has_mechanicus_settle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1402, *detail_.mechanicus_settle_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MultistagePlaySettleNotify)
  return target;
}

size_t MultistagePlaySettleNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MultistagePlaySettleNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 group_id = 4;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  // uint32 play_index = 14;
  if (this->play_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_index());
  }

  switch (detail_case()) {
    // .proto.InBattleMechanicusSettleInfo mechanicus_settle_info = 1402;
    case kMechanicusSettleInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.mechanicus_settle_info_);
      break;
    }
    // .proto.InBattleChessSettleInfo chess_settle_info = 1283;
    case kChessSettleInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.chess_settle_info_);
      break;
    }
    // .proto.InBattleIrodoriChessSettleInfo irodori_chess_settle_info = 612;
    case kIrodoriChessSettleInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.irodori_chess_settle_info_);
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultistagePlaySettleNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MultistagePlaySettleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const MultistagePlaySettleNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultistagePlaySettleNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MultistagePlaySettleNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MultistagePlaySettleNotify)
    MergeFrom(*source);
  }
}

void MultistagePlaySettleNotify::MergeFrom(const MultistagePlaySettleNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MultistagePlaySettleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.play_index() != 0) {
    set_play_index(from.play_index());
  }
  switch (from.detail_case()) {
    case kMechanicusSettleInfo: {
      mutable_mechanicus_settle_info()->::proto::InBattleMechanicusSettleInfo::MergeFrom(from.mechanicus_settle_info());
      break;
    }
    case kChessSettleInfo: {
      mutable_chess_settle_info()->::proto::InBattleChessSettleInfo::MergeFrom(from.chess_settle_info());
      break;
    }
    case kIrodoriChessSettleInfo: {
      mutable_irodori_chess_settle_info()->::proto::InBattleIrodoriChessSettleInfo::MergeFrom(from.irodori_chess_settle_info());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
}

void MultistagePlaySettleNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MultistagePlaySettleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultistagePlaySettleNotify::CopyFrom(const MultistagePlaySettleNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MultistagePlaySettleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultistagePlaySettleNotify::IsInitialized() const {
  return true;
}

void MultistagePlaySettleNotify::Swap(MultistagePlaySettleNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultistagePlaySettleNotify::InternalSwap(MultistagePlaySettleNotify* other) {
  using std::swap;
  swap(group_id_, other->group_id_);
  swap(play_index_, other->play_index_);
  swap(detail_, other->detail_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultistagePlaySettleNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultistagePlaySettleNotify

// uint32 play_index = 14;
void MultistagePlaySettleNotify::clear_play_index() {
  play_index_ = 0u;
}
::google::protobuf::uint32 MultistagePlaySettleNotify::play_index() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlaySettleNotify.play_index)
  return play_index_;
}
void MultistagePlaySettleNotify::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlaySettleNotify.play_index)
}

// uint32 group_id = 4;
void MultistagePlaySettleNotify::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 MultistagePlaySettleNotify::group_id() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlaySettleNotify.group_id)
  return group_id_;
}
void MultistagePlaySettleNotify::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlaySettleNotify.group_id)
}

// .proto.InBattleMechanicusSettleInfo mechanicus_settle_info = 1402;
bool MultistagePlaySettleNotify::has_mechanicus_settle_info() const {
  return detail_case() == kMechanicusSettleInfo;
}
void MultistagePlaySettleNotify::set_has_mechanicus_settle_info() {
  _oneof_case_[0] = kMechanicusSettleInfo;
}
void MultistagePlaySettleNotify::clear_mechanicus_settle_info() {
  if (has_mechanicus_settle_info()) {
    delete detail_.mechanicus_settle_info_;
    clear_has_detail();
  }
}
 const ::proto::InBattleMechanicusSettleInfo& MultistagePlaySettleNotify::mechanicus_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlaySettleNotify.mechanicus_settle_info)
  return has_mechanicus_settle_info()
      ? *detail_.mechanicus_settle_info_
      : ::proto::InBattleMechanicusSettleInfo::default_instance();
}
::proto::InBattleMechanicusSettleInfo* MultistagePlaySettleNotify::mutable_mechanicus_settle_info() {
  if (!has_mechanicus_settle_info()) {
    clear_detail();
    set_has_mechanicus_settle_info();
    detail_.mechanicus_settle_info_ = new ::proto::InBattleMechanicusSettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlaySettleNotify.mechanicus_settle_info)
  return detail_.mechanicus_settle_info_;
}
::proto::InBattleMechanicusSettleInfo* MultistagePlaySettleNotify::release_mechanicus_settle_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlaySettleNotify.mechanicus_settle_info)
  if (has_mechanicus_settle_info()) {
    clear_has_detail();
    ::proto::InBattleMechanicusSettleInfo* temp = detail_.mechanicus_settle_info_;
    detail_.mechanicus_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MultistagePlaySettleNotify::set_allocated_mechanicus_settle_info(::proto::InBattleMechanicusSettleInfo* mechanicus_settle_info) {
  clear_detail();
  if (mechanicus_settle_info) {
    set_has_mechanicus_settle_info();
    detail_.mechanicus_settle_info_ = mechanicus_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlaySettleNotify.mechanicus_settle_info)
}

// .proto.InBattleChessSettleInfo chess_settle_info = 1283;
bool MultistagePlaySettleNotify::has_chess_settle_info() const {
  return detail_case() == kChessSettleInfo;
}
void MultistagePlaySettleNotify::set_has_chess_settle_info() {
  _oneof_case_[0] = kChessSettleInfo;
}
void MultistagePlaySettleNotify::clear_chess_settle_info() {
  if (has_chess_settle_info()) {
    delete detail_.chess_settle_info_;
    clear_has_detail();
  }
}
 const ::proto::InBattleChessSettleInfo& MultistagePlaySettleNotify::chess_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlaySettleNotify.chess_settle_info)
  return has_chess_settle_info()
      ? *detail_.chess_settle_info_
      : ::proto::InBattleChessSettleInfo::default_instance();
}
::proto::InBattleChessSettleInfo* MultistagePlaySettleNotify::mutable_chess_settle_info() {
  if (!has_chess_settle_info()) {
    clear_detail();
    set_has_chess_settle_info();
    detail_.chess_settle_info_ = new ::proto::InBattleChessSettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlaySettleNotify.chess_settle_info)
  return detail_.chess_settle_info_;
}
::proto::InBattleChessSettleInfo* MultistagePlaySettleNotify::release_chess_settle_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlaySettleNotify.chess_settle_info)
  if (has_chess_settle_info()) {
    clear_has_detail();
    ::proto::InBattleChessSettleInfo* temp = detail_.chess_settle_info_;
    detail_.chess_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MultistagePlaySettleNotify::set_allocated_chess_settle_info(::proto::InBattleChessSettleInfo* chess_settle_info) {
  clear_detail();
  if (chess_settle_info) {
    set_has_chess_settle_info();
    detail_.chess_settle_info_ = chess_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlaySettleNotify.chess_settle_info)
}

// .proto.InBattleIrodoriChessSettleInfo irodori_chess_settle_info = 612;
bool MultistagePlaySettleNotify::has_irodori_chess_settle_info() const {
  return detail_case() == kIrodoriChessSettleInfo;
}
void MultistagePlaySettleNotify::set_has_irodori_chess_settle_info() {
  _oneof_case_[0] = kIrodoriChessSettleInfo;
}
void MultistagePlaySettleNotify::clear_irodori_chess_settle_info() {
  if (has_irodori_chess_settle_info()) {
    delete detail_.irodori_chess_settle_info_;
    clear_has_detail();
  }
}
 const ::proto::InBattleIrodoriChessSettleInfo& MultistagePlaySettleNotify::irodori_chess_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlaySettleNotify.irodori_chess_settle_info)
  return has_irodori_chess_settle_info()
      ? *detail_.irodori_chess_settle_info_
      : ::proto::InBattleIrodoriChessSettleInfo::default_instance();
}
::proto::InBattleIrodoriChessSettleInfo* MultistagePlaySettleNotify::mutable_irodori_chess_settle_info() {
  if (!has_irodori_chess_settle_info()) {
    clear_detail();
    set_has_irodori_chess_settle_info();
    detail_.irodori_chess_settle_info_ = new ::proto::InBattleIrodoriChessSettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlaySettleNotify.irodori_chess_settle_info)
  return detail_.irodori_chess_settle_info_;
}
::proto::InBattleIrodoriChessSettleInfo* MultistagePlaySettleNotify::release_irodori_chess_settle_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlaySettleNotify.irodori_chess_settle_info)
  if (has_irodori_chess_settle_info()) {
    clear_has_detail();
    ::proto::InBattleIrodoriChessSettleInfo* temp = detail_.irodori_chess_settle_info_;
    detail_.irodori_chess_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MultistagePlaySettleNotify::set_allocated_irodori_chess_settle_info(::proto::InBattleIrodoriChessSettleInfo* irodori_chess_settle_info) {
  clear_detail();
  if (irodori_chess_settle_info) {
    set_has_irodori_chess_settle_info();
    detail_.irodori_chess_settle_info_ = irodori_chess_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlaySettleNotify.irodori_chess_settle_info)
}

bool MultistagePlaySettleNotify::has_detail() const {
  return detail_case() != DETAIL_NOT_SET;
}
void MultistagePlaySettleNotify::clear_has_detail() {
  _oneof_case_[0] = DETAIL_NOT_SET;
}
MultistagePlaySettleNotify::DetailCase MultistagePlaySettleNotify::detail_case() const {
  return MultistagePlaySettleNotify::DetailCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultistagePlayStageEndNotify::kGroupIdFieldNumber;
const int MultistagePlayStageEndNotify::kPlayIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultistagePlayStageEndNotify::MultistagePlayStageEndNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MultistagePlayStageEndNotify)
}
MultistagePlayStageEndNotify::MultistagePlayStageEndNotify(const MultistagePlayStageEndNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&play_index_, &from.play_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&play_index_)) + sizeof(group_id_));
  // @@protoc_insertion_point(copy_constructor:proto.MultistagePlayStageEndNotify)
}

void MultistagePlayStageEndNotify::SharedCtor() {
  ::memset(&play_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&play_index_)) + sizeof(group_id_));
  _cached_size_ = 0;
}

MultistagePlayStageEndNotify::~MultistagePlayStageEndNotify() {
  // @@protoc_insertion_point(destructor:proto.MultistagePlayStageEndNotify)
  SharedDtor();
}

void MultistagePlayStageEndNotify::SharedDtor() {
}

void MultistagePlayStageEndNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultistagePlayStageEndNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultistagePlayStageEndNotify& MultistagePlayStageEndNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

MultistagePlayStageEndNotify* MultistagePlayStageEndNotify::New(::google::protobuf::Arena* arena) const {
  MultistagePlayStageEndNotify* n = new MultistagePlayStageEndNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultistagePlayStageEndNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MultistagePlayStageEndNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&play_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&play_index_)) + sizeof(group_id_));
  _internal_metadata_.Clear();
}

bool MultistagePlayStageEndNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MultistagePlayStageEndNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 play_index = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 group_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MultistagePlayStageEndNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MultistagePlayStageEndNotify)
  return false;
#undef DO_
}

void MultistagePlayStageEndNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MultistagePlayStageEndNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_index = 9;
  if (this->play_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->play_index(), output);
  }

  // uint32 group_id = 15;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->group_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MultistagePlayStageEndNotify)
}

::google::protobuf::uint8* MultistagePlayStageEndNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MultistagePlayStageEndNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_index = 9;
  if (this->play_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->play_index(), target);
  }

  // uint32 group_id = 15;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->group_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MultistagePlayStageEndNotify)
  return target;
}

size_t MultistagePlayStageEndNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MultistagePlayStageEndNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 play_index = 9;
  if (this->play_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_index());
  }

  // uint32 group_id = 15;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultistagePlayStageEndNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MultistagePlayStageEndNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const MultistagePlayStageEndNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultistagePlayStageEndNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MultistagePlayStageEndNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MultistagePlayStageEndNotify)
    MergeFrom(*source);
  }
}

void MultistagePlayStageEndNotify::MergeFrom(const MultistagePlayStageEndNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MultistagePlayStageEndNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.play_index() != 0) {
    set_play_index(from.play_index());
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
}

void MultistagePlayStageEndNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MultistagePlayStageEndNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultistagePlayStageEndNotify::CopyFrom(const MultistagePlayStageEndNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MultistagePlayStageEndNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultistagePlayStageEndNotify::IsInitialized() const {
  return true;
}

void MultistagePlayStageEndNotify::Swap(MultistagePlayStageEndNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultistagePlayStageEndNotify::InternalSwap(MultistagePlayStageEndNotify* other) {
  using std::swap;
  swap(play_index_, other->play_index_);
  swap(group_id_, other->group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultistagePlayStageEndNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultistagePlayStageEndNotify

// uint32 group_id = 15;
void MultistagePlayStageEndNotify::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 MultistagePlayStageEndNotify::group_id() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayStageEndNotify.group_id)
  return group_id_;
}
void MultistagePlayStageEndNotify::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayStageEndNotify.group_id)
}

// uint32 play_index = 9;
void MultistagePlayStageEndNotify::clear_play_index() {
  play_index_ = 0u;
}
::google::protobuf::uint32 MultistagePlayStageEndNotify::play_index() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayStageEndNotify.play_index)
  return play_index_;
}
void MultistagePlayStageEndNotify::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayStageEndNotify.play_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultistagePlayEndNotify::kGroupIdFieldNumber;
const int MultistagePlayEndNotify::kPlayIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultistagePlayEndNotify::MultistagePlayEndNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MultistagePlayEndNotify)
}
MultistagePlayEndNotify::MultistagePlayEndNotify(const MultistagePlayEndNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&group_id_, &from.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_index_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(play_index_));
  // @@protoc_insertion_point(copy_constructor:proto.MultistagePlayEndNotify)
}

void MultistagePlayEndNotify::SharedCtor() {
  ::memset(&group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_index_) -
      reinterpret_cast<char*>(&group_id_)) + sizeof(play_index_));
  _cached_size_ = 0;
}

MultistagePlayEndNotify::~MultistagePlayEndNotify() {
  // @@protoc_insertion_point(destructor:proto.MultistagePlayEndNotify)
  SharedDtor();
}

void MultistagePlayEndNotify::SharedDtor() {
}

void MultistagePlayEndNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultistagePlayEndNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultistagePlayEndNotify& MultistagePlayEndNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

MultistagePlayEndNotify* MultistagePlayEndNotify::New(::google::protobuf::Arena* arena) const {
  MultistagePlayEndNotify* n = new MultistagePlayEndNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultistagePlayEndNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MultistagePlayEndNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_index_) -
      reinterpret_cast<char*>(&group_id_)) + sizeof(play_index_));
  _internal_metadata_.Clear();
}

bool MultistagePlayEndNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MultistagePlayEndNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 group_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_index = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MultistagePlayEndNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MultistagePlayEndNotify)
  return false;
#undef DO_
}

void MultistagePlayEndNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MultistagePlayEndNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_id = 5;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->group_id(), output);
  }

  // uint32 play_index = 13;
  if (this->play_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->play_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MultistagePlayEndNotify)
}

::google::protobuf::uint8* MultistagePlayEndNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MultistagePlayEndNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_id = 5;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->group_id(), target);
  }

  // uint32 play_index = 13;
  if (this->play_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->play_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MultistagePlayEndNotify)
  return target;
}

size_t MultistagePlayEndNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MultistagePlayEndNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 group_id = 5;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  // uint32 play_index = 13;
  if (this->play_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultistagePlayEndNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MultistagePlayEndNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const MultistagePlayEndNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultistagePlayEndNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MultistagePlayEndNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MultistagePlayEndNotify)
    MergeFrom(*source);
  }
}

void MultistagePlayEndNotify::MergeFrom(const MultistagePlayEndNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MultistagePlayEndNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.play_index() != 0) {
    set_play_index(from.play_index());
  }
}

void MultistagePlayEndNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MultistagePlayEndNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultistagePlayEndNotify::CopyFrom(const MultistagePlayEndNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MultistagePlayEndNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultistagePlayEndNotify::IsInitialized() const {
  return true;
}

void MultistagePlayEndNotify::Swap(MultistagePlayEndNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultistagePlayEndNotify::InternalSwap(MultistagePlayEndNotify* other) {
  using std::swap;
  swap(group_id_, other->group_id_);
  swap(play_index_, other->play_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultistagePlayEndNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultistagePlayEndNotify

// uint32 group_id = 5;
void MultistagePlayEndNotify::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 MultistagePlayEndNotify::group_id() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayEndNotify.group_id)
  return group_id_;
}
void MultistagePlayEndNotify::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayEndNotify.group_id)
}

// uint32 play_index = 13;
void MultistagePlayEndNotify::clear_play_index() {
  play_index_ = 0u;
}
::google::protobuf::uint32 MultistagePlayEndNotify::play_index() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayEndNotify.play_index)
  return play_index_;
}
void MultistagePlayEndNotify::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayEndNotify.play_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FleurFairBuffEnergyNotify::kEnergyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FleurFairBuffEnergyNotify::FleurFairBuffEnergyNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FleurFairBuffEnergyNotify)
}
FleurFairBuffEnergyNotify::FleurFairBuffEnergyNotify(const FleurFairBuffEnergyNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  energy_ = from.energy_;
  // @@protoc_insertion_point(copy_constructor:proto.FleurFairBuffEnergyNotify)
}

void FleurFairBuffEnergyNotify::SharedCtor() {
  energy_ = 0u;
  _cached_size_ = 0;
}

FleurFairBuffEnergyNotify::~FleurFairBuffEnergyNotify() {
  // @@protoc_insertion_point(destructor:proto.FleurFairBuffEnergyNotify)
  SharedDtor();
}

void FleurFairBuffEnergyNotify::SharedDtor() {
}

void FleurFairBuffEnergyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FleurFairBuffEnergyNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FleurFairBuffEnergyNotify& FleurFairBuffEnergyNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

FleurFairBuffEnergyNotify* FleurFairBuffEnergyNotify::New(::google::protobuf::Arena* arena) const {
  FleurFairBuffEnergyNotify* n = new FleurFairBuffEnergyNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FleurFairBuffEnergyNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FleurFairBuffEnergyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  energy_ = 0u;
  _internal_metadata_.Clear();
}

bool FleurFairBuffEnergyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FleurFairBuffEnergyNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 energy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &energy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FleurFairBuffEnergyNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FleurFairBuffEnergyNotify)
  return false;
#undef DO_
}

void FleurFairBuffEnergyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FleurFairBuffEnergyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 energy = 4;
  if (this->energy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->energy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.FleurFairBuffEnergyNotify)
}

::google::protobuf::uint8* FleurFairBuffEnergyNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.FleurFairBuffEnergyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 energy = 4;
  if (this->energy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->energy(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FleurFairBuffEnergyNotify)
  return target;
}

size_t FleurFairBuffEnergyNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FleurFairBuffEnergyNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 energy = 4;
  if (this->energy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->energy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FleurFairBuffEnergyNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FleurFairBuffEnergyNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const FleurFairBuffEnergyNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FleurFairBuffEnergyNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FleurFairBuffEnergyNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FleurFairBuffEnergyNotify)
    MergeFrom(*source);
  }
}

void FleurFairBuffEnergyNotify::MergeFrom(const FleurFairBuffEnergyNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FleurFairBuffEnergyNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.energy() != 0) {
    set_energy(from.energy());
  }
}

void FleurFairBuffEnergyNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FleurFairBuffEnergyNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FleurFairBuffEnergyNotify::CopyFrom(const FleurFairBuffEnergyNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FleurFairBuffEnergyNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FleurFairBuffEnergyNotify::IsInitialized() const {
  return true;
}

void FleurFairBuffEnergyNotify::Swap(FleurFairBuffEnergyNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FleurFairBuffEnergyNotify::InternalSwap(FleurFairBuffEnergyNotify* other) {
  using std::swap;
  swap(energy_, other->energy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FleurFairBuffEnergyNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FleurFairBuffEnergyNotify

// uint32 energy = 4;
void FleurFairBuffEnergyNotify::clear_energy() {
  energy_ = 0u;
}
::google::protobuf::uint32 FleurFairBuffEnergyNotify::energy() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairBuffEnergyNotify.energy)
  return energy_;
}
void FleurFairBuffEnergyNotify::set_energy(::google::protobuf::uint32 value) {
  
  energy_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairBuffEnergyNotify.energy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

FleurFairGallerySettleInfo::FleurFairGallerySettleInfo_EnergyStatMapEntry::FleurFairGallerySettleInfo_EnergyStatMapEntry() {}
FleurFairGallerySettleInfo::FleurFairGallerySettleInfo_EnergyStatMapEntry::FleurFairGallerySettleInfo_EnergyStatMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata FleurFairGallerySettleInfo::FleurFairGallerySettleInfo_EnergyStatMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[34];
}
void FleurFairGallerySettleInfo::FleurFairGallerySettleInfo_EnergyStatMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void FleurFairGallerySettleInfo::FleurFairGallerySettleInfo_EnergyStatMapEntry::MergeFrom(const FleurFairGallerySettleInfo_EnergyStatMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FleurFairGallerySettleInfo::kEnergyFieldNumber;
const int FleurFairGallerySettleInfo::kGalleryStageIndexFieldNumber;
const int FleurFairGallerySettleInfo::kEnergyStatMapFieldNumber;
const int FleurFairGallerySettleInfo::kGalleryStageCountFieldNumber;
const int FleurFairGallerySettleInfo::kIsSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FleurFairGallerySettleInfo::FleurFairGallerySettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FleurFairGallerySettleInfo)
}
FleurFairGallerySettleInfo::FleurFairGallerySettleInfo(const FleurFairGallerySettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  energy_stat_map_.MergeFrom(from.energy_stat_map_);
  ::memcpy(&is_success_, &from.is_success_,
    static_cast<size_t>(reinterpret_cast<char*>(&gallery_stage_index_) -
    reinterpret_cast<char*>(&is_success_)) + sizeof(gallery_stage_index_));
  // @@protoc_insertion_point(copy_constructor:proto.FleurFairGallerySettleInfo)
}

void FleurFairGallerySettleInfo::SharedCtor() {
  ::memset(&is_success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gallery_stage_index_) -
      reinterpret_cast<char*>(&is_success_)) + sizeof(gallery_stage_index_));
  _cached_size_ = 0;
}

FleurFairGallerySettleInfo::~FleurFairGallerySettleInfo() {
  // @@protoc_insertion_point(destructor:proto.FleurFairGallerySettleInfo)
  SharedDtor();
}

void FleurFairGallerySettleInfo::SharedDtor() {
}

void FleurFairGallerySettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FleurFairGallerySettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FleurFairGallerySettleInfo& FleurFairGallerySettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

FleurFairGallerySettleInfo* FleurFairGallerySettleInfo::New(::google::protobuf::Arena* arena) const {
  FleurFairGallerySettleInfo* n = new FleurFairGallerySettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FleurFairGallerySettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FleurFairGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  energy_stat_map_.Clear();
  ::memset(&is_success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gallery_stage_index_) -
      reinterpret_cast<char*>(&is_success_)) + sizeof(gallery_stage_index_));
  _internal_metadata_.Clear();
}

bool FleurFairGallerySettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FleurFairGallerySettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 energy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &energy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, int32> energy_stat_map = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          FleurFairGallerySettleInfo_EnergyStatMapEntry::Parser< ::google::protobuf::internal::MapField<
              FleurFairGallerySettleInfo_EnergyStatMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int32 > > parser(&energy_stat_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gallery_stage_count = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_stage_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gallery_stage_index = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_stage_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FleurFairGallerySettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FleurFairGallerySettleInfo)
  return false;
#undef DO_
}

void FleurFairGallerySettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FleurFairGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_success = 1;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_success(), output);
  }

  // uint32 energy = 2;
  if (this->energy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->energy(), output);
  }

  // map<uint32, int32> energy_stat_map = 6;
  if (!this->energy_stat_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->energy_stat_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->energy_stat_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int32 >::const_iterator
          it = this->energy_stat_map().begin();
          it != this->energy_stat_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<FleurFairGallerySettleInfo_EnergyStatMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(energy_stat_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<FleurFairGallerySettleInfo_EnergyStatMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int32 >::const_iterator
          it = this->energy_stat_map().begin();
          it != this->energy_stat_map().end(); ++it) {
        entry.reset(energy_stat_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
      }
    }
  }

  // uint32 gallery_stage_count = 9;
  if (this->gallery_stage_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->gallery_stage_count(), output);
  }

  // uint32 gallery_stage_index = 11;
  if (this->gallery_stage_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->gallery_stage_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.FleurFairGallerySettleInfo)
}

::google::protobuf::uint8* FleurFairGallerySettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.FleurFairGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_success = 1;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_success(), target);
  }

  // uint32 energy = 2;
  if (this->energy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->energy(), target);
  }

  // map<uint32, int32> energy_stat_map = 6;
  if (!this->energy_stat_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->energy_stat_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->energy_stat_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int32 >::const_iterator
          it = this->energy_stat_map().begin();
          it != this->energy_stat_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<FleurFairGallerySettleInfo_EnergyStatMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(energy_stat_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<FleurFairGallerySettleInfo_EnergyStatMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int32 >::const_iterator
          it = this->energy_stat_map().begin();
          it != this->energy_stat_map().end(); ++it) {
        entry.reset(energy_stat_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
      }
    }
  }

  // uint32 gallery_stage_count = 9;
  if (this->gallery_stage_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->gallery_stage_count(), target);
  }

  // uint32 gallery_stage_index = 11;
  if (this->gallery_stage_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->gallery_stage_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FleurFairGallerySettleInfo)
  return target;
}

size_t FleurFairGallerySettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FleurFairGallerySettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, int32> energy_stat_map = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->energy_stat_map_size());
  {
    ::google::protobuf::scoped_ptr<FleurFairGallerySettleInfo_EnergyStatMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int32 >::const_iterator
        it = this->energy_stat_map().begin();
        it != this->energy_stat_map().end(); ++it) {
      entry.reset(energy_stat_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // bool is_success = 1;
  if (this->is_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 energy = 2;
  if (this->energy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->energy());
  }

  // uint32 gallery_stage_count = 9;
  if (this->gallery_stage_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_stage_count());
  }

  // uint32 gallery_stage_index = 11;
  if (this->gallery_stage_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_stage_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FleurFairGallerySettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FleurFairGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FleurFairGallerySettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FleurFairGallerySettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FleurFairGallerySettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FleurFairGallerySettleInfo)
    MergeFrom(*source);
  }
}

void FleurFairGallerySettleInfo::MergeFrom(const FleurFairGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FleurFairGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  energy_stat_map_.MergeFrom(from.energy_stat_map_);
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.energy() != 0) {
    set_energy(from.energy());
  }
  if (from.gallery_stage_count() != 0) {
    set_gallery_stage_count(from.gallery_stage_count());
  }
  if (from.gallery_stage_index() != 0) {
    set_gallery_stage_index(from.gallery_stage_index());
  }
}

void FleurFairGallerySettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FleurFairGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FleurFairGallerySettleInfo::CopyFrom(const FleurFairGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FleurFairGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FleurFairGallerySettleInfo::IsInitialized() const {
  return true;
}

void FleurFairGallerySettleInfo::Swap(FleurFairGallerySettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FleurFairGallerySettleInfo::InternalSwap(FleurFairGallerySettleInfo* other) {
  using std::swap;
  energy_stat_map_.Swap(&other->energy_stat_map_);
  swap(is_success_, other->is_success_);
  swap(energy_, other->energy_);
  swap(gallery_stage_count_, other->gallery_stage_count_);
  swap(gallery_stage_index_, other->gallery_stage_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FleurFairGallerySettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FleurFairGallerySettleInfo

// uint32 energy = 2;
void FleurFairGallerySettleInfo::clear_energy() {
  energy_ = 0u;
}
::google::protobuf::uint32 FleurFairGallerySettleInfo::energy() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairGallerySettleInfo.energy)
  return energy_;
}
void FleurFairGallerySettleInfo::set_energy(::google::protobuf::uint32 value) {
  
  energy_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairGallerySettleInfo.energy)
}

// uint32 gallery_stage_index = 11;
void FleurFairGallerySettleInfo::clear_gallery_stage_index() {
  gallery_stage_index_ = 0u;
}
::google::protobuf::uint32 FleurFairGallerySettleInfo::gallery_stage_index() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairGallerySettleInfo.gallery_stage_index)
  return gallery_stage_index_;
}
void FleurFairGallerySettleInfo::set_gallery_stage_index(::google::protobuf::uint32 value) {
  
  gallery_stage_index_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairGallerySettleInfo.gallery_stage_index)
}

// map<uint32, int32> energy_stat_map = 6;
int FleurFairGallerySettleInfo::energy_stat_map_size() const {
  return energy_stat_map_.size();
}
void FleurFairGallerySettleInfo::clear_energy_stat_map() {
  energy_stat_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int32 >&
FleurFairGallerySettleInfo::energy_stat_map() const {
  // @@protoc_insertion_point(field_map:proto.FleurFairGallerySettleInfo.energy_stat_map)
  return energy_stat_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int32 >*
FleurFairGallerySettleInfo::mutable_energy_stat_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.FleurFairGallerySettleInfo.energy_stat_map)
  return energy_stat_map_.MutableMap();
}

// uint32 gallery_stage_count = 9;
void FleurFairGallerySettleInfo::clear_gallery_stage_count() {
  gallery_stage_count_ = 0u;
}
::google::protobuf::uint32 FleurFairGallerySettleInfo::gallery_stage_count() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairGallerySettleInfo.gallery_stage_count)
  return gallery_stage_count_;
}
void FleurFairGallerySettleInfo::set_gallery_stage_count(::google::protobuf::uint32 value) {
  
  gallery_stage_count_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairGallerySettleInfo.gallery_stage_count)
}

// bool is_success = 1;
void FleurFairGallerySettleInfo::clear_is_success() {
  is_success_ = false;
}
bool FleurFairGallerySettleInfo::is_success() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairGallerySettleInfo.is_success)
  return is_success_;
}
void FleurFairGallerySettleInfo::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairGallerySettleInfo.is_success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FleurFairPlayerStatInfo::kOnlineIdFieldNumber;
const int FleurFairPlayerStatInfo::kUidFieldNumber;
const int FleurFairPlayerStatInfo::kProfilePictureFieldNumber;
const int FleurFairPlayerStatInfo::kStatIdFieldNumber;
const int FleurFairPlayerStatInfo::kHeadImageFieldNumber;
const int FleurFairPlayerStatInfo::kNickNameFieldNumber;
const int FleurFairPlayerStatInfo::kParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FleurFairPlayerStatInfo::FleurFairPlayerStatInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FleurFairPlayerStatInfo)
}
FleurFairPlayerStatInfo::FleurFairPlayerStatInfo(const FleurFairPlayerStatInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.online_id().size() > 0) {
    online_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.online_id_);
  }
  nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nick_name().size() > 0) {
    nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_name_);
  }
  if (from.has_profile_picture()) {
    profile_picture_ = new ::proto::ProfilePicture(*from.profile_picture_);
  } else {
    profile_picture_ = NULL;
  }
  ::memcpy(&stat_id_, &from.stat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&stat_id_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:proto.FleurFairPlayerStatInfo)
}

void FleurFairPlayerStatInfo::SharedCtor() {
  online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&profile_picture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&profile_picture_)) + sizeof(uid_));
  _cached_size_ = 0;
}

FleurFairPlayerStatInfo::~FleurFairPlayerStatInfo() {
  // @@protoc_insertion_point(destructor:proto.FleurFairPlayerStatInfo)
  SharedDtor();
}

void FleurFairPlayerStatInfo::SharedDtor() {
  online_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete profile_picture_;
}

void FleurFairPlayerStatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FleurFairPlayerStatInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FleurFairPlayerStatInfo& FleurFairPlayerStatInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

FleurFairPlayerStatInfo* FleurFairPlayerStatInfo::New(::google::protobuf::Arena* arena) const {
  FleurFairPlayerStatInfo* n = new FleurFairPlayerStatInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FleurFairPlayerStatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FleurFairPlayerStatInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  online_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && profile_picture_ != NULL) {
    delete profile_picture_;
  }
  profile_picture_ = NULL;
  ::memset(&stat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&stat_id_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

bool FleurFairPlayerStatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FleurFairPlayerStatInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.ProfilePicture profile_picture = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profile_picture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 stat_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 param = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 head_image = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string online_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_online_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->online_id().data(), static_cast<int>(this->online_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.FleurFairPlayerStatInfo.online_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nick_name = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nick_name().data(), static_cast<int>(this->nick_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.FleurFairPlayerStatInfo.nick_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FleurFairPlayerStatInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FleurFairPlayerStatInfo)
  return false;
#undef DO_
}

void FleurFairPlayerStatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FleurFairPlayerStatInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ProfilePicture profile_picture = 1;
  if (this->has_profile_picture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->profile_picture_, output);
  }

  // uint32 stat_id = 3;
  if (this->stat_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stat_id(), output);
  }

  // int32 param = 5;
  if (this->param() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->param(), output);
  }

  // uint32 head_image = 6;
  if (this->head_image() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->head_image(), output);
  }

  // uint32 uid = 8;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->uid(), output);
  }

  // string online_id = 11;
  if (this->online_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->online_id().data(), static_cast<int>(this->online_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.FleurFairPlayerStatInfo.online_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->online_id(), output);
  }

  // string nick_name = 15;
  if (this->nick_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick_name().data(), static_cast<int>(this->nick_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.FleurFairPlayerStatInfo.nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->nick_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.FleurFairPlayerStatInfo)
}

::google::protobuf::uint8* FleurFairPlayerStatInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.FleurFairPlayerStatInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ProfilePicture profile_picture = 1;
  if (this->has_profile_picture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->profile_picture_, deterministic, target);
  }

  // uint32 stat_id = 3;
  if (this->stat_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stat_id(), target);
  }

  // int32 param = 5;
  if (this->param() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->param(), target);
  }

  // uint32 head_image = 6;
  if (this->head_image() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->head_image(), target);
  }

  // uint32 uid = 8;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->uid(), target);
  }

  // string online_id = 11;
  if (this->online_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->online_id().data(), static_cast<int>(this->online_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.FleurFairPlayerStatInfo.online_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->online_id(), target);
  }

  // string nick_name = 15;
  if (this->nick_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick_name().data(), static_cast<int>(this->nick_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.FleurFairPlayerStatInfo.nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->nick_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FleurFairPlayerStatInfo)
  return target;
}

size_t FleurFairPlayerStatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FleurFairPlayerStatInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string online_id = 11;
  if (this->online_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->online_id());
  }

  // string nick_name = 15;
  if (this->nick_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick_name());
  }

  // .proto.ProfilePicture profile_picture = 1;
  if (this->has_profile_picture()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->profile_picture_);
  }

  // uint32 stat_id = 3;
  if (this->stat_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stat_id());
  }

  // int32 param = 5;
  if (this->param() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->param());
  }

  // uint32 head_image = 6;
  if (this->head_image() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->head_image());
  }

  // uint32 uid = 8;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FleurFairPlayerStatInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FleurFairPlayerStatInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FleurFairPlayerStatInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FleurFairPlayerStatInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FleurFairPlayerStatInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FleurFairPlayerStatInfo)
    MergeFrom(*source);
  }
}

void FleurFairPlayerStatInfo::MergeFrom(const FleurFairPlayerStatInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FleurFairPlayerStatInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.online_id().size() > 0) {

    online_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.online_id_);
  }
  if (from.nick_name().size() > 0) {

    nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_name_);
  }
  if (from.has_profile_picture()) {
    mutable_profile_picture()->::proto::ProfilePicture::MergeFrom(from.profile_picture());
  }
  if (from.stat_id() != 0) {
    set_stat_id(from.stat_id());
  }
  if (from.param() != 0) {
    set_param(from.param());
  }
  if (from.head_image() != 0) {
    set_head_image(from.head_image());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void FleurFairPlayerStatInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FleurFairPlayerStatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FleurFairPlayerStatInfo::CopyFrom(const FleurFairPlayerStatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FleurFairPlayerStatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FleurFairPlayerStatInfo::IsInitialized() const {
  return true;
}

void FleurFairPlayerStatInfo::Swap(FleurFairPlayerStatInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FleurFairPlayerStatInfo::InternalSwap(FleurFairPlayerStatInfo* other) {
  using std::swap;
  online_id_.Swap(&other->online_id_);
  nick_name_.Swap(&other->nick_name_);
  swap(profile_picture_, other->profile_picture_);
  swap(stat_id_, other->stat_id_);
  swap(param_, other->param_);
  swap(head_image_, other->head_image_);
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FleurFairPlayerStatInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FleurFairPlayerStatInfo

// string online_id = 11;
void FleurFairPlayerStatInfo::clear_online_id() {
  online_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FleurFairPlayerStatInfo::online_id() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairPlayerStatInfo.online_id)
  return online_id_.GetNoArena();
}
void FleurFairPlayerStatInfo::set_online_id(const ::std::string& value) {
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.FleurFairPlayerStatInfo.online_id)
}
#if LANG_CXX11
void FleurFairPlayerStatInfo::set_online_id(::std::string&& value) {
  
  online_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.FleurFairPlayerStatInfo.online_id)
}
#endif
void FleurFairPlayerStatInfo::set_online_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.FleurFairPlayerStatInfo.online_id)
}
void FleurFairPlayerStatInfo::set_online_id(const char* value, size_t size) {
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.FleurFairPlayerStatInfo.online_id)
}
::std::string* FleurFairPlayerStatInfo::mutable_online_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.FleurFairPlayerStatInfo.online_id)
  return online_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FleurFairPlayerStatInfo::release_online_id() {
  // @@protoc_insertion_point(field_release:proto.FleurFairPlayerStatInfo.online_id)
  
  return online_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FleurFairPlayerStatInfo::set_allocated_online_id(::std::string* online_id) {
  if (online_id != NULL) {
    
  } else {
    
  }
  online_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), online_id);
  // @@protoc_insertion_point(field_set_allocated:proto.FleurFairPlayerStatInfo.online_id)
}

// uint32 uid = 8;
void FleurFairPlayerStatInfo::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 FleurFairPlayerStatInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairPlayerStatInfo.uid)
  return uid_;
}
void FleurFairPlayerStatInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairPlayerStatInfo.uid)
}

// .proto.ProfilePicture profile_picture = 1;
bool FleurFairPlayerStatInfo::has_profile_picture() const {
  return this != internal_default_instance() && profile_picture_ != NULL;
}
void FleurFairPlayerStatInfo::clear_profile_picture() {
  if (GetArenaNoVirtual() == NULL && profile_picture_ != NULL) delete profile_picture_;
  profile_picture_ = NULL;
}
const ::proto::ProfilePicture& FleurFairPlayerStatInfo::profile_picture() const {
  const ::proto::ProfilePicture* p = profile_picture_;
  // @@protoc_insertion_point(field_get:proto.FleurFairPlayerStatInfo.profile_picture)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ProfilePicture*>(
      &::proto::_ProfilePicture_default_instance_);
}
::proto::ProfilePicture* FleurFairPlayerStatInfo::mutable_profile_picture() {
  
  if (profile_picture_ == NULL) {
    profile_picture_ = new ::proto::ProfilePicture;
  }
  // @@protoc_insertion_point(field_mutable:proto.FleurFairPlayerStatInfo.profile_picture)
  return profile_picture_;
}
::proto::ProfilePicture* FleurFairPlayerStatInfo::release_profile_picture() {
  // @@protoc_insertion_point(field_release:proto.FleurFairPlayerStatInfo.profile_picture)
  
  ::proto::ProfilePicture* temp = profile_picture_;
  profile_picture_ = NULL;
  return temp;
}
void FleurFairPlayerStatInfo::set_allocated_profile_picture(::proto::ProfilePicture* profile_picture) {
  delete profile_picture_;
  profile_picture_ = profile_picture;
  if (profile_picture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FleurFairPlayerStatInfo.profile_picture)
}

// uint32 stat_id = 3;
void FleurFairPlayerStatInfo::clear_stat_id() {
  stat_id_ = 0u;
}
::google::protobuf::uint32 FleurFairPlayerStatInfo::stat_id() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairPlayerStatInfo.stat_id)
  return stat_id_;
}
void FleurFairPlayerStatInfo::set_stat_id(::google::protobuf::uint32 value) {
  
  stat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairPlayerStatInfo.stat_id)
}

// uint32 head_image = 6;
void FleurFairPlayerStatInfo::clear_head_image() {
  head_image_ = 0u;
}
::google::protobuf::uint32 FleurFairPlayerStatInfo::head_image() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairPlayerStatInfo.head_image)
  return head_image_;
}
void FleurFairPlayerStatInfo::set_head_image(::google::protobuf::uint32 value) {
  
  head_image_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairPlayerStatInfo.head_image)
}

// string nick_name = 15;
void FleurFairPlayerStatInfo::clear_nick_name() {
  nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FleurFairPlayerStatInfo::nick_name() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairPlayerStatInfo.nick_name)
  return nick_name_.GetNoArena();
}
void FleurFairPlayerStatInfo::set_nick_name(const ::std::string& value) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.FleurFairPlayerStatInfo.nick_name)
}
#if LANG_CXX11
void FleurFairPlayerStatInfo::set_nick_name(::std::string&& value) {
  
  nick_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.FleurFairPlayerStatInfo.nick_name)
}
#endif
void FleurFairPlayerStatInfo::set_nick_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.FleurFairPlayerStatInfo.nick_name)
}
void FleurFairPlayerStatInfo::set_nick_name(const char* value, size_t size) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.FleurFairPlayerStatInfo.nick_name)
}
::std::string* FleurFairPlayerStatInfo::mutable_nick_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.FleurFairPlayerStatInfo.nick_name)
  return nick_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FleurFairPlayerStatInfo::release_nick_name() {
  // @@protoc_insertion_point(field_release:proto.FleurFairPlayerStatInfo.nick_name)
  
  return nick_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FleurFairPlayerStatInfo::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name != NULL) {
    
  } else {
    
  }
  nick_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick_name);
  // @@protoc_insertion_point(field_set_allocated:proto.FleurFairPlayerStatInfo.nick_name)
}

// int32 param = 5;
void FleurFairPlayerStatInfo::clear_param() {
  param_ = 0;
}
::google::protobuf::int32 FleurFairPlayerStatInfo::param() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairPlayerStatInfo.param)
  return param_;
}
void FleurFairPlayerStatInfo::set_param(::google::protobuf::int32 value) {
  
  param_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairPlayerStatInfo.param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FleurFairBossSettleInfo::kRewardTokenNumFieldNumber;
const int FleurFairBossSettleInfo::kStatInfoListFieldNumber;
const int FleurFairBossSettleInfo::kIsSuccessFieldNumber;
const int FleurFairBossSettleInfo::kEnergyFieldNumber;
const int FleurFairBossSettleInfo::kCostTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FleurFairBossSettleInfo::FleurFairBossSettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FleurFairBossSettleInfo)
}
FleurFairBossSettleInfo::FleurFairBossSettleInfo(const FleurFairBossSettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stat_info_list_(from.stat_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cost_time_, &from.cost_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_token_num_) -
    reinterpret_cast<char*>(&cost_time_)) + sizeof(reward_token_num_));
  // @@protoc_insertion_point(copy_constructor:proto.FleurFairBossSettleInfo)
}

void FleurFairBossSettleInfo::SharedCtor() {
  ::memset(&cost_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_token_num_) -
      reinterpret_cast<char*>(&cost_time_)) + sizeof(reward_token_num_));
  _cached_size_ = 0;
}

FleurFairBossSettleInfo::~FleurFairBossSettleInfo() {
  // @@protoc_insertion_point(destructor:proto.FleurFairBossSettleInfo)
  SharedDtor();
}

void FleurFairBossSettleInfo::SharedDtor() {
}

void FleurFairBossSettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FleurFairBossSettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FleurFairBossSettleInfo& FleurFairBossSettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

FleurFairBossSettleInfo* FleurFairBossSettleInfo::New(::google::protobuf::Arena* arena) const {
  FleurFairBossSettleInfo* n = new FleurFairBossSettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FleurFairBossSettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FleurFairBossSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_info_list_.Clear();
  ::memset(&cost_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_token_num_) -
      reinterpret_cast<char*>(&cost_time_)) + sizeof(reward_token_num_));
  _internal_metadata_.Clear();
}

bool FleurFairBossSettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FleurFairBossSettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.FleurFairPlayerStatInfo stat_info_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stat_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cost_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_success = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 energy = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &energy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 reward_token_num = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_token_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FleurFairBossSettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FleurFairBossSettleInfo)
  return false;
#undef DO_
}

void FleurFairBossSettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FleurFairBossSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.FleurFairPlayerStatInfo stat_info_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stat_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stat_info_list(static_cast<int>(i)), output);
  }

  // uint32 cost_time = 8;
  if (this->cost_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cost_time(), output);
  }

  // bool is_success = 10;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_success(), output);
  }

  // uint32 energy = 12;
  if (this->energy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->energy(), output);
  }

  // uint32 reward_token_num = 15;
  if (this->reward_token_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->reward_token_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.FleurFairBossSettleInfo)
}

::google::protobuf::uint8* FleurFairBossSettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.FleurFairBossSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.FleurFairPlayerStatInfo stat_info_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stat_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->stat_info_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 cost_time = 8;
  if (this->cost_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cost_time(), target);
  }

  // bool is_success = 10;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_success(), target);
  }

  // uint32 energy = 12;
  if (this->energy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->energy(), target);
  }

  // uint32 reward_token_num = 15;
  if (this->reward_token_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->reward_token_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FleurFairBossSettleInfo)
  return target;
}

size_t FleurFairBossSettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FleurFairBossSettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.FleurFairPlayerStatInfo stat_info_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->stat_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stat_info_list(static_cast<int>(i)));
    }
  }

  // uint32 cost_time = 8;
  if (this->cost_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cost_time());
  }

  // bool is_success = 10;
  if (this->is_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 energy = 12;
  if (this->energy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->energy());
  }

  // uint32 reward_token_num = 15;
  if (this->reward_token_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reward_token_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FleurFairBossSettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FleurFairBossSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FleurFairBossSettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FleurFairBossSettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FleurFairBossSettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FleurFairBossSettleInfo)
    MergeFrom(*source);
  }
}

void FleurFairBossSettleInfo::MergeFrom(const FleurFairBossSettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FleurFairBossSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_info_list_.MergeFrom(from.stat_info_list_);
  if (from.cost_time() != 0) {
    set_cost_time(from.cost_time());
  }
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.energy() != 0) {
    set_energy(from.energy());
  }
  if (from.reward_token_num() != 0) {
    set_reward_token_num(from.reward_token_num());
  }
}

void FleurFairBossSettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FleurFairBossSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FleurFairBossSettleInfo::CopyFrom(const FleurFairBossSettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FleurFairBossSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FleurFairBossSettleInfo::IsInitialized() const {
  return true;
}

void FleurFairBossSettleInfo::Swap(FleurFairBossSettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FleurFairBossSettleInfo::InternalSwap(FleurFairBossSettleInfo* other) {
  using std::swap;
  stat_info_list_.InternalSwap(&other->stat_info_list_);
  swap(cost_time_, other->cost_time_);
  swap(is_success_, other->is_success_);
  swap(energy_, other->energy_);
  swap(reward_token_num_, other->reward_token_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FleurFairBossSettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FleurFairBossSettleInfo

// uint32 reward_token_num = 15;
void FleurFairBossSettleInfo::clear_reward_token_num() {
  reward_token_num_ = 0u;
}
::google::protobuf::uint32 FleurFairBossSettleInfo::reward_token_num() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairBossSettleInfo.reward_token_num)
  return reward_token_num_;
}
void FleurFairBossSettleInfo::set_reward_token_num(::google::protobuf::uint32 value) {
  
  reward_token_num_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairBossSettleInfo.reward_token_num)
}

// repeated .proto.FleurFairPlayerStatInfo stat_info_list = 1;
int FleurFairBossSettleInfo::stat_info_list_size() const {
  return stat_info_list_.size();
}
void FleurFairBossSettleInfo::clear_stat_info_list() {
  stat_info_list_.Clear();
}
const ::proto::FleurFairPlayerStatInfo& FleurFairBossSettleInfo::stat_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.FleurFairBossSettleInfo.stat_info_list)
  return stat_info_list_.Get(index);
}
::proto::FleurFairPlayerStatInfo* FleurFairBossSettleInfo::mutable_stat_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.FleurFairBossSettleInfo.stat_info_list)
  return stat_info_list_.Mutable(index);
}
::proto::FleurFairPlayerStatInfo* FleurFairBossSettleInfo::add_stat_info_list() {
  // @@protoc_insertion_point(field_add:proto.FleurFairBossSettleInfo.stat_info_list)
  return stat_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::FleurFairPlayerStatInfo >*
FleurFairBossSettleInfo::mutable_stat_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.FleurFairBossSettleInfo.stat_info_list)
  return &stat_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::FleurFairPlayerStatInfo >&
FleurFairBossSettleInfo::stat_info_list() const {
  // @@protoc_insertion_point(field_list:proto.FleurFairBossSettleInfo.stat_info_list)
  return stat_info_list_;
}

// bool is_success = 10;
void FleurFairBossSettleInfo::clear_is_success() {
  is_success_ = false;
}
bool FleurFairBossSettleInfo::is_success() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairBossSettleInfo.is_success)
  return is_success_;
}
void FleurFairBossSettleInfo::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairBossSettleInfo.is_success)
}

// uint32 energy = 12;
void FleurFairBossSettleInfo::clear_energy() {
  energy_ = 0u;
}
::google::protobuf::uint32 FleurFairBossSettleInfo::energy() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairBossSettleInfo.energy)
  return energy_;
}
void FleurFairBossSettleInfo::set_energy(::google::protobuf::uint32 value) {
  
  energy_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairBossSettleInfo.energy)
}

// uint32 cost_time = 8;
void FleurFairBossSettleInfo::clear_cost_time() {
  cost_time_ = 0u;
}
::google::protobuf::uint32 FleurFairBossSettleInfo::cost_time() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairBossSettleInfo.cost_time)
  return cost_time_;
}
void FleurFairBossSettleInfo::set_cost_time(::google::protobuf::uint32 value) {
  
  cost_time_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairBossSettleInfo.cost_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FleurFairStageSettleNotify::kStageTypeFieldNumber;
const int FleurFairStageSettleNotify::kGallerySettleInfoFieldNumber;
const int FleurFairStageSettleNotify::kBossSettleInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FleurFairStageSettleNotify::FleurFairStageSettleNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FleurFairStageSettleNotify)
}
FleurFairStageSettleNotify::FleurFairStageSettleNotify(const FleurFairStageSettleNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stage_type_ = from.stage_type_;
  clear_has_detail();
  switch (from.detail_case()) {
    case kGallerySettleInfo: {
      mutable_gallery_settle_info()->::proto::FleurFairGallerySettleInfo::MergeFrom(from.gallery_settle_info());
      break;
    }
    case kBossSettleInfo: {
      mutable_boss_settle_info()->::proto::FleurFairBossSettleInfo::MergeFrom(from.boss_settle_info());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.FleurFairStageSettleNotify)
}

void FleurFairStageSettleNotify::SharedCtor() {
  stage_type_ = 0u;
  clear_has_detail();
  _cached_size_ = 0;
}

FleurFairStageSettleNotify::~FleurFairStageSettleNotify() {
  // @@protoc_insertion_point(destructor:proto.FleurFairStageSettleNotify)
  SharedDtor();
}

void FleurFairStageSettleNotify::SharedDtor() {
  if (has_detail()) {
    clear_detail();
  }
}

void FleurFairStageSettleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FleurFairStageSettleNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FleurFairStageSettleNotify& FleurFairStageSettleNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

FleurFairStageSettleNotify* FleurFairStageSettleNotify::New(::google::protobuf::Arena* arena) const {
  FleurFairStageSettleNotify* n = new FleurFairStageSettleNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FleurFairStageSettleNotify::clear_detail() {
// @@protoc_insertion_point(one_of_clear_start:proto.FleurFairStageSettleNotify)
  switch (detail_case()) {
    case kGallerySettleInfo: {
      delete detail_.gallery_settle_info_;
      break;
    }
    case kBossSettleInfo: {
      delete detail_.boss_settle_info_;
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DETAIL_NOT_SET;
}


void FleurFairStageSettleNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FleurFairStageSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stage_type_ = 0u;
  clear_detail();
  _internal_metadata_.Clear();
}

bool FleurFairStageSettleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FleurFairStageSettleNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 stage_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.FleurFairGallerySettleInfo gallery_settle_info = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gallery_settle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.FleurFairBossSettleInfo boss_settle_info = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boss_settle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FleurFairStageSettleNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FleurFairStageSettleNotify)
  return false;
#undef DO_
}

void FleurFairStageSettleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FleurFairStageSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stage_type = 10;
  if (this->stage_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->stage_type(), output);
  }

  // .proto.FleurFairGallerySettleInfo gallery_settle_info = 13;
  if (has_gallery_settle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *detail_.gallery_settle_info_, output);
  }

  // .proto.FleurFairBossSettleInfo boss_settle_info = 14;
  if (has_boss_settle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *detail_.boss_settle_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.FleurFairStageSettleNotify)
}

::google::protobuf::uint8* FleurFairStageSettleNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.FleurFairStageSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stage_type = 10;
  if (this->stage_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->stage_type(), target);
  }

  // .proto.FleurFairGallerySettleInfo gallery_settle_info = 13;
  if (has_gallery_settle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *detail_.gallery_settle_info_, deterministic, target);
  }

  // .proto.FleurFairBossSettleInfo boss_settle_info = 14;
  if (has_boss_settle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *detail_.boss_settle_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FleurFairStageSettleNotify)
  return target;
}

size_t FleurFairStageSettleNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FleurFairStageSettleNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 stage_type = 10;
  if (this->stage_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stage_type());
  }

  switch (detail_case()) {
    // .proto.FleurFairGallerySettleInfo gallery_settle_info = 13;
    case kGallerySettleInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.gallery_settle_info_);
      break;
    }
    // .proto.FleurFairBossSettleInfo boss_settle_info = 14;
    case kBossSettleInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.boss_settle_info_);
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FleurFairStageSettleNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FleurFairStageSettleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const FleurFairStageSettleNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FleurFairStageSettleNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FleurFairStageSettleNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FleurFairStageSettleNotify)
    MergeFrom(*source);
  }
}

void FleurFairStageSettleNotify::MergeFrom(const FleurFairStageSettleNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FleurFairStageSettleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stage_type() != 0) {
    set_stage_type(from.stage_type());
  }
  switch (from.detail_case()) {
    case kGallerySettleInfo: {
      mutable_gallery_settle_info()->::proto::FleurFairGallerySettleInfo::MergeFrom(from.gallery_settle_info());
      break;
    }
    case kBossSettleInfo: {
      mutable_boss_settle_info()->::proto::FleurFairBossSettleInfo::MergeFrom(from.boss_settle_info());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
}

void FleurFairStageSettleNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FleurFairStageSettleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FleurFairStageSettleNotify::CopyFrom(const FleurFairStageSettleNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FleurFairStageSettleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FleurFairStageSettleNotify::IsInitialized() const {
  return true;
}

void FleurFairStageSettleNotify::Swap(FleurFairStageSettleNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FleurFairStageSettleNotify::InternalSwap(FleurFairStageSettleNotify* other) {
  using std::swap;
  swap(stage_type_, other->stage_type_);
  swap(detail_, other->detail_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FleurFairStageSettleNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FleurFairStageSettleNotify

// uint32 stage_type = 10;
void FleurFairStageSettleNotify::clear_stage_type() {
  stage_type_ = 0u;
}
::google::protobuf::uint32 FleurFairStageSettleNotify::stage_type() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairStageSettleNotify.stage_type)
  return stage_type_;
}
void FleurFairStageSettleNotify::set_stage_type(::google::protobuf::uint32 value) {
  
  stage_type_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairStageSettleNotify.stage_type)
}

// .proto.FleurFairGallerySettleInfo gallery_settle_info = 13;
bool FleurFairStageSettleNotify::has_gallery_settle_info() const {
  return detail_case() == kGallerySettleInfo;
}
void FleurFairStageSettleNotify::set_has_gallery_settle_info() {
  _oneof_case_[0] = kGallerySettleInfo;
}
void FleurFairStageSettleNotify::clear_gallery_settle_info() {
  if (has_gallery_settle_info()) {
    delete detail_.gallery_settle_info_;
    clear_has_detail();
  }
}
 const ::proto::FleurFairGallerySettleInfo& FleurFairStageSettleNotify::gallery_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairStageSettleNotify.gallery_settle_info)
  return has_gallery_settle_info()
      ? *detail_.gallery_settle_info_
      : ::proto::FleurFairGallerySettleInfo::default_instance();
}
::proto::FleurFairGallerySettleInfo* FleurFairStageSettleNotify::mutable_gallery_settle_info() {
  if (!has_gallery_settle_info()) {
    clear_detail();
    set_has_gallery_settle_info();
    detail_.gallery_settle_info_ = new ::proto::FleurFairGallerySettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.FleurFairStageSettleNotify.gallery_settle_info)
  return detail_.gallery_settle_info_;
}
::proto::FleurFairGallerySettleInfo* FleurFairStageSettleNotify::release_gallery_settle_info() {
  // @@protoc_insertion_point(field_release:proto.FleurFairStageSettleNotify.gallery_settle_info)
  if (has_gallery_settle_info()) {
    clear_has_detail();
    ::proto::FleurFairGallerySettleInfo* temp = detail_.gallery_settle_info_;
    detail_.gallery_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FleurFairStageSettleNotify::set_allocated_gallery_settle_info(::proto::FleurFairGallerySettleInfo* gallery_settle_info) {
  clear_detail();
  if (gallery_settle_info) {
    set_has_gallery_settle_info();
    detail_.gallery_settle_info_ = gallery_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FleurFairStageSettleNotify.gallery_settle_info)
}

// .proto.FleurFairBossSettleInfo boss_settle_info = 14;
bool FleurFairStageSettleNotify::has_boss_settle_info() const {
  return detail_case() == kBossSettleInfo;
}
void FleurFairStageSettleNotify::set_has_boss_settle_info() {
  _oneof_case_[0] = kBossSettleInfo;
}
void FleurFairStageSettleNotify::clear_boss_settle_info() {
  if (has_boss_settle_info()) {
    delete detail_.boss_settle_info_;
    clear_has_detail();
  }
}
 const ::proto::FleurFairBossSettleInfo& FleurFairStageSettleNotify::boss_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairStageSettleNotify.boss_settle_info)
  return has_boss_settle_info()
      ? *detail_.boss_settle_info_
      : ::proto::FleurFairBossSettleInfo::default_instance();
}
::proto::FleurFairBossSettleInfo* FleurFairStageSettleNotify::mutable_boss_settle_info() {
  if (!has_boss_settle_info()) {
    clear_detail();
    set_has_boss_settle_info();
    detail_.boss_settle_info_ = new ::proto::FleurFairBossSettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.FleurFairStageSettleNotify.boss_settle_info)
  return detail_.boss_settle_info_;
}
::proto::FleurFairBossSettleInfo* FleurFairStageSettleNotify::release_boss_settle_info() {
  // @@protoc_insertion_point(field_release:proto.FleurFairStageSettleNotify.boss_settle_info)
  if (has_boss_settle_info()) {
    clear_has_detail();
    ::proto::FleurFairBossSettleInfo* temp = detail_.boss_settle_info_;
    detail_.boss_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FleurFairStageSettleNotify::set_allocated_boss_settle_info(::proto::FleurFairBossSettleInfo* boss_settle_info) {
  clear_detail();
  if (boss_settle_info) {
    set_has_boss_settle_info();
    detail_.boss_settle_info_ = boss_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FleurFairStageSettleNotify.boss_settle_info)
}

bool FleurFairStageSettleNotify::has_detail() const {
  return detail_case() != DETAIL_NOT_SET;
}
void FleurFairStageSettleNotify::clear_has_detail() {
  _oneof_case_[0] = DETAIL_NOT_SET;
}
FleurFairStageSettleNotify::DetailCase FleurFairStageSettleNotify::detail_case() const {
  return FleurFairStageSettleNotify::DetailCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FleurFairFinishGalleryStageNotify::FleurFairFinishGalleryStageNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FleurFairFinishGalleryStageNotify)
}
FleurFairFinishGalleryStageNotify::FleurFairFinishGalleryStageNotify(const FleurFairFinishGalleryStageNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.FleurFairFinishGalleryStageNotify)
}

void FleurFairFinishGalleryStageNotify::SharedCtor() {
  _cached_size_ = 0;
}

FleurFairFinishGalleryStageNotify::~FleurFairFinishGalleryStageNotify() {
  // @@protoc_insertion_point(destructor:proto.FleurFairFinishGalleryStageNotify)
  SharedDtor();
}

void FleurFairFinishGalleryStageNotify::SharedDtor() {
}

void FleurFairFinishGalleryStageNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FleurFairFinishGalleryStageNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FleurFairFinishGalleryStageNotify& FleurFairFinishGalleryStageNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

FleurFairFinishGalleryStageNotify* FleurFairFinishGalleryStageNotify::New(::google::protobuf::Arena* arena) const {
  FleurFairFinishGalleryStageNotify* n = new FleurFairFinishGalleryStageNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FleurFairFinishGalleryStageNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FleurFairFinishGalleryStageNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool FleurFairFinishGalleryStageNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FleurFairFinishGalleryStageNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FleurFairFinishGalleryStageNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FleurFairFinishGalleryStageNotify)
  return false;
#undef DO_
}

void FleurFairFinishGalleryStageNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FleurFairFinishGalleryStageNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.FleurFairFinishGalleryStageNotify)
}

::google::protobuf::uint8* FleurFairFinishGalleryStageNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.FleurFairFinishGalleryStageNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FleurFairFinishGalleryStageNotify)
  return target;
}

size_t FleurFairFinishGalleryStageNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FleurFairFinishGalleryStageNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FleurFairFinishGalleryStageNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FleurFairFinishGalleryStageNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const FleurFairFinishGalleryStageNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FleurFairFinishGalleryStageNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FleurFairFinishGalleryStageNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FleurFairFinishGalleryStageNotify)
    MergeFrom(*source);
  }
}

void FleurFairFinishGalleryStageNotify::MergeFrom(const FleurFairFinishGalleryStageNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FleurFairFinishGalleryStageNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FleurFairFinishGalleryStageNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FleurFairFinishGalleryStageNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FleurFairFinishGalleryStageNotify::CopyFrom(const FleurFairFinishGalleryStageNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FleurFairFinishGalleryStageNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FleurFairFinishGalleryStageNotify::IsInitialized() const {
  return true;
}

void FleurFairFinishGalleryStageNotify::Swap(FleurFairFinishGalleryStageNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FleurFairFinishGalleryStageNotify::InternalSwap(FleurFairFinishGalleryStageNotify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FleurFairFinishGalleryStageNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FleurFairFinishGalleryStageNotify

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HideAndSeekPlayerBattleInfo::kCostumeIdFieldNumber;
const int HideAndSeekPlayerBattleInfo::kSkillListFieldNumber;
const int HideAndSeekPlayerBattleInfo::kIsReadyFieldNumber;
const int HideAndSeekPlayerBattleInfo::kAvatarIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HideAndSeekPlayerBattleInfo::HideAndSeekPlayerBattleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HideAndSeekPlayerBattleInfo)
}
HideAndSeekPlayerBattleInfo::HideAndSeekPlayerBattleInfo(const HideAndSeekPlayerBattleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      skill_list_(from.skill_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&costume_id_, &from.costume_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_ready_) -
    reinterpret_cast<char*>(&costume_id_)) + sizeof(is_ready_));
  // @@protoc_insertion_point(copy_constructor:proto.HideAndSeekPlayerBattleInfo)
}

void HideAndSeekPlayerBattleInfo::SharedCtor() {
  ::memset(&costume_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_ready_) -
      reinterpret_cast<char*>(&costume_id_)) + sizeof(is_ready_));
  _cached_size_ = 0;
}

HideAndSeekPlayerBattleInfo::~HideAndSeekPlayerBattleInfo() {
  // @@protoc_insertion_point(destructor:proto.HideAndSeekPlayerBattleInfo)
  SharedDtor();
}

void HideAndSeekPlayerBattleInfo::SharedDtor() {
}

void HideAndSeekPlayerBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HideAndSeekPlayerBattleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HideAndSeekPlayerBattleInfo& HideAndSeekPlayerBattleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

HideAndSeekPlayerBattleInfo* HideAndSeekPlayerBattleInfo::New(::google::protobuf::Arena* arena) const {
  HideAndSeekPlayerBattleInfo* n = new HideAndSeekPlayerBattleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HideAndSeekPlayerBattleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HideAndSeekPlayerBattleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skill_list_.Clear();
  ::memset(&costume_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_ready_) -
      reinterpret_cast<char*>(&costume_id_)) + sizeof(is_ready_));
  _internal_metadata_.Clear();
}

bool HideAndSeekPlayerBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HideAndSeekPlayerBattleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 costume_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costume_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 avatar_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_ready = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 skill_list = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skill_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 122u, input, this->mutable_skill_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HideAndSeekPlayerBattleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HideAndSeekPlayerBattleInfo)
  return false;
#undef DO_
}

void HideAndSeekPlayerBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HideAndSeekPlayerBattleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 costume_id = 3;
  if (this->costume_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->costume_id(), output);
  }

  // uint32 avatar_id = 6;
  if (this->avatar_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->avatar_id(), output);
  }

  // bool is_ready = 12;
  if (this->is_ready() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_ready(), output);
  }

  // repeated uint32 skill_list = 15;
  if (this->skill_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(15, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _skill_list_cached_byte_size_));
  }
  for (int i = 0, n = this->skill_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->skill_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HideAndSeekPlayerBattleInfo)
}

::google::protobuf::uint8* HideAndSeekPlayerBattleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HideAndSeekPlayerBattleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 costume_id = 3;
  if (this->costume_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->costume_id(), target);
  }

  // uint32 avatar_id = 6;
  if (this->avatar_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->avatar_id(), target);
  }

  // bool is_ready = 12;
  if (this->is_ready() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_ready(), target);
  }

  // repeated uint32 skill_list = 15;
  if (this->skill_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      15,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _skill_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->skill_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HideAndSeekPlayerBattleInfo)
  return target;
}

size_t HideAndSeekPlayerBattleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HideAndSeekPlayerBattleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 skill_list = 15;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->skill_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _skill_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 costume_id = 3;
  if (this->costume_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->costume_id());
  }

  // uint32 avatar_id = 6;
  if (this->avatar_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avatar_id());
  }

  // bool is_ready = 12;
  if (this->is_ready() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HideAndSeekPlayerBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HideAndSeekPlayerBattleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HideAndSeekPlayerBattleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HideAndSeekPlayerBattleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HideAndSeekPlayerBattleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HideAndSeekPlayerBattleInfo)
    MergeFrom(*source);
  }
}

void HideAndSeekPlayerBattleInfo::MergeFrom(const HideAndSeekPlayerBattleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HideAndSeekPlayerBattleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skill_list_.MergeFrom(from.skill_list_);
  if (from.costume_id() != 0) {
    set_costume_id(from.costume_id());
  }
  if (from.avatar_id() != 0) {
    set_avatar_id(from.avatar_id());
  }
  if (from.is_ready() != 0) {
    set_is_ready(from.is_ready());
  }
}

void HideAndSeekPlayerBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HideAndSeekPlayerBattleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HideAndSeekPlayerBattleInfo::CopyFrom(const HideAndSeekPlayerBattleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HideAndSeekPlayerBattleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideAndSeekPlayerBattleInfo::IsInitialized() const {
  return true;
}

void HideAndSeekPlayerBattleInfo::Swap(HideAndSeekPlayerBattleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HideAndSeekPlayerBattleInfo::InternalSwap(HideAndSeekPlayerBattleInfo* other) {
  using std::swap;
  skill_list_.InternalSwap(&other->skill_list_);
  swap(costume_id_, other->costume_id_);
  swap(avatar_id_, other->avatar_id_);
  swap(is_ready_, other->is_ready_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HideAndSeekPlayerBattleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HideAndSeekPlayerBattleInfo

// uint32 costume_id = 3;
void HideAndSeekPlayerBattleInfo::clear_costume_id() {
  costume_id_ = 0u;
}
::google::protobuf::uint32 HideAndSeekPlayerBattleInfo::costume_id() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekPlayerBattleInfo.costume_id)
  return costume_id_;
}
void HideAndSeekPlayerBattleInfo::set_costume_id(::google::protobuf::uint32 value) {
  
  costume_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekPlayerBattleInfo.costume_id)
}

// repeated uint32 skill_list = 15;
int HideAndSeekPlayerBattleInfo::skill_list_size() const {
  return skill_list_.size();
}
void HideAndSeekPlayerBattleInfo::clear_skill_list() {
  skill_list_.Clear();
}
::google::protobuf::uint32 HideAndSeekPlayerBattleInfo::skill_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekPlayerBattleInfo.skill_list)
  return skill_list_.Get(index);
}
void HideAndSeekPlayerBattleInfo::set_skill_list(int index, ::google::protobuf::uint32 value) {
  skill_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.HideAndSeekPlayerBattleInfo.skill_list)
}
void HideAndSeekPlayerBattleInfo::add_skill_list(::google::protobuf::uint32 value) {
  skill_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.HideAndSeekPlayerBattleInfo.skill_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
HideAndSeekPlayerBattleInfo::skill_list() const {
  // @@protoc_insertion_point(field_list:proto.HideAndSeekPlayerBattleInfo.skill_list)
  return skill_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
HideAndSeekPlayerBattleInfo::mutable_skill_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.HideAndSeekPlayerBattleInfo.skill_list)
  return &skill_list_;
}

// bool is_ready = 12;
void HideAndSeekPlayerBattleInfo::clear_is_ready() {
  is_ready_ = false;
}
bool HideAndSeekPlayerBattleInfo::is_ready() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekPlayerBattleInfo.is_ready)
  return is_ready_;
}
void HideAndSeekPlayerBattleInfo::set_is_ready(bool value) {
  
  is_ready_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekPlayerBattleInfo.is_ready)
}

// uint32 avatar_id = 6;
void HideAndSeekPlayerBattleInfo::clear_avatar_id() {
  avatar_id_ = 0u;
}
::google::protobuf::uint32 HideAndSeekPlayerBattleInfo::avatar_id() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekPlayerBattleInfo.avatar_id)
  return avatar_id_;
}
void HideAndSeekPlayerBattleInfo::set_avatar_id(::google::protobuf::uint32 value) {
  
  avatar_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekPlayerBattleInfo.avatar_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

HideAndSeekStageInfo::HideAndSeekStageInfo_BattleInfoMapEntry::HideAndSeekStageInfo_BattleInfoMapEntry() {}
HideAndSeekStageInfo::HideAndSeekStageInfo_BattleInfoMapEntry::HideAndSeekStageInfo_BattleInfoMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata HideAndSeekStageInfo::HideAndSeekStageInfo_BattleInfoMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[41];
}
void HideAndSeekStageInfo::HideAndSeekStageInfo_BattleInfoMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void HideAndSeekStageInfo::HideAndSeekStageInfo_BattleInfoMapEntry::MergeFrom(const HideAndSeekStageInfo_BattleInfoMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HideAndSeekStageInfo::kMapIdFieldNumber;
const int HideAndSeekStageInfo::kIsRecordScoreFieldNumber;
const int HideAndSeekStageInfo::kStageTypeFieldNumber;
const int HideAndSeekStageInfo::kBattleInfoMapFieldNumber;
const int HideAndSeekStageInfo::kHiderUidListFieldNumber;
const int HideAndSeekStageInfo::kHunterUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HideAndSeekStageInfo::HideAndSeekStageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HideAndSeekStageInfo)
}
HideAndSeekStageInfo::HideAndSeekStageInfo(const HideAndSeekStageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hider_uid_list_(from.hider_uid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  battle_info_map_.MergeFrom(from.battle_info_map_);
  ::memcpy(&is_record_score_, &from.is_record_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&hunter_uid_) -
    reinterpret_cast<char*>(&is_record_score_)) + sizeof(hunter_uid_));
  // @@protoc_insertion_point(copy_constructor:proto.HideAndSeekStageInfo)
}

void HideAndSeekStageInfo::SharedCtor() {
  ::memset(&is_record_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hunter_uid_) -
      reinterpret_cast<char*>(&is_record_score_)) + sizeof(hunter_uid_));
  _cached_size_ = 0;
}

HideAndSeekStageInfo::~HideAndSeekStageInfo() {
  // @@protoc_insertion_point(destructor:proto.HideAndSeekStageInfo)
  SharedDtor();
}

void HideAndSeekStageInfo::SharedDtor() {
}

void HideAndSeekStageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HideAndSeekStageInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HideAndSeekStageInfo& HideAndSeekStageInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

HideAndSeekStageInfo* HideAndSeekStageInfo::New(::google::protobuf::Arena* arena) const {
  HideAndSeekStageInfo* n = new HideAndSeekStageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HideAndSeekStageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HideAndSeekStageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hider_uid_list_.Clear();
  battle_info_map_.Clear();
  ::memset(&is_record_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hunter_uid_) -
      reinterpret_cast<char*>(&is_record_score_)) + sizeof(hunter_uid_));
  _internal_metadata_.Clear();
}

bool HideAndSeekStageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HideAndSeekStageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 hider_uid_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hider_uid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_hider_uid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .proto.HideAndSeekPlayerBattleInfo> battle_info_map = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          HideAndSeekStageInfo_BattleInfoMapEntry::Parser< ::google::protobuf::internal::MapField<
              HideAndSeekStageInfo_BattleInfoMapEntry,
              ::google::protobuf::uint32, ::proto::HideAndSeekPlayerBattleInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::HideAndSeekPlayerBattleInfo > > parser(&battle_info_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_record_score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_record_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.HideAndSeekStageType stage_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stage_type(static_cast< ::proto::HideAndSeekStageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 map_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hunter_uid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hunter_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HideAndSeekStageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HideAndSeekStageInfo)
  return false;
#undef DO_
}

void HideAndSeekStageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HideAndSeekStageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 hider_uid_list = 1;
  if (this->hider_uid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _hider_uid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->hider_uid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->hider_uid_list(i), output);
  }

  // map<uint32, .proto.HideAndSeekPlayerBattleInfo> battle_info_map = 2;
  if (!this->battle_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::HideAndSeekPlayerBattleInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->battle_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->battle_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::HideAndSeekPlayerBattleInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::HideAndSeekPlayerBattleInfo >::const_iterator
          it = this->battle_info_map().begin();
          it != this->battle_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<HideAndSeekStageInfo_BattleInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(battle_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<HideAndSeekStageInfo_BattleInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::HideAndSeekPlayerBattleInfo >::const_iterator
          it = this->battle_info_map().begin();
          it != this->battle_info_map().end(); ++it) {
        entry.reset(battle_info_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    }
  }

  // bool is_record_score = 3;
  if (this->is_record_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_record_score(), output);
  }

  // .proto.HideAndSeekStageType stage_type = 7;
  if (this->stage_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->stage_type(), output);
  }

  // uint32 map_id = 8;
  if (this->map_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->map_id(), output);
  }

  // uint32 hunter_uid = 10;
  if (this->hunter_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->hunter_uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HideAndSeekStageInfo)
}

::google::protobuf::uint8* HideAndSeekStageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HideAndSeekStageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 hider_uid_list = 1;
  if (this->hider_uid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _hider_uid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->hider_uid_list_, target);
  }

  // map<uint32, .proto.HideAndSeekPlayerBattleInfo> battle_info_map = 2;
  if (!this->battle_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::HideAndSeekPlayerBattleInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->battle_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->battle_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::HideAndSeekPlayerBattleInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::HideAndSeekPlayerBattleInfo >::const_iterator
          it = this->battle_info_map().begin();
          it != this->battle_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<HideAndSeekStageInfo_BattleInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(battle_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<HideAndSeekStageInfo_BattleInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::HideAndSeekPlayerBattleInfo >::const_iterator
          it = this->battle_info_map().begin();
          it != this->battle_info_map().end(); ++it) {
        entry.reset(battle_info_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    }
  }

  // bool is_record_score = 3;
  if (this->is_record_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_record_score(), target);
  }

  // .proto.HideAndSeekStageType stage_type = 7;
  if (this->stage_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->stage_type(), target);
  }

  // uint32 map_id = 8;
  if (this->map_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->map_id(), target);
  }

  // uint32 hunter_uid = 10;
  if (this->hunter_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->hunter_uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HideAndSeekStageInfo)
  return target;
}

size_t HideAndSeekStageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HideAndSeekStageInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 hider_uid_list = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->hider_uid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _hider_uid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<uint32, .proto.HideAndSeekPlayerBattleInfo> battle_info_map = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->battle_info_map_size());
  {
    ::google::protobuf::scoped_ptr<HideAndSeekStageInfo_BattleInfoMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::HideAndSeekPlayerBattleInfo >::const_iterator
        it = this->battle_info_map().begin();
        it != this->battle_info_map().end(); ++it) {
      entry.reset(battle_info_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // bool is_record_score = 3;
  if (this->is_record_score() != 0) {
    total_size += 1 + 1;
  }

  // .proto.HideAndSeekStageType stage_type = 7;
  if (this->stage_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage_type());
  }

  // uint32 map_id = 8;
  if (this->map_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->map_id());
  }

  // uint32 hunter_uid = 10;
  if (this->hunter_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hunter_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HideAndSeekStageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HideAndSeekStageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HideAndSeekStageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HideAndSeekStageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HideAndSeekStageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HideAndSeekStageInfo)
    MergeFrom(*source);
  }
}

void HideAndSeekStageInfo::MergeFrom(const HideAndSeekStageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HideAndSeekStageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hider_uid_list_.MergeFrom(from.hider_uid_list_);
  battle_info_map_.MergeFrom(from.battle_info_map_);
  if (from.is_record_score() != 0) {
    set_is_record_score(from.is_record_score());
  }
  if (from.stage_type() != 0) {
    set_stage_type(from.stage_type());
  }
  if (from.map_id() != 0) {
    set_map_id(from.map_id());
  }
  if (from.hunter_uid() != 0) {
    set_hunter_uid(from.hunter_uid());
  }
}

void HideAndSeekStageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HideAndSeekStageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HideAndSeekStageInfo::CopyFrom(const HideAndSeekStageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HideAndSeekStageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideAndSeekStageInfo::IsInitialized() const {
  return true;
}

void HideAndSeekStageInfo::Swap(HideAndSeekStageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HideAndSeekStageInfo::InternalSwap(HideAndSeekStageInfo* other) {
  using std::swap;
  hider_uid_list_.InternalSwap(&other->hider_uid_list_);
  battle_info_map_.Swap(&other->battle_info_map_);
  swap(is_record_score_, other->is_record_score_);
  swap(stage_type_, other->stage_type_);
  swap(map_id_, other->map_id_);
  swap(hunter_uid_, other->hunter_uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HideAndSeekStageInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HideAndSeekStageInfo

// uint32 map_id = 8;
void HideAndSeekStageInfo::clear_map_id() {
  map_id_ = 0u;
}
::google::protobuf::uint32 HideAndSeekStageInfo::map_id() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekStageInfo.map_id)
  return map_id_;
}
void HideAndSeekStageInfo::set_map_id(::google::protobuf::uint32 value) {
  
  map_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekStageInfo.map_id)
}

// bool is_record_score = 3;
void HideAndSeekStageInfo::clear_is_record_score() {
  is_record_score_ = false;
}
bool HideAndSeekStageInfo::is_record_score() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekStageInfo.is_record_score)
  return is_record_score_;
}
void HideAndSeekStageInfo::set_is_record_score(bool value) {
  
  is_record_score_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekStageInfo.is_record_score)
}

// .proto.HideAndSeekStageType stage_type = 7;
void HideAndSeekStageInfo::clear_stage_type() {
  stage_type_ = 0;
}
::proto::HideAndSeekStageType HideAndSeekStageInfo::stage_type() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekStageInfo.stage_type)
  return static_cast< ::proto::HideAndSeekStageType >(stage_type_);
}
void HideAndSeekStageInfo::set_stage_type(::proto::HideAndSeekStageType value) {
  
  stage_type_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekStageInfo.stage_type)
}

// map<uint32, .proto.HideAndSeekPlayerBattleInfo> battle_info_map = 2;
int HideAndSeekStageInfo::battle_info_map_size() const {
  return battle_info_map_.size();
}
void HideAndSeekStageInfo::clear_battle_info_map() {
  battle_info_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::HideAndSeekPlayerBattleInfo >&
HideAndSeekStageInfo::battle_info_map() const {
  // @@protoc_insertion_point(field_map:proto.HideAndSeekStageInfo.battle_info_map)
  return battle_info_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::HideAndSeekPlayerBattleInfo >*
HideAndSeekStageInfo::mutable_battle_info_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.HideAndSeekStageInfo.battle_info_map)
  return battle_info_map_.MutableMap();
}

// repeated uint32 hider_uid_list = 1;
int HideAndSeekStageInfo::hider_uid_list_size() const {
  return hider_uid_list_.size();
}
void HideAndSeekStageInfo::clear_hider_uid_list() {
  hider_uid_list_.Clear();
}
::google::protobuf::uint32 HideAndSeekStageInfo::hider_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekStageInfo.hider_uid_list)
  return hider_uid_list_.Get(index);
}
void HideAndSeekStageInfo::set_hider_uid_list(int index, ::google::protobuf::uint32 value) {
  hider_uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.HideAndSeekStageInfo.hider_uid_list)
}
void HideAndSeekStageInfo::add_hider_uid_list(::google::protobuf::uint32 value) {
  hider_uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.HideAndSeekStageInfo.hider_uid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
HideAndSeekStageInfo::hider_uid_list() const {
  // @@protoc_insertion_point(field_list:proto.HideAndSeekStageInfo.hider_uid_list)
  return hider_uid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
HideAndSeekStageInfo::mutable_hider_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.HideAndSeekStageInfo.hider_uid_list)
  return &hider_uid_list_;
}

// uint32 hunter_uid = 10;
void HideAndSeekStageInfo::clear_hunter_uid() {
  hunter_uid_ = 0u;
}
::google::protobuf::uint32 HideAndSeekStageInfo::hunter_uid() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekStageInfo.hunter_uid)
  return hunter_uid_;
}
void HideAndSeekStageInfo::set_hunter_uid(::google::protobuf::uint32 value) {
  
  hunter_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekStageInfo.hunter_uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HideAndSeekSelectAvatarReq::kAvatarIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HideAndSeekSelectAvatarReq::HideAndSeekSelectAvatarReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HideAndSeekSelectAvatarReq)
}
HideAndSeekSelectAvatarReq::HideAndSeekSelectAvatarReq(const HideAndSeekSelectAvatarReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avatar_id_ = from.avatar_id_;
  // @@protoc_insertion_point(copy_constructor:proto.HideAndSeekSelectAvatarReq)
}

void HideAndSeekSelectAvatarReq::SharedCtor() {
  avatar_id_ = 0u;
  _cached_size_ = 0;
}

HideAndSeekSelectAvatarReq::~HideAndSeekSelectAvatarReq() {
  // @@protoc_insertion_point(destructor:proto.HideAndSeekSelectAvatarReq)
  SharedDtor();
}

void HideAndSeekSelectAvatarReq::SharedDtor() {
}

void HideAndSeekSelectAvatarReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HideAndSeekSelectAvatarReq::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HideAndSeekSelectAvatarReq& HideAndSeekSelectAvatarReq::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

HideAndSeekSelectAvatarReq* HideAndSeekSelectAvatarReq::New(::google::protobuf::Arena* arena) const {
  HideAndSeekSelectAvatarReq* n = new HideAndSeekSelectAvatarReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HideAndSeekSelectAvatarReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HideAndSeekSelectAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_id_ = 0u;
  _internal_metadata_.Clear();
}

bool HideAndSeekSelectAvatarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HideAndSeekSelectAvatarReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 avatar_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HideAndSeekSelectAvatarReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HideAndSeekSelectAvatarReq)
  return false;
#undef DO_
}

void HideAndSeekSelectAvatarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HideAndSeekSelectAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 avatar_id = 8;
  if (this->avatar_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avatar_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HideAndSeekSelectAvatarReq)
}

::google::protobuf::uint8* HideAndSeekSelectAvatarReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HideAndSeekSelectAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 avatar_id = 8;
  if (this->avatar_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avatar_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HideAndSeekSelectAvatarReq)
  return target;
}

size_t HideAndSeekSelectAvatarReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HideAndSeekSelectAvatarReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 avatar_id = 8;
  if (this->avatar_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avatar_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HideAndSeekSelectAvatarReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HideAndSeekSelectAvatarReq)
  GOOGLE_DCHECK_NE(&from, this);
  const HideAndSeekSelectAvatarReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HideAndSeekSelectAvatarReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HideAndSeekSelectAvatarReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HideAndSeekSelectAvatarReq)
    MergeFrom(*source);
  }
}

void HideAndSeekSelectAvatarReq::MergeFrom(const HideAndSeekSelectAvatarReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HideAndSeekSelectAvatarReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatar_id() != 0) {
    set_avatar_id(from.avatar_id());
  }
}

void HideAndSeekSelectAvatarReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HideAndSeekSelectAvatarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HideAndSeekSelectAvatarReq::CopyFrom(const HideAndSeekSelectAvatarReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HideAndSeekSelectAvatarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideAndSeekSelectAvatarReq::IsInitialized() const {
  return true;
}

void HideAndSeekSelectAvatarReq::Swap(HideAndSeekSelectAvatarReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HideAndSeekSelectAvatarReq::InternalSwap(HideAndSeekSelectAvatarReq* other) {
  using std::swap;
  swap(avatar_id_, other->avatar_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HideAndSeekSelectAvatarReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HideAndSeekSelectAvatarReq

// uint32 avatar_id = 8;
void HideAndSeekSelectAvatarReq::clear_avatar_id() {
  avatar_id_ = 0u;
}
::google::protobuf::uint32 HideAndSeekSelectAvatarReq::avatar_id() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSelectAvatarReq.avatar_id)
  return avatar_id_;
}
void HideAndSeekSelectAvatarReq::set_avatar_id(::google::protobuf::uint32 value) {
  
  avatar_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSelectAvatarReq.avatar_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HideAndSeekSelectAvatarRsp::kRetcodeFieldNumber;
const int HideAndSeekSelectAvatarRsp::kAvatarIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HideAndSeekSelectAvatarRsp::HideAndSeekSelectAvatarRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HideAndSeekSelectAvatarRsp)
}
HideAndSeekSelectAvatarRsp::HideAndSeekSelectAvatarRsp(const HideAndSeekSelectAvatarRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&avatar_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(avatar_id_));
  // @@protoc_insertion_point(copy_constructor:proto.HideAndSeekSelectAvatarRsp)
}

void HideAndSeekSelectAvatarRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatar_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(avatar_id_));
  _cached_size_ = 0;
}

HideAndSeekSelectAvatarRsp::~HideAndSeekSelectAvatarRsp() {
  // @@protoc_insertion_point(destructor:proto.HideAndSeekSelectAvatarRsp)
  SharedDtor();
}

void HideAndSeekSelectAvatarRsp::SharedDtor() {
}

void HideAndSeekSelectAvatarRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HideAndSeekSelectAvatarRsp::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HideAndSeekSelectAvatarRsp& HideAndSeekSelectAvatarRsp::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

HideAndSeekSelectAvatarRsp* HideAndSeekSelectAvatarRsp::New(::google::protobuf::Arena* arena) const {
  HideAndSeekSelectAvatarRsp* n = new HideAndSeekSelectAvatarRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HideAndSeekSelectAvatarRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HideAndSeekSelectAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatar_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(avatar_id_));
  _internal_metadata_.Clear();
}

bool HideAndSeekSelectAvatarRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HideAndSeekSelectAvatarRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 avatar_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HideAndSeekSelectAvatarRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HideAndSeekSelectAvatarRsp)
  return false;
#undef DO_
}

void HideAndSeekSelectAvatarRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HideAndSeekSelectAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 2;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retcode(), output);
  }

  // uint32 avatar_id = 3;
  if (this->avatar_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->avatar_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HideAndSeekSelectAvatarRsp)
}

::google::protobuf::uint8* HideAndSeekSelectAvatarRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HideAndSeekSelectAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 2;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->retcode(), target);
  }

  // uint32 avatar_id = 3;
  if (this->avatar_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->avatar_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HideAndSeekSelectAvatarRsp)
  return target;
}

size_t HideAndSeekSelectAvatarRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HideAndSeekSelectAvatarRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 2;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 avatar_id = 3;
  if (this->avatar_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avatar_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HideAndSeekSelectAvatarRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HideAndSeekSelectAvatarRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const HideAndSeekSelectAvatarRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HideAndSeekSelectAvatarRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HideAndSeekSelectAvatarRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HideAndSeekSelectAvatarRsp)
    MergeFrom(*source);
  }
}

void HideAndSeekSelectAvatarRsp::MergeFrom(const HideAndSeekSelectAvatarRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HideAndSeekSelectAvatarRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.avatar_id() != 0) {
    set_avatar_id(from.avatar_id());
  }
}

void HideAndSeekSelectAvatarRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HideAndSeekSelectAvatarRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HideAndSeekSelectAvatarRsp::CopyFrom(const HideAndSeekSelectAvatarRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HideAndSeekSelectAvatarRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideAndSeekSelectAvatarRsp::IsInitialized() const {
  return true;
}

void HideAndSeekSelectAvatarRsp::Swap(HideAndSeekSelectAvatarRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HideAndSeekSelectAvatarRsp::InternalSwap(HideAndSeekSelectAvatarRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(avatar_id_, other->avatar_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HideAndSeekSelectAvatarRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HideAndSeekSelectAvatarRsp

// int32 retcode = 2;
void HideAndSeekSelectAvatarRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 HideAndSeekSelectAvatarRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSelectAvatarRsp.retcode)
  return retcode_;
}
void HideAndSeekSelectAvatarRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSelectAvatarRsp.retcode)
}

// uint32 avatar_id = 3;
void HideAndSeekSelectAvatarRsp::clear_avatar_id() {
  avatar_id_ = 0u;
}
::google::protobuf::uint32 HideAndSeekSelectAvatarRsp::avatar_id() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSelectAvatarRsp.avatar_id)
  return avatar_id_;
}
void HideAndSeekSelectAvatarRsp::set_avatar_id(::google::protobuf::uint32 value) {
  
  avatar_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSelectAvatarRsp.avatar_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HideAndSeekSetReadyReq::HideAndSeekSetReadyReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HideAndSeekSetReadyReq)
}
HideAndSeekSetReadyReq::HideAndSeekSetReadyReq(const HideAndSeekSetReadyReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.HideAndSeekSetReadyReq)
}

void HideAndSeekSetReadyReq::SharedCtor() {
  _cached_size_ = 0;
}

HideAndSeekSetReadyReq::~HideAndSeekSetReadyReq() {
  // @@protoc_insertion_point(destructor:proto.HideAndSeekSetReadyReq)
  SharedDtor();
}

void HideAndSeekSetReadyReq::SharedDtor() {
}

void HideAndSeekSetReadyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HideAndSeekSetReadyReq::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HideAndSeekSetReadyReq& HideAndSeekSetReadyReq::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

HideAndSeekSetReadyReq* HideAndSeekSetReadyReq::New(::google::protobuf::Arena* arena) const {
  HideAndSeekSetReadyReq* n = new HideAndSeekSetReadyReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HideAndSeekSetReadyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HideAndSeekSetReadyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool HideAndSeekSetReadyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HideAndSeekSetReadyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HideAndSeekSetReadyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HideAndSeekSetReadyReq)
  return false;
#undef DO_
}

void HideAndSeekSetReadyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HideAndSeekSetReadyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HideAndSeekSetReadyReq)
}

::google::protobuf::uint8* HideAndSeekSetReadyReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HideAndSeekSetReadyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HideAndSeekSetReadyReq)
  return target;
}

size_t HideAndSeekSetReadyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HideAndSeekSetReadyReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HideAndSeekSetReadyReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HideAndSeekSetReadyReq)
  GOOGLE_DCHECK_NE(&from, this);
  const HideAndSeekSetReadyReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HideAndSeekSetReadyReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HideAndSeekSetReadyReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HideAndSeekSetReadyReq)
    MergeFrom(*source);
  }
}

void HideAndSeekSetReadyReq::MergeFrom(const HideAndSeekSetReadyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HideAndSeekSetReadyReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HideAndSeekSetReadyReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HideAndSeekSetReadyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HideAndSeekSetReadyReq::CopyFrom(const HideAndSeekSetReadyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HideAndSeekSetReadyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideAndSeekSetReadyReq::IsInitialized() const {
  return true;
}

void HideAndSeekSetReadyReq::Swap(HideAndSeekSetReadyReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HideAndSeekSetReadyReq::InternalSwap(HideAndSeekSetReadyReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HideAndSeekSetReadyReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HideAndSeekSetReadyReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HideAndSeekSetReadyRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HideAndSeekSetReadyRsp::HideAndSeekSetReadyRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HideAndSeekSetReadyRsp)
}
HideAndSeekSetReadyRsp::HideAndSeekSetReadyRsp(const HideAndSeekSetReadyRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.HideAndSeekSetReadyRsp)
}

void HideAndSeekSetReadyRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

HideAndSeekSetReadyRsp::~HideAndSeekSetReadyRsp() {
  // @@protoc_insertion_point(destructor:proto.HideAndSeekSetReadyRsp)
  SharedDtor();
}

void HideAndSeekSetReadyRsp::SharedDtor() {
}

void HideAndSeekSetReadyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HideAndSeekSetReadyRsp::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HideAndSeekSetReadyRsp& HideAndSeekSetReadyRsp::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

HideAndSeekSetReadyRsp* HideAndSeekSetReadyRsp::New(::google::protobuf::Arena* arena) const {
  HideAndSeekSetReadyRsp* n = new HideAndSeekSetReadyRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HideAndSeekSetReadyRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HideAndSeekSetReadyRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool HideAndSeekSetReadyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HideAndSeekSetReadyRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HideAndSeekSetReadyRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HideAndSeekSetReadyRsp)
  return false;
#undef DO_
}

void HideAndSeekSetReadyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HideAndSeekSetReadyRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 11;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HideAndSeekSetReadyRsp)
}

::google::protobuf::uint8* HideAndSeekSetReadyRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HideAndSeekSetReadyRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 11;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HideAndSeekSetReadyRsp)
  return target;
}

size_t HideAndSeekSetReadyRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HideAndSeekSetReadyRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 11;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HideAndSeekSetReadyRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HideAndSeekSetReadyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const HideAndSeekSetReadyRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HideAndSeekSetReadyRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HideAndSeekSetReadyRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HideAndSeekSetReadyRsp)
    MergeFrom(*source);
  }
}

void HideAndSeekSetReadyRsp::MergeFrom(const HideAndSeekSetReadyRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HideAndSeekSetReadyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void HideAndSeekSetReadyRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HideAndSeekSetReadyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HideAndSeekSetReadyRsp::CopyFrom(const HideAndSeekSetReadyRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HideAndSeekSetReadyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideAndSeekSetReadyRsp::IsInitialized() const {
  return true;
}

void HideAndSeekSetReadyRsp::Swap(HideAndSeekSetReadyRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HideAndSeekSetReadyRsp::InternalSwap(HideAndSeekSetReadyRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HideAndSeekSetReadyRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HideAndSeekSetReadyRsp

// int32 retcode = 11;
void HideAndSeekSetReadyRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 HideAndSeekSetReadyRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSetReadyRsp.retcode)
  return retcode_;
}
void HideAndSeekSetReadyRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSetReadyRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HideAndSeekSettleInfo::kUidFieldNumber;
const int HideAndSeekSettleInfo::kProfilePictureFieldNumber;
const int HideAndSeekSettleInfo::kCardListFieldNumber;
const int HideAndSeekSettleInfo::kNicknameFieldNumber;
const int HideAndSeekSettleInfo::kHeadImageFieldNumber;
const int HideAndSeekSettleInfo::kOnlineIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HideAndSeekSettleInfo::HideAndSeekSettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HideAndSeekSettleInfo)
}
HideAndSeekSettleInfo::HideAndSeekSettleInfo(const HideAndSeekSettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      card_list_(from.card_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nickname().size() > 0) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.online_id().size() > 0) {
    online_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.online_id_);
  }
  if (from.has_profile_picture()) {
    profile_picture_ = new ::proto::ProfilePicture(*from.profile_picture_);
  } else {
    profile_picture_ = NULL;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&head_image_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(head_image_));
  // @@protoc_insertion_point(copy_constructor:proto.HideAndSeekSettleInfo)
}

void HideAndSeekSettleInfo::SharedCtor() {
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&profile_picture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&head_image_) -
      reinterpret_cast<char*>(&profile_picture_)) + sizeof(head_image_));
  _cached_size_ = 0;
}

HideAndSeekSettleInfo::~HideAndSeekSettleInfo() {
  // @@protoc_insertion_point(destructor:proto.HideAndSeekSettleInfo)
  SharedDtor();
}

void HideAndSeekSettleInfo::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  online_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete profile_picture_;
}

void HideAndSeekSettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HideAndSeekSettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HideAndSeekSettleInfo& HideAndSeekSettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

HideAndSeekSettleInfo* HideAndSeekSettleInfo::New(::google::protobuf::Arena* arena) const {
  HideAndSeekSettleInfo* n = new HideAndSeekSettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HideAndSeekSettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HideAndSeekSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_list_.Clear();
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  online_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && profile_picture_ != NULL) {
    delete profile_picture_;
  }
  profile_picture_ = NULL;
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&head_image_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(head_image_));
  _internal_metadata_.Clear();
}

bool HideAndSeekSettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HideAndSeekSettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.ProfilePicture profile_picture = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profile_picture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nickname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nickname().data(), static_cast<int>(this->nickname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.HideAndSeekSettleInfo.nickname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 head_image = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ExhibitionDisplayInfo card_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string online_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_online_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->online_id().data(), static_cast<int>(this->online_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.HideAndSeekSettleInfo.online_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HideAndSeekSettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HideAndSeekSettleInfo)
  return false;
#undef DO_
}

void HideAndSeekSettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HideAndSeekSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ProfilePicture profile_picture = 1;
  if (this->has_profile_picture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->profile_picture_, output);
  }

  // uint32 uid = 2;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // string nickname = 3;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.HideAndSeekSettleInfo.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // uint32 head_image = 4;
  if (this->head_image() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->head_image(), output);
  }

  // repeated .proto.ExhibitionDisplayInfo card_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->card_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->card_list(static_cast<int>(i)), output);
  }

  // string online_id = 10;
  if (this->online_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->online_id().data(), static_cast<int>(this->online_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.HideAndSeekSettleInfo.online_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->online_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HideAndSeekSettleInfo)
}

::google::protobuf::uint8* HideAndSeekSettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HideAndSeekSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ProfilePicture profile_picture = 1;
  if (this->has_profile_picture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->profile_picture_, deterministic, target);
  }

  // uint32 uid = 2;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // string nickname = 3;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.HideAndSeekSettleInfo.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // uint32 head_image = 4;
  if (this->head_image() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->head_image(), target);
  }

  // repeated .proto.ExhibitionDisplayInfo card_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->card_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->card_list(static_cast<int>(i)), deterministic, target);
  }

  // string online_id = 10;
  if (this->online_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->online_id().data(), static_cast<int>(this->online_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.HideAndSeekSettleInfo.online_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->online_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HideAndSeekSettleInfo)
  return target;
}

size_t HideAndSeekSettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HideAndSeekSettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ExhibitionDisplayInfo card_list = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->card_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card_list(static_cast<int>(i)));
    }
  }

  // string nickname = 3;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  // string online_id = 10;
  if (this->online_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->online_id());
  }

  // .proto.ProfilePicture profile_picture = 1;
  if (this->has_profile_picture()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->profile_picture_);
  }

  // uint32 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // uint32 head_image = 4;
  if (this->head_image() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->head_image());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HideAndSeekSettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HideAndSeekSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HideAndSeekSettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HideAndSeekSettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HideAndSeekSettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HideAndSeekSettleInfo)
    MergeFrom(*source);
  }
}

void HideAndSeekSettleInfo::MergeFrom(const HideAndSeekSettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HideAndSeekSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_list_.MergeFrom(from.card_list_);
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.online_id().size() > 0) {

    online_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.online_id_);
  }
  if (from.has_profile_picture()) {
    mutable_profile_picture()->::proto::ProfilePicture::MergeFrom(from.profile_picture());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.head_image() != 0) {
    set_head_image(from.head_image());
  }
}

void HideAndSeekSettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HideAndSeekSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HideAndSeekSettleInfo::CopyFrom(const HideAndSeekSettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HideAndSeekSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideAndSeekSettleInfo::IsInitialized() const {
  return true;
}

void HideAndSeekSettleInfo::Swap(HideAndSeekSettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HideAndSeekSettleInfo::InternalSwap(HideAndSeekSettleInfo* other) {
  using std::swap;
  card_list_.InternalSwap(&other->card_list_);
  nickname_.Swap(&other->nickname_);
  online_id_.Swap(&other->online_id_);
  swap(profile_picture_, other->profile_picture_);
  swap(uid_, other->uid_);
  swap(head_image_, other->head_image_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HideAndSeekSettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HideAndSeekSettleInfo

// uint32 uid = 2;
void HideAndSeekSettleInfo::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 HideAndSeekSettleInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleInfo.uid)
  return uid_;
}
void HideAndSeekSettleInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSettleInfo.uid)
}

// .proto.ProfilePicture profile_picture = 1;
bool HideAndSeekSettleInfo::has_profile_picture() const {
  return this != internal_default_instance() && profile_picture_ != NULL;
}
void HideAndSeekSettleInfo::clear_profile_picture() {
  if (GetArenaNoVirtual() == NULL && profile_picture_ != NULL) delete profile_picture_;
  profile_picture_ = NULL;
}
const ::proto::ProfilePicture& HideAndSeekSettleInfo::profile_picture() const {
  const ::proto::ProfilePicture* p = profile_picture_;
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleInfo.profile_picture)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ProfilePicture*>(
      &::proto::_ProfilePicture_default_instance_);
}
::proto::ProfilePicture* HideAndSeekSettleInfo::mutable_profile_picture() {
  
  if (profile_picture_ == NULL) {
    profile_picture_ = new ::proto::ProfilePicture;
  }
  // @@protoc_insertion_point(field_mutable:proto.HideAndSeekSettleInfo.profile_picture)
  return profile_picture_;
}
::proto::ProfilePicture* HideAndSeekSettleInfo::release_profile_picture() {
  // @@protoc_insertion_point(field_release:proto.HideAndSeekSettleInfo.profile_picture)
  
  ::proto::ProfilePicture* temp = profile_picture_;
  profile_picture_ = NULL;
  return temp;
}
void HideAndSeekSettleInfo::set_allocated_profile_picture(::proto::ProfilePicture* profile_picture) {
  delete profile_picture_;
  profile_picture_ = profile_picture;
  if (profile_picture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HideAndSeekSettleInfo.profile_picture)
}

// repeated .proto.ExhibitionDisplayInfo card_list = 8;
int HideAndSeekSettleInfo::card_list_size() const {
  return card_list_.size();
}
void HideAndSeekSettleInfo::clear_card_list() {
  card_list_.Clear();
}
const ::proto::ExhibitionDisplayInfo& HideAndSeekSettleInfo::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleInfo.card_list)
  return card_list_.Get(index);
}
::proto::ExhibitionDisplayInfo* HideAndSeekSettleInfo::mutable_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.HideAndSeekSettleInfo.card_list)
  return card_list_.Mutable(index);
}
::proto::ExhibitionDisplayInfo* HideAndSeekSettleInfo::add_card_list() {
  // @@protoc_insertion_point(field_add:proto.HideAndSeekSettleInfo.card_list)
  return card_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >*
HideAndSeekSettleInfo::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.HideAndSeekSettleInfo.card_list)
  return &card_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >&
HideAndSeekSettleInfo::card_list() const {
  // @@protoc_insertion_point(field_list:proto.HideAndSeekSettleInfo.card_list)
  return card_list_;
}

// string nickname = 3;
void HideAndSeekSettleInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HideAndSeekSettleInfo::nickname() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleInfo.nickname)
  return nickname_.GetNoArena();
}
void HideAndSeekSettleInfo::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSettleInfo.nickname)
}
#if LANG_CXX11
void HideAndSeekSettleInfo::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.HideAndSeekSettleInfo.nickname)
}
#endif
void HideAndSeekSettleInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.HideAndSeekSettleInfo.nickname)
}
void HideAndSeekSettleInfo::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.HideAndSeekSettleInfo.nickname)
}
::std::string* HideAndSeekSettleInfo::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:proto.HideAndSeekSettleInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HideAndSeekSettleInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:proto.HideAndSeekSettleInfo.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HideAndSeekSettleInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.HideAndSeekSettleInfo.nickname)
}

// uint32 head_image = 4;
void HideAndSeekSettleInfo::clear_head_image() {
  head_image_ = 0u;
}
::google::protobuf::uint32 HideAndSeekSettleInfo::head_image() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleInfo.head_image)
  return head_image_;
}
void HideAndSeekSettleInfo::set_head_image(::google::protobuf::uint32 value) {
  
  head_image_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSettleInfo.head_image)
}

// string online_id = 10;
void HideAndSeekSettleInfo::clear_online_id() {
  online_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HideAndSeekSettleInfo::online_id() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleInfo.online_id)
  return online_id_.GetNoArena();
}
void HideAndSeekSettleInfo::set_online_id(const ::std::string& value) {
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSettleInfo.online_id)
}
#if LANG_CXX11
void HideAndSeekSettleInfo::set_online_id(::std::string&& value) {
  
  online_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.HideAndSeekSettleInfo.online_id)
}
#endif
void HideAndSeekSettleInfo::set_online_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.HideAndSeekSettleInfo.online_id)
}
void HideAndSeekSettleInfo::set_online_id(const char* value, size_t size) {
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.HideAndSeekSettleInfo.online_id)
}
::std::string* HideAndSeekSettleInfo::mutable_online_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.HideAndSeekSettleInfo.online_id)
  return online_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HideAndSeekSettleInfo::release_online_id() {
  // @@protoc_insertion_point(field_release:proto.HideAndSeekSettleInfo.online_id)
  
  return online_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HideAndSeekSettleInfo::set_allocated_online_id(::std::string* online_id) {
  if (online_id != NULL) {
    
  } else {
    
  }
  online_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), online_id);
  // @@protoc_insertion_point(field_set_allocated:proto.HideAndSeekSettleInfo.online_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HideAndSeekSettleNotify::kCostTimeFieldNumber;
const int HideAndSeekSettleNotify::kSettleInfoListFieldNumber;
const int HideAndSeekSettleNotify::kWinnerListFieldNumber;
const int HideAndSeekSettleNotify::kReasonFieldNumber;
const int HideAndSeekSettleNotify::kPlayIndexFieldNumber;
const int HideAndSeekSettleNotify::kIsRecordScoreFieldNumber;
const int HideAndSeekSettleNotify::kScoreListFieldNumber;
const int HideAndSeekSettleNotify::kStageTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HideAndSeekSettleNotify::HideAndSeekSettleNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HideAndSeekSettleNotify)
}
HideAndSeekSettleNotify::HideAndSeekSettleNotify(const HideAndSeekSettleNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      settle_info_list_(from.settle_info_list_),
      score_list_(from.score_list_),
      winner_list_(from.winner_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cost_time_, &from.cost_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_index_) -
    reinterpret_cast<char*>(&cost_time_)) + sizeof(play_index_));
  // @@protoc_insertion_point(copy_constructor:proto.HideAndSeekSettleNotify)
}

void HideAndSeekSettleNotify::SharedCtor() {
  ::memset(&cost_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_index_) -
      reinterpret_cast<char*>(&cost_time_)) + sizeof(play_index_));
  _cached_size_ = 0;
}

HideAndSeekSettleNotify::~HideAndSeekSettleNotify() {
  // @@protoc_insertion_point(destructor:proto.HideAndSeekSettleNotify)
  SharedDtor();
}

void HideAndSeekSettleNotify::SharedDtor() {
}

void HideAndSeekSettleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HideAndSeekSettleNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HideAndSeekSettleNotify& HideAndSeekSettleNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

HideAndSeekSettleNotify* HideAndSeekSettleNotify::New(::google::protobuf::Arena* arena) const {
  HideAndSeekSettleNotify* n = new HideAndSeekSettleNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HideAndSeekSettleNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HideAndSeekSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  settle_info_list_.Clear();
  score_list_.Clear();
  winner_list_.Clear();
  ::memset(&cost_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_index_) -
      reinterpret_cast<char*>(&cost_time_)) + sizeof(play_index_));
  _internal_metadata_.Clear();
}

bool HideAndSeekSettleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HideAndSeekSettleNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 cost_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.HideAndSeekSettleNotify.SettleReason reason = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::HideAndSeekSettleNotify_SettleReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_record_score = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_record_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.HideAndSeekSettleInfo settle_info_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_settle_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ExhibitionDisplayInfo score_list = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_score_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_index = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 stage_type = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 winner_list = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_winner_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 122u, input, this->mutable_winner_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HideAndSeekSettleNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HideAndSeekSettleNotify)
  return false;
#undef DO_
}

void HideAndSeekSettleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HideAndSeekSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cost_time = 2;
  if (this->cost_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cost_time(), output);
  }

  // .proto.HideAndSeekSettleNotify.SettleReason reason = 4;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->reason(), output);
  }

  // bool is_record_score = 6;
  if (this->is_record_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_record_score(), output);
  }

  // repeated .proto.HideAndSeekSettleInfo settle_info_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settle_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->settle_info_list(static_cast<int>(i)), output);
  }

  // repeated .proto.ExhibitionDisplayInfo score_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->score_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->score_list(static_cast<int>(i)), output);
  }

  // uint32 play_index = 13;
  if (this->play_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->play_index(), output);
  }

  // uint32 stage_type = 14;
  if (this->stage_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->stage_type(), output);
  }

  // repeated uint32 winner_list = 15;
  if (this->winner_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(15, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _winner_list_cached_byte_size_));
  }
  for (int i = 0, n = this->winner_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->winner_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HideAndSeekSettleNotify)
}

::google::protobuf::uint8* HideAndSeekSettleNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HideAndSeekSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cost_time = 2;
  if (this->cost_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cost_time(), target);
  }

  // .proto.HideAndSeekSettleNotify.SettleReason reason = 4;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->reason(), target);
  }

  // bool is_record_score = 6;
  if (this->is_record_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_record_score(), target);
  }

  // repeated .proto.HideAndSeekSettleInfo settle_info_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settle_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->settle_info_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.ExhibitionDisplayInfo score_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->score_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->score_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 play_index = 13;
  if (this->play_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->play_index(), target);
  }

  // uint32 stage_type = 14;
  if (this->stage_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->stage_type(), target);
  }

  // repeated uint32 winner_list = 15;
  if (this->winner_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      15,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _winner_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->winner_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HideAndSeekSettleNotify)
  return target;
}

size_t HideAndSeekSettleNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HideAndSeekSettleNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.HideAndSeekSettleInfo settle_info_list = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->settle_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settle_info_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.ExhibitionDisplayInfo score_list = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->score_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->score_list(static_cast<int>(i)));
    }
  }

  // repeated uint32 winner_list = 15;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->winner_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _winner_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 cost_time = 2;
  if (this->cost_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cost_time());
  }

  // .proto.HideAndSeekSettleNotify.SettleReason reason = 4;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  // uint32 stage_type = 14;
  if (this->stage_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stage_type());
  }

  // bool is_record_score = 6;
  if (this->is_record_score() != 0) {
    total_size += 1 + 1;
  }

  // uint32 play_index = 13;
  if (this->play_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HideAndSeekSettleNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HideAndSeekSettleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const HideAndSeekSettleNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HideAndSeekSettleNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HideAndSeekSettleNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HideAndSeekSettleNotify)
    MergeFrom(*source);
  }
}

void HideAndSeekSettleNotify::MergeFrom(const HideAndSeekSettleNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HideAndSeekSettleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  settle_info_list_.MergeFrom(from.settle_info_list_);
  score_list_.MergeFrom(from.score_list_);
  winner_list_.MergeFrom(from.winner_list_);
  if (from.cost_time() != 0) {
    set_cost_time(from.cost_time());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.stage_type() != 0) {
    set_stage_type(from.stage_type());
  }
  if (from.is_record_score() != 0) {
    set_is_record_score(from.is_record_score());
  }
  if (from.play_index() != 0) {
    set_play_index(from.play_index());
  }
}

void HideAndSeekSettleNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HideAndSeekSettleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HideAndSeekSettleNotify::CopyFrom(const HideAndSeekSettleNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HideAndSeekSettleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideAndSeekSettleNotify::IsInitialized() const {
  return true;
}

void HideAndSeekSettleNotify::Swap(HideAndSeekSettleNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HideAndSeekSettleNotify::InternalSwap(HideAndSeekSettleNotify* other) {
  using std::swap;
  settle_info_list_.InternalSwap(&other->settle_info_list_);
  score_list_.InternalSwap(&other->score_list_);
  winner_list_.InternalSwap(&other->winner_list_);
  swap(cost_time_, other->cost_time_);
  swap(reason_, other->reason_);
  swap(stage_type_, other->stage_type_);
  swap(is_record_score_, other->is_record_score_);
  swap(play_index_, other->play_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HideAndSeekSettleNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HideAndSeekSettleNotify

// uint32 cost_time = 2;
void HideAndSeekSettleNotify::clear_cost_time() {
  cost_time_ = 0u;
}
::google::protobuf::uint32 HideAndSeekSettleNotify::cost_time() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleNotify.cost_time)
  return cost_time_;
}
void HideAndSeekSettleNotify::set_cost_time(::google::protobuf::uint32 value) {
  
  cost_time_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSettleNotify.cost_time)
}

// repeated .proto.HideAndSeekSettleInfo settle_info_list = 8;
int HideAndSeekSettleNotify::settle_info_list_size() const {
  return settle_info_list_.size();
}
void HideAndSeekSettleNotify::clear_settle_info_list() {
  settle_info_list_.Clear();
}
const ::proto::HideAndSeekSettleInfo& HideAndSeekSettleNotify::settle_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleNotify.settle_info_list)
  return settle_info_list_.Get(index);
}
::proto::HideAndSeekSettleInfo* HideAndSeekSettleNotify::mutable_settle_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.HideAndSeekSettleNotify.settle_info_list)
  return settle_info_list_.Mutable(index);
}
::proto::HideAndSeekSettleInfo* HideAndSeekSettleNotify::add_settle_info_list() {
  // @@protoc_insertion_point(field_add:proto.HideAndSeekSettleNotify.settle_info_list)
  return settle_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::HideAndSeekSettleInfo >*
HideAndSeekSettleNotify::mutable_settle_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.HideAndSeekSettleNotify.settle_info_list)
  return &settle_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::HideAndSeekSettleInfo >&
HideAndSeekSettleNotify::settle_info_list() const {
  // @@protoc_insertion_point(field_list:proto.HideAndSeekSettleNotify.settle_info_list)
  return settle_info_list_;
}

// repeated uint32 winner_list = 15;
int HideAndSeekSettleNotify::winner_list_size() const {
  return winner_list_.size();
}
void HideAndSeekSettleNotify::clear_winner_list() {
  winner_list_.Clear();
}
::google::protobuf::uint32 HideAndSeekSettleNotify::winner_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleNotify.winner_list)
  return winner_list_.Get(index);
}
void HideAndSeekSettleNotify::set_winner_list(int index, ::google::protobuf::uint32 value) {
  winner_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSettleNotify.winner_list)
}
void HideAndSeekSettleNotify::add_winner_list(::google::protobuf::uint32 value) {
  winner_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.HideAndSeekSettleNotify.winner_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
HideAndSeekSettleNotify::winner_list() const {
  // @@protoc_insertion_point(field_list:proto.HideAndSeekSettleNotify.winner_list)
  return winner_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
HideAndSeekSettleNotify::mutable_winner_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.HideAndSeekSettleNotify.winner_list)
  return &winner_list_;
}

// .proto.HideAndSeekSettleNotify.SettleReason reason = 4;
void HideAndSeekSettleNotify::clear_reason() {
  reason_ = 0;
}
::proto::HideAndSeekSettleNotify_SettleReason HideAndSeekSettleNotify::reason() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleNotify.reason)
  return static_cast< ::proto::HideAndSeekSettleNotify_SettleReason >(reason_);
}
void HideAndSeekSettleNotify::set_reason(::proto::HideAndSeekSettleNotify_SettleReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSettleNotify.reason)
}

// uint32 play_index = 13;
void HideAndSeekSettleNotify::clear_play_index() {
  play_index_ = 0u;
}
::google::protobuf::uint32 HideAndSeekSettleNotify::play_index() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleNotify.play_index)
  return play_index_;
}
void HideAndSeekSettleNotify::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSettleNotify.play_index)
}

// bool is_record_score = 6;
void HideAndSeekSettleNotify::clear_is_record_score() {
  is_record_score_ = false;
}
bool HideAndSeekSettleNotify::is_record_score() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleNotify.is_record_score)
  return is_record_score_;
}
void HideAndSeekSettleNotify::set_is_record_score(bool value) {
  
  is_record_score_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSettleNotify.is_record_score)
}

// repeated .proto.ExhibitionDisplayInfo score_list = 9;
int HideAndSeekSettleNotify::score_list_size() const {
  return score_list_.size();
}
void HideAndSeekSettleNotify::clear_score_list() {
  score_list_.Clear();
}
const ::proto::ExhibitionDisplayInfo& HideAndSeekSettleNotify::score_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleNotify.score_list)
  return score_list_.Get(index);
}
::proto::ExhibitionDisplayInfo* HideAndSeekSettleNotify::mutable_score_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.HideAndSeekSettleNotify.score_list)
  return score_list_.Mutable(index);
}
::proto::ExhibitionDisplayInfo* HideAndSeekSettleNotify::add_score_list() {
  // @@protoc_insertion_point(field_add:proto.HideAndSeekSettleNotify.score_list)
  return score_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >*
HideAndSeekSettleNotify::mutable_score_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.HideAndSeekSettleNotify.score_list)
  return &score_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >&
HideAndSeekSettleNotify::score_list() const {
  // @@protoc_insertion_point(field_list:proto.HideAndSeekSettleNotify.score_list)
  return score_list_;
}

// uint32 stage_type = 14;
void HideAndSeekSettleNotify::clear_stage_type() {
  stage_type_ = 0u;
}
::google::protobuf::uint32 HideAndSeekSettleNotify::stage_type() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleNotify.stage_type)
  return stage_type_;
}
void HideAndSeekSettleNotify::set_stage_type(::google::protobuf::uint32 value) {
  
  stage_type_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSettleNotify.stage_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HideAndSeekPlayerReadyNotify::kUidListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HideAndSeekPlayerReadyNotify::HideAndSeekPlayerReadyNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HideAndSeekPlayerReadyNotify)
}
HideAndSeekPlayerReadyNotify::HideAndSeekPlayerReadyNotify(const HideAndSeekPlayerReadyNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      uid_list_(from.uid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.HideAndSeekPlayerReadyNotify)
}

void HideAndSeekPlayerReadyNotify::SharedCtor() {
  _cached_size_ = 0;
}

HideAndSeekPlayerReadyNotify::~HideAndSeekPlayerReadyNotify() {
  // @@protoc_insertion_point(destructor:proto.HideAndSeekPlayerReadyNotify)
  SharedDtor();
}

void HideAndSeekPlayerReadyNotify::SharedDtor() {
}

void HideAndSeekPlayerReadyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HideAndSeekPlayerReadyNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HideAndSeekPlayerReadyNotify& HideAndSeekPlayerReadyNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

HideAndSeekPlayerReadyNotify* HideAndSeekPlayerReadyNotify::New(::google::protobuf::Arena* arena) const {
  HideAndSeekPlayerReadyNotify* n = new HideAndSeekPlayerReadyNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HideAndSeekPlayerReadyNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HideAndSeekPlayerReadyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_list_.Clear();
  _internal_metadata_.Clear();
}

bool HideAndSeekPlayerReadyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HideAndSeekPlayerReadyNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 uid_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_uid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HideAndSeekPlayerReadyNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HideAndSeekPlayerReadyNotify)
  return false;
#undef DO_
}

void HideAndSeekPlayerReadyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HideAndSeekPlayerReadyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 uid_list = 5;
  if (this->uid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _uid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->uid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->uid_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HideAndSeekPlayerReadyNotify)
}

::google::protobuf::uint8* HideAndSeekPlayerReadyNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HideAndSeekPlayerReadyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 uid_list = 5;
  if (this->uid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _uid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->uid_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HideAndSeekPlayerReadyNotify)
  return target;
}

size_t HideAndSeekPlayerReadyNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HideAndSeekPlayerReadyNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 uid_list = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->uid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _uid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HideAndSeekPlayerReadyNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HideAndSeekPlayerReadyNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const HideAndSeekPlayerReadyNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HideAndSeekPlayerReadyNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HideAndSeekPlayerReadyNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HideAndSeekPlayerReadyNotify)
    MergeFrom(*source);
  }
}

void HideAndSeekPlayerReadyNotify::MergeFrom(const HideAndSeekPlayerReadyNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HideAndSeekPlayerReadyNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uid_list_.MergeFrom(from.uid_list_);
}

void HideAndSeekPlayerReadyNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HideAndSeekPlayerReadyNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HideAndSeekPlayerReadyNotify::CopyFrom(const HideAndSeekPlayerReadyNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HideAndSeekPlayerReadyNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideAndSeekPlayerReadyNotify::IsInitialized() const {
  return true;
}

void HideAndSeekPlayerReadyNotify::Swap(HideAndSeekPlayerReadyNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HideAndSeekPlayerReadyNotify::InternalSwap(HideAndSeekPlayerReadyNotify* other) {
  using std::swap;
  uid_list_.InternalSwap(&other->uid_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HideAndSeekPlayerReadyNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HideAndSeekPlayerReadyNotify

// repeated uint32 uid_list = 5;
int HideAndSeekPlayerReadyNotify::uid_list_size() const {
  return uid_list_.size();
}
void HideAndSeekPlayerReadyNotify::clear_uid_list() {
  uid_list_.Clear();
}
::google::protobuf::uint32 HideAndSeekPlayerReadyNotify::uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekPlayerReadyNotify.uid_list)
  return uid_list_.Get(index);
}
void HideAndSeekPlayerReadyNotify::set_uid_list(int index, ::google::protobuf::uint32 value) {
  uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.HideAndSeekPlayerReadyNotify.uid_list)
}
void HideAndSeekPlayerReadyNotify::add_uid_list(::google::protobuf::uint32 value) {
  uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.HideAndSeekPlayerReadyNotify.uid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
HideAndSeekPlayerReadyNotify::uid_list() const {
  // @@protoc_insertion_point(field_list:proto.HideAndSeekPlayerReadyNotify.uid_list)
  return uid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
HideAndSeekPlayerReadyNotify::mutable_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.HideAndSeekPlayerReadyNotify.uid_list)
  return &uid_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HideAndSeekPlayerSetAvatarNotify::kAvatarIdFieldNumber;
const int HideAndSeekPlayerSetAvatarNotify::kCostumeIdFieldNumber;
const int HideAndSeekPlayerSetAvatarNotify::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HideAndSeekPlayerSetAvatarNotify::HideAndSeekPlayerSetAvatarNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HideAndSeekPlayerSetAvatarNotify)
}
HideAndSeekPlayerSetAvatarNotify::HideAndSeekPlayerSetAvatarNotify(const HideAndSeekPlayerSetAvatarNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&avatar_id_, &from.avatar_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&costume_id_) -
    reinterpret_cast<char*>(&avatar_id_)) + sizeof(costume_id_));
  // @@protoc_insertion_point(copy_constructor:proto.HideAndSeekPlayerSetAvatarNotify)
}

void HideAndSeekPlayerSetAvatarNotify::SharedCtor() {
  ::memset(&avatar_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&costume_id_) -
      reinterpret_cast<char*>(&avatar_id_)) + sizeof(costume_id_));
  _cached_size_ = 0;
}

HideAndSeekPlayerSetAvatarNotify::~HideAndSeekPlayerSetAvatarNotify() {
  // @@protoc_insertion_point(destructor:proto.HideAndSeekPlayerSetAvatarNotify)
  SharedDtor();
}

void HideAndSeekPlayerSetAvatarNotify::SharedDtor() {
}

void HideAndSeekPlayerSetAvatarNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HideAndSeekPlayerSetAvatarNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HideAndSeekPlayerSetAvatarNotify& HideAndSeekPlayerSetAvatarNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

HideAndSeekPlayerSetAvatarNotify* HideAndSeekPlayerSetAvatarNotify::New(::google::protobuf::Arena* arena) const {
  HideAndSeekPlayerSetAvatarNotify* n = new HideAndSeekPlayerSetAvatarNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HideAndSeekPlayerSetAvatarNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HideAndSeekPlayerSetAvatarNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&avatar_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&costume_id_) -
      reinterpret_cast<char*>(&avatar_id_)) + sizeof(costume_id_));
  _internal_metadata_.Clear();
}

bool HideAndSeekPlayerSetAvatarNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HideAndSeekPlayerSetAvatarNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 avatar_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 costume_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costume_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HideAndSeekPlayerSetAvatarNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HideAndSeekPlayerSetAvatarNotify)
  return false;
#undef DO_
}

void HideAndSeekPlayerSetAvatarNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HideAndSeekPlayerSetAvatarNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 avatar_id = 2;
  if (this->avatar_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->avatar_id(), output);
  }

  // uint32 uid = 5;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uid(), output);
  }

  // uint32 costume_id = 13;
  if (this->costume_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->costume_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HideAndSeekPlayerSetAvatarNotify)
}

::google::protobuf::uint8* HideAndSeekPlayerSetAvatarNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HideAndSeekPlayerSetAvatarNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 avatar_id = 2;
  if (this->avatar_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->avatar_id(), target);
  }

  // uint32 uid = 5;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uid(), target);
  }

  // uint32 costume_id = 13;
  if (this->costume_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->costume_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HideAndSeekPlayerSetAvatarNotify)
  return target;
}

size_t HideAndSeekPlayerSetAvatarNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HideAndSeekPlayerSetAvatarNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 avatar_id = 2;
  if (this->avatar_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avatar_id());
  }

  // uint32 uid = 5;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // uint32 costume_id = 13;
  if (this->costume_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->costume_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HideAndSeekPlayerSetAvatarNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HideAndSeekPlayerSetAvatarNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const HideAndSeekPlayerSetAvatarNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HideAndSeekPlayerSetAvatarNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HideAndSeekPlayerSetAvatarNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HideAndSeekPlayerSetAvatarNotify)
    MergeFrom(*source);
  }
}

void HideAndSeekPlayerSetAvatarNotify::MergeFrom(const HideAndSeekPlayerSetAvatarNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HideAndSeekPlayerSetAvatarNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatar_id() != 0) {
    set_avatar_id(from.avatar_id());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.costume_id() != 0) {
    set_costume_id(from.costume_id());
  }
}

void HideAndSeekPlayerSetAvatarNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HideAndSeekPlayerSetAvatarNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HideAndSeekPlayerSetAvatarNotify::CopyFrom(const HideAndSeekPlayerSetAvatarNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HideAndSeekPlayerSetAvatarNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideAndSeekPlayerSetAvatarNotify::IsInitialized() const {
  return true;
}

void HideAndSeekPlayerSetAvatarNotify::Swap(HideAndSeekPlayerSetAvatarNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HideAndSeekPlayerSetAvatarNotify::InternalSwap(HideAndSeekPlayerSetAvatarNotify* other) {
  using std::swap;
  swap(avatar_id_, other->avatar_id_);
  swap(uid_, other->uid_);
  swap(costume_id_, other->costume_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HideAndSeekPlayerSetAvatarNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HideAndSeekPlayerSetAvatarNotify

// uint32 avatar_id = 2;
void HideAndSeekPlayerSetAvatarNotify::clear_avatar_id() {
  avatar_id_ = 0u;
}
::google::protobuf::uint32 HideAndSeekPlayerSetAvatarNotify::avatar_id() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekPlayerSetAvatarNotify.avatar_id)
  return avatar_id_;
}
void HideAndSeekPlayerSetAvatarNotify::set_avatar_id(::google::protobuf::uint32 value) {
  
  avatar_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekPlayerSetAvatarNotify.avatar_id)
}

// uint32 costume_id = 13;
void HideAndSeekPlayerSetAvatarNotify::clear_costume_id() {
  costume_id_ = 0u;
}
::google::protobuf::uint32 HideAndSeekPlayerSetAvatarNotify::costume_id() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekPlayerSetAvatarNotify.costume_id)
  return costume_id_;
}
void HideAndSeekPlayerSetAvatarNotify::set_costume_id(::google::protobuf::uint32 value) {
  
  costume_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekPlayerSetAvatarNotify.costume_id)
}

// uint32 uid = 5;
void HideAndSeekPlayerSetAvatarNotify::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 HideAndSeekPlayerSetAvatarNotify::uid() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekPlayerSetAvatarNotify.uid)
  return uid_;
}
void HideAndSeekPlayerSetAvatarNotify::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekPlayerSetAvatarNotify.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessCardInfo::kEffectStackFieldNumber;
const int ChessCardInfo::kCardIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessCardInfo::ChessCardInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChessCardInfo)
}
ChessCardInfo::ChessCardInfo(const ChessCardInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&card_id_, &from.card_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&effect_stack_) -
    reinterpret_cast<char*>(&card_id_)) + sizeof(effect_stack_));
  // @@protoc_insertion_point(copy_constructor:proto.ChessCardInfo)
}

void ChessCardInfo::SharedCtor() {
  ::memset(&card_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effect_stack_) -
      reinterpret_cast<char*>(&card_id_)) + sizeof(effect_stack_));
  _cached_size_ = 0;
}

ChessCardInfo::~ChessCardInfo() {
  // @@protoc_insertion_point(destructor:proto.ChessCardInfo)
  SharedDtor();
}

void ChessCardInfo::SharedDtor() {
}

void ChessCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessCardInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChessCardInfo& ChessCardInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChessCardInfo* ChessCardInfo::New(::google::protobuf::Arena* arena) const {
  ChessCardInfo* n = new ChessCardInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessCardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChessCardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&card_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effect_stack_) -
      reinterpret_cast<char*>(&card_id_)) + sizeof(effect_stack_));
  _internal_metadata_.Clear();
}

bool ChessCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChessCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 card_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 effect_stack = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_stack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChessCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChessCardInfo)
  return false;
#undef DO_
}

void ChessCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChessCardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 11;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->card_id(), output);
  }

  // uint32 effect_stack = 12;
  if (this->effect_stack() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->effect_stack(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChessCardInfo)
}

::google::protobuf::uint8* ChessCardInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChessCardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 11;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->card_id(), target);
  }

  // uint32 effect_stack = 12;
  if (this->effect_stack() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->effect_stack(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChessCardInfo)
  return target;
}

size_t ChessCardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChessCardInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 card_id = 11;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  // uint32 effect_stack = 12;
  if (this->effect_stack() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->effect_stack());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChessCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ChessCardInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessCardInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChessCardInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChessCardInfo)
    MergeFrom(*source);
  }
}

void ChessCardInfo::MergeFrom(const ChessCardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChessCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
  if (from.effect_stack() != 0) {
    set_effect_stack(from.effect_stack());
  }
}

void ChessCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChessCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessCardInfo::CopyFrom(const ChessCardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChessCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessCardInfo::IsInitialized() const {
  return true;
}

void ChessCardInfo::Swap(ChessCardInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessCardInfo::InternalSwap(ChessCardInfo* other) {
  using std::swap;
  swap(card_id_, other->card_id_);
  swap(effect_stack_, other->effect_stack_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessCardInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessCardInfo

// uint32 effect_stack = 12;
void ChessCardInfo::clear_effect_stack() {
  effect_stack_ = 0u;
}
::google::protobuf::uint32 ChessCardInfo::effect_stack() const {
  // @@protoc_insertion_point(field_get:proto.ChessCardInfo.effect_stack)
  return effect_stack_;
}
void ChessCardInfo::set_effect_stack(::google::protobuf::uint32 value) {
  
  effect_stack_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessCardInfo.effect_stack)
}

// uint32 card_id = 11;
void ChessCardInfo::clear_card_id() {
  card_id_ = 0u;
}
::google::protobuf::uint32 ChessCardInfo::card_id() const {
  // @@protoc_insertion_point(field_get:proto.ChessCardInfo.card_id)
  return card_id_;
}
void ChessCardInfo::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessCardInfo.card_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

InBattleChessInfo::InBattleChessInfo_PlayerInfoMapEntry::InBattleChessInfo_PlayerInfoMapEntry() {}
InBattleChessInfo::InBattleChessInfo_PlayerInfoMapEntry::InBattleChessInfo_PlayerInfoMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata InBattleChessInfo::InBattleChessInfo_PlayerInfoMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[52];
}
void InBattleChessInfo::InBattleChessInfo_PlayerInfoMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void InBattleChessInfo::InBattleChessInfo_PlayerInfoMapEntry::MergeFrom(const InBattleChessInfo_PlayerInfoMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InBattleChessInfo::kBanCardTagListFieldNumber;
const int InBattleChessInfo::kRoundFieldNumber;
const int InBattleChessInfo::kSelectedCardInfoListFieldNumber;
const int InBattleChessInfo::kMysteryInfoFieldNumber;
const int InBattleChessInfo::kPlayerInfoMapFieldNumber;
const int InBattleChessInfo::kMaxEscapableMonstersFieldNumber;
const int InBattleChessInfo::kExcapedMonstersFieldNumber;
const int InBattleChessInfo::kTotalRoundFieldNumber;
const int InBattleChessInfo::kLeftMonstersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InBattleChessInfo::InBattleChessInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InBattleChessInfo)
}
InBattleChessInfo::InBattleChessInfo(const InBattleChessInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ban_card_tag_list_(from.ban_card_tag_list_),
      selected_card_info_list_(from.selected_card_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_info_map_.MergeFrom(from.player_info_map_);
  if (from.has_mystery_info()) {
    mystery_info_ = new ::proto::ChessMysteryInfo(*from.mystery_info_);
  } else {
    mystery_info_ = NULL;
  }
  ::memcpy(&round_, &from.round_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_round_) -
    reinterpret_cast<char*>(&round_)) + sizeof(total_round_));
  // @@protoc_insertion_point(copy_constructor:proto.InBattleChessInfo)
}

void InBattleChessInfo::SharedCtor() {
  ::memset(&mystery_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_round_) -
      reinterpret_cast<char*>(&mystery_info_)) + sizeof(total_round_));
  _cached_size_ = 0;
}

InBattleChessInfo::~InBattleChessInfo() {
  // @@protoc_insertion_point(destructor:proto.InBattleChessInfo)
  SharedDtor();
}

void InBattleChessInfo::SharedDtor() {
  if (this != internal_default_instance()) delete mystery_info_;
}

void InBattleChessInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InBattleChessInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InBattleChessInfo& InBattleChessInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

InBattleChessInfo* InBattleChessInfo::New(::google::protobuf::Arena* arena) const {
  InBattleChessInfo* n = new InBattleChessInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InBattleChessInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InBattleChessInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ban_card_tag_list_.Clear();
  player_info_map_.Clear();
  selected_card_info_list_.Clear();
  if (GetArenaNoVirtual() == NULL && mystery_info_ != NULL) {
    delete mystery_info_;
  }
  mystery_info_ = NULL;
  ::memset(&round_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_round_) -
      reinterpret_cast<char*>(&round_)) + sizeof(total_round_));
  _internal_metadata_.Clear();
}

bool InBattleChessInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InBattleChessInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.ChessMysteryInfo mystery_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mystery_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ban_card_tag_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ban_card_tag_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_ban_card_tag_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 round = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_escapable_monsters = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_escapable_monsters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .proto.ChessPlayerInfo> player_info_map = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          InBattleChessInfo_PlayerInfoMapEntry::Parser< ::google::protobuf::internal::MapField<
              InBattleChessInfo_PlayerInfoMapEntry,
              ::google::protobuf::uint32, ::proto::ChessPlayerInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessPlayerInfo > > parser(&player_info_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ChessCardInfo selected_card_info_list = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selected_card_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 excaped_monsters = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &excaped_monsters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_round = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 left_monsters = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_monsters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InBattleChessInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InBattleChessInfo)
  return false;
#undef DO_
}

void InBattleChessInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InBattleChessInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ChessMysteryInfo mystery_info = 1;
  if (this->has_mystery_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->mystery_info_, output);
  }

  // repeated uint32 ban_card_tag_list = 2;
  if (this->ban_card_tag_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _ban_card_tag_list_cached_byte_size_));
  }
  for (int i = 0, n = this->ban_card_tag_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->ban_card_tag_list(i), output);
  }

  // uint32 round = 4;
  if (this->round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->round(), output);
  }

  // uint32 max_escapable_monsters = 6;
  if (this->max_escapable_monsters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_escapable_monsters(), output);
  }

  // map<uint32, .proto.ChessPlayerInfo> player_info_map = 8;
  if (!this->player_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessPlayerInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->player_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->player_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessPlayerInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessPlayerInfo >::const_iterator
          it = this->player_info_map().begin();
          it != this->player_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<InBattleChessInfo_PlayerInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(player_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<InBattleChessInfo_PlayerInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessPlayerInfo >::const_iterator
          it = this->player_info_map().begin();
          it != this->player_info_map().end(); ++it) {
        entry.reset(player_info_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
      }
    }
  }

  // repeated .proto.ChessCardInfo selected_card_info_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->selected_card_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->selected_card_info_list(static_cast<int>(i)), output);
  }

  // uint32 excaped_monsters = 12;
  if (this->excaped_monsters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->excaped_monsters(), output);
  }

  // uint32 total_round = 14;
  if (this->total_round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->total_round(), output);
  }

  // uint32 left_monsters = 15;
  if (this->left_monsters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->left_monsters(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InBattleChessInfo)
}

::google::protobuf::uint8* InBattleChessInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InBattleChessInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ChessMysteryInfo mystery_info = 1;
  if (this->has_mystery_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->mystery_info_, deterministic, target);
  }

  // repeated uint32 ban_card_tag_list = 2;
  if (this->ban_card_tag_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _ban_card_tag_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->ban_card_tag_list_, target);
  }

  // uint32 round = 4;
  if (this->round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->round(), target);
  }

  // uint32 max_escapable_monsters = 6;
  if (this->max_escapable_monsters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_escapable_monsters(), target);
  }

  // map<uint32, .proto.ChessPlayerInfo> player_info_map = 8;
  if (!this->player_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessPlayerInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->player_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->player_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessPlayerInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessPlayerInfo >::const_iterator
          it = this->player_info_map().begin();
          it != this->player_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<InBattleChessInfo_PlayerInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(player_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<InBattleChessInfo_PlayerInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessPlayerInfo >::const_iterator
          it = this->player_info_map().begin();
          it != this->player_info_map().end(); ++it) {
        entry.reset(player_info_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
      }
    }
  }

  // repeated .proto.ChessCardInfo selected_card_info_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->selected_card_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->selected_card_info_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 excaped_monsters = 12;
  if (this->excaped_monsters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->excaped_monsters(), target);
  }

  // uint32 total_round = 14;
  if (this->total_round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->total_round(), target);
  }

  // uint32 left_monsters = 15;
  if (this->left_monsters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->left_monsters(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InBattleChessInfo)
  return target;
}

size_t InBattleChessInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InBattleChessInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 ban_card_tag_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ban_card_tag_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ban_card_tag_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<uint32, .proto.ChessPlayerInfo> player_info_map = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->player_info_map_size());
  {
    ::google::protobuf::scoped_ptr<InBattleChessInfo_PlayerInfoMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessPlayerInfo >::const_iterator
        it = this->player_info_map().begin();
        it != this->player_info_map().end(); ++it) {
      entry.reset(player_info_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .proto.ChessCardInfo selected_card_info_list = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->selected_card_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selected_card_info_list(static_cast<int>(i)));
    }
  }

  // .proto.ChessMysteryInfo mystery_info = 1;
  if (this->has_mystery_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mystery_info_);
  }

  // uint32 round = 4;
  if (this->round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->round());
  }

  // uint32 max_escapable_monsters = 6;
  if (this->max_escapable_monsters() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_escapable_monsters());
  }

  // uint32 left_monsters = 15;
  if (this->left_monsters() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->left_monsters());
  }

  // uint32 excaped_monsters = 12;
  if (this->excaped_monsters() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->excaped_monsters());
  }

  // uint32 total_round = 14;
  if (this->total_round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_round());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InBattleChessInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InBattleChessInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InBattleChessInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InBattleChessInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InBattleChessInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InBattleChessInfo)
    MergeFrom(*source);
  }
}

void InBattleChessInfo::MergeFrom(const InBattleChessInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InBattleChessInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ban_card_tag_list_.MergeFrom(from.ban_card_tag_list_);
  player_info_map_.MergeFrom(from.player_info_map_);
  selected_card_info_list_.MergeFrom(from.selected_card_info_list_);
  if (from.has_mystery_info()) {
    mutable_mystery_info()->::proto::ChessMysteryInfo::MergeFrom(from.mystery_info());
  }
  if (from.round() != 0) {
    set_round(from.round());
  }
  if (from.max_escapable_monsters() != 0) {
    set_max_escapable_monsters(from.max_escapable_monsters());
  }
  if (from.left_monsters() != 0) {
    set_left_monsters(from.left_monsters());
  }
  if (from.excaped_monsters() != 0) {
    set_excaped_monsters(from.excaped_monsters());
  }
  if (from.total_round() != 0) {
    set_total_round(from.total_round());
  }
}

void InBattleChessInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InBattleChessInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InBattleChessInfo::CopyFrom(const InBattleChessInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InBattleChessInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InBattleChessInfo::IsInitialized() const {
  return true;
}

void InBattleChessInfo::Swap(InBattleChessInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InBattleChessInfo::InternalSwap(InBattleChessInfo* other) {
  using std::swap;
  ban_card_tag_list_.InternalSwap(&other->ban_card_tag_list_);
  player_info_map_.Swap(&other->player_info_map_);
  selected_card_info_list_.InternalSwap(&other->selected_card_info_list_);
  swap(mystery_info_, other->mystery_info_);
  swap(round_, other->round_);
  swap(max_escapable_monsters_, other->max_escapable_monsters_);
  swap(left_monsters_, other->left_monsters_);
  swap(excaped_monsters_, other->excaped_monsters_);
  swap(total_round_, other->total_round_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InBattleChessInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InBattleChessInfo

// repeated uint32 ban_card_tag_list = 2;
int InBattleChessInfo::ban_card_tag_list_size() const {
  return ban_card_tag_list_.size();
}
void InBattleChessInfo::clear_ban_card_tag_list() {
  ban_card_tag_list_.Clear();
}
::google::protobuf::uint32 InBattleChessInfo::ban_card_tag_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessInfo.ban_card_tag_list)
  return ban_card_tag_list_.Get(index);
}
void InBattleChessInfo::set_ban_card_tag_list(int index, ::google::protobuf::uint32 value) {
  ban_card_tag_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.InBattleChessInfo.ban_card_tag_list)
}
void InBattleChessInfo::add_ban_card_tag_list(::google::protobuf::uint32 value) {
  ban_card_tag_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.InBattleChessInfo.ban_card_tag_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
InBattleChessInfo::ban_card_tag_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleChessInfo.ban_card_tag_list)
  return ban_card_tag_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
InBattleChessInfo::mutable_ban_card_tag_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleChessInfo.ban_card_tag_list)
  return &ban_card_tag_list_;
}

// uint32 round = 4;
void InBattleChessInfo::clear_round() {
  round_ = 0u;
}
::google::protobuf::uint32 InBattleChessInfo::round() const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessInfo.round)
  return round_;
}
void InBattleChessInfo::set_round(::google::protobuf::uint32 value) {
  
  round_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleChessInfo.round)
}

// repeated .proto.ChessCardInfo selected_card_info_list = 9;
int InBattleChessInfo::selected_card_info_list_size() const {
  return selected_card_info_list_.size();
}
void InBattleChessInfo::clear_selected_card_info_list() {
  selected_card_info_list_.Clear();
}
const ::proto::ChessCardInfo& InBattleChessInfo::selected_card_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessInfo.selected_card_info_list)
  return selected_card_info_list_.Get(index);
}
::proto::ChessCardInfo* InBattleChessInfo::mutable_selected_card_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.InBattleChessInfo.selected_card_info_list)
  return selected_card_info_list_.Mutable(index);
}
::proto::ChessCardInfo* InBattleChessInfo::add_selected_card_info_list() {
  // @@protoc_insertion_point(field_add:proto.InBattleChessInfo.selected_card_info_list)
  return selected_card_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ChessCardInfo >*
InBattleChessInfo::mutable_selected_card_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleChessInfo.selected_card_info_list)
  return &selected_card_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ChessCardInfo >&
InBattleChessInfo::selected_card_info_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleChessInfo.selected_card_info_list)
  return selected_card_info_list_;
}

// .proto.ChessMysteryInfo mystery_info = 1;
bool InBattleChessInfo::has_mystery_info() const {
  return this != internal_default_instance() && mystery_info_ != NULL;
}
void InBattleChessInfo::clear_mystery_info() {
  if (GetArenaNoVirtual() == NULL && mystery_info_ != NULL) delete mystery_info_;
  mystery_info_ = NULL;
}
const ::proto::ChessMysteryInfo& InBattleChessInfo::mystery_info() const {
  const ::proto::ChessMysteryInfo* p = mystery_info_;
  // @@protoc_insertion_point(field_get:proto.InBattleChessInfo.mystery_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ChessMysteryInfo*>(
      &::proto::_ChessMysteryInfo_default_instance_);
}
::proto::ChessMysteryInfo* InBattleChessInfo::mutable_mystery_info() {
  
  if (mystery_info_ == NULL) {
    mystery_info_ = new ::proto::ChessMysteryInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.InBattleChessInfo.mystery_info)
  return mystery_info_;
}
::proto::ChessMysteryInfo* InBattleChessInfo::release_mystery_info() {
  // @@protoc_insertion_point(field_release:proto.InBattleChessInfo.mystery_info)
  
  ::proto::ChessMysteryInfo* temp = mystery_info_;
  mystery_info_ = NULL;
  return temp;
}
void InBattleChessInfo::set_allocated_mystery_info(::proto::ChessMysteryInfo* mystery_info) {
  delete mystery_info_;
  mystery_info_ = mystery_info;
  if (mystery_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.InBattleChessInfo.mystery_info)
}

// map<uint32, .proto.ChessPlayerInfo> player_info_map = 8;
int InBattleChessInfo::player_info_map_size() const {
  return player_info_map_.size();
}
void InBattleChessInfo::clear_player_info_map() {
  player_info_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessPlayerInfo >&
InBattleChessInfo::player_info_map() const {
  // @@protoc_insertion_point(field_map:proto.InBattleChessInfo.player_info_map)
  return player_info_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessPlayerInfo >*
InBattleChessInfo::mutable_player_info_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.InBattleChessInfo.player_info_map)
  return player_info_map_.MutableMap();
}

// uint32 max_escapable_monsters = 6;
void InBattleChessInfo::clear_max_escapable_monsters() {
  max_escapable_monsters_ = 0u;
}
::google::protobuf::uint32 InBattleChessInfo::max_escapable_monsters() const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessInfo.max_escapable_monsters)
  return max_escapable_monsters_;
}
void InBattleChessInfo::set_max_escapable_monsters(::google::protobuf::uint32 value) {
  
  max_escapable_monsters_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleChessInfo.max_escapable_monsters)
}

// uint32 excaped_monsters = 12;
void InBattleChessInfo::clear_excaped_monsters() {
  excaped_monsters_ = 0u;
}
::google::protobuf::uint32 InBattleChessInfo::excaped_monsters() const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessInfo.excaped_monsters)
  return excaped_monsters_;
}
void InBattleChessInfo::set_excaped_monsters(::google::protobuf::uint32 value) {
  
  excaped_monsters_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleChessInfo.excaped_monsters)
}

// uint32 total_round = 14;
void InBattleChessInfo::clear_total_round() {
  total_round_ = 0u;
}
::google::protobuf::uint32 InBattleChessInfo::total_round() const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessInfo.total_round)
  return total_round_;
}
void InBattleChessInfo::set_total_round(::google::protobuf::uint32 value) {
  
  total_round_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleChessInfo.total_round)
}

// uint32 left_monsters = 15;
void InBattleChessInfo::clear_left_monsters() {
  left_monsters_ = 0u;
}
::google::protobuf::uint32 InBattleChessInfo::left_monsters() const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessInfo.left_monsters)
  return left_monsters_;
}
void InBattleChessInfo::set_left_monsters(::google::protobuf::uint32 value) {
  
  left_monsters_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleChessInfo.left_monsters)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InBattleChessSettleInfo::kIsSuccessFieldNumber;
const int InBattleChessSettleInfo::kChessExpFieldNumber;
const int InBattleChessSettleInfo::kChessLevelFieldNumber;
const int InBattleChessSettleInfo::kOldChessLevelFieldNumber;
const int InBattleChessSettleInfo::kScoreListFieldNumber;
const int InBattleChessSettleInfo::kSceneTimeMsFieldNumber;
const int InBattleChessSettleInfo::kOldChessExpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InBattleChessSettleInfo::InBattleChessSettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InBattleChessSettleInfo)
}
InBattleChessSettleInfo::InBattleChessSettleInfo(const InBattleChessSettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      score_list_(from.score_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&old_chess_exp_, &from.old_chess_exp_,
    static_cast<size_t>(reinterpret_cast<char*>(&scene_time_ms_) -
    reinterpret_cast<char*>(&old_chess_exp_)) + sizeof(scene_time_ms_));
  // @@protoc_insertion_point(copy_constructor:proto.InBattleChessSettleInfo)
}

void InBattleChessSettleInfo::SharedCtor() {
  ::memset(&old_chess_exp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_time_ms_) -
      reinterpret_cast<char*>(&old_chess_exp_)) + sizeof(scene_time_ms_));
  _cached_size_ = 0;
}

InBattleChessSettleInfo::~InBattleChessSettleInfo() {
  // @@protoc_insertion_point(destructor:proto.InBattleChessSettleInfo)
  SharedDtor();
}

void InBattleChessSettleInfo::SharedDtor() {
}

void InBattleChessSettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InBattleChessSettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InBattleChessSettleInfo& InBattleChessSettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

InBattleChessSettleInfo* InBattleChessSettleInfo::New(::google::protobuf::Arena* arena) const {
  InBattleChessSettleInfo* n = new InBattleChessSettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InBattleChessSettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InBattleChessSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  score_list_.Clear();
  ::memset(&old_chess_exp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_time_ms_) -
      reinterpret_cast<char*>(&old_chess_exp_)) + sizeof(scene_time_ms_));
  _internal_metadata_.Clear();
}

bool InBattleChessSettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InBattleChessSettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.ExhibitionDisplayInfo score_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_score_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 old_chess_exp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_chess_exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_success = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 old_chess_level = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_chess_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 chess_exp = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chess_exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 chess_level = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chess_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 scene_time_ms = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scene_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InBattleChessSettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InBattleChessSettleInfo)
  return false;
#undef DO_
}

void InBattleChessSettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InBattleChessSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ExhibitionDisplayInfo score_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->score_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->score_list(static_cast<int>(i)), output);
  }

  // uint32 old_chess_exp = 2;
  if (this->old_chess_exp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->old_chess_exp(), output);
  }

  // bool is_success = 7;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_success(), output);
  }

  // uint32 old_chess_level = 10;
  if (this->old_chess_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->old_chess_level(), output);
  }

  // uint32 chess_exp = 11;
  if (this->chess_exp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->chess_exp(), output);
  }

  // uint32 chess_level = 13;
  if (this->chess_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->chess_level(), output);
  }

  // uint64 scene_time_ms = 14;
  if (this->scene_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->scene_time_ms(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InBattleChessSettleInfo)
}

::google::protobuf::uint8* InBattleChessSettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InBattleChessSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ExhibitionDisplayInfo score_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->score_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->score_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 old_chess_exp = 2;
  if (this->old_chess_exp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->old_chess_exp(), target);
  }

  // bool is_success = 7;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_success(), target);
  }

  // uint32 old_chess_level = 10;
  if (this->old_chess_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->old_chess_level(), target);
  }

  // uint32 chess_exp = 11;
  if (this->chess_exp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->chess_exp(), target);
  }

  // uint32 chess_level = 13;
  if (this->chess_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->chess_level(), target);
  }

  // uint64 scene_time_ms = 14;
  if (this->scene_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->scene_time_ms(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InBattleChessSettleInfo)
  return target;
}

size_t InBattleChessSettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InBattleChessSettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ExhibitionDisplayInfo score_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->score_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->score_list(static_cast<int>(i)));
    }
  }

  // uint32 old_chess_exp = 2;
  if (this->old_chess_exp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->old_chess_exp());
  }

  // bool is_success = 7;
  if (this->is_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 chess_level = 13;
  if (this->chess_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chess_level());
  }

  // uint32 old_chess_level = 10;
  if (this->old_chess_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->old_chess_level());
  }

  // uint32 chess_exp = 11;
  if (this->chess_exp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chess_exp());
  }

  // uint64 scene_time_ms = 14;
  if (this->scene_time_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->scene_time_ms());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InBattleChessSettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InBattleChessSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InBattleChessSettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InBattleChessSettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InBattleChessSettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InBattleChessSettleInfo)
    MergeFrom(*source);
  }
}

void InBattleChessSettleInfo::MergeFrom(const InBattleChessSettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InBattleChessSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  score_list_.MergeFrom(from.score_list_);
  if (from.old_chess_exp() != 0) {
    set_old_chess_exp(from.old_chess_exp());
  }
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.chess_level() != 0) {
    set_chess_level(from.chess_level());
  }
  if (from.old_chess_level() != 0) {
    set_old_chess_level(from.old_chess_level());
  }
  if (from.chess_exp() != 0) {
    set_chess_exp(from.chess_exp());
  }
  if (from.scene_time_ms() != 0) {
    set_scene_time_ms(from.scene_time_ms());
  }
}

void InBattleChessSettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InBattleChessSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InBattleChessSettleInfo::CopyFrom(const InBattleChessSettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InBattleChessSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InBattleChessSettleInfo::IsInitialized() const {
  return true;
}

void InBattleChessSettleInfo::Swap(InBattleChessSettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InBattleChessSettleInfo::InternalSwap(InBattleChessSettleInfo* other) {
  using std::swap;
  score_list_.InternalSwap(&other->score_list_);
  swap(old_chess_exp_, other->old_chess_exp_);
  swap(is_success_, other->is_success_);
  swap(chess_level_, other->chess_level_);
  swap(old_chess_level_, other->old_chess_level_);
  swap(chess_exp_, other->chess_exp_);
  swap(scene_time_ms_, other->scene_time_ms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InBattleChessSettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InBattleChessSettleInfo

// bool is_success = 7;
void InBattleChessSettleInfo::clear_is_success() {
  is_success_ = false;
}
bool InBattleChessSettleInfo::is_success() const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessSettleInfo.is_success)
  return is_success_;
}
void InBattleChessSettleInfo::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleChessSettleInfo.is_success)
}

// uint32 chess_exp = 11;
void InBattleChessSettleInfo::clear_chess_exp() {
  chess_exp_ = 0u;
}
::google::protobuf::uint32 InBattleChessSettleInfo::chess_exp() const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessSettleInfo.chess_exp)
  return chess_exp_;
}
void InBattleChessSettleInfo::set_chess_exp(::google::protobuf::uint32 value) {
  
  chess_exp_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleChessSettleInfo.chess_exp)
}

// uint32 chess_level = 13;
void InBattleChessSettleInfo::clear_chess_level() {
  chess_level_ = 0u;
}
::google::protobuf::uint32 InBattleChessSettleInfo::chess_level() const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessSettleInfo.chess_level)
  return chess_level_;
}
void InBattleChessSettleInfo::set_chess_level(::google::protobuf::uint32 value) {
  
  chess_level_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleChessSettleInfo.chess_level)
}

// uint32 old_chess_level = 10;
void InBattleChessSettleInfo::clear_old_chess_level() {
  old_chess_level_ = 0u;
}
::google::protobuf::uint32 InBattleChessSettleInfo::old_chess_level() const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessSettleInfo.old_chess_level)
  return old_chess_level_;
}
void InBattleChessSettleInfo::set_old_chess_level(::google::protobuf::uint32 value) {
  
  old_chess_level_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleChessSettleInfo.old_chess_level)
}

// repeated .proto.ExhibitionDisplayInfo score_list = 1;
int InBattleChessSettleInfo::score_list_size() const {
  return score_list_.size();
}
void InBattleChessSettleInfo::clear_score_list() {
  score_list_.Clear();
}
const ::proto::ExhibitionDisplayInfo& InBattleChessSettleInfo::score_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessSettleInfo.score_list)
  return score_list_.Get(index);
}
::proto::ExhibitionDisplayInfo* InBattleChessSettleInfo::mutable_score_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.InBattleChessSettleInfo.score_list)
  return score_list_.Mutable(index);
}
::proto::ExhibitionDisplayInfo* InBattleChessSettleInfo::add_score_list() {
  // @@protoc_insertion_point(field_add:proto.InBattleChessSettleInfo.score_list)
  return score_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >*
InBattleChessSettleInfo::mutable_score_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleChessSettleInfo.score_list)
  return &score_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >&
InBattleChessSettleInfo::score_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleChessSettleInfo.score_list)
  return score_list_;
}

// uint64 scene_time_ms = 14;
void InBattleChessSettleInfo::clear_scene_time_ms() {
  scene_time_ms_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 InBattleChessSettleInfo::scene_time_ms() const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessSettleInfo.scene_time_ms)
  return scene_time_ms_;
}
void InBattleChessSettleInfo::set_scene_time_ms(::google::protobuf::uint64 value) {
  
  scene_time_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleChessSettleInfo.scene_time_ms)
}

// uint32 old_chess_exp = 2;
void InBattleChessSettleInfo::clear_old_chess_exp() {
  old_chess_exp_ = 0u;
}
::google::protobuf::uint32 InBattleChessSettleInfo::old_chess_exp() const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessSettleInfo.old_chess_exp)
  return old_chess_exp_;
}
void InBattleChessSettleInfo::set_old_chess_exp(::google::protobuf::uint32 value) {
  
  old_chess_exp_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleChessSettleInfo.old_chess_exp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessPlayerInfo::kUidFieldNumber;
const int ChessPlayerInfo::kFreeRefreshLimitFieldNumber;
const int ChessPlayerInfo::kCandidateCardInfoListFieldNumber;
const int ChessPlayerInfo::kBuildingPointsFieldNumber;
const int ChessPlayerInfo::kCandidateIndexFieldNumber;
const int ChessPlayerInfo::kFreeRefreshCountFieldNumber;
const int ChessPlayerInfo::kRefreshCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessPlayerInfo::ChessPlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChessPlayerInfo)
}
ChessPlayerInfo::ChessPlayerInfo(const ChessPlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      candidate_card_info_list_(from.candidate_card_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&free_refresh_count_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(free_refresh_count_));
  // @@protoc_insertion_point(copy_constructor:proto.ChessPlayerInfo)
}

void ChessPlayerInfo::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&free_refresh_count_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(free_refresh_count_));
  _cached_size_ = 0;
}

ChessPlayerInfo::~ChessPlayerInfo() {
  // @@protoc_insertion_point(destructor:proto.ChessPlayerInfo)
  SharedDtor();
}

void ChessPlayerInfo::SharedDtor() {
}

void ChessPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessPlayerInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChessPlayerInfo& ChessPlayerInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChessPlayerInfo* ChessPlayerInfo::New(::google::protobuf::Arena* arena) const {
  ChessPlayerInfo* n = new ChessPlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChessPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_card_info_list_.Clear();
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&free_refresh_count_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(free_refresh_count_));
  _internal_metadata_.Clear();
}

bool ChessPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChessPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.ChessNormalCardInfo candidate_card_info_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_candidate_card_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 candidate_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &candidate_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 refresh_cost = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refresh_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 free_refresh_limit = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_refresh_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 building_points = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &building_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 free_refresh_count = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_refresh_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChessPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChessPlayerInfo)
  return false;
#undef DO_
}

void ChessPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChessPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ChessNormalCardInfo candidate_card_info_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_card_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->candidate_card_info_list(static_cast<int>(i)), output);
  }

  // uint32 uid = 5;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uid(), output);
  }

  // uint32 candidate_index = 6;
  if (this->candidate_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->candidate_index(), output);
  }

  // uint32 refresh_cost = 7;
  if (this->refresh_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->refresh_cost(), output);
  }

  // uint32 free_refresh_limit = 10;
  if (this->free_refresh_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->free_refresh_limit(), output);
  }

  // uint32 building_points = 12;
  if (this->building_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->building_points(), output);
  }

  // uint32 free_refresh_count = 13;
  if (this->free_refresh_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->free_refresh_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChessPlayerInfo)
}

::google::protobuf::uint8* ChessPlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChessPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ChessNormalCardInfo candidate_card_info_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_card_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->candidate_card_info_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 uid = 5;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uid(), target);
  }

  // uint32 candidate_index = 6;
  if (this->candidate_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->candidate_index(), target);
  }

  // uint32 refresh_cost = 7;
  if (this->refresh_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->refresh_cost(), target);
  }

  // uint32 free_refresh_limit = 10;
  if (this->free_refresh_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->free_refresh_limit(), target);
  }

  // uint32 building_points = 12;
  if (this->building_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->building_points(), target);
  }

  // uint32 free_refresh_count = 13;
  if (this->free_refresh_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->free_refresh_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChessPlayerInfo)
  return target;
}

size_t ChessPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChessPlayerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ChessNormalCardInfo candidate_card_info_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->candidate_card_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->candidate_card_info_list(static_cast<int>(i)));
    }
  }

  // uint32 uid = 5;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // uint32 candidate_index = 6;
  if (this->candidate_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->candidate_index());
  }

  // uint32 refresh_cost = 7;
  if (this->refresh_cost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->refresh_cost());
  }

  // uint32 free_refresh_limit = 10;
  if (this->free_refresh_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->free_refresh_limit());
  }

  // uint32 building_points = 12;
  if (this->building_points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->building_points());
  }

  // uint32 free_refresh_count = 13;
  if (this->free_refresh_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->free_refresh_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChessPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ChessPlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessPlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChessPlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChessPlayerInfo)
    MergeFrom(*source);
  }
}

void ChessPlayerInfo::MergeFrom(const ChessPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChessPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidate_card_info_list_.MergeFrom(from.candidate_card_info_list_);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.candidate_index() != 0) {
    set_candidate_index(from.candidate_index());
  }
  if (from.refresh_cost() != 0) {
    set_refresh_cost(from.refresh_cost());
  }
  if (from.free_refresh_limit() != 0) {
    set_free_refresh_limit(from.free_refresh_limit());
  }
  if (from.building_points() != 0) {
    set_building_points(from.building_points());
  }
  if (from.free_refresh_count() != 0) {
    set_free_refresh_count(from.free_refresh_count());
  }
}

void ChessPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChessPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessPlayerInfo::CopyFrom(const ChessPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChessPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessPlayerInfo::IsInitialized() const {
  return true;
}

void ChessPlayerInfo::Swap(ChessPlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessPlayerInfo::InternalSwap(ChessPlayerInfo* other) {
  using std::swap;
  candidate_card_info_list_.InternalSwap(&other->candidate_card_info_list_);
  swap(uid_, other->uid_);
  swap(candidate_index_, other->candidate_index_);
  swap(refresh_cost_, other->refresh_cost_);
  swap(free_refresh_limit_, other->free_refresh_limit_);
  swap(building_points_, other->building_points_);
  swap(free_refresh_count_, other->free_refresh_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessPlayerInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessPlayerInfo

// uint32 uid = 5;
void ChessPlayerInfo::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 ChessPlayerInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.ChessPlayerInfo.uid)
  return uid_;
}
void ChessPlayerInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPlayerInfo.uid)
}

// uint32 free_refresh_limit = 10;
void ChessPlayerInfo::clear_free_refresh_limit() {
  free_refresh_limit_ = 0u;
}
::google::protobuf::uint32 ChessPlayerInfo::free_refresh_limit() const {
  // @@protoc_insertion_point(field_get:proto.ChessPlayerInfo.free_refresh_limit)
  return free_refresh_limit_;
}
void ChessPlayerInfo::set_free_refresh_limit(::google::protobuf::uint32 value) {
  
  free_refresh_limit_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPlayerInfo.free_refresh_limit)
}

// repeated .proto.ChessNormalCardInfo candidate_card_info_list = 3;
int ChessPlayerInfo::candidate_card_info_list_size() const {
  return candidate_card_info_list_.size();
}
void ChessPlayerInfo::clear_candidate_card_info_list() {
  candidate_card_info_list_.Clear();
}
const ::proto::ChessNormalCardInfo& ChessPlayerInfo::candidate_card_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ChessPlayerInfo.candidate_card_info_list)
  return candidate_card_info_list_.Get(index);
}
::proto::ChessNormalCardInfo* ChessPlayerInfo::mutable_candidate_card_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ChessPlayerInfo.candidate_card_info_list)
  return candidate_card_info_list_.Mutable(index);
}
::proto::ChessNormalCardInfo* ChessPlayerInfo::add_candidate_card_info_list() {
  // @@protoc_insertion_point(field_add:proto.ChessPlayerInfo.candidate_card_info_list)
  return candidate_card_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ChessNormalCardInfo >*
ChessPlayerInfo::mutable_candidate_card_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ChessPlayerInfo.candidate_card_info_list)
  return &candidate_card_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ChessNormalCardInfo >&
ChessPlayerInfo::candidate_card_info_list() const {
  // @@protoc_insertion_point(field_list:proto.ChessPlayerInfo.candidate_card_info_list)
  return candidate_card_info_list_;
}

// uint32 building_points = 12;
void ChessPlayerInfo::clear_building_points() {
  building_points_ = 0u;
}
::google::protobuf::uint32 ChessPlayerInfo::building_points() const {
  // @@protoc_insertion_point(field_get:proto.ChessPlayerInfo.building_points)
  return building_points_;
}
void ChessPlayerInfo::set_building_points(::google::protobuf::uint32 value) {
  
  building_points_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPlayerInfo.building_points)
}

// uint32 candidate_index = 6;
void ChessPlayerInfo::clear_candidate_index() {
  candidate_index_ = 0u;
}
::google::protobuf::uint32 ChessPlayerInfo::candidate_index() const {
  // @@protoc_insertion_point(field_get:proto.ChessPlayerInfo.candidate_index)
  return candidate_index_;
}
void ChessPlayerInfo::set_candidate_index(::google::protobuf::uint32 value) {
  
  candidate_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPlayerInfo.candidate_index)
}

// uint32 free_refresh_count = 13;
void ChessPlayerInfo::clear_free_refresh_count() {
  free_refresh_count_ = 0u;
}
::google::protobuf::uint32 ChessPlayerInfo::free_refresh_count() const {
  // @@protoc_insertion_point(field_get:proto.ChessPlayerInfo.free_refresh_count)
  return free_refresh_count_;
}
void ChessPlayerInfo::set_free_refresh_count(::google::protobuf::uint32 value) {
  
  free_refresh_count_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPlayerInfo.free_refresh_count)
}

// uint32 refresh_cost = 7;
void ChessPlayerInfo::clear_refresh_cost() {
  refresh_cost_ = 0u;
}
::google::protobuf::uint32 ChessPlayerInfo::refresh_cost() const {
  // @@protoc_insertion_point(field_get:proto.ChessPlayerInfo.refresh_cost)
  return refresh_cost_;
}
void ChessPlayerInfo::set_refresh_cost(::google::protobuf::uint32 value) {
  
  refresh_cost_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPlayerInfo.refresh_cost)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessMonsterInfo::kMonsterIdFieldNumber;
const int ChessMonsterInfo::kLevelFieldNumber;
const int ChessMonsterInfo::kAffixListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessMonsterInfo::ChessMonsterInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChessMonsterInfo)
}
ChessMonsterInfo::ChessMonsterInfo(const ChessMonsterInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      affix_list_(from.affix_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&monster_id_) -
    reinterpret_cast<char*>(&level_)) + sizeof(monster_id_));
  // @@protoc_insertion_point(copy_constructor:proto.ChessMonsterInfo)
}

void ChessMonsterInfo::SharedCtor() {
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monster_id_) -
      reinterpret_cast<char*>(&level_)) + sizeof(monster_id_));
  _cached_size_ = 0;
}

ChessMonsterInfo::~ChessMonsterInfo() {
  // @@protoc_insertion_point(destructor:proto.ChessMonsterInfo)
  SharedDtor();
}

void ChessMonsterInfo::SharedDtor() {
}

void ChessMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessMonsterInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChessMonsterInfo& ChessMonsterInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChessMonsterInfo* ChessMonsterInfo::New(::google::protobuf::Arena* arena) const {
  ChessMonsterInfo* n = new ChessMonsterInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessMonsterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChessMonsterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  affix_list_.Clear();
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monster_id_) -
      reinterpret_cast<char*>(&level_)) + sizeof(monster_id_));
  _internal_metadata_.Clear();
}

bool ChessMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChessMonsterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 monster_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 affix_list = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_affix_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 106u, input, this->mutable_affix_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChessMonsterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChessMonsterInfo)
  return false;
#undef DO_
}

void ChessMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChessMonsterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level = 2;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // uint32 monster_id = 12;
  if (this->monster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->monster_id(), output);
  }

  // repeated uint32 affix_list = 13;
  if (this->affix_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _affix_list_cached_byte_size_));
  }
  for (int i = 0, n = this->affix_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->affix_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChessMonsterInfo)
}

::google::protobuf::uint8* ChessMonsterInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChessMonsterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level = 2;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // uint32 monster_id = 12;
  if (this->monster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->monster_id(), target);
  }

  // repeated uint32 affix_list = 13;
  if (this->affix_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _affix_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->affix_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChessMonsterInfo)
  return target;
}

size_t ChessMonsterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChessMonsterInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 affix_list = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->affix_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _affix_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // uint32 monster_id = 12;
  if (this->monster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->monster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessMonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChessMonsterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ChessMonsterInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessMonsterInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChessMonsterInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChessMonsterInfo)
    MergeFrom(*source);
  }
}

void ChessMonsterInfo::MergeFrom(const ChessMonsterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChessMonsterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  affix_list_.MergeFrom(from.affix_list_);
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.monster_id() != 0) {
    set_monster_id(from.monster_id());
  }
}

void ChessMonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChessMonsterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessMonsterInfo::CopyFrom(const ChessMonsterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChessMonsterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessMonsterInfo::IsInitialized() const {
  return true;
}

void ChessMonsterInfo::Swap(ChessMonsterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessMonsterInfo::InternalSwap(ChessMonsterInfo* other) {
  using std::swap;
  affix_list_.InternalSwap(&other->affix_list_);
  swap(level_, other->level_);
  swap(monster_id_, other->monster_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessMonsterInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessMonsterInfo

// uint32 monster_id = 12;
void ChessMonsterInfo::clear_monster_id() {
  monster_id_ = 0u;
}
::google::protobuf::uint32 ChessMonsterInfo::monster_id() const {
  // @@protoc_insertion_point(field_get:proto.ChessMonsterInfo.monster_id)
  return monster_id_;
}
void ChessMonsterInfo::set_monster_id(::google::protobuf::uint32 value) {
  
  monster_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessMonsterInfo.monster_id)
}

// uint32 level = 2;
void ChessMonsterInfo::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 ChessMonsterInfo::level() const {
  // @@protoc_insertion_point(field_get:proto.ChessMonsterInfo.level)
  return level_;
}
void ChessMonsterInfo::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessMonsterInfo.level)
}

// repeated uint32 affix_list = 13;
int ChessMonsterInfo::affix_list_size() const {
  return affix_list_.size();
}
void ChessMonsterInfo::clear_affix_list() {
  affix_list_.Clear();
}
::google::protobuf::uint32 ChessMonsterInfo::affix_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ChessMonsterInfo.affix_list)
  return affix_list_.Get(index);
}
void ChessMonsterInfo::set_affix_list(int index, ::google::protobuf::uint32 value) {
  affix_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ChessMonsterInfo.affix_list)
}
void ChessMonsterInfo::add_affix_list(::google::protobuf::uint32 value) {
  affix_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ChessMonsterInfo.affix_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ChessMonsterInfo::affix_list() const {
  // @@protoc_insertion_point(field_list:proto.ChessMonsterInfo.affix_list)
  return affix_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ChessMonsterInfo::mutable_affix_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ChessMonsterInfo.affix_list)
  return &affix_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessEntranceInfo::kMonsterInfoListFieldNumber;
const int ChessEntranceInfo::kEntranceIndexFieldNumber;
const int ChessEntranceInfo::kEntrancePointIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessEntranceInfo::ChessEntranceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChessEntranceInfo)
}
ChessEntranceInfo::ChessEntranceInfo(const ChessEntranceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      monster_info_list_(from.monster_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&entrance_point_id_, &from.entrance_point_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&entrance_index_) -
    reinterpret_cast<char*>(&entrance_point_id_)) + sizeof(entrance_index_));
  // @@protoc_insertion_point(copy_constructor:proto.ChessEntranceInfo)
}

void ChessEntranceInfo::SharedCtor() {
  ::memset(&entrance_point_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entrance_index_) -
      reinterpret_cast<char*>(&entrance_point_id_)) + sizeof(entrance_index_));
  _cached_size_ = 0;
}

ChessEntranceInfo::~ChessEntranceInfo() {
  // @@protoc_insertion_point(destructor:proto.ChessEntranceInfo)
  SharedDtor();
}

void ChessEntranceInfo::SharedDtor() {
}

void ChessEntranceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessEntranceInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChessEntranceInfo& ChessEntranceInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChessEntranceInfo* ChessEntranceInfo::New(::google::protobuf::Arena* arena) const {
  ChessEntranceInfo* n = new ChessEntranceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessEntranceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChessEntranceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  monster_info_list_.Clear();
  ::memset(&entrance_point_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entrance_index_) -
      reinterpret_cast<char*>(&entrance_point_id_)) + sizeof(entrance_index_));
  _internal_metadata_.Clear();
}

bool ChessEntranceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChessEntranceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 entrance_point_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entrance_point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ChessMonsterInfo monster_info_list = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monster_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 entrance_index = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entrance_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChessEntranceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChessEntranceInfo)
  return false;
#undef DO_
}

void ChessEntranceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChessEntranceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entrance_point_id = 8;
  if (this->entrance_point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->entrance_point_id(), output);
  }

  // repeated .proto.ChessMonsterInfo monster_info_list = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->monster_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->monster_info_list(static_cast<int>(i)), output);
  }

  // uint32 entrance_index = 15;
  if (this->entrance_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->entrance_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChessEntranceInfo)
}

::google::protobuf::uint8* ChessEntranceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChessEntranceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entrance_point_id = 8;
  if (this->entrance_point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->entrance_point_id(), target);
  }

  // repeated .proto.ChessMonsterInfo monster_info_list = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->monster_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->monster_info_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 entrance_index = 15;
  if (this->entrance_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->entrance_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChessEntranceInfo)
  return target;
}

size_t ChessEntranceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChessEntranceInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ChessMonsterInfo monster_info_list = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->monster_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monster_info_list(static_cast<int>(i)));
    }
  }

  // uint32 entrance_point_id = 8;
  if (this->entrance_point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->entrance_point_id());
  }

  // uint32 entrance_index = 15;
  if (this->entrance_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->entrance_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessEntranceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChessEntranceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ChessEntranceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessEntranceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChessEntranceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChessEntranceInfo)
    MergeFrom(*source);
  }
}

void ChessEntranceInfo::MergeFrom(const ChessEntranceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChessEntranceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  monster_info_list_.MergeFrom(from.monster_info_list_);
  if (from.entrance_point_id() != 0) {
    set_entrance_point_id(from.entrance_point_id());
  }
  if (from.entrance_index() != 0) {
    set_entrance_index(from.entrance_index());
  }
}

void ChessEntranceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChessEntranceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessEntranceInfo::CopyFrom(const ChessEntranceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChessEntranceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessEntranceInfo::IsInitialized() const {
  return true;
}

void ChessEntranceInfo::Swap(ChessEntranceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessEntranceInfo::InternalSwap(ChessEntranceInfo* other) {
  using std::swap;
  monster_info_list_.InternalSwap(&other->monster_info_list_);
  swap(entrance_point_id_, other->entrance_point_id_);
  swap(entrance_index_, other->entrance_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessEntranceInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessEntranceInfo

// repeated .proto.ChessMonsterInfo monster_info_list = 14;
int ChessEntranceInfo::monster_info_list_size() const {
  return monster_info_list_.size();
}
void ChessEntranceInfo::clear_monster_info_list() {
  monster_info_list_.Clear();
}
const ::proto::ChessMonsterInfo& ChessEntranceInfo::monster_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ChessEntranceInfo.monster_info_list)
  return monster_info_list_.Get(index);
}
::proto::ChessMonsterInfo* ChessEntranceInfo::mutable_monster_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ChessEntranceInfo.monster_info_list)
  return monster_info_list_.Mutable(index);
}
::proto::ChessMonsterInfo* ChessEntranceInfo::add_monster_info_list() {
  // @@protoc_insertion_point(field_add:proto.ChessEntranceInfo.monster_info_list)
  return monster_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ChessMonsterInfo >*
ChessEntranceInfo::mutable_monster_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ChessEntranceInfo.monster_info_list)
  return &monster_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ChessMonsterInfo >&
ChessEntranceInfo::monster_info_list() const {
  // @@protoc_insertion_point(field_list:proto.ChessEntranceInfo.monster_info_list)
  return monster_info_list_;
}

// uint32 entrance_index = 15;
void ChessEntranceInfo::clear_entrance_index() {
  entrance_index_ = 0u;
}
::google::protobuf::uint32 ChessEntranceInfo::entrance_index() const {
  // @@protoc_insertion_point(field_get:proto.ChessEntranceInfo.entrance_index)
  return entrance_index_;
}
void ChessEntranceInfo::set_entrance_index(::google::protobuf::uint32 value) {
  
  entrance_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessEntranceInfo.entrance_index)
}

// uint32 entrance_point_id = 8;
void ChessEntranceInfo::clear_entrance_point_id() {
  entrance_point_id_ = 0u;
}
::google::protobuf::uint32 ChessEntranceInfo::entrance_point_id() const {
  // @@protoc_insertion_point(field_get:proto.ChessEntranceInfo.entrance_point_id)
  return entrance_point_id_;
}
void ChessEntranceInfo::set_entrance_point_id(::google::protobuf::uint32 value) {
  
  entrance_point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessEntranceInfo.entrance_point_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessEntranceDetailInfo::kInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessEntranceDetailInfo::ChessEntranceDetailInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChessEntranceDetailInfo)
}
ChessEntranceDetailInfo::ChessEntranceDetailInfo(const ChessEntranceDetailInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      info_list_(from.info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.ChessEntranceDetailInfo)
}

void ChessEntranceDetailInfo::SharedCtor() {
  _cached_size_ = 0;
}

ChessEntranceDetailInfo::~ChessEntranceDetailInfo() {
  // @@protoc_insertion_point(destructor:proto.ChessEntranceDetailInfo)
  SharedDtor();
}

void ChessEntranceDetailInfo::SharedDtor() {
}

void ChessEntranceDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessEntranceDetailInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChessEntranceDetailInfo& ChessEntranceDetailInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChessEntranceDetailInfo* ChessEntranceDetailInfo::New(::google::protobuf::Arena* arena) const {
  ChessEntranceDetailInfo* n = new ChessEntranceDetailInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessEntranceDetailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChessEntranceDetailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_list_.Clear();
  _internal_metadata_.Clear();
}

bool ChessEntranceDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChessEntranceDetailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.ChessEntranceInfo info_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChessEntranceDetailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChessEntranceDetailInfo)
  return false;
#undef DO_
}

void ChessEntranceDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChessEntranceDetailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ChessEntranceInfo info_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChessEntranceDetailInfo)
}

::google::protobuf::uint8* ChessEntranceDetailInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChessEntranceDetailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ChessEntranceInfo info_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->info_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChessEntranceDetailInfo)
  return target;
}

size_t ChessEntranceDetailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChessEntranceDetailInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ChessEntranceInfo info_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessEntranceDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChessEntranceDetailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ChessEntranceDetailInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessEntranceDetailInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChessEntranceDetailInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChessEntranceDetailInfo)
    MergeFrom(*source);
  }
}

void ChessEntranceDetailInfo::MergeFrom(const ChessEntranceDetailInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChessEntranceDetailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_list_.MergeFrom(from.info_list_);
}

void ChessEntranceDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChessEntranceDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessEntranceDetailInfo::CopyFrom(const ChessEntranceDetailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChessEntranceDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessEntranceDetailInfo::IsInitialized() const {
  return true;
}

void ChessEntranceDetailInfo::Swap(ChessEntranceDetailInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessEntranceDetailInfo::InternalSwap(ChessEntranceDetailInfo* other) {
  using std::swap;
  info_list_.InternalSwap(&other->info_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessEntranceDetailInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessEntranceDetailInfo

// repeated .proto.ChessEntranceInfo info_list = 4;
int ChessEntranceDetailInfo::info_list_size() const {
  return info_list_.size();
}
void ChessEntranceDetailInfo::clear_info_list() {
  info_list_.Clear();
}
const ::proto::ChessEntranceInfo& ChessEntranceDetailInfo::info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ChessEntranceDetailInfo.info_list)
  return info_list_.Get(index);
}
::proto::ChessEntranceInfo* ChessEntranceDetailInfo::mutable_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ChessEntranceDetailInfo.info_list)
  return info_list_.Mutable(index);
}
::proto::ChessEntranceInfo* ChessEntranceDetailInfo::add_info_list() {
  // @@protoc_insertion_point(field_add:proto.ChessEntranceDetailInfo.info_list)
  return info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ChessEntranceInfo >*
ChessEntranceDetailInfo::mutable_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ChessEntranceDetailInfo.info_list)
  return &info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ChessEntranceInfo >&
ChessEntranceDetailInfo::info_list() const {
  // @@protoc_insertion_point(field_list:proto.ChessEntranceDetailInfo.info_list)
  return info_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ChessMysteryInfo::ChessMysteryInfo_EntrancePointMapEntry::ChessMysteryInfo_EntrancePointMapEntry() {}
ChessMysteryInfo::ChessMysteryInfo_EntrancePointMapEntry::ChessMysteryInfo_EntrancePointMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ChessMysteryInfo::ChessMysteryInfo_EntrancePointMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[59];
}
void ChessMysteryInfo::ChessMysteryInfo_EntrancePointMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ChessMysteryInfo::ChessMysteryInfo_EntrancePointMapEntry::MergeFrom(const ChessMysteryInfo_EntrancePointMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ChessMysteryInfo::ChessMysteryInfo_DetailInfoMapEntry::ChessMysteryInfo_DetailInfoMapEntry() {}
ChessMysteryInfo::ChessMysteryInfo_DetailInfoMapEntry::ChessMysteryInfo_DetailInfoMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ChessMysteryInfo::ChessMysteryInfo_DetailInfoMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[60];
}
void ChessMysteryInfo::ChessMysteryInfo_DetailInfoMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ChessMysteryInfo::ChessMysteryInfo_DetailInfoMapEntry::MergeFrom(const ChessMysteryInfo_DetailInfoMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessMysteryInfo::kEntrancePointMapFieldNumber;
const int ChessMysteryInfo::kExitPointIdListFieldNumber;
const int ChessMysteryInfo::kDetailInfoMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessMysteryInfo::ChessMysteryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChessMysteryInfo)
}
ChessMysteryInfo::ChessMysteryInfo(const ChessMysteryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      exit_point_id_list_(from.exit_point_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detail_info_map_.MergeFrom(from.detail_info_map_);
  entrance_point_map_.MergeFrom(from.entrance_point_map_);
  // @@protoc_insertion_point(copy_constructor:proto.ChessMysteryInfo)
}

void ChessMysteryInfo::SharedCtor() {
  _cached_size_ = 0;
}

ChessMysteryInfo::~ChessMysteryInfo() {
  // @@protoc_insertion_point(destructor:proto.ChessMysteryInfo)
  SharedDtor();
}

void ChessMysteryInfo::SharedDtor() {
}

void ChessMysteryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessMysteryInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChessMysteryInfo& ChessMysteryInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChessMysteryInfo* ChessMysteryInfo::New(::google::protobuf::Arena* arena) const {
  ChessMysteryInfo* n = new ChessMysteryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessMysteryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChessMysteryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exit_point_id_list_.Clear();
  detail_info_map_.Clear();
  entrance_point_map_.Clear();
  _internal_metadata_.Clear();
}

bool ChessMysteryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChessMysteryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 exit_point_id_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_exit_point_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_exit_point_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .proto.ChessEntranceDetailInfo> detail_info_map = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          ChessMysteryInfo_DetailInfoMapEntry::Parser< ::google::protobuf::internal::MapField<
              ChessMysteryInfo_DetailInfoMapEntry,
              ::google::protobuf::uint32, ::proto::ChessEntranceDetailInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessEntranceDetailInfo > > parser(&detail_info_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> entrance_point_map = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          ChessMysteryInfo_EntrancePointMapEntry::Parser< ::google::protobuf::internal::MapField<
              ChessMysteryInfo_EntrancePointMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&entrance_point_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChessMysteryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChessMysteryInfo)
  return false;
#undef DO_
}

void ChessMysteryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChessMysteryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 exit_point_id_list = 3;
  if (this->exit_point_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _exit_point_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->exit_point_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->exit_point_id_list(i), output);
  }

  // map<uint32, .proto.ChessEntranceDetailInfo> detail_info_map = 5;
  if (!this->detail_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessEntranceDetailInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->detail_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->detail_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessEntranceDetailInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessEntranceDetailInfo >::const_iterator
          it = this->detail_info_map().begin();
          it != this->detail_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ChessMysteryInfo_DetailInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(detail_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ChessMysteryInfo_DetailInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessEntranceDetailInfo >::const_iterator
          it = this->detail_info_map().begin();
          it != this->detail_info_map().end(); ++it) {
        entry.reset(detail_info_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
      }
    }
  }

  // map<uint32, uint32> entrance_point_map = 13;
  if (!this->entrance_point_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->entrance_point_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->entrance_point_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->entrance_point_map().begin();
          it != this->entrance_point_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ChessMysteryInfo_EntrancePointMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(entrance_point_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ChessMysteryInfo_EntrancePointMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->entrance_point_map().begin();
          it != this->entrance_point_map().end(); ++it) {
        entry.reset(entrance_point_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChessMysteryInfo)
}

::google::protobuf::uint8* ChessMysteryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChessMysteryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 exit_point_id_list = 3;
  if (this->exit_point_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _exit_point_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->exit_point_id_list_, target);
  }

  // map<uint32, .proto.ChessEntranceDetailInfo> detail_info_map = 5;
  if (!this->detail_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessEntranceDetailInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->detail_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->detail_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessEntranceDetailInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessEntranceDetailInfo >::const_iterator
          it = this->detail_info_map().begin();
          it != this->detail_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ChessMysteryInfo_DetailInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(detail_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ChessMysteryInfo_DetailInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessEntranceDetailInfo >::const_iterator
          it = this->detail_info_map().begin();
          it != this->detail_info_map().end(); ++it) {
        entry.reset(detail_info_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
      }
    }
  }

  // map<uint32, uint32> entrance_point_map = 13;
  if (!this->entrance_point_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->entrance_point_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->entrance_point_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->entrance_point_map().begin();
          it != this->entrance_point_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ChessMysteryInfo_EntrancePointMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(entrance_point_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ChessMysteryInfo_EntrancePointMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->entrance_point_map().begin();
          it != this->entrance_point_map().end(); ++it) {
        entry.reset(entrance_point_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChessMysteryInfo)
  return target;
}

size_t ChessMysteryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChessMysteryInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 exit_point_id_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->exit_point_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _exit_point_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<uint32, .proto.ChessEntranceDetailInfo> detail_info_map = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->detail_info_map_size());
  {
    ::google::protobuf::scoped_ptr<ChessMysteryInfo_DetailInfoMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessEntranceDetailInfo >::const_iterator
        it = this->detail_info_map().begin();
        it != this->detail_info_map().end(); ++it) {
      entry.reset(detail_info_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint32, uint32> entrance_point_map = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->entrance_point_map_size());
  {
    ::google::protobuf::scoped_ptr<ChessMysteryInfo_EntrancePointMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->entrance_point_map().begin();
        it != this->entrance_point_map().end(); ++it) {
      entry.reset(entrance_point_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessMysteryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChessMysteryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ChessMysteryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessMysteryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChessMysteryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChessMysteryInfo)
    MergeFrom(*source);
  }
}

void ChessMysteryInfo::MergeFrom(const ChessMysteryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChessMysteryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exit_point_id_list_.MergeFrom(from.exit_point_id_list_);
  detail_info_map_.MergeFrom(from.detail_info_map_);
  entrance_point_map_.MergeFrom(from.entrance_point_map_);
}

void ChessMysteryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChessMysteryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessMysteryInfo::CopyFrom(const ChessMysteryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChessMysteryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessMysteryInfo::IsInitialized() const {
  return true;
}

void ChessMysteryInfo::Swap(ChessMysteryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessMysteryInfo::InternalSwap(ChessMysteryInfo* other) {
  using std::swap;
  exit_point_id_list_.InternalSwap(&other->exit_point_id_list_);
  detail_info_map_.Swap(&other->detail_info_map_);
  entrance_point_map_.Swap(&other->entrance_point_map_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessMysteryInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessMysteryInfo

// map<uint32, uint32> entrance_point_map = 13;
int ChessMysteryInfo::entrance_point_map_size() const {
  return entrance_point_map_.size();
}
void ChessMysteryInfo::clear_entrance_point_map() {
  entrance_point_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
ChessMysteryInfo::entrance_point_map() const {
  // @@protoc_insertion_point(field_map:proto.ChessMysteryInfo.entrance_point_map)
  return entrance_point_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
ChessMysteryInfo::mutable_entrance_point_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.ChessMysteryInfo.entrance_point_map)
  return entrance_point_map_.MutableMap();
}

// repeated uint32 exit_point_id_list = 3;
int ChessMysteryInfo::exit_point_id_list_size() const {
  return exit_point_id_list_.size();
}
void ChessMysteryInfo::clear_exit_point_id_list() {
  exit_point_id_list_.Clear();
}
::google::protobuf::uint32 ChessMysteryInfo::exit_point_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ChessMysteryInfo.exit_point_id_list)
  return exit_point_id_list_.Get(index);
}
void ChessMysteryInfo::set_exit_point_id_list(int index, ::google::protobuf::uint32 value) {
  exit_point_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ChessMysteryInfo.exit_point_id_list)
}
void ChessMysteryInfo::add_exit_point_id_list(::google::protobuf::uint32 value) {
  exit_point_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ChessMysteryInfo.exit_point_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ChessMysteryInfo::exit_point_id_list() const {
  // @@protoc_insertion_point(field_list:proto.ChessMysteryInfo.exit_point_id_list)
  return exit_point_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ChessMysteryInfo::mutable_exit_point_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ChessMysteryInfo.exit_point_id_list)
  return &exit_point_id_list_;
}

// map<uint32, .proto.ChessEntranceDetailInfo> detail_info_map = 5;
int ChessMysteryInfo::detail_info_map_size() const {
  return detail_info_map_.size();
}
void ChessMysteryInfo::clear_detail_info_map() {
  detail_info_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessEntranceDetailInfo >&
ChessMysteryInfo::detail_info_map() const {
  // @@protoc_insertion_point(field_map:proto.ChessMysteryInfo.detail_info_map)
  return detail_info_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessEntranceDetailInfo >*
ChessMysteryInfo::mutable_detail_info_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.ChessMysteryInfo.detail_info_map)
  return detail_info_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessNormalCardInfo::kCardIdFieldNumber;
const int ChessNormalCardInfo::kCostPointsFieldNumber;
const int ChessNormalCardInfo::kIsAttachCurseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessNormalCardInfo::ChessNormalCardInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChessNormalCardInfo)
}
ChessNormalCardInfo::ChessNormalCardInfo(const ChessNormalCardInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&card_id_, &from.card_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cost_points_) -
    reinterpret_cast<char*>(&card_id_)) + sizeof(cost_points_));
  // @@protoc_insertion_point(copy_constructor:proto.ChessNormalCardInfo)
}

void ChessNormalCardInfo::SharedCtor() {
  ::memset(&card_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_points_) -
      reinterpret_cast<char*>(&card_id_)) + sizeof(cost_points_));
  _cached_size_ = 0;
}

ChessNormalCardInfo::~ChessNormalCardInfo() {
  // @@protoc_insertion_point(destructor:proto.ChessNormalCardInfo)
  SharedDtor();
}

void ChessNormalCardInfo::SharedDtor() {
}

void ChessNormalCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessNormalCardInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChessNormalCardInfo& ChessNormalCardInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChessNormalCardInfo* ChessNormalCardInfo::New(::google::protobuf::Arena* arena) const {
  ChessNormalCardInfo* n = new ChessNormalCardInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessNormalCardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChessNormalCardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&card_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_points_) -
      reinterpret_cast<char*>(&card_id_)) + sizeof(cost_points_));
  _internal_metadata_.Clear();
}

bool ChessNormalCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChessNormalCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 card_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_attach_curse = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attach_curse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cost_points = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChessNormalCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChessNormalCardInfo)
  return false;
#undef DO_
}

void ChessNormalCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChessNormalCardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 2;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->card_id(), output);
  }

  // bool is_attach_curse = 6;
  if (this->is_attach_curse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_attach_curse(), output);
  }

  // uint32 cost_points = 15;
  if (this->cost_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->cost_points(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChessNormalCardInfo)
}

::google::protobuf::uint8* ChessNormalCardInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChessNormalCardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 2;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->card_id(), target);
  }

  // bool is_attach_curse = 6;
  if (this->is_attach_curse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_attach_curse(), target);
  }

  // uint32 cost_points = 15;
  if (this->cost_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->cost_points(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChessNormalCardInfo)
  return target;
}

size_t ChessNormalCardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChessNormalCardInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 card_id = 2;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  // bool is_attach_curse = 6;
  if (this->is_attach_curse() != 0) {
    total_size += 1 + 1;
  }

  // uint32 cost_points = 15;
  if (this->cost_points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cost_points());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessNormalCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChessNormalCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ChessNormalCardInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessNormalCardInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChessNormalCardInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChessNormalCardInfo)
    MergeFrom(*source);
  }
}

void ChessNormalCardInfo::MergeFrom(const ChessNormalCardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChessNormalCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
  if (from.is_attach_curse() != 0) {
    set_is_attach_curse(from.is_attach_curse());
  }
  if (from.cost_points() != 0) {
    set_cost_points(from.cost_points());
  }
}

void ChessNormalCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChessNormalCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessNormalCardInfo::CopyFrom(const ChessNormalCardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChessNormalCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessNormalCardInfo::IsInitialized() const {
  return true;
}

void ChessNormalCardInfo::Swap(ChessNormalCardInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessNormalCardInfo::InternalSwap(ChessNormalCardInfo* other) {
  using std::swap;
  swap(card_id_, other->card_id_);
  swap(is_attach_curse_, other->is_attach_curse_);
  swap(cost_points_, other->cost_points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessNormalCardInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessNormalCardInfo

// uint32 card_id = 2;
void ChessNormalCardInfo::clear_card_id() {
  card_id_ = 0u;
}
::google::protobuf::uint32 ChessNormalCardInfo::card_id() const {
  // @@protoc_insertion_point(field_get:proto.ChessNormalCardInfo.card_id)
  return card_id_;
}
void ChessNormalCardInfo::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessNormalCardInfo.card_id)
}

// uint32 cost_points = 15;
void ChessNormalCardInfo::clear_cost_points() {
  cost_points_ = 0u;
}
::google::protobuf::uint32 ChessNormalCardInfo::cost_points() const {
  // @@protoc_insertion_point(field_get:proto.ChessNormalCardInfo.cost_points)
  return cost_points_;
}
void ChessNormalCardInfo::set_cost_points(::google::protobuf::uint32 value) {
  
  cost_points_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessNormalCardInfo.cost_points)
}

// bool is_attach_curse = 6;
void ChessNormalCardInfo::clear_is_attach_curse() {
  is_attach_curse_ = false;
}
bool ChessNormalCardInfo::is_attach_curse() const {
  // @@protoc_insertion_point(field_get:proto.ChessNormalCardInfo.is_attach_curse)
  return is_attach_curse_;
}
void ChessNormalCardInfo::set_is_attach_curse(bool value) {
  
  is_attach_curse_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessNormalCardInfo.is_attach_curse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessPickCardReq::kCardIdFieldNumber;
const int ChessPickCardReq::kCardIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessPickCardReq::ChessPickCardReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChessPickCardReq)
}
ChessPickCardReq::ChessPickCardReq(const ChessPickCardReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&card_id_, &from.card_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_index_) -
    reinterpret_cast<char*>(&card_id_)) + sizeof(card_index_));
  // @@protoc_insertion_point(copy_constructor:proto.ChessPickCardReq)
}

void ChessPickCardReq::SharedCtor() {
  ::memset(&card_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_index_) -
      reinterpret_cast<char*>(&card_id_)) + sizeof(card_index_));
  _cached_size_ = 0;
}

ChessPickCardReq::~ChessPickCardReq() {
  // @@protoc_insertion_point(destructor:proto.ChessPickCardReq)
  SharedDtor();
}

void ChessPickCardReq::SharedDtor() {
}

void ChessPickCardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessPickCardReq::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChessPickCardReq& ChessPickCardReq::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChessPickCardReq* ChessPickCardReq::New(::google::protobuf::Arena* arena) const {
  ChessPickCardReq* n = new ChessPickCardReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessPickCardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChessPickCardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&card_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_index_) -
      reinterpret_cast<char*>(&card_id_)) + sizeof(card_index_));
  _internal_metadata_.Clear();
}

bool ChessPickCardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChessPickCardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 card_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChessPickCardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChessPickCardReq)
  return false;
#undef DO_
}

void ChessPickCardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChessPickCardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 1;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->card_id(), output);
  }

  // uint32 card_index = 4;
  if (this->card_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->card_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChessPickCardReq)
}

::google::protobuf::uint8* ChessPickCardReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChessPickCardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 1;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->card_id(), target);
  }

  // uint32 card_index = 4;
  if (this->card_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->card_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChessPickCardReq)
  return target;
}

size_t ChessPickCardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChessPickCardReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 card_id = 1;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  // uint32 card_index = 4;
  if (this->card_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessPickCardReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChessPickCardReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ChessPickCardReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessPickCardReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChessPickCardReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChessPickCardReq)
    MergeFrom(*source);
  }
}

void ChessPickCardReq::MergeFrom(const ChessPickCardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChessPickCardReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
  if (from.card_index() != 0) {
    set_card_index(from.card_index());
  }
}

void ChessPickCardReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChessPickCardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessPickCardReq::CopyFrom(const ChessPickCardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChessPickCardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessPickCardReq::IsInitialized() const {
  return true;
}

void ChessPickCardReq::Swap(ChessPickCardReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessPickCardReq::InternalSwap(ChessPickCardReq* other) {
  using std::swap;
  swap(card_id_, other->card_id_);
  swap(card_index_, other->card_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessPickCardReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessPickCardReq

// uint32 card_id = 1;
void ChessPickCardReq::clear_card_id() {
  card_id_ = 0u;
}
::google::protobuf::uint32 ChessPickCardReq::card_id() const {
  // @@protoc_insertion_point(field_get:proto.ChessPickCardReq.card_id)
  return card_id_;
}
void ChessPickCardReq::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPickCardReq.card_id)
}

// uint32 card_index = 4;
void ChessPickCardReq::clear_card_index() {
  card_index_ = 0u;
}
::google::protobuf::uint32 ChessPickCardReq::card_index() const {
  // @@protoc_insertion_point(field_get:proto.ChessPickCardReq.card_index)
  return card_index_;
}
void ChessPickCardReq::set_card_index(::google::protobuf::uint32 value) {
  
  card_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPickCardReq.card_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessPickCardRsp::kCardIndexFieldNumber;
const int ChessPickCardRsp::kCardIdFieldNumber;
const int ChessPickCardRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessPickCardRsp::ChessPickCardRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChessPickCardRsp)
}
ChessPickCardRsp::ChessPickCardRsp(const ChessPickCardRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&card_id_, &from.card_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_index_) -
    reinterpret_cast<char*>(&card_id_)) + sizeof(card_index_));
  // @@protoc_insertion_point(copy_constructor:proto.ChessPickCardRsp)
}

void ChessPickCardRsp::SharedCtor() {
  ::memset(&card_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_index_) -
      reinterpret_cast<char*>(&card_id_)) + sizeof(card_index_));
  _cached_size_ = 0;
}

ChessPickCardRsp::~ChessPickCardRsp() {
  // @@protoc_insertion_point(destructor:proto.ChessPickCardRsp)
  SharedDtor();
}

void ChessPickCardRsp::SharedDtor() {
}

void ChessPickCardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessPickCardRsp::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChessPickCardRsp& ChessPickCardRsp::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChessPickCardRsp* ChessPickCardRsp::New(::google::protobuf::Arena* arena) const {
  ChessPickCardRsp* n = new ChessPickCardRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessPickCardRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChessPickCardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&card_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_index_) -
      reinterpret_cast<char*>(&card_id_)) + sizeof(card_index_));
  _internal_metadata_.Clear();
}

bool ChessPickCardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChessPickCardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 card_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_index = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChessPickCardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChessPickCardRsp)
  return false;
#undef DO_
}

void ChessPickCardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChessPickCardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 1;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->card_id(), output);
  }

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->retcode(), output);
  }

  // uint32 card_index = 11;
  if (this->card_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->card_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChessPickCardRsp)
}

::google::protobuf::uint8* ChessPickCardRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChessPickCardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 1;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->card_id(), target);
  }

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->retcode(), target);
  }

  // uint32 card_index = 11;
  if (this->card_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->card_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChessPickCardRsp)
  return target;
}

size_t ChessPickCardRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChessPickCardRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 card_id = 1;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 card_index = 11;
  if (this->card_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessPickCardRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChessPickCardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ChessPickCardRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessPickCardRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChessPickCardRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChessPickCardRsp)
    MergeFrom(*source);
  }
}

void ChessPickCardRsp::MergeFrom(const ChessPickCardRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChessPickCardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.card_index() != 0) {
    set_card_index(from.card_index());
  }
}

void ChessPickCardRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChessPickCardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessPickCardRsp::CopyFrom(const ChessPickCardRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChessPickCardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessPickCardRsp::IsInitialized() const {
  return true;
}

void ChessPickCardRsp::Swap(ChessPickCardRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessPickCardRsp::InternalSwap(ChessPickCardRsp* other) {
  using std::swap;
  swap(card_id_, other->card_id_);
  swap(retcode_, other->retcode_);
  swap(card_index_, other->card_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessPickCardRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessPickCardRsp

// uint32 card_index = 11;
void ChessPickCardRsp::clear_card_index() {
  card_index_ = 0u;
}
::google::protobuf::uint32 ChessPickCardRsp::card_index() const {
  // @@protoc_insertion_point(field_get:proto.ChessPickCardRsp.card_index)
  return card_index_;
}
void ChessPickCardRsp::set_card_index(::google::protobuf::uint32 value) {
  
  card_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPickCardRsp.card_index)
}

// uint32 card_id = 1;
void ChessPickCardRsp::clear_card_id() {
  card_id_ = 0u;
}
::google::protobuf::uint32 ChessPickCardRsp::card_id() const {
  // @@protoc_insertion_point(field_get:proto.ChessPickCardRsp.card_id)
  return card_id_;
}
void ChessPickCardRsp::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPickCardRsp.card_id)
}

// int32 retcode = 4;
void ChessPickCardRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 ChessPickCardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ChessPickCardRsp.retcode)
  return retcode_;
}
void ChessPickCardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPickCardRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessPickCardNotify::kCurseCardIdFieldNumber;
const int ChessPickCardNotify::kNormalCardInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessPickCardNotify::ChessPickCardNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChessPickCardNotify)
}
ChessPickCardNotify::ChessPickCardNotify(const ChessPickCardNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_normal_card_info()) {
    normal_card_info_ = new ::proto::ChessNormalCardInfo(*from.normal_card_info_);
  } else {
    normal_card_info_ = NULL;
  }
  curse_card_id_ = from.curse_card_id_;
  // @@protoc_insertion_point(copy_constructor:proto.ChessPickCardNotify)
}

void ChessPickCardNotify::SharedCtor() {
  ::memset(&normal_card_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curse_card_id_) -
      reinterpret_cast<char*>(&normal_card_info_)) + sizeof(curse_card_id_));
  _cached_size_ = 0;
}

ChessPickCardNotify::~ChessPickCardNotify() {
  // @@protoc_insertion_point(destructor:proto.ChessPickCardNotify)
  SharedDtor();
}

void ChessPickCardNotify::SharedDtor() {
  if (this != internal_default_instance()) delete normal_card_info_;
}

void ChessPickCardNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessPickCardNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChessPickCardNotify& ChessPickCardNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChessPickCardNotify* ChessPickCardNotify::New(::google::protobuf::Arena* arena) const {
  ChessPickCardNotify* n = new ChessPickCardNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessPickCardNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChessPickCardNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && normal_card_info_ != NULL) {
    delete normal_card_info_;
  }
  normal_card_info_ = NULL;
  curse_card_id_ = 0u;
  _internal_metadata_.Clear();
}

bool ChessPickCardNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChessPickCardNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.ChessNormalCardInfo normal_card_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal_card_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 curse_card_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curse_card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChessPickCardNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChessPickCardNotify)
  return false;
#undef DO_
}

void ChessPickCardNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChessPickCardNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ChessNormalCardInfo normal_card_info = 1;
  if (this->has_normal_card_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->normal_card_info_, output);
  }

  // uint32 curse_card_id = 13;
  if (this->curse_card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->curse_card_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChessPickCardNotify)
}

::google::protobuf::uint8* ChessPickCardNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChessPickCardNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ChessNormalCardInfo normal_card_info = 1;
  if (this->has_normal_card_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->normal_card_info_, deterministic, target);
  }

  // uint32 curse_card_id = 13;
  if (this->curse_card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->curse_card_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChessPickCardNotify)
  return target;
}

size_t ChessPickCardNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChessPickCardNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.ChessNormalCardInfo normal_card_info = 1;
  if (this->has_normal_card_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->normal_card_info_);
  }

  // uint32 curse_card_id = 13;
  if (this->curse_card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curse_card_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessPickCardNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChessPickCardNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ChessPickCardNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessPickCardNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChessPickCardNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChessPickCardNotify)
    MergeFrom(*source);
  }
}

void ChessPickCardNotify::MergeFrom(const ChessPickCardNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChessPickCardNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_normal_card_info()) {
    mutable_normal_card_info()->::proto::ChessNormalCardInfo::MergeFrom(from.normal_card_info());
  }
  if (from.curse_card_id() != 0) {
    set_curse_card_id(from.curse_card_id());
  }
}

void ChessPickCardNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChessPickCardNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessPickCardNotify::CopyFrom(const ChessPickCardNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChessPickCardNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessPickCardNotify::IsInitialized() const {
  return true;
}

void ChessPickCardNotify::Swap(ChessPickCardNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessPickCardNotify::InternalSwap(ChessPickCardNotify* other) {
  using std::swap;
  swap(normal_card_info_, other->normal_card_info_);
  swap(curse_card_id_, other->curse_card_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessPickCardNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessPickCardNotify

// uint32 curse_card_id = 13;
void ChessPickCardNotify::clear_curse_card_id() {
  curse_card_id_ = 0u;
}
::google::protobuf::uint32 ChessPickCardNotify::curse_card_id() const {
  // @@protoc_insertion_point(field_get:proto.ChessPickCardNotify.curse_card_id)
  return curse_card_id_;
}
void ChessPickCardNotify::set_curse_card_id(::google::protobuf::uint32 value) {
  
  curse_card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPickCardNotify.curse_card_id)
}

// .proto.ChessNormalCardInfo normal_card_info = 1;
bool ChessPickCardNotify::has_normal_card_info() const {
  return this != internal_default_instance() && normal_card_info_ != NULL;
}
void ChessPickCardNotify::clear_normal_card_info() {
  if (GetArenaNoVirtual() == NULL && normal_card_info_ != NULL) delete normal_card_info_;
  normal_card_info_ = NULL;
}
const ::proto::ChessNormalCardInfo& ChessPickCardNotify::normal_card_info() const {
  const ::proto::ChessNormalCardInfo* p = normal_card_info_;
  // @@protoc_insertion_point(field_get:proto.ChessPickCardNotify.normal_card_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ChessNormalCardInfo*>(
      &::proto::_ChessNormalCardInfo_default_instance_);
}
::proto::ChessNormalCardInfo* ChessPickCardNotify::mutable_normal_card_info() {
  
  if (normal_card_info_ == NULL) {
    normal_card_info_ = new ::proto::ChessNormalCardInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.ChessPickCardNotify.normal_card_info)
  return normal_card_info_;
}
::proto::ChessNormalCardInfo* ChessPickCardNotify::release_normal_card_info() {
  // @@protoc_insertion_point(field_release:proto.ChessPickCardNotify.normal_card_info)
  
  ::proto::ChessNormalCardInfo* temp = normal_card_info_;
  normal_card_info_ = NULL;
  return temp;
}
void ChessPickCardNotify::set_allocated_normal_card_info(::proto::ChessNormalCardInfo* normal_card_info) {
  delete normal_card_info_;
  normal_card_info_ = normal_card_info;
  if (normal_card_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ChessPickCardNotify.normal_card_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessManualRefreshCardsReq::ChessManualRefreshCardsReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChessManualRefreshCardsReq)
}
ChessManualRefreshCardsReq::ChessManualRefreshCardsReq(const ChessManualRefreshCardsReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.ChessManualRefreshCardsReq)
}

void ChessManualRefreshCardsReq::SharedCtor() {
  _cached_size_ = 0;
}

ChessManualRefreshCardsReq::~ChessManualRefreshCardsReq() {
  // @@protoc_insertion_point(destructor:proto.ChessManualRefreshCardsReq)
  SharedDtor();
}

void ChessManualRefreshCardsReq::SharedDtor() {
}

void ChessManualRefreshCardsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessManualRefreshCardsReq::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChessManualRefreshCardsReq& ChessManualRefreshCardsReq::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChessManualRefreshCardsReq* ChessManualRefreshCardsReq::New(::google::protobuf::Arena* arena) const {
  ChessManualRefreshCardsReq* n = new ChessManualRefreshCardsReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessManualRefreshCardsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChessManualRefreshCardsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ChessManualRefreshCardsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChessManualRefreshCardsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChessManualRefreshCardsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChessManualRefreshCardsReq)
  return false;
#undef DO_
}

void ChessManualRefreshCardsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChessManualRefreshCardsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChessManualRefreshCardsReq)
}

::google::protobuf::uint8* ChessManualRefreshCardsReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChessManualRefreshCardsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChessManualRefreshCardsReq)
  return target;
}

size_t ChessManualRefreshCardsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChessManualRefreshCardsReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessManualRefreshCardsReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChessManualRefreshCardsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ChessManualRefreshCardsReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessManualRefreshCardsReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChessManualRefreshCardsReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChessManualRefreshCardsReq)
    MergeFrom(*source);
  }
}

void ChessManualRefreshCardsReq::MergeFrom(const ChessManualRefreshCardsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChessManualRefreshCardsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChessManualRefreshCardsReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChessManualRefreshCardsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessManualRefreshCardsReq::CopyFrom(const ChessManualRefreshCardsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChessManualRefreshCardsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessManualRefreshCardsReq::IsInitialized() const {
  return true;
}

void ChessManualRefreshCardsReq::Swap(ChessManualRefreshCardsReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessManualRefreshCardsReq::InternalSwap(ChessManualRefreshCardsReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessManualRefreshCardsReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessManualRefreshCardsReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessManualRefreshCardsRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessManualRefreshCardsRsp::ChessManualRefreshCardsRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChessManualRefreshCardsRsp)
}
ChessManualRefreshCardsRsp::ChessManualRefreshCardsRsp(const ChessManualRefreshCardsRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.ChessManualRefreshCardsRsp)
}

void ChessManualRefreshCardsRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

ChessManualRefreshCardsRsp::~ChessManualRefreshCardsRsp() {
  // @@protoc_insertion_point(destructor:proto.ChessManualRefreshCardsRsp)
  SharedDtor();
}

void ChessManualRefreshCardsRsp::SharedDtor() {
}

void ChessManualRefreshCardsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessManualRefreshCardsRsp::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChessManualRefreshCardsRsp& ChessManualRefreshCardsRsp::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChessManualRefreshCardsRsp* ChessManualRefreshCardsRsp::New(::google::protobuf::Arena* arena) const {
  ChessManualRefreshCardsRsp* n = new ChessManualRefreshCardsRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessManualRefreshCardsRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChessManualRefreshCardsRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool ChessManualRefreshCardsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChessManualRefreshCardsRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChessManualRefreshCardsRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChessManualRefreshCardsRsp)
  return false;
#undef DO_
}

void ChessManualRefreshCardsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChessManualRefreshCardsRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 12;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChessManualRefreshCardsRsp)
}

::google::protobuf::uint8* ChessManualRefreshCardsRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChessManualRefreshCardsRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 12;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChessManualRefreshCardsRsp)
  return target;
}

size_t ChessManualRefreshCardsRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChessManualRefreshCardsRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 12;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessManualRefreshCardsRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChessManualRefreshCardsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ChessManualRefreshCardsRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessManualRefreshCardsRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChessManualRefreshCardsRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChessManualRefreshCardsRsp)
    MergeFrom(*source);
  }
}

void ChessManualRefreshCardsRsp::MergeFrom(const ChessManualRefreshCardsRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChessManualRefreshCardsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void ChessManualRefreshCardsRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChessManualRefreshCardsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessManualRefreshCardsRsp::CopyFrom(const ChessManualRefreshCardsRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChessManualRefreshCardsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessManualRefreshCardsRsp::IsInitialized() const {
  return true;
}

void ChessManualRefreshCardsRsp::Swap(ChessManualRefreshCardsRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessManualRefreshCardsRsp::InternalSwap(ChessManualRefreshCardsRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessManualRefreshCardsRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessManualRefreshCardsRsp

// int32 retcode = 12;
void ChessManualRefreshCardsRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 ChessManualRefreshCardsRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ChessManualRefreshCardsRsp.retcode)
  return retcode_;
}
void ChessManualRefreshCardsRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessManualRefreshCardsRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessPlayerInfoNotify::kPlayerInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessPlayerInfoNotify::ChessPlayerInfoNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChessPlayerInfoNotify)
}
ChessPlayerInfoNotify::ChessPlayerInfoNotify(const ChessPlayerInfoNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player_info()) {
    player_info_ = new ::proto::ChessPlayerInfo(*from.player_info_);
  } else {
    player_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.ChessPlayerInfoNotify)
}

void ChessPlayerInfoNotify::SharedCtor() {
  player_info_ = NULL;
  _cached_size_ = 0;
}

ChessPlayerInfoNotify::~ChessPlayerInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.ChessPlayerInfoNotify)
  SharedDtor();
}

void ChessPlayerInfoNotify::SharedDtor() {
  if (this != internal_default_instance()) delete player_info_;
}

void ChessPlayerInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessPlayerInfoNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChessPlayerInfoNotify& ChessPlayerInfoNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChessPlayerInfoNotify* ChessPlayerInfoNotify::New(::google::protobuf::Arena* arena) const {
  ChessPlayerInfoNotify* n = new ChessPlayerInfoNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessPlayerInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChessPlayerInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && player_info_ != NULL) {
    delete player_info_;
  }
  player_info_ = NULL;
  _internal_metadata_.Clear();
}

bool ChessPlayerInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChessPlayerInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.ChessPlayerInfo player_info = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChessPlayerInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChessPlayerInfoNotify)
  return false;
#undef DO_
}

void ChessPlayerInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChessPlayerInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ChessPlayerInfo player_info = 10;
  if (this->has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->player_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChessPlayerInfoNotify)
}

::google::protobuf::uint8* ChessPlayerInfoNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChessPlayerInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ChessPlayerInfo player_info = 10;
  if (this->has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->player_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChessPlayerInfoNotify)
  return target;
}

size_t ChessPlayerInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChessPlayerInfoNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.ChessPlayerInfo player_info = 10;
  if (this->has_player_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessPlayerInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChessPlayerInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ChessPlayerInfoNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessPlayerInfoNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChessPlayerInfoNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChessPlayerInfoNotify)
    MergeFrom(*source);
  }
}

void ChessPlayerInfoNotify::MergeFrom(const ChessPlayerInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChessPlayerInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_info()) {
    mutable_player_info()->::proto::ChessPlayerInfo::MergeFrom(from.player_info());
  }
}

void ChessPlayerInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChessPlayerInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessPlayerInfoNotify::CopyFrom(const ChessPlayerInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChessPlayerInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessPlayerInfoNotify::IsInitialized() const {
  return true;
}

void ChessPlayerInfoNotify::Swap(ChessPlayerInfoNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessPlayerInfoNotify::InternalSwap(ChessPlayerInfoNotify* other) {
  using std::swap;
  swap(player_info_, other->player_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessPlayerInfoNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessPlayerInfoNotify

// .proto.ChessPlayerInfo player_info = 10;
bool ChessPlayerInfoNotify::has_player_info() const {
  return this != internal_default_instance() && player_info_ != NULL;
}
void ChessPlayerInfoNotify::clear_player_info() {
  if (GetArenaNoVirtual() == NULL && player_info_ != NULL) delete player_info_;
  player_info_ = NULL;
}
const ::proto::ChessPlayerInfo& ChessPlayerInfoNotify::player_info() const {
  const ::proto::ChessPlayerInfo* p = player_info_;
  // @@protoc_insertion_point(field_get:proto.ChessPlayerInfoNotify.player_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ChessPlayerInfo*>(
      &::proto::_ChessPlayerInfo_default_instance_);
}
::proto::ChessPlayerInfo* ChessPlayerInfoNotify::mutable_player_info() {
  
  if (player_info_ == NULL) {
    player_info_ = new ::proto::ChessPlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.ChessPlayerInfoNotify.player_info)
  return player_info_;
}
::proto::ChessPlayerInfo* ChessPlayerInfoNotify::release_player_info() {
  // @@protoc_insertion_point(field_release:proto.ChessPlayerInfoNotify.player_info)
  
  ::proto::ChessPlayerInfo* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
void ChessPlayerInfoNotify::set_allocated_player_info(::proto::ChessPlayerInfo* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ChessPlayerInfoNotify.player_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessLeftMonstersNotify::kLeftMonstersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessLeftMonstersNotify::ChessLeftMonstersNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChessLeftMonstersNotify)
}
ChessLeftMonstersNotify::ChessLeftMonstersNotify(const ChessLeftMonstersNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  left_monsters_ = from.left_monsters_;
  // @@protoc_insertion_point(copy_constructor:proto.ChessLeftMonstersNotify)
}

void ChessLeftMonstersNotify::SharedCtor() {
  left_monsters_ = 0u;
  _cached_size_ = 0;
}

ChessLeftMonstersNotify::~ChessLeftMonstersNotify() {
  // @@protoc_insertion_point(destructor:proto.ChessLeftMonstersNotify)
  SharedDtor();
}

void ChessLeftMonstersNotify::SharedDtor() {
}

void ChessLeftMonstersNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessLeftMonstersNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChessLeftMonstersNotify& ChessLeftMonstersNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChessLeftMonstersNotify* ChessLeftMonstersNotify::New(::google::protobuf::Arena* arena) const {
  ChessLeftMonstersNotify* n = new ChessLeftMonstersNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessLeftMonstersNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChessLeftMonstersNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  left_monsters_ = 0u;
  _internal_metadata_.Clear();
}

bool ChessLeftMonstersNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChessLeftMonstersNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 left_monsters = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_monsters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChessLeftMonstersNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChessLeftMonstersNotify)
  return false;
#undef DO_
}

void ChessLeftMonstersNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChessLeftMonstersNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 left_monsters = 6;
  if (this->left_monsters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->left_monsters(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChessLeftMonstersNotify)
}

::google::protobuf::uint8* ChessLeftMonstersNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChessLeftMonstersNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 left_monsters = 6;
  if (this->left_monsters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->left_monsters(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChessLeftMonstersNotify)
  return target;
}

size_t ChessLeftMonstersNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChessLeftMonstersNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 left_monsters = 6;
  if (this->left_monsters() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->left_monsters());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessLeftMonstersNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChessLeftMonstersNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ChessLeftMonstersNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessLeftMonstersNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChessLeftMonstersNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChessLeftMonstersNotify)
    MergeFrom(*source);
  }
}

void ChessLeftMonstersNotify::MergeFrom(const ChessLeftMonstersNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChessLeftMonstersNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.left_monsters() != 0) {
    set_left_monsters(from.left_monsters());
  }
}

void ChessLeftMonstersNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChessLeftMonstersNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessLeftMonstersNotify::CopyFrom(const ChessLeftMonstersNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChessLeftMonstersNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessLeftMonstersNotify::IsInitialized() const {
  return true;
}

void ChessLeftMonstersNotify::Swap(ChessLeftMonstersNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessLeftMonstersNotify::InternalSwap(ChessLeftMonstersNotify* other) {
  using std::swap;
  swap(left_monsters_, other->left_monsters_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessLeftMonstersNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessLeftMonstersNotify

// uint32 left_monsters = 6;
void ChessLeftMonstersNotify::clear_left_monsters() {
  left_monsters_ = 0u;
}
::google::protobuf::uint32 ChessLeftMonstersNotify::left_monsters() const {
  // @@protoc_insertion_point(field_get:proto.ChessLeftMonstersNotify.left_monsters)
  return left_monsters_;
}
void ChessLeftMonstersNotify::set_left_monsters(::google::protobuf::uint32 value) {
  
  left_monsters_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessLeftMonstersNotify.left_monsters)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessEscapedMonstersNotify::kExcapedMonstersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessEscapedMonstersNotify::ChessEscapedMonstersNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChessEscapedMonstersNotify)
}
ChessEscapedMonstersNotify::ChessEscapedMonstersNotify(const ChessEscapedMonstersNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  excaped_monsters_ = from.excaped_monsters_;
  // @@protoc_insertion_point(copy_constructor:proto.ChessEscapedMonstersNotify)
}

void ChessEscapedMonstersNotify::SharedCtor() {
  excaped_monsters_ = 0u;
  _cached_size_ = 0;
}

ChessEscapedMonstersNotify::~ChessEscapedMonstersNotify() {
  // @@protoc_insertion_point(destructor:proto.ChessEscapedMonstersNotify)
  SharedDtor();
}

void ChessEscapedMonstersNotify::SharedDtor() {
}

void ChessEscapedMonstersNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessEscapedMonstersNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChessEscapedMonstersNotify& ChessEscapedMonstersNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChessEscapedMonstersNotify* ChessEscapedMonstersNotify::New(::google::protobuf::Arena* arena) const {
  ChessEscapedMonstersNotify* n = new ChessEscapedMonstersNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessEscapedMonstersNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChessEscapedMonstersNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  excaped_monsters_ = 0u;
  _internal_metadata_.Clear();
}

bool ChessEscapedMonstersNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChessEscapedMonstersNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 excaped_monsters = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &excaped_monsters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChessEscapedMonstersNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChessEscapedMonstersNotify)
  return false;
#undef DO_
}

void ChessEscapedMonstersNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChessEscapedMonstersNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 excaped_monsters = 14;
  if (this->excaped_monsters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->excaped_monsters(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChessEscapedMonstersNotify)
}

::google::protobuf::uint8* ChessEscapedMonstersNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChessEscapedMonstersNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 excaped_monsters = 14;
  if (this->excaped_monsters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->excaped_monsters(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChessEscapedMonstersNotify)
  return target;
}

size_t ChessEscapedMonstersNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChessEscapedMonstersNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 excaped_monsters = 14;
  if (this->excaped_monsters() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->excaped_monsters());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessEscapedMonstersNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChessEscapedMonstersNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ChessEscapedMonstersNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessEscapedMonstersNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChessEscapedMonstersNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChessEscapedMonstersNotify)
    MergeFrom(*source);
  }
}

void ChessEscapedMonstersNotify::MergeFrom(const ChessEscapedMonstersNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChessEscapedMonstersNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.excaped_monsters() != 0) {
    set_excaped_monsters(from.excaped_monsters());
  }
}

void ChessEscapedMonstersNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChessEscapedMonstersNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessEscapedMonstersNotify::CopyFrom(const ChessEscapedMonstersNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChessEscapedMonstersNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessEscapedMonstersNotify::IsInitialized() const {
  return true;
}

void ChessEscapedMonstersNotify::Swap(ChessEscapedMonstersNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessEscapedMonstersNotify::InternalSwap(ChessEscapedMonstersNotify* other) {
  using std::swap;
  swap(excaped_monsters_, other->excaped_monsters_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessEscapedMonstersNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessEscapedMonstersNotify

// uint32 excaped_monsters = 14;
void ChessEscapedMonstersNotify::clear_excaped_monsters() {
  excaped_monsters_ = 0u;
}
::google::protobuf::uint32 ChessEscapedMonstersNotify::excaped_monsters() const {
  // @@protoc_insertion_point(field_get:proto.ChessEscapedMonstersNotify.excaped_monsters)
  return excaped_monsters_;
}
void ChessEscapedMonstersNotify::set_excaped_monsters(::google::protobuf::uint32 value) {
  
  excaped_monsters_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessEscapedMonstersNotify.excaped_monsters)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessSelectedCardsNotify::kSelectedCardInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessSelectedCardsNotify::ChessSelectedCardsNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChessSelectedCardsNotify)
}
ChessSelectedCardsNotify::ChessSelectedCardsNotify(const ChessSelectedCardsNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      selected_card_info_list_(from.selected_card_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.ChessSelectedCardsNotify)
}

void ChessSelectedCardsNotify::SharedCtor() {
  _cached_size_ = 0;
}

ChessSelectedCardsNotify::~ChessSelectedCardsNotify() {
  // @@protoc_insertion_point(destructor:proto.ChessSelectedCardsNotify)
  SharedDtor();
}

void ChessSelectedCardsNotify::SharedDtor() {
}

void ChessSelectedCardsNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessSelectedCardsNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChessSelectedCardsNotify& ChessSelectedCardsNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChessSelectedCardsNotify* ChessSelectedCardsNotify::New(::google::protobuf::Arena* arena) const {
  ChessSelectedCardsNotify* n = new ChessSelectedCardsNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessSelectedCardsNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChessSelectedCardsNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selected_card_info_list_.Clear();
  _internal_metadata_.Clear();
}

bool ChessSelectedCardsNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChessSelectedCardsNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.ChessCardInfo selected_card_info_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selected_card_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChessSelectedCardsNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChessSelectedCardsNotify)
  return false;
#undef DO_
}

void ChessSelectedCardsNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChessSelectedCardsNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ChessCardInfo selected_card_info_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->selected_card_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->selected_card_info_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChessSelectedCardsNotify)
}

::google::protobuf::uint8* ChessSelectedCardsNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChessSelectedCardsNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ChessCardInfo selected_card_info_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->selected_card_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->selected_card_info_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChessSelectedCardsNotify)
  return target;
}

size_t ChessSelectedCardsNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChessSelectedCardsNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ChessCardInfo selected_card_info_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->selected_card_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selected_card_info_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessSelectedCardsNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChessSelectedCardsNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ChessSelectedCardsNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessSelectedCardsNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChessSelectedCardsNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChessSelectedCardsNotify)
    MergeFrom(*source);
  }
}

void ChessSelectedCardsNotify::MergeFrom(const ChessSelectedCardsNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChessSelectedCardsNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  selected_card_info_list_.MergeFrom(from.selected_card_info_list_);
}

void ChessSelectedCardsNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChessSelectedCardsNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessSelectedCardsNotify::CopyFrom(const ChessSelectedCardsNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChessSelectedCardsNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessSelectedCardsNotify::IsInitialized() const {
  return true;
}

void ChessSelectedCardsNotify::Swap(ChessSelectedCardsNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessSelectedCardsNotify::InternalSwap(ChessSelectedCardsNotify* other) {
  using std::swap;
  selected_card_info_list_.InternalSwap(&other->selected_card_info_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessSelectedCardsNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessSelectedCardsNotify

// repeated .proto.ChessCardInfo selected_card_info_list = 4;
int ChessSelectedCardsNotify::selected_card_info_list_size() const {
  return selected_card_info_list_.size();
}
void ChessSelectedCardsNotify::clear_selected_card_info_list() {
  selected_card_info_list_.Clear();
}
const ::proto::ChessCardInfo& ChessSelectedCardsNotify::selected_card_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ChessSelectedCardsNotify.selected_card_info_list)
  return selected_card_info_list_.Get(index);
}
::proto::ChessCardInfo* ChessSelectedCardsNotify::mutable_selected_card_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ChessSelectedCardsNotify.selected_card_info_list)
  return selected_card_info_list_.Mutable(index);
}
::proto::ChessCardInfo* ChessSelectedCardsNotify::add_selected_card_info_list() {
  // @@protoc_insertion_point(field_add:proto.ChessSelectedCardsNotify.selected_card_info_list)
  return selected_card_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ChessCardInfo >*
ChessSelectedCardsNotify::mutable_selected_card_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ChessSelectedCardsNotify.selected_card_info_list)
  return &selected_card_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ChessCardInfo >&
ChessSelectedCardsNotify::selected_card_info_list() const {
  // @@protoc_insertion_point(field_list:proto.ChessSelectedCardsNotify.selected_card_info_list)
  return selected_card_info_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GlobalBuildingInfoNotify::kCurrentNumFieldNumber;
const int GlobalBuildingInfoNotify::kBuildingListFieldNumber;
const int GlobalBuildingInfoNotify::kMaxNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GlobalBuildingInfoNotify::GlobalBuildingInfoNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GlobalBuildingInfoNotify)
}
GlobalBuildingInfoNotify::GlobalBuildingInfoNotify(const GlobalBuildingInfoNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      building_list_(from.building_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&current_num_, &from.current_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_num_) -
    reinterpret_cast<char*>(&current_num_)) + sizeof(max_num_));
  // @@protoc_insertion_point(copy_constructor:proto.GlobalBuildingInfoNotify)
}

void GlobalBuildingInfoNotify::SharedCtor() {
  ::memset(&current_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_num_) -
      reinterpret_cast<char*>(&current_num_)) + sizeof(max_num_));
  _cached_size_ = 0;
}

GlobalBuildingInfoNotify::~GlobalBuildingInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.GlobalBuildingInfoNotify)
  SharedDtor();
}

void GlobalBuildingInfoNotify::SharedDtor() {
}

void GlobalBuildingInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalBuildingInfoNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GlobalBuildingInfoNotify& GlobalBuildingInfoNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

GlobalBuildingInfoNotify* GlobalBuildingInfoNotify::New(::google::protobuf::Arena* arena) const {
  GlobalBuildingInfoNotify* n = new GlobalBuildingInfoNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GlobalBuildingInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GlobalBuildingInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  building_list_.Clear();
  ::memset(&current_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_num_) -
      reinterpret_cast<char*>(&current_num_)) + sizeof(max_num_));
  _internal_metadata_.Clear();
}

bool GlobalBuildingInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GlobalBuildingInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.BuildingInfo building_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_building_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 current_num = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_num = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GlobalBuildingInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GlobalBuildingInfoNotify)
  return false;
#undef DO_
}

void GlobalBuildingInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GlobalBuildingInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.BuildingInfo building_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->building_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->building_list(static_cast<int>(i)), output);
  }

  // uint32 current_num = 5;
  if (this->current_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->current_num(), output);
  }

  // uint32 max_num = 13;
  if (this->max_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->max_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GlobalBuildingInfoNotify)
}

::google::protobuf::uint8* GlobalBuildingInfoNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GlobalBuildingInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.BuildingInfo building_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->building_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->building_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 current_num = 5;
  if (this->current_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->current_num(), target);
  }

  // uint32 max_num = 13;
  if (this->max_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->max_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GlobalBuildingInfoNotify)
  return target;
}

size_t GlobalBuildingInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GlobalBuildingInfoNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.BuildingInfo building_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->building_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->building_list(static_cast<int>(i)));
    }
  }

  // uint32 current_num = 5;
  if (this->current_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->current_num());
  }

  // uint32 max_num = 13;
  if (this->max_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalBuildingInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GlobalBuildingInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GlobalBuildingInfoNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GlobalBuildingInfoNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GlobalBuildingInfoNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GlobalBuildingInfoNotify)
    MergeFrom(*source);
  }
}

void GlobalBuildingInfoNotify::MergeFrom(const GlobalBuildingInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GlobalBuildingInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  building_list_.MergeFrom(from.building_list_);
  if (from.current_num() != 0) {
    set_current_num(from.current_num());
  }
  if (from.max_num() != 0) {
    set_max_num(from.max_num());
  }
}

void GlobalBuildingInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GlobalBuildingInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalBuildingInfoNotify::CopyFrom(const GlobalBuildingInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GlobalBuildingInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalBuildingInfoNotify::IsInitialized() const {
  return true;
}

void GlobalBuildingInfoNotify::Swap(GlobalBuildingInfoNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GlobalBuildingInfoNotify::InternalSwap(GlobalBuildingInfoNotify* other) {
  using std::swap;
  building_list_.InternalSwap(&other->building_list_);
  swap(current_num_, other->current_num_);
  swap(max_num_, other->max_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GlobalBuildingInfoNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GlobalBuildingInfoNotify

// uint32 current_num = 5;
void GlobalBuildingInfoNotify::clear_current_num() {
  current_num_ = 0u;
}
::google::protobuf::uint32 GlobalBuildingInfoNotify::current_num() const {
  // @@protoc_insertion_point(field_get:proto.GlobalBuildingInfoNotify.current_num)
  return current_num_;
}
void GlobalBuildingInfoNotify::set_current_num(::google::protobuf::uint32 value) {
  
  current_num_ = value;
  // @@protoc_insertion_point(field_set:proto.GlobalBuildingInfoNotify.current_num)
}

// repeated .proto.BuildingInfo building_list = 3;
int GlobalBuildingInfoNotify::building_list_size() const {
  return building_list_.size();
}
void GlobalBuildingInfoNotify::clear_building_list() {
  building_list_.Clear();
}
const ::proto::BuildingInfo& GlobalBuildingInfoNotify::building_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GlobalBuildingInfoNotify.building_list)
  return building_list_.Get(index);
}
::proto::BuildingInfo* GlobalBuildingInfoNotify::mutable_building_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GlobalBuildingInfoNotify.building_list)
  return building_list_.Mutable(index);
}
::proto::BuildingInfo* GlobalBuildingInfoNotify::add_building_list() {
  // @@protoc_insertion_point(field_add:proto.GlobalBuildingInfoNotify.building_list)
  return building_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::BuildingInfo >*
GlobalBuildingInfoNotify::mutable_building_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GlobalBuildingInfoNotify.building_list)
  return &building_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::BuildingInfo >&
GlobalBuildingInfoNotify::building_list() const {
  // @@protoc_insertion_point(field_list:proto.GlobalBuildingInfoNotify.building_list)
  return building_list_;
}

// uint32 max_num = 13;
void GlobalBuildingInfoNotify::clear_max_num() {
  max_num_ = 0u;
}
::google::protobuf::uint32 GlobalBuildingInfoNotify::max_num() const {
  // @@protoc_insertion_point(field_get:proto.GlobalBuildingInfoNotify.max_num)
  return max_num_;
}
void GlobalBuildingInfoNotify::set_max_num(::google::protobuf::uint32 value) {
  
  max_num_ = value;
  // @@protoc_insertion_point(field_set:proto.GlobalBuildingInfoNotify.max_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InBattleIrodoriChessInfo::kMysteryInfoFieldNumber;
const int InBattleIrodoriChessInfo::kLeftMonstersFieldNumber;
const int InBattleIrodoriChessInfo::kSelectedCardIdListFieldNumber;
const int InBattleIrodoriChessInfo::kBuildingPointsFieldNumber;
const int InBattleIrodoriChessInfo::kSettleScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InBattleIrodoriChessInfo::InBattleIrodoriChessInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InBattleIrodoriChessInfo)
}
InBattleIrodoriChessInfo::InBattleIrodoriChessInfo(const InBattleIrodoriChessInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      selected_card_id_list_(from.selected_card_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mystery_info()) {
    mystery_info_ = new ::proto::IrodoriChessMysteryInfo(*from.mystery_info_);
  } else {
    mystery_info_ = NULL;
  }
  ::memcpy(&settle_score_, &from.settle_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&left_monsters_) -
    reinterpret_cast<char*>(&settle_score_)) + sizeof(left_monsters_));
  // @@protoc_insertion_point(copy_constructor:proto.InBattleIrodoriChessInfo)
}

void InBattleIrodoriChessInfo::SharedCtor() {
  ::memset(&mystery_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_monsters_) -
      reinterpret_cast<char*>(&mystery_info_)) + sizeof(left_monsters_));
  _cached_size_ = 0;
}

InBattleIrodoriChessInfo::~InBattleIrodoriChessInfo() {
  // @@protoc_insertion_point(destructor:proto.InBattleIrodoriChessInfo)
  SharedDtor();
}

void InBattleIrodoriChessInfo::SharedDtor() {
  if (this != internal_default_instance()) delete mystery_info_;
}

void InBattleIrodoriChessInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InBattleIrodoriChessInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InBattleIrodoriChessInfo& InBattleIrodoriChessInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

InBattleIrodoriChessInfo* InBattleIrodoriChessInfo::New(::google::protobuf::Arena* arena) const {
  InBattleIrodoriChessInfo* n = new InBattleIrodoriChessInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InBattleIrodoriChessInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InBattleIrodoriChessInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selected_card_id_list_.Clear();
  if (GetArenaNoVirtual() == NULL && mystery_info_ != NULL) {
    delete mystery_info_;
  }
  mystery_info_ = NULL;
  ::memset(&settle_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_monsters_) -
      reinterpret_cast<char*>(&settle_score_)) + sizeof(left_monsters_));
  _internal_metadata_.Clear();
}

bool InBattleIrodoriChessInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InBattleIrodoriChessInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.IrodoriChessMysteryInfo mystery_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mystery_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 settle_score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &settle_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 building_points = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &building_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 left_monsters = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_monsters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 selected_card_id_list = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_selected_card_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 106u, input, this->mutable_selected_card_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InBattleIrodoriChessInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InBattleIrodoriChessInfo)
  return false;
#undef DO_
}

void InBattleIrodoriChessInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InBattleIrodoriChessInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.IrodoriChessMysteryInfo mystery_info = 3;
  if (this->has_mystery_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->mystery_info_, output);
  }

  // uint32 settle_score = 4;
  if (this->settle_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->settle_score(), output);
  }

  // uint32 building_points = 7;
  if (this->building_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->building_points(), output);
  }

  // uint32 left_monsters = 12;
  if (this->left_monsters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->left_monsters(), output);
  }

  // repeated uint32 selected_card_id_list = 13;
  if (this->selected_card_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _selected_card_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->selected_card_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->selected_card_id_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InBattleIrodoriChessInfo)
}

::google::protobuf::uint8* InBattleIrodoriChessInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InBattleIrodoriChessInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.IrodoriChessMysteryInfo mystery_info = 3;
  if (this->has_mystery_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->mystery_info_, deterministic, target);
  }

  // uint32 settle_score = 4;
  if (this->settle_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->settle_score(), target);
  }

  // uint32 building_points = 7;
  if (this->building_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->building_points(), target);
  }

  // uint32 left_monsters = 12;
  if (this->left_monsters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->left_monsters(), target);
  }

  // repeated uint32 selected_card_id_list = 13;
  if (this->selected_card_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _selected_card_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->selected_card_id_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InBattleIrodoriChessInfo)
  return target;
}

size_t InBattleIrodoriChessInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InBattleIrodoriChessInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 selected_card_id_list = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->selected_card_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _selected_card_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .proto.IrodoriChessMysteryInfo mystery_info = 3;
  if (this->has_mystery_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mystery_info_);
  }

  // uint32 settle_score = 4;
  if (this->settle_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->settle_score());
  }

  // uint32 building_points = 7;
  if (this->building_points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->building_points());
  }

  // uint32 left_monsters = 12;
  if (this->left_monsters() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->left_monsters());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InBattleIrodoriChessInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InBattleIrodoriChessInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InBattleIrodoriChessInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InBattleIrodoriChessInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InBattleIrodoriChessInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InBattleIrodoriChessInfo)
    MergeFrom(*source);
  }
}

void InBattleIrodoriChessInfo::MergeFrom(const InBattleIrodoriChessInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InBattleIrodoriChessInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  selected_card_id_list_.MergeFrom(from.selected_card_id_list_);
  if (from.has_mystery_info()) {
    mutable_mystery_info()->::proto::IrodoriChessMysteryInfo::MergeFrom(from.mystery_info());
  }
  if (from.settle_score() != 0) {
    set_settle_score(from.settle_score());
  }
  if (from.building_points() != 0) {
    set_building_points(from.building_points());
  }
  if (from.left_monsters() != 0) {
    set_left_monsters(from.left_monsters());
  }
}

void InBattleIrodoriChessInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InBattleIrodoriChessInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InBattleIrodoriChessInfo::CopyFrom(const InBattleIrodoriChessInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InBattleIrodoriChessInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InBattleIrodoriChessInfo::IsInitialized() const {
  return true;
}

void InBattleIrodoriChessInfo::Swap(InBattleIrodoriChessInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InBattleIrodoriChessInfo::InternalSwap(InBattleIrodoriChessInfo* other) {
  using std::swap;
  selected_card_id_list_.InternalSwap(&other->selected_card_id_list_);
  swap(mystery_info_, other->mystery_info_);
  swap(settle_score_, other->settle_score_);
  swap(building_points_, other->building_points_);
  swap(left_monsters_, other->left_monsters_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InBattleIrodoriChessInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InBattleIrodoriChessInfo

// .proto.IrodoriChessMysteryInfo mystery_info = 3;
bool InBattleIrodoriChessInfo::has_mystery_info() const {
  return this != internal_default_instance() && mystery_info_ != NULL;
}
void InBattleIrodoriChessInfo::clear_mystery_info() {
  if (GetArenaNoVirtual() == NULL && mystery_info_ != NULL) delete mystery_info_;
  mystery_info_ = NULL;
}
const ::proto::IrodoriChessMysteryInfo& InBattleIrodoriChessInfo::mystery_info() const {
  const ::proto::IrodoriChessMysteryInfo* p = mystery_info_;
  // @@protoc_insertion_point(field_get:proto.InBattleIrodoriChessInfo.mystery_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::IrodoriChessMysteryInfo*>(
      &::proto::_IrodoriChessMysteryInfo_default_instance_);
}
::proto::IrodoriChessMysteryInfo* InBattleIrodoriChessInfo::mutable_mystery_info() {
  
  if (mystery_info_ == NULL) {
    mystery_info_ = new ::proto::IrodoriChessMysteryInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.InBattleIrodoriChessInfo.mystery_info)
  return mystery_info_;
}
::proto::IrodoriChessMysteryInfo* InBattleIrodoriChessInfo::release_mystery_info() {
  // @@protoc_insertion_point(field_release:proto.InBattleIrodoriChessInfo.mystery_info)
  
  ::proto::IrodoriChessMysteryInfo* temp = mystery_info_;
  mystery_info_ = NULL;
  return temp;
}
void InBattleIrodoriChessInfo::set_allocated_mystery_info(::proto::IrodoriChessMysteryInfo* mystery_info) {
  delete mystery_info_;
  mystery_info_ = mystery_info;
  if (mystery_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.InBattleIrodoriChessInfo.mystery_info)
}

// uint32 left_monsters = 12;
void InBattleIrodoriChessInfo::clear_left_monsters() {
  left_monsters_ = 0u;
}
::google::protobuf::uint32 InBattleIrodoriChessInfo::left_monsters() const {
  // @@protoc_insertion_point(field_get:proto.InBattleIrodoriChessInfo.left_monsters)
  return left_monsters_;
}
void InBattleIrodoriChessInfo::set_left_monsters(::google::protobuf::uint32 value) {
  
  left_monsters_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleIrodoriChessInfo.left_monsters)
}

// repeated uint32 selected_card_id_list = 13;
int InBattleIrodoriChessInfo::selected_card_id_list_size() const {
  return selected_card_id_list_.size();
}
void InBattleIrodoriChessInfo::clear_selected_card_id_list() {
  selected_card_id_list_.Clear();
}
::google::protobuf::uint32 InBattleIrodoriChessInfo::selected_card_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleIrodoriChessInfo.selected_card_id_list)
  return selected_card_id_list_.Get(index);
}
void InBattleIrodoriChessInfo::set_selected_card_id_list(int index, ::google::protobuf::uint32 value) {
  selected_card_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.InBattleIrodoriChessInfo.selected_card_id_list)
}
void InBattleIrodoriChessInfo::add_selected_card_id_list(::google::protobuf::uint32 value) {
  selected_card_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.InBattleIrodoriChessInfo.selected_card_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
InBattleIrodoriChessInfo::selected_card_id_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleIrodoriChessInfo.selected_card_id_list)
  return selected_card_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
InBattleIrodoriChessInfo::mutable_selected_card_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleIrodoriChessInfo.selected_card_id_list)
  return &selected_card_id_list_;
}

// uint32 building_points = 7;
void InBattleIrodoriChessInfo::clear_building_points() {
  building_points_ = 0u;
}
::google::protobuf::uint32 InBattleIrodoriChessInfo::building_points() const {
  // @@protoc_insertion_point(field_get:proto.InBattleIrodoriChessInfo.building_points)
  return building_points_;
}
void InBattleIrodoriChessInfo::set_building_points(::google::protobuf::uint32 value) {
  
  building_points_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleIrodoriChessInfo.building_points)
}

// uint32 settle_score = 4;
void InBattleIrodoriChessInfo::clear_settle_score() {
  settle_score_ = 0u;
}
::google::protobuf::uint32 InBattleIrodoriChessInfo::settle_score() const {
  // @@protoc_insertion_point(field_get:proto.InBattleIrodoriChessInfo.settle_score)
  return settle_score_;
}
void InBattleIrodoriChessInfo::set_settle_score(::google::protobuf::uint32 value) {
  
  settle_score_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleIrodoriChessInfo.settle_score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IrodoriChessMonsterInfo::kGrantPointsFieldNumber;
const int IrodoriChessMonsterInfo::kLevelFieldNumber;
const int IrodoriChessMonsterInfo::kMonsterIdFieldNumber;
const int IrodoriChessMonsterInfo::kAffixListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IrodoriChessMonsterInfo::IrodoriChessMonsterInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.IrodoriChessMonsterInfo)
}
IrodoriChessMonsterInfo::IrodoriChessMonsterInfo(const IrodoriChessMonsterInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      affix_list_(from.affix_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&monster_id_, &from.monster_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&monster_id_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:proto.IrodoriChessMonsterInfo)
}

void IrodoriChessMonsterInfo::SharedCtor() {
  ::memset(&monster_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&monster_id_)) + sizeof(level_));
  _cached_size_ = 0;
}

IrodoriChessMonsterInfo::~IrodoriChessMonsterInfo() {
  // @@protoc_insertion_point(destructor:proto.IrodoriChessMonsterInfo)
  SharedDtor();
}

void IrodoriChessMonsterInfo::SharedDtor() {
}

void IrodoriChessMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IrodoriChessMonsterInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IrodoriChessMonsterInfo& IrodoriChessMonsterInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

IrodoriChessMonsterInfo* IrodoriChessMonsterInfo::New(::google::protobuf::Arena* arena) const {
  IrodoriChessMonsterInfo* n = new IrodoriChessMonsterInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IrodoriChessMonsterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.IrodoriChessMonsterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  affix_list_.Clear();
  ::memset(&monster_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&monster_id_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

bool IrodoriChessMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.IrodoriChessMonsterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 grant_points = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grant_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 affix_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_affix_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 90u, input, this->mutable_affix_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 monster_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.IrodoriChessMonsterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.IrodoriChessMonsterInfo)
  return false;
#undef DO_
}

void IrodoriChessMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.IrodoriChessMonsterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 grant_points = 6;
  if (this->grant_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->grant_points(), output);
  }

  // repeated uint32 affix_list = 11;
  if (this->affix_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _affix_list_cached_byte_size_));
  }
  for (int i = 0, n = this->affix_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->affix_list(i), output);
  }

  // uint32 level = 13;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->level(), output);
  }

  // uint32 monster_id = 14;
  if (this->monster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->monster_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.IrodoriChessMonsterInfo)
}

::google::protobuf::uint8* IrodoriChessMonsterInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.IrodoriChessMonsterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 grant_points = 6;
  if (this->grant_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->grant_points(), target);
  }

  // repeated uint32 affix_list = 11;
  if (this->affix_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _affix_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->affix_list_, target);
  }

  // uint32 level = 13;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->level(), target);
  }

  // uint32 monster_id = 14;
  if (this->monster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->monster_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.IrodoriChessMonsterInfo)
  return target;
}

size_t IrodoriChessMonsterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.IrodoriChessMonsterInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 affix_list = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->affix_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _affix_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 monster_id = 14;
  if (this->monster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->monster_id());
  }

  // uint32 grant_points = 6;
  if (this->grant_points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->grant_points());
  }

  // uint32 level = 13;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IrodoriChessMonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.IrodoriChessMonsterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const IrodoriChessMonsterInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IrodoriChessMonsterInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.IrodoriChessMonsterInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.IrodoriChessMonsterInfo)
    MergeFrom(*source);
  }
}

void IrodoriChessMonsterInfo::MergeFrom(const IrodoriChessMonsterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.IrodoriChessMonsterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  affix_list_.MergeFrom(from.affix_list_);
  if (from.monster_id() != 0) {
    set_monster_id(from.monster_id());
  }
  if (from.grant_points() != 0) {
    set_grant_points(from.grant_points());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void IrodoriChessMonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.IrodoriChessMonsterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IrodoriChessMonsterInfo::CopyFrom(const IrodoriChessMonsterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.IrodoriChessMonsterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IrodoriChessMonsterInfo::IsInitialized() const {
  return true;
}

void IrodoriChessMonsterInfo::Swap(IrodoriChessMonsterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IrodoriChessMonsterInfo::InternalSwap(IrodoriChessMonsterInfo* other) {
  using std::swap;
  affix_list_.InternalSwap(&other->affix_list_);
  swap(monster_id_, other->monster_id_);
  swap(grant_points_, other->grant_points_);
  swap(level_, other->level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IrodoriChessMonsterInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IrodoriChessMonsterInfo

// uint32 grant_points = 6;
void IrodoriChessMonsterInfo::clear_grant_points() {
  grant_points_ = 0u;
}
::google::protobuf::uint32 IrodoriChessMonsterInfo::grant_points() const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessMonsterInfo.grant_points)
  return grant_points_;
}
void IrodoriChessMonsterInfo::set_grant_points(::google::protobuf::uint32 value) {
  
  grant_points_ = value;
  // @@protoc_insertion_point(field_set:proto.IrodoriChessMonsterInfo.grant_points)
}

// uint32 level = 13;
void IrodoriChessMonsterInfo::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 IrodoriChessMonsterInfo::level() const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessMonsterInfo.level)
  return level_;
}
void IrodoriChessMonsterInfo::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.IrodoriChessMonsterInfo.level)
}

// uint32 monster_id = 14;
void IrodoriChessMonsterInfo::clear_monster_id() {
  monster_id_ = 0u;
}
::google::protobuf::uint32 IrodoriChessMonsterInfo::monster_id() const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessMonsterInfo.monster_id)
  return monster_id_;
}
void IrodoriChessMonsterInfo::set_monster_id(::google::protobuf::uint32 value) {
  
  monster_id_ = value;
  // @@protoc_insertion_point(field_set:proto.IrodoriChessMonsterInfo.monster_id)
}

// repeated uint32 affix_list = 11;
int IrodoriChessMonsterInfo::affix_list_size() const {
  return affix_list_.size();
}
void IrodoriChessMonsterInfo::clear_affix_list() {
  affix_list_.Clear();
}
::google::protobuf::uint32 IrodoriChessMonsterInfo::affix_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessMonsterInfo.affix_list)
  return affix_list_.Get(index);
}
void IrodoriChessMonsterInfo::set_affix_list(int index, ::google::protobuf::uint32 value) {
  affix_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.IrodoriChessMonsterInfo.affix_list)
}
void IrodoriChessMonsterInfo::add_affix_list(::google::protobuf::uint32 value) {
  affix_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.IrodoriChessMonsterInfo.affix_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IrodoriChessMonsterInfo::affix_list() const {
  // @@protoc_insertion_point(field_list:proto.IrodoriChessMonsterInfo.affix_list)
  return affix_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IrodoriChessMonsterInfo::mutable_affix_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.IrodoriChessMonsterInfo.affix_list)
  return &affix_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IrodoriChessEntranceInfo::kMonsterInfoListFieldNumber;
const int IrodoriChessEntranceInfo::kEntrancePointIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IrodoriChessEntranceInfo::IrodoriChessEntranceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.IrodoriChessEntranceInfo)
}
IrodoriChessEntranceInfo::IrodoriChessEntranceInfo(const IrodoriChessEntranceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      monster_info_list_(from.monster_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entrance_point_id_ = from.entrance_point_id_;
  // @@protoc_insertion_point(copy_constructor:proto.IrodoriChessEntranceInfo)
}

void IrodoriChessEntranceInfo::SharedCtor() {
  entrance_point_id_ = 0u;
  _cached_size_ = 0;
}

IrodoriChessEntranceInfo::~IrodoriChessEntranceInfo() {
  // @@protoc_insertion_point(destructor:proto.IrodoriChessEntranceInfo)
  SharedDtor();
}

void IrodoriChessEntranceInfo::SharedDtor() {
}

void IrodoriChessEntranceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IrodoriChessEntranceInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IrodoriChessEntranceInfo& IrodoriChessEntranceInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

IrodoriChessEntranceInfo* IrodoriChessEntranceInfo::New(::google::protobuf::Arena* arena) const {
  IrodoriChessEntranceInfo* n = new IrodoriChessEntranceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IrodoriChessEntranceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.IrodoriChessEntranceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  monster_info_list_.Clear();
  entrance_point_id_ = 0u;
  _internal_metadata_.Clear();
}

bool IrodoriChessEntranceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.IrodoriChessEntranceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 entrance_point_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entrance_point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.IrodoriChessMonsterInfo monster_info_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monster_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.IrodoriChessEntranceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.IrodoriChessEntranceInfo)
  return false;
#undef DO_
}

void IrodoriChessEntranceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.IrodoriChessEntranceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entrance_point_id = 4;
  if (this->entrance_point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->entrance_point_id(), output);
  }

  // repeated .proto.IrodoriChessMonsterInfo monster_info_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->monster_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->monster_info_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.IrodoriChessEntranceInfo)
}

::google::protobuf::uint8* IrodoriChessEntranceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.IrodoriChessEntranceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entrance_point_id = 4;
  if (this->entrance_point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->entrance_point_id(), target);
  }

  // repeated .proto.IrodoriChessMonsterInfo monster_info_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->monster_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->monster_info_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.IrodoriChessEntranceInfo)
  return target;
}

size_t IrodoriChessEntranceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.IrodoriChessEntranceInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.IrodoriChessMonsterInfo monster_info_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->monster_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monster_info_list(static_cast<int>(i)));
    }
  }

  // uint32 entrance_point_id = 4;
  if (this->entrance_point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->entrance_point_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IrodoriChessEntranceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.IrodoriChessEntranceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const IrodoriChessEntranceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IrodoriChessEntranceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.IrodoriChessEntranceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.IrodoriChessEntranceInfo)
    MergeFrom(*source);
  }
}

void IrodoriChessEntranceInfo::MergeFrom(const IrodoriChessEntranceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.IrodoriChessEntranceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  monster_info_list_.MergeFrom(from.monster_info_list_);
  if (from.entrance_point_id() != 0) {
    set_entrance_point_id(from.entrance_point_id());
  }
}

void IrodoriChessEntranceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.IrodoriChessEntranceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IrodoriChessEntranceInfo::CopyFrom(const IrodoriChessEntranceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.IrodoriChessEntranceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IrodoriChessEntranceInfo::IsInitialized() const {
  return true;
}

void IrodoriChessEntranceInfo::Swap(IrodoriChessEntranceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IrodoriChessEntranceInfo::InternalSwap(IrodoriChessEntranceInfo* other) {
  using std::swap;
  monster_info_list_.InternalSwap(&other->monster_info_list_);
  swap(entrance_point_id_, other->entrance_point_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IrodoriChessEntranceInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IrodoriChessEntranceInfo

// repeated .proto.IrodoriChessMonsterInfo monster_info_list = 6;
int IrodoriChessEntranceInfo::monster_info_list_size() const {
  return monster_info_list_.size();
}
void IrodoriChessEntranceInfo::clear_monster_info_list() {
  monster_info_list_.Clear();
}
const ::proto::IrodoriChessMonsterInfo& IrodoriChessEntranceInfo::monster_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessEntranceInfo.monster_info_list)
  return monster_info_list_.Get(index);
}
::proto::IrodoriChessMonsterInfo* IrodoriChessEntranceInfo::mutable_monster_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.IrodoriChessEntranceInfo.monster_info_list)
  return monster_info_list_.Mutable(index);
}
::proto::IrodoriChessMonsterInfo* IrodoriChessEntranceInfo::add_monster_info_list() {
  // @@protoc_insertion_point(field_add:proto.IrodoriChessEntranceInfo.monster_info_list)
  return monster_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::IrodoriChessMonsterInfo >*
IrodoriChessEntranceInfo::mutable_monster_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.IrodoriChessEntranceInfo.monster_info_list)
  return &monster_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::IrodoriChessMonsterInfo >&
IrodoriChessEntranceInfo::monster_info_list() const {
  // @@protoc_insertion_point(field_list:proto.IrodoriChessEntranceInfo.monster_info_list)
  return monster_info_list_;
}

// uint32 entrance_point_id = 4;
void IrodoriChessEntranceInfo::clear_entrance_point_id() {
  entrance_point_id_ = 0u;
}
::google::protobuf::uint32 IrodoriChessEntranceInfo::entrance_point_id() const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessEntranceInfo.entrance_point_id)
  return entrance_point_id_;
}
void IrodoriChessEntranceInfo::set_entrance_point_id(::google::protobuf::uint32 value) {
  
  entrance_point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.IrodoriChessEntranceInfo.entrance_point_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IrodoriChessEntranceDetailInfo::kInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IrodoriChessEntranceDetailInfo::IrodoriChessEntranceDetailInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.IrodoriChessEntranceDetailInfo)
}
IrodoriChessEntranceDetailInfo::IrodoriChessEntranceDetailInfo(const IrodoriChessEntranceDetailInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      info_list_(from.info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.IrodoriChessEntranceDetailInfo)
}

void IrodoriChessEntranceDetailInfo::SharedCtor() {
  _cached_size_ = 0;
}

IrodoriChessEntranceDetailInfo::~IrodoriChessEntranceDetailInfo() {
  // @@protoc_insertion_point(destructor:proto.IrodoriChessEntranceDetailInfo)
  SharedDtor();
}

void IrodoriChessEntranceDetailInfo::SharedDtor() {
}

void IrodoriChessEntranceDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IrodoriChessEntranceDetailInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IrodoriChessEntranceDetailInfo& IrodoriChessEntranceDetailInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

IrodoriChessEntranceDetailInfo* IrodoriChessEntranceDetailInfo::New(::google::protobuf::Arena* arena) const {
  IrodoriChessEntranceDetailInfo* n = new IrodoriChessEntranceDetailInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IrodoriChessEntranceDetailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.IrodoriChessEntranceDetailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_list_.Clear();
  _internal_metadata_.Clear();
}

bool IrodoriChessEntranceDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.IrodoriChessEntranceDetailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.IrodoriChessEntranceInfo info_list = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.IrodoriChessEntranceDetailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.IrodoriChessEntranceDetailInfo)
  return false;
#undef DO_
}

void IrodoriChessEntranceDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.IrodoriChessEntranceDetailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.IrodoriChessEntranceInfo info_list = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->info_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.IrodoriChessEntranceDetailInfo)
}

::google::protobuf::uint8* IrodoriChessEntranceDetailInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.IrodoriChessEntranceDetailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.IrodoriChessEntranceInfo info_list = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->info_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.IrodoriChessEntranceDetailInfo)
  return target;
}

size_t IrodoriChessEntranceDetailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.IrodoriChessEntranceDetailInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.IrodoriChessEntranceInfo info_list = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IrodoriChessEntranceDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.IrodoriChessEntranceDetailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const IrodoriChessEntranceDetailInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IrodoriChessEntranceDetailInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.IrodoriChessEntranceDetailInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.IrodoriChessEntranceDetailInfo)
    MergeFrom(*source);
  }
}

void IrodoriChessEntranceDetailInfo::MergeFrom(const IrodoriChessEntranceDetailInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.IrodoriChessEntranceDetailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_list_.MergeFrom(from.info_list_);
}

void IrodoriChessEntranceDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.IrodoriChessEntranceDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IrodoriChessEntranceDetailInfo::CopyFrom(const IrodoriChessEntranceDetailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.IrodoriChessEntranceDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IrodoriChessEntranceDetailInfo::IsInitialized() const {
  return true;
}

void IrodoriChessEntranceDetailInfo::Swap(IrodoriChessEntranceDetailInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IrodoriChessEntranceDetailInfo::InternalSwap(IrodoriChessEntranceDetailInfo* other) {
  using std::swap;
  info_list_.InternalSwap(&other->info_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IrodoriChessEntranceDetailInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IrodoriChessEntranceDetailInfo

// repeated .proto.IrodoriChessEntranceInfo info_list = 15;
int IrodoriChessEntranceDetailInfo::info_list_size() const {
  return info_list_.size();
}
void IrodoriChessEntranceDetailInfo::clear_info_list() {
  info_list_.Clear();
}
const ::proto::IrodoriChessEntranceInfo& IrodoriChessEntranceDetailInfo::info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessEntranceDetailInfo.info_list)
  return info_list_.Get(index);
}
::proto::IrodoriChessEntranceInfo* IrodoriChessEntranceDetailInfo::mutable_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.IrodoriChessEntranceDetailInfo.info_list)
  return info_list_.Mutable(index);
}
::proto::IrodoriChessEntranceInfo* IrodoriChessEntranceDetailInfo::add_info_list() {
  // @@protoc_insertion_point(field_add:proto.IrodoriChessEntranceDetailInfo.info_list)
  return info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::IrodoriChessEntranceInfo >*
IrodoriChessEntranceDetailInfo::mutable_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.IrodoriChessEntranceDetailInfo.info_list)
  return &info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::IrodoriChessEntranceInfo >&
IrodoriChessEntranceDetailInfo::info_list() const {
  // @@protoc_insertion_point(field_list:proto.IrodoriChessEntranceDetailInfo.info_list)
  return info_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IrodoriChessMysteryInfo::kEntranceDetailInfoFieldNumber;
const int IrodoriChessMysteryInfo::kEntrancePointIdListFieldNumber;
const int IrodoriChessMysteryInfo::kExitPointIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IrodoriChessMysteryInfo::IrodoriChessMysteryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.IrodoriChessMysteryInfo)
}
IrodoriChessMysteryInfo::IrodoriChessMysteryInfo(const IrodoriChessMysteryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entrance_point_id_list_(from.entrance_point_id_list_),
      exit_point_id_list_(from.exit_point_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_entrance_detail_info()) {
    entrance_detail_info_ = new ::proto::IrodoriChessEntranceDetailInfo(*from.entrance_detail_info_);
  } else {
    entrance_detail_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.IrodoriChessMysteryInfo)
}

void IrodoriChessMysteryInfo::SharedCtor() {
  entrance_detail_info_ = NULL;
  _cached_size_ = 0;
}

IrodoriChessMysteryInfo::~IrodoriChessMysteryInfo() {
  // @@protoc_insertion_point(destructor:proto.IrodoriChessMysteryInfo)
  SharedDtor();
}

void IrodoriChessMysteryInfo::SharedDtor() {
  if (this != internal_default_instance()) delete entrance_detail_info_;
}

void IrodoriChessMysteryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IrodoriChessMysteryInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IrodoriChessMysteryInfo& IrodoriChessMysteryInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

IrodoriChessMysteryInfo* IrodoriChessMysteryInfo::New(::google::protobuf::Arena* arena) const {
  IrodoriChessMysteryInfo* n = new IrodoriChessMysteryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IrodoriChessMysteryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.IrodoriChessMysteryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entrance_point_id_list_.Clear();
  exit_point_id_list_.Clear();
  if (GetArenaNoVirtual() == NULL && entrance_detail_info_ != NULL) {
    delete entrance_detail_info_;
  }
  entrance_detail_info_ = NULL;
  _internal_metadata_.Clear();
}

bool IrodoriChessMysteryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.IrodoriChessMysteryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 entrance_point_id_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_entrance_point_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_entrance_point_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.IrodoriChessEntranceDetailInfo entrance_detail_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entrance_detail_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 exit_point_id_list = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_exit_point_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 106u, input, this->mutable_exit_point_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.IrodoriChessMysteryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.IrodoriChessMysteryInfo)
  return false;
#undef DO_
}

void IrodoriChessMysteryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.IrodoriChessMysteryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 entrance_point_id_list = 2;
  if (this->entrance_point_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _entrance_point_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->entrance_point_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->entrance_point_id_list(i), output);
  }

  // .proto.IrodoriChessEntranceDetailInfo entrance_detail_info = 5;
  if (this->has_entrance_detail_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->entrance_detail_info_, output);
  }

  // repeated uint32 exit_point_id_list = 13;
  if (this->exit_point_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _exit_point_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->exit_point_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->exit_point_id_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.IrodoriChessMysteryInfo)
}

::google::protobuf::uint8* IrodoriChessMysteryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.IrodoriChessMysteryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 entrance_point_id_list = 2;
  if (this->entrance_point_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _entrance_point_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->entrance_point_id_list_, target);
  }

  // .proto.IrodoriChessEntranceDetailInfo entrance_detail_info = 5;
  if (this->has_entrance_detail_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->entrance_detail_info_, deterministic, target);
  }

  // repeated uint32 exit_point_id_list = 13;
  if (this->exit_point_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _exit_point_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->exit_point_id_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.IrodoriChessMysteryInfo)
  return target;
}

size_t IrodoriChessMysteryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.IrodoriChessMysteryInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 entrance_point_id_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->entrance_point_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _entrance_point_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 exit_point_id_list = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->exit_point_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _exit_point_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .proto.IrodoriChessEntranceDetailInfo entrance_detail_info = 5;
  if (this->has_entrance_detail_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->entrance_detail_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IrodoriChessMysteryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.IrodoriChessMysteryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const IrodoriChessMysteryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IrodoriChessMysteryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.IrodoriChessMysteryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.IrodoriChessMysteryInfo)
    MergeFrom(*source);
  }
}

void IrodoriChessMysteryInfo::MergeFrom(const IrodoriChessMysteryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.IrodoriChessMysteryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entrance_point_id_list_.MergeFrom(from.entrance_point_id_list_);
  exit_point_id_list_.MergeFrom(from.exit_point_id_list_);
  if (from.has_entrance_detail_info()) {
    mutable_entrance_detail_info()->::proto::IrodoriChessEntranceDetailInfo::MergeFrom(from.entrance_detail_info());
  }
}

void IrodoriChessMysteryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.IrodoriChessMysteryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IrodoriChessMysteryInfo::CopyFrom(const IrodoriChessMysteryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.IrodoriChessMysteryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IrodoriChessMysteryInfo::IsInitialized() const {
  return true;
}

void IrodoriChessMysteryInfo::Swap(IrodoriChessMysteryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IrodoriChessMysteryInfo::InternalSwap(IrodoriChessMysteryInfo* other) {
  using std::swap;
  entrance_point_id_list_.InternalSwap(&other->entrance_point_id_list_);
  exit_point_id_list_.InternalSwap(&other->exit_point_id_list_);
  swap(entrance_detail_info_, other->entrance_detail_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IrodoriChessMysteryInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IrodoriChessMysteryInfo

// .proto.IrodoriChessEntranceDetailInfo entrance_detail_info = 5;
bool IrodoriChessMysteryInfo::has_entrance_detail_info() const {
  return this != internal_default_instance() && entrance_detail_info_ != NULL;
}
void IrodoriChessMysteryInfo::clear_entrance_detail_info() {
  if (GetArenaNoVirtual() == NULL && entrance_detail_info_ != NULL) delete entrance_detail_info_;
  entrance_detail_info_ = NULL;
}
const ::proto::IrodoriChessEntranceDetailInfo& IrodoriChessMysteryInfo::entrance_detail_info() const {
  const ::proto::IrodoriChessEntranceDetailInfo* p = entrance_detail_info_;
  // @@protoc_insertion_point(field_get:proto.IrodoriChessMysteryInfo.entrance_detail_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::IrodoriChessEntranceDetailInfo*>(
      &::proto::_IrodoriChessEntranceDetailInfo_default_instance_);
}
::proto::IrodoriChessEntranceDetailInfo* IrodoriChessMysteryInfo::mutable_entrance_detail_info() {
  
  if (entrance_detail_info_ == NULL) {
    entrance_detail_info_ = new ::proto::IrodoriChessEntranceDetailInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.IrodoriChessMysteryInfo.entrance_detail_info)
  return entrance_detail_info_;
}
::proto::IrodoriChessEntranceDetailInfo* IrodoriChessMysteryInfo::release_entrance_detail_info() {
  // @@protoc_insertion_point(field_release:proto.IrodoriChessMysteryInfo.entrance_detail_info)
  
  ::proto::IrodoriChessEntranceDetailInfo* temp = entrance_detail_info_;
  entrance_detail_info_ = NULL;
  return temp;
}
void IrodoriChessMysteryInfo::set_allocated_entrance_detail_info(::proto::IrodoriChessEntranceDetailInfo* entrance_detail_info) {
  delete entrance_detail_info_;
  entrance_detail_info_ = entrance_detail_info;
  if (entrance_detail_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.IrodoriChessMysteryInfo.entrance_detail_info)
}

// repeated uint32 entrance_point_id_list = 2;
int IrodoriChessMysteryInfo::entrance_point_id_list_size() const {
  return entrance_point_id_list_.size();
}
void IrodoriChessMysteryInfo::clear_entrance_point_id_list() {
  entrance_point_id_list_.Clear();
}
::google::protobuf::uint32 IrodoriChessMysteryInfo::entrance_point_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessMysteryInfo.entrance_point_id_list)
  return entrance_point_id_list_.Get(index);
}
void IrodoriChessMysteryInfo::set_entrance_point_id_list(int index, ::google::protobuf::uint32 value) {
  entrance_point_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.IrodoriChessMysteryInfo.entrance_point_id_list)
}
void IrodoriChessMysteryInfo::add_entrance_point_id_list(::google::protobuf::uint32 value) {
  entrance_point_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.IrodoriChessMysteryInfo.entrance_point_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IrodoriChessMysteryInfo::entrance_point_id_list() const {
  // @@protoc_insertion_point(field_list:proto.IrodoriChessMysteryInfo.entrance_point_id_list)
  return entrance_point_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IrodoriChessMysteryInfo::mutable_entrance_point_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.IrodoriChessMysteryInfo.entrance_point_id_list)
  return &entrance_point_id_list_;
}

// repeated uint32 exit_point_id_list = 13;
int IrodoriChessMysteryInfo::exit_point_id_list_size() const {
  return exit_point_id_list_.size();
}
void IrodoriChessMysteryInfo::clear_exit_point_id_list() {
  exit_point_id_list_.Clear();
}
::google::protobuf::uint32 IrodoriChessMysteryInfo::exit_point_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessMysteryInfo.exit_point_id_list)
  return exit_point_id_list_.Get(index);
}
void IrodoriChessMysteryInfo::set_exit_point_id_list(int index, ::google::protobuf::uint32 value) {
  exit_point_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.IrodoriChessMysteryInfo.exit_point_id_list)
}
void IrodoriChessMysteryInfo::add_exit_point_id_list(::google::protobuf::uint32 value) {
  exit_point_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.IrodoriChessMysteryInfo.exit_point_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IrodoriChessMysteryInfo::exit_point_id_list() const {
  // @@protoc_insertion_point(field_list:proto.IrodoriChessMysteryInfo.exit_point_id_list)
  return exit_point_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IrodoriChessMysteryInfo::mutable_exit_point_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.IrodoriChessMysteryInfo.exit_point_id_list)
  return &exit_point_id_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InBattleIrodoriChessSettleInfo::kIsNewRecordFieldNumber;
const int InBattleIrodoriChessSettleInfo::kIsActivityEndFieldNumber;
const int InBattleIrodoriChessSettleInfo::kSceneTimeMsFieldNumber;
const int InBattleIrodoriChessSettleInfo::kSettleScoreFieldNumber;
const int InBattleIrodoriChessSettleInfo::kIsPerfectFieldNumber;
const int InBattleIrodoriChessSettleInfo::kKillMonsterNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InBattleIrodoriChessSettleInfo::InBattleIrodoriChessSettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InBattleIrodoriChessSettleInfo)
}
InBattleIrodoriChessSettleInfo::InBattleIrodoriChessSettleInfo(const InBattleIrodoriChessSettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scene_time_ms_, &from.scene_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&kill_monster_num_) -
    reinterpret_cast<char*>(&scene_time_ms_)) + sizeof(kill_monster_num_));
  // @@protoc_insertion_point(copy_constructor:proto.InBattleIrodoriChessSettleInfo)
}

void InBattleIrodoriChessSettleInfo::SharedCtor() {
  ::memset(&scene_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kill_monster_num_) -
      reinterpret_cast<char*>(&scene_time_ms_)) + sizeof(kill_monster_num_));
  _cached_size_ = 0;
}

InBattleIrodoriChessSettleInfo::~InBattleIrodoriChessSettleInfo() {
  // @@protoc_insertion_point(destructor:proto.InBattleIrodoriChessSettleInfo)
  SharedDtor();
}

void InBattleIrodoriChessSettleInfo::SharedDtor() {
}

void InBattleIrodoriChessSettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InBattleIrodoriChessSettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InBattleIrodoriChessSettleInfo& InBattleIrodoriChessSettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

InBattleIrodoriChessSettleInfo* InBattleIrodoriChessSettleInfo::New(::google::protobuf::Arena* arena) const {
  InBattleIrodoriChessSettleInfo* n = new InBattleIrodoriChessSettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InBattleIrodoriChessSettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InBattleIrodoriChessSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&scene_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kill_monster_num_) -
      reinterpret_cast<char*>(&scene_time_ms_)) + sizeof(kill_monster_num_));
  _internal_metadata_.Clear();
}

bool InBattleIrodoriChessSettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InBattleIrodoriChessSettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 scene_time_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scene_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_activity_end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_activity_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 settle_score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &settle_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_new_record = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_record_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 kill_monster_num = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_monster_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_perfect = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_perfect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InBattleIrodoriChessSettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InBattleIrodoriChessSettleInfo)
  return false;
#undef DO_
}

void InBattleIrodoriChessSettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InBattleIrodoriChessSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_time_ms = 1;
  if (this->scene_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->scene_time_ms(), output);
  }

  // bool is_activity_end = 2;
  if (this->is_activity_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_activity_end(), output);
  }

  // uint32 settle_score = 3;
  if (this->settle_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->settle_score(), output);
  }

  // bool is_new_record = 5;
  if (this->is_new_record() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_new_record(), output);
  }

  // uint32 kill_monster_num = 7;
  if (this->kill_monster_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->kill_monster_num(), output);
  }

  // bool is_perfect = 12;
  if (this->is_perfect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_perfect(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InBattleIrodoriChessSettleInfo)
}

::google::protobuf::uint8* InBattleIrodoriChessSettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InBattleIrodoriChessSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_time_ms = 1;
  if (this->scene_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->scene_time_ms(), target);
  }

  // bool is_activity_end = 2;
  if (this->is_activity_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_activity_end(), target);
  }

  // uint32 settle_score = 3;
  if (this->settle_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->settle_score(), target);
  }

  // bool is_new_record = 5;
  if (this->is_new_record() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_new_record(), target);
  }

  // uint32 kill_monster_num = 7;
  if (this->kill_monster_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->kill_monster_num(), target);
  }

  // bool is_perfect = 12;
  if (this->is_perfect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_perfect(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InBattleIrodoriChessSettleInfo)
  return target;
}

size_t InBattleIrodoriChessSettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InBattleIrodoriChessSettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 scene_time_ms = 1;
  if (this->scene_time_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->scene_time_ms());
  }

  // uint32 settle_score = 3;
  if (this->settle_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->settle_score());
  }

  // bool is_new_record = 5;
  if (this->is_new_record() != 0) {
    total_size += 1 + 1;
  }

  // bool is_activity_end = 2;
  if (this->is_activity_end() != 0) {
    total_size += 1 + 1;
  }

  // bool is_perfect = 12;
  if (this->is_perfect() != 0) {
    total_size += 1 + 1;
  }

  // uint32 kill_monster_num = 7;
  if (this->kill_monster_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kill_monster_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InBattleIrodoriChessSettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InBattleIrodoriChessSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InBattleIrodoriChessSettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InBattleIrodoriChessSettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InBattleIrodoriChessSettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InBattleIrodoriChessSettleInfo)
    MergeFrom(*source);
  }
}

void InBattleIrodoriChessSettleInfo::MergeFrom(const InBattleIrodoriChessSettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InBattleIrodoriChessSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scene_time_ms() != 0) {
    set_scene_time_ms(from.scene_time_ms());
  }
  if (from.settle_score() != 0) {
    set_settle_score(from.settle_score());
  }
  if (from.is_new_record() != 0) {
    set_is_new_record(from.is_new_record());
  }
  if (from.is_activity_end() != 0) {
    set_is_activity_end(from.is_activity_end());
  }
  if (from.is_perfect() != 0) {
    set_is_perfect(from.is_perfect());
  }
  if (from.kill_monster_num() != 0) {
    set_kill_monster_num(from.kill_monster_num());
  }
}

void InBattleIrodoriChessSettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InBattleIrodoriChessSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InBattleIrodoriChessSettleInfo::CopyFrom(const InBattleIrodoriChessSettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InBattleIrodoriChessSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InBattleIrodoriChessSettleInfo::IsInitialized() const {
  return true;
}

void InBattleIrodoriChessSettleInfo::Swap(InBattleIrodoriChessSettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InBattleIrodoriChessSettleInfo::InternalSwap(InBattleIrodoriChessSettleInfo* other) {
  using std::swap;
  swap(scene_time_ms_, other->scene_time_ms_);
  swap(settle_score_, other->settle_score_);
  swap(is_new_record_, other->is_new_record_);
  swap(is_activity_end_, other->is_activity_end_);
  swap(is_perfect_, other->is_perfect_);
  swap(kill_monster_num_, other->kill_monster_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InBattleIrodoriChessSettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InBattleIrodoriChessSettleInfo

// bool is_new_record = 5;
void InBattleIrodoriChessSettleInfo::clear_is_new_record() {
  is_new_record_ = false;
}
bool InBattleIrodoriChessSettleInfo::is_new_record() const {
  // @@protoc_insertion_point(field_get:proto.InBattleIrodoriChessSettleInfo.is_new_record)
  return is_new_record_;
}
void InBattleIrodoriChessSettleInfo::set_is_new_record(bool value) {
  
  is_new_record_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleIrodoriChessSettleInfo.is_new_record)
}

// bool is_activity_end = 2;
void InBattleIrodoriChessSettleInfo::clear_is_activity_end() {
  is_activity_end_ = false;
}
bool InBattleIrodoriChessSettleInfo::is_activity_end() const {
  // @@protoc_insertion_point(field_get:proto.InBattleIrodoriChessSettleInfo.is_activity_end)
  return is_activity_end_;
}
void InBattleIrodoriChessSettleInfo::set_is_activity_end(bool value) {
  
  is_activity_end_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleIrodoriChessSettleInfo.is_activity_end)
}

// uint64 scene_time_ms = 1;
void InBattleIrodoriChessSettleInfo::clear_scene_time_ms() {
  scene_time_ms_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 InBattleIrodoriChessSettleInfo::scene_time_ms() const {
  // @@protoc_insertion_point(field_get:proto.InBattleIrodoriChessSettleInfo.scene_time_ms)
  return scene_time_ms_;
}
void InBattleIrodoriChessSettleInfo::set_scene_time_ms(::google::protobuf::uint64 value) {
  
  scene_time_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleIrodoriChessSettleInfo.scene_time_ms)
}

// uint32 settle_score = 3;
void InBattleIrodoriChessSettleInfo::clear_settle_score() {
  settle_score_ = 0u;
}
::google::protobuf::uint32 InBattleIrodoriChessSettleInfo::settle_score() const {
  // @@protoc_insertion_point(field_get:proto.InBattleIrodoriChessSettleInfo.settle_score)
  return settle_score_;
}
void InBattleIrodoriChessSettleInfo::set_settle_score(::google::protobuf::uint32 value) {
  
  settle_score_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleIrodoriChessSettleInfo.settle_score)
}

// bool is_perfect = 12;
void InBattleIrodoriChessSettleInfo::clear_is_perfect() {
  is_perfect_ = false;
}
bool InBattleIrodoriChessSettleInfo::is_perfect() const {
  // @@protoc_insertion_point(field_get:proto.InBattleIrodoriChessSettleInfo.is_perfect)
  return is_perfect_;
}
void InBattleIrodoriChessSettleInfo::set_is_perfect(bool value) {
  
  is_perfect_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleIrodoriChessSettleInfo.is_perfect)
}

// uint32 kill_monster_num = 7;
void InBattleIrodoriChessSettleInfo::clear_kill_monster_num() {
  kill_monster_num_ = 0u;
}
::google::protobuf::uint32 InBattleIrodoriChessSettleInfo::kill_monster_num() const {
  // @@protoc_insertion_point(field_get:proto.InBattleIrodoriChessSettleInfo.kill_monster_num)
  return kill_monster_num_;
}
void InBattleIrodoriChessSettleInfo::set_kill_monster_num(::google::protobuf::uint32 value) {
  
  kill_monster_num_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleIrodoriChessSettleInfo.kill_monster_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IrodoriChessPlayerInfo::kUidFieldNumber;
const int IrodoriChessPlayerInfo::kBuildingPointsFieldNumber;
const int IrodoriChessPlayerInfo::kSettleScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IrodoriChessPlayerInfo::IrodoriChessPlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.IrodoriChessPlayerInfo)
}
IrodoriChessPlayerInfo::IrodoriChessPlayerInfo(const IrodoriChessPlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&settle_score_, &from.settle_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&building_points_) -
    reinterpret_cast<char*>(&settle_score_)) + sizeof(building_points_));
  // @@protoc_insertion_point(copy_constructor:proto.IrodoriChessPlayerInfo)
}

void IrodoriChessPlayerInfo::SharedCtor() {
  ::memset(&settle_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&building_points_) -
      reinterpret_cast<char*>(&settle_score_)) + sizeof(building_points_));
  _cached_size_ = 0;
}

IrodoriChessPlayerInfo::~IrodoriChessPlayerInfo() {
  // @@protoc_insertion_point(destructor:proto.IrodoriChessPlayerInfo)
  SharedDtor();
}

void IrodoriChessPlayerInfo::SharedDtor() {
}

void IrodoriChessPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IrodoriChessPlayerInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IrodoriChessPlayerInfo& IrodoriChessPlayerInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

IrodoriChessPlayerInfo* IrodoriChessPlayerInfo::New(::google::protobuf::Arena* arena) const {
  IrodoriChessPlayerInfo* n = new IrodoriChessPlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IrodoriChessPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.IrodoriChessPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&settle_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&building_points_) -
      reinterpret_cast<char*>(&settle_score_)) + sizeof(building_points_));
  _internal_metadata_.Clear();
}

bool IrodoriChessPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.IrodoriChessPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 settle_score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &settle_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 building_points = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &building_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.IrodoriChessPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.IrodoriChessPlayerInfo)
  return false;
#undef DO_
}

void IrodoriChessPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.IrodoriChessPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 settle_score = 3;
  if (this->settle_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->settle_score(), output);
  }

  // uint32 uid = 4;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uid(), output);
  }

  // uint32 building_points = 9;
  if (this->building_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->building_points(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.IrodoriChessPlayerInfo)
}

::google::protobuf::uint8* IrodoriChessPlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.IrodoriChessPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 settle_score = 3;
  if (this->settle_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->settle_score(), target);
  }

  // uint32 uid = 4;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uid(), target);
  }

  // uint32 building_points = 9;
  if (this->building_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->building_points(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.IrodoriChessPlayerInfo)
  return target;
}

size_t IrodoriChessPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.IrodoriChessPlayerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 settle_score = 3;
  if (this->settle_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->settle_score());
  }

  // uint32 uid = 4;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // uint32 building_points = 9;
  if (this->building_points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->building_points());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IrodoriChessPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.IrodoriChessPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const IrodoriChessPlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IrodoriChessPlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.IrodoriChessPlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.IrodoriChessPlayerInfo)
    MergeFrom(*source);
  }
}

void IrodoriChessPlayerInfo::MergeFrom(const IrodoriChessPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.IrodoriChessPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.settle_score() != 0) {
    set_settle_score(from.settle_score());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.building_points() != 0) {
    set_building_points(from.building_points());
  }
}

void IrodoriChessPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.IrodoriChessPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IrodoriChessPlayerInfo::CopyFrom(const IrodoriChessPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.IrodoriChessPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IrodoriChessPlayerInfo::IsInitialized() const {
  return true;
}

void IrodoriChessPlayerInfo::Swap(IrodoriChessPlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IrodoriChessPlayerInfo::InternalSwap(IrodoriChessPlayerInfo* other) {
  using std::swap;
  swap(settle_score_, other->settle_score_);
  swap(uid_, other->uid_);
  swap(building_points_, other->building_points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IrodoriChessPlayerInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IrodoriChessPlayerInfo

// uint32 uid = 4;
void IrodoriChessPlayerInfo::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 IrodoriChessPlayerInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessPlayerInfo.uid)
  return uid_;
}
void IrodoriChessPlayerInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.IrodoriChessPlayerInfo.uid)
}

// uint32 building_points = 9;
void IrodoriChessPlayerInfo::clear_building_points() {
  building_points_ = 0u;
}
::google::protobuf::uint32 IrodoriChessPlayerInfo::building_points() const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessPlayerInfo.building_points)
  return building_points_;
}
void IrodoriChessPlayerInfo::set_building_points(::google::protobuf::uint32 value) {
  
  building_points_ = value;
  // @@protoc_insertion_point(field_set:proto.IrodoriChessPlayerInfo.building_points)
}

// uint32 settle_score = 3;
void IrodoriChessPlayerInfo::clear_settle_score() {
  settle_score_ = 0u;
}
::google::protobuf::uint32 IrodoriChessPlayerInfo::settle_score() const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessPlayerInfo.settle_score)
  return settle_score_;
}
void IrodoriChessPlayerInfo::set_settle_score(::google::protobuf::uint32 value) {
  
  settle_score_ = value;
  // @@protoc_insertion_point(field_set:proto.IrodoriChessPlayerInfo.settle_score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IrodoriChessPlayerInfoNotify::kPlayerInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IrodoriChessPlayerInfoNotify::IrodoriChessPlayerInfoNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.IrodoriChessPlayerInfoNotify)
}
IrodoriChessPlayerInfoNotify::IrodoriChessPlayerInfoNotify(const IrodoriChessPlayerInfoNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player_info()) {
    player_info_ = new ::proto::IrodoriChessPlayerInfo(*from.player_info_);
  } else {
    player_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.IrodoriChessPlayerInfoNotify)
}

void IrodoriChessPlayerInfoNotify::SharedCtor() {
  player_info_ = NULL;
  _cached_size_ = 0;
}

IrodoriChessPlayerInfoNotify::~IrodoriChessPlayerInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.IrodoriChessPlayerInfoNotify)
  SharedDtor();
}

void IrodoriChessPlayerInfoNotify::SharedDtor() {
  if (this != internal_default_instance()) delete player_info_;
}

void IrodoriChessPlayerInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IrodoriChessPlayerInfoNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IrodoriChessPlayerInfoNotify& IrodoriChessPlayerInfoNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

IrodoriChessPlayerInfoNotify* IrodoriChessPlayerInfoNotify::New(::google::protobuf::Arena* arena) const {
  IrodoriChessPlayerInfoNotify* n = new IrodoriChessPlayerInfoNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IrodoriChessPlayerInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.IrodoriChessPlayerInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && player_info_ != NULL) {
    delete player_info_;
  }
  player_info_ = NULL;
  _internal_metadata_.Clear();
}

bool IrodoriChessPlayerInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.IrodoriChessPlayerInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.IrodoriChessPlayerInfo player_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.IrodoriChessPlayerInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.IrodoriChessPlayerInfoNotify)
  return false;
#undef DO_
}

void IrodoriChessPlayerInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.IrodoriChessPlayerInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.IrodoriChessPlayerInfo player_info = 6;
  if (this->has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->player_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.IrodoriChessPlayerInfoNotify)
}

::google::protobuf::uint8* IrodoriChessPlayerInfoNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.IrodoriChessPlayerInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.IrodoriChessPlayerInfo player_info = 6;
  if (this->has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->player_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.IrodoriChessPlayerInfoNotify)
  return target;
}

size_t IrodoriChessPlayerInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.IrodoriChessPlayerInfoNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.IrodoriChessPlayerInfo player_info = 6;
  if (this->has_player_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IrodoriChessPlayerInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.IrodoriChessPlayerInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const IrodoriChessPlayerInfoNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IrodoriChessPlayerInfoNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.IrodoriChessPlayerInfoNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.IrodoriChessPlayerInfoNotify)
    MergeFrom(*source);
  }
}

void IrodoriChessPlayerInfoNotify::MergeFrom(const IrodoriChessPlayerInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.IrodoriChessPlayerInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_info()) {
    mutable_player_info()->::proto::IrodoriChessPlayerInfo::MergeFrom(from.player_info());
  }
}

void IrodoriChessPlayerInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.IrodoriChessPlayerInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IrodoriChessPlayerInfoNotify::CopyFrom(const IrodoriChessPlayerInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.IrodoriChessPlayerInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IrodoriChessPlayerInfoNotify::IsInitialized() const {
  return true;
}

void IrodoriChessPlayerInfoNotify::Swap(IrodoriChessPlayerInfoNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IrodoriChessPlayerInfoNotify::InternalSwap(IrodoriChessPlayerInfoNotify* other) {
  using std::swap;
  swap(player_info_, other->player_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IrodoriChessPlayerInfoNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IrodoriChessPlayerInfoNotify

// .proto.IrodoriChessPlayerInfo player_info = 6;
bool IrodoriChessPlayerInfoNotify::has_player_info() const {
  return this != internal_default_instance() && player_info_ != NULL;
}
void IrodoriChessPlayerInfoNotify::clear_player_info() {
  if (GetArenaNoVirtual() == NULL && player_info_ != NULL) delete player_info_;
  player_info_ = NULL;
}
const ::proto::IrodoriChessPlayerInfo& IrodoriChessPlayerInfoNotify::player_info() const {
  const ::proto::IrodoriChessPlayerInfo* p = player_info_;
  // @@protoc_insertion_point(field_get:proto.IrodoriChessPlayerInfoNotify.player_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::IrodoriChessPlayerInfo*>(
      &::proto::_IrodoriChessPlayerInfo_default_instance_);
}
::proto::IrodoriChessPlayerInfo* IrodoriChessPlayerInfoNotify::mutable_player_info() {
  
  if (player_info_ == NULL) {
    player_info_ = new ::proto::IrodoriChessPlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.IrodoriChessPlayerInfoNotify.player_info)
  return player_info_;
}
::proto::IrodoriChessPlayerInfo* IrodoriChessPlayerInfoNotify::release_player_info() {
  // @@protoc_insertion_point(field_release:proto.IrodoriChessPlayerInfoNotify.player_info)
  
  ::proto::IrodoriChessPlayerInfo* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
void IrodoriChessPlayerInfoNotify::set_allocated_player_info(::proto::IrodoriChessPlayerInfo* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.IrodoriChessPlayerInfoNotify.player_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IrodoriChessLeftMonsterNotify::kLeftMonstersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IrodoriChessLeftMonsterNotify::IrodoriChessLeftMonsterNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.IrodoriChessLeftMonsterNotify)
}
IrodoriChessLeftMonsterNotify::IrodoriChessLeftMonsterNotify(const IrodoriChessLeftMonsterNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  left_monsters_ = from.left_monsters_;
  // @@protoc_insertion_point(copy_constructor:proto.IrodoriChessLeftMonsterNotify)
}

void IrodoriChessLeftMonsterNotify::SharedCtor() {
  left_monsters_ = 0u;
  _cached_size_ = 0;
}

IrodoriChessLeftMonsterNotify::~IrodoriChessLeftMonsterNotify() {
  // @@protoc_insertion_point(destructor:proto.IrodoriChessLeftMonsterNotify)
  SharedDtor();
}

void IrodoriChessLeftMonsterNotify::SharedDtor() {
}

void IrodoriChessLeftMonsterNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IrodoriChessLeftMonsterNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IrodoriChessLeftMonsterNotify& IrodoriChessLeftMonsterNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

IrodoriChessLeftMonsterNotify* IrodoriChessLeftMonsterNotify::New(::google::protobuf::Arena* arena) const {
  IrodoriChessLeftMonsterNotify* n = new IrodoriChessLeftMonsterNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IrodoriChessLeftMonsterNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.IrodoriChessLeftMonsterNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  left_monsters_ = 0u;
  _internal_metadata_.Clear();
}

bool IrodoriChessLeftMonsterNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.IrodoriChessLeftMonsterNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 left_monsters = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_monsters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.IrodoriChessLeftMonsterNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.IrodoriChessLeftMonsterNotify)
  return false;
#undef DO_
}

void IrodoriChessLeftMonsterNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.IrodoriChessLeftMonsterNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 left_monsters = 8;
  if (this->left_monsters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->left_monsters(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.IrodoriChessLeftMonsterNotify)
}

::google::protobuf::uint8* IrodoriChessLeftMonsterNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.IrodoriChessLeftMonsterNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 left_monsters = 8;
  if (this->left_monsters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->left_monsters(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.IrodoriChessLeftMonsterNotify)
  return target;
}

size_t IrodoriChessLeftMonsterNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.IrodoriChessLeftMonsterNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 left_monsters = 8;
  if (this->left_monsters() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->left_monsters());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IrodoriChessLeftMonsterNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.IrodoriChessLeftMonsterNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const IrodoriChessLeftMonsterNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IrodoriChessLeftMonsterNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.IrodoriChessLeftMonsterNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.IrodoriChessLeftMonsterNotify)
    MergeFrom(*source);
  }
}

void IrodoriChessLeftMonsterNotify::MergeFrom(const IrodoriChessLeftMonsterNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.IrodoriChessLeftMonsterNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.left_monsters() != 0) {
    set_left_monsters(from.left_monsters());
  }
}

void IrodoriChessLeftMonsterNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.IrodoriChessLeftMonsterNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IrodoriChessLeftMonsterNotify::CopyFrom(const IrodoriChessLeftMonsterNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.IrodoriChessLeftMonsterNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IrodoriChessLeftMonsterNotify::IsInitialized() const {
  return true;
}

void IrodoriChessLeftMonsterNotify::Swap(IrodoriChessLeftMonsterNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IrodoriChessLeftMonsterNotify::InternalSwap(IrodoriChessLeftMonsterNotify* other) {
  using std::swap;
  swap(left_monsters_, other->left_monsters_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IrodoriChessLeftMonsterNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IrodoriChessLeftMonsterNotify

// uint32 left_monsters = 8;
void IrodoriChessLeftMonsterNotify::clear_left_monsters() {
  left_monsters_ = 0u;
}
::google::protobuf::uint32 IrodoriChessLeftMonsterNotify::left_monsters() const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessLeftMonsterNotify.left_monsters)
  return left_monsters_;
}
void IrodoriChessLeftMonsterNotify::set_left_monsters(::google::protobuf::uint32 value) {
  
  left_monsters_ = value;
  // @@protoc_insertion_point(field_set:proto.IrodoriChessLeftMonsterNotify.left_monsters)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrickBreakerPlayerBattleInfo::kSkillListFieldNumber;
const int BrickBreakerPlayerBattleInfo::kIsReadyFieldNumber;
const int BrickBreakerPlayerBattleInfo::kIsChangingFieldNumber;
const int BrickBreakerPlayerBattleInfo::kUidFieldNumber;
const int BrickBreakerPlayerBattleInfo::kAvatarIdFieldNumber;
const int BrickBreakerPlayerBattleInfo::kCostumeIdFieldNumber;
const int BrickBreakerPlayerBattleInfo::kNicknameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrickBreakerPlayerBattleInfo::BrickBreakerPlayerBattleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BrickBreakerPlayerBattleInfo)
}
BrickBreakerPlayerBattleInfo::BrickBreakerPlayerBattleInfo(const BrickBreakerPlayerBattleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      avatar_id_(from.avatar_id_),
      skill_list_(from.skill_list_),
      costume_id_(from.costume_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nickname().size() > 0) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  ::memcpy(&is_ready_, &from.is_ready_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&is_ready_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:proto.BrickBreakerPlayerBattleInfo)
}

void BrickBreakerPlayerBattleInfo::SharedCtor() {
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_ready_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&is_ready_)) + sizeof(uid_));
  _cached_size_ = 0;
}

BrickBreakerPlayerBattleInfo::~BrickBreakerPlayerBattleInfo() {
  // @@protoc_insertion_point(destructor:proto.BrickBreakerPlayerBattleInfo)
  SharedDtor();
}

void BrickBreakerPlayerBattleInfo::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BrickBreakerPlayerBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrickBreakerPlayerBattleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BrickBreakerPlayerBattleInfo& BrickBreakerPlayerBattleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

BrickBreakerPlayerBattleInfo* BrickBreakerPlayerBattleInfo::New(::google::protobuf::Arena* arena) const {
  BrickBreakerPlayerBattleInfo* n = new BrickBreakerPlayerBattleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrickBreakerPlayerBattleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BrickBreakerPlayerBattleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_id_.Clear();
  skill_list_.Clear();
  costume_id_.Clear();
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_ready_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&is_ready_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

bool BrickBreakerPlayerBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BrickBreakerPlayerBattleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string nickname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nickname().data(), static_cast<int>(this->nickname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.BrickBreakerPlayerBattleInfo.nickname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 avatar_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_avatar_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 74u, input, this->mutable_avatar_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 skill_list = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skill_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 82u, input, this->mutable_skill_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_changing = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_changing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 costume_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_costume_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 106u, input, this->mutable_costume_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_ready = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uid = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BrickBreakerPlayerBattleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BrickBreakerPlayerBattleInfo)
  return false;
#undef DO_
}

void BrickBreakerPlayerBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BrickBreakerPlayerBattleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nickname = 3;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.BrickBreakerPlayerBattleInfo.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // repeated uint32 avatar_id = 9;
  if (this->avatar_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _avatar_id_cached_byte_size_));
  }
  for (int i = 0, n = this->avatar_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->avatar_id(i), output);
  }

  // repeated uint32 skill_list = 10;
  if (this->skill_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _skill_list_cached_byte_size_));
  }
  for (int i = 0, n = this->skill_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->skill_list(i), output);
  }

  // bool is_changing = 11;
  if (this->is_changing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_changing(), output);
  }

  // repeated uint32 costume_id = 13;
  if (this->costume_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _costume_id_cached_byte_size_));
  }
  for (int i = 0, n = this->costume_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->costume_id(i), output);
  }

  // bool is_ready = 14;
  if (this->is_ready() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_ready(), output);
  }

  // uint32 uid = 15;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BrickBreakerPlayerBattleInfo)
}

::google::protobuf::uint8* BrickBreakerPlayerBattleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BrickBreakerPlayerBattleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nickname = 3;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.BrickBreakerPlayerBattleInfo.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // repeated uint32 avatar_id = 9;
  if (this->avatar_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _avatar_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->avatar_id_, target);
  }

  // repeated uint32 skill_list = 10;
  if (this->skill_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _skill_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->skill_list_, target);
  }

  // bool is_changing = 11;
  if (this->is_changing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_changing(), target);
  }

  // repeated uint32 costume_id = 13;
  if (this->costume_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _costume_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->costume_id_, target);
  }

  // bool is_ready = 14;
  if (this->is_ready() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_ready(), target);
  }

  // uint32 uid = 15;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BrickBreakerPlayerBattleInfo)
  return target;
}

size_t BrickBreakerPlayerBattleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BrickBreakerPlayerBattleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 avatar_id = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->avatar_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _avatar_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 skill_list = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->skill_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _skill_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 costume_id = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->costume_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _costume_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string nickname = 3;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  // bool is_ready = 14;
  if (this->is_ready() != 0) {
    total_size += 1 + 1;
  }

  // bool is_changing = 11;
  if (this->is_changing() != 0) {
    total_size += 1 + 1;
  }

  // uint32 uid = 15;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrickBreakerPlayerBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BrickBreakerPlayerBattleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BrickBreakerPlayerBattleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BrickBreakerPlayerBattleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BrickBreakerPlayerBattleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BrickBreakerPlayerBattleInfo)
    MergeFrom(*source);
  }
}

void BrickBreakerPlayerBattleInfo::MergeFrom(const BrickBreakerPlayerBattleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BrickBreakerPlayerBattleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatar_id_.MergeFrom(from.avatar_id_);
  skill_list_.MergeFrom(from.skill_list_);
  costume_id_.MergeFrom(from.costume_id_);
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.is_ready() != 0) {
    set_is_ready(from.is_ready());
  }
  if (from.is_changing() != 0) {
    set_is_changing(from.is_changing());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void BrickBreakerPlayerBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BrickBreakerPlayerBattleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrickBreakerPlayerBattleInfo::CopyFrom(const BrickBreakerPlayerBattleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BrickBreakerPlayerBattleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrickBreakerPlayerBattleInfo::IsInitialized() const {
  return true;
}

void BrickBreakerPlayerBattleInfo::Swap(BrickBreakerPlayerBattleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrickBreakerPlayerBattleInfo::InternalSwap(BrickBreakerPlayerBattleInfo* other) {
  using std::swap;
  avatar_id_.InternalSwap(&other->avatar_id_);
  skill_list_.InternalSwap(&other->skill_list_);
  costume_id_.InternalSwap(&other->costume_id_);
  nickname_.Swap(&other->nickname_);
  swap(is_ready_, other->is_ready_);
  swap(is_changing_, other->is_changing_);
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrickBreakerPlayerBattleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrickBreakerPlayerBattleInfo

// repeated uint32 skill_list = 10;
int BrickBreakerPlayerBattleInfo::skill_list_size() const {
  return skill_list_.size();
}
void BrickBreakerPlayerBattleInfo::clear_skill_list() {
  skill_list_.Clear();
}
::google::protobuf::uint32 BrickBreakerPlayerBattleInfo::skill_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerBattleInfo.skill_list)
  return skill_list_.Get(index);
}
void BrickBreakerPlayerBattleInfo::set_skill_list(int index, ::google::protobuf::uint32 value) {
  skill_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerBattleInfo.skill_list)
}
void BrickBreakerPlayerBattleInfo::add_skill_list(::google::protobuf::uint32 value) {
  skill_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BrickBreakerPlayerBattleInfo.skill_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BrickBreakerPlayerBattleInfo::skill_list() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerPlayerBattleInfo.skill_list)
  return skill_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BrickBreakerPlayerBattleInfo::mutable_skill_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerPlayerBattleInfo.skill_list)
  return &skill_list_;
}

// bool is_ready = 14;
void BrickBreakerPlayerBattleInfo::clear_is_ready() {
  is_ready_ = false;
}
bool BrickBreakerPlayerBattleInfo::is_ready() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerBattleInfo.is_ready)
  return is_ready_;
}
void BrickBreakerPlayerBattleInfo::set_is_ready(bool value) {
  
  is_ready_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerBattleInfo.is_ready)
}

// bool is_changing = 11;
void BrickBreakerPlayerBattleInfo::clear_is_changing() {
  is_changing_ = false;
}
bool BrickBreakerPlayerBattleInfo::is_changing() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerBattleInfo.is_changing)
  return is_changing_;
}
void BrickBreakerPlayerBattleInfo::set_is_changing(bool value) {
  
  is_changing_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerBattleInfo.is_changing)
}

// uint32 uid = 15;
void BrickBreakerPlayerBattleInfo::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 BrickBreakerPlayerBattleInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerBattleInfo.uid)
  return uid_;
}
void BrickBreakerPlayerBattleInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerBattleInfo.uid)
}

// repeated uint32 avatar_id = 9;
int BrickBreakerPlayerBattleInfo::avatar_id_size() const {
  return avatar_id_.size();
}
void BrickBreakerPlayerBattleInfo::clear_avatar_id() {
  avatar_id_.Clear();
}
::google::protobuf::uint32 BrickBreakerPlayerBattleInfo::avatar_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerBattleInfo.avatar_id)
  return avatar_id_.Get(index);
}
void BrickBreakerPlayerBattleInfo::set_avatar_id(int index, ::google::protobuf::uint32 value) {
  avatar_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerBattleInfo.avatar_id)
}
void BrickBreakerPlayerBattleInfo::add_avatar_id(::google::protobuf::uint32 value) {
  avatar_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BrickBreakerPlayerBattleInfo.avatar_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BrickBreakerPlayerBattleInfo::avatar_id() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerPlayerBattleInfo.avatar_id)
  return avatar_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BrickBreakerPlayerBattleInfo::mutable_avatar_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerPlayerBattleInfo.avatar_id)
  return &avatar_id_;
}

// repeated uint32 costume_id = 13;
int BrickBreakerPlayerBattleInfo::costume_id_size() const {
  return costume_id_.size();
}
void BrickBreakerPlayerBattleInfo::clear_costume_id() {
  costume_id_.Clear();
}
::google::protobuf::uint32 BrickBreakerPlayerBattleInfo::costume_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerBattleInfo.costume_id)
  return costume_id_.Get(index);
}
void BrickBreakerPlayerBattleInfo::set_costume_id(int index, ::google::protobuf::uint32 value) {
  costume_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerBattleInfo.costume_id)
}
void BrickBreakerPlayerBattleInfo::add_costume_id(::google::protobuf::uint32 value) {
  costume_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BrickBreakerPlayerBattleInfo.costume_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BrickBreakerPlayerBattleInfo::costume_id() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerPlayerBattleInfo.costume_id)
  return costume_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BrickBreakerPlayerBattleInfo::mutable_costume_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerPlayerBattleInfo.costume_id)
  return &costume_id_;
}

// string nickname = 3;
void BrickBreakerPlayerBattleInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BrickBreakerPlayerBattleInfo::nickname() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerBattleInfo.nickname)
  return nickname_.GetNoArena();
}
void BrickBreakerPlayerBattleInfo::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerBattleInfo.nickname)
}
#if LANG_CXX11
void BrickBreakerPlayerBattleInfo::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.BrickBreakerPlayerBattleInfo.nickname)
}
#endif
void BrickBreakerPlayerBattleInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.BrickBreakerPlayerBattleInfo.nickname)
}
void BrickBreakerPlayerBattleInfo::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.BrickBreakerPlayerBattleInfo.nickname)
}
::std::string* BrickBreakerPlayerBattleInfo::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:proto.BrickBreakerPlayerBattleInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BrickBreakerPlayerBattleInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:proto.BrickBreakerPlayerBattleInfo.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BrickBreakerPlayerBattleInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.BrickBreakerPlayerBattleInfo.nickname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrickBreakerPlayerReadyNotify::kUidListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrickBreakerPlayerReadyNotify::BrickBreakerPlayerReadyNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BrickBreakerPlayerReadyNotify)
}
BrickBreakerPlayerReadyNotify::BrickBreakerPlayerReadyNotify(const BrickBreakerPlayerReadyNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      uid_list_(from.uid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.BrickBreakerPlayerReadyNotify)
}

void BrickBreakerPlayerReadyNotify::SharedCtor() {
  _cached_size_ = 0;
}

BrickBreakerPlayerReadyNotify::~BrickBreakerPlayerReadyNotify() {
  // @@protoc_insertion_point(destructor:proto.BrickBreakerPlayerReadyNotify)
  SharedDtor();
}

void BrickBreakerPlayerReadyNotify::SharedDtor() {
}

void BrickBreakerPlayerReadyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrickBreakerPlayerReadyNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BrickBreakerPlayerReadyNotify& BrickBreakerPlayerReadyNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

BrickBreakerPlayerReadyNotify* BrickBreakerPlayerReadyNotify::New(::google::protobuf::Arena* arena) const {
  BrickBreakerPlayerReadyNotify* n = new BrickBreakerPlayerReadyNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrickBreakerPlayerReadyNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BrickBreakerPlayerReadyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_list_.Clear();
  _internal_metadata_.Clear();
}

bool BrickBreakerPlayerReadyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BrickBreakerPlayerReadyNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 uid_list = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 114u, input, this->mutable_uid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BrickBreakerPlayerReadyNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BrickBreakerPlayerReadyNotify)
  return false;
#undef DO_
}

void BrickBreakerPlayerReadyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BrickBreakerPlayerReadyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 uid_list = 14;
  if (this->uid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _uid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->uid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->uid_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BrickBreakerPlayerReadyNotify)
}

::google::protobuf::uint8* BrickBreakerPlayerReadyNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BrickBreakerPlayerReadyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 uid_list = 14;
  if (this->uid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _uid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->uid_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BrickBreakerPlayerReadyNotify)
  return target;
}

size_t BrickBreakerPlayerReadyNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BrickBreakerPlayerReadyNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 uid_list = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->uid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _uid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrickBreakerPlayerReadyNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BrickBreakerPlayerReadyNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const BrickBreakerPlayerReadyNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BrickBreakerPlayerReadyNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BrickBreakerPlayerReadyNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BrickBreakerPlayerReadyNotify)
    MergeFrom(*source);
  }
}

void BrickBreakerPlayerReadyNotify::MergeFrom(const BrickBreakerPlayerReadyNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BrickBreakerPlayerReadyNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uid_list_.MergeFrom(from.uid_list_);
}

void BrickBreakerPlayerReadyNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BrickBreakerPlayerReadyNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrickBreakerPlayerReadyNotify::CopyFrom(const BrickBreakerPlayerReadyNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BrickBreakerPlayerReadyNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrickBreakerPlayerReadyNotify::IsInitialized() const {
  return true;
}

void BrickBreakerPlayerReadyNotify::Swap(BrickBreakerPlayerReadyNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrickBreakerPlayerReadyNotify::InternalSwap(BrickBreakerPlayerReadyNotify* other) {
  using std::swap;
  uid_list_.InternalSwap(&other->uid_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrickBreakerPlayerReadyNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrickBreakerPlayerReadyNotify

// repeated uint32 uid_list = 14;
int BrickBreakerPlayerReadyNotify::uid_list_size() const {
  return uid_list_.size();
}
void BrickBreakerPlayerReadyNotify::clear_uid_list() {
  uid_list_.Clear();
}
::google::protobuf::uint32 BrickBreakerPlayerReadyNotify::uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerReadyNotify.uid_list)
  return uid_list_.Get(index);
}
void BrickBreakerPlayerReadyNotify::set_uid_list(int index, ::google::protobuf::uint32 value) {
  uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerReadyNotify.uid_list)
}
void BrickBreakerPlayerReadyNotify::add_uid_list(::google::protobuf::uint32 value) {
  uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BrickBreakerPlayerReadyNotify.uid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BrickBreakerPlayerReadyNotify::uid_list() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerPlayerReadyNotify.uid_list)
  return uid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BrickBreakerPlayerReadyNotify::mutable_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerPlayerReadyNotify.uid_list)
  return &uid_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrickBreakerPlayerSetAvatarNotify::kAvatarIdListFieldNumber;
const int BrickBreakerPlayerSetAvatarNotify::kCostumeIdListFieldNumber;
const int BrickBreakerPlayerSetAvatarNotify::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrickBreakerPlayerSetAvatarNotify::BrickBreakerPlayerSetAvatarNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BrickBreakerPlayerSetAvatarNotify)
}
BrickBreakerPlayerSetAvatarNotify::BrickBreakerPlayerSetAvatarNotify(const BrickBreakerPlayerSetAvatarNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      avatar_id_list_(from.avatar_id_list_),
      costume_id_list_(from.costume_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:proto.BrickBreakerPlayerSetAvatarNotify)
}

void BrickBreakerPlayerSetAvatarNotify::SharedCtor() {
  uid_ = 0u;
  _cached_size_ = 0;
}

BrickBreakerPlayerSetAvatarNotify::~BrickBreakerPlayerSetAvatarNotify() {
  // @@protoc_insertion_point(destructor:proto.BrickBreakerPlayerSetAvatarNotify)
  SharedDtor();
}

void BrickBreakerPlayerSetAvatarNotify::SharedDtor() {
}

void BrickBreakerPlayerSetAvatarNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrickBreakerPlayerSetAvatarNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BrickBreakerPlayerSetAvatarNotify& BrickBreakerPlayerSetAvatarNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

BrickBreakerPlayerSetAvatarNotify* BrickBreakerPlayerSetAvatarNotify::New(::google::protobuf::Arena* arena) const {
  BrickBreakerPlayerSetAvatarNotify* n = new BrickBreakerPlayerSetAvatarNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrickBreakerPlayerSetAvatarNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BrickBreakerPlayerSetAvatarNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_id_list_.Clear();
  costume_id_list_.Clear();
  uid_ = 0u;
  _internal_metadata_.Clear();
}

bool BrickBreakerPlayerSetAvatarNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BrickBreakerPlayerSetAvatarNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 avatar_id_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_avatar_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66u, input, this->mutable_avatar_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 costume_id_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_costume_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 90u, input, this->mutable_costume_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BrickBreakerPlayerSetAvatarNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BrickBreakerPlayerSetAvatarNotify)
  return false;
#undef DO_
}

void BrickBreakerPlayerSetAvatarNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BrickBreakerPlayerSetAvatarNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 avatar_id_list = 8;
  if (this->avatar_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _avatar_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->avatar_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->avatar_id_list(i), output);
  }

  // uint32 uid = 9;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->uid(), output);
  }

  // repeated uint32 costume_id_list = 11;
  if (this->costume_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _costume_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->costume_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->costume_id_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BrickBreakerPlayerSetAvatarNotify)
}

::google::protobuf::uint8* BrickBreakerPlayerSetAvatarNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BrickBreakerPlayerSetAvatarNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 avatar_id_list = 8;
  if (this->avatar_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _avatar_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->avatar_id_list_, target);
  }

  // uint32 uid = 9;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->uid(), target);
  }

  // repeated uint32 costume_id_list = 11;
  if (this->costume_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _costume_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->costume_id_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BrickBreakerPlayerSetAvatarNotify)
  return target;
}

size_t BrickBreakerPlayerSetAvatarNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BrickBreakerPlayerSetAvatarNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 avatar_id_list = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->avatar_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _avatar_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 costume_id_list = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->costume_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _costume_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 uid = 9;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrickBreakerPlayerSetAvatarNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BrickBreakerPlayerSetAvatarNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const BrickBreakerPlayerSetAvatarNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BrickBreakerPlayerSetAvatarNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BrickBreakerPlayerSetAvatarNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BrickBreakerPlayerSetAvatarNotify)
    MergeFrom(*source);
  }
}

void BrickBreakerPlayerSetAvatarNotify::MergeFrom(const BrickBreakerPlayerSetAvatarNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BrickBreakerPlayerSetAvatarNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatar_id_list_.MergeFrom(from.avatar_id_list_);
  costume_id_list_.MergeFrom(from.costume_id_list_);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void BrickBreakerPlayerSetAvatarNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BrickBreakerPlayerSetAvatarNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrickBreakerPlayerSetAvatarNotify::CopyFrom(const BrickBreakerPlayerSetAvatarNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BrickBreakerPlayerSetAvatarNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrickBreakerPlayerSetAvatarNotify::IsInitialized() const {
  return true;
}

void BrickBreakerPlayerSetAvatarNotify::Swap(BrickBreakerPlayerSetAvatarNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrickBreakerPlayerSetAvatarNotify::InternalSwap(BrickBreakerPlayerSetAvatarNotify* other) {
  using std::swap;
  avatar_id_list_.InternalSwap(&other->avatar_id_list_);
  costume_id_list_.InternalSwap(&other->costume_id_list_);
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrickBreakerPlayerSetAvatarNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrickBreakerPlayerSetAvatarNotify

// repeated uint32 avatar_id_list = 8;
int BrickBreakerPlayerSetAvatarNotify::avatar_id_list_size() const {
  return avatar_id_list_.size();
}
void BrickBreakerPlayerSetAvatarNotify::clear_avatar_id_list() {
  avatar_id_list_.Clear();
}
::google::protobuf::uint32 BrickBreakerPlayerSetAvatarNotify::avatar_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerSetAvatarNotify.avatar_id_list)
  return avatar_id_list_.Get(index);
}
void BrickBreakerPlayerSetAvatarNotify::set_avatar_id_list(int index, ::google::protobuf::uint32 value) {
  avatar_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerSetAvatarNotify.avatar_id_list)
}
void BrickBreakerPlayerSetAvatarNotify::add_avatar_id_list(::google::protobuf::uint32 value) {
  avatar_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BrickBreakerPlayerSetAvatarNotify.avatar_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BrickBreakerPlayerSetAvatarNotify::avatar_id_list() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerPlayerSetAvatarNotify.avatar_id_list)
  return avatar_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BrickBreakerPlayerSetAvatarNotify::mutable_avatar_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerPlayerSetAvatarNotify.avatar_id_list)
  return &avatar_id_list_;
}

// repeated uint32 costume_id_list = 11;
int BrickBreakerPlayerSetAvatarNotify::costume_id_list_size() const {
  return costume_id_list_.size();
}
void BrickBreakerPlayerSetAvatarNotify::clear_costume_id_list() {
  costume_id_list_.Clear();
}
::google::protobuf::uint32 BrickBreakerPlayerSetAvatarNotify::costume_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerSetAvatarNotify.costume_id_list)
  return costume_id_list_.Get(index);
}
void BrickBreakerPlayerSetAvatarNotify::set_costume_id_list(int index, ::google::protobuf::uint32 value) {
  costume_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerSetAvatarNotify.costume_id_list)
}
void BrickBreakerPlayerSetAvatarNotify::add_costume_id_list(::google::protobuf::uint32 value) {
  costume_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BrickBreakerPlayerSetAvatarNotify.costume_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BrickBreakerPlayerSetAvatarNotify::costume_id_list() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerPlayerSetAvatarNotify.costume_id_list)
  return costume_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BrickBreakerPlayerSetAvatarNotify::mutable_costume_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerPlayerSetAvatarNotify.costume_id_list)
  return &costume_id_list_;
}

// uint32 uid = 9;
void BrickBreakerPlayerSetAvatarNotify::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 BrickBreakerPlayerSetAvatarNotify::uid() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerSetAvatarNotify.uid)
  return uid_;
}
void BrickBreakerPlayerSetAvatarNotify::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerSetAvatarNotify.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrickBreakerPlayerSetSkillNotify::kUidFieldNumber;
const int BrickBreakerPlayerSetSkillNotify::kSkillIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrickBreakerPlayerSetSkillNotify::BrickBreakerPlayerSetSkillNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BrickBreakerPlayerSetSkillNotify)
}
BrickBreakerPlayerSetSkillNotify::BrickBreakerPlayerSetSkillNotify(const BrickBreakerPlayerSetSkillNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      skill_id_list_(from.skill_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:proto.BrickBreakerPlayerSetSkillNotify)
}

void BrickBreakerPlayerSetSkillNotify::SharedCtor() {
  uid_ = 0u;
  _cached_size_ = 0;
}

BrickBreakerPlayerSetSkillNotify::~BrickBreakerPlayerSetSkillNotify() {
  // @@protoc_insertion_point(destructor:proto.BrickBreakerPlayerSetSkillNotify)
  SharedDtor();
}

void BrickBreakerPlayerSetSkillNotify::SharedDtor() {
}

void BrickBreakerPlayerSetSkillNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrickBreakerPlayerSetSkillNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BrickBreakerPlayerSetSkillNotify& BrickBreakerPlayerSetSkillNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

BrickBreakerPlayerSetSkillNotify* BrickBreakerPlayerSetSkillNotify::New(::google::protobuf::Arena* arena) const {
  BrickBreakerPlayerSetSkillNotify* n = new BrickBreakerPlayerSetSkillNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrickBreakerPlayerSetSkillNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BrickBreakerPlayerSetSkillNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skill_id_list_.Clear();
  uid_ = 0u;
  _internal_metadata_.Clear();
}

bool BrickBreakerPlayerSetSkillNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BrickBreakerPlayerSetSkillNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 skill_id_list = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skill_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 114u, input, this->mutable_skill_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BrickBreakerPlayerSetSkillNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BrickBreakerPlayerSetSkillNotify)
  return false;
#undef DO_
}

void BrickBreakerPlayerSetSkillNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BrickBreakerPlayerSetSkillNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 8;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->uid(), output);
  }

  // repeated uint32 skill_id_list = 14;
  if (this->skill_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _skill_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->skill_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->skill_id_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BrickBreakerPlayerSetSkillNotify)
}

::google::protobuf::uint8* BrickBreakerPlayerSetSkillNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BrickBreakerPlayerSetSkillNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 8;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->uid(), target);
  }

  // repeated uint32 skill_id_list = 14;
  if (this->skill_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _skill_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->skill_id_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BrickBreakerPlayerSetSkillNotify)
  return target;
}

size_t BrickBreakerPlayerSetSkillNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BrickBreakerPlayerSetSkillNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 skill_id_list = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->skill_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _skill_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 uid = 8;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrickBreakerPlayerSetSkillNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BrickBreakerPlayerSetSkillNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const BrickBreakerPlayerSetSkillNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BrickBreakerPlayerSetSkillNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BrickBreakerPlayerSetSkillNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BrickBreakerPlayerSetSkillNotify)
    MergeFrom(*source);
  }
}

void BrickBreakerPlayerSetSkillNotify::MergeFrom(const BrickBreakerPlayerSetSkillNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BrickBreakerPlayerSetSkillNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skill_id_list_.MergeFrom(from.skill_id_list_);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void BrickBreakerPlayerSetSkillNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BrickBreakerPlayerSetSkillNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrickBreakerPlayerSetSkillNotify::CopyFrom(const BrickBreakerPlayerSetSkillNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BrickBreakerPlayerSetSkillNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrickBreakerPlayerSetSkillNotify::IsInitialized() const {
  return true;
}

void BrickBreakerPlayerSetSkillNotify::Swap(BrickBreakerPlayerSetSkillNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrickBreakerPlayerSetSkillNotify::InternalSwap(BrickBreakerPlayerSetSkillNotify* other) {
  using std::swap;
  skill_id_list_.InternalSwap(&other->skill_id_list_);
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrickBreakerPlayerSetSkillNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrickBreakerPlayerSetSkillNotify

// uint32 uid = 8;
void BrickBreakerPlayerSetSkillNotify::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 BrickBreakerPlayerSetSkillNotify::uid() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerSetSkillNotify.uid)
  return uid_;
}
void BrickBreakerPlayerSetSkillNotify::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerSetSkillNotify.uid)
}

// repeated uint32 skill_id_list = 14;
int BrickBreakerPlayerSetSkillNotify::skill_id_list_size() const {
  return skill_id_list_.size();
}
void BrickBreakerPlayerSetSkillNotify::clear_skill_id_list() {
  skill_id_list_.Clear();
}
::google::protobuf::uint32 BrickBreakerPlayerSetSkillNotify::skill_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerSetSkillNotify.skill_id_list)
  return skill_id_list_.Get(index);
}
void BrickBreakerPlayerSetSkillNotify::set_skill_id_list(int index, ::google::protobuf::uint32 value) {
  skill_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerSetSkillNotify.skill_id_list)
}
void BrickBreakerPlayerSetSkillNotify::add_skill_id_list(::google::protobuf::uint32 value) {
  skill_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BrickBreakerPlayerSetSkillNotify.skill_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BrickBreakerPlayerSetSkillNotify::skill_id_list() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerPlayerSetSkillNotify.skill_id_list)
  return skill_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BrickBreakerPlayerSetSkillNotify::mutable_skill_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerPlayerSetSkillNotify.skill_id_list)
  return &skill_id_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrickBreakerSetReadyReq::BrickBreakerSetReadyReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BrickBreakerSetReadyReq)
}
BrickBreakerSetReadyReq::BrickBreakerSetReadyReq(const BrickBreakerSetReadyReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.BrickBreakerSetReadyReq)
}

void BrickBreakerSetReadyReq::SharedCtor() {
  _cached_size_ = 0;
}

BrickBreakerSetReadyReq::~BrickBreakerSetReadyReq() {
  // @@protoc_insertion_point(destructor:proto.BrickBreakerSetReadyReq)
  SharedDtor();
}

void BrickBreakerSetReadyReq::SharedDtor() {
}

void BrickBreakerSetReadyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrickBreakerSetReadyReq::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BrickBreakerSetReadyReq& BrickBreakerSetReadyReq::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

BrickBreakerSetReadyReq* BrickBreakerSetReadyReq::New(::google::protobuf::Arena* arena) const {
  BrickBreakerSetReadyReq* n = new BrickBreakerSetReadyReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrickBreakerSetReadyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BrickBreakerSetReadyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool BrickBreakerSetReadyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BrickBreakerSetReadyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BrickBreakerSetReadyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BrickBreakerSetReadyReq)
  return false;
#undef DO_
}

void BrickBreakerSetReadyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BrickBreakerSetReadyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BrickBreakerSetReadyReq)
}

::google::protobuf::uint8* BrickBreakerSetReadyReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BrickBreakerSetReadyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BrickBreakerSetReadyReq)
  return target;
}

size_t BrickBreakerSetReadyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BrickBreakerSetReadyReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrickBreakerSetReadyReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BrickBreakerSetReadyReq)
  GOOGLE_DCHECK_NE(&from, this);
  const BrickBreakerSetReadyReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BrickBreakerSetReadyReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BrickBreakerSetReadyReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BrickBreakerSetReadyReq)
    MergeFrom(*source);
  }
}

void BrickBreakerSetReadyReq::MergeFrom(const BrickBreakerSetReadyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BrickBreakerSetReadyReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void BrickBreakerSetReadyReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BrickBreakerSetReadyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrickBreakerSetReadyReq::CopyFrom(const BrickBreakerSetReadyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BrickBreakerSetReadyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrickBreakerSetReadyReq::IsInitialized() const {
  return true;
}

void BrickBreakerSetReadyReq::Swap(BrickBreakerSetReadyReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrickBreakerSetReadyReq::InternalSwap(BrickBreakerSetReadyReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrickBreakerSetReadyReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrickBreakerSetReadyReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrickBreakerSetReadyRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrickBreakerSetReadyRsp::BrickBreakerSetReadyRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BrickBreakerSetReadyRsp)
}
BrickBreakerSetReadyRsp::BrickBreakerSetReadyRsp(const BrickBreakerSetReadyRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.BrickBreakerSetReadyRsp)
}

void BrickBreakerSetReadyRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

BrickBreakerSetReadyRsp::~BrickBreakerSetReadyRsp() {
  // @@protoc_insertion_point(destructor:proto.BrickBreakerSetReadyRsp)
  SharedDtor();
}

void BrickBreakerSetReadyRsp::SharedDtor() {
}

void BrickBreakerSetReadyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrickBreakerSetReadyRsp::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BrickBreakerSetReadyRsp& BrickBreakerSetReadyRsp::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

BrickBreakerSetReadyRsp* BrickBreakerSetReadyRsp::New(::google::protobuf::Arena* arena) const {
  BrickBreakerSetReadyRsp* n = new BrickBreakerSetReadyRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrickBreakerSetReadyRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BrickBreakerSetReadyRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool BrickBreakerSetReadyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BrickBreakerSetReadyRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BrickBreakerSetReadyRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BrickBreakerSetReadyRsp)
  return false;
#undef DO_
}

void BrickBreakerSetReadyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BrickBreakerSetReadyRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 2;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BrickBreakerSetReadyRsp)
}

::google::protobuf::uint8* BrickBreakerSetReadyRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BrickBreakerSetReadyRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 2;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BrickBreakerSetReadyRsp)
  return target;
}

size_t BrickBreakerSetReadyRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BrickBreakerSetReadyRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 2;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrickBreakerSetReadyRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BrickBreakerSetReadyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const BrickBreakerSetReadyRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BrickBreakerSetReadyRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BrickBreakerSetReadyRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BrickBreakerSetReadyRsp)
    MergeFrom(*source);
  }
}

void BrickBreakerSetReadyRsp::MergeFrom(const BrickBreakerSetReadyRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BrickBreakerSetReadyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void BrickBreakerSetReadyRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BrickBreakerSetReadyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrickBreakerSetReadyRsp::CopyFrom(const BrickBreakerSetReadyRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BrickBreakerSetReadyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrickBreakerSetReadyRsp::IsInitialized() const {
  return true;
}

void BrickBreakerSetReadyRsp::Swap(BrickBreakerSetReadyRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrickBreakerSetReadyRsp::InternalSwap(BrickBreakerSetReadyRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrickBreakerSetReadyRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrickBreakerSetReadyRsp

// int32 retcode = 2;
void BrickBreakerSetReadyRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 BrickBreakerSetReadyRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerSetReadyRsp.retcode)
  return retcode_;
}
void BrickBreakerSetReadyRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerSetReadyRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrickBreakerSelectAvatarReq::kAvatarIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrickBreakerSelectAvatarReq::BrickBreakerSelectAvatarReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BrickBreakerSelectAvatarReq)
}
BrickBreakerSelectAvatarReq::BrickBreakerSelectAvatarReq(const BrickBreakerSelectAvatarReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      avatar_id_(from.avatar_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.BrickBreakerSelectAvatarReq)
}

void BrickBreakerSelectAvatarReq::SharedCtor() {
  _cached_size_ = 0;
}

BrickBreakerSelectAvatarReq::~BrickBreakerSelectAvatarReq() {
  // @@protoc_insertion_point(destructor:proto.BrickBreakerSelectAvatarReq)
  SharedDtor();
}

void BrickBreakerSelectAvatarReq::SharedDtor() {
}

void BrickBreakerSelectAvatarReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrickBreakerSelectAvatarReq::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BrickBreakerSelectAvatarReq& BrickBreakerSelectAvatarReq::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

BrickBreakerSelectAvatarReq* BrickBreakerSelectAvatarReq::New(::google::protobuf::Arena* arena) const {
  BrickBreakerSelectAvatarReq* n = new BrickBreakerSelectAvatarReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrickBreakerSelectAvatarReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BrickBreakerSelectAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_id_.Clear();
  _internal_metadata_.Clear();
}

bool BrickBreakerSelectAvatarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BrickBreakerSelectAvatarReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 avatar_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_avatar_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_avatar_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BrickBreakerSelectAvatarReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BrickBreakerSelectAvatarReq)
  return false;
#undef DO_
}

void BrickBreakerSelectAvatarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BrickBreakerSelectAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 avatar_id = 2;
  if (this->avatar_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _avatar_id_cached_byte_size_));
  }
  for (int i = 0, n = this->avatar_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->avatar_id(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BrickBreakerSelectAvatarReq)
}

::google::protobuf::uint8* BrickBreakerSelectAvatarReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BrickBreakerSelectAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 avatar_id = 2;
  if (this->avatar_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _avatar_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->avatar_id_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BrickBreakerSelectAvatarReq)
  return target;
}

size_t BrickBreakerSelectAvatarReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BrickBreakerSelectAvatarReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 avatar_id = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->avatar_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _avatar_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrickBreakerSelectAvatarReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BrickBreakerSelectAvatarReq)
  GOOGLE_DCHECK_NE(&from, this);
  const BrickBreakerSelectAvatarReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BrickBreakerSelectAvatarReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BrickBreakerSelectAvatarReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BrickBreakerSelectAvatarReq)
    MergeFrom(*source);
  }
}

void BrickBreakerSelectAvatarReq::MergeFrom(const BrickBreakerSelectAvatarReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BrickBreakerSelectAvatarReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatar_id_.MergeFrom(from.avatar_id_);
}

void BrickBreakerSelectAvatarReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BrickBreakerSelectAvatarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrickBreakerSelectAvatarReq::CopyFrom(const BrickBreakerSelectAvatarReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BrickBreakerSelectAvatarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrickBreakerSelectAvatarReq::IsInitialized() const {
  return true;
}

void BrickBreakerSelectAvatarReq::Swap(BrickBreakerSelectAvatarReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrickBreakerSelectAvatarReq::InternalSwap(BrickBreakerSelectAvatarReq* other) {
  using std::swap;
  avatar_id_.InternalSwap(&other->avatar_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrickBreakerSelectAvatarReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrickBreakerSelectAvatarReq

// repeated uint32 avatar_id = 2;
int BrickBreakerSelectAvatarReq::avatar_id_size() const {
  return avatar_id_.size();
}
void BrickBreakerSelectAvatarReq::clear_avatar_id() {
  avatar_id_.Clear();
}
::google::protobuf::uint32 BrickBreakerSelectAvatarReq::avatar_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerSelectAvatarReq.avatar_id)
  return avatar_id_.Get(index);
}
void BrickBreakerSelectAvatarReq::set_avatar_id(int index, ::google::protobuf::uint32 value) {
  avatar_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerSelectAvatarReq.avatar_id)
}
void BrickBreakerSelectAvatarReq::add_avatar_id(::google::protobuf::uint32 value) {
  avatar_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BrickBreakerSelectAvatarReq.avatar_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BrickBreakerSelectAvatarReq::avatar_id() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerSelectAvatarReq.avatar_id)
  return avatar_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BrickBreakerSelectAvatarReq::mutable_avatar_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerSelectAvatarReq.avatar_id)
  return &avatar_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrickBreakerSelectAvatarRsp::kAvatarIdFieldNumber;
const int BrickBreakerSelectAvatarRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrickBreakerSelectAvatarRsp::BrickBreakerSelectAvatarRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BrickBreakerSelectAvatarRsp)
}
BrickBreakerSelectAvatarRsp::BrickBreakerSelectAvatarRsp(const BrickBreakerSelectAvatarRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      avatar_id_(from.avatar_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.BrickBreakerSelectAvatarRsp)
}

void BrickBreakerSelectAvatarRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

BrickBreakerSelectAvatarRsp::~BrickBreakerSelectAvatarRsp() {
  // @@protoc_insertion_point(destructor:proto.BrickBreakerSelectAvatarRsp)
  SharedDtor();
}

void BrickBreakerSelectAvatarRsp::SharedDtor() {
}

void BrickBreakerSelectAvatarRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrickBreakerSelectAvatarRsp::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BrickBreakerSelectAvatarRsp& BrickBreakerSelectAvatarRsp::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

BrickBreakerSelectAvatarRsp* BrickBreakerSelectAvatarRsp::New(::google::protobuf::Arena* arena) const {
  BrickBreakerSelectAvatarRsp* n = new BrickBreakerSelectAvatarRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrickBreakerSelectAvatarRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BrickBreakerSelectAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_id_.Clear();
  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool BrickBreakerSelectAvatarRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BrickBreakerSelectAvatarRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 avatar_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_avatar_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66u, input, this->mutable_avatar_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BrickBreakerSelectAvatarRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BrickBreakerSelectAvatarRsp)
  return false;
#undef DO_
}

void BrickBreakerSelectAvatarRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BrickBreakerSelectAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->retcode(), output);
  }

  // repeated uint32 avatar_id = 8;
  if (this->avatar_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _avatar_id_cached_byte_size_));
  }
  for (int i = 0, n = this->avatar_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->avatar_id(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BrickBreakerSelectAvatarRsp)
}

::google::protobuf::uint8* BrickBreakerSelectAvatarRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BrickBreakerSelectAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->retcode(), target);
  }

  // repeated uint32 avatar_id = 8;
  if (this->avatar_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _avatar_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->avatar_id_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BrickBreakerSelectAvatarRsp)
  return target;
}

size_t BrickBreakerSelectAvatarRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BrickBreakerSelectAvatarRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 avatar_id = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->avatar_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _avatar_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrickBreakerSelectAvatarRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BrickBreakerSelectAvatarRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const BrickBreakerSelectAvatarRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BrickBreakerSelectAvatarRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BrickBreakerSelectAvatarRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BrickBreakerSelectAvatarRsp)
    MergeFrom(*source);
  }
}

void BrickBreakerSelectAvatarRsp::MergeFrom(const BrickBreakerSelectAvatarRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BrickBreakerSelectAvatarRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatar_id_.MergeFrom(from.avatar_id_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void BrickBreakerSelectAvatarRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BrickBreakerSelectAvatarRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrickBreakerSelectAvatarRsp::CopyFrom(const BrickBreakerSelectAvatarRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BrickBreakerSelectAvatarRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrickBreakerSelectAvatarRsp::IsInitialized() const {
  return true;
}

void BrickBreakerSelectAvatarRsp::Swap(BrickBreakerSelectAvatarRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrickBreakerSelectAvatarRsp::InternalSwap(BrickBreakerSelectAvatarRsp* other) {
  using std::swap;
  avatar_id_.InternalSwap(&other->avatar_id_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrickBreakerSelectAvatarRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrickBreakerSelectAvatarRsp

// repeated uint32 avatar_id = 8;
int BrickBreakerSelectAvatarRsp::avatar_id_size() const {
  return avatar_id_.size();
}
void BrickBreakerSelectAvatarRsp::clear_avatar_id() {
  avatar_id_.Clear();
}
::google::protobuf::uint32 BrickBreakerSelectAvatarRsp::avatar_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerSelectAvatarRsp.avatar_id)
  return avatar_id_.Get(index);
}
void BrickBreakerSelectAvatarRsp::set_avatar_id(int index, ::google::protobuf::uint32 value) {
  avatar_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerSelectAvatarRsp.avatar_id)
}
void BrickBreakerSelectAvatarRsp::add_avatar_id(::google::protobuf::uint32 value) {
  avatar_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BrickBreakerSelectAvatarRsp.avatar_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BrickBreakerSelectAvatarRsp::avatar_id() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerSelectAvatarRsp.avatar_id)
  return avatar_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BrickBreakerSelectAvatarRsp::mutable_avatar_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerSelectAvatarRsp.avatar_id)
  return &avatar_id_;
}

// int32 retcode = 4;
void BrickBreakerSelectAvatarRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 BrickBreakerSelectAvatarRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerSelectAvatarRsp.retcode)
  return retcode_;
}
void BrickBreakerSelectAvatarRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerSelectAvatarRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrickBreakerSelectSkillReq::kSkillIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrickBreakerSelectSkillReq::BrickBreakerSelectSkillReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BrickBreakerSelectSkillReq)
}
BrickBreakerSelectSkillReq::BrickBreakerSelectSkillReq(const BrickBreakerSelectSkillReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      skill_id_(from.skill_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.BrickBreakerSelectSkillReq)
}

void BrickBreakerSelectSkillReq::SharedCtor() {
  _cached_size_ = 0;
}

BrickBreakerSelectSkillReq::~BrickBreakerSelectSkillReq() {
  // @@protoc_insertion_point(destructor:proto.BrickBreakerSelectSkillReq)
  SharedDtor();
}

void BrickBreakerSelectSkillReq::SharedDtor() {
}

void BrickBreakerSelectSkillReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrickBreakerSelectSkillReq::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BrickBreakerSelectSkillReq& BrickBreakerSelectSkillReq::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

BrickBreakerSelectSkillReq* BrickBreakerSelectSkillReq::New(::google::protobuf::Arena* arena) const {
  BrickBreakerSelectSkillReq* n = new BrickBreakerSelectSkillReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrickBreakerSelectSkillReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BrickBreakerSelectSkillReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skill_id_.Clear();
  _internal_metadata_.Clear();
}

bool BrickBreakerSelectSkillReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BrickBreakerSelectSkillReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 skill_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skill_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50u, input, this->mutable_skill_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BrickBreakerSelectSkillReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BrickBreakerSelectSkillReq)
  return false;
#undef DO_
}

void BrickBreakerSelectSkillReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BrickBreakerSelectSkillReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 skill_id = 6;
  if (this->skill_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _skill_id_cached_byte_size_));
  }
  for (int i = 0, n = this->skill_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->skill_id(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BrickBreakerSelectSkillReq)
}

::google::protobuf::uint8* BrickBreakerSelectSkillReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BrickBreakerSelectSkillReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 skill_id = 6;
  if (this->skill_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _skill_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->skill_id_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BrickBreakerSelectSkillReq)
  return target;
}

size_t BrickBreakerSelectSkillReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BrickBreakerSelectSkillReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 skill_id = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->skill_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _skill_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrickBreakerSelectSkillReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BrickBreakerSelectSkillReq)
  GOOGLE_DCHECK_NE(&from, this);
  const BrickBreakerSelectSkillReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BrickBreakerSelectSkillReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BrickBreakerSelectSkillReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BrickBreakerSelectSkillReq)
    MergeFrom(*source);
  }
}

void BrickBreakerSelectSkillReq::MergeFrom(const BrickBreakerSelectSkillReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BrickBreakerSelectSkillReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skill_id_.MergeFrom(from.skill_id_);
}

void BrickBreakerSelectSkillReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BrickBreakerSelectSkillReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrickBreakerSelectSkillReq::CopyFrom(const BrickBreakerSelectSkillReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BrickBreakerSelectSkillReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrickBreakerSelectSkillReq::IsInitialized() const {
  return true;
}

void BrickBreakerSelectSkillReq::Swap(BrickBreakerSelectSkillReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrickBreakerSelectSkillReq::InternalSwap(BrickBreakerSelectSkillReq* other) {
  using std::swap;
  skill_id_.InternalSwap(&other->skill_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrickBreakerSelectSkillReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrickBreakerSelectSkillReq

// repeated uint32 skill_id = 6;
int BrickBreakerSelectSkillReq::skill_id_size() const {
  return skill_id_.size();
}
void BrickBreakerSelectSkillReq::clear_skill_id() {
  skill_id_.Clear();
}
::google::protobuf::uint32 BrickBreakerSelectSkillReq::skill_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerSelectSkillReq.skill_id)
  return skill_id_.Get(index);
}
void BrickBreakerSelectSkillReq::set_skill_id(int index, ::google::protobuf::uint32 value) {
  skill_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerSelectSkillReq.skill_id)
}
void BrickBreakerSelectSkillReq::add_skill_id(::google::protobuf::uint32 value) {
  skill_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BrickBreakerSelectSkillReq.skill_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BrickBreakerSelectSkillReq::skill_id() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerSelectSkillReq.skill_id)
  return skill_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BrickBreakerSelectSkillReq::mutable_skill_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerSelectSkillReq.skill_id)
  return &skill_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrickBreakerSelectSkillRsp::kRetcodeFieldNumber;
const int BrickBreakerSelectSkillRsp::kSkillIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrickBreakerSelectSkillRsp::BrickBreakerSelectSkillRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BrickBreakerSelectSkillRsp)
}
BrickBreakerSelectSkillRsp::BrickBreakerSelectSkillRsp(const BrickBreakerSelectSkillRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      skill_id_(from.skill_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.BrickBreakerSelectSkillRsp)
}

void BrickBreakerSelectSkillRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

BrickBreakerSelectSkillRsp::~BrickBreakerSelectSkillRsp() {
  // @@protoc_insertion_point(destructor:proto.BrickBreakerSelectSkillRsp)
  SharedDtor();
}

void BrickBreakerSelectSkillRsp::SharedDtor() {
}

void BrickBreakerSelectSkillRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrickBreakerSelectSkillRsp::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BrickBreakerSelectSkillRsp& BrickBreakerSelectSkillRsp::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

BrickBreakerSelectSkillRsp* BrickBreakerSelectSkillRsp::New(::google::protobuf::Arena* arena) const {
  BrickBreakerSelectSkillRsp* n = new BrickBreakerSelectSkillRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrickBreakerSelectSkillRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BrickBreakerSelectSkillRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skill_id_.Clear();
  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool BrickBreakerSelectSkillRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BrickBreakerSelectSkillRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 skill_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skill_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 90u, input, this->mutable_skill_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BrickBreakerSelectSkillRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BrickBreakerSelectSkillRsp)
  return false;
#undef DO_
}

void BrickBreakerSelectSkillRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BrickBreakerSelectSkillRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 10;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->retcode(), output);
  }

  // repeated uint32 skill_id = 11;
  if (this->skill_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _skill_id_cached_byte_size_));
  }
  for (int i = 0, n = this->skill_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->skill_id(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BrickBreakerSelectSkillRsp)
}

::google::protobuf::uint8* BrickBreakerSelectSkillRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BrickBreakerSelectSkillRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 10;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->retcode(), target);
  }

  // repeated uint32 skill_id = 11;
  if (this->skill_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _skill_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->skill_id_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BrickBreakerSelectSkillRsp)
  return target;
}

size_t BrickBreakerSelectSkillRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BrickBreakerSelectSkillRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 skill_id = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->skill_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _skill_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 retcode = 10;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrickBreakerSelectSkillRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BrickBreakerSelectSkillRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const BrickBreakerSelectSkillRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BrickBreakerSelectSkillRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BrickBreakerSelectSkillRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BrickBreakerSelectSkillRsp)
    MergeFrom(*source);
  }
}

void BrickBreakerSelectSkillRsp::MergeFrom(const BrickBreakerSelectSkillRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BrickBreakerSelectSkillRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skill_id_.MergeFrom(from.skill_id_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void BrickBreakerSelectSkillRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BrickBreakerSelectSkillRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrickBreakerSelectSkillRsp::CopyFrom(const BrickBreakerSelectSkillRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BrickBreakerSelectSkillRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrickBreakerSelectSkillRsp::IsInitialized() const {
  return true;
}

void BrickBreakerSelectSkillRsp::Swap(BrickBreakerSelectSkillRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrickBreakerSelectSkillRsp::InternalSwap(BrickBreakerSelectSkillRsp* other) {
  using std::swap;
  skill_id_.InternalSwap(&other->skill_id_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrickBreakerSelectSkillRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrickBreakerSelectSkillRsp

// int32 retcode = 10;
void BrickBreakerSelectSkillRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 BrickBreakerSelectSkillRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerSelectSkillRsp.retcode)
  return retcode_;
}
void BrickBreakerSelectSkillRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerSelectSkillRsp.retcode)
}

// repeated uint32 skill_id = 11;
int BrickBreakerSelectSkillRsp::skill_id_size() const {
  return skill_id_.size();
}
void BrickBreakerSelectSkillRsp::clear_skill_id() {
  skill_id_.Clear();
}
::google::protobuf::uint32 BrickBreakerSelectSkillRsp::skill_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerSelectSkillRsp.skill_id)
  return skill_id_.Get(index);
}
void BrickBreakerSelectSkillRsp::set_skill_id(int index, ::google::protobuf::uint32 value) {
  skill_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerSelectSkillRsp.skill_id)
}
void BrickBreakerSelectSkillRsp::add_skill_id(::google::protobuf::uint32 value) {
  skill_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BrickBreakerSelectSkillRsp.skill_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BrickBreakerSelectSkillRsp::skill_id() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerSelectSkillRsp.skill_id)
  return skill_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BrickBreakerSelectSkillRsp::mutable_skill_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerSelectSkillRsp.skill_id)
  return &skill_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrickBreakerSetChangingReq::kIsChangingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrickBreakerSetChangingReq::BrickBreakerSetChangingReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BrickBreakerSetChangingReq)
}
BrickBreakerSetChangingReq::BrickBreakerSetChangingReq(const BrickBreakerSetChangingReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_changing_ = from.is_changing_;
  // @@protoc_insertion_point(copy_constructor:proto.BrickBreakerSetChangingReq)
}

void BrickBreakerSetChangingReq::SharedCtor() {
  is_changing_ = false;
  _cached_size_ = 0;
}

BrickBreakerSetChangingReq::~BrickBreakerSetChangingReq() {
  // @@protoc_insertion_point(destructor:proto.BrickBreakerSetChangingReq)
  SharedDtor();
}

void BrickBreakerSetChangingReq::SharedDtor() {
}

void BrickBreakerSetChangingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrickBreakerSetChangingReq::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BrickBreakerSetChangingReq& BrickBreakerSetChangingReq::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

BrickBreakerSetChangingReq* BrickBreakerSetChangingReq::New(::google::protobuf::Arena* arena) const {
  BrickBreakerSetChangingReq* n = new BrickBreakerSetChangingReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrickBreakerSetChangingReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BrickBreakerSetChangingReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_changing_ = false;
  _internal_metadata_.Clear();
}

bool BrickBreakerSetChangingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BrickBreakerSetChangingReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_changing = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_changing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BrickBreakerSetChangingReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BrickBreakerSetChangingReq)
  return false;
#undef DO_
}

void BrickBreakerSetChangingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BrickBreakerSetChangingReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_changing = 11;
  if (this->is_changing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_changing(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BrickBreakerSetChangingReq)
}

::google::protobuf::uint8* BrickBreakerSetChangingReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BrickBreakerSetChangingReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_changing = 11;
  if (this->is_changing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_changing(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BrickBreakerSetChangingReq)
  return target;
}

size_t BrickBreakerSetChangingReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BrickBreakerSetChangingReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_changing = 11;
  if (this->is_changing() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrickBreakerSetChangingReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BrickBreakerSetChangingReq)
  GOOGLE_DCHECK_NE(&from, this);
  const BrickBreakerSetChangingReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BrickBreakerSetChangingReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BrickBreakerSetChangingReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BrickBreakerSetChangingReq)
    MergeFrom(*source);
  }
}

void BrickBreakerSetChangingReq::MergeFrom(const BrickBreakerSetChangingReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BrickBreakerSetChangingReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_changing() != 0) {
    set_is_changing(from.is_changing());
  }
}

void BrickBreakerSetChangingReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BrickBreakerSetChangingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrickBreakerSetChangingReq::CopyFrom(const BrickBreakerSetChangingReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BrickBreakerSetChangingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrickBreakerSetChangingReq::IsInitialized() const {
  return true;
}

void BrickBreakerSetChangingReq::Swap(BrickBreakerSetChangingReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrickBreakerSetChangingReq::InternalSwap(BrickBreakerSetChangingReq* other) {
  using std::swap;
  swap(is_changing_, other->is_changing_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrickBreakerSetChangingReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrickBreakerSetChangingReq

// bool is_changing = 11;
void BrickBreakerSetChangingReq::clear_is_changing() {
  is_changing_ = false;
}
bool BrickBreakerSetChangingReq::is_changing() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerSetChangingReq.is_changing)
  return is_changing_;
}
void BrickBreakerSetChangingReq::set_is_changing(bool value) {
  
  is_changing_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerSetChangingReq.is_changing)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrickBreakerSetChangingRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrickBreakerSetChangingRsp::BrickBreakerSetChangingRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BrickBreakerSetChangingRsp)
}
BrickBreakerSetChangingRsp::BrickBreakerSetChangingRsp(const BrickBreakerSetChangingRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.BrickBreakerSetChangingRsp)
}

void BrickBreakerSetChangingRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

BrickBreakerSetChangingRsp::~BrickBreakerSetChangingRsp() {
  // @@protoc_insertion_point(destructor:proto.BrickBreakerSetChangingRsp)
  SharedDtor();
}

void BrickBreakerSetChangingRsp::SharedDtor() {
}

void BrickBreakerSetChangingRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrickBreakerSetChangingRsp::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BrickBreakerSetChangingRsp& BrickBreakerSetChangingRsp::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

BrickBreakerSetChangingRsp* BrickBreakerSetChangingRsp::New(::google::protobuf::Arena* arena) const {
  BrickBreakerSetChangingRsp* n = new BrickBreakerSetChangingRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrickBreakerSetChangingRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BrickBreakerSetChangingRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool BrickBreakerSetChangingRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BrickBreakerSetChangingRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BrickBreakerSetChangingRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BrickBreakerSetChangingRsp)
  return false;
#undef DO_
}

void BrickBreakerSetChangingRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BrickBreakerSetChangingRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 2;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BrickBreakerSetChangingRsp)
}

::google::protobuf::uint8* BrickBreakerSetChangingRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BrickBreakerSetChangingRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 2;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BrickBreakerSetChangingRsp)
  return target;
}

size_t BrickBreakerSetChangingRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BrickBreakerSetChangingRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 2;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrickBreakerSetChangingRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BrickBreakerSetChangingRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const BrickBreakerSetChangingRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BrickBreakerSetChangingRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BrickBreakerSetChangingRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BrickBreakerSetChangingRsp)
    MergeFrom(*source);
  }
}

void BrickBreakerSetChangingRsp::MergeFrom(const BrickBreakerSetChangingRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BrickBreakerSetChangingRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void BrickBreakerSetChangingRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BrickBreakerSetChangingRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrickBreakerSetChangingRsp::CopyFrom(const BrickBreakerSetChangingRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BrickBreakerSetChangingRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrickBreakerSetChangingRsp::IsInitialized() const {
  return true;
}

void BrickBreakerSetChangingRsp::Swap(BrickBreakerSetChangingRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrickBreakerSetChangingRsp::InternalSwap(BrickBreakerSetChangingRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrickBreakerSetChangingRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrickBreakerSetChangingRsp

// int32 retcode = 2;
void BrickBreakerSetChangingRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 BrickBreakerSetChangingRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerSetChangingRsp.retcode)
  return retcode_;
}
void BrickBreakerSetChangingRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerSetChangingRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrickBreakerPlayerSetChangingNotify::kUidFieldNumber;
const int BrickBreakerPlayerSetChangingNotify::kIsChangingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrickBreakerPlayerSetChangingNotify::BrickBreakerPlayerSetChangingNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BrickBreakerPlayerSetChangingNotify)
}
BrickBreakerPlayerSetChangingNotify::BrickBreakerPlayerSetChangingNotify(const BrickBreakerPlayerSetChangingNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_changing_, &from.is_changing_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&is_changing_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:proto.BrickBreakerPlayerSetChangingNotify)
}

void BrickBreakerPlayerSetChangingNotify::SharedCtor() {
  ::memset(&is_changing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&is_changing_)) + sizeof(uid_));
  _cached_size_ = 0;
}

BrickBreakerPlayerSetChangingNotify::~BrickBreakerPlayerSetChangingNotify() {
  // @@protoc_insertion_point(destructor:proto.BrickBreakerPlayerSetChangingNotify)
  SharedDtor();
}

void BrickBreakerPlayerSetChangingNotify::SharedDtor() {
}

void BrickBreakerPlayerSetChangingNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrickBreakerPlayerSetChangingNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BrickBreakerPlayerSetChangingNotify& BrickBreakerPlayerSetChangingNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

BrickBreakerPlayerSetChangingNotify* BrickBreakerPlayerSetChangingNotify::New(::google::protobuf::Arena* arena) const {
  BrickBreakerPlayerSetChangingNotify* n = new BrickBreakerPlayerSetChangingNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrickBreakerPlayerSetChangingNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BrickBreakerPlayerSetChangingNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_changing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&is_changing_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

bool BrickBreakerPlayerSetChangingNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BrickBreakerPlayerSetChangingNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_changing = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_changing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uid = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BrickBreakerPlayerSetChangingNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BrickBreakerPlayerSetChangingNotify)
  return false;
#undef DO_
}

void BrickBreakerPlayerSetChangingNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BrickBreakerPlayerSetChangingNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_changing = 7;
  if (this->is_changing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_changing(), output);
  }

  // uint32 uid = 15;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BrickBreakerPlayerSetChangingNotify)
}

::google::protobuf::uint8* BrickBreakerPlayerSetChangingNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BrickBreakerPlayerSetChangingNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_changing = 7;
  if (this->is_changing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_changing(), target);
  }

  // uint32 uid = 15;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BrickBreakerPlayerSetChangingNotify)
  return target;
}

size_t BrickBreakerPlayerSetChangingNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BrickBreakerPlayerSetChangingNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_changing = 7;
  if (this->is_changing() != 0) {
    total_size += 1 + 1;
  }

  // uint32 uid = 15;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrickBreakerPlayerSetChangingNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BrickBreakerPlayerSetChangingNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const BrickBreakerPlayerSetChangingNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BrickBreakerPlayerSetChangingNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BrickBreakerPlayerSetChangingNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BrickBreakerPlayerSetChangingNotify)
    MergeFrom(*source);
  }
}

void BrickBreakerPlayerSetChangingNotify::MergeFrom(const BrickBreakerPlayerSetChangingNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BrickBreakerPlayerSetChangingNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_changing() != 0) {
    set_is_changing(from.is_changing());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void BrickBreakerPlayerSetChangingNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BrickBreakerPlayerSetChangingNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrickBreakerPlayerSetChangingNotify::CopyFrom(const BrickBreakerPlayerSetChangingNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BrickBreakerPlayerSetChangingNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrickBreakerPlayerSetChangingNotify::IsInitialized() const {
  return true;
}

void BrickBreakerPlayerSetChangingNotify::Swap(BrickBreakerPlayerSetChangingNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrickBreakerPlayerSetChangingNotify::InternalSwap(BrickBreakerPlayerSetChangingNotify* other) {
  using std::swap;
  swap(is_changing_, other->is_changing_);
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrickBreakerPlayerSetChangingNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrickBreakerPlayerSetChangingNotify

// uint32 uid = 15;
void BrickBreakerPlayerSetChangingNotify::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 BrickBreakerPlayerSetChangingNotify::uid() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerSetChangingNotify.uid)
  return uid_;
}
void BrickBreakerPlayerSetChangingNotify::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerSetChangingNotify.uid)
}

// bool is_changing = 7;
void BrickBreakerPlayerSetChangingNotify::clear_is_changing() {
  is_changing_ = false;
}
bool BrickBreakerPlayerSetChangingNotify::is_changing() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerSetChangingNotify.is_changing)
  return is_changing_;
}
void BrickBreakerPlayerSetChangingNotify::set_is_changing(bool value) {
  
  is_changing_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerSetChangingNotify.is_changing)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoinCollectTeamAvatarInfo::kCostumeIdFieldNumber;
const int CoinCollectTeamAvatarInfo::kAvatarIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoinCollectTeamAvatarInfo::CoinCollectTeamAvatarInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CoinCollectTeamAvatarInfo)
}
CoinCollectTeamAvatarInfo::CoinCollectTeamAvatarInfo(const CoinCollectTeamAvatarInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&costume_id_, &from.costume_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&avatar_id_) -
    reinterpret_cast<char*>(&costume_id_)) + sizeof(avatar_id_));
  // @@protoc_insertion_point(copy_constructor:proto.CoinCollectTeamAvatarInfo)
}

void CoinCollectTeamAvatarInfo::SharedCtor() {
  ::memset(&costume_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatar_id_) -
      reinterpret_cast<char*>(&costume_id_)) + sizeof(avatar_id_));
  _cached_size_ = 0;
}

CoinCollectTeamAvatarInfo::~CoinCollectTeamAvatarInfo() {
  // @@protoc_insertion_point(destructor:proto.CoinCollectTeamAvatarInfo)
  SharedDtor();
}

void CoinCollectTeamAvatarInfo::SharedDtor() {
}

void CoinCollectTeamAvatarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoinCollectTeamAvatarInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CoinCollectTeamAvatarInfo& CoinCollectTeamAvatarInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

CoinCollectTeamAvatarInfo* CoinCollectTeamAvatarInfo::New(::google::protobuf::Arena* arena) const {
  CoinCollectTeamAvatarInfo* n = new CoinCollectTeamAvatarInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CoinCollectTeamAvatarInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CoinCollectTeamAvatarInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&costume_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatar_id_) -
      reinterpret_cast<char*>(&costume_id_)) + sizeof(avatar_id_));
  _internal_metadata_.Clear();
}

bool CoinCollectTeamAvatarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CoinCollectTeamAvatarInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 costume_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costume_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 avatar_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CoinCollectTeamAvatarInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CoinCollectTeamAvatarInfo)
  return false;
#undef DO_
}

void CoinCollectTeamAvatarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CoinCollectTeamAvatarInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 costume_id = 4;
  if (this->costume_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->costume_id(), output);
  }

  // uint32 avatar_id = 10;
  if (this->avatar_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->avatar_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CoinCollectTeamAvatarInfo)
}

::google::protobuf::uint8* CoinCollectTeamAvatarInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CoinCollectTeamAvatarInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 costume_id = 4;
  if (this->costume_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->costume_id(), target);
  }

  // uint32 avatar_id = 10;
  if (this->avatar_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->avatar_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CoinCollectTeamAvatarInfo)
  return target;
}

size_t CoinCollectTeamAvatarInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CoinCollectTeamAvatarInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 costume_id = 4;
  if (this->costume_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->costume_id());
  }

  // uint32 avatar_id = 10;
  if (this->avatar_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avatar_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoinCollectTeamAvatarInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CoinCollectTeamAvatarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CoinCollectTeamAvatarInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CoinCollectTeamAvatarInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CoinCollectTeamAvatarInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CoinCollectTeamAvatarInfo)
    MergeFrom(*source);
  }
}

void CoinCollectTeamAvatarInfo::MergeFrom(const CoinCollectTeamAvatarInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CoinCollectTeamAvatarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.costume_id() != 0) {
    set_costume_id(from.costume_id());
  }
  if (from.avatar_id() != 0) {
    set_avatar_id(from.avatar_id());
  }
}

void CoinCollectTeamAvatarInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CoinCollectTeamAvatarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoinCollectTeamAvatarInfo::CopyFrom(const CoinCollectTeamAvatarInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CoinCollectTeamAvatarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoinCollectTeamAvatarInfo::IsInitialized() const {
  return true;
}

void CoinCollectTeamAvatarInfo::Swap(CoinCollectTeamAvatarInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoinCollectTeamAvatarInfo::InternalSwap(CoinCollectTeamAvatarInfo* other) {
  using std::swap;
  swap(costume_id_, other->costume_id_);
  swap(avatar_id_, other->avatar_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CoinCollectTeamAvatarInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CoinCollectTeamAvatarInfo

// uint32 costume_id = 4;
void CoinCollectTeamAvatarInfo::clear_costume_id() {
  costume_id_ = 0u;
}
::google::protobuf::uint32 CoinCollectTeamAvatarInfo::costume_id() const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectTeamAvatarInfo.costume_id)
  return costume_id_;
}
void CoinCollectTeamAvatarInfo::set_costume_id(::google::protobuf::uint32 value) {
  
  costume_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CoinCollectTeamAvatarInfo.costume_id)
}

// uint32 avatar_id = 10;
void CoinCollectTeamAvatarInfo::clear_avatar_id() {
  avatar_id_ = 0u;
}
::google::protobuf::uint32 CoinCollectTeamAvatarInfo::avatar_id() const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectTeamAvatarInfo.avatar_id)
  return avatar_id_;
}
void CoinCollectTeamAvatarInfo::set_avatar_id(::google::protobuf::uint32 value) {
  
  avatar_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CoinCollectTeamAvatarInfo.avatar_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoinCollectPlayerInfo::kChooseSkillNoFieldNumber;
const int CoinCollectPlayerInfo::kPlayerUidFieldNumber;
const int CoinCollectPlayerInfo::kPlayerNameFieldNumber;
const int CoinCollectPlayerInfo::kIsPrepareFieldNumber;
const int CoinCollectPlayerInfo::kAvatarInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoinCollectPlayerInfo::CoinCollectPlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CoinCollectPlayerInfo)
}
CoinCollectPlayerInfo::CoinCollectPlayerInfo(const CoinCollectPlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      avatar_info_list_(from.avatar_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.player_name().size() > 0) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  ::memcpy(&is_prepare_, &from.is_prepare_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_uid_) -
    reinterpret_cast<char*>(&is_prepare_)) + sizeof(player_uid_));
  // @@protoc_insertion_point(copy_constructor:proto.CoinCollectPlayerInfo)
}

void CoinCollectPlayerInfo::SharedCtor() {
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_prepare_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_uid_) -
      reinterpret_cast<char*>(&is_prepare_)) + sizeof(player_uid_));
  _cached_size_ = 0;
}

CoinCollectPlayerInfo::~CoinCollectPlayerInfo() {
  // @@protoc_insertion_point(destructor:proto.CoinCollectPlayerInfo)
  SharedDtor();
}

void CoinCollectPlayerInfo::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CoinCollectPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoinCollectPlayerInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CoinCollectPlayerInfo& CoinCollectPlayerInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

CoinCollectPlayerInfo* CoinCollectPlayerInfo::New(::google::protobuf::Arena* arena) const {
  CoinCollectPlayerInfo* n = new CoinCollectPlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CoinCollectPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CoinCollectPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_info_list_.Clear();
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_prepare_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_uid_) -
      reinterpret_cast<char*>(&is_prepare_)) + sizeof(player_uid_));
  _internal_metadata_.Clear();
}

bool CoinCollectPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CoinCollectPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 choose_skill_no = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &choose_skill_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.CoinCollectTeamAvatarInfo avatar_info_list = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_avatar_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string player_name = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->player_name().data(), static_cast<int>(this->player_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.CoinCollectPlayerInfo.player_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 player_uid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_prepare = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_prepare_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CoinCollectPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CoinCollectPlayerInfo)
  return false;
#undef DO_
}

void CoinCollectPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CoinCollectPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 choose_skill_no = 5;
  if (this->choose_skill_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->choose_skill_no(), output);
  }

  // repeated .proto.CoinCollectTeamAvatarInfo avatar_info_list = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->avatar_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->avatar_info_list(static_cast<int>(i)), output);
  }

  // string player_name = 11;
  if (this->player_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.CoinCollectPlayerInfo.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->player_name(), output);
  }

  // uint32 player_uid = 12;
  if (this->player_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->player_uid(), output);
  }

  // bool is_prepare = 14;
  if (this->is_prepare() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_prepare(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CoinCollectPlayerInfo)
}

::google::protobuf::uint8* CoinCollectPlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CoinCollectPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 choose_skill_no = 5;
  if (this->choose_skill_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->choose_skill_no(), target);
  }

  // repeated .proto.CoinCollectTeamAvatarInfo avatar_info_list = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->avatar_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->avatar_info_list(static_cast<int>(i)), deterministic, target);
  }

  // string player_name = 11;
  if (this->player_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.CoinCollectPlayerInfo.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->player_name(), target);
  }

  // uint32 player_uid = 12;
  if (this->player_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->player_uid(), target);
  }

  // bool is_prepare = 14;
  if (this->is_prepare() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_prepare(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CoinCollectPlayerInfo)
  return target;
}

size_t CoinCollectPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CoinCollectPlayerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.CoinCollectTeamAvatarInfo avatar_info_list = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->avatar_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatar_info_list(static_cast<int>(i)));
    }
  }

  // string player_name = 11;
  if (this->player_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->player_name());
  }

  // bool is_prepare = 14;
  if (this->is_prepare() != 0) {
    total_size += 1 + 1;
  }

  // uint32 choose_skill_no = 5;
  if (this->choose_skill_no() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->choose_skill_no());
  }

  // uint32 player_uid = 12;
  if (this->player_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoinCollectPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CoinCollectPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CoinCollectPlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CoinCollectPlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CoinCollectPlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CoinCollectPlayerInfo)
    MergeFrom(*source);
  }
}

void CoinCollectPlayerInfo::MergeFrom(const CoinCollectPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CoinCollectPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatar_info_list_.MergeFrom(from.avatar_info_list_);
  if (from.player_name().size() > 0) {

    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  if (from.is_prepare() != 0) {
    set_is_prepare(from.is_prepare());
  }
  if (from.choose_skill_no() != 0) {
    set_choose_skill_no(from.choose_skill_no());
  }
  if (from.player_uid() != 0) {
    set_player_uid(from.player_uid());
  }
}

void CoinCollectPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CoinCollectPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoinCollectPlayerInfo::CopyFrom(const CoinCollectPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CoinCollectPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoinCollectPlayerInfo::IsInitialized() const {
  return true;
}

void CoinCollectPlayerInfo::Swap(CoinCollectPlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoinCollectPlayerInfo::InternalSwap(CoinCollectPlayerInfo* other) {
  using std::swap;
  avatar_info_list_.InternalSwap(&other->avatar_info_list_);
  player_name_.Swap(&other->player_name_);
  swap(is_prepare_, other->is_prepare_);
  swap(choose_skill_no_, other->choose_skill_no_);
  swap(player_uid_, other->player_uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CoinCollectPlayerInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CoinCollectPlayerInfo

// uint32 choose_skill_no = 5;
void CoinCollectPlayerInfo::clear_choose_skill_no() {
  choose_skill_no_ = 0u;
}
::google::protobuf::uint32 CoinCollectPlayerInfo::choose_skill_no() const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectPlayerInfo.choose_skill_no)
  return choose_skill_no_;
}
void CoinCollectPlayerInfo::set_choose_skill_no(::google::protobuf::uint32 value) {
  
  choose_skill_no_ = value;
  // @@protoc_insertion_point(field_set:proto.CoinCollectPlayerInfo.choose_skill_no)
}

// uint32 player_uid = 12;
void CoinCollectPlayerInfo::clear_player_uid() {
  player_uid_ = 0u;
}
::google::protobuf::uint32 CoinCollectPlayerInfo::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectPlayerInfo.player_uid)
  return player_uid_;
}
void CoinCollectPlayerInfo::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.CoinCollectPlayerInfo.player_uid)
}

// string player_name = 11;
void CoinCollectPlayerInfo::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CoinCollectPlayerInfo::player_name() const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectPlayerInfo.player_name)
  return player_name_.GetNoArena();
}
void CoinCollectPlayerInfo::set_player_name(const ::std::string& value) {
  
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.CoinCollectPlayerInfo.player_name)
}
#if LANG_CXX11
void CoinCollectPlayerInfo::set_player_name(::std::string&& value) {
  
  player_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.CoinCollectPlayerInfo.player_name)
}
#endif
void CoinCollectPlayerInfo::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.CoinCollectPlayerInfo.player_name)
}
void CoinCollectPlayerInfo::set_player_name(const char* value, size_t size) {
  
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.CoinCollectPlayerInfo.player_name)
}
::std::string* CoinCollectPlayerInfo::mutable_player_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.CoinCollectPlayerInfo.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CoinCollectPlayerInfo::release_player_name() {
  // @@protoc_insertion_point(field_release:proto.CoinCollectPlayerInfo.player_name)
  
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CoinCollectPlayerInfo::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    
  } else {
    
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:proto.CoinCollectPlayerInfo.player_name)
}

// bool is_prepare = 14;
void CoinCollectPlayerInfo::clear_is_prepare() {
  is_prepare_ = false;
}
bool CoinCollectPlayerInfo::is_prepare() const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectPlayerInfo.is_prepare)
  return is_prepare_;
}
void CoinCollectPlayerInfo::set_is_prepare(bool value) {
  
  is_prepare_ = value;
  // @@protoc_insertion_point(field_set:proto.CoinCollectPlayerInfo.is_prepare)
}

// repeated .proto.CoinCollectTeamAvatarInfo avatar_info_list = 10;
int CoinCollectPlayerInfo::avatar_info_list_size() const {
  return avatar_info_list_.size();
}
void CoinCollectPlayerInfo::clear_avatar_info_list() {
  avatar_info_list_.Clear();
}
const ::proto::CoinCollectTeamAvatarInfo& CoinCollectPlayerInfo::avatar_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectPlayerInfo.avatar_info_list)
  return avatar_info_list_.Get(index);
}
::proto::CoinCollectTeamAvatarInfo* CoinCollectPlayerInfo::mutable_avatar_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CoinCollectPlayerInfo.avatar_info_list)
  return avatar_info_list_.Mutable(index);
}
::proto::CoinCollectTeamAvatarInfo* CoinCollectPlayerInfo::add_avatar_info_list() {
  // @@protoc_insertion_point(field_add:proto.CoinCollectPlayerInfo.avatar_info_list)
  return avatar_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::CoinCollectTeamAvatarInfo >*
CoinCollectPlayerInfo::mutable_avatar_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.CoinCollectPlayerInfo.avatar_info_list)
  return &avatar_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::CoinCollectTeamAvatarInfo >&
CoinCollectPlayerInfo::avatar_info_list() const {
  // @@protoc_insertion_point(field_list:proto.CoinCollectPlayerInfo.avatar_info_list)
  return avatar_info_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoinCollectPrepareStageNotify::kCoinCollectInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoinCollectPrepareStageNotify::CoinCollectPrepareStageNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CoinCollectPrepareStageNotify)
}
CoinCollectPrepareStageNotify::CoinCollectPrepareStageNotify(const CoinCollectPrepareStageNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_coin_collect_info()) {
    coin_collect_info_ = new ::proto::CoinCollectStageInfo(*from.coin_collect_info_);
  } else {
    coin_collect_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.CoinCollectPrepareStageNotify)
}

void CoinCollectPrepareStageNotify::SharedCtor() {
  coin_collect_info_ = NULL;
  _cached_size_ = 0;
}

CoinCollectPrepareStageNotify::~CoinCollectPrepareStageNotify() {
  // @@protoc_insertion_point(destructor:proto.CoinCollectPrepareStageNotify)
  SharedDtor();
}

void CoinCollectPrepareStageNotify::SharedDtor() {
  if (this != internal_default_instance()) delete coin_collect_info_;
}

void CoinCollectPrepareStageNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoinCollectPrepareStageNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CoinCollectPrepareStageNotify& CoinCollectPrepareStageNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

CoinCollectPrepareStageNotify* CoinCollectPrepareStageNotify::New(::google::protobuf::Arena* arena) const {
  CoinCollectPrepareStageNotify* n = new CoinCollectPrepareStageNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CoinCollectPrepareStageNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CoinCollectPrepareStageNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && coin_collect_info_ != NULL) {
    delete coin_collect_info_;
  }
  coin_collect_info_ = NULL;
  _internal_metadata_.Clear();
}

bool CoinCollectPrepareStageNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CoinCollectPrepareStageNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.CoinCollectStageInfo coin_collect_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coin_collect_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CoinCollectPrepareStageNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CoinCollectPrepareStageNotify)
  return false;
#undef DO_
}

void CoinCollectPrepareStageNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CoinCollectPrepareStageNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.CoinCollectStageInfo coin_collect_info = 3;
  if (this->has_coin_collect_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->coin_collect_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CoinCollectPrepareStageNotify)
}

::google::protobuf::uint8* CoinCollectPrepareStageNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CoinCollectPrepareStageNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.CoinCollectStageInfo coin_collect_info = 3;
  if (this->has_coin_collect_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->coin_collect_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CoinCollectPrepareStageNotify)
  return target;
}

size_t CoinCollectPrepareStageNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CoinCollectPrepareStageNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.CoinCollectStageInfo coin_collect_info = 3;
  if (this->has_coin_collect_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->coin_collect_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoinCollectPrepareStageNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CoinCollectPrepareStageNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const CoinCollectPrepareStageNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CoinCollectPrepareStageNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CoinCollectPrepareStageNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CoinCollectPrepareStageNotify)
    MergeFrom(*source);
  }
}

void CoinCollectPrepareStageNotify::MergeFrom(const CoinCollectPrepareStageNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CoinCollectPrepareStageNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_coin_collect_info()) {
    mutable_coin_collect_info()->::proto::CoinCollectStageInfo::MergeFrom(from.coin_collect_info());
  }
}

void CoinCollectPrepareStageNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CoinCollectPrepareStageNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoinCollectPrepareStageNotify::CopyFrom(const CoinCollectPrepareStageNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CoinCollectPrepareStageNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoinCollectPrepareStageNotify::IsInitialized() const {
  return true;
}

void CoinCollectPrepareStageNotify::Swap(CoinCollectPrepareStageNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoinCollectPrepareStageNotify::InternalSwap(CoinCollectPrepareStageNotify* other) {
  using std::swap;
  swap(coin_collect_info_, other->coin_collect_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CoinCollectPrepareStageNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CoinCollectPrepareStageNotify

// .proto.CoinCollectStageInfo coin_collect_info = 3;
bool CoinCollectPrepareStageNotify::has_coin_collect_info() const {
  return this != internal_default_instance() && coin_collect_info_ != NULL;
}
void CoinCollectPrepareStageNotify::clear_coin_collect_info() {
  if (GetArenaNoVirtual() == NULL && coin_collect_info_ != NULL) delete coin_collect_info_;
  coin_collect_info_ = NULL;
}
const ::proto::CoinCollectStageInfo& CoinCollectPrepareStageNotify::coin_collect_info() const {
  const ::proto::CoinCollectStageInfo* p = coin_collect_info_;
  // @@protoc_insertion_point(field_get:proto.CoinCollectPrepareStageNotify.coin_collect_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::CoinCollectStageInfo*>(
      &::proto::_CoinCollectStageInfo_default_instance_);
}
::proto::CoinCollectStageInfo* CoinCollectPrepareStageNotify::mutable_coin_collect_info() {
  
  if (coin_collect_info_ == NULL) {
    coin_collect_info_ = new ::proto::CoinCollectStageInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.CoinCollectPrepareStageNotify.coin_collect_info)
  return coin_collect_info_;
}
::proto::CoinCollectStageInfo* CoinCollectPrepareStageNotify::release_coin_collect_info() {
  // @@protoc_insertion_point(field_release:proto.CoinCollectPrepareStageNotify.coin_collect_info)
  
  ::proto::CoinCollectStageInfo* temp = coin_collect_info_;
  coin_collect_info_ = NULL;
  return temp;
}
void CoinCollectPrepareStageNotify::set_allocated_coin_collect_info(::proto::CoinCollectStageInfo* coin_collect_info) {
  delete coin_collect_info_;
  coin_collect_info_ = coin_collect_info;
  if (coin_collect_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CoinCollectPrepareStageNotify.coin_collect_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LanV3BoatSettleInfo::kUidFieldNumber;
const int LanV3BoatSettleInfo::kOnlineIdFieldNumber;
const int LanV3BoatSettleInfo::kHeadImageFieldNumber;
const int LanV3BoatSettleInfo::kNicknameFieldNumber;
const int LanV3BoatSettleInfo::kProfilePictureFieldNumber;
const int LanV3BoatSettleInfo::kCardListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LanV3BoatSettleInfo::LanV3BoatSettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.LanV3BoatSettleInfo)
}
LanV3BoatSettleInfo::LanV3BoatSettleInfo(const LanV3BoatSettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      card_list_(from.card_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.online_id().size() > 0) {
    online_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.online_id_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nickname().size() > 0) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.has_profile_picture()) {
    profile_picture_ = new ::proto::ProfilePicture(*from.profile_picture_);
  } else {
    profile_picture_ = NULL;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&head_image_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(head_image_));
  // @@protoc_insertion_point(copy_constructor:proto.LanV3BoatSettleInfo)
}

void LanV3BoatSettleInfo::SharedCtor() {
  online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&profile_picture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&head_image_) -
      reinterpret_cast<char*>(&profile_picture_)) + sizeof(head_image_));
  _cached_size_ = 0;
}

LanV3BoatSettleInfo::~LanV3BoatSettleInfo() {
  // @@protoc_insertion_point(destructor:proto.LanV3BoatSettleInfo)
  SharedDtor();
}

void LanV3BoatSettleInfo::SharedDtor() {
  online_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete profile_picture_;
}

void LanV3BoatSettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LanV3BoatSettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LanV3BoatSettleInfo& LanV3BoatSettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

LanV3BoatSettleInfo* LanV3BoatSettleInfo::New(::google::protobuf::Arena* arena) const {
  LanV3BoatSettleInfo* n = new LanV3BoatSettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LanV3BoatSettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.LanV3BoatSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_list_.Clear();
  online_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && profile_picture_ != NULL) {
    delete profile_picture_;
  }
  profile_picture_ = NULL;
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&head_image_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(head_image_));
  _internal_metadata_.Clear();
}

bool LanV3BoatSettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.LanV3BoatSettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.ExhibitionDisplayInfo card_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 head_image = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ProfilePicture profile_picture = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profile_picture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string online_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_online_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->online_id().data(), static_cast<int>(this->online_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.LanV3BoatSettleInfo.online_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nickname = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nickname().data(), static_cast<int>(this->nickname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.LanV3BoatSettleInfo.nickname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.LanV3BoatSettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.LanV3BoatSettleInfo)
  return false;
#undef DO_
}

void LanV3BoatSettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.LanV3BoatSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ExhibitionDisplayInfo card_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->card_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->card_list(static_cast<int>(i)), output);
  }

  // uint32 uid = 8;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->uid(), output);
  }

  // uint32 head_image = 10;
  if (this->head_image() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->head_image(), output);
  }

  // .proto.ProfilePicture profile_picture = 12;
  if (this->has_profile_picture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->profile_picture_, output);
  }

  // string online_id = 13;
  if (this->online_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->online_id().data(), static_cast<int>(this->online_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.LanV3BoatSettleInfo.online_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->online_id(), output);
  }

  // string nickname = 14;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.LanV3BoatSettleInfo.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->nickname(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.LanV3BoatSettleInfo)
}

::google::protobuf::uint8* LanV3BoatSettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.LanV3BoatSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ExhibitionDisplayInfo card_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->card_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->card_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 uid = 8;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->uid(), target);
  }

  // uint32 head_image = 10;
  if (this->head_image() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->head_image(), target);
  }

  // .proto.ProfilePicture profile_picture = 12;
  if (this->has_profile_picture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->profile_picture_, deterministic, target);
  }

  // string online_id = 13;
  if (this->online_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->online_id().data(), static_cast<int>(this->online_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.LanV3BoatSettleInfo.online_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->online_id(), target);
  }

  // string nickname = 14;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.LanV3BoatSettleInfo.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->nickname(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.LanV3BoatSettleInfo)
  return target;
}

size_t LanV3BoatSettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.LanV3BoatSettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ExhibitionDisplayInfo card_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->card_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card_list(static_cast<int>(i)));
    }
  }

  // string online_id = 13;
  if (this->online_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->online_id());
  }

  // string nickname = 14;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  // .proto.ProfilePicture profile_picture = 12;
  if (this->has_profile_picture()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->profile_picture_);
  }

  // uint32 uid = 8;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // uint32 head_image = 10;
  if (this->head_image() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->head_image());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LanV3BoatSettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.LanV3BoatSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LanV3BoatSettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LanV3BoatSettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.LanV3BoatSettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.LanV3BoatSettleInfo)
    MergeFrom(*source);
  }
}

void LanV3BoatSettleInfo::MergeFrom(const LanV3BoatSettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.LanV3BoatSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_list_.MergeFrom(from.card_list_);
  if (from.online_id().size() > 0) {

    online_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.online_id_);
  }
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.has_profile_picture()) {
    mutable_profile_picture()->::proto::ProfilePicture::MergeFrom(from.profile_picture());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.head_image() != 0) {
    set_head_image(from.head_image());
  }
}

void LanV3BoatSettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.LanV3BoatSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LanV3BoatSettleInfo::CopyFrom(const LanV3BoatSettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.LanV3BoatSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanV3BoatSettleInfo::IsInitialized() const {
  return true;
}

void LanV3BoatSettleInfo::Swap(LanV3BoatSettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LanV3BoatSettleInfo::InternalSwap(LanV3BoatSettleInfo* other) {
  using std::swap;
  card_list_.InternalSwap(&other->card_list_);
  online_id_.Swap(&other->online_id_);
  nickname_.Swap(&other->nickname_);
  swap(profile_picture_, other->profile_picture_);
  swap(uid_, other->uid_);
  swap(head_image_, other->head_image_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LanV3BoatSettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LanV3BoatSettleInfo

// uint32 uid = 8;
void LanV3BoatSettleInfo::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 LanV3BoatSettleInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleInfo.uid)
  return uid_;
}
void LanV3BoatSettleInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.LanV3BoatSettleInfo.uid)
}

// string online_id = 13;
void LanV3BoatSettleInfo::clear_online_id() {
  online_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LanV3BoatSettleInfo::online_id() const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleInfo.online_id)
  return online_id_.GetNoArena();
}
void LanV3BoatSettleInfo::set_online_id(const ::std::string& value) {
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.LanV3BoatSettleInfo.online_id)
}
#if LANG_CXX11
void LanV3BoatSettleInfo::set_online_id(::std::string&& value) {
  
  online_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.LanV3BoatSettleInfo.online_id)
}
#endif
void LanV3BoatSettleInfo::set_online_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.LanV3BoatSettleInfo.online_id)
}
void LanV3BoatSettleInfo::set_online_id(const char* value, size_t size) {
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.LanV3BoatSettleInfo.online_id)
}
::std::string* LanV3BoatSettleInfo::mutable_online_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.LanV3BoatSettleInfo.online_id)
  return online_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LanV3BoatSettleInfo::release_online_id() {
  // @@protoc_insertion_point(field_release:proto.LanV3BoatSettleInfo.online_id)
  
  return online_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LanV3BoatSettleInfo::set_allocated_online_id(::std::string* online_id) {
  if (online_id != NULL) {
    
  } else {
    
  }
  online_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), online_id);
  // @@protoc_insertion_point(field_set_allocated:proto.LanV3BoatSettleInfo.online_id)
}

// uint32 head_image = 10;
void LanV3BoatSettleInfo::clear_head_image() {
  head_image_ = 0u;
}
::google::protobuf::uint32 LanV3BoatSettleInfo::head_image() const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleInfo.head_image)
  return head_image_;
}
void LanV3BoatSettleInfo::set_head_image(::google::protobuf::uint32 value) {
  
  head_image_ = value;
  // @@protoc_insertion_point(field_set:proto.LanV3BoatSettleInfo.head_image)
}

// string nickname = 14;
void LanV3BoatSettleInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LanV3BoatSettleInfo::nickname() const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleInfo.nickname)
  return nickname_.GetNoArena();
}
void LanV3BoatSettleInfo::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.LanV3BoatSettleInfo.nickname)
}
#if LANG_CXX11
void LanV3BoatSettleInfo::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.LanV3BoatSettleInfo.nickname)
}
#endif
void LanV3BoatSettleInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.LanV3BoatSettleInfo.nickname)
}
void LanV3BoatSettleInfo::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.LanV3BoatSettleInfo.nickname)
}
::std::string* LanV3BoatSettleInfo::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:proto.LanV3BoatSettleInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LanV3BoatSettleInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:proto.LanV3BoatSettleInfo.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LanV3BoatSettleInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.LanV3BoatSettleInfo.nickname)
}

// .proto.ProfilePicture profile_picture = 12;
bool LanV3BoatSettleInfo::has_profile_picture() const {
  return this != internal_default_instance() && profile_picture_ != NULL;
}
void LanV3BoatSettleInfo::clear_profile_picture() {
  if (GetArenaNoVirtual() == NULL && profile_picture_ != NULL) delete profile_picture_;
  profile_picture_ = NULL;
}
const ::proto::ProfilePicture& LanV3BoatSettleInfo::profile_picture() const {
  const ::proto::ProfilePicture* p = profile_picture_;
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleInfo.profile_picture)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ProfilePicture*>(
      &::proto::_ProfilePicture_default_instance_);
}
::proto::ProfilePicture* LanV3BoatSettleInfo::mutable_profile_picture() {
  
  if (profile_picture_ == NULL) {
    profile_picture_ = new ::proto::ProfilePicture;
  }
  // @@protoc_insertion_point(field_mutable:proto.LanV3BoatSettleInfo.profile_picture)
  return profile_picture_;
}
::proto::ProfilePicture* LanV3BoatSettleInfo::release_profile_picture() {
  // @@protoc_insertion_point(field_release:proto.LanV3BoatSettleInfo.profile_picture)
  
  ::proto::ProfilePicture* temp = profile_picture_;
  profile_picture_ = NULL;
  return temp;
}
void LanV3BoatSettleInfo::set_allocated_profile_picture(::proto::ProfilePicture* profile_picture) {
  delete profile_picture_;
  profile_picture_ = profile_picture;
  if (profile_picture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.LanV3BoatSettleInfo.profile_picture)
}

// repeated .proto.ExhibitionDisplayInfo card_list = 1;
int LanV3BoatSettleInfo::card_list_size() const {
  return card_list_.size();
}
void LanV3BoatSettleInfo::clear_card_list() {
  card_list_.Clear();
}
const ::proto::ExhibitionDisplayInfo& LanV3BoatSettleInfo::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleInfo.card_list)
  return card_list_.Get(index);
}
::proto::ExhibitionDisplayInfo* LanV3BoatSettleInfo::mutable_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.LanV3BoatSettleInfo.card_list)
  return card_list_.Mutable(index);
}
::proto::ExhibitionDisplayInfo* LanV3BoatSettleInfo::add_card_list() {
  // @@protoc_insertion_point(field_add:proto.LanV3BoatSettleInfo.card_list)
  return card_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >*
LanV3BoatSettleInfo::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.LanV3BoatSettleInfo.card_list)
  return &card_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >&
LanV3BoatSettleInfo::card_list() const {
  // @@protoc_insertion_point(field_list:proto.LanV3BoatSettleInfo.card_list)
  return card_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LanV3BoatSettleNotify::kIsGallerySuccFieldNumber;
const int LanV3BoatSettleNotify::kWinnerUidListFieldNumber;
const int LanV3BoatSettleNotify::kIsSingleFieldNumber;
const int LanV3BoatSettleNotify::kStageTypeFieldNumber;
const int LanV3BoatSettleNotify::kScoreListFieldNumber;
const int LanV3BoatSettleNotify::kSettleInfoListFieldNumber;
const int LanV3BoatSettleNotify::kPlayIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LanV3BoatSettleNotify::LanV3BoatSettleNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.LanV3BoatSettleNotify)
}
LanV3BoatSettleNotify::LanV3BoatSettleNotify(const LanV3BoatSettleNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      score_list_(from.score_list_),
      winner_uid_list_(from.winner_uid_list_),
      settle_info_list_(from.settle_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&play_index_, &from.play_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&stage_type_) -
    reinterpret_cast<char*>(&play_index_)) + sizeof(stage_type_));
  // @@protoc_insertion_point(copy_constructor:proto.LanV3BoatSettleNotify)
}

void LanV3BoatSettleNotify::SharedCtor() {
  ::memset(&play_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stage_type_) -
      reinterpret_cast<char*>(&play_index_)) + sizeof(stage_type_));
  _cached_size_ = 0;
}

LanV3BoatSettleNotify::~LanV3BoatSettleNotify() {
  // @@protoc_insertion_point(destructor:proto.LanV3BoatSettleNotify)
  SharedDtor();
}

void LanV3BoatSettleNotify::SharedDtor() {
}

void LanV3BoatSettleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LanV3BoatSettleNotify::descriptor() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LanV3BoatSettleNotify& LanV3BoatSettleNotify::default_instance() {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

LanV3BoatSettleNotify* LanV3BoatSettleNotify::New(::google::protobuf::Arena* arena) const {
  LanV3BoatSettleNotify* n = new LanV3BoatSettleNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LanV3BoatSettleNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.LanV3BoatSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  score_list_.Clear();
  winner_uid_list_.Clear();
  settle_info_list_.Clear();
  ::memset(&play_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stage_type_) -
      reinterpret_cast<char*>(&play_index_)) + sizeof(stage_type_));
  _internal_metadata_.Clear();
}

bool LanV3BoatSettleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.LanV3BoatSettleNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.ExhibitionDisplayInfo score_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_score_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 winner_uid_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_winner_uid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_winner_uid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_single = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_single_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_gallery_succ = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gallery_succ_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 stage_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.LanV3BoatSettleInfo settle_info_list = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_settle_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.LanV3BoatSettleNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.LanV3BoatSettleNotify)
  return false;
#undef DO_
}

void LanV3BoatSettleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.LanV3BoatSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ExhibitionDisplayInfo score_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->score_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->score_list(static_cast<int>(i)), output);
  }

  // repeated uint32 winner_uid_list = 2;
  if (this->winner_uid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _winner_uid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->winner_uid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->winner_uid_list(i), output);
  }

  // uint32 play_index = 4;
  if (this->play_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->play_index(), output);
  }

  // bool is_single = 8;
  if (this->is_single() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_single(), output);
  }

  // bool is_gallery_succ = 10;
  if (this->is_gallery_succ() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_gallery_succ(), output);
  }

  // uint32 stage_type = 12;
  if (this->stage_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->stage_type(), output);
  }

  // repeated .proto.LanV3BoatSettleInfo settle_info_list = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settle_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->settle_info_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.LanV3BoatSettleNotify)
}

::google::protobuf::uint8* LanV3BoatSettleNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.LanV3BoatSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ExhibitionDisplayInfo score_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->score_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->score_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 winner_uid_list = 2;
  if (this->winner_uid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _winner_uid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->winner_uid_list_, target);
  }

  // uint32 play_index = 4;
  if (this->play_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->play_index(), target);
  }

  // bool is_single = 8;
  if (this->is_single() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_single(), target);
  }

  // bool is_gallery_succ = 10;
  if (this->is_gallery_succ() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_gallery_succ(), target);
  }

  // uint32 stage_type = 12;
  if (this->stage_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->stage_type(), target);
  }

  // repeated .proto.LanV3BoatSettleInfo settle_info_list = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settle_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->settle_info_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.LanV3BoatSettleNotify)
  return target;
}

size_t LanV3BoatSettleNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.LanV3BoatSettleNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ExhibitionDisplayInfo score_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->score_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->score_list(static_cast<int>(i)));
    }
  }

  // repeated uint32 winner_uid_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->winner_uid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _winner_uid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto.LanV3BoatSettleInfo settle_info_list = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->settle_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settle_info_list(static_cast<int>(i)));
    }
  }

  // uint32 play_index = 4;
  if (this->play_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_index());
  }

  // bool is_gallery_succ = 10;
  if (this->is_gallery_succ() != 0) {
    total_size += 1 + 1;
  }

  // bool is_single = 8;
  if (this->is_single() != 0) {
    total_size += 1 + 1;
  }

  // uint32 stage_type = 12;
  if (this->stage_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stage_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LanV3BoatSettleNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.LanV3BoatSettleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const LanV3BoatSettleNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LanV3BoatSettleNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.LanV3BoatSettleNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.LanV3BoatSettleNotify)
    MergeFrom(*source);
  }
}

void LanV3BoatSettleNotify::MergeFrom(const LanV3BoatSettleNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.LanV3BoatSettleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  score_list_.MergeFrom(from.score_list_);
  winner_uid_list_.MergeFrom(from.winner_uid_list_);
  settle_info_list_.MergeFrom(from.settle_info_list_);
  if (from.play_index() != 0) {
    set_play_index(from.play_index());
  }
  if (from.is_gallery_succ() != 0) {
    set_is_gallery_succ(from.is_gallery_succ());
  }
  if (from.is_single() != 0) {
    set_is_single(from.is_single());
  }
  if (from.stage_type() != 0) {
    set_stage_type(from.stage_type());
  }
}

void LanV3BoatSettleNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.LanV3BoatSettleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LanV3BoatSettleNotify::CopyFrom(const LanV3BoatSettleNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.LanV3BoatSettleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanV3BoatSettleNotify::IsInitialized() const {
  return true;
}

void LanV3BoatSettleNotify::Swap(LanV3BoatSettleNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LanV3BoatSettleNotify::InternalSwap(LanV3BoatSettleNotify* other) {
  using std::swap;
  score_list_.InternalSwap(&other->score_list_);
  winner_uid_list_.InternalSwap(&other->winner_uid_list_);
  settle_info_list_.InternalSwap(&other->settle_info_list_);
  swap(play_index_, other->play_index_);
  swap(is_gallery_succ_, other->is_gallery_succ_);
  swap(is_single_, other->is_single_);
  swap(stage_type_, other->stage_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LanV3BoatSettleNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LanV3BoatSettleNotify

// bool is_gallery_succ = 10;
void LanV3BoatSettleNotify::clear_is_gallery_succ() {
  is_gallery_succ_ = false;
}
bool LanV3BoatSettleNotify::is_gallery_succ() const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleNotify.is_gallery_succ)
  return is_gallery_succ_;
}
void LanV3BoatSettleNotify::set_is_gallery_succ(bool value) {
  
  is_gallery_succ_ = value;
  // @@protoc_insertion_point(field_set:proto.LanV3BoatSettleNotify.is_gallery_succ)
}

// repeated uint32 winner_uid_list = 2;
int LanV3BoatSettleNotify::winner_uid_list_size() const {
  return winner_uid_list_.size();
}
void LanV3BoatSettleNotify::clear_winner_uid_list() {
  winner_uid_list_.Clear();
}
::google::protobuf::uint32 LanV3BoatSettleNotify::winner_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleNotify.winner_uid_list)
  return winner_uid_list_.Get(index);
}
void LanV3BoatSettleNotify::set_winner_uid_list(int index, ::google::protobuf::uint32 value) {
  winner_uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.LanV3BoatSettleNotify.winner_uid_list)
}
void LanV3BoatSettleNotify::add_winner_uid_list(::google::protobuf::uint32 value) {
  winner_uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.LanV3BoatSettleNotify.winner_uid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LanV3BoatSettleNotify::winner_uid_list() const {
  // @@protoc_insertion_point(field_list:proto.LanV3BoatSettleNotify.winner_uid_list)
  return winner_uid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LanV3BoatSettleNotify::mutable_winner_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.LanV3BoatSettleNotify.winner_uid_list)
  return &winner_uid_list_;
}

// bool is_single = 8;
void LanV3BoatSettleNotify::clear_is_single() {
  is_single_ = false;
}
bool LanV3BoatSettleNotify::is_single() const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleNotify.is_single)
  return is_single_;
}
void LanV3BoatSettleNotify::set_is_single(bool value) {
  
  is_single_ = value;
  // @@protoc_insertion_point(field_set:proto.LanV3BoatSettleNotify.is_single)
}

// uint32 stage_type = 12;
void LanV3BoatSettleNotify::clear_stage_type() {
  stage_type_ = 0u;
}
::google::protobuf::uint32 LanV3BoatSettleNotify::stage_type() const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleNotify.stage_type)
  return stage_type_;
}
void LanV3BoatSettleNotify::set_stage_type(::google::protobuf::uint32 value) {
  
  stage_type_ = value;
  // @@protoc_insertion_point(field_set:proto.LanV3BoatSettleNotify.stage_type)
}

// repeated .proto.ExhibitionDisplayInfo score_list = 1;
int LanV3BoatSettleNotify::score_list_size() const {
  return score_list_.size();
}
void LanV3BoatSettleNotify::clear_score_list() {
  score_list_.Clear();
}
const ::proto::ExhibitionDisplayInfo& LanV3BoatSettleNotify::score_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleNotify.score_list)
  return score_list_.Get(index);
}
::proto::ExhibitionDisplayInfo* LanV3BoatSettleNotify::mutable_score_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.LanV3BoatSettleNotify.score_list)
  return score_list_.Mutable(index);
}
::proto::ExhibitionDisplayInfo* LanV3BoatSettleNotify::add_score_list() {
  // @@protoc_insertion_point(field_add:proto.LanV3BoatSettleNotify.score_list)
  return score_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >*
LanV3BoatSettleNotify::mutable_score_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.LanV3BoatSettleNotify.score_list)
  return &score_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >&
LanV3BoatSettleNotify::score_list() const {
  // @@protoc_insertion_point(field_list:proto.LanV3BoatSettleNotify.score_list)
  return score_list_;
}

// repeated .proto.LanV3BoatSettleInfo settle_info_list = 13;
int LanV3BoatSettleNotify::settle_info_list_size() const {
  return settle_info_list_.size();
}
void LanV3BoatSettleNotify::clear_settle_info_list() {
  settle_info_list_.Clear();
}
const ::proto::LanV3BoatSettleInfo& LanV3BoatSettleNotify::settle_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleNotify.settle_info_list)
  return settle_info_list_.Get(index);
}
::proto::LanV3BoatSettleInfo* LanV3BoatSettleNotify::mutable_settle_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.LanV3BoatSettleNotify.settle_info_list)
  return settle_info_list_.Mutable(index);
}
::proto::LanV3BoatSettleInfo* LanV3BoatSettleNotify::add_settle_info_list() {
  // @@protoc_insertion_point(field_add:proto.LanV3BoatSettleNotify.settle_info_list)
  return settle_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::LanV3BoatSettleInfo >*
LanV3BoatSettleNotify::mutable_settle_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.LanV3BoatSettleNotify.settle_info_list)
  return &settle_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::LanV3BoatSettleInfo >&
LanV3BoatSettleNotify::settle_info_list() const {
  // @@protoc_insertion_point(field_list:proto.LanV3BoatSettleNotify.settle_info_list)
  return settle_info_list_;
}

// uint32 play_index = 4;
void LanV3BoatSettleNotify::clear_play_index() {
  play_index_ = 0u;
}
::google::protobuf::uint32 LanV3BoatSettleNotify::play_index() const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleNotify.play_index)
  return play_index_;
}
void LanV3BoatSettleNotify::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.LanV3BoatSettleNotify.play_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
