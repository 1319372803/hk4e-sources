// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_achievement.proto

#ifndef PROTOBUF_cmd_2fcmd_5fachievement_2eproto__INCLUDED
#define PROTOBUF_cmd_2fcmd_5fachievement_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "define.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
class Achievement;
class AchievementDefaultTypeInternal;
extern AchievementDefaultTypeInternal _Achievement_default_instance_;
class AchievementAllDataNotify;
class AchievementAllDataNotifyDefaultTypeInternal;
extern AchievementAllDataNotifyDefaultTypeInternal _AchievementAllDataNotify_default_instance_;
class AchievementUpdateNotify;
class AchievementUpdateNotifyDefaultTypeInternal;
extern AchievementUpdateNotifyDefaultTypeInternal _AchievementUpdateNotify_default_instance_;
class TakeAchievementGoalRewardReq;
class TakeAchievementGoalRewardReqDefaultTypeInternal;
extern TakeAchievementGoalRewardReqDefaultTypeInternal _TakeAchievementGoalRewardReq_default_instance_;
class TakeAchievementGoalRewardRsp;
class TakeAchievementGoalRewardRspDefaultTypeInternal;
extern TakeAchievementGoalRewardRspDefaultTypeInternal _TakeAchievementGoalRewardRsp_default_instance_;
class TakeAchievementRewardReq;
class TakeAchievementRewardReqDefaultTypeInternal;
extern TakeAchievementRewardReqDefaultTypeInternal _TakeAchievementRewardReq_default_instance_;
class TakeAchievementRewardRsp;
class TakeAchievementRewardRspDefaultTypeInternal;
extern TakeAchievementRewardRspDefaultTypeInternal _TakeAchievementRewardRsp_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_cmd_2fcmd_5fachievement_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cmd_2fcmd_5fachievement_2eproto

enum Achievement_Status {
  Achievement_Status_INVALID = 0,
  Achievement_Status_UNFINISHED = 1,
  Achievement_Status_FINISHED = 2,
  Achievement_Status_REWARD_TAKEN = 3,
  Achievement_Status_Achievement_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Achievement_Status_Achievement_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Achievement_Status_IsValid(int value);
const Achievement_Status Achievement_Status_Status_MIN = Achievement_Status_INVALID;
const Achievement_Status Achievement_Status_Status_MAX = Achievement_Status_REWARD_TAKEN;
const int Achievement_Status_Status_ARRAYSIZE = Achievement_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Achievement_Status_descriptor();
inline const ::std::string& Achievement_Status_Name(Achievement_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Achievement_Status_descriptor(), value);
}
inline bool Achievement_Status_Parse(
    const ::std::string& name, Achievement_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Achievement_Status>(
    Achievement_Status_descriptor(), name, value);
}
// ===================================================================

class Achievement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Achievement) */ {
 public:
  Achievement();
  virtual ~Achievement();

  Achievement(const Achievement& from);

  inline Achievement& operator=(const Achievement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Achievement(Achievement&& from) noexcept
    : Achievement() {
    *this = ::std::move(from);
  }

  inline Achievement& operator=(Achievement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Achievement& default_instance();

  static inline const Achievement* internal_default_instance() {
    return reinterpret_cast<const Achievement*>(
               &_Achievement_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Achievement* other);
  friend void swap(Achievement& a, Achievement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Achievement* New() const PROTOBUF_FINAL { return New(NULL); }

  Achievement* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Achievement& from);
  void MergeFrom(const Achievement& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Achievement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Achievement_Status Status;
  static const Status INVALID =
    Achievement_Status_INVALID;
  static const Status UNFINISHED =
    Achievement_Status_UNFINISHED;
  static const Status FINISHED =
    Achievement_Status_FINISHED;
  static const Status REWARD_TAKEN =
    Achievement_Status_REWARD_TAKEN;
  static inline bool Status_IsValid(int value) {
    return Achievement_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Achievement_Status_Status_MIN;
  static const Status Status_MAX =
    Achievement_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Achievement_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Achievement_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Achievement_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Achievement_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 id = 14;
  void clear_id();
  static const int kIdFieldNumber = 14;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 total_progress = 8;
  void clear_total_progress();
  static const int kTotalProgressFieldNumber = 8;
  ::google::protobuf::uint32 total_progress() const;
  void set_total_progress(::google::protobuf::uint32 value);

  // uint32 finish_timestamp = 11;
  void clear_finish_timestamp();
  static const int kFinishTimestampFieldNumber = 11;
  ::google::protobuf::uint32 finish_timestamp() const;
  void set_finish_timestamp(::google::protobuf::uint32 value);

  // uint32 cur_progress = 12;
  void clear_cur_progress();
  static const int kCurProgressFieldNumber = 12;
  ::google::protobuf::uint32 cur_progress() const;
  void set_cur_progress(::google::protobuf::uint32 value);

  // .proto.Achievement.Status status = 13;
  void clear_status();
  static const int kStatusFieldNumber = 13;
  ::proto::Achievement_Status status() const;
  void set_status(::proto::Achievement_Status value);

  // @@protoc_insertion_point(class_scope:proto.Achievement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 total_progress_;
  ::google::protobuf::uint32 finish_timestamp_;
  ::google::protobuf::uint32 cur_progress_;
  int status_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fachievement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AchievementAllDataNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.AchievementAllDataNotify) */ {
 public:
  AchievementAllDataNotify();
  virtual ~AchievementAllDataNotify();

  AchievementAllDataNotify(const AchievementAllDataNotify& from);

  inline AchievementAllDataNotify& operator=(const AchievementAllDataNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AchievementAllDataNotify(AchievementAllDataNotify&& from) noexcept
    : AchievementAllDataNotify() {
    *this = ::std::move(from);
  }

  inline AchievementAllDataNotify& operator=(AchievementAllDataNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AchievementAllDataNotify& default_instance();

  static inline const AchievementAllDataNotify* internal_default_instance() {
    return reinterpret_cast<const AchievementAllDataNotify*>(
               &_AchievementAllDataNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(AchievementAllDataNotify* other);
  friend void swap(AchievementAllDataNotify& a, AchievementAllDataNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AchievementAllDataNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  AchievementAllDataNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AchievementAllDataNotify& from);
  void MergeFrom(const AchievementAllDataNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AchievementAllDataNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 reward_taken_goal_id_list = 2;
  int reward_taken_goal_id_list_size() const;
  void clear_reward_taken_goal_id_list();
  static const int kRewardTakenGoalIdListFieldNumber = 2;
  ::google::protobuf::uint32 reward_taken_goal_id_list(int index) const;
  void set_reward_taken_goal_id_list(int index, ::google::protobuf::uint32 value);
  void add_reward_taken_goal_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      reward_taken_goal_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_reward_taken_goal_id_list();

  // repeated .proto.Achievement achievement_list = 4;
  int achievement_list_size() const;
  void clear_achievement_list();
  static const int kAchievementListFieldNumber = 4;
  const ::proto::Achievement& achievement_list(int index) const;
  ::proto::Achievement* mutable_achievement_list(int index);
  ::proto::Achievement* add_achievement_list();
  ::google::protobuf::RepeatedPtrField< ::proto::Achievement >*
      mutable_achievement_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::Achievement >&
      achievement_list() const;

  // @@protoc_insertion_point(class_scope:proto.AchievementAllDataNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > reward_taken_goal_id_list_;
  mutable int _reward_taken_goal_id_list_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::Achievement > achievement_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fachievement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AchievementUpdateNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.AchievementUpdateNotify) */ {
 public:
  AchievementUpdateNotify();
  virtual ~AchievementUpdateNotify();

  AchievementUpdateNotify(const AchievementUpdateNotify& from);

  inline AchievementUpdateNotify& operator=(const AchievementUpdateNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AchievementUpdateNotify(AchievementUpdateNotify&& from) noexcept
    : AchievementUpdateNotify() {
    *this = ::std::move(from);
  }

  inline AchievementUpdateNotify& operator=(AchievementUpdateNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AchievementUpdateNotify& default_instance();

  static inline const AchievementUpdateNotify* internal_default_instance() {
    return reinterpret_cast<const AchievementUpdateNotify*>(
               &_AchievementUpdateNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(AchievementUpdateNotify* other);
  friend void swap(AchievementUpdateNotify& a, AchievementUpdateNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AchievementUpdateNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  AchievementUpdateNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AchievementUpdateNotify& from);
  void MergeFrom(const AchievementUpdateNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AchievementUpdateNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.Achievement achievement_list = 14;
  int achievement_list_size() const;
  void clear_achievement_list();
  static const int kAchievementListFieldNumber = 14;
  const ::proto::Achievement& achievement_list(int index) const;
  ::proto::Achievement* mutable_achievement_list(int index);
  ::proto::Achievement* add_achievement_list();
  ::google::protobuf::RepeatedPtrField< ::proto::Achievement >*
      mutable_achievement_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::Achievement >&
      achievement_list() const;

  // @@protoc_insertion_point(class_scope:proto.AchievementUpdateNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::Achievement > achievement_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fachievement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TakeAchievementRewardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.TakeAchievementRewardReq) */ {
 public:
  TakeAchievementRewardReq();
  virtual ~TakeAchievementRewardReq();

  TakeAchievementRewardReq(const TakeAchievementRewardReq& from);

  inline TakeAchievementRewardReq& operator=(const TakeAchievementRewardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeAchievementRewardReq(TakeAchievementRewardReq&& from) noexcept
    : TakeAchievementRewardReq() {
    *this = ::std::move(from);
  }

  inline TakeAchievementRewardReq& operator=(TakeAchievementRewardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeAchievementRewardReq& default_instance();

  static inline const TakeAchievementRewardReq* internal_default_instance() {
    return reinterpret_cast<const TakeAchievementRewardReq*>(
               &_TakeAchievementRewardReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TakeAchievementRewardReq* other);
  friend void swap(TakeAchievementRewardReq& a, TakeAchievementRewardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeAchievementRewardReq* New() const PROTOBUF_FINAL { return New(NULL); }

  TakeAchievementRewardReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TakeAchievementRewardReq& from);
  void MergeFrom(const TakeAchievementRewardReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TakeAchievementRewardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 id_list = 13;
  int id_list_size() const;
  void clear_id_list();
  static const int kIdListFieldNumber = 13;
  ::google::protobuf::uint32 id_list(int index) const;
  void set_id_list(int index, ::google::protobuf::uint32 value);
  void add_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id_list();

  // @@protoc_insertion_point(class_scope:proto.TakeAchievementRewardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_list_;
  mutable int _id_list_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fachievement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TakeAchievementRewardRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.TakeAchievementRewardRsp) */ {
 public:
  TakeAchievementRewardRsp();
  virtual ~TakeAchievementRewardRsp();

  TakeAchievementRewardRsp(const TakeAchievementRewardRsp& from);

  inline TakeAchievementRewardRsp& operator=(const TakeAchievementRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeAchievementRewardRsp(TakeAchievementRewardRsp&& from) noexcept
    : TakeAchievementRewardRsp() {
    *this = ::std::move(from);
  }

  inline TakeAchievementRewardRsp& operator=(TakeAchievementRewardRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeAchievementRewardRsp& default_instance();

  static inline const TakeAchievementRewardRsp* internal_default_instance() {
    return reinterpret_cast<const TakeAchievementRewardRsp*>(
               &_TakeAchievementRewardRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(TakeAchievementRewardRsp* other);
  friend void swap(TakeAchievementRewardRsp& a, TakeAchievementRewardRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeAchievementRewardRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  TakeAchievementRewardRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TakeAchievementRewardRsp& from);
  void MergeFrom(const TakeAchievementRewardRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TakeAchievementRewardRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 id_list = 7;
  int id_list_size() const;
  void clear_id_list();
  static const int kIdListFieldNumber = 7;
  ::google::protobuf::uint32 id_list(int index) const;
  void set_id_list(int index, ::google::protobuf::uint32 value);
  void add_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id_list();

  // repeated .proto.ItemParam item_list = 10;
  int item_list_size() const;
  void clear_item_list();
  static const int kItemListFieldNumber = 10;
  const ::proto::ItemParam& item_list(int index) const;
  ::proto::ItemParam* mutable_item_list(int index);
  ::proto::ItemParam* add_item_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
      mutable_item_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
      item_list() const;

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.TakeAchievementRewardRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_list_;
  mutable int _id_list_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam > item_list_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fachievement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TakeAchievementGoalRewardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.TakeAchievementGoalRewardReq) */ {
 public:
  TakeAchievementGoalRewardReq();
  virtual ~TakeAchievementGoalRewardReq();

  TakeAchievementGoalRewardReq(const TakeAchievementGoalRewardReq& from);

  inline TakeAchievementGoalRewardReq& operator=(const TakeAchievementGoalRewardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeAchievementGoalRewardReq(TakeAchievementGoalRewardReq&& from) noexcept
    : TakeAchievementGoalRewardReq() {
    *this = ::std::move(from);
  }

  inline TakeAchievementGoalRewardReq& operator=(TakeAchievementGoalRewardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeAchievementGoalRewardReq& default_instance();

  static inline const TakeAchievementGoalRewardReq* internal_default_instance() {
    return reinterpret_cast<const TakeAchievementGoalRewardReq*>(
               &_TakeAchievementGoalRewardReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(TakeAchievementGoalRewardReq* other);
  friend void swap(TakeAchievementGoalRewardReq& a, TakeAchievementGoalRewardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeAchievementGoalRewardReq* New() const PROTOBUF_FINAL { return New(NULL); }

  TakeAchievementGoalRewardReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TakeAchievementGoalRewardReq& from);
  void MergeFrom(const TakeAchievementGoalRewardReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TakeAchievementGoalRewardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 id_list = 5;
  int id_list_size() const;
  void clear_id_list();
  static const int kIdListFieldNumber = 5;
  ::google::protobuf::uint32 id_list(int index) const;
  void set_id_list(int index, ::google::protobuf::uint32 value);
  void add_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id_list();

  // @@protoc_insertion_point(class_scope:proto.TakeAchievementGoalRewardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_list_;
  mutable int _id_list_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fachievement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TakeAchievementGoalRewardRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.TakeAchievementGoalRewardRsp) */ {
 public:
  TakeAchievementGoalRewardRsp();
  virtual ~TakeAchievementGoalRewardRsp();

  TakeAchievementGoalRewardRsp(const TakeAchievementGoalRewardRsp& from);

  inline TakeAchievementGoalRewardRsp& operator=(const TakeAchievementGoalRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeAchievementGoalRewardRsp(TakeAchievementGoalRewardRsp&& from) noexcept
    : TakeAchievementGoalRewardRsp() {
    *this = ::std::move(from);
  }

  inline TakeAchievementGoalRewardRsp& operator=(TakeAchievementGoalRewardRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeAchievementGoalRewardRsp& default_instance();

  static inline const TakeAchievementGoalRewardRsp* internal_default_instance() {
    return reinterpret_cast<const TakeAchievementGoalRewardRsp*>(
               &_TakeAchievementGoalRewardRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(TakeAchievementGoalRewardRsp* other);
  friend void swap(TakeAchievementGoalRewardRsp& a, TakeAchievementGoalRewardRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeAchievementGoalRewardRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  TakeAchievementGoalRewardRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TakeAchievementGoalRewardRsp& from);
  void MergeFrom(const TakeAchievementGoalRewardRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TakeAchievementGoalRewardRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.ItemParam item_list = 5;
  int item_list_size() const;
  void clear_item_list();
  static const int kItemListFieldNumber = 5;
  const ::proto::ItemParam& item_list(int index) const;
  ::proto::ItemParam* mutable_item_list(int index);
  ::proto::ItemParam* add_item_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
      mutable_item_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
      item_list() const;

  // repeated uint32 id_list = 12;
  int id_list_size() const;
  void clear_id_list();
  static const int kIdListFieldNumber = 12;
  ::google::protobuf::uint32 id_list(int index) const;
  void set_id_list(int index, ::google::protobuf::uint32 value);
  void add_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id_list();

  // int32 retcode = 15;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 15;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.TakeAchievementGoalRewardRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam > item_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_list_;
  mutable int _id_list_cached_byte_size_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fachievement_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Achievement

// uint32 finish_timestamp = 11;
inline void Achievement::clear_finish_timestamp() {
  finish_timestamp_ = 0u;
}
inline ::google::protobuf::uint32 Achievement::finish_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.Achievement.finish_timestamp)
  return finish_timestamp_;
}
inline void Achievement::set_finish_timestamp(::google::protobuf::uint32 value) {
  
  finish_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.Achievement.finish_timestamp)
}

// .proto.Achievement.Status status = 13;
inline void Achievement::clear_status() {
  status_ = 0;
}
inline ::proto::Achievement_Status Achievement::status() const {
  // @@protoc_insertion_point(field_get:proto.Achievement.status)
  return static_cast< ::proto::Achievement_Status >(status_);
}
inline void Achievement::set_status(::proto::Achievement_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.Achievement.status)
}

// uint32 cur_progress = 12;
inline void Achievement::clear_cur_progress() {
  cur_progress_ = 0u;
}
inline ::google::protobuf::uint32 Achievement::cur_progress() const {
  // @@protoc_insertion_point(field_get:proto.Achievement.cur_progress)
  return cur_progress_;
}
inline void Achievement::set_cur_progress(::google::protobuf::uint32 value) {
  
  cur_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.Achievement.cur_progress)
}

// uint32 id = 14;
inline void Achievement::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Achievement::id() const {
  // @@protoc_insertion_point(field_get:proto.Achievement.id)
  return id_;
}
inline void Achievement::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.Achievement.id)
}

// uint32 total_progress = 8;
inline void Achievement::clear_total_progress() {
  total_progress_ = 0u;
}
inline ::google::protobuf::uint32 Achievement::total_progress() const {
  // @@protoc_insertion_point(field_get:proto.Achievement.total_progress)
  return total_progress_;
}
inline void Achievement::set_total_progress(::google::protobuf::uint32 value) {
  
  total_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.Achievement.total_progress)
}

// -------------------------------------------------------------------

// AchievementAllDataNotify

// repeated .proto.Achievement achievement_list = 4;
inline int AchievementAllDataNotify::achievement_list_size() const {
  return achievement_list_.size();
}
inline void AchievementAllDataNotify::clear_achievement_list() {
  achievement_list_.Clear();
}
inline const ::proto::Achievement& AchievementAllDataNotify::achievement_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AchievementAllDataNotify.achievement_list)
  return achievement_list_.Get(index);
}
inline ::proto::Achievement* AchievementAllDataNotify::mutable_achievement_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.AchievementAllDataNotify.achievement_list)
  return achievement_list_.Mutable(index);
}
inline ::proto::Achievement* AchievementAllDataNotify::add_achievement_list() {
  // @@protoc_insertion_point(field_add:proto.AchievementAllDataNotify.achievement_list)
  return achievement_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::Achievement >*
AchievementAllDataNotify::mutable_achievement_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AchievementAllDataNotify.achievement_list)
  return &achievement_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::Achievement >&
AchievementAllDataNotify::achievement_list() const {
  // @@protoc_insertion_point(field_list:proto.AchievementAllDataNotify.achievement_list)
  return achievement_list_;
}

// repeated uint32 reward_taken_goal_id_list = 2;
inline int AchievementAllDataNotify::reward_taken_goal_id_list_size() const {
  return reward_taken_goal_id_list_.size();
}
inline void AchievementAllDataNotify::clear_reward_taken_goal_id_list() {
  reward_taken_goal_id_list_.Clear();
}
inline ::google::protobuf::uint32 AchievementAllDataNotify::reward_taken_goal_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AchievementAllDataNotify.reward_taken_goal_id_list)
  return reward_taken_goal_id_list_.Get(index);
}
inline void AchievementAllDataNotify::set_reward_taken_goal_id_list(int index, ::google::protobuf::uint32 value) {
  reward_taken_goal_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.AchievementAllDataNotify.reward_taken_goal_id_list)
}
inline void AchievementAllDataNotify::add_reward_taken_goal_id_list(::google::protobuf::uint32 value) {
  reward_taken_goal_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.AchievementAllDataNotify.reward_taken_goal_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AchievementAllDataNotify::reward_taken_goal_id_list() const {
  // @@protoc_insertion_point(field_list:proto.AchievementAllDataNotify.reward_taken_goal_id_list)
  return reward_taken_goal_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AchievementAllDataNotify::mutable_reward_taken_goal_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AchievementAllDataNotify.reward_taken_goal_id_list)
  return &reward_taken_goal_id_list_;
}

// -------------------------------------------------------------------

// AchievementUpdateNotify

// repeated .proto.Achievement achievement_list = 14;
inline int AchievementUpdateNotify::achievement_list_size() const {
  return achievement_list_.size();
}
inline void AchievementUpdateNotify::clear_achievement_list() {
  achievement_list_.Clear();
}
inline const ::proto::Achievement& AchievementUpdateNotify::achievement_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AchievementUpdateNotify.achievement_list)
  return achievement_list_.Get(index);
}
inline ::proto::Achievement* AchievementUpdateNotify::mutable_achievement_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.AchievementUpdateNotify.achievement_list)
  return achievement_list_.Mutable(index);
}
inline ::proto::Achievement* AchievementUpdateNotify::add_achievement_list() {
  // @@protoc_insertion_point(field_add:proto.AchievementUpdateNotify.achievement_list)
  return achievement_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::Achievement >*
AchievementUpdateNotify::mutable_achievement_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AchievementUpdateNotify.achievement_list)
  return &achievement_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::Achievement >&
AchievementUpdateNotify::achievement_list() const {
  // @@protoc_insertion_point(field_list:proto.AchievementUpdateNotify.achievement_list)
  return achievement_list_;
}

// -------------------------------------------------------------------

// TakeAchievementRewardReq

// repeated uint32 id_list = 13;
inline int TakeAchievementRewardReq::id_list_size() const {
  return id_list_.size();
}
inline void TakeAchievementRewardReq::clear_id_list() {
  id_list_.Clear();
}
inline ::google::protobuf::uint32 TakeAchievementRewardReq::id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeAchievementRewardReq.id_list)
  return id_list_.Get(index);
}
inline void TakeAchievementRewardReq::set_id_list(int index, ::google::protobuf::uint32 value) {
  id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.TakeAchievementRewardReq.id_list)
}
inline void TakeAchievementRewardReq::add_id_list(::google::protobuf::uint32 value) {
  id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.TakeAchievementRewardReq.id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TakeAchievementRewardReq::id_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeAchievementRewardReq.id_list)
  return id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TakeAchievementRewardReq::mutable_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeAchievementRewardReq.id_list)
  return &id_list_;
}

// -------------------------------------------------------------------

// TakeAchievementRewardRsp

// repeated uint32 id_list = 7;
inline int TakeAchievementRewardRsp::id_list_size() const {
  return id_list_.size();
}
inline void TakeAchievementRewardRsp::clear_id_list() {
  id_list_.Clear();
}
inline ::google::protobuf::uint32 TakeAchievementRewardRsp::id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeAchievementRewardRsp.id_list)
  return id_list_.Get(index);
}
inline void TakeAchievementRewardRsp::set_id_list(int index, ::google::protobuf::uint32 value) {
  id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.TakeAchievementRewardRsp.id_list)
}
inline void TakeAchievementRewardRsp::add_id_list(::google::protobuf::uint32 value) {
  id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.TakeAchievementRewardRsp.id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TakeAchievementRewardRsp::id_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeAchievementRewardRsp.id_list)
  return id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TakeAchievementRewardRsp::mutable_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeAchievementRewardRsp.id_list)
  return &id_list_;
}

// repeated .proto.ItemParam item_list = 10;
inline int TakeAchievementRewardRsp::item_list_size() const {
  return item_list_.size();
}
inline void TakeAchievementRewardRsp::clear_item_list() {
  item_list_.Clear();
}
inline const ::proto::ItemParam& TakeAchievementRewardRsp::item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeAchievementRewardRsp.item_list)
  return item_list_.Get(index);
}
inline ::proto::ItemParam* TakeAchievementRewardRsp::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TakeAchievementRewardRsp.item_list)
  return item_list_.Mutable(index);
}
inline ::proto::ItemParam* TakeAchievementRewardRsp::add_item_list() {
  // @@protoc_insertion_point(field_add:proto.TakeAchievementRewardRsp.item_list)
  return item_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
TakeAchievementRewardRsp::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeAchievementRewardRsp.item_list)
  return &item_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
TakeAchievementRewardRsp::item_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeAchievementRewardRsp.item_list)
  return item_list_;
}

// int32 retcode = 1;
inline void TakeAchievementRewardRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 TakeAchievementRewardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.TakeAchievementRewardRsp.retcode)
  return retcode_;
}
inline void TakeAchievementRewardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeAchievementRewardRsp.retcode)
}

// -------------------------------------------------------------------

// TakeAchievementGoalRewardReq

// repeated uint32 id_list = 5;
inline int TakeAchievementGoalRewardReq::id_list_size() const {
  return id_list_.size();
}
inline void TakeAchievementGoalRewardReq::clear_id_list() {
  id_list_.Clear();
}
inline ::google::protobuf::uint32 TakeAchievementGoalRewardReq::id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeAchievementGoalRewardReq.id_list)
  return id_list_.Get(index);
}
inline void TakeAchievementGoalRewardReq::set_id_list(int index, ::google::protobuf::uint32 value) {
  id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.TakeAchievementGoalRewardReq.id_list)
}
inline void TakeAchievementGoalRewardReq::add_id_list(::google::protobuf::uint32 value) {
  id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.TakeAchievementGoalRewardReq.id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TakeAchievementGoalRewardReq::id_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeAchievementGoalRewardReq.id_list)
  return id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TakeAchievementGoalRewardReq::mutable_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeAchievementGoalRewardReq.id_list)
  return &id_list_;
}

// -------------------------------------------------------------------

// TakeAchievementGoalRewardRsp

// int32 retcode = 15;
inline void TakeAchievementGoalRewardRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 TakeAchievementGoalRewardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.TakeAchievementGoalRewardRsp.retcode)
  return retcode_;
}
inline void TakeAchievementGoalRewardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeAchievementGoalRewardRsp.retcode)
}

// repeated uint32 id_list = 12;
inline int TakeAchievementGoalRewardRsp::id_list_size() const {
  return id_list_.size();
}
inline void TakeAchievementGoalRewardRsp::clear_id_list() {
  id_list_.Clear();
}
inline ::google::protobuf::uint32 TakeAchievementGoalRewardRsp::id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeAchievementGoalRewardRsp.id_list)
  return id_list_.Get(index);
}
inline void TakeAchievementGoalRewardRsp::set_id_list(int index, ::google::protobuf::uint32 value) {
  id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.TakeAchievementGoalRewardRsp.id_list)
}
inline void TakeAchievementGoalRewardRsp::add_id_list(::google::protobuf::uint32 value) {
  id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.TakeAchievementGoalRewardRsp.id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TakeAchievementGoalRewardRsp::id_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeAchievementGoalRewardRsp.id_list)
  return id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TakeAchievementGoalRewardRsp::mutable_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeAchievementGoalRewardRsp.id_list)
  return &id_list_;
}

// repeated .proto.ItemParam item_list = 5;
inline int TakeAchievementGoalRewardRsp::item_list_size() const {
  return item_list_.size();
}
inline void TakeAchievementGoalRewardRsp::clear_item_list() {
  item_list_.Clear();
}
inline const ::proto::ItemParam& TakeAchievementGoalRewardRsp::item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeAchievementGoalRewardRsp.item_list)
  return item_list_.Get(index);
}
inline ::proto::ItemParam* TakeAchievementGoalRewardRsp::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TakeAchievementGoalRewardRsp.item_list)
  return item_list_.Mutable(index);
}
inline ::proto::ItemParam* TakeAchievementGoalRewardRsp::add_item_list() {
  // @@protoc_insertion_point(field_add:proto.TakeAchievementGoalRewardRsp.item_list)
  return item_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
TakeAchievementGoalRewardRsp::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeAchievementGoalRewardRsp.item_list)
  return &item_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
TakeAchievementGoalRewardRsp::item_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeAchievementGoalRewardRsp.item_list)
  return item_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::Achievement_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::Achievement_Status>() {
  return ::proto::Achievement_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cmd_2fcmd_5fachievement_2eproto__INCLUDED
