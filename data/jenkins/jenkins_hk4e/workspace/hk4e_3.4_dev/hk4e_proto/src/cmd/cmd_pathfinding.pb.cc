// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_pathfinding.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cmd/cmd_pathfinding.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
class QueryFilterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QueryFilter>
     _instance;
} _QueryFilter_default_instance_;
class QueryPathReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QueryPathReq>
     _instance;
} _QueryPathReq_default_instance_;
class QueryPathRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QueryPathRsp>
     _instance;
} _QueryPathRsp_default_instance_;
class ObstacleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObstacleInfo>
     _instance;
} _ObstacleInfo_default_instance_;
class ObstacleModifyNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObstacleModifyNotify>
     _instance;
} _ObstacleModifyNotify_default_instance_;
class PathfindingPingNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PathfindingPingNotify>
     _instance;
} _PathfindingPingNotify_default_instance_;
class PathfindingEnterSceneReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PathfindingEnterSceneReq>
     _instance;
} _PathfindingEnterSceneReq_default_instance_;
class PathfindingEnterSceneRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PathfindingEnterSceneRsp>
     _instance;
} _PathfindingEnterSceneRsp_default_instance_;
class GMShowObstacleReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GMShowObstacleReq>
     _instance;
} _GMShowObstacleReq_default_instance_;
class GMObstacleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GMObstacleInfo>
     _instance;
} _GMObstacleInfo_default_instance_;
class GMShowObstacleRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GMShowObstacleRsp>
     _instance;
} _GMShowObstacleRsp_default_instance_;
class GMShowNavMeshReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GMShowNavMeshReq>
     _instance;
} _GMShowNavMeshReq_default_instance_;
class PBNavMeshPolyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PBNavMeshPoly>
     _instance;
} _PBNavMeshPoly_default_instance_;
class PBNavMeshTileDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PBNavMeshTile>
     _instance;
} _PBNavMeshTile_default_instance_;
class GMShowNavMeshRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GMShowNavMeshRsp>
     _instance;
} _GMShowNavMeshRsp_default_instance_;
class PbNavMeshStatsInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PbNavMeshStatsInfo>
     _instance;
} _PbNavMeshStatsInfo_default_instance_;
class NavMeshStatsNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NavMeshStatsNotify>
     _instance;
} _NavMeshStatsNotify_default_instance_;

namespace protobuf_cmd_2fcmd_5fpathfinding_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[17];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFilter, type_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFilter, area_mask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPathReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPathReq, query_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPathReq, source_extend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPathReq, source_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPathReq, filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPathReq, query_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPathReq, destination_extend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPathReq, destination_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPathReq, scene_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPathRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPathRsp, query_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPathRsp, corners_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPathRsp, query_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPathRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleInfo, rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleInfo, obstacle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleInfo, center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleInfo, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleInfo, extents_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleModifyNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleModifyNotify, remove_obstacle_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleModifyNotify, add_obstacles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleModifyNotify, scene_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathfindingPingNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathfindingEnterSceneReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathfindingEnterSceneReq, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathfindingEnterSceneReq, activity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathfindingEnterSceneReq, scene_tag_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathfindingEnterSceneReq, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathfindingEnterSceneReq, is_editor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathfindingEnterSceneReq, obstacles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathfindingEnterSceneReq, polygon_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathfindingEnterSceneRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathfindingEnterSceneRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMShowObstacleReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMObstacleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMObstacleInfo, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMObstacleInfo, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMObstacleInfo, obstacle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMObstacleInfo, rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMObstacleInfo, center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMObstacleInfo, extents_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMShowObstacleRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMShowObstacleRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMShowObstacleRsp, obstacles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMShowNavMeshReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMShowNavMeshReq, center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMShowNavMeshReq, extent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNavMeshPoly, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNavMeshPoly, edge_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNavMeshPoly, area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNavMeshPoly, vects_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNavMeshTile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNavMeshTile, vecs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNavMeshTile, polys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMShowNavMeshRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMShowNavMeshRsp, tiles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMShowNavMeshRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbNavMeshStatsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbNavMeshStatsInfo, authority_ai_in_combat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbNavMeshStatsInfo, no_authority_ai_in_combat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbNavMeshStatsInfo, total_authority_ai_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbNavMeshStatsInfo, total_no_authority_ai_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavMeshStatsNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavMeshStatsNotify, infos_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(QueryFilter)},
  { 7, -1, sizeof(QueryPathReq)},
  { 20, -1, sizeof(QueryPathRsp)},
  { 29, -1, sizeof(ObstacleInfo)},
  { 39, -1, sizeof(ObstacleModifyNotify)},
  { 47, -1, sizeof(PathfindingPingNotify)},
  { 52, -1, sizeof(PathfindingEnterSceneReq)},
  { 64, -1, sizeof(PathfindingEnterSceneRsp)},
  { 70, -1, sizeof(GMShowObstacleReq)},
  { 75, -1, sizeof(GMObstacleInfo)},
  { 86, -1, sizeof(GMShowObstacleRsp)},
  { 93, -1, sizeof(GMShowNavMeshReq)},
  { 100, -1, sizeof(PBNavMeshPoly)},
  { 108, -1, sizeof(PBNavMeshTile)},
  { 115, -1, sizeof(GMShowNavMeshRsp)},
  { 122, -1, sizeof(PbNavMeshStatsInfo)},
  { 131, -1, sizeof(NavMeshStatsNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryPathReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryPathRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObstacleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObstacleModifyNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PathfindingPingNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PathfindingEnterSceneReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PathfindingEnterSceneRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GMShowObstacleReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GMObstacleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GMShowObstacleRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GMShowNavMeshReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBNavMeshPoly_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBNavMeshTile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GMShowNavMeshRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PbNavMeshStatsInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NavMeshStatsNotify_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cmd/cmd_pathfinding.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 17);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::protobuf_define_2eproto::InitDefaults();
  _QueryFilter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QueryFilter_default_instance_);_QueryPathReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QueryPathReq_default_instance_);_QueryPathRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QueryPathRsp_default_instance_);_ObstacleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObstacleInfo_default_instance_);_ObstacleModifyNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObstacleModifyNotify_default_instance_);_PathfindingPingNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PathfindingPingNotify_default_instance_);_PathfindingEnterSceneReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PathfindingEnterSceneReq_default_instance_);_PathfindingEnterSceneRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PathfindingEnterSceneRsp_default_instance_);_GMShowObstacleReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GMShowObstacleReq_default_instance_);_GMObstacleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GMObstacleInfo_default_instance_);_GMShowObstacleRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GMShowObstacleRsp_default_instance_);_GMShowNavMeshReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GMShowNavMeshReq_default_instance_);_PBNavMeshPoly_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PBNavMeshPoly_default_instance_);_PBNavMeshTile_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PBNavMeshTile_default_instance_);_GMShowNavMeshRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GMShowNavMeshRsp_default_instance_);_PbNavMeshStatsInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PbNavMeshStatsInfo_default_instance_);_NavMeshStatsNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NavMeshStatsNotify_default_instance_);_QueryPathReq_default_instance_._instance.get_mutable()->source_extend_ = const_cast< ::proto::Vector3Int*>(
      ::proto::Vector3Int::internal_default_instance());
  _QueryPathReq_default_instance_._instance.get_mutable()->source_pos_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _QueryPathReq_default_instance_._instance.get_mutable()->filter_ = const_cast< ::proto::QueryFilter*>(
      ::proto::QueryFilter::internal_default_instance());
  _QueryPathReq_default_instance_._instance.get_mutable()->destination_extend_ = const_cast< ::proto::Vector3Int*>(
      ::proto::Vector3Int::internal_default_instance());
  _ObstacleInfo_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::proto::MathQuaternion*>(
      ::proto::MathQuaternion::internal_default_instance());
  _ObstacleInfo_default_instance_._instance.get_mutable()->center_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _ObstacleInfo_default_instance_._instance.get_mutable()->extents_ = const_cast< ::proto::Vector3Int*>(
      ::proto::Vector3Int::internal_default_instance());
  _GMObstacleInfo_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::proto::MathQuaternion*>(
      ::proto::MathQuaternion::internal_default_instance());
  _GMObstacleInfo_default_instance_._instance.get_mutable()->center_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _GMObstacleInfo_default_instance_._instance.get_mutable()->extents_ = const_cast< ::proto::Vector3Int*>(
      ::proto::Vector3Int::internal_default_instance());
  _GMShowNavMeshReq_default_instance_._instance.get_mutable()->center_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _GMShowNavMeshReq_default_instance_._instance.get_mutable()->extent_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031cmd/cmd_pathfinding.proto\022\005proto\032\014defi"
      "ne.proto\"1\n\013QueryFilter\022\017\n\007type_id\030\t \001(\005"
      "\022\021\n\tarea_mask\030\r \001(\005\"\371\002\n\014QueryPathReq\0222\n\n"
      "query_type\030\r \001(\0162\036.proto.QueryPathReq.Op"
      "tionType\022(\n\rsource_extend\030\006 \001(\0132\021.proto."
      "Vector3Int\022!\n\nsource_pos\030\002 \001(\0132\r.proto.V"
      "ector\022\"\n\006filter\030\014 \001(\0132\022.proto.QueryFilte"
      "r\022\020\n\010query_id\030\017 \001(\005\022-\n\022destination_exten"
      "d\030\004 \001(\0132\021.proto.Vector3Int\022&\n\017destinatio"
      "n_pos\030\n \003(\0132\r.proto.Vector\022\020\n\010scene_id\030\013"
      " \001(\r\"I\n\nOptionType\022\017\n\013OPTION_NONE\020\000\022\021\n\rO"
      "PTION_NORMAL\020\001\022\027\n\023OPTION_FIRST_CAN_GO\020\002\""
      "\323\001\n\014QueryPathRsp\022\020\n\010query_id\030\014 \001(\005\022\036\n\007co"
      "rners\030\006 \003(\0132\r.proto.Vector\0228\n\014query_stat"
      "us\030\010 \001(\0162\".proto.QueryPathRsp.PathStatus"
      "Type\022\017\n\007retcode\030\001 \001(\005\"F\n\016PathStatusType\022"
      "\017\n\013STATUS_FAIL\020\000\022\017\n\013STATUS_SUCC\020\001\022\022\n\016STA"
      "TUS_PARTIAL\020\002\"\376\001\n\014ObstacleInfo\022\'\n\010rotati"
      "on\030\004 \001(\0132\025.proto.MathQuaternion\022\023\n\013obsta"
      "cle_id\030\002 \001(\005\022\035\n\006center\030\016 \001(\0132\r.proto.Vec"
      "tor\022,\n\005shape\030\006 \001(\0162\035.proto.ObstacleInfo."
      "ShapeType\022\"\n\007extents\030\014 \001(\0132\021.proto.Vecto"
      "r3Int\"\?\n\tShapeType\022\032\n\026OBSTACLE_SHAPE_CAP"
      "SULE\020\000\022\026\n\022OBSTACLE_SHAPE_BOX\020\001\"q\n\024Obstac"
      "leModifyNotify\022\033\n\023remove_obstacle_ids\030\t "
      "\003(\005\022*\n\radd_obstacles\030\006 \003(\0132\023.proto.Obsta"
      "cleInfo\022\020\n\010scene_id\030\005 \001(\r\"\027\n\025Pathfinding"
      "PingNotify\"\271\001\n\030PathfindingEnterSceneReq\022"
      "\020\n\010scene_id\030\014 \001(\r\022\023\n\013activity_id\030\016 \003(\r\022\026"
      "\n\016scene_tag_hash\030\017 \001(\r\022\017\n\007version\030\006 \001(\r\022"
      "\021\n\tis_editor\030\013 \001(\010\022&\n\tobstacles\030\r \003(\0132\023."
      "proto.ObstacleInfo\022\022\n\npolygon_id\030\004 \001(\r\"+"
      "\n\030PathfindingEnterSceneRsp\022\017\n\007retcode\030\t "
      "\001(\005\"\023\n\021GMShowObstacleReq\"\225\002\n\016GMObstacleI"
      "nfo\022\021\n\ttimestamp\030\016 \001(\003\022.\n\005shape\030\002 \001(\0162\037."
      "proto.GMObstacleInfo.ShapeType\022\023\n\013obstac"
      "le_id\030\r \001(\005\022\'\n\010rotation\030\003 \001(\0132\025.proto.Ma"
      "thQuaternion\022\035\n\006center\030\010 \001(\0132\r.proto.Vec"
      "tor\022\"\n\007extents\030\017 \001(\0132\021.proto.Vector3Int\""
      "\?\n\tShapeType\022\032\n\026OBSTACLE_SHAPE_CAPSULE\020\000"
      "\022\026\n\022OBSTACLE_SHAPE_BOX\020\001\"N\n\021GMShowObstac"
      "leRsp\022\017\n\007retcode\030\005 \001(\005\022(\n\tobstacles\030\006 \003("
      "\0132\025.proto.GMObstacleInfo\"P\n\020GMShowNavMes"
      "hReq\022\035\n\006center\030\001 \001(\0132\r.proto.Vector\022\035\n\006e"
      "xtent\030\005 \001(\0132\r.proto.Vector\"\270\001\n\rPBNavMesh"
      "Poly\0221\n\nedge_types\030\n \003(\0162\035.proto.PBNavMe"
      "shPoly.EdgeType\022\014\n\004area\030\006 \001(\005\022\r\n\005vects\030\007"
      " \003(\005\"W\n\010EdgeType\022\t\n\005INNER\020\000\022\016\n\nTILE_BOUN"
      "D\020\001\022\030\n\024TILE_BOUND_UNCONNECT\020\002\022\026\n\022TILE_BO"
      "UND_OVERIDE\020\003\"Q\n\rPBNavMeshTile\022\033\n\004vecs\030\004"
      " \003(\0132\r.proto.Vector\022#\n\005polys\030\010 \003(\0132\024.pro"
      "to.PBNavMeshPoly\"H\n\020GMShowNavMeshRsp\022#\n\005"
      "tiles\030\013 \003(\0132\024.proto.PBNavMeshTile\022\017\n\007ret"
      "code\030\005 \001(\005\"\222\001\n\022PbNavMeshStatsInfo\022\036\n\026aut"
      "hority_ai_in_combat\030\n \001(\005\022!\n\031no_authorit"
      "y_ai_in_combat\030\013 \001(\005\022\032\n\022total_authority_"
      "ai\030\010 \001(\005\022\035\n\025total_no_authority_ai\030\r \001(\005\""
      ">\n\022NavMeshStatsNotify\022(\n\005infos\030\004 \003(\0132\031.p"
      "roto.PbNavMeshStatsInfoB(Z&github.com/te"
      "yvat-helper/hk4e-proto/pbb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2393);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cmd/cmd_pathfinding.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_define_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cmd_2fcmd_5fpathfinding_2eproto

const ::google::protobuf::EnumDescriptor* QueryPathReq_OptionType_descriptor() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_enum_descriptors[0];
}
bool QueryPathReq_OptionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const QueryPathReq_OptionType QueryPathReq::OPTION_NONE;
const QueryPathReq_OptionType QueryPathReq::OPTION_NORMAL;
const QueryPathReq_OptionType QueryPathReq::OPTION_FIRST_CAN_GO;
const QueryPathReq_OptionType QueryPathReq::OptionType_MIN;
const QueryPathReq_OptionType QueryPathReq::OptionType_MAX;
const int QueryPathReq::OptionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* QueryPathRsp_PathStatusType_descriptor() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_enum_descriptors[1];
}
bool QueryPathRsp_PathStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const QueryPathRsp_PathStatusType QueryPathRsp::STATUS_FAIL;
const QueryPathRsp_PathStatusType QueryPathRsp::STATUS_SUCC;
const QueryPathRsp_PathStatusType QueryPathRsp::STATUS_PARTIAL;
const QueryPathRsp_PathStatusType QueryPathRsp::PathStatusType_MIN;
const QueryPathRsp_PathStatusType QueryPathRsp::PathStatusType_MAX;
const int QueryPathRsp::PathStatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ObstacleInfo_ShapeType_descriptor() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_enum_descriptors[2];
}
bool ObstacleInfo_ShapeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObstacleInfo_ShapeType ObstacleInfo::OBSTACLE_SHAPE_CAPSULE;
const ObstacleInfo_ShapeType ObstacleInfo::OBSTACLE_SHAPE_BOX;
const ObstacleInfo_ShapeType ObstacleInfo::ShapeType_MIN;
const ObstacleInfo_ShapeType ObstacleInfo::ShapeType_MAX;
const int ObstacleInfo::ShapeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GMObstacleInfo_ShapeType_descriptor() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_enum_descriptors[3];
}
bool GMObstacleInfo_ShapeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GMObstacleInfo_ShapeType GMObstacleInfo::OBSTACLE_SHAPE_CAPSULE;
const GMObstacleInfo_ShapeType GMObstacleInfo::OBSTACLE_SHAPE_BOX;
const GMObstacleInfo_ShapeType GMObstacleInfo::ShapeType_MIN;
const GMObstacleInfo_ShapeType GMObstacleInfo::ShapeType_MAX;
const int GMObstacleInfo::ShapeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PBNavMeshPoly_EdgeType_descriptor() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_enum_descriptors[4];
}
bool PBNavMeshPoly_EdgeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PBNavMeshPoly_EdgeType PBNavMeshPoly::INNER;
const PBNavMeshPoly_EdgeType PBNavMeshPoly::TILE_BOUND;
const PBNavMeshPoly_EdgeType PBNavMeshPoly::TILE_BOUND_UNCONNECT;
const PBNavMeshPoly_EdgeType PBNavMeshPoly::TILE_BOUND_OVERIDE;
const PBNavMeshPoly_EdgeType PBNavMeshPoly::EdgeType_MIN;
const PBNavMeshPoly_EdgeType PBNavMeshPoly::EdgeType_MAX;
const int PBNavMeshPoly::EdgeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryFilter::kTypeIdFieldNumber;
const int QueryFilter::kAreaMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryFilter::QueryFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.QueryFilter)
}
QueryFilter::QueryFilter(const QueryFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_id_, &from.type_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&area_mask_) -
    reinterpret_cast<char*>(&type_id_)) + sizeof(area_mask_));
  // @@protoc_insertion_point(copy_constructor:proto.QueryFilter)
}

void QueryFilter::SharedCtor() {
  ::memset(&type_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&area_mask_) -
      reinterpret_cast<char*>(&type_id_)) + sizeof(area_mask_));
  _cached_size_ = 0;
}

QueryFilter::~QueryFilter() {
  // @@protoc_insertion_point(destructor:proto.QueryFilter)
  SharedDtor();
}

void QueryFilter::SharedDtor() {
}

void QueryFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryFilter::descriptor() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryFilter& QueryFilter::default_instance() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryFilter* QueryFilter::New(::google::protobuf::Arena* arena) const {
  QueryFilter* n = new QueryFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.QueryFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&area_mask_) -
      reinterpret_cast<char*>(&type_id_)) + sizeof(area_mask_));
  _internal_metadata_.Clear();
}

bool QueryFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.QueryFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 area_mask = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.QueryFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.QueryFilter)
  return false;
#undef DO_
}

void QueryFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.QueryFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type_id = 9;
  if (this->type_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->type_id(), output);
  }

  // int32 area_mask = 13;
  if (this->area_mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->area_mask(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.QueryFilter)
}

::google::protobuf::uint8* QueryFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.QueryFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type_id = 9;
  if (this->type_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->type_id(), target);
  }

  // int32 area_mask = 13;
  if (this->area_mask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->area_mask(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.QueryFilter)
  return target;
}

size_t QueryFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.QueryFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 type_id = 9;
  if (this->type_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type_id());
  }

  // int32 area_mask = 13;
  if (this->area_mask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->area_mask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.QueryFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.QueryFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.QueryFilter)
    MergeFrom(*source);
  }
}

void QueryFilter::MergeFrom(const QueryFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.QueryFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type_id() != 0) {
    set_type_id(from.type_id());
  }
  if (from.area_mask() != 0) {
    set_area_mask(from.area_mask());
  }
}

void QueryFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.QueryFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryFilter::CopyFrom(const QueryFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.QueryFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFilter::IsInitialized() const {
  return true;
}

void QueryFilter::Swap(QueryFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryFilter::InternalSwap(QueryFilter* other) {
  using std::swap;
  swap(type_id_, other->type_id_);
  swap(area_mask_, other->area_mask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryFilter::GetMetadata() const {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryFilter

// int32 type_id = 9;
void QueryFilter::clear_type_id() {
  type_id_ = 0;
}
::google::protobuf::int32 QueryFilter::type_id() const {
  // @@protoc_insertion_point(field_get:proto.QueryFilter.type_id)
  return type_id_;
}
void QueryFilter::set_type_id(::google::protobuf::int32 value) {
  
  type_id_ = value;
  // @@protoc_insertion_point(field_set:proto.QueryFilter.type_id)
}

// int32 area_mask = 13;
void QueryFilter::clear_area_mask() {
  area_mask_ = 0;
}
::google::protobuf::int32 QueryFilter::area_mask() const {
  // @@protoc_insertion_point(field_get:proto.QueryFilter.area_mask)
  return area_mask_;
}
void QueryFilter::set_area_mask(::google::protobuf::int32 value) {
  
  area_mask_ = value;
  // @@protoc_insertion_point(field_set:proto.QueryFilter.area_mask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryPathReq::kQueryTypeFieldNumber;
const int QueryPathReq::kSourceExtendFieldNumber;
const int QueryPathReq::kSourcePosFieldNumber;
const int QueryPathReq::kFilterFieldNumber;
const int QueryPathReq::kQueryIdFieldNumber;
const int QueryPathReq::kDestinationExtendFieldNumber;
const int QueryPathReq::kDestinationPosFieldNumber;
const int QueryPathReq::kSceneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryPathReq::QueryPathReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.QueryPathReq)
}
QueryPathReq::QueryPathReq(const QueryPathReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      destination_pos_(from.destination_pos_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_source_pos()) {
    source_pos_ = new ::proto::Vector(*from.source_pos_);
  } else {
    source_pos_ = NULL;
  }
  if (from.has_destination_extend()) {
    destination_extend_ = new ::proto::Vector3Int(*from.destination_extend_);
  } else {
    destination_extend_ = NULL;
  }
  if (from.has_source_extend()) {
    source_extend_ = new ::proto::Vector3Int(*from.source_extend_);
  } else {
    source_extend_ = NULL;
  }
  if (from.has_filter()) {
    filter_ = new ::proto::QueryFilter(*from.filter_);
  } else {
    filter_ = NULL;
  }
  ::memcpy(&query_id_, &from.query_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&query_type_) -
    reinterpret_cast<char*>(&query_id_)) + sizeof(query_type_));
  // @@protoc_insertion_point(copy_constructor:proto.QueryPathReq)
}

void QueryPathReq::SharedCtor() {
  ::memset(&source_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_type_) -
      reinterpret_cast<char*>(&source_pos_)) + sizeof(query_type_));
  _cached_size_ = 0;
}

QueryPathReq::~QueryPathReq() {
  // @@protoc_insertion_point(destructor:proto.QueryPathReq)
  SharedDtor();
}

void QueryPathReq::SharedDtor() {
  if (this != internal_default_instance()) delete source_pos_;
  if (this != internal_default_instance()) delete destination_extend_;
  if (this != internal_default_instance()) delete source_extend_;
  if (this != internal_default_instance()) delete filter_;
}

void QueryPathReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPathReq::descriptor() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryPathReq& QueryPathReq::default_instance() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryPathReq* QueryPathReq::New(::google::protobuf::Arena* arena) const {
  QueryPathReq* n = new QueryPathReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryPathReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.QueryPathReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destination_pos_.Clear();
  if (GetArenaNoVirtual() == NULL && source_pos_ != NULL) {
    delete source_pos_;
  }
  source_pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && destination_extend_ != NULL) {
    delete destination_extend_;
  }
  destination_extend_ = NULL;
  if (GetArenaNoVirtual() == NULL && source_extend_ != NULL) {
    delete source_extend_;
  }
  source_extend_ = NULL;
  if (GetArenaNoVirtual() == NULL && filter_ != NULL) {
    delete filter_;
  }
  filter_ = NULL;
  ::memset(&query_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_type_) -
      reinterpret_cast<char*>(&query_id_)) + sizeof(query_type_));
  _internal_metadata_.Clear();
}

bool QueryPathReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.QueryPathReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.Vector source_pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector3Int destination_extend = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination_extend()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector3Int source_extend = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_extend()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.Vector destination_pos = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_destination_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 scene_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.QueryFilter filter = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.QueryPathReq.OptionType query_type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_query_type(static_cast< ::proto::QueryPathReq_OptionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 query_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &query_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.QueryPathReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.QueryPathReq)
  return false;
#undef DO_
}

void QueryPathReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.QueryPathReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Vector source_pos = 2;
  if (this->has_source_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->source_pos_, output);
  }

  // .proto.Vector3Int destination_extend = 4;
  if (this->has_destination_extend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->destination_extend_, output);
  }

  // .proto.Vector3Int source_extend = 6;
  if (this->has_source_extend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->source_extend_, output);
  }

  // repeated .proto.Vector destination_pos = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->destination_pos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->destination_pos(static_cast<int>(i)), output);
  }

  // uint32 scene_id = 11;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->scene_id(), output);
  }

  // .proto.QueryFilter filter = 12;
  if (this->has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->filter_, output);
  }

  // .proto.QueryPathReq.OptionType query_type = 13;
  if (this->query_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->query_type(), output);
  }

  // int32 query_id = 15;
  if (this->query_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->query_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.QueryPathReq)
}

::google::protobuf::uint8* QueryPathReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.QueryPathReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Vector source_pos = 2;
  if (this->has_source_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->source_pos_, deterministic, target);
  }

  // .proto.Vector3Int destination_extend = 4;
  if (this->has_destination_extend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->destination_extend_, deterministic, target);
  }

  // .proto.Vector3Int source_extend = 6;
  if (this->has_source_extend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->source_extend_, deterministic, target);
  }

  // repeated .proto.Vector destination_pos = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->destination_pos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->destination_pos(static_cast<int>(i)), deterministic, target);
  }

  // uint32 scene_id = 11;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->scene_id(), target);
  }

  // .proto.QueryFilter filter = 12;
  if (this->has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->filter_, deterministic, target);
  }

  // .proto.QueryPathReq.OptionType query_type = 13;
  if (this->query_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->query_type(), target);
  }

  // int32 query_id = 15;
  if (this->query_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->query_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.QueryPathReq)
  return target;
}

size_t QueryPathReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.QueryPathReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.Vector destination_pos = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->destination_pos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destination_pos(static_cast<int>(i)));
    }
  }

  // .proto.Vector source_pos = 2;
  if (this->has_source_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->source_pos_);
  }

  // .proto.Vector3Int destination_extend = 4;
  if (this->has_destination_extend()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->destination_extend_);
  }

  // .proto.Vector3Int source_extend = 6;
  if (this->has_source_extend()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->source_extend_);
  }

  // .proto.QueryFilter filter = 12;
  if (this->has_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->filter_);
  }

  // int32 query_id = 15;
  if (this->query_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->query_id());
  }

  // uint32 scene_id = 11;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  // .proto.QueryPathReq.OptionType query_type = 13;
  if (this->query_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->query_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPathReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.QueryPathReq)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryPathReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryPathReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.QueryPathReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.QueryPathReq)
    MergeFrom(*source);
  }
}

void QueryPathReq::MergeFrom(const QueryPathReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.QueryPathReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  destination_pos_.MergeFrom(from.destination_pos_);
  if (from.has_source_pos()) {
    mutable_source_pos()->::proto::Vector::MergeFrom(from.source_pos());
  }
  if (from.has_destination_extend()) {
    mutable_destination_extend()->::proto::Vector3Int::MergeFrom(from.destination_extend());
  }
  if (from.has_source_extend()) {
    mutable_source_extend()->::proto::Vector3Int::MergeFrom(from.source_extend());
  }
  if (from.has_filter()) {
    mutable_filter()->::proto::QueryFilter::MergeFrom(from.filter());
  }
  if (from.query_id() != 0) {
    set_query_id(from.query_id());
  }
  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
  if (from.query_type() != 0) {
    set_query_type(from.query_type());
  }
}

void QueryPathReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.QueryPathReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPathReq::CopyFrom(const QueryPathReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.QueryPathReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPathReq::IsInitialized() const {
  return true;
}

void QueryPathReq::Swap(QueryPathReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryPathReq::InternalSwap(QueryPathReq* other) {
  using std::swap;
  destination_pos_.InternalSwap(&other->destination_pos_);
  swap(source_pos_, other->source_pos_);
  swap(destination_extend_, other->destination_extend_);
  swap(source_extend_, other->source_extend_);
  swap(filter_, other->filter_);
  swap(query_id_, other->query_id_);
  swap(scene_id_, other->scene_id_);
  swap(query_type_, other->query_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryPathReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryPathReq

// .proto.QueryPathReq.OptionType query_type = 13;
void QueryPathReq::clear_query_type() {
  query_type_ = 0;
}
::proto::QueryPathReq_OptionType QueryPathReq::query_type() const {
  // @@protoc_insertion_point(field_get:proto.QueryPathReq.query_type)
  return static_cast< ::proto::QueryPathReq_OptionType >(query_type_);
}
void QueryPathReq::set_query_type(::proto::QueryPathReq_OptionType value) {
  
  query_type_ = value;
  // @@protoc_insertion_point(field_set:proto.QueryPathReq.query_type)
}

// .proto.Vector3Int source_extend = 6;
bool QueryPathReq::has_source_extend() const {
  return this != internal_default_instance() && source_extend_ != NULL;
}
void QueryPathReq::clear_source_extend() {
  if (GetArenaNoVirtual() == NULL && source_extend_ != NULL) delete source_extend_;
  source_extend_ = NULL;
}
const ::proto::Vector3Int& QueryPathReq::source_extend() const {
  const ::proto::Vector3Int* p = source_extend_;
  // @@protoc_insertion_point(field_get:proto.QueryPathReq.source_extend)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector3Int*>(
      &::proto::_Vector3Int_default_instance_);
}
::proto::Vector3Int* QueryPathReq::mutable_source_extend() {
  
  if (source_extend_ == NULL) {
    source_extend_ = new ::proto::Vector3Int;
  }
  // @@protoc_insertion_point(field_mutable:proto.QueryPathReq.source_extend)
  return source_extend_;
}
::proto::Vector3Int* QueryPathReq::release_source_extend() {
  // @@protoc_insertion_point(field_release:proto.QueryPathReq.source_extend)
  
  ::proto::Vector3Int* temp = source_extend_;
  source_extend_ = NULL;
  return temp;
}
void QueryPathReq::set_allocated_source_extend(::proto::Vector3Int* source_extend) {
  delete source_extend_;
  source_extend_ = source_extend;
  if (source_extend) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.QueryPathReq.source_extend)
}

// .proto.Vector source_pos = 2;
bool QueryPathReq::has_source_pos() const {
  return this != internal_default_instance() && source_pos_ != NULL;
}
void QueryPathReq::clear_source_pos() {
  if (GetArenaNoVirtual() == NULL && source_pos_ != NULL) delete source_pos_;
  source_pos_ = NULL;
}
const ::proto::Vector& QueryPathReq::source_pos() const {
  const ::proto::Vector* p = source_pos_;
  // @@protoc_insertion_point(field_get:proto.QueryPathReq.source_pos)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* QueryPathReq::mutable_source_pos() {
  
  if (source_pos_ == NULL) {
    source_pos_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.QueryPathReq.source_pos)
  return source_pos_;
}
::proto::Vector* QueryPathReq::release_source_pos() {
  // @@protoc_insertion_point(field_release:proto.QueryPathReq.source_pos)
  
  ::proto::Vector* temp = source_pos_;
  source_pos_ = NULL;
  return temp;
}
void QueryPathReq::set_allocated_source_pos(::proto::Vector* source_pos) {
  delete source_pos_;
  source_pos_ = source_pos;
  if (source_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.QueryPathReq.source_pos)
}

// .proto.QueryFilter filter = 12;
bool QueryPathReq::has_filter() const {
  return this != internal_default_instance() && filter_ != NULL;
}
void QueryPathReq::clear_filter() {
  if (GetArenaNoVirtual() == NULL && filter_ != NULL) delete filter_;
  filter_ = NULL;
}
const ::proto::QueryFilter& QueryPathReq::filter() const {
  const ::proto::QueryFilter* p = filter_;
  // @@protoc_insertion_point(field_get:proto.QueryPathReq.filter)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::QueryFilter*>(
      &::proto::_QueryFilter_default_instance_);
}
::proto::QueryFilter* QueryPathReq::mutable_filter() {
  
  if (filter_ == NULL) {
    filter_ = new ::proto::QueryFilter;
  }
  // @@protoc_insertion_point(field_mutable:proto.QueryPathReq.filter)
  return filter_;
}
::proto::QueryFilter* QueryPathReq::release_filter() {
  // @@protoc_insertion_point(field_release:proto.QueryPathReq.filter)
  
  ::proto::QueryFilter* temp = filter_;
  filter_ = NULL;
  return temp;
}
void QueryPathReq::set_allocated_filter(::proto::QueryFilter* filter) {
  delete filter_;
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.QueryPathReq.filter)
}

// int32 query_id = 15;
void QueryPathReq::clear_query_id() {
  query_id_ = 0;
}
::google::protobuf::int32 QueryPathReq::query_id() const {
  // @@protoc_insertion_point(field_get:proto.QueryPathReq.query_id)
  return query_id_;
}
void QueryPathReq::set_query_id(::google::protobuf::int32 value) {
  
  query_id_ = value;
  // @@protoc_insertion_point(field_set:proto.QueryPathReq.query_id)
}

// .proto.Vector3Int destination_extend = 4;
bool QueryPathReq::has_destination_extend() const {
  return this != internal_default_instance() && destination_extend_ != NULL;
}
void QueryPathReq::clear_destination_extend() {
  if (GetArenaNoVirtual() == NULL && destination_extend_ != NULL) delete destination_extend_;
  destination_extend_ = NULL;
}
const ::proto::Vector3Int& QueryPathReq::destination_extend() const {
  const ::proto::Vector3Int* p = destination_extend_;
  // @@protoc_insertion_point(field_get:proto.QueryPathReq.destination_extend)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector3Int*>(
      &::proto::_Vector3Int_default_instance_);
}
::proto::Vector3Int* QueryPathReq::mutable_destination_extend() {
  
  if (destination_extend_ == NULL) {
    destination_extend_ = new ::proto::Vector3Int;
  }
  // @@protoc_insertion_point(field_mutable:proto.QueryPathReq.destination_extend)
  return destination_extend_;
}
::proto::Vector3Int* QueryPathReq::release_destination_extend() {
  // @@protoc_insertion_point(field_release:proto.QueryPathReq.destination_extend)
  
  ::proto::Vector3Int* temp = destination_extend_;
  destination_extend_ = NULL;
  return temp;
}
void QueryPathReq::set_allocated_destination_extend(::proto::Vector3Int* destination_extend) {
  delete destination_extend_;
  destination_extend_ = destination_extend;
  if (destination_extend) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.QueryPathReq.destination_extend)
}

// repeated .proto.Vector destination_pos = 10;
int QueryPathReq::destination_pos_size() const {
  return destination_pos_.size();
}
void QueryPathReq::clear_destination_pos() {
  destination_pos_.Clear();
}
const ::proto::Vector& QueryPathReq::destination_pos(int index) const {
  // @@protoc_insertion_point(field_get:proto.QueryPathReq.destination_pos)
  return destination_pos_.Get(index);
}
::proto::Vector* QueryPathReq::mutable_destination_pos(int index) {
  // @@protoc_insertion_point(field_mutable:proto.QueryPathReq.destination_pos)
  return destination_pos_.Mutable(index);
}
::proto::Vector* QueryPathReq::add_destination_pos() {
  // @@protoc_insertion_point(field_add:proto.QueryPathReq.destination_pos)
  return destination_pos_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::Vector >*
QueryPathReq::mutable_destination_pos() {
  // @@protoc_insertion_point(field_mutable_list:proto.QueryPathReq.destination_pos)
  return &destination_pos_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::Vector >&
QueryPathReq::destination_pos() const {
  // @@protoc_insertion_point(field_list:proto.QueryPathReq.destination_pos)
  return destination_pos_;
}

// uint32 scene_id = 11;
void QueryPathReq::clear_scene_id() {
  scene_id_ = 0u;
}
::google::protobuf::uint32 QueryPathReq::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.QueryPathReq.scene_id)
  return scene_id_;
}
void QueryPathReq::set_scene_id(::google::protobuf::uint32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:proto.QueryPathReq.scene_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryPathRsp::kQueryIdFieldNumber;
const int QueryPathRsp::kCornersFieldNumber;
const int QueryPathRsp::kQueryStatusFieldNumber;
const int QueryPathRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryPathRsp::QueryPathRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.QueryPathRsp)
}
QueryPathRsp::QueryPathRsp(const QueryPathRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      corners_(from.corners_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&query_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(query_id_));
  // @@protoc_insertion_point(copy_constructor:proto.QueryPathRsp)
}

void QueryPathRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(query_id_));
  _cached_size_ = 0;
}

QueryPathRsp::~QueryPathRsp() {
  // @@protoc_insertion_point(destructor:proto.QueryPathRsp)
  SharedDtor();
}

void QueryPathRsp::SharedDtor() {
}

void QueryPathRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPathRsp::descriptor() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryPathRsp& QueryPathRsp::default_instance() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryPathRsp* QueryPathRsp::New(::google::protobuf::Arena* arena) const {
  QueryPathRsp* n = new QueryPathRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryPathRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.QueryPathRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  corners_.Clear();
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(query_id_));
  _internal_metadata_.Clear();
}

bool QueryPathRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.QueryPathRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.Vector corners = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_corners()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.QueryPathRsp.PathStatusType query_status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_query_status(static_cast< ::proto::QueryPathRsp_PathStatusType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 query_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &query_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.QueryPathRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.QueryPathRsp)
  return false;
#undef DO_
}

void QueryPathRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.QueryPathRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // repeated .proto.Vector corners = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->corners_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->corners(static_cast<int>(i)), output);
  }

  // .proto.QueryPathRsp.PathStatusType query_status = 8;
  if (this->query_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->query_status(), output);
  }

  // int32 query_id = 12;
  if (this->query_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->query_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.QueryPathRsp)
}

::google::protobuf::uint8* QueryPathRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.QueryPathRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // repeated .proto.Vector corners = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->corners_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->corners(static_cast<int>(i)), deterministic, target);
  }

  // .proto.QueryPathRsp.PathStatusType query_status = 8;
  if (this->query_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->query_status(), target);
  }

  // int32 query_id = 12;
  if (this->query_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->query_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.QueryPathRsp)
  return target;
}

size_t QueryPathRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.QueryPathRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.Vector corners = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->corners_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->corners(static_cast<int>(i)));
    }
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // .proto.QueryPathRsp.PathStatusType query_status = 8;
  if (this->query_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->query_status());
  }

  // int32 query_id = 12;
  if (this->query_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->query_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPathRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.QueryPathRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryPathRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryPathRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.QueryPathRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.QueryPathRsp)
    MergeFrom(*source);
  }
}

void QueryPathRsp::MergeFrom(const QueryPathRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.QueryPathRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  corners_.MergeFrom(from.corners_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.query_status() != 0) {
    set_query_status(from.query_status());
  }
  if (from.query_id() != 0) {
    set_query_id(from.query_id());
  }
}

void QueryPathRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.QueryPathRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPathRsp::CopyFrom(const QueryPathRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.QueryPathRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPathRsp::IsInitialized() const {
  return true;
}

void QueryPathRsp::Swap(QueryPathRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryPathRsp::InternalSwap(QueryPathRsp* other) {
  using std::swap;
  corners_.InternalSwap(&other->corners_);
  swap(retcode_, other->retcode_);
  swap(query_status_, other->query_status_);
  swap(query_id_, other->query_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryPathRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryPathRsp

// int32 query_id = 12;
void QueryPathRsp::clear_query_id() {
  query_id_ = 0;
}
::google::protobuf::int32 QueryPathRsp::query_id() const {
  // @@protoc_insertion_point(field_get:proto.QueryPathRsp.query_id)
  return query_id_;
}
void QueryPathRsp::set_query_id(::google::protobuf::int32 value) {
  
  query_id_ = value;
  // @@protoc_insertion_point(field_set:proto.QueryPathRsp.query_id)
}

// repeated .proto.Vector corners = 6;
int QueryPathRsp::corners_size() const {
  return corners_.size();
}
void QueryPathRsp::clear_corners() {
  corners_.Clear();
}
const ::proto::Vector& QueryPathRsp::corners(int index) const {
  // @@protoc_insertion_point(field_get:proto.QueryPathRsp.corners)
  return corners_.Get(index);
}
::proto::Vector* QueryPathRsp::mutable_corners(int index) {
  // @@protoc_insertion_point(field_mutable:proto.QueryPathRsp.corners)
  return corners_.Mutable(index);
}
::proto::Vector* QueryPathRsp::add_corners() {
  // @@protoc_insertion_point(field_add:proto.QueryPathRsp.corners)
  return corners_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::Vector >*
QueryPathRsp::mutable_corners() {
  // @@protoc_insertion_point(field_mutable_list:proto.QueryPathRsp.corners)
  return &corners_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::Vector >&
QueryPathRsp::corners() const {
  // @@protoc_insertion_point(field_list:proto.QueryPathRsp.corners)
  return corners_;
}

// .proto.QueryPathRsp.PathStatusType query_status = 8;
void QueryPathRsp::clear_query_status() {
  query_status_ = 0;
}
::proto::QueryPathRsp_PathStatusType QueryPathRsp::query_status() const {
  // @@protoc_insertion_point(field_get:proto.QueryPathRsp.query_status)
  return static_cast< ::proto::QueryPathRsp_PathStatusType >(query_status_);
}
void QueryPathRsp::set_query_status(::proto::QueryPathRsp_PathStatusType value) {
  
  query_status_ = value;
  // @@protoc_insertion_point(field_set:proto.QueryPathRsp.query_status)
}

// int32 retcode = 1;
void QueryPathRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 QueryPathRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.QueryPathRsp.retcode)
  return retcode_;
}
void QueryPathRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.QueryPathRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleInfo::kRotationFieldNumber;
const int ObstacleInfo::kObstacleIdFieldNumber;
const int ObstacleInfo::kCenterFieldNumber;
const int ObstacleInfo::kShapeFieldNumber;
const int ObstacleInfo::kExtentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleInfo::ObstacleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ObstacleInfo)
}
ObstacleInfo::ObstacleInfo(const ObstacleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rotation()) {
    rotation_ = new ::proto::MathQuaternion(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  if (from.has_extents()) {
    extents_ = new ::proto::Vector3Int(*from.extents_);
  } else {
    extents_ = NULL;
  }
  if (from.has_center()) {
    center_ = new ::proto::Vector(*from.center_);
  } else {
    center_ = NULL;
  }
  ::memcpy(&obstacle_id_, &from.obstacle_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&shape_) -
    reinterpret_cast<char*>(&obstacle_id_)) + sizeof(shape_));
  // @@protoc_insertion_point(copy_constructor:proto.ObstacleInfo)
}

void ObstacleInfo::SharedCtor() {
  ::memset(&rotation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shape_) -
      reinterpret_cast<char*>(&rotation_)) + sizeof(shape_));
  _cached_size_ = 0;
}

ObstacleInfo::~ObstacleInfo() {
  // @@protoc_insertion_point(destructor:proto.ObstacleInfo)
  SharedDtor();
}

void ObstacleInfo::SharedDtor() {
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete extents_;
  if (this != internal_default_instance()) delete center_;
}

void ObstacleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleInfo& ObstacleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObstacleInfo* ObstacleInfo::New(::google::protobuf::Arena* arena) const {
  ObstacleInfo* n = new ObstacleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstacleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ObstacleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) {
    delete rotation_;
  }
  rotation_ = NULL;
  if (GetArenaNoVirtual() == NULL && extents_ != NULL) {
    delete extents_;
  }
  extents_ = NULL;
  if (GetArenaNoVirtual() == NULL && center_ != NULL) {
    delete center_;
  }
  center_ = NULL;
  ::memset(&obstacle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shape_) -
      reinterpret_cast<char*>(&obstacle_id_)) + sizeof(shape_));
  _internal_metadata_.Clear();
}

bool ObstacleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ObstacleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 obstacle_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obstacle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MathQuaternion rotation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ObstacleInfo.ShapeType shape = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_shape(static_cast< ::proto::ObstacleInfo_ShapeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector3Int extents = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector center = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ObstacleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ObstacleInfo)
  return false;
#undef DO_
}

void ObstacleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ObstacleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 obstacle_id = 2;
  if (this->obstacle_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->obstacle_id(), output);
  }

  // .proto.MathQuaternion rotation = 4;
  if (this->has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->rotation_, output);
  }

  // .proto.ObstacleInfo.ShapeType shape = 6;
  if (this->shape() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->shape(), output);
  }

  // .proto.Vector3Int extents = 12;
  if (this->has_extents()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->extents_, output);
  }

  // .proto.Vector center = 14;
  if (this->has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->center_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ObstacleInfo)
}

::google::protobuf::uint8* ObstacleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ObstacleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 obstacle_id = 2;
  if (this->obstacle_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->obstacle_id(), target);
  }

  // .proto.MathQuaternion rotation = 4;
  if (this->has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->rotation_, deterministic, target);
  }

  // .proto.ObstacleInfo.ShapeType shape = 6;
  if (this->shape() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->shape(), target);
  }

  // .proto.Vector3Int extents = 12;
  if (this->has_extents()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->extents_, deterministic, target);
  }

  // .proto.Vector center = 14;
  if (this->has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->center_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ObstacleInfo)
  return target;
}

size_t ObstacleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ObstacleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.MathQuaternion rotation = 4;
  if (this->has_rotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rotation_);
  }

  // .proto.Vector3Int extents = 12;
  if (this->has_extents()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extents_);
  }

  // .proto.Vector center = 14;
  if (this->has_center()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->center_);
  }

  // int32 obstacle_id = 2;
  if (this->obstacle_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->obstacle_id());
  }

  // .proto.ObstacleInfo.ShapeType shape = 6;
  if (this->shape() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->shape());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ObstacleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ObstacleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ObstacleInfo)
    MergeFrom(*source);
  }
}

void ObstacleInfo::MergeFrom(const ObstacleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ObstacleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rotation()) {
    mutable_rotation()->::proto::MathQuaternion::MergeFrom(from.rotation());
  }
  if (from.has_extents()) {
    mutable_extents()->::proto::Vector3Int::MergeFrom(from.extents());
  }
  if (from.has_center()) {
    mutable_center()->::proto::Vector::MergeFrom(from.center());
  }
  if (from.obstacle_id() != 0) {
    set_obstacle_id(from.obstacle_id());
  }
  if (from.shape() != 0) {
    set_shape(from.shape());
  }
}

void ObstacleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ObstacleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleInfo::CopyFrom(const ObstacleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ObstacleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleInfo::IsInitialized() const {
  return true;
}

void ObstacleInfo::Swap(ObstacleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleInfo::InternalSwap(ObstacleInfo* other) {
  using std::swap;
  swap(rotation_, other->rotation_);
  swap(extents_, other->extents_);
  swap(center_, other->center_);
  swap(obstacle_id_, other->obstacle_id_);
  swap(shape_, other->shape_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstacleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObstacleInfo

// .proto.MathQuaternion rotation = 4;
bool ObstacleInfo::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
void ObstacleInfo::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;
}
const ::proto::MathQuaternion& ObstacleInfo::rotation() const {
  const ::proto::MathQuaternion* p = rotation_;
  // @@protoc_insertion_point(field_get:proto.ObstacleInfo.rotation)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::MathQuaternion*>(
      &::proto::_MathQuaternion_default_instance_);
}
::proto::MathQuaternion* ObstacleInfo::mutable_rotation() {
  
  if (rotation_ == NULL) {
    rotation_ = new ::proto::MathQuaternion;
  }
  // @@protoc_insertion_point(field_mutable:proto.ObstacleInfo.rotation)
  return rotation_;
}
::proto::MathQuaternion* ObstacleInfo::release_rotation() {
  // @@protoc_insertion_point(field_release:proto.ObstacleInfo.rotation)
  
  ::proto::MathQuaternion* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
void ObstacleInfo::set_allocated_rotation(::proto::MathQuaternion* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ObstacleInfo.rotation)
}

// int32 obstacle_id = 2;
void ObstacleInfo::clear_obstacle_id() {
  obstacle_id_ = 0;
}
::google::protobuf::int32 ObstacleInfo::obstacle_id() const {
  // @@protoc_insertion_point(field_get:proto.ObstacleInfo.obstacle_id)
  return obstacle_id_;
}
void ObstacleInfo::set_obstacle_id(::google::protobuf::int32 value) {
  
  obstacle_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ObstacleInfo.obstacle_id)
}

// .proto.Vector center = 14;
bool ObstacleInfo::has_center() const {
  return this != internal_default_instance() && center_ != NULL;
}
void ObstacleInfo::clear_center() {
  if (GetArenaNoVirtual() == NULL && center_ != NULL) delete center_;
  center_ = NULL;
}
const ::proto::Vector& ObstacleInfo::center() const {
  const ::proto::Vector* p = center_;
  // @@protoc_insertion_point(field_get:proto.ObstacleInfo.center)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* ObstacleInfo::mutable_center() {
  
  if (center_ == NULL) {
    center_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.ObstacleInfo.center)
  return center_;
}
::proto::Vector* ObstacleInfo::release_center() {
  // @@protoc_insertion_point(field_release:proto.ObstacleInfo.center)
  
  ::proto::Vector* temp = center_;
  center_ = NULL;
  return temp;
}
void ObstacleInfo::set_allocated_center(::proto::Vector* center) {
  delete center_;
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ObstacleInfo.center)
}

// .proto.ObstacleInfo.ShapeType shape = 6;
void ObstacleInfo::clear_shape() {
  shape_ = 0;
}
::proto::ObstacleInfo_ShapeType ObstacleInfo::shape() const {
  // @@protoc_insertion_point(field_get:proto.ObstacleInfo.shape)
  return static_cast< ::proto::ObstacleInfo_ShapeType >(shape_);
}
void ObstacleInfo::set_shape(::proto::ObstacleInfo_ShapeType value) {
  
  shape_ = value;
  // @@protoc_insertion_point(field_set:proto.ObstacleInfo.shape)
}

// .proto.Vector3Int extents = 12;
bool ObstacleInfo::has_extents() const {
  return this != internal_default_instance() && extents_ != NULL;
}
void ObstacleInfo::clear_extents() {
  if (GetArenaNoVirtual() == NULL && extents_ != NULL) delete extents_;
  extents_ = NULL;
}
const ::proto::Vector3Int& ObstacleInfo::extents() const {
  const ::proto::Vector3Int* p = extents_;
  // @@protoc_insertion_point(field_get:proto.ObstacleInfo.extents)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector3Int*>(
      &::proto::_Vector3Int_default_instance_);
}
::proto::Vector3Int* ObstacleInfo::mutable_extents() {
  
  if (extents_ == NULL) {
    extents_ = new ::proto::Vector3Int;
  }
  // @@protoc_insertion_point(field_mutable:proto.ObstacleInfo.extents)
  return extents_;
}
::proto::Vector3Int* ObstacleInfo::release_extents() {
  // @@protoc_insertion_point(field_release:proto.ObstacleInfo.extents)
  
  ::proto::Vector3Int* temp = extents_;
  extents_ = NULL;
  return temp;
}
void ObstacleInfo::set_allocated_extents(::proto::Vector3Int* extents) {
  delete extents_;
  extents_ = extents;
  if (extents) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ObstacleInfo.extents)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleModifyNotify::kRemoveObstacleIdsFieldNumber;
const int ObstacleModifyNotify::kAddObstaclesFieldNumber;
const int ObstacleModifyNotify::kSceneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleModifyNotify::ObstacleModifyNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ObstacleModifyNotify)
}
ObstacleModifyNotify::ObstacleModifyNotify(const ObstacleModifyNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      add_obstacles_(from.add_obstacles_),
      remove_obstacle_ids_(from.remove_obstacle_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scene_id_ = from.scene_id_;
  // @@protoc_insertion_point(copy_constructor:proto.ObstacleModifyNotify)
}

void ObstacleModifyNotify::SharedCtor() {
  scene_id_ = 0u;
  _cached_size_ = 0;
}

ObstacleModifyNotify::~ObstacleModifyNotify() {
  // @@protoc_insertion_point(destructor:proto.ObstacleModifyNotify)
  SharedDtor();
}

void ObstacleModifyNotify::SharedDtor() {
}

void ObstacleModifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleModifyNotify::descriptor() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleModifyNotify& ObstacleModifyNotify::default_instance() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObstacleModifyNotify* ObstacleModifyNotify::New(::google::protobuf::Arena* arena) const {
  ObstacleModifyNotify* n = new ObstacleModifyNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstacleModifyNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ObstacleModifyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  add_obstacles_.Clear();
  remove_obstacle_ids_.Clear();
  scene_id_ = 0u;
  _internal_metadata_.Clear();
}

bool ObstacleModifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ObstacleModifyNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 scene_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ObstacleInfo add_obstacles = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_add_obstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 remove_obstacle_ids = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_remove_obstacle_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74u, input, this->mutable_remove_obstacle_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ObstacleModifyNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ObstacleModifyNotify)
  return false;
#undef DO_
}

void ObstacleModifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ObstacleModifyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 scene_id = 5;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->scene_id(), output);
  }

  // repeated .proto.ObstacleInfo add_obstacles = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->add_obstacles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->add_obstacles(static_cast<int>(i)), output);
  }

  // repeated int32 remove_obstacle_ids = 9;
  if (this->remove_obstacle_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _remove_obstacle_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->remove_obstacle_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->remove_obstacle_ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ObstacleModifyNotify)
}

::google::protobuf::uint8* ObstacleModifyNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ObstacleModifyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 scene_id = 5;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->scene_id(), target);
  }

  // repeated .proto.ObstacleInfo add_obstacles = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->add_obstacles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->add_obstacles(static_cast<int>(i)), deterministic, target);
  }

  // repeated int32 remove_obstacle_ids = 9;
  if (this->remove_obstacle_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _remove_obstacle_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->remove_obstacle_ids_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ObstacleModifyNotify)
  return target;
}

size_t ObstacleModifyNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ObstacleModifyNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ObstacleInfo add_obstacles = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->add_obstacles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add_obstacles(static_cast<int>(i)));
    }
  }

  // repeated int32 remove_obstacle_ids = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->remove_obstacle_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _remove_obstacle_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 scene_id = 5;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleModifyNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ObstacleModifyNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleModifyNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleModifyNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ObstacleModifyNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ObstacleModifyNotify)
    MergeFrom(*source);
  }
}

void ObstacleModifyNotify::MergeFrom(const ObstacleModifyNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ObstacleModifyNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  add_obstacles_.MergeFrom(from.add_obstacles_);
  remove_obstacle_ids_.MergeFrom(from.remove_obstacle_ids_);
  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
}

void ObstacleModifyNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ObstacleModifyNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleModifyNotify::CopyFrom(const ObstacleModifyNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ObstacleModifyNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleModifyNotify::IsInitialized() const {
  return true;
}

void ObstacleModifyNotify::Swap(ObstacleModifyNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleModifyNotify::InternalSwap(ObstacleModifyNotify* other) {
  using std::swap;
  add_obstacles_.InternalSwap(&other->add_obstacles_);
  remove_obstacle_ids_.InternalSwap(&other->remove_obstacle_ids_);
  swap(scene_id_, other->scene_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstacleModifyNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObstacleModifyNotify

// repeated int32 remove_obstacle_ids = 9;
int ObstacleModifyNotify::remove_obstacle_ids_size() const {
  return remove_obstacle_ids_.size();
}
void ObstacleModifyNotify::clear_remove_obstacle_ids() {
  remove_obstacle_ids_.Clear();
}
::google::protobuf::int32 ObstacleModifyNotify::remove_obstacle_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.ObstacleModifyNotify.remove_obstacle_ids)
  return remove_obstacle_ids_.Get(index);
}
void ObstacleModifyNotify::set_remove_obstacle_ids(int index, ::google::protobuf::int32 value) {
  remove_obstacle_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ObstacleModifyNotify.remove_obstacle_ids)
}
void ObstacleModifyNotify::add_remove_obstacle_ids(::google::protobuf::int32 value) {
  remove_obstacle_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ObstacleModifyNotify.remove_obstacle_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ObstacleModifyNotify::remove_obstacle_ids() const {
  // @@protoc_insertion_point(field_list:proto.ObstacleModifyNotify.remove_obstacle_ids)
  return remove_obstacle_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ObstacleModifyNotify::mutable_remove_obstacle_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.ObstacleModifyNotify.remove_obstacle_ids)
  return &remove_obstacle_ids_;
}

// repeated .proto.ObstacleInfo add_obstacles = 6;
int ObstacleModifyNotify::add_obstacles_size() const {
  return add_obstacles_.size();
}
void ObstacleModifyNotify::clear_add_obstacles() {
  add_obstacles_.Clear();
}
const ::proto::ObstacleInfo& ObstacleModifyNotify::add_obstacles(int index) const {
  // @@protoc_insertion_point(field_get:proto.ObstacleModifyNotify.add_obstacles)
  return add_obstacles_.Get(index);
}
::proto::ObstacleInfo* ObstacleModifyNotify::mutable_add_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ObstacleModifyNotify.add_obstacles)
  return add_obstacles_.Mutable(index);
}
::proto::ObstacleInfo* ObstacleModifyNotify::add_add_obstacles() {
  // @@protoc_insertion_point(field_add:proto.ObstacleModifyNotify.add_obstacles)
  return add_obstacles_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ObstacleInfo >*
ObstacleModifyNotify::mutable_add_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:proto.ObstacleModifyNotify.add_obstacles)
  return &add_obstacles_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ObstacleInfo >&
ObstacleModifyNotify::add_obstacles() const {
  // @@protoc_insertion_point(field_list:proto.ObstacleModifyNotify.add_obstacles)
  return add_obstacles_;
}

// uint32 scene_id = 5;
void ObstacleModifyNotify::clear_scene_id() {
  scene_id_ = 0u;
}
::google::protobuf::uint32 ObstacleModifyNotify::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.ObstacleModifyNotify.scene_id)
  return scene_id_;
}
void ObstacleModifyNotify::set_scene_id(::google::protobuf::uint32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ObstacleModifyNotify.scene_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathfindingPingNotify::PathfindingPingNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PathfindingPingNotify)
}
PathfindingPingNotify::PathfindingPingNotify(const PathfindingPingNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.PathfindingPingNotify)
}

void PathfindingPingNotify::SharedCtor() {
  _cached_size_ = 0;
}

PathfindingPingNotify::~PathfindingPingNotify() {
  // @@protoc_insertion_point(destructor:proto.PathfindingPingNotify)
  SharedDtor();
}

void PathfindingPingNotify::SharedDtor() {
}

void PathfindingPingNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathfindingPingNotify::descriptor() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathfindingPingNotify& PathfindingPingNotify::default_instance() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  return *internal_default_instance();
}

PathfindingPingNotify* PathfindingPingNotify::New(::google::protobuf::Arena* arena) const {
  PathfindingPingNotify* n = new PathfindingPingNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathfindingPingNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PathfindingPingNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool PathfindingPingNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PathfindingPingNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PathfindingPingNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PathfindingPingNotify)
  return false;
#undef DO_
}

void PathfindingPingNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PathfindingPingNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PathfindingPingNotify)
}

::google::protobuf::uint8* PathfindingPingNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PathfindingPingNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PathfindingPingNotify)
  return target;
}

size_t PathfindingPingNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PathfindingPingNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathfindingPingNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PathfindingPingNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const PathfindingPingNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathfindingPingNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PathfindingPingNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PathfindingPingNotify)
    MergeFrom(*source);
  }
}

void PathfindingPingNotify::MergeFrom(const PathfindingPingNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PathfindingPingNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PathfindingPingNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PathfindingPingNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathfindingPingNotify::CopyFrom(const PathfindingPingNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PathfindingPingNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathfindingPingNotify::IsInitialized() const {
  return true;
}

void PathfindingPingNotify::Swap(PathfindingPingNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathfindingPingNotify::InternalSwap(PathfindingPingNotify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathfindingPingNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathfindingPingNotify

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathfindingEnterSceneReq::kSceneIdFieldNumber;
const int PathfindingEnterSceneReq::kActivityIdFieldNumber;
const int PathfindingEnterSceneReq::kSceneTagHashFieldNumber;
const int PathfindingEnterSceneReq::kVersionFieldNumber;
const int PathfindingEnterSceneReq::kIsEditorFieldNumber;
const int PathfindingEnterSceneReq::kObstaclesFieldNumber;
const int PathfindingEnterSceneReq::kPolygonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathfindingEnterSceneReq::PathfindingEnterSceneReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PathfindingEnterSceneReq)
}
PathfindingEnterSceneReq::PathfindingEnterSceneReq(const PathfindingEnterSceneReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      obstacles_(from.obstacles_),
      activity_id_(from.activity_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&polygon_id_, &from.polygon_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&polygon_id_)) + sizeof(scene_id_));
  // @@protoc_insertion_point(copy_constructor:proto.PathfindingEnterSceneReq)
}

void PathfindingEnterSceneReq::SharedCtor() {
  ::memset(&polygon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&polygon_id_)) + sizeof(scene_id_));
  _cached_size_ = 0;
}

PathfindingEnterSceneReq::~PathfindingEnterSceneReq() {
  // @@protoc_insertion_point(destructor:proto.PathfindingEnterSceneReq)
  SharedDtor();
}

void PathfindingEnterSceneReq::SharedDtor() {
}

void PathfindingEnterSceneReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathfindingEnterSceneReq::descriptor() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathfindingEnterSceneReq& PathfindingEnterSceneReq::default_instance() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  return *internal_default_instance();
}

PathfindingEnterSceneReq* PathfindingEnterSceneReq::New(::google::protobuf::Arena* arena) const {
  PathfindingEnterSceneReq* n = new PathfindingEnterSceneReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathfindingEnterSceneReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PathfindingEnterSceneReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacles_.Clear();
  activity_id_.Clear();
  ::memset(&polygon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&polygon_id_)) + sizeof(scene_id_));
  _internal_metadata_.Clear();
}

bool PathfindingEnterSceneReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PathfindingEnterSceneReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 polygon_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &polygon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_editor = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_editor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 scene_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ObstacleInfo obstacles = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 activity_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_activity_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 114u, input, this->mutable_activity_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 scene_tag_hash = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_tag_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PathfindingEnterSceneReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PathfindingEnterSceneReq)
  return false;
#undef DO_
}

void PathfindingEnterSceneReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PathfindingEnterSceneReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 polygon_id = 4;
  if (this->polygon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->polygon_id(), output);
  }

  // uint32 version = 6;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->version(), output);
  }

  // bool is_editor = 11;
  if (this->is_editor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_editor(), output);
  }

  // uint32 scene_id = 12;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->scene_id(), output);
  }

  // repeated .proto.ObstacleInfo obstacles = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->obstacles(static_cast<int>(i)), output);
  }

  // repeated uint32 activity_id = 14;
  if (this->activity_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _activity_id_cached_byte_size_));
  }
  for (int i = 0, n = this->activity_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->activity_id(i), output);
  }

  // uint32 scene_tag_hash = 15;
  if (this->scene_tag_hash() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->scene_tag_hash(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PathfindingEnterSceneReq)
}

::google::protobuf::uint8* PathfindingEnterSceneReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PathfindingEnterSceneReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 polygon_id = 4;
  if (this->polygon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->polygon_id(), target);
  }

  // uint32 version = 6;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->version(), target);
  }

  // bool is_editor = 11;
  if (this->is_editor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_editor(), target);
  }

  // uint32 scene_id = 12;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->scene_id(), target);
  }

  // repeated .proto.ObstacleInfo obstacles = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->obstacles(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 activity_id = 14;
  if (this->activity_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _activity_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->activity_id_, target);
  }

  // uint32 scene_tag_hash = 15;
  if (this->scene_tag_hash() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->scene_tag_hash(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PathfindingEnterSceneReq)
  return target;
}

size_t PathfindingEnterSceneReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PathfindingEnterSceneReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ObstacleInfo obstacles = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obstacles(static_cast<int>(i)));
    }
  }

  // repeated uint32 activity_id = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->activity_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _activity_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 polygon_id = 4;
  if (this->polygon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->polygon_id());
  }

  // uint32 version = 6;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // uint32 scene_tag_hash = 15;
  if (this->scene_tag_hash() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_tag_hash());
  }

  // bool is_editor = 11;
  if (this->is_editor() != 0) {
    total_size += 1 + 1;
  }

  // uint32 scene_id = 12;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathfindingEnterSceneReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PathfindingEnterSceneReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PathfindingEnterSceneReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathfindingEnterSceneReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PathfindingEnterSceneReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PathfindingEnterSceneReq)
    MergeFrom(*source);
  }
}

void PathfindingEnterSceneReq::MergeFrom(const PathfindingEnterSceneReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PathfindingEnterSceneReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacles_.MergeFrom(from.obstacles_);
  activity_id_.MergeFrom(from.activity_id_);
  if (from.polygon_id() != 0) {
    set_polygon_id(from.polygon_id());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.scene_tag_hash() != 0) {
    set_scene_tag_hash(from.scene_tag_hash());
  }
  if (from.is_editor() != 0) {
    set_is_editor(from.is_editor());
  }
  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
}

void PathfindingEnterSceneReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PathfindingEnterSceneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathfindingEnterSceneReq::CopyFrom(const PathfindingEnterSceneReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PathfindingEnterSceneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathfindingEnterSceneReq::IsInitialized() const {
  return true;
}

void PathfindingEnterSceneReq::Swap(PathfindingEnterSceneReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathfindingEnterSceneReq::InternalSwap(PathfindingEnterSceneReq* other) {
  using std::swap;
  obstacles_.InternalSwap(&other->obstacles_);
  activity_id_.InternalSwap(&other->activity_id_);
  swap(polygon_id_, other->polygon_id_);
  swap(version_, other->version_);
  swap(scene_tag_hash_, other->scene_tag_hash_);
  swap(is_editor_, other->is_editor_);
  swap(scene_id_, other->scene_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathfindingEnterSceneReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathfindingEnterSceneReq

// uint32 scene_id = 12;
void PathfindingEnterSceneReq::clear_scene_id() {
  scene_id_ = 0u;
}
::google::protobuf::uint32 PathfindingEnterSceneReq::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.PathfindingEnterSceneReq.scene_id)
  return scene_id_;
}
void PathfindingEnterSceneReq::set_scene_id(::google::protobuf::uint32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PathfindingEnterSceneReq.scene_id)
}

// repeated uint32 activity_id = 14;
int PathfindingEnterSceneReq::activity_id_size() const {
  return activity_id_.size();
}
void PathfindingEnterSceneReq::clear_activity_id() {
  activity_id_.Clear();
}
::google::protobuf::uint32 PathfindingEnterSceneReq::activity_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.PathfindingEnterSceneReq.activity_id)
  return activity_id_.Get(index);
}
void PathfindingEnterSceneReq::set_activity_id(int index, ::google::protobuf::uint32 value) {
  activity_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.PathfindingEnterSceneReq.activity_id)
}
void PathfindingEnterSceneReq::add_activity_id(::google::protobuf::uint32 value) {
  activity_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.PathfindingEnterSceneReq.activity_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PathfindingEnterSceneReq::activity_id() const {
  // @@protoc_insertion_point(field_list:proto.PathfindingEnterSceneReq.activity_id)
  return activity_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PathfindingEnterSceneReq::mutable_activity_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.PathfindingEnterSceneReq.activity_id)
  return &activity_id_;
}

// uint32 scene_tag_hash = 15;
void PathfindingEnterSceneReq::clear_scene_tag_hash() {
  scene_tag_hash_ = 0u;
}
::google::protobuf::uint32 PathfindingEnterSceneReq::scene_tag_hash() const {
  // @@protoc_insertion_point(field_get:proto.PathfindingEnterSceneReq.scene_tag_hash)
  return scene_tag_hash_;
}
void PathfindingEnterSceneReq::set_scene_tag_hash(::google::protobuf::uint32 value) {
  
  scene_tag_hash_ = value;
  // @@protoc_insertion_point(field_set:proto.PathfindingEnterSceneReq.scene_tag_hash)
}

// uint32 version = 6;
void PathfindingEnterSceneReq::clear_version() {
  version_ = 0u;
}
::google::protobuf::uint32 PathfindingEnterSceneReq::version() const {
  // @@protoc_insertion_point(field_get:proto.PathfindingEnterSceneReq.version)
  return version_;
}
void PathfindingEnterSceneReq::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.PathfindingEnterSceneReq.version)
}

// bool is_editor = 11;
void PathfindingEnterSceneReq::clear_is_editor() {
  is_editor_ = false;
}
bool PathfindingEnterSceneReq::is_editor() const {
  // @@protoc_insertion_point(field_get:proto.PathfindingEnterSceneReq.is_editor)
  return is_editor_;
}
void PathfindingEnterSceneReq::set_is_editor(bool value) {
  
  is_editor_ = value;
  // @@protoc_insertion_point(field_set:proto.PathfindingEnterSceneReq.is_editor)
}

// repeated .proto.ObstacleInfo obstacles = 13;
int PathfindingEnterSceneReq::obstacles_size() const {
  return obstacles_.size();
}
void PathfindingEnterSceneReq::clear_obstacles() {
  obstacles_.Clear();
}
const ::proto::ObstacleInfo& PathfindingEnterSceneReq::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:proto.PathfindingEnterSceneReq.obstacles)
  return obstacles_.Get(index);
}
::proto::ObstacleInfo* PathfindingEnterSceneReq::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:proto.PathfindingEnterSceneReq.obstacles)
  return obstacles_.Mutable(index);
}
::proto::ObstacleInfo* PathfindingEnterSceneReq::add_obstacles() {
  // @@protoc_insertion_point(field_add:proto.PathfindingEnterSceneReq.obstacles)
  return obstacles_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ObstacleInfo >*
PathfindingEnterSceneReq::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:proto.PathfindingEnterSceneReq.obstacles)
  return &obstacles_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ObstacleInfo >&
PathfindingEnterSceneReq::obstacles() const {
  // @@protoc_insertion_point(field_list:proto.PathfindingEnterSceneReq.obstacles)
  return obstacles_;
}

// uint32 polygon_id = 4;
void PathfindingEnterSceneReq::clear_polygon_id() {
  polygon_id_ = 0u;
}
::google::protobuf::uint32 PathfindingEnterSceneReq::polygon_id() const {
  // @@protoc_insertion_point(field_get:proto.PathfindingEnterSceneReq.polygon_id)
  return polygon_id_;
}
void PathfindingEnterSceneReq::set_polygon_id(::google::protobuf::uint32 value) {
  
  polygon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PathfindingEnterSceneReq.polygon_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathfindingEnterSceneRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathfindingEnterSceneRsp::PathfindingEnterSceneRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PathfindingEnterSceneRsp)
}
PathfindingEnterSceneRsp::PathfindingEnterSceneRsp(const PathfindingEnterSceneRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.PathfindingEnterSceneRsp)
}

void PathfindingEnterSceneRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

PathfindingEnterSceneRsp::~PathfindingEnterSceneRsp() {
  // @@protoc_insertion_point(destructor:proto.PathfindingEnterSceneRsp)
  SharedDtor();
}

void PathfindingEnterSceneRsp::SharedDtor() {
}

void PathfindingEnterSceneRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathfindingEnterSceneRsp::descriptor() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathfindingEnterSceneRsp& PathfindingEnterSceneRsp::default_instance() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  return *internal_default_instance();
}

PathfindingEnterSceneRsp* PathfindingEnterSceneRsp::New(::google::protobuf::Arena* arena) const {
  PathfindingEnterSceneRsp* n = new PathfindingEnterSceneRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathfindingEnterSceneRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PathfindingEnterSceneRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool PathfindingEnterSceneRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PathfindingEnterSceneRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PathfindingEnterSceneRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PathfindingEnterSceneRsp)
  return false;
#undef DO_
}

void PathfindingEnterSceneRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PathfindingEnterSceneRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 9;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PathfindingEnterSceneRsp)
}

::google::protobuf::uint8* PathfindingEnterSceneRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PathfindingEnterSceneRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 9;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PathfindingEnterSceneRsp)
  return target;
}

size_t PathfindingEnterSceneRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PathfindingEnterSceneRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 9;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathfindingEnterSceneRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PathfindingEnterSceneRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const PathfindingEnterSceneRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathfindingEnterSceneRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PathfindingEnterSceneRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PathfindingEnterSceneRsp)
    MergeFrom(*source);
  }
}

void PathfindingEnterSceneRsp::MergeFrom(const PathfindingEnterSceneRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PathfindingEnterSceneRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void PathfindingEnterSceneRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PathfindingEnterSceneRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathfindingEnterSceneRsp::CopyFrom(const PathfindingEnterSceneRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PathfindingEnterSceneRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathfindingEnterSceneRsp::IsInitialized() const {
  return true;
}

void PathfindingEnterSceneRsp::Swap(PathfindingEnterSceneRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathfindingEnterSceneRsp::InternalSwap(PathfindingEnterSceneRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathfindingEnterSceneRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathfindingEnterSceneRsp

// int32 retcode = 9;
void PathfindingEnterSceneRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 PathfindingEnterSceneRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.PathfindingEnterSceneRsp.retcode)
  return retcode_;
}
void PathfindingEnterSceneRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.PathfindingEnterSceneRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GMShowObstacleReq::GMShowObstacleReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GMShowObstacleReq)
}
GMShowObstacleReq::GMShowObstacleReq(const GMShowObstacleReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GMShowObstacleReq)
}

void GMShowObstacleReq::SharedCtor() {
  _cached_size_ = 0;
}

GMShowObstacleReq::~GMShowObstacleReq() {
  // @@protoc_insertion_point(destructor:proto.GMShowObstacleReq)
  SharedDtor();
}

void GMShowObstacleReq::SharedDtor() {
}

void GMShowObstacleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMShowObstacleReq::descriptor() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GMShowObstacleReq& GMShowObstacleReq::default_instance() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  return *internal_default_instance();
}

GMShowObstacleReq* GMShowObstacleReq::New(::google::protobuf::Arena* arena) const {
  GMShowObstacleReq* n = new GMShowObstacleReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GMShowObstacleReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GMShowObstacleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GMShowObstacleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GMShowObstacleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GMShowObstacleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GMShowObstacleReq)
  return false;
#undef DO_
}

void GMShowObstacleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GMShowObstacleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GMShowObstacleReq)
}

::google::protobuf::uint8* GMShowObstacleReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GMShowObstacleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GMShowObstacleReq)
  return target;
}

size_t GMShowObstacleReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GMShowObstacleReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMShowObstacleReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GMShowObstacleReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GMShowObstacleReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GMShowObstacleReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GMShowObstacleReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GMShowObstacleReq)
    MergeFrom(*source);
  }
}

void GMShowObstacleReq::MergeFrom(const GMShowObstacleReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GMShowObstacleReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GMShowObstacleReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GMShowObstacleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMShowObstacleReq::CopyFrom(const GMShowObstacleReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GMShowObstacleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMShowObstacleReq::IsInitialized() const {
  return true;
}

void GMShowObstacleReq::Swap(GMShowObstacleReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GMShowObstacleReq::InternalSwap(GMShowObstacleReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GMShowObstacleReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GMShowObstacleReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GMObstacleInfo::kTimestampFieldNumber;
const int GMObstacleInfo::kShapeFieldNumber;
const int GMObstacleInfo::kObstacleIdFieldNumber;
const int GMObstacleInfo::kRotationFieldNumber;
const int GMObstacleInfo::kCenterFieldNumber;
const int GMObstacleInfo::kExtentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GMObstacleInfo::GMObstacleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GMObstacleInfo)
}
GMObstacleInfo::GMObstacleInfo(const GMObstacleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rotation()) {
    rotation_ = new ::proto::MathQuaternion(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  if (from.has_center()) {
    center_ = new ::proto::Vector(*from.center_);
  } else {
    center_ = NULL;
  }
  if (from.has_extents()) {
    extents_ = new ::proto::Vector3Int(*from.extents_);
  } else {
    extents_ = NULL;
  }
  ::memcpy(&shape_, &from.shape_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&shape_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.GMObstacleInfo)
}

void GMObstacleInfo::SharedCtor() {
  ::memset(&rotation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&rotation_)) + sizeof(timestamp_));
  _cached_size_ = 0;
}

GMObstacleInfo::~GMObstacleInfo() {
  // @@protoc_insertion_point(destructor:proto.GMObstacleInfo)
  SharedDtor();
}

void GMObstacleInfo::SharedDtor() {
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete extents_;
}

void GMObstacleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMObstacleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GMObstacleInfo& GMObstacleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  return *internal_default_instance();
}

GMObstacleInfo* GMObstacleInfo::New(::google::protobuf::Arena* arena) const {
  GMObstacleInfo* n = new GMObstacleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GMObstacleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GMObstacleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) {
    delete rotation_;
  }
  rotation_ = NULL;
  if (GetArenaNoVirtual() == NULL && center_ != NULL) {
    delete center_;
  }
  center_ = NULL;
  if (GetArenaNoVirtual() == NULL && extents_ != NULL) {
    delete extents_;
  }
  extents_ = NULL;
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(timestamp_));
  _internal_metadata_.Clear();
}

bool GMObstacleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GMObstacleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GMObstacleInfo.ShapeType shape = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_shape(static_cast< ::proto::GMObstacleInfo_ShapeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MathQuaternion rotation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector center = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 obstacle_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obstacle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector3Int extents = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GMObstacleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GMObstacleInfo)
  return false;
#undef DO_
}

void GMObstacleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GMObstacleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GMObstacleInfo.ShapeType shape = 2;
  if (this->shape() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->shape(), output);
  }

  // .proto.MathQuaternion rotation = 3;
  if (this->has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->rotation_, output);
  }

  // .proto.Vector center = 8;
  if (this->has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->center_, output);
  }

  // int32 obstacle_id = 13;
  if (this->obstacle_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->obstacle_id(), output);
  }

  // int64 timestamp = 14;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->timestamp(), output);
  }

  // .proto.Vector3Int extents = 15;
  if (this->has_extents()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->extents_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GMObstacleInfo)
}

::google::protobuf::uint8* GMObstacleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GMObstacleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GMObstacleInfo.ShapeType shape = 2;
  if (this->shape() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->shape(), target);
  }

  // .proto.MathQuaternion rotation = 3;
  if (this->has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->rotation_, deterministic, target);
  }

  // .proto.Vector center = 8;
  if (this->has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->center_, deterministic, target);
  }

  // int32 obstacle_id = 13;
  if (this->obstacle_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->obstacle_id(), target);
  }

  // int64 timestamp = 14;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->timestamp(), target);
  }

  // .proto.Vector3Int extents = 15;
  if (this->has_extents()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->extents_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GMObstacleInfo)
  return target;
}

size_t GMObstacleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GMObstacleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.MathQuaternion rotation = 3;
  if (this->has_rotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rotation_);
  }

  // .proto.Vector center = 8;
  if (this->has_center()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->center_);
  }

  // .proto.Vector3Int extents = 15;
  if (this->has_extents()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extents_);
  }

  // .proto.GMObstacleInfo.ShapeType shape = 2;
  if (this->shape() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->shape());
  }

  // int32 obstacle_id = 13;
  if (this->obstacle_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->obstacle_id());
  }

  // int64 timestamp = 14;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMObstacleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GMObstacleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GMObstacleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GMObstacleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GMObstacleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GMObstacleInfo)
    MergeFrom(*source);
  }
}

void GMObstacleInfo::MergeFrom(const GMObstacleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GMObstacleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rotation()) {
    mutable_rotation()->::proto::MathQuaternion::MergeFrom(from.rotation());
  }
  if (from.has_center()) {
    mutable_center()->::proto::Vector::MergeFrom(from.center());
  }
  if (from.has_extents()) {
    mutable_extents()->::proto::Vector3Int::MergeFrom(from.extents());
  }
  if (from.shape() != 0) {
    set_shape(from.shape());
  }
  if (from.obstacle_id() != 0) {
    set_obstacle_id(from.obstacle_id());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void GMObstacleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GMObstacleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMObstacleInfo::CopyFrom(const GMObstacleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GMObstacleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMObstacleInfo::IsInitialized() const {
  return true;
}

void GMObstacleInfo::Swap(GMObstacleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GMObstacleInfo::InternalSwap(GMObstacleInfo* other) {
  using std::swap;
  swap(rotation_, other->rotation_);
  swap(center_, other->center_);
  swap(extents_, other->extents_);
  swap(shape_, other->shape_);
  swap(obstacle_id_, other->obstacle_id_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GMObstacleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GMObstacleInfo

// int64 timestamp = 14;
void GMObstacleInfo::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GMObstacleInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.GMObstacleInfo.timestamp)
  return timestamp_;
}
void GMObstacleInfo::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.GMObstacleInfo.timestamp)
}

// .proto.GMObstacleInfo.ShapeType shape = 2;
void GMObstacleInfo::clear_shape() {
  shape_ = 0;
}
::proto::GMObstacleInfo_ShapeType GMObstacleInfo::shape() const {
  // @@protoc_insertion_point(field_get:proto.GMObstacleInfo.shape)
  return static_cast< ::proto::GMObstacleInfo_ShapeType >(shape_);
}
void GMObstacleInfo::set_shape(::proto::GMObstacleInfo_ShapeType value) {
  
  shape_ = value;
  // @@protoc_insertion_point(field_set:proto.GMObstacleInfo.shape)
}

// int32 obstacle_id = 13;
void GMObstacleInfo::clear_obstacle_id() {
  obstacle_id_ = 0;
}
::google::protobuf::int32 GMObstacleInfo::obstacle_id() const {
  // @@protoc_insertion_point(field_get:proto.GMObstacleInfo.obstacle_id)
  return obstacle_id_;
}
void GMObstacleInfo::set_obstacle_id(::google::protobuf::int32 value) {
  
  obstacle_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GMObstacleInfo.obstacle_id)
}

// .proto.MathQuaternion rotation = 3;
bool GMObstacleInfo::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
void GMObstacleInfo::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;
}
const ::proto::MathQuaternion& GMObstacleInfo::rotation() const {
  const ::proto::MathQuaternion* p = rotation_;
  // @@protoc_insertion_point(field_get:proto.GMObstacleInfo.rotation)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::MathQuaternion*>(
      &::proto::_MathQuaternion_default_instance_);
}
::proto::MathQuaternion* GMObstacleInfo::mutable_rotation() {
  
  if (rotation_ == NULL) {
    rotation_ = new ::proto::MathQuaternion;
  }
  // @@protoc_insertion_point(field_mutable:proto.GMObstacleInfo.rotation)
  return rotation_;
}
::proto::MathQuaternion* GMObstacleInfo::release_rotation() {
  // @@protoc_insertion_point(field_release:proto.GMObstacleInfo.rotation)
  
  ::proto::MathQuaternion* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
void GMObstacleInfo::set_allocated_rotation(::proto::MathQuaternion* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GMObstacleInfo.rotation)
}

// .proto.Vector center = 8;
bool GMObstacleInfo::has_center() const {
  return this != internal_default_instance() && center_ != NULL;
}
void GMObstacleInfo::clear_center() {
  if (GetArenaNoVirtual() == NULL && center_ != NULL) delete center_;
  center_ = NULL;
}
const ::proto::Vector& GMObstacleInfo::center() const {
  const ::proto::Vector* p = center_;
  // @@protoc_insertion_point(field_get:proto.GMObstacleInfo.center)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* GMObstacleInfo::mutable_center() {
  
  if (center_ == NULL) {
    center_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.GMObstacleInfo.center)
  return center_;
}
::proto::Vector* GMObstacleInfo::release_center() {
  // @@protoc_insertion_point(field_release:proto.GMObstacleInfo.center)
  
  ::proto::Vector* temp = center_;
  center_ = NULL;
  return temp;
}
void GMObstacleInfo::set_allocated_center(::proto::Vector* center) {
  delete center_;
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GMObstacleInfo.center)
}

// .proto.Vector3Int extents = 15;
bool GMObstacleInfo::has_extents() const {
  return this != internal_default_instance() && extents_ != NULL;
}
void GMObstacleInfo::clear_extents() {
  if (GetArenaNoVirtual() == NULL && extents_ != NULL) delete extents_;
  extents_ = NULL;
}
const ::proto::Vector3Int& GMObstacleInfo::extents() const {
  const ::proto::Vector3Int* p = extents_;
  // @@protoc_insertion_point(field_get:proto.GMObstacleInfo.extents)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector3Int*>(
      &::proto::_Vector3Int_default_instance_);
}
::proto::Vector3Int* GMObstacleInfo::mutable_extents() {
  
  if (extents_ == NULL) {
    extents_ = new ::proto::Vector3Int;
  }
  // @@protoc_insertion_point(field_mutable:proto.GMObstacleInfo.extents)
  return extents_;
}
::proto::Vector3Int* GMObstacleInfo::release_extents() {
  // @@protoc_insertion_point(field_release:proto.GMObstacleInfo.extents)
  
  ::proto::Vector3Int* temp = extents_;
  extents_ = NULL;
  return temp;
}
void GMObstacleInfo::set_allocated_extents(::proto::Vector3Int* extents) {
  delete extents_;
  extents_ = extents;
  if (extents) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GMObstacleInfo.extents)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GMShowObstacleRsp::kRetcodeFieldNumber;
const int GMShowObstacleRsp::kObstaclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GMShowObstacleRsp::GMShowObstacleRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GMShowObstacleRsp)
}
GMShowObstacleRsp::GMShowObstacleRsp(const GMShowObstacleRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      obstacles_(from.obstacles_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.GMShowObstacleRsp)
}

void GMShowObstacleRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

GMShowObstacleRsp::~GMShowObstacleRsp() {
  // @@protoc_insertion_point(destructor:proto.GMShowObstacleRsp)
  SharedDtor();
}

void GMShowObstacleRsp::SharedDtor() {
}

void GMShowObstacleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMShowObstacleRsp::descriptor() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GMShowObstacleRsp& GMShowObstacleRsp::default_instance() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  return *internal_default_instance();
}

GMShowObstacleRsp* GMShowObstacleRsp::New(::google::protobuf::Arena* arena) const {
  GMShowObstacleRsp* n = new GMShowObstacleRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GMShowObstacleRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GMShowObstacleRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacles_.Clear();
  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool GMShowObstacleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GMShowObstacleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GMObstacleInfo obstacles = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GMShowObstacleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GMShowObstacleRsp)
  return false;
#undef DO_
}

void GMShowObstacleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GMShowObstacleRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 5;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->retcode(), output);
  }

  // repeated .proto.GMObstacleInfo obstacles = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->obstacles(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GMShowObstacleRsp)
}

::google::protobuf::uint8* GMShowObstacleRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GMShowObstacleRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 5;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->retcode(), target);
  }

  // repeated .proto.GMObstacleInfo obstacles = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->obstacles(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GMShowObstacleRsp)
  return target;
}

size_t GMShowObstacleRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GMShowObstacleRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GMObstacleInfo obstacles = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obstacles(static_cast<int>(i)));
    }
  }

  // int32 retcode = 5;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMShowObstacleRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GMShowObstacleRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GMShowObstacleRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GMShowObstacleRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GMShowObstacleRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GMShowObstacleRsp)
    MergeFrom(*source);
  }
}

void GMShowObstacleRsp::MergeFrom(const GMShowObstacleRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GMShowObstacleRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacles_.MergeFrom(from.obstacles_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void GMShowObstacleRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GMShowObstacleRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMShowObstacleRsp::CopyFrom(const GMShowObstacleRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GMShowObstacleRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMShowObstacleRsp::IsInitialized() const {
  return true;
}

void GMShowObstacleRsp::Swap(GMShowObstacleRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GMShowObstacleRsp::InternalSwap(GMShowObstacleRsp* other) {
  using std::swap;
  obstacles_.InternalSwap(&other->obstacles_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GMShowObstacleRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GMShowObstacleRsp

// int32 retcode = 5;
void GMShowObstacleRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GMShowObstacleRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GMShowObstacleRsp.retcode)
  return retcode_;
}
void GMShowObstacleRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GMShowObstacleRsp.retcode)
}

// repeated .proto.GMObstacleInfo obstacles = 6;
int GMShowObstacleRsp::obstacles_size() const {
  return obstacles_.size();
}
void GMShowObstacleRsp::clear_obstacles() {
  obstacles_.Clear();
}
const ::proto::GMObstacleInfo& GMShowObstacleRsp::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:proto.GMShowObstacleRsp.obstacles)
  return obstacles_.Get(index);
}
::proto::GMObstacleInfo* GMShowObstacleRsp::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GMShowObstacleRsp.obstacles)
  return obstacles_.Mutable(index);
}
::proto::GMObstacleInfo* GMShowObstacleRsp::add_obstacles() {
  // @@protoc_insertion_point(field_add:proto.GMShowObstacleRsp.obstacles)
  return obstacles_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GMObstacleInfo >*
GMShowObstacleRsp::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:proto.GMShowObstacleRsp.obstacles)
  return &obstacles_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GMObstacleInfo >&
GMShowObstacleRsp::obstacles() const {
  // @@protoc_insertion_point(field_list:proto.GMShowObstacleRsp.obstacles)
  return obstacles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GMShowNavMeshReq::kCenterFieldNumber;
const int GMShowNavMeshReq::kExtentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GMShowNavMeshReq::GMShowNavMeshReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GMShowNavMeshReq)
}
GMShowNavMeshReq::GMShowNavMeshReq(const GMShowNavMeshReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_center()) {
    center_ = new ::proto::Vector(*from.center_);
  } else {
    center_ = NULL;
  }
  if (from.has_extent()) {
    extent_ = new ::proto::Vector(*from.extent_);
  } else {
    extent_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.GMShowNavMeshReq)
}

void GMShowNavMeshReq::SharedCtor() {
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extent_) -
      reinterpret_cast<char*>(&center_)) + sizeof(extent_));
  _cached_size_ = 0;
}

GMShowNavMeshReq::~GMShowNavMeshReq() {
  // @@protoc_insertion_point(destructor:proto.GMShowNavMeshReq)
  SharedDtor();
}

void GMShowNavMeshReq::SharedDtor() {
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete extent_;
}

void GMShowNavMeshReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMShowNavMeshReq::descriptor() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GMShowNavMeshReq& GMShowNavMeshReq::default_instance() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  return *internal_default_instance();
}

GMShowNavMeshReq* GMShowNavMeshReq::New(::google::protobuf::Arena* arena) const {
  GMShowNavMeshReq* n = new GMShowNavMeshReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GMShowNavMeshReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GMShowNavMeshReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && center_ != NULL) {
    delete center_;
  }
  center_ = NULL;
  if (GetArenaNoVirtual() == NULL && extent_ != NULL) {
    delete extent_;
  }
  extent_ = NULL;
  _internal_metadata_.Clear();
}

bool GMShowNavMeshReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GMShowNavMeshReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.Vector center = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector extent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GMShowNavMeshReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GMShowNavMeshReq)
  return false;
#undef DO_
}

void GMShowNavMeshReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GMShowNavMeshReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Vector center = 1;
  if (this->has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->center_, output);
  }

  // .proto.Vector extent = 5;
  if (this->has_extent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->extent_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GMShowNavMeshReq)
}

::google::protobuf::uint8* GMShowNavMeshReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GMShowNavMeshReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Vector center = 1;
  if (this->has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->center_, deterministic, target);
  }

  // .proto.Vector extent = 5;
  if (this->has_extent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->extent_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GMShowNavMeshReq)
  return target;
}

size_t GMShowNavMeshReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GMShowNavMeshReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.Vector center = 1;
  if (this->has_center()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->center_);
  }

  // .proto.Vector extent = 5;
  if (this->has_extent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extent_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMShowNavMeshReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GMShowNavMeshReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GMShowNavMeshReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GMShowNavMeshReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GMShowNavMeshReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GMShowNavMeshReq)
    MergeFrom(*source);
  }
}

void GMShowNavMeshReq::MergeFrom(const GMShowNavMeshReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GMShowNavMeshReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center()) {
    mutable_center()->::proto::Vector::MergeFrom(from.center());
  }
  if (from.has_extent()) {
    mutable_extent()->::proto::Vector::MergeFrom(from.extent());
  }
}

void GMShowNavMeshReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GMShowNavMeshReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMShowNavMeshReq::CopyFrom(const GMShowNavMeshReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GMShowNavMeshReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMShowNavMeshReq::IsInitialized() const {
  return true;
}

void GMShowNavMeshReq::Swap(GMShowNavMeshReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GMShowNavMeshReq::InternalSwap(GMShowNavMeshReq* other) {
  using std::swap;
  swap(center_, other->center_);
  swap(extent_, other->extent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GMShowNavMeshReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GMShowNavMeshReq

// .proto.Vector center = 1;
bool GMShowNavMeshReq::has_center() const {
  return this != internal_default_instance() && center_ != NULL;
}
void GMShowNavMeshReq::clear_center() {
  if (GetArenaNoVirtual() == NULL && center_ != NULL) delete center_;
  center_ = NULL;
}
const ::proto::Vector& GMShowNavMeshReq::center() const {
  const ::proto::Vector* p = center_;
  // @@protoc_insertion_point(field_get:proto.GMShowNavMeshReq.center)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* GMShowNavMeshReq::mutable_center() {
  
  if (center_ == NULL) {
    center_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.GMShowNavMeshReq.center)
  return center_;
}
::proto::Vector* GMShowNavMeshReq::release_center() {
  // @@protoc_insertion_point(field_release:proto.GMShowNavMeshReq.center)
  
  ::proto::Vector* temp = center_;
  center_ = NULL;
  return temp;
}
void GMShowNavMeshReq::set_allocated_center(::proto::Vector* center) {
  delete center_;
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GMShowNavMeshReq.center)
}

// .proto.Vector extent = 5;
bool GMShowNavMeshReq::has_extent() const {
  return this != internal_default_instance() && extent_ != NULL;
}
void GMShowNavMeshReq::clear_extent() {
  if (GetArenaNoVirtual() == NULL && extent_ != NULL) delete extent_;
  extent_ = NULL;
}
const ::proto::Vector& GMShowNavMeshReq::extent() const {
  const ::proto::Vector* p = extent_;
  // @@protoc_insertion_point(field_get:proto.GMShowNavMeshReq.extent)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* GMShowNavMeshReq::mutable_extent() {
  
  if (extent_ == NULL) {
    extent_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.GMShowNavMeshReq.extent)
  return extent_;
}
::proto::Vector* GMShowNavMeshReq::release_extent() {
  // @@protoc_insertion_point(field_release:proto.GMShowNavMeshReq.extent)
  
  ::proto::Vector* temp = extent_;
  extent_ = NULL;
  return temp;
}
void GMShowNavMeshReq::set_allocated_extent(::proto::Vector* extent) {
  delete extent_;
  extent_ = extent;
  if (extent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GMShowNavMeshReq.extent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBNavMeshPoly::kEdgeTypesFieldNumber;
const int PBNavMeshPoly::kAreaFieldNumber;
const int PBNavMeshPoly::kVectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBNavMeshPoly::PBNavMeshPoly()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PBNavMeshPoly)
}
PBNavMeshPoly::PBNavMeshPoly(const PBNavMeshPoly& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      vects_(from.vects_),
      edge_types_(from.edge_types_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  area_ = from.area_;
  // @@protoc_insertion_point(copy_constructor:proto.PBNavMeshPoly)
}

void PBNavMeshPoly::SharedCtor() {
  area_ = 0;
  _cached_size_ = 0;
}

PBNavMeshPoly::~PBNavMeshPoly() {
  // @@protoc_insertion_point(destructor:proto.PBNavMeshPoly)
  SharedDtor();
}

void PBNavMeshPoly::SharedDtor() {
}

void PBNavMeshPoly::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBNavMeshPoly::descriptor() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBNavMeshPoly& PBNavMeshPoly::default_instance() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBNavMeshPoly* PBNavMeshPoly::New(::google::protobuf::Arena* arena) const {
  PBNavMeshPoly* n = new PBNavMeshPoly;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBNavMeshPoly::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PBNavMeshPoly)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vects_.Clear();
  edge_types_.Clear();
  area_ = 0;
  _internal_metadata_.Clear();
}

bool PBNavMeshPoly::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PBNavMeshPoly)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 area = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 vects = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vects())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58u, input, this->mutable_vects())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.PBNavMeshPoly.EdgeType edge_types = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_edge_types(static_cast< ::proto::PBNavMeshPoly_EdgeType >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_edge_types(static_cast< ::proto::PBNavMeshPoly_EdgeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PBNavMeshPoly)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PBNavMeshPoly)
  return false;
#undef DO_
}

void PBNavMeshPoly::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PBNavMeshPoly)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 area = 6;
  if (this->area() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->area(), output);
  }

  // repeated int32 vects = 7;
  if (this->vects_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _vects_cached_byte_size_));
  }
  for (int i = 0, n = this->vects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->vects(i), output);
  }

  // repeated .proto.PBNavMeshPoly.EdgeType edge_types = 10;
  if (this->edge_types_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_edge_types_cached_byte_size_));
  }
  for (int i = 0, n = this->edge_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->edge_types(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PBNavMeshPoly)
}

::google::protobuf::uint8* PBNavMeshPoly::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PBNavMeshPoly)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 area = 6;
  if (this->area() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->area(), target);
  }

  // repeated int32 vects = 7;
  if (this->vects_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _vects_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->vects_, target);
  }

  // repeated .proto.PBNavMeshPoly.EdgeType edge_types = 10;
  if (this->edge_types_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _edge_types_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->edge_types_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PBNavMeshPoly)
  return target;
}

size_t PBNavMeshPoly::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PBNavMeshPoly)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 vects = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->vects_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vects_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto.PBNavMeshPoly.EdgeType edge_types = 10;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->edge_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->edge_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _edge_types_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 area = 6;
  if (this->area() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->area());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBNavMeshPoly::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PBNavMeshPoly)
  GOOGLE_DCHECK_NE(&from, this);
  const PBNavMeshPoly* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBNavMeshPoly>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PBNavMeshPoly)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PBNavMeshPoly)
    MergeFrom(*source);
  }
}

void PBNavMeshPoly::MergeFrom(const PBNavMeshPoly& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PBNavMeshPoly)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vects_.MergeFrom(from.vects_);
  edge_types_.MergeFrom(from.edge_types_);
  if (from.area() != 0) {
    set_area(from.area());
  }
}

void PBNavMeshPoly::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PBNavMeshPoly)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBNavMeshPoly::CopyFrom(const PBNavMeshPoly& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PBNavMeshPoly)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBNavMeshPoly::IsInitialized() const {
  return true;
}

void PBNavMeshPoly::Swap(PBNavMeshPoly* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBNavMeshPoly::InternalSwap(PBNavMeshPoly* other) {
  using std::swap;
  vects_.InternalSwap(&other->vects_);
  edge_types_.InternalSwap(&other->edge_types_);
  swap(area_, other->area_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBNavMeshPoly::GetMetadata() const {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBNavMeshPoly

// repeated .proto.PBNavMeshPoly.EdgeType edge_types = 10;
int PBNavMeshPoly::edge_types_size() const {
  return edge_types_.size();
}
void PBNavMeshPoly::clear_edge_types() {
  edge_types_.Clear();
}
::proto::PBNavMeshPoly_EdgeType PBNavMeshPoly::edge_types(int index) const {
  // @@protoc_insertion_point(field_get:proto.PBNavMeshPoly.edge_types)
  return static_cast< ::proto::PBNavMeshPoly_EdgeType >(edge_types_.Get(index));
}
void PBNavMeshPoly::set_edge_types(int index, ::proto::PBNavMeshPoly_EdgeType value) {
  edge_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.PBNavMeshPoly.edge_types)
}
void PBNavMeshPoly::add_edge_types(::proto::PBNavMeshPoly_EdgeType value) {
  edge_types_.Add(value);
  // @@protoc_insertion_point(field_add:proto.PBNavMeshPoly.edge_types)
}
const ::google::protobuf::RepeatedField<int>&
PBNavMeshPoly::edge_types() const {
  // @@protoc_insertion_point(field_list:proto.PBNavMeshPoly.edge_types)
  return edge_types_;
}
::google::protobuf::RepeatedField<int>*
PBNavMeshPoly::mutable_edge_types() {
  // @@protoc_insertion_point(field_mutable_list:proto.PBNavMeshPoly.edge_types)
  return &edge_types_;
}

// int32 area = 6;
void PBNavMeshPoly::clear_area() {
  area_ = 0;
}
::google::protobuf::int32 PBNavMeshPoly::area() const {
  // @@protoc_insertion_point(field_get:proto.PBNavMeshPoly.area)
  return area_;
}
void PBNavMeshPoly::set_area(::google::protobuf::int32 value) {
  
  area_ = value;
  // @@protoc_insertion_point(field_set:proto.PBNavMeshPoly.area)
}

// repeated int32 vects = 7;
int PBNavMeshPoly::vects_size() const {
  return vects_.size();
}
void PBNavMeshPoly::clear_vects() {
  vects_.Clear();
}
::google::protobuf::int32 PBNavMeshPoly::vects(int index) const {
  // @@protoc_insertion_point(field_get:proto.PBNavMeshPoly.vects)
  return vects_.Get(index);
}
void PBNavMeshPoly::set_vects(int index, ::google::protobuf::int32 value) {
  vects_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.PBNavMeshPoly.vects)
}
void PBNavMeshPoly::add_vects(::google::protobuf::int32 value) {
  vects_.Add(value);
  // @@protoc_insertion_point(field_add:proto.PBNavMeshPoly.vects)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PBNavMeshPoly::vects() const {
  // @@protoc_insertion_point(field_list:proto.PBNavMeshPoly.vects)
  return vects_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PBNavMeshPoly::mutable_vects() {
  // @@protoc_insertion_point(field_mutable_list:proto.PBNavMeshPoly.vects)
  return &vects_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBNavMeshTile::kVecsFieldNumber;
const int PBNavMeshTile::kPolysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBNavMeshTile::PBNavMeshTile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PBNavMeshTile)
}
PBNavMeshTile::PBNavMeshTile(const PBNavMeshTile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      vecs_(from.vecs_),
      polys_(from.polys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.PBNavMeshTile)
}

void PBNavMeshTile::SharedCtor() {
  _cached_size_ = 0;
}

PBNavMeshTile::~PBNavMeshTile() {
  // @@protoc_insertion_point(destructor:proto.PBNavMeshTile)
  SharedDtor();
}

void PBNavMeshTile::SharedDtor() {
}

void PBNavMeshTile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBNavMeshTile::descriptor() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBNavMeshTile& PBNavMeshTile::default_instance() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBNavMeshTile* PBNavMeshTile::New(::google::protobuf::Arena* arena) const {
  PBNavMeshTile* n = new PBNavMeshTile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBNavMeshTile::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PBNavMeshTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vecs_.Clear();
  polys_.Clear();
  _internal_metadata_.Clear();
}

bool PBNavMeshTile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PBNavMeshTile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.Vector vecs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.PBNavMeshPoly polys = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_polys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PBNavMeshTile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PBNavMeshTile)
  return false;
#undef DO_
}

void PBNavMeshTile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PBNavMeshTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.Vector vecs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vecs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vecs(static_cast<int>(i)), output);
  }

  // repeated .proto.PBNavMeshPoly polys = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->polys(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PBNavMeshTile)
}

::google::protobuf::uint8* PBNavMeshTile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PBNavMeshTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.Vector vecs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vecs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->vecs(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.PBNavMeshPoly polys = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->polys(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PBNavMeshTile)
  return target;
}

size_t PBNavMeshTile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PBNavMeshTile)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.Vector vecs = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->vecs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vecs(static_cast<int>(i)));
    }
  }

  // repeated .proto.PBNavMeshPoly polys = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->polys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->polys(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBNavMeshTile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PBNavMeshTile)
  GOOGLE_DCHECK_NE(&from, this);
  const PBNavMeshTile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBNavMeshTile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PBNavMeshTile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PBNavMeshTile)
    MergeFrom(*source);
  }
}

void PBNavMeshTile::MergeFrom(const PBNavMeshTile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PBNavMeshTile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vecs_.MergeFrom(from.vecs_);
  polys_.MergeFrom(from.polys_);
}

void PBNavMeshTile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PBNavMeshTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBNavMeshTile::CopyFrom(const PBNavMeshTile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PBNavMeshTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBNavMeshTile::IsInitialized() const {
  return true;
}

void PBNavMeshTile::Swap(PBNavMeshTile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBNavMeshTile::InternalSwap(PBNavMeshTile* other) {
  using std::swap;
  vecs_.InternalSwap(&other->vecs_);
  polys_.InternalSwap(&other->polys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBNavMeshTile::GetMetadata() const {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBNavMeshTile

// repeated .proto.Vector vecs = 4;
int PBNavMeshTile::vecs_size() const {
  return vecs_.size();
}
void PBNavMeshTile::clear_vecs() {
  vecs_.Clear();
}
const ::proto::Vector& PBNavMeshTile::vecs(int index) const {
  // @@protoc_insertion_point(field_get:proto.PBNavMeshTile.vecs)
  return vecs_.Get(index);
}
::proto::Vector* PBNavMeshTile::mutable_vecs(int index) {
  // @@protoc_insertion_point(field_mutable:proto.PBNavMeshTile.vecs)
  return vecs_.Mutable(index);
}
::proto::Vector* PBNavMeshTile::add_vecs() {
  // @@protoc_insertion_point(field_add:proto.PBNavMeshTile.vecs)
  return vecs_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::Vector >*
PBNavMeshTile::mutable_vecs() {
  // @@protoc_insertion_point(field_mutable_list:proto.PBNavMeshTile.vecs)
  return &vecs_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::Vector >&
PBNavMeshTile::vecs() const {
  // @@protoc_insertion_point(field_list:proto.PBNavMeshTile.vecs)
  return vecs_;
}

// repeated .proto.PBNavMeshPoly polys = 8;
int PBNavMeshTile::polys_size() const {
  return polys_.size();
}
void PBNavMeshTile::clear_polys() {
  polys_.Clear();
}
const ::proto::PBNavMeshPoly& PBNavMeshTile::polys(int index) const {
  // @@protoc_insertion_point(field_get:proto.PBNavMeshTile.polys)
  return polys_.Get(index);
}
::proto::PBNavMeshPoly* PBNavMeshTile::mutable_polys(int index) {
  // @@protoc_insertion_point(field_mutable:proto.PBNavMeshTile.polys)
  return polys_.Mutable(index);
}
::proto::PBNavMeshPoly* PBNavMeshTile::add_polys() {
  // @@protoc_insertion_point(field_add:proto.PBNavMeshTile.polys)
  return polys_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::PBNavMeshPoly >*
PBNavMeshTile::mutable_polys() {
  // @@protoc_insertion_point(field_mutable_list:proto.PBNavMeshTile.polys)
  return &polys_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::PBNavMeshPoly >&
PBNavMeshTile::polys() const {
  // @@protoc_insertion_point(field_list:proto.PBNavMeshTile.polys)
  return polys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GMShowNavMeshRsp::kTilesFieldNumber;
const int GMShowNavMeshRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GMShowNavMeshRsp::GMShowNavMeshRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GMShowNavMeshRsp)
}
GMShowNavMeshRsp::GMShowNavMeshRsp(const GMShowNavMeshRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tiles_(from.tiles_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.GMShowNavMeshRsp)
}

void GMShowNavMeshRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

GMShowNavMeshRsp::~GMShowNavMeshRsp() {
  // @@protoc_insertion_point(destructor:proto.GMShowNavMeshRsp)
  SharedDtor();
}

void GMShowNavMeshRsp::SharedDtor() {
}

void GMShowNavMeshRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMShowNavMeshRsp::descriptor() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GMShowNavMeshRsp& GMShowNavMeshRsp::default_instance() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  return *internal_default_instance();
}

GMShowNavMeshRsp* GMShowNavMeshRsp::New(::google::protobuf::Arena* arena) const {
  GMShowNavMeshRsp* n = new GMShowNavMeshRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GMShowNavMeshRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GMShowNavMeshRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tiles_.Clear();
  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool GMShowNavMeshRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GMShowNavMeshRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.PBNavMeshTile tiles = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tiles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GMShowNavMeshRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GMShowNavMeshRsp)
  return false;
#undef DO_
}

void GMShowNavMeshRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GMShowNavMeshRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 5;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->retcode(), output);
  }

  // repeated .proto.PBNavMeshTile tiles = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tiles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->tiles(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GMShowNavMeshRsp)
}

::google::protobuf::uint8* GMShowNavMeshRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GMShowNavMeshRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 5;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->retcode(), target);
  }

  // repeated .proto.PBNavMeshTile tiles = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tiles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->tiles(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GMShowNavMeshRsp)
  return target;
}

size_t GMShowNavMeshRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GMShowNavMeshRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.PBNavMeshTile tiles = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->tiles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tiles(static_cast<int>(i)));
    }
  }

  // int32 retcode = 5;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMShowNavMeshRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GMShowNavMeshRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GMShowNavMeshRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GMShowNavMeshRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GMShowNavMeshRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GMShowNavMeshRsp)
    MergeFrom(*source);
  }
}

void GMShowNavMeshRsp::MergeFrom(const GMShowNavMeshRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GMShowNavMeshRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tiles_.MergeFrom(from.tiles_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void GMShowNavMeshRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GMShowNavMeshRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMShowNavMeshRsp::CopyFrom(const GMShowNavMeshRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GMShowNavMeshRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMShowNavMeshRsp::IsInitialized() const {
  return true;
}

void GMShowNavMeshRsp::Swap(GMShowNavMeshRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GMShowNavMeshRsp::InternalSwap(GMShowNavMeshRsp* other) {
  using std::swap;
  tiles_.InternalSwap(&other->tiles_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GMShowNavMeshRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GMShowNavMeshRsp

// repeated .proto.PBNavMeshTile tiles = 11;
int GMShowNavMeshRsp::tiles_size() const {
  return tiles_.size();
}
void GMShowNavMeshRsp::clear_tiles() {
  tiles_.Clear();
}
const ::proto::PBNavMeshTile& GMShowNavMeshRsp::tiles(int index) const {
  // @@protoc_insertion_point(field_get:proto.GMShowNavMeshRsp.tiles)
  return tiles_.Get(index);
}
::proto::PBNavMeshTile* GMShowNavMeshRsp::mutable_tiles(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GMShowNavMeshRsp.tiles)
  return tiles_.Mutable(index);
}
::proto::PBNavMeshTile* GMShowNavMeshRsp::add_tiles() {
  // @@protoc_insertion_point(field_add:proto.GMShowNavMeshRsp.tiles)
  return tiles_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::PBNavMeshTile >*
GMShowNavMeshRsp::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:proto.GMShowNavMeshRsp.tiles)
  return &tiles_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::PBNavMeshTile >&
GMShowNavMeshRsp::tiles() const {
  // @@protoc_insertion_point(field_list:proto.GMShowNavMeshRsp.tiles)
  return tiles_;
}

// int32 retcode = 5;
void GMShowNavMeshRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GMShowNavMeshRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GMShowNavMeshRsp.retcode)
  return retcode_;
}
void GMShowNavMeshRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GMShowNavMeshRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbNavMeshStatsInfo::kAuthorityAiInCombatFieldNumber;
const int PbNavMeshStatsInfo::kNoAuthorityAiInCombatFieldNumber;
const int PbNavMeshStatsInfo::kTotalAuthorityAiFieldNumber;
const int PbNavMeshStatsInfo::kTotalNoAuthorityAiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbNavMeshStatsInfo::PbNavMeshStatsInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PbNavMeshStatsInfo)
}
PbNavMeshStatsInfo::PbNavMeshStatsInfo(const PbNavMeshStatsInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_authority_ai_, &from.total_authority_ai_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_no_authority_ai_) -
    reinterpret_cast<char*>(&total_authority_ai_)) + sizeof(total_no_authority_ai_));
  // @@protoc_insertion_point(copy_constructor:proto.PbNavMeshStatsInfo)
}

void PbNavMeshStatsInfo::SharedCtor() {
  ::memset(&total_authority_ai_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_no_authority_ai_) -
      reinterpret_cast<char*>(&total_authority_ai_)) + sizeof(total_no_authority_ai_));
  _cached_size_ = 0;
}

PbNavMeshStatsInfo::~PbNavMeshStatsInfo() {
  // @@protoc_insertion_point(destructor:proto.PbNavMeshStatsInfo)
  SharedDtor();
}

void PbNavMeshStatsInfo::SharedDtor() {
}

void PbNavMeshStatsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbNavMeshStatsInfo::descriptor() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PbNavMeshStatsInfo& PbNavMeshStatsInfo::default_instance() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  return *internal_default_instance();
}

PbNavMeshStatsInfo* PbNavMeshStatsInfo::New(::google::protobuf::Arena* arena) const {
  PbNavMeshStatsInfo* n = new PbNavMeshStatsInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PbNavMeshStatsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PbNavMeshStatsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_authority_ai_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_no_authority_ai_) -
      reinterpret_cast<char*>(&total_authority_ai_)) + sizeof(total_no_authority_ai_));
  _internal_metadata_.Clear();
}

bool PbNavMeshStatsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PbNavMeshStatsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 total_authority_ai = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_authority_ai_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 authority_ai_in_combat = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &authority_ai_in_combat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 no_authority_ai_in_combat = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &no_authority_ai_in_combat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 total_no_authority_ai = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_no_authority_ai_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PbNavMeshStatsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PbNavMeshStatsInfo)
  return false;
#undef DO_
}

void PbNavMeshStatsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PbNavMeshStatsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_authority_ai = 8;
  if (this->total_authority_ai() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->total_authority_ai(), output);
  }

  // int32 authority_ai_in_combat = 10;
  if (this->authority_ai_in_combat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->authority_ai_in_combat(), output);
  }

  // int32 no_authority_ai_in_combat = 11;
  if (this->no_authority_ai_in_combat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->no_authority_ai_in_combat(), output);
  }

  // int32 total_no_authority_ai = 13;
  if (this->total_no_authority_ai() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->total_no_authority_ai(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PbNavMeshStatsInfo)
}

::google::protobuf::uint8* PbNavMeshStatsInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PbNavMeshStatsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_authority_ai = 8;
  if (this->total_authority_ai() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->total_authority_ai(), target);
  }

  // int32 authority_ai_in_combat = 10;
  if (this->authority_ai_in_combat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->authority_ai_in_combat(), target);
  }

  // int32 no_authority_ai_in_combat = 11;
  if (this->no_authority_ai_in_combat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->no_authority_ai_in_combat(), target);
  }

  // int32 total_no_authority_ai = 13;
  if (this->total_no_authority_ai() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->total_no_authority_ai(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PbNavMeshStatsInfo)
  return target;
}

size_t PbNavMeshStatsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PbNavMeshStatsInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 total_authority_ai = 8;
  if (this->total_authority_ai() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_authority_ai());
  }

  // int32 authority_ai_in_combat = 10;
  if (this->authority_ai_in_combat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->authority_ai_in_combat());
  }

  // int32 no_authority_ai_in_combat = 11;
  if (this->no_authority_ai_in_combat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->no_authority_ai_in_combat());
  }

  // int32 total_no_authority_ai = 13;
  if (this->total_no_authority_ai() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_no_authority_ai());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbNavMeshStatsInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PbNavMeshStatsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PbNavMeshStatsInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PbNavMeshStatsInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PbNavMeshStatsInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PbNavMeshStatsInfo)
    MergeFrom(*source);
  }
}

void PbNavMeshStatsInfo::MergeFrom(const PbNavMeshStatsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PbNavMeshStatsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_authority_ai() != 0) {
    set_total_authority_ai(from.total_authority_ai());
  }
  if (from.authority_ai_in_combat() != 0) {
    set_authority_ai_in_combat(from.authority_ai_in_combat());
  }
  if (from.no_authority_ai_in_combat() != 0) {
    set_no_authority_ai_in_combat(from.no_authority_ai_in_combat());
  }
  if (from.total_no_authority_ai() != 0) {
    set_total_no_authority_ai(from.total_no_authority_ai());
  }
}

void PbNavMeshStatsInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PbNavMeshStatsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbNavMeshStatsInfo::CopyFrom(const PbNavMeshStatsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PbNavMeshStatsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbNavMeshStatsInfo::IsInitialized() const {
  return true;
}

void PbNavMeshStatsInfo::Swap(PbNavMeshStatsInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbNavMeshStatsInfo::InternalSwap(PbNavMeshStatsInfo* other) {
  using std::swap;
  swap(total_authority_ai_, other->total_authority_ai_);
  swap(authority_ai_in_combat_, other->authority_ai_in_combat_);
  swap(no_authority_ai_in_combat_, other->no_authority_ai_in_combat_);
  swap(total_no_authority_ai_, other->total_no_authority_ai_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PbNavMeshStatsInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PbNavMeshStatsInfo

// int32 authority_ai_in_combat = 10;
void PbNavMeshStatsInfo::clear_authority_ai_in_combat() {
  authority_ai_in_combat_ = 0;
}
::google::protobuf::int32 PbNavMeshStatsInfo::authority_ai_in_combat() const {
  // @@protoc_insertion_point(field_get:proto.PbNavMeshStatsInfo.authority_ai_in_combat)
  return authority_ai_in_combat_;
}
void PbNavMeshStatsInfo::set_authority_ai_in_combat(::google::protobuf::int32 value) {
  
  authority_ai_in_combat_ = value;
  // @@protoc_insertion_point(field_set:proto.PbNavMeshStatsInfo.authority_ai_in_combat)
}

// int32 no_authority_ai_in_combat = 11;
void PbNavMeshStatsInfo::clear_no_authority_ai_in_combat() {
  no_authority_ai_in_combat_ = 0;
}
::google::protobuf::int32 PbNavMeshStatsInfo::no_authority_ai_in_combat() const {
  // @@protoc_insertion_point(field_get:proto.PbNavMeshStatsInfo.no_authority_ai_in_combat)
  return no_authority_ai_in_combat_;
}
void PbNavMeshStatsInfo::set_no_authority_ai_in_combat(::google::protobuf::int32 value) {
  
  no_authority_ai_in_combat_ = value;
  // @@protoc_insertion_point(field_set:proto.PbNavMeshStatsInfo.no_authority_ai_in_combat)
}

// int32 total_authority_ai = 8;
void PbNavMeshStatsInfo::clear_total_authority_ai() {
  total_authority_ai_ = 0;
}
::google::protobuf::int32 PbNavMeshStatsInfo::total_authority_ai() const {
  // @@protoc_insertion_point(field_get:proto.PbNavMeshStatsInfo.total_authority_ai)
  return total_authority_ai_;
}
void PbNavMeshStatsInfo::set_total_authority_ai(::google::protobuf::int32 value) {
  
  total_authority_ai_ = value;
  // @@protoc_insertion_point(field_set:proto.PbNavMeshStatsInfo.total_authority_ai)
}

// int32 total_no_authority_ai = 13;
void PbNavMeshStatsInfo::clear_total_no_authority_ai() {
  total_no_authority_ai_ = 0;
}
::google::protobuf::int32 PbNavMeshStatsInfo::total_no_authority_ai() const {
  // @@protoc_insertion_point(field_get:proto.PbNavMeshStatsInfo.total_no_authority_ai)
  return total_no_authority_ai_;
}
void PbNavMeshStatsInfo::set_total_no_authority_ai(::google::protobuf::int32 value) {
  
  total_no_authority_ai_ = value;
  // @@protoc_insertion_point(field_set:proto.PbNavMeshStatsInfo.total_no_authority_ai)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavMeshStatsNotify::kInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavMeshStatsNotify::NavMeshStatsNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.NavMeshStatsNotify)
}
NavMeshStatsNotify::NavMeshStatsNotify(const NavMeshStatsNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      infos_(from.infos_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.NavMeshStatsNotify)
}

void NavMeshStatsNotify::SharedCtor() {
  _cached_size_ = 0;
}

NavMeshStatsNotify::~NavMeshStatsNotify() {
  // @@protoc_insertion_point(destructor:proto.NavMeshStatsNotify)
  SharedDtor();
}

void NavMeshStatsNotify::SharedDtor() {
}

void NavMeshStatsNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NavMeshStatsNotify::descriptor() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavMeshStatsNotify& NavMeshStatsNotify::default_instance() {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::InitDefaults();
  return *internal_default_instance();
}

NavMeshStatsNotify* NavMeshStatsNotify::New(::google::protobuf::Arena* arena) const {
  NavMeshStatsNotify* n = new NavMeshStatsNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NavMeshStatsNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.NavMeshStatsNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  _internal_metadata_.Clear();
}

bool NavMeshStatsNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.NavMeshStatsNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.PbNavMeshStatsInfo infos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.NavMeshStatsNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.NavMeshStatsNotify)
  return false;
#undef DO_
}

void NavMeshStatsNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.NavMeshStatsNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.PbNavMeshStatsInfo infos = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->infos(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.NavMeshStatsNotify)
}

::google::protobuf::uint8* NavMeshStatsNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.NavMeshStatsNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.PbNavMeshStatsInfo infos = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->infos(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.NavMeshStatsNotify)
  return target;
}

size_t NavMeshStatsNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.NavMeshStatsNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.PbNavMeshStatsInfo infos = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infos(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavMeshStatsNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.NavMeshStatsNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const NavMeshStatsNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavMeshStatsNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.NavMeshStatsNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.NavMeshStatsNotify)
    MergeFrom(*source);
  }
}

void NavMeshStatsNotify::MergeFrom(const NavMeshStatsNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.NavMeshStatsNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void NavMeshStatsNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.NavMeshStatsNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavMeshStatsNotify::CopyFrom(const NavMeshStatsNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.NavMeshStatsNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavMeshStatsNotify::IsInitialized() const {
  return true;
}

void NavMeshStatsNotify::Swap(NavMeshStatsNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavMeshStatsNotify::InternalSwap(NavMeshStatsNotify* other) {
  using std::swap;
  infos_.InternalSwap(&other->infos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NavMeshStatsNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fpathfinding_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fpathfinding_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NavMeshStatsNotify

// repeated .proto.PbNavMeshStatsInfo infos = 4;
int NavMeshStatsNotify::infos_size() const {
  return infos_.size();
}
void NavMeshStatsNotify::clear_infos() {
  infos_.Clear();
}
const ::proto::PbNavMeshStatsInfo& NavMeshStatsNotify::infos(int index) const {
  // @@protoc_insertion_point(field_get:proto.NavMeshStatsNotify.infos)
  return infos_.Get(index);
}
::proto::PbNavMeshStatsInfo* NavMeshStatsNotify::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:proto.NavMeshStatsNotify.infos)
  return infos_.Mutable(index);
}
::proto::PbNavMeshStatsInfo* NavMeshStatsNotify::add_infos() {
  // @@protoc_insertion_point(field_add:proto.NavMeshStatsNotify.infos)
  return infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::PbNavMeshStatsInfo >*
NavMeshStatsNotify::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:proto.NavMeshStatsNotify.infos)
  return &infos_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::PbNavMeshStatsInfo >&
NavMeshStatsNotify::infos() const {
  // @@protoc_insertion_point(field_list:proto.NavMeshStatsNotify.infos)
  return infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
