// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: define.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "define.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
class ParamListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ParamList>
     _instance;
} _ParamList_default_instance_;
class PropValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PropValue>
     _instance;
  ::google::protobuf::int64 ival_;
  float fval_;
} _PropValue_default_instance_;
class Uint32PairDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Uint32Pair>
     _instance;
} _Uint32Pair_default_instance_;
class RegionSimpleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RegionSimpleInfo>
     _instance;
} _RegionSimpleInfo_default_instance_;
class QueryRegionListHttpRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QueryRegionListHttpRsp>
     _instance;
} _QueryRegionListHttpRsp_default_instance_;
class ForceUpdateInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ForceUpdateInfo>
     _instance;
} _ForceUpdateInfo_default_instance_;
class StopServerInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StopServerInfo>
     _instance;
} _StopServerInfo_default_instance_;
class ResVersionConfigDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResVersionConfig>
     _instance;
} _ResVersionConfig_default_instance_;
class RegionInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RegionInfo>
     _instance;
} _RegionInfo_default_instance_;
class QueryCurrRegionHttpRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QueryCurrRegionHttpRsp>
     _instance;
  const ::proto::ForceUpdateInfo* force_udpate_;
  const ::proto::StopServerInfo* stop_server_;
} _QueryCurrRegionHttpRsp_default_instance_;
class PlayerUidExtInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlayerUidExtInfo>
     _instance;
} _PlayerUidExtInfo_default_instance_;
class ReliquaryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Reliquary>
     _instance;
} _Reliquary_default_instance_;
class Weapon_AffixMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Weapon::Weapon_AffixMapEntry>
     _instance;
} _Weapon_AffixMapEntry_default_instance_;
class WeaponDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Weapon>
     _instance;
} _Weapon_default_instance_;
class MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MaterialDeleteInfo_CountDownDelete::MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry>
     _instance;
} _MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry_default_instance_;
class MaterialDeleteInfo_CountDownDeleteDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MaterialDeleteInfo_CountDownDelete>
     _instance;
} _MaterialDeleteInfo_CountDownDelete_default_instance_;
class MaterialDeleteInfo_DateTimeDeleteDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MaterialDeleteInfo_DateTimeDelete>
     _instance;
} _MaterialDeleteInfo_DateTimeDelete_default_instance_;
class MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MaterialDeleteInfo_DelayWeekCountDownDelete::MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry>
     _instance;
} _MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry_default_instance_;
class MaterialDeleteInfo_DelayWeekCountDownDeleteDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MaterialDeleteInfo_DelayWeekCountDownDelete>
     _instance;
} _MaterialDeleteInfo_DelayWeekCountDownDelete_default_instance_;
class MaterialDeleteInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MaterialDeleteInfo>
     _instance;
  const ::proto::MaterialDeleteInfo_CountDownDelete* count_down_delete_;
  const ::proto::MaterialDeleteInfo_DateTimeDelete* date_delete_;
  const ::proto::MaterialDeleteInfo_DelayWeekCountDownDelete* delay_week_count_down_delete_;
} _MaterialDeleteInfo_default_instance_;
class MaterialDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Material>
     _instance;
} _Material_default_instance_;
class EquipDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Equip>
     _instance;
  const ::proto::Reliquary* reliquary_;
  const ::proto::Weapon* weapon_;
} _Equip_default_instance_;
class FurnitureDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Furniture>
     _instance;
} _Furniture_default_instance_;
class ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Item>
     _instance;
  const ::proto::Material* material_;
  const ::proto::Equip* equip_;
  const ::proto::Furniture* furniture_;
} _Item_default_instance_;
class ItemParamDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ItemParam>
     _instance;
} _ItemParam_default_instance_;
class EquipParamDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EquipParam>
     _instance;
} _EquipParam_default_instance_;
class EquipParamListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EquipParamList>
     _instance;
} _EquipParamList_default_instance_;
class RewardDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Reward>
     _instance;
} _Reward_default_instance_;
class AbilityStringDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AbilityString>
     _instance;
  ::google::protobuf::internal::ArenaStringPtr str_;
  ::google::protobuf::uint32 hash_;
} _AbilityString_default_instance_;
class AbilityFloatValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AbilityFloatValue>
     _instance;
} _AbilityFloatValue_default_instance_;
class AbilityScalarValueEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AbilityScalarValueEntry>
     _instance;
  float float_value_;
  ::google::protobuf::internal::ArenaStringPtr string_value_;
  ::google::protobuf::int32 int_value_;
  ::google::protobuf::uint32 uint_value_;
} _AbilityScalarValueEntry_default_instance_;
class AbilityAppliedAbilityDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AbilityAppliedAbility>
     _instance;
} _AbilityAppliedAbility_default_instance_;
class AbilityAttachedModifierDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AbilityAttachedModifier>
     _instance;
} _AbilityAttachedModifier_default_instance_;
class ModifierDurabilityDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ModifierDurability>
     _instance;
} _ModifierDurability_default_instance_;
class AbilityAppliedModifierDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AbilityAppliedModifier>
     _instance;
} _AbilityAppliedModifier_default_instance_;
class MassivePropParamDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MassivePropParam>
     _instance;
} _MassivePropParam_default_instance_;
class MassivePropSyncInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MassivePropSyncInfo>
     _instance;
} _MassivePropSyncInfo_default_instance_;
class BreakoutVector2DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BreakoutVector2>
     _instance;
} _BreakoutVector2_default_instance_;
class BreakoutBrickInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BreakoutBrickInfo>
     _instance;
} _BreakoutBrickInfo_default_instance_;
class BreakoutPhysicalObjectModifierDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BreakoutPhysicalObjectModifier>
     _instance;
} _BreakoutPhysicalObjectModifier_default_instance_;
class BreakoutPhysicalObjectDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BreakoutPhysicalObject>
     _instance;
} _BreakoutPhysicalObject_default_instance_;
class BreakoutSpawnPointDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BreakoutSpawnPoint>
     _instance;
} _BreakoutSpawnPoint_default_instance_;
class BreakoutElementReactionCounterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BreakoutElementReactionCounter>
     _instance;
} _BreakoutElementReactionCounter_default_instance_;
class BreakoutSyncConnectUidInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BreakoutSyncConnectUidInfo>
     _instance;
} _BreakoutSyncConnectUidInfo_default_instance_;
class BreakoutSnapShotDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BreakoutSnapShot>
     _instance;
} _BreakoutSnapShot_default_instance_;
class BreakoutActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BreakoutAction>
     _instance;
} _BreakoutAction_default_instance_;
class AbilityMixinRecoverInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AbilityMixinRecoverInfo>
     _instance;
  ::google::protobuf::uint32 instanced_ability_id_;
  ::google::protobuf::uint32 instanced_modifier_id_;
} _AbilityMixinRecoverInfo_default_instance_;
class AbilitySyncStateInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AbilitySyncStateInfo>
     _instance;
} _AbilitySyncStateInfo_default_instance_;
class AbilityEmbryoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AbilityEmbryo>
     _instance;
} _AbilityEmbryo_default_instance_;
class AbilityControlBlockDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AbilityControlBlock>
     _instance;
} _AbilityControlBlock_default_instance_;
class VectorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Vector>
     _instance;
} _Vector_default_instance_;
class VectorPlaneDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VectorPlane>
     _instance;
} _VectorPlane_default_instance_;
class Vector3IntDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Vector3Int>
     _instance;
} _Vector3Int_default_instance_;
class EntityMoveInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EntityMoveInfo>
     _instance;
} _EntityMoveInfo_default_instance_;
class MotionInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MotionInfo>
     _instance;
} _MotionInfo_default_instance_;
class PlaceInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlaceInfo>
     _instance;
} _PlaceInfo_default_instance_;
class SceneWeaponInfo_AffixMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneWeaponInfo::SceneWeaponInfo_AffixMapEntry>
     _instance;
} _SceneWeaponInfo_AffixMapEntry_default_instance_;
class SceneWeaponInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneWeaponInfo>
     _instance;
} _SceneWeaponInfo_default_instance_;
class SceneReliquaryInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneReliquaryInfo>
     _instance;
} _SceneReliquaryInfo_default_instance_;
class ServerBuffDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerBuff>
     _instance;
} _ServerBuff_default_instance_;
class CurVehicleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CurVehicleInfo>
     _instance;
} _CurVehicleInfo_default_instance_;
class AvatarExcelInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarExcelInfo>
     _instance;
} _AvatarExcelInfo_default_instance_;
class SceneAvatarInfo_SkillLevelMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneAvatarInfo::SceneAvatarInfo_SkillLevelMapEntry>
     _instance;
} _SceneAvatarInfo_SkillLevelMapEntry_default_instance_;
class SceneAvatarInfo_ProudSkillExtraLevelMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneAvatarInfo::SceneAvatarInfo_ProudSkillExtraLevelMapEntry>
     _instance;
} _SceneAvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_;
class SceneAvatarInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneAvatarInfo>
     _instance;
} _SceneAvatarInfo_default_instance_;
class SceneFishInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneFishInfo>
     _instance;
} _SceneFishInfo_default_instance_;
class FishtankFishInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FishtankFishInfo>
     _instance;
} _FishtankFishInfo_default_instance_;
class SceneMonsterInfo_SummonTagMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneMonsterInfo::SceneMonsterInfo_SummonTagMapEntry>
     _instance;
} _SceneMonsterInfo_SummonTagMapEntry_default_instance_;
class SceneMonsterInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneMonsterInfo>
     _instance;
  const ::proto::SceneFishInfo* fish_info_;
  const ::proto::FishtankFishInfo* fishtank_fish_info_;
} _SceneMonsterInfo_default_instance_;
class SceneNpcInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneNpcInfo>
     _instance;
} _SceneNpcInfo_default_instance_;
class WorktopInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WorktopInfo>
     _instance;
} _WorktopInfo_default_instance_;
class MathQuaternionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MathQuaternion>
     _instance;
} _MathQuaternion_default_instance_;
class PlatformInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlatformInfo>
     _instance;
} _PlatformInfo_default_instance_;
class RoutePointDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RoutePoint>
     _instance;
  float velocity_;
  float time_;
  const ::proto::Vector* rotation_;
  const ::proto::MathQuaternion* rotation_speed_;
  const ::proto::MathQuaternion* axis_speed_;
} _RoutePoint_default_instance_;
class RouteDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Route>
     _instance;
} _Route_default_instance_;
class MonsterRouteDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MonsterRoute>
     _instance;
} _MonsterRoute_default_instance_;
class WeatherInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WeatherInfo>
     _instance;
} _WeatherInfo_default_instance_;
class ClientGadgetInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ClientGadgetInfo>
     _instance;
} _ClientGadgetInfo_default_instance_;
class AbilityGadgetInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AbilityGadgetInfo>
     _instance;
} _AbilityGadgetInfo_default_instance_;
class GatherGadgetInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GatherGadgetInfo>
     _instance;
} _GatherGadgetInfo_default_instance_;
class StatueGadgetInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StatueGadgetInfo>
     _instance;
} _StatueGadgetInfo_default_instance_;
class WeeklyBossResinDiscountInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WeeklyBossResinDiscountInfo>
     _instance;
} _WeeklyBossResinDiscountInfo_default_instance_;
class BossChestInfo_UidDiscountMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BossChestInfo::BossChestInfo_UidDiscountMapEntry>
     _instance;
} _BossChestInfo_UidDiscountMapEntry_default_instance_;
class BossChestInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BossChestInfo>
     _instance;
} _BossChestInfo_default_instance_;
class BlossomChestInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BlossomChestInfo>
     _instance;
} _BlossomChestInfo_default_instance_;
class GadgetCrucibleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GadgetCrucibleInfo>
     _instance;
} _GadgetCrucibleInfo_default_instance_;
class GadgetPlayInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GadgetPlayInfo>
     _instance;
  const ::proto::GadgetCrucibleInfo* crucible_info_;
} _GadgetPlayInfo_default_instance_;
class MpPlayRewardInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MpPlayRewardInfo>
     _instance;
} _MpPlayRewardInfo_default_instance_;
class GadgetGeneralRewardInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GadgetGeneralRewardInfo>
     _instance;
} _GadgetGeneralRewardInfo_default_instance_;
class OfferingInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OfferingInfo>
     _instance;
} _OfferingInfo_default_instance_;
class BuildingInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BuildingInfo>
     _instance;
} _BuildingInfo_default_instance_;
class FoundationInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FoundationInfo>
     _instance;
} _FoundationInfo_default_instance_;
class VehicleMemberDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VehicleMember>
     _instance;
} _VehicleMember_default_instance_;
class VehicleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VehicleInfo>
     _instance;
} _VehicleInfo_default_instance_;
class EchoShellInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EchoShellInfo>
     _instance;
} _EchoShellInfo_default_instance_;
class ScreenInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScreenInfo>
     _instance;
} _ScreenInfo_default_instance_;
class FishPoolInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FishPoolInfo>
     _instance;
} _FishPoolInfo_default_instance_;
class CustomCommonNodeInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CustomCommonNodeInfo>
     _instance;
} _CustomCommonNodeInfo_default_instance_;
class CustomGadgetTreeInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CustomGadgetTreeInfo>
     _instance;
} _CustomGadgetTreeInfo_default_instance_;
class RoguelikeGadgetInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RoguelikeGadgetInfo>
     _instance;
} _RoguelikeGadgetInfo_default_instance_;
class NightCrowGadgetInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NightCrowGadgetInfo>
     _instance;
} _NightCrowGadgetInfo_default_instance_;
class DeshretObeliskGadgetInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeshretObeliskGadgetInfo>
     _instance;
} _DeshretObeliskGadgetInfo_default_instance_;
class CoinCollectOperatorInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CoinCollectOperatorInfo>
     _instance;
} _CoinCollectOperatorInfo_default_instance_;
class SceneGadgetInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGadgetInfo>
     _instance;
  const ::proto::Item* trifle_item_;
  const ::proto::GatherGadgetInfo* gather_gadget_;
  const ::proto::WorktopInfo* worktop_;
  const ::proto::ClientGadgetInfo* client_gadget_;
  const ::proto::WeatherInfo* weather_;
  const ::proto::AbilityGadgetInfo* ability_gadget_;
  const ::proto::StatueGadgetInfo* statue_gadget_;
  const ::proto::BossChestInfo* boss_chest_;
  const ::proto::BlossomChestInfo* blossom_chest_;
  const ::proto::MpPlayRewardInfo* mp_play_reward_;
  const ::proto::GadgetGeneralRewardInfo* general_reward_;
  const ::proto::OfferingInfo* offering_info_;
  const ::proto::FoundationInfo* foundation_info_;
  const ::proto::VehicleInfo* vehicle_info_;
  const ::proto::EchoShellInfo* shell_info_;
  const ::proto::ScreenInfo* screen_info_;
  const ::proto::FishPoolInfo* fish_pool_info_;
  const ::proto::CustomGadgetTreeInfo* custom_gadget_tree_info_;
  const ::proto::RoguelikeGadgetInfo* roguelike_gadget_info_;
  const ::proto::NightCrowGadgetInfo* night_crow_gadget_info_;
  const ::proto::DeshretObeliskGadgetInfo* deshret_obelisk_gadget_info_;
  const ::proto::CoinCollectOperatorInfo* coin_collect_operator_info_;
} _SceneGadgetInfo_default_instance_;
class AnimatorParameterValueInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AnimatorParameterValueInfo>
     _instance;
  ::google::protobuf::int32 int_val_;
  float float_val_;
  bool bool_val_;
} _AnimatorParameterValueInfo_default_instance_;
class ServantInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServantInfo>
     _instance;
} _ServantInfo_default_instance_;
class SceneEntityAiInfo_SkillCdMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneEntityAiInfo::SceneEntityAiInfo_SkillCdMapEntry>
     _instance;
} _SceneEntityAiInfo_SkillCdMapEntry_default_instance_;
class SceneEntityAiInfo_AiThreatMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneEntityAiInfo::SceneEntityAiInfo_AiThreatMapEntry>
     _instance;
} _SceneEntityAiInfo_AiThreatMapEntry_default_instance_;
class SceneEntityAiInfo_SkillGroupCdMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneEntityAiInfo::SceneEntityAiInfo_SkillGroupCdMapEntry>
     _instance;
} _SceneEntityAiInfo_SkillGroupCdMapEntry_default_instance_;
class SceneEntityAiInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneEntityAiInfo>
     _instance;
} _SceneEntityAiInfo_default_instance_;
class EntityRendererChangedInfo_ChangedRenderersEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EntityRendererChangedInfo::EntityRendererChangedInfo_ChangedRenderersEntry>
     _instance;
} _EntityRendererChangedInfo_ChangedRenderersEntry_default_instance_;
class EntityRendererChangedInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EntityRendererChangedInfo>
     _instance;
} _EntityRendererChangedInfo_default_instance_;
class PropPairDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PropPair>
     _instance;
} _PropPair_default_instance_;
class FightPropPairDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightPropPair>
     _instance;
} _FightPropPair_default_instance_;
class AnimatorParameterValueInfoPairDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AnimatorParameterValueInfoPair>
     _instance;
} _AnimatorParameterValueInfoPair_default_instance_;
class EntityEnvironmentInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EntityEnvironmentInfo>
     _instance;
} _EntityEnvironmentInfo_default_instance_;
class EntityClientExtraInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EntityClientExtraInfo>
     _instance;
} _EntityClientExtraInfo_default_instance_;
class EntityAuthorityInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EntityAuthorityInfo>
     _instance;
} _EntityAuthorityInfo_default_instance_;
class SceneEntityInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneEntityInfo>
     _instance;
  const ::proto::SceneAvatarInfo* avatar_;
  const ::proto::SceneMonsterInfo* monster_;
  const ::proto::SceneNpcInfo* npc_;
  const ::proto::SceneGadgetInfo* gadget_;
} _SceneEntityInfo_default_instance_;
class CreateGadgetInfo_ChestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreateGadgetInfo_Chest>
     _instance;
} _CreateGadgetInfo_Chest_default_instance_;
class CreateGadgetInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreateGadgetInfo>
     _instance;
} _CreateGadgetInfo_default_instance_;
class CreateEntityInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreateEntityInfo>
     _instance;
  ::google::protobuf::uint32 monster_id_;
  ::google::protobuf::uint32 npc_id_;
  ::google::protobuf::uint32 gadget_id_;
  ::google::protobuf::uint32 item_id_;
  const ::proto::CreateGadgetInfo* gadget_;
} _CreateEntityInfo_default_instance_;
class TrialAvatarGrantRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TrialAvatarGrantRecord>
     _instance;
} _TrialAvatarGrantRecord_default_instance_;
class TrialAvatarInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TrialAvatarInfo>
     _instance;
} _TrialAvatarInfo_default_instance_;
class AvatarSkillInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarSkillInfo>
     _instance;
} _AvatarSkillInfo_default_instance_;
class FetterDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FetterData>
     _instance;
} _FetterData_default_instance_;
class AvatarFetterInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarFetterInfo>
     _instance;
} _AvatarFetterInfo_default_instance_;
class AvatarExpeditionInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarExpeditionInfo>
     _instance;
} _AvatarExpeditionInfo_default_instance_;
class AvatarEquipAffixInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarEquipAffixInfo>
     _instance;
} _AvatarEquipAffixInfo_default_instance_;
class AvatarInfo_PropMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarInfo::AvatarInfo_PropMapEntry>
     _instance;
} _AvatarInfo_PropMapEntry_default_instance_;
class AvatarInfo_FightPropMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarInfo::AvatarInfo_FightPropMapEntry>
     _instance;
} _AvatarInfo_FightPropMapEntry_default_instance_;
class AvatarInfo_SkillMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarInfo::AvatarInfo_SkillMapEntry>
     _instance;
} _AvatarInfo_SkillMapEntry_default_instance_;
class AvatarInfo_SkillLevelMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarInfo::AvatarInfo_SkillLevelMapEntry>
     _instance;
} _AvatarInfo_SkillLevelMapEntry_default_instance_;
class AvatarInfo_ProudSkillExtraLevelMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarInfo::AvatarInfo_ProudSkillExtraLevelMapEntry>
     _instance;
} _AvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_;
class AvatarInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarInfo>
     _instance;
} _AvatarInfo_default_instance_;
class ShowEquipDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShowEquip>
     _instance;
  const ::proto::Reliquary* reliquary_;
  const ::proto::Weapon* weapon_;
} _ShowEquip_default_instance_;
class ShowAvatarInfo_PropMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShowAvatarInfo::ShowAvatarInfo_PropMapEntry>
     _instance;
} _ShowAvatarInfo_PropMapEntry_default_instance_;
class ShowAvatarInfo_FightPropMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShowAvatarInfo::ShowAvatarInfo_FightPropMapEntry>
     _instance;
} _ShowAvatarInfo_FightPropMapEntry_default_instance_;
class ShowAvatarInfo_SkillLevelMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShowAvatarInfo::ShowAvatarInfo_SkillLevelMapEntry>
     _instance;
} _ShowAvatarInfo_SkillLevelMapEntry_default_instance_;
class ShowAvatarInfo_ProudSkillExtraLevelMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShowAvatarInfo::ShowAvatarInfo_ProudSkillExtraLevelMapEntry>
     _instance;
} _ShowAvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_;
class ShowAvatarInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShowAvatarInfo>
     _instance;
} _ShowAvatarInfo_default_instance_;
class Quest_LackedNpcMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Quest::Quest_LackedNpcMapEntry>
     _instance;
} _Quest_LackedNpcMapEntry_default_instance_;
class Quest_LackedPlaceMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Quest::Quest_LackedPlaceMapEntry>
     _instance;
} _Quest_LackedPlaceMapEntry_default_instance_;
class QuestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Quest>
     _instance;
} _Quest_default_instance_;
class NpcPositionInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NpcPositionInfo>
     _instance;
} _NpcPositionInfo_default_instance_;
class MailTextContentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MailTextContent>
     _instance;
} _MailTextContent_default_instance_;
class MailItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MailItem>
     _instance;
} _MailItem_default_instance_;
class MailDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MailData>
     _instance;
} _MailData_default_instance_;
class OnlinePlayerInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OnlinePlayerInfo>
     _instance;
} _OnlinePlayerInfo_default_instance_;
class BirthdayDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Birthday>
     _instance;
} _Birthday_default_instance_;
class MapMarkPointDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MapMarkPoint>
     _instance;
} _MapMarkPoint_default_instance_;
class MassiveWaterInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MassiveWaterInfo>
     _instance;
} _MassiveWaterInfo_default_instance_;
class MassiveGrassInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MassiveGrassInfo>
     _instance;
} _MassiveGrassInfo_default_instance_;
class MassiveBoxInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MassiveBoxInfo>
     _instance;
} _MassiveBoxInfo_default_instance_;
class ClientMassiveEntityDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ClientMassiveEntity>
     _instance;
  const ::proto::MassiveWaterInfo* water_info_;
  const ::proto::MassiveGrassInfo* grass_info_;
  const ::proto::MassiveBoxInfo* box_info_;
} _ClientMassiveEntity_default_instance_;
class ShapeSphereDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShapeSphere>
     _instance;
} _ShapeSphere_default_instance_;
class ShapeBoxDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShapeBox>
     _instance;
} _ShapeBox_default_instance_;
class ServerMassiveEntityDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerMassiveEntity>
     _instance;
  const ::proto::MassiveWaterInfo* water_info_;
  const ::proto::MassiveGrassInfo* grass_info_;
  const ::proto::MassiveBoxInfo* box_info_;
} _ServerMassiveEntity_default_instance_;
class MassiveEntityStateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MassiveEntityState>
     _instance;
} _MassiveEntityState_default_instance_;
class EntityClientDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EntityClientData>
     _instance;
} _EntityClientData_default_instance_;
class BlockInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BlockInfo>
     _instance;
} _BlockInfo_default_instance_;
class ShopMcoinProductDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShopMcoinProduct>
     _instance;
} _ShopMcoinProduct_default_instance_;
class ShopCardProduct_ResinCardDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShopCardProduct_ResinCard>
     _instance;
} _ShopCardProduct_ResinCard_default_instance_;
class ShopCardProductDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShopCardProduct>
     _instance;
  const ::proto::ShopCardProduct_ResinCard* resin_card_;
} _ShopCardProduct_default_instance_;
class PlayProductDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlayProduct>
     _instance;
} _PlayProduct_default_instance_;
class ShopConcertProductDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShopConcertProduct>
     _instance;
} _ShopConcertProduct_default_instance_;
class HashedStringDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HashedString>
     _instance;
} _HashedString_default_instance_;
class PlayTeamEntityInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlayTeamEntityInfo>
     _instance;
} _PlayTeamEntityInfo_default_instance_;
class FeatureBlockInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FeatureBlockInfo>
     _instance;
} _FeatureBlockInfo_default_instance_;
class MapMarkTipsInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MapMarkTipsInfo>
     _instance;
} _MapMarkTipsInfo_default_instance_;
class ExhibitionDisplayInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ExhibitionDisplayInfo>
     _instance;
} _ExhibitionDisplayInfo_default_instance_;
class ProfilePictureDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProfilePicture>
     _instance;
} _ProfilePicture_default_instance_;
class RedPointDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RedPointData>
     _instance;
} _RedPointData_default_instance_;
class HomeMarkPointNPCDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HomeMarkPointNPCData>
     _instance;
} _HomeMarkPointNPCData_default_instance_;
class HomeMarkPointSuiteDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HomeMarkPointSuiteData>
     _instance;
} _HomeMarkPointSuiteData_default_instance_;
class HomeMarkPointFurnitureDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HomeMarkPointFurnitureData>
     _instance;
  const ::proto::HomeMarkPointNPCData* npc_data_;
  const ::proto::HomeMarkPointSuiteData* suite_data_;
} _HomeMarkPointFurnitureData_default_instance_;
class MapAreaInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MapAreaInfo>
     _instance;
} _MapAreaInfo_default_instance_;
class HomeFurnitureArrangementMuipDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HomeFurnitureArrangementMuipData>
     _instance;
} _HomeFurnitureArrangementMuipData_default_instance_;
class HomeBlockArrangementMuipDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HomeBlockArrangementMuipData>
     _instance;
} _HomeBlockArrangementMuipData_default_instance_;
class HomeSceneArrangementMuipDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HomeSceneArrangementMuipData>
     _instance;
} _HomeSceneArrangementMuipData_default_instance_;
class CustomDungeonBattleRecordMuipDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CustomDungeonBattleRecordMuipData>
     _instance;
} _CustomDungeonBattleRecordMuipData_default_instance_;
class PlayerCustomDungeonMuipDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlayerCustomDungeonMuipData>
     _instance;
} _PlayerCustomDungeonMuipData_default_instance_;
class CustomDungeonSettingMuipDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CustomDungeonSettingMuipData>
     _instance;
} _CustomDungeonSettingMuipData_default_instance_;
class CustomDungeonAbstractMuipData_BrickStatisticsMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CustomDungeonAbstractMuipData::CustomDungeonAbstractMuipData_BrickStatisticsMapEntry>
     _instance;
} _CustomDungeonAbstractMuipData_BrickStatisticsMapEntry_default_instance_;
class CustomDungeonAbstractMuipDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CustomDungeonAbstractMuipData>
     _instance;
} _CustomDungeonAbstractMuipData_default_instance_;
class CustomDungeonSocialMuipDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CustomDungeonSocialMuipData>
     _instance;
} _CustomDungeonSocialMuipData_default_instance_;
class CustomDungeonBriefMuipDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CustomDungeonBriefMuipData>
     _instance;
} _CustomDungeonBriefMuipData_default_instance_;
class CustomDungeonBatchBriefMuipDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CustomDungeonBatchBriefMuipData>
     _instance;
} _CustomDungeonBatchBriefMuipData_default_instance_;
class HomeBlueprintBriefMuipDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HomeBlueprintBriefMuipData>
     _instance;
} _HomeBlueprintBriefMuipData_default_instance_;
class HomeBlueprintBatchBriefMuipDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HomeBlueprintBatchBriefMuipData>
     _instance;
} _HomeBlueprintBatchBriefMuipData_default_instance_;
class ContentAuditInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ContentAuditInfo>
     _instance;
} _ContentAuditInfo_default_instance_;
class ContentAuditDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ContentAuditData>
     _instance;
} _ContentAuditData_default_instance_;
class ContentAuditFieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ContentAuditField>
     _instance;
} _ContentAuditField_default_instance_;
class ContentAuditAuxiliaryFieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ContentAuditAuxiliaryField>
     _instance;
} _ContentAuditAuxiliaryField_default_instance_;
class NicknameSignatureAuditDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NicknameSignatureAuditData>
     _instance;
} _NicknameSignatureAuditData_default_instance_;
class AvatarRenameAuditContentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarRenameAuditContent>
     _instance;
} _AvatarRenameAuditContent_default_instance_;
class AvatarRenameContentAuditFieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarRenameContentAuditField>
     _instance;
} _AvatarRenameContentAuditField_default_instance_;
class AvatarRenameAuditDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarRenameAuditData>
     _instance;
} _AvatarRenameAuditData_default_instance_;
class ActivityDungeonAvatarDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ActivityDungeonAvatar>
     _instance;
} _ActivityDungeonAvatar_default_instance_;
class GCGChallengeDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGChallengeData>
     _instance;
} _GCGChallengeData_default_instance_;
class GCGDuelExtra_CardFaceMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDuelExtra::GCGDuelExtra_CardFaceMapEntry>
     _instance;
} _GCGDuelExtra_CardFaceMapEntry_default_instance_;
class GCGDuelExtraDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDuelExtra>
     _instance;
} _GCGDuelExtra_default_instance_;
class QueryIpRegionDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QueryIpRegionData>
     _instance;
} _QueryIpRegionData_default_instance_;

namespace protobuf_define_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[203];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[82];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamList, param_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropValue, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropValue, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropValue, val_),
  offsetof(PropValueDefaultTypeInternal, ival_),
  offsetof(PropValueDefaultTypeInternal, fval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropValue, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uint32Pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uint32Pair, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uint32Pair, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionSimpleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionSimpleInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionSimpleInfo, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionSimpleInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionSimpleInfo, dispatch_url_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRegionListHttpRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRegionListHttpRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRegionListHttpRsp, region_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRegionListHttpRsp, client_secret_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRegionListHttpRsp, client_custom_config_encrypted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRegionListHttpRsp, enable_login_pc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceUpdateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceUpdateInfo, force_update_url_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopServerInfo, stop_begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopServerInfo, stop_end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopServerInfo, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopServerInfo, content_msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResVersionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResVersionConfig, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResVersionConfig, relogin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResVersionConfig, md5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResVersionConfig, release_total_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResVersionConfig, version_suffix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResVersionConfig, branch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResVersionConfig, next_script_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, gateserver_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, gateserver_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, pay_callback_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, area_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, resource_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, data_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, feedback_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, bulletin_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, resource_url_bak_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, data_url_bak_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, client_data_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, handbook_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, client_silence_data_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, client_data_md5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, client_silence_data_md5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, res_version_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, secret_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, official_community_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, client_version_suffix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, client_silence_version_suffix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, use_gateserver_domain_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, gateserver_domain_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, user_center_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, account_bind_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, cdkey_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, privacy_policy_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, next_resource_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, next_res_version_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, game_biz_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCurrRegionHttpRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCurrRegionHttpRsp, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCurrRegionHttpRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCurrRegionHttpRsp, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCurrRegionHttpRsp, region_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCurrRegionHttpRsp, client_secret_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCurrRegionHttpRsp, region_custom_config_encrypted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCurrRegionHttpRsp, client_region_custom_config_encrypted_),
  offsetof(QueryCurrRegionHttpRspDefaultTypeInternal, force_udpate_),
  offsetof(QueryCurrRegionHttpRspDefaultTypeInternal, stop_server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCurrRegionHttpRsp, detail_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUidExtInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUidExtInfo, reg_platform_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reliquary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reliquary, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reliquary, exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reliquary, promote_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reliquary, main_prop_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reliquary, append_prop_id_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weapon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weapon, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weapon, exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weapon, promote_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weapon, affix_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialDeleteInfo_CountDownDelete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialDeleteInfo_CountDownDelete, delete_time_num_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialDeleteInfo_CountDownDelete, config_count_down_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialDeleteInfo_DateTimeDelete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialDeleteInfo_DateTimeDelete, delete_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialDeleteInfo_DelayWeekCountDownDelete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialDeleteInfo_DelayWeekCountDownDelete, delete_time_num_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialDeleteInfo_DelayWeekCountDownDelete, config_delay_week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialDeleteInfo_DelayWeekCountDownDelete, config_count_down_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialDeleteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialDeleteInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialDeleteInfo, has_delete_config_),
  offsetof(MaterialDeleteInfoDefaultTypeInternal, count_down_delete_),
  offsetof(MaterialDeleteInfoDefaultTypeInternal, date_delete_),
  offsetof(MaterialDeleteInfoDefaultTypeInternal, delay_week_count_down_delete_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialDeleteInfo, delete_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, delete_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, is_locked_),
  offsetof(EquipDefaultTypeInternal, reliquary_),
  offsetof(EquipDefaultTypeInternal, weapon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, detail_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Furniture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Furniture, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, guid_),
  offsetof(ItemDefaultTypeInternal, material_),
  offsetof(ItemDefaultTypeInternal, equip_),
  offsetof(ItemDefaultTypeInternal, furniture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, detail_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemParam, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemParam, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipParam, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipParam, item_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipParam, item_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipParam, promote_level_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipParamList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipParamList, item_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, reward_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, item_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityString, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityString, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(AbilityStringDefaultTypeInternal, str_),
  offsetof(AbilityStringDefaultTypeInternal, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityString, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityFloatValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityFloatValue, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityScalarValueEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityScalarValueEntry, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityScalarValueEntry, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityScalarValueEntry, value_type_),
  offsetof(AbilityScalarValueEntryDefaultTypeInternal, float_value_),
  offsetof(AbilityScalarValueEntryDefaultTypeInternal, string_value_),
  offsetof(AbilityScalarValueEntryDefaultTypeInternal, int_value_),
  offsetof(AbilityScalarValueEntryDefaultTypeInternal, uint_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityScalarValueEntry, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAppliedAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAppliedAbility, ability_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAppliedAbility, ability_override_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAppliedAbility, override_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAppliedAbility, instanced_ability_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAttachedModifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAttachedModifier, is_invalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAttachedModifier, owner_entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAttachedModifier, instanced_modifier_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAttachedModifier, is_serverbuff_modifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAttachedModifier, attach_name_hash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifierDurability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifierDurability, reduce_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifierDurability, remaining_durability_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAppliedModifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAppliedModifier, modifier_local_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAppliedModifier, parent_ability_entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAppliedModifier, parent_ability_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAppliedModifier, parent_ability_override_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAppliedModifier, instanced_ability_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAppliedModifier, instanced_modifier_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAppliedModifier, exist_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAppliedModifier, attached_instanced_modifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAppliedModifier, apply_entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAppliedModifier, is_attached_parent_ability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAppliedModifier, modifier_durability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAppliedModifier, sbuff_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityAppliedModifier, is_serverbuff_modifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassivePropParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassivePropParam, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassivePropParam, reaction_info_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassivePropParam, param_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassivePropParam, sync_flag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassivePropSyncInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassivePropSyncInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassivePropSyncInfo, prop_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutVector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutVector2, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutVector2, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutBrickInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutBrickInfo, hp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutBrickInfo, element_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObjectModifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObjectModifier, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObjectModifier, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObjectModifier, param1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObjectModifier, param2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObjectModifier, param3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObjectModifier, param4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObjectModifier, param5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObjectModifier, param6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObjectModifier, bool1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObjectModifier, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObjectModifier, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObjectModifier, combo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObjectModifier, peer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObjectModifier, skill_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObjectModifier, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObjectModifier, choose_player_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObject, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObject, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObject, is_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObject, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObject, move_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObject, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObject, init_peer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObject, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObject, element_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObject, element_reaction_buff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObject, modifier_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObject, total_rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObject, info_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObject, last_hit_peer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObject, speed_increase_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutPhysicalObject, offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSpawnPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSpawnPoint, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSpawnPoint, brick_suite_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSpawnPoint, spawned_brick_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutElementReactionCounter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutElementReactionCounter, element_reaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutElementReactionCounter, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSyncConnectUidInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSyncConnectUidInfo, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSyncConnectUidInfo, skill_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSyncConnectUidInfo, skill_level_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSnapShot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSnapShot, client_game_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSnapShot, server_game_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSnapShot, ball_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSnapShot, physical_object_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSnapShot, action_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSnapShot, wave_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSnapShot, is_finish_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSnapShot, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSnapShot, combo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSnapShot, max_combo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSnapShot, life_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSnapShot, wave_suite_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSnapShot, spawn_point_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSnapShot, remaining_boss_hp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSnapShot, brick_element_reaction_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSnapShot, ball_element_reaction_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSnapShot, uid_info_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSnapShot, dynamic_object_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSnapShot, id_index_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutSnapShot, raw_client_game_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutAction, action_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutAction, client_game_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutAction, server_game_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutAction, is_failed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutAction, pre_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutAction, new_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutAction, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutAction, move_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutAction, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutAction, peer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutAction, element_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutAction, element_reaction_buff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutAction, speed_increase_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutAction, has_extra_ball_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutAction, extra_ball_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakoutAction, extra_ball_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityMixinRecoverInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityMixinRecoverInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityMixinRecoverInfo, local_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityMixinRecoverInfo, data_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityMixinRecoverInfo, is_serverbuff_modifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityMixinRecoverInfo, massive_prop_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityMixinRecoverInfo, breakout_snap_shot_),
  offsetof(AbilityMixinRecoverInfoDefaultTypeInternal, instanced_ability_id_),
  offsetof(AbilityMixinRecoverInfoDefaultTypeInternal, instanced_modifier_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityMixinRecoverInfo, Source_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilitySyncStateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilitySyncStateInfo, is_inited_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilitySyncStateInfo, dynamic_value_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilitySyncStateInfo, applied_abilities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilitySyncStateInfo, applied_modifiers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilitySyncStateInfo, mixin_recover_infos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilitySyncStateInfo, sgv_dynamic_value_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityEmbryo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityEmbryo, ability_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityEmbryo, ability_name_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityEmbryo, ability_override_name_hash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityControlBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityControlBlock, ability_embryo_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorPlane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorPlane, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorPlane, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3Int, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3Int, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3Int, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityMoveInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityMoveInfo, entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityMoveInfo, motion_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityMoveInfo, scene_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityMoveInfo, reliable_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityMoveInfo, is_reliable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionInfo, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionInfo, rot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionInfo, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionInfo, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionInfo, params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionInfo, ref_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionInfo, ref_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionInfo, scene_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionInfo, interval_velocity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceInfo, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceInfo, rot_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneWeaponInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneWeaponInfo, entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneWeaponInfo, gadget_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneWeaponInfo, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneWeaponInfo, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneWeaponInfo, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneWeaponInfo, promote_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneWeaponInfo, ability_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneWeaponInfo, affix_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneWeaponInfo, renderer_changed_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneReliquaryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneReliquaryInfo, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneReliquaryInfo, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneReliquaryInfo, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneReliquaryInfo, promote_level_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBuff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBuff, server_buff_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBuff, server_buff_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBuff, server_buff_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBuff, instanced_modifier_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBuff, is_modifier_added_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurVehicleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurVehicleInfo, entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurVehicleInfo, pos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExcelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExcelInfo, prefab_path_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExcelInfo, prefab_path_remote_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExcelInfo, controller_path_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExcelInfo, controller_path_remote_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExcelInfo, combat_config_hash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneAvatarInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneAvatarInfo, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneAvatarInfo, avatar_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneAvatarInfo, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneAvatarInfo, peer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneAvatarInfo, equip_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneAvatarInfo, skill_depot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneAvatarInfo, talent_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneAvatarInfo, weapon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneAvatarInfo, reliquary_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneAvatarInfo, core_proud_skill_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneAvatarInfo, inherent_proud_skill_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneAvatarInfo, skill_level_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneAvatarInfo, proud_skill_extra_level_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneAvatarInfo, server_buff_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneAvatarInfo, team_resonance_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneAvatarInfo, wearing_flycloak_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneAvatarInfo, born_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneAvatarInfo, costume_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneAvatarInfo, cur_vehicle_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneAvatarInfo, excel_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneAvatarInfo, anim_hash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneFishInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneFishInfo, fish_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneFishInfo, fish_pool_entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneFishInfo, fish_pool_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneFishInfo, fish_pool_gadget_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneFishInfo, last_shock_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishtankFishInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishtankFishInfo, fish_distance_from_water_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishtankFishInfo, fish_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishtankFishInfo, initial_rotation_y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, monster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, weapon_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, authority_peer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, affix_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, is_elite_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, owner_entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, summoned_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, summon_tag_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, pose_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, born_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, block_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, mark_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, title_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, special_name_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, attack_target_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, monster_route_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, ai_config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, level_route_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, init_pose_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, is_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, kill_num_),
  offsetof(SceneMonsterInfoDefaultTypeInternal, fish_info_),
  offsetof(SceneMonsterInfoDefaultTypeInternal, fishtank_fish_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMonsterInfo, content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneNpcInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneNpcInfo, npc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneNpcInfo, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneNpcInfo, parent_quest_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneNpcInfo, block_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorktopInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorktopInfo, option_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorktopInfo, is_guest_can_operate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MathQuaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MathQuaternion, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MathQuaternion, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MathQuaternion, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MathQuaternion, w_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, route_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, start_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, start_route_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, start_scene_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, start_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, is_started_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, start_rot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, stop_scene_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, pos_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, rot_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, moving_platform_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, is_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, route_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, point_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutePoint, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutePoint, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutePoint, arrive_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutePoint, has_reach_event_),
  offsetof(RoutePointDefaultTypeInternal, velocity_),
  offsetof(RoutePointDefaultTypeInternal, time_),
  offsetof(RoutePointDefaultTypeInternal, rotation_),
  offsetof(RoutePointDefaultTypeInternal, rotation_speed_),
  offsetof(RoutePointDefaultTypeInternal, axis_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutePoint, move_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutePoint, rotate_params_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, route_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, route_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterRoute, route_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterRoute, speed_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterRoute, route_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterRoute, arrive_range_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherInfo, weather_area_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGadgetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGadgetInfo, camp_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGadgetInfo, camp_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGadgetInfo, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGadgetInfo, owner_entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGadgetInfo, target_entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGadgetInfo, async_load_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGadgetInfo, is_peer_id_from_player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGadgetInfo, target_entity_id_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityGadgetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityGadgetInfo, camp_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityGadgetInfo, camp_target_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityGadgetInfo, target_entity_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherGadgetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherGadgetInfo, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherGadgetInfo, is_forbid_guest_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatueGadgetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatueGadgetInfo, opened_statue_uid_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeeklyBossResinDiscountInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeeklyBossResinDiscountInfo, discount_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeeklyBossResinDiscountInfo, discount_num_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeeklyBossResinDiscountInfo, resin_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeeklyBossResinDiscountInfo, original_resin_cost_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossChestInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossChestInfo, monster_config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossChestInfo, resin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossChestInfo, remain_uid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossChestInfo, qualify_uid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossChestInfo, uid_discount_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlossomChestInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlossomChestInfo, resin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlossomChestInfo, qualify_uid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlossomChestInfo, remain_uid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlossomChestInfo, dead_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlossomChestInfo, blossom_refresh_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlossomChestInfo, refresh_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GadgetCrucibleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GadgetCrucibleInfo, mp_play_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GadgetCrucibleInfo, prepare_end_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GadgetPlayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GadgetPlayInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GadgetPlayInfo, play_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GadgetPlayInfo, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GadgetPlayInfo, progress_stage_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GadgetPlayInfo, start_cd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GadgetPlayInfo, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GadgetPlayInfo, progress_),
  offsetof(GadgetPlayInfoDefaultTypeInternal, crucible_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GadgetPlayInfo, play_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpPlayRewardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpPlayRewardInfo, resin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpPlayRewardInfo, remain_uid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpPlayRewardInfo, qualify_uid_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GadgetGeneralRewardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GadgetGeneralRewardInfo, resin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GadgetGeneralRewardInfo, dead_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GadgetGeneralRewardInfo, remain_uid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GadgetGeneralRewardInfo, qualify_uid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GadgetGeneralRewardInfo, item_param_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferingInfo, offering_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingInfo, building_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingInfo, point_config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingInfo, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingInfo, refund_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingInfo, owner_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingInfo, current_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingInfo, max_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoundationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoundationInfo, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoundationInfo, uid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoundationInfo, current_building_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoundationInfo, locked_by_uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMember, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMember, avatar_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMember, pos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, member_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, owner_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, cur_stamina_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoShellInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoShellInfo, shell_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenInfo, live_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenInfo, projector_entity_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolInfo, pool_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolInfo, fish_area_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolInfo, today_fish_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomCommonNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomCommonNodeInfo, parent_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomCommonNodeInfo, config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomCommonNodeInfo, slot_identifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomGadgetTreeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomGadgetTreeInfo, node_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoguelikeGadgetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoguelikeGadgetInfo, cell_config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoguelikeGadgetInfo, cell_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoguelikeGadgetInfo, cell_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoguelikeGadgetInfo, cell_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NightCrowGadgetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NightCrowGadgetInfo, argument_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeshretObeliskGadgetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeshretObeliskGadgetInfo, argument_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectOperatorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectOperatorInfo, level_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGadgetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGadgetInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGadgetInfo, gadget_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGadgetInfo, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGadgetInfo, config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGadgetInfo, owner_entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGadgetInfo, born_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGadgetInfo, gadget_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGadgetInfo, gadget_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGadgetInfo, is_show_cutscene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGadgetInfo, authority_peer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGadgetInfo, is_enable_interact_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGadgetInfo, interact_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGadgetInfo, mark_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGadgetInfo, prop_owner_entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGadgetInfo, platform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGadgetInfo, interact_uid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGadgetInfo, draft_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGadgetInfo, gadget_talk_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGadgetInfo, play_info_),
  offsetof(SceneGadgetInfoDefaultTypeInternal, trifle_item_),
  offsetof(SceneGadgetInfoDefaultTypeInternal, gather_gadget_),
  offsetof(SceneGadgetInfoDefaultTypeInternal, worktop_),
  offsetof(SceneGadgetInfoDefaultTypeInternal, client_gadget_),
  offsetof(SceneGadgetInfoDefaultTypeInternal, weather_),
  offsetof(SceneGadgetInfoDefaultTypeInternal, ability_gadget_),
  offsetof(SceneGadgetInfoDefaultTypeInternal, statue_gadget_),
  offsetof(SceneGadgetInfoDefaultTypeInternal, boss_chest_),
  offsetof(SceneGadgetInfoDefaultTypeInternal, blossom_chest_),
  offsetof(SceneGadgetInfoDefaultTypeInternal, mp_play_reward_),
  offsetof(SceneGadgetInfoDefaultTypeInternal, general_reward_),
  offsetof(SceneGadgetInfoDefaultTypeInternal, offering_info_),
  offsetof(SceneGadgetInfoDefaultTypeInternal, foundation_info_),
  offsetof(SceneGadgetInfoDefaultTypeInternal, vehicle_info_),
  offsetof(SceneGadgetInfoDefaultTypeInternal, shell_info_),
  offsetof(SceneGadgetInfoDefaultTypeInternal, screen_info_),
  offsetof(SceneGadgetInfoDefaultTypeInternal, fish_pool_info_),
  offsetof(SceneGadgetInfoDefaultTypeInternal, custom_gadget_tree_info_),
  offsetof(SceneGadgetInfoDefaultTypeInternal, roguelike_gadget_info_),
  offsetof(SceneGadgetInfoDefaultTypeInternal, night_crow_gadget_info_),
  offsetof(SceneGadgetInfoDefaultTypeInternal, deshret_obelisk_gadget_info_),
  offsetof(SceneGadgetInfoDefaultTypeInternal, coin_collect_operator_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGadgetInfo, content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimatorParameterValueInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimatorParameterValueInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimatorParameterValueInfo, para_type_),
  offsetof(AnimatorParameterValueInfoDefaultTypeInternal, int_val_),
  offsetof(AnimatorParameterValueInfoDefaultTypeInternal, float_val_),
  offsetof(AnimatorParameterValueInfoDefaultTypeInternal, bool_val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimatorParameterValueInfo, paraVal_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServantInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServantInfo, master_entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServantInfo, born_slot_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityAiInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityAiInfo, is_ai_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityAiInfo, born_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityAiInfo, skill_cd_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityAiInfo, servant_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityAiInfo, ai_threat_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityAiInfo, skill_group_cd_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityAiInfo, cur_tactic_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityRendererChangedInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityRendererChangedInfo, changed_renderers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityRendererChangedInfo, visibility_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityRendererChangedInfo, is_cached_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropPair, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropPair, prop_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPropPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPropPair, prop_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPropPair, prop_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimatorParameterValueInfoPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimatorParameterValueInfoPair, name_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimatorParameterValueInfoPair, animator_para_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityEnvironmentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityEnvironmentInfo, json_climate_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityEnvironmentInfo, climate_area_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityClientExtraInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityClientExtraInfo, skill_anchor_position_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAuthorityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAuthorityInfo, ability_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAuthorityInfo, renderer_changed_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAuthorityInfo, ai_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAuthorityInfo, born_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAuthorityInfo, pose_para_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAuthorityInfo, client_extra_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityInfo, entity_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityInfo, entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityInfo, motion_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityInfo, prop_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityInfo, fight_prop_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityInfo, life_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityInfo, animator_para_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityInfo, last_move_scene_time_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityInfo, last_move_reliable_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityInfo, entity_client_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityInfo, entity_environment_info_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityInfo, entity_authority_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityInfo, tag_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityInfo, server_buff_list_),
  offsetof(SceneEntityInfoDefaultTypeInternal, avatar_),
  offsetof(SceneEntityInfoDefaultTypeInternal, monster_),
  offsetof(SceneEntityInfoDefaultTypeInternal, npc_),
  offsetof(SceneEntityInfoDefaultTypeInternal, gadget_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneEntityInfo, entity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGadgetInfo_Chest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGadgetInfo_Chest, chest_drop_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGadgetInfo_Chest, is_show_cutscene_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGadgetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGadgetInfo, born_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGadgetInfo, chest_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateEntityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateEntityInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateEntityInfo, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateEntityInfo, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateEntityInfo, rot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateEntityInfo, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateEntityInfo, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateEntityInfo, client_unique_id_),
  offsetof(CreateEntityInfoDefaultTypeInternal, monster_id_),
  offsetof(CreateEntityInfoDefaultTypeInternal, npc_id_),
  offsetof(CreateEntityInfoDefaultTypeInternal, gadget_id_),
  offsetof(CreateEntityInfoDefaultTypeInternal, item_id_),
  offsetof(CreateEntityInfoDefaultTypeInternal, gadget_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateEntityInfo, entity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateEntityInfo, entity_create_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialAvatarGrantRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialAvatarGrantRecord, grant_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialAvatarGrantRecord, from_parent_quest_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialAvatarInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialAvatarInfo, trial_avatar_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialAvatarInfo, trial_equip_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialAvatarInfo, grant_record_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarSkillInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarSkillInfo, pass_cd_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarSkillInfo, full_cd_time_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarSkillInfo, max_charge_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetterData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetterData, fetter_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetterData, fetter_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetterData, cond_index_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarFetterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarFetterInfo, exp_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarFetterInfo, exp_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarFetterInfo, open_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarFetterInfo, finish_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarFetterInfo, rewarded_fetter_level_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarFetterInfo, fetter_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionInfo, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionInfo, exp_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionInfo, hour_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionInfo, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionInfo, shorten_ratio_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarEquipAffixInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarEquipAffixInfo, equip_affix_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarEquipAffixInfo, left_cd_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, avatar_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, prop_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, life_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, equip_guid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, talent_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, fight_prop_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, trial_avatar_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, skill_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, skill_depot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, fetter_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, core_proud_skill_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, inherent_proud_skill_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, skill_level_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, expedition_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, proud_skill_extra_level_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, is_focus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, avatar_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, team_resonance_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, wearing_flycloak_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, equip_affix_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, born_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, pending_promote_reward_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, costume_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, excel_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, anim_hash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowEquip, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowEquip, item_id_),
  offsetof(ShowEquipDefaultTypeInternal, reliquary_),
  offsetof(ShowEquipDefaultTypeInternal, weapon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowEquip, detail_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowAvatarInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowAvatarInfo, avatar_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowAvatarInfo, prop_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowAvatarInfo, talent_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowAvatarInfo, fight_prop_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowAvatarInfo, skill_depot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowAvatarInfo, core_proud_skill_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowAvatarInfo, inherent_proud_skill_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowAvatarInfo, skill_level_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowAvatarInfo, proud_skill_extra_level_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowAvatarInfo, equip_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowAvatarInfo, fetter_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowAvatarInfo, costume_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowAvatarInfo, excel_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest, quest_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest, is_random_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest, parent_quest_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest, quest_config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest, start_game_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest, accept_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest, lacked_npc_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest, finish_progress_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest, fail_progress_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest, lacked_npc_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest, lacked_place_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest, lacked_place_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPositionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPositionInfo, npc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPositionInfo, pos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailTextContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailTextContent, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailTextContent, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailTextContent, sender_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItem, equip_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItem, delete_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, mail_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, mail_text_content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, item_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, send_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, expire_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, importance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, is_read_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, is_attachment_got_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, argument_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailData, collect_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerInfo, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerInfo, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerInfo, player_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerInfo, avatar_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerInfo, mp_setting_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerInfo, cur_player_num_in_world_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerInfo, world_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerInfo, online_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerInfo, name_card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerInfo, blacklist_uid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerInfo, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerInfo, profile_picture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerInfo, psn_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Birthday, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Birthday, month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Birthday, day_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMarkPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMarkPoint, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMarkPoint, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMarkPoint, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMarkPoint, point_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMarkPoint, monster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMarkPoint, from_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMarkPoint, quest_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassiveWaterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassiveWaterInfo, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassiveGrassInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassiveGrassInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassiveGrassInfo, center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassiveGrassInfo, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassiveBoxInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassiveBoxInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassiveBoxInfo, configid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassiveBoxInfo, center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassiveBoxInfo, extents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassiveBoxInfo, up_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassiveBoxInfo, forward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassiveBoxInfo, right_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMassiveEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMassiveEntity, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMassiveEntity, entity_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMassiveEntity, config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMassiveEntity, obj_id_),
  offsetof(ClientMassiveEntityDefaultTypeInternal, water_info_),
  offsetof(ClientMassiveEntityDefaultTypeInternal, grass_info_),
  offsetof(ClientMassiveEntityDefaultTypeInternal, box_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMassiveEntity, entity_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeSphere, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeSphere, center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeSphere, radius_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeBox, center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeBox, axis0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeBox, axis1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeBox, axis2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeBox, extents_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMassiveEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMassiveEntity, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMassiveEntity, entity_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMassiveEntity, config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMassiveEntity, runtime_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMassiveEntity, authority_peer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMassiveEntity, obj_id_),
  offsetof(ServerMassiveEntityDefaultTypeInternal, water_info_),
  offsetof(ServerMassiveEntityDefaultTypeInternal, grass_info_),
  offsetof(ServerMassiveEntityDefaultTypeInternal, box_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMassiveEntity, entity_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassiveEntityState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassiveEntityState, entity_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassiveEntityState, obj_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassiveEntityState, element_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityClientData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityClientData, wind_change_scene_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityClientData, windmill_sync_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityClientData, wind_change_target_level_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, block_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, data_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, bin_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, is_dirty_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopMcoinProduct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopMcoinProduct, product_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopMcoinProduct, price_tier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopMcoinProduct, mcoin_base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopMcoinProduct, mcoin_non_first_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopMcoinProduct, mcoin_first_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopMcoinProduct, bought_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopMcoinProduct, is_audit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCardProduct_ResinCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCardProduct_ResinCard, base_item_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCardProduct_ResinCard, per_day_item_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCardProduct, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCardProduct, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCardProduct, product_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCardProduct, price_tier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCardProduct, mcoin_base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCardProduct, hcoin_per_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCardProduct, days_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCardProduct, remain_reward_days_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCardProduct, card_product_type_),
  offsetof(ShopCardProductDefaultTypeInternal, resin_card_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCardProduct, extra_card_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayProduct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayProduct, product_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayProduct, price_tier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayProduct, schedule_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopConcertProduct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopConcertProduct, product_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopConcertProduct, price_tier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopConcertProduct, obtain_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopConcertProduct, obtain_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopConcertProduct, begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopConcertProduct, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopConcertProduct, buy_times_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashedString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashedString, hash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayTeamEntityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayTeamEntityInfo, entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayTeamEntityInfo, player_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayTeamEntityInfo, authority_peer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayTeamEntityInfo, gadget_config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayTeamEntityInfo, ability_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureBlockInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureBlockInfo, feature_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureBlockInfo, end_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMarkTipsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMarkTipsInfo, tips_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMarkTipsInfo, point_id_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExhibitionDisplayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExhibitionDisplayInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExhibitionDisplayInfo, param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExhibitionDisplayInfo, detail_param_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfilePicture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfilePicture, avatar_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfilePicture, costume_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPointData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPointData, red_point_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPointData, is_show_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPointData, content_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeMarkPointNPCData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeMarkPointNPCData, avatar_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeMarkPointNPCData, costume_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeMarkPointSuiteData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeMarkPointSuiteData, suite_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeMarkPointFurnitureData, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeMarkPointFurnitureData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeMarkPointFurnitureData, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeMarkPointFurnitureData, furniture_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeMarkPointFurnitureData, furniture_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeMarkPointFurnitureData, pos_),
  offsetof(HomeMarkPointFurnitureDataDefaultTypeInternal, npc_data_),
  offsetof(HomeMarkPointFurnitureDataDefaultTypeInternal, suite_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeMarkPointFurnitureData, extra_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapAreaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapAreaInfo, map_area_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapAreaInfo, is_open_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeFurnitureArrangementMuipData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeFurnitureArrangementMuipData, furniture_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeFurnitureArrangementMuipData, spawn_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeFurnitureArrangementMuipData, spawn_rot_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeBlockArrangementMuipData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeBlockArrangementMuipData, block_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeBlockArrangementMuipData, furniture_data_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeSceneArrangementMuipData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeSceneArrangementMuipData, module_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeSceneArrangementMuipData, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeSceneArrangementMuipData, is_room_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeSceneArrangementMuipData, block_data_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonBattleRecordMuipData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonBattleRecordMuipData, dungeon_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonBattleRecordMuipData, min_cost_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCustomDungeonMuipData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCustomDungeonMuipData, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCustomDungeonMuipData, publish_dungeon_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCustomDungeonMuipData, store_dungeon_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCustomDungeonMuipData, battle_record_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonSettingMuipData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonSettingMuipData, is_arrive_finish_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonSettingMuipData, coin_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonSettingMuipData, time_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonSettingMuipData, is_forbid_skill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonSettingMuipData, life_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonAbstractMuipData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonAbstractMuipData, first_publish_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonAbstractMuipData, last_publish_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonAbstractMuipData, brick_statistics_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonSocialMuipData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonSocialMuipData, play_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonSocialMuipData, like_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonSocialMuipData, store_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonSocialMuipData, win_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonBriefMuipData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonBriefMuipData, dungeon_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonBriefMuipData, dungeon_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonBriefMuipData, creator_nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonBriefMuipData, tag_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonBriefMuipData, setting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonBriefMuipData, abstract_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonBriefMuipData, social_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonBatchBriefMuipData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonBatchBriefMuipData, brief_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeBlueprintBriefMuipData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeBlueprintBriefMuipData, share_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeBlueprintBriefMuipData, owner_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeBlueprintBriefMuipData, module_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeBlueprintBriefMuipData, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeBlueprintBriefMuipData, block_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeBlueprintBriefMuipData, is_allow_copy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeBlueprintBriefMuipData, create_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeBlueprintBatchBriefMuipData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeBlueprintBatchBriefMuipData, brief_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeBlueprintBatchBriefMuipData, not_exist_share_code_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentAuditInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentAuditInfo, is_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentAuditInfo, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentAuditInfo, submit_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentAuditInfo, audit_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentAuditInfo, submit_limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentAuditData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentAuditData, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentAuditData, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentAuditData, auto_pass_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentAuditField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentAuditField, segment_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentAuditField, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentAuditAuxiliaryField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentAuditAuxiliaryField, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentAuditAuxiliaryField, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicknameSignatureAuditData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicknameSignatureAuditData, aid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicknameSignatureAuditData, entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicknameSignatureAuditData, lang_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicknameSignatureAuditData, queue_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicknameSignatureAuditData, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicknameSignatureAuditData, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicknameSignatureAuditData, audit_field_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicknameSignatureAuditData, aux_field_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarRenameAuditContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarRenameAuditContent, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarRenameAuditContent, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarRenameAuditContent, auto_fail_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarRenameContentAuditField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarRenameContentAuditField, segment_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarRenameContentAuditField, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarRenameAuditData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarRenameAuditData, aid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarRenameAuditData, entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarRenameAuditData, lang_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarRenameAuditData, queue_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarRenameAuditData, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarRenameAuditData, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarRenameAuditData, audit_field_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarRenameAuditData, aux_field_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityDungeonAvatar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityDungeonAvatar, avatar_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityDungeonAvatar, is_trial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityDungeonAvatar, costume_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGChallengeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGChallengeData, challenge_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGChallengeData, challenge_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGChallengeData, param_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGChallengeData, progress_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuelExtra, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuelExtra, card_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuelExtra, field_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuelExtra, card_back_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuelExtra, card_face_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuelExtra, challenge_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuelExtra, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuelExtra, is_match_ai_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuelExtra, ai_deck_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuelExtra, is_internal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuelExtra, forbid_finish_challenge_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuelExtra, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuelExtra, client_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryIpRegionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryIpRegionData, ip_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(ParamList)},
  { 6, -1, sizeof(PropValue)},
  { 16, -1, sizeof(Uint32Pair)},
  { 23, -1, sizeof(RegionSimpleInfo)},
  { 32, -1, sizeof(QueryRegionListHttpRsp)},
  { 42, -1, sizeof(ForceUpdateInfo)},
  { 48, -1, sizeof(StopServerInfo)},
  { 57, -1, sizeof(ResVersionConfig)},
  { 69, -1, sizeof(RegionInfo)},
  { 103, -1, sizeof(QueryCurrRegionHttpRsp)},
  { 117, -1, sizeof(PlayerUidExtInfo)},
  { 123, -1, sizeof(Reliquary)},
  { 133, -1, sizeof(Weapon)},
  { 142, -1, sizeof(MaterialDeleteInfo_CountDownDelete)},
  { 149, -1, sizeof(MaterialDeleteInfo_DateTimeDelete)},
  { 155, -1, sizeof(MaterialDeleteInfo_DelayWeekCountDownDelete)},
  { 163, -1, sizeof(MaterialDeleteInfo)},
  { 173, -1, sizeof(Material)},
  { 180, -1, sizeof(Equip)},
  { 189, -1, sizeof(Furniture)},
  { 195, -1, sizeof(Item)},
  { 206, -1, sizeof(ItemParam)},
  { 213, -1, sizeof(EquipParam)},
  { 222, -1, sizeof(EquipParamList)},
  { 228, -1, sizeof(Reward)},
  { 235, -1, sizeof(AbilityString)},
  { 243, -1, sizeof(AbilityFloatValue)},
  { 249, -1, sizeof(AbilityScalarValueEntry)},
  { 261, -1, sizeof(AbilityAppliedAbility)},
  { 270, -1, sizeof(AbilityAttachedModifier)},
  { 280, -1, sizeof(ModifierDurability)},
  { 287, -1, sizeof(AbilityAppliedModifier)},
  { 305, -1, sizeof(MassivePropParam)},
  { 314, -1, sizeof(MassivePropSyncInfo)},
  { 321, -1, sizeof(BreakoutVector2)},
  { 328, -1, sizeof(BreakoutBrickInfo)},
  { 335, -1, sizeof(BreakoutPhysicalObjectModifier)},
  { 356, -1, sizeof(BreakoutPhysicalObject)},
  { 377, -1, sizeof(BreakoutSpawnPoint)},
  { 385, -1, sizeof(BreakoutElementReactionCounter)},
  { 392, -1, sizeof(BreakoutSyncConnectUidInfo)},
  { 400, -1, sizeof(BreakoutSnapShot)},
  { 425, -1, sizeof(BreakoutAction)},
  { 446, -1, sizeof(AbilityMixinRecoverInfo)},
  { 459, -1, sizeof(AbilitySyncStateInfo)},
  { 470, -1, sizeof(AbilityEmbryo)},
  { 478, -1, sizeof(AbilityControlBlock)},
  { 484, -1, sizeof(Vector)},
  { 492, -1, sizeof(VectorPlane)},
  { 499, -1, sizeof(Vector3Int)},
  { 507, -1, sizeof(EntityMoveInfo)},
  { 517, -1, sizeof(MotionInfo)},
  { 531, -1, sizeof(PlaceInfo)},
  { 538, -1, sizeof(SceneWeaponInfo)},
  { 552, -1, sizeof(SceneReliquaryInfo)},
  { 561, -1, sizeof(ServerBuff)},
  { 571, -1, sizeof(CurVehicleInfo)},
  { 578, -1, sizeof(AvatarExcelInfo)},
  { 588, -1, sizeof(SceneAvatarInfo)},
  { 614, -1, sizeof(SceneFishInfo)},
  { 624, -1, sizeof(FishtankFishInfo)},
  { 632, -1, sizeof(SceneMonsterInfo)},
  { 663, -1, sizeof(SceneNpcInfo)},
  { 672, -1, sizeof(WorktopInfo)},
  { 679, -1, sizeof(MathQuaternion)},
  { 688, -1, sizeof(PlatformInfo)},
  { 707, -1, sizeof(RoutePoint)},
  { 722, -1, sizeof(Route)},
  { 729, -1, sizeof(MonsterRoute)},
  { 738, -1, sizeof(WeatherInfo)},
  { 744, -1, sizeof(ClientGadgetInfo)},
  { 757, -1, sizeof(AbilityGadgetInfo)},
  { 765, -1, sizeof(GatherGadgetInfo)},
  { 772, -1, sizeof(StatueGadgetInfo)},
  { 778, -1, sizeof(WeeklyBossResinDiscountInfo)},
  { 787, -1, sizeof(BossChestInfo)},
  { 797, -1, sizeof(BlossomChestInfo)},
  { 808, -1, sizeof(GadgetCrucibleInfo)},
  { 815, -1, sizeof(GadgetPlayInfo)},
  { 828, -1, sizeof(MpPlayRewardInfo)},
  { 836, -1, sizeof(GadgetGeneralRewardInfo)},
  { 846, -1, sizeof(OfferingInfo)},
  { 852, -1, sizeof(BuildingInfo)},
  { 864, -1, sizeof(FoundationInfo)},
  { 873, -1, sizeof(VehicleMember)},
  { 881, -1, sizeof(VehicleInfo)},
  { 889, -1, sizeof(EchoShellInfo)},
  { 895, -1, sizeof(ScreenInfo)},
  { 902, -1, sizeof(FishPoolInfo)},
  { 910, -1, sizeof(CustomCommonNodeInfo)},
  { 918, -1, sizeof(CustomGadgetTreeInfo)},
  { 924, -1, sizeof(RoguelikeGadgetInfo)},
  { 933, -1, sizeof(NightCrowGadgetInfo)},
  { 939, -1, sizeof(DeshretObeliskGadgetInfo)},
  { 945, -1, sizeof(CoinCollectOperatorInfo)},
  { 951, -1, sizeof(SceneGadgetInfo)},
  { 997, -1, sizeof(AnimatorParameterValueInfo)},
  { 1007, -1, sizeof(ServantInfo)},
  { 1014, -1, sizeof(SceneEntityAiInfo)},
  { 1026, -1, sizeof(EntityRendererChangedInfo)},
  { 1034, -1, sizeof(PropPair)},
  { 1041, -1, sizeof(FightPropPair)},
  { 1048, -1, sizeof(AnimatorParameterValueInfoPair)},
  { 1055, -1, sizeof(EntityEnvironmentInfo)},
  { 1062, -1, sizeof(EntityClientExtraInfo)},
  { 1068, -1, sizeof(EntityAuthorityInfo)},
  { 1079, -1, sizeof(SceneEntityInfo)},
  { 1104, -1, sizeof(CreateGadgetInfo_Chest)},
  { 1111, -1, sizeof(CreateGadgetInfo)},
  { 1118, -1, sizeof(CreateEntityInfo)},
  { 1136, -1, sizeof(TrialAvatarGrantRecord)},
  { 1143, -1, sizeof(TrialAvatarInfo)},
  { 1151, -1, sizeof(AvatarSkillInfo)},
  { 1159, -1, sizeof(FetterData)},
  { 1167, -1, sizeof(AvatarFetterInfo)},
  { 1178, -1, sizeof(AvatarExpeditionInfo)},
  { 1188, -1, sizeof(AvatarEquipAffixInfo)},
  { 1195, -1, sizeof(AvatarInfo)},
  { 1226, -1, sizeof(ShowEquip)},
  { 1235, -1, sizeof(ShowAvatarInfo)},
  { 1253, -1, sizeof(Quest)},
  { 1272, -1, sizeof(NpcPositionInfo)},
  { 1279, -1, sizeof(MailTextContent)},
  { 1287, -1, sizeof(MailItem)},
  { 1294, -1, sizeof(MailData)},
  { 1310, -1, sizeof(OnlinePlayerInfo)},
  { 1328, -1, sizeof(Birthday)},
  { 1335, -1, sizeof(MapMarkPoint)},
  { 1347, -1, sizeof(MassiveWaterInfo)},
  { 1353, -1, sizeof(MassiveGrassInfo)},
  { 1361, -1, sizeof(MassiveBoxInfo)},
  { 1373, -1, sizeof(ClientMassiveEntity)},
  { 1385, -1, sizeof(ShapeSphere)},
  { 1392, -1, sizeof(ShapeBox)},
  { 1402, -1, sizeof(ServerMassiveEntity)},
  { 1416, -1, sizeof(MassiveEntityState)},
  { 1424, -1, sizeof(EntityClientData)},
  { 1432, -1, sizeof(BlockInfo)},
  { 1441, -1, sizeof(ShopMcoinProduct)},
  { 1453, -1, sizeof(ShopCardProduct_ResinCard)},
  { 1460, -1, sizeof(ShopCardProduct)},
  { 1474, -1, sizeof(PlayProduct)},
  { 1482, -1, sizeof(ShopConcertProduct)},
  { 1494, -1, sizeof(HashedString)},
  { 1500, -1, sizeof(PlayTeamEntityInfo)},
  { 1510, -1, sizeof(FeatureBlockInfo)},
  { 1517, -1, sizeof(MapMarkTipsInfo)},
  { 1524, -1, sizeof(ExhibitionDisplayInfo)},
  { 1532, -1, sizeof(ProfilePicture)},
  { 1539, -1, sizeof(RedPointData)},
  { 1547, -1, sizeof(HomeMarkPointNPCData)},
  { 1554, -1, sizeof(HomeMarkPointSuiteData)},
  { 1560, -1, sizeof(HomeMarkPointFurnitureData)},
  { 1572, -1, sizeof(MapAreaInfo)},
  { 1579, -1, sizeof(HomeFurnitureArrangementMuipData)},
  { 1587, -1, sizeof(HomeBlockArrangementMuipData)},
  { 1594, -1, sizeof(HomeSceneArrangementMuipData)},
  { 1603, -1, sizeof(CustomDungeonBattleRecordMuipData)},
  { 1610, -1, sizeof(PlayerCustomDungeonMuipData)},
  { 1619, -1, sizeof(CustomDungeonSettingMuipData)},
  { 1629, -1, sizeof(CustomDungeonAbstractMuipData)},
  { 1637, -1, sizeof(CustomDungeonSocialMuipData)},
  { 1646, -1, sizeof(CustomDungeonBriefMuipData)},
  { 1658, -1, sizeof(CustomDungeonBatchBriefMuipData)},
  { 1664, -1, sizeof(HomeBlueprintBriefMuipData)},
  { 1676, -1, sizeof(HomeBlueprintBatchBriefMuipData)},
  { 1683, -1, sizeof(ContentAuditInfo)},
  { 1693, -1, sizeof(ContentAuditData)},
  { 1701, -1, sizeof(ContentAuditField)},
  { 1708, -1, sizeof(ContentAuditAuxiliaryField)},
  { 1715, -1, sizeof(NicknameSignatureAuditData)},
  { 1728, -1, sizeof(AvatarRenameAuditContent)},
  { 1736, -1, sizeof(AvatarRenameContentAuditField)},
  { 1743, -1, sizeof(AvatarRenameAuditData)},
  { 1756, -1, sizeof(ActivityDungeonAvatar)},
  { 1764, -1, sizeof(GCGChallengeData)},
  { 1773, -1, sizeof(GCGDuelExtra)},
  { 1790, -1, sizeof(QueryIpRegionData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ParamList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PropValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Uint32Pair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegionSimpleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryRegionListHttpRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ForceUpdateInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StopServerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResVersionConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryCurrRegionHttpRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerUidExtInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Reliquary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Weapon_AffixMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Weapon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MaterialDeleteInfo_CountDownDelete_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MaterialDeleteInfo_DateTimeDelete_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MaterialDeleteInfo_DelayWeekCountDownDelete_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MaterialDeleteInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Material_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Equip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Furniture_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Item_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ItemParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EquipParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EquipParamList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Reward_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AbilityString_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AbilityFloatValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AbilityScalarValueEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AbilityAppliedAbility_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AbilityAttachedModifier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModifierDurability_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AbilityAppliedModifier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MassivePropParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MassivePropSyncInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BreakoutVector2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BreakoutBrickInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BreakoutPhysicalObjectModifier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BreakoutPhysicalObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BreakoutSpawnPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BreakoutElementReactionCounter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BreakoutSyncConnectUidInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BreakoutSnapShot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BreakoutAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AbilityMixinRecoverInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AbilitySyncStateInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AbilityEmbryo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AbilityControlBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VectorPlane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vector3Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EntityMoveInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MotionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlaceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneWeaponInfo_AffixMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneWeaponInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneReliquaryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerBuff_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CurVehicleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarExcelInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneAvatarInfo_SkillLevelMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneAvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneAvatarInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneFishInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FishtankFishInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneMonsterInfo_SummonTagMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneMonsterInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneNpcInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WorktopInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MathQuaternion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlatformInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoutePoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Route_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MonsterRoute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeatherInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClientGadgetInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AbilityGadgetInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GatherGadgetInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StatueGadgetInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeeklyBossResinDiscountInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BossChestInfo_UidDiscountMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BossChestInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlossomChestInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GadgetCrucibleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GadgetPlayInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MpPlayRewardInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GadgetGeneralRewardInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OfferingInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BuildingInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FoundationInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VehicleMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VehicleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EchoShellInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScreenInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FishPoolInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CustomCommonNodeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CustomGadgetTreeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoguelikeGadgetInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NightCrowGadgetInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeshretObeliskGadgetInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CoinCollectOperatorInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGadgetInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnimatorParameterValueInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServantInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneEntityAiInfo_SkillCdMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneEntityAiInfo_AiThreatMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneEntityAiInfo_SkillGroupCdMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneEntityAiInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EntityRendererChangedInfo_ChangedRenderersEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EntityRendererChangedInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PropPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightPropPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnimatorParameterValueInfoPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EntityEnvironmentInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EntityClientExtraInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EntityAuthorityInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneEntityInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateGadgetInfo_Chest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateGadgetInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateEntityInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrialAvatarGrantRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrialAvatarInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarSkillInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FetterData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarFetterInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarExpeditionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarEquipAffixInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarInfo_PropMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarInfo_FightPropMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarInfo_SkillMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarInfo_SkillLevelMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShowEquip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShowAvatarInfo_PropMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShowAvatarInfo_FightPropMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShowAvatarInfo_SkillLevelMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShowAvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShowAvatarInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Quest_LackedNpcMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Quest_LackedPlaceMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Quest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NpcPositionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MailTextContent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MailItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MailData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OnlinePlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Birthday_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MapMarkPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MassiveWaterInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MassiveGrassInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MassiveBoxInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClientMassiveEntity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShapeSphere_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShapeBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerMassiveEntity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MassiveEntityState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EntityClientData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlockInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShopMcoinProduct_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShopCardProduct_ResinCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShopCardProduct_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayProduct_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShopConcertProduct_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HashedString_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayTeamEntityInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FeatureBlockInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MapMarkTipsInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExhibitionDisplayInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProfilePicture_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RedPointData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HomeMarkPointNPCData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HomeMarkPointSuiteData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HomeMarkPointFurnitureData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MapAreaInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HomeFurnitureArrangementMuipData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HomeBlockArrangementMuipData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HomeSceneArrangementMuipData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CustomDungeonBattleRecordMuipData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerCustomDungeonMuipData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CustomDungeonSettingMuipData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CustomDungeonAbstractMuipData_BrickStatisticsMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CustomDungeonAbstractMuipData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CustomDungeonSocialMuipData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CustomDungeonBriefMuipData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CustomDungeonBatchBriefMuipData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HomeBlueprintBriefMuipData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HomeBlueprintBatchBriefMuipData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContentAuditInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContentAuditData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContentAuditField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContentAuditAuxiliaryField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NicknameSignatureAuditData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarRenameAuditContent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarRenameContentAuditField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarRenameAuditData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ActivityDungeonAvatar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGChallengeData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDuelExtra_CardFaceMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDuelExtra_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryIpRegionData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "define.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[12].reflection = Weapon::Weapon_AffixMapEntry::CreateReflection(file_level_metadata[12].descriptor, _Weapon_AffixMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[14].reflection = MaterialDeleteInfo_CountDownDelete::MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry::CreateReflection(file_level_metadata[14].descriptor, _MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[17].reflection = MaterialDeleteInfo_DelayWeekCountDownDelete::MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry::CreateReflection(file_level_metadata[17].descriptor, _MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[56].reflection = SceneWeaponInfo::SceneWeaponInfo_AffixMapEntry::CreateReflection(file_level_metadata[56].descriptor, _SceneWeaponInfo_AffixMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[62].reflection = SceneAvatarInfo::SceneAvatarInfo_SkillLevelMapEntry::CreateReflection(file_level_metadata[62].descriptor, _SceneAvatarInfo_SkillLevelMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[63].reflection = SceneAvatarInfo::SceneAvatarInfo_ProudSkillExtraLevelMapEntry::CreateReflection(file_level_metadata[63].descriptor, _SceneAvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[67].reflection = SceneMonsterInfo::SceneMonsterInfo_SummonTagMapEntry::CreateReflection(file_level_metadata[67].descriptor, _SceneMonsterInfo_SummonTagMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[82].reflection = BossChestInfo::BossChestInfo_UidDiscountMapEntry::CreateReflection(file_level_metadata[82].descriptor, _BossChestInfo_UidDiscountMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[106].reflection = SceneEntityAiInfo::SceneEntityAiInfo_SkillCdMapEntry::CreateReflection(file_level_metadata[106].descriptor, _SceneEntityAiInfo_SkillCdMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[107].reflection = SceneEntityAiInfo::SceneEntityAiInfo_AiThreatMapEntry::CreateReflection(file_level_metadata[107].descriptor, _SceneEntityAiInfo_AiThreatMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[108].reflection = SceneEntityAiInfo::SceneEntityAiInfo_SkillGroupCdMapEntry::CreateReflection(file_level_metadata[108].descriptor, _SceneEntityAiInfo_SkillGroupCdMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[110].reflection = EntityRendererChangedInfo::EntityRendererChangedInfo_ChangedRenderersEntry::CreateReflection(file_level_metadata[110].descriptor, _EntityRendererChangedInfo_ChangedRenderersEntry_default_instance_._instance.get_mutable());
file_level_metadata[129].reflection = AvatarInfo::AvatarInfo_PropMapEntry::CreateReflection(file_level_metadata[129].descriptor, _AvatarInfo_PropMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[130].reflection = AvatarInfo::AvatarInfo_FightPropMapEntry::CreateReflection(file_level_metadata[130].descriptor, _AvatarInfo_FightPropMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[131].reflection = AvatarInfo::AvatarInfo_SkillMapEntry::CreateReflection(file_level_metadata[131].descriptor, _AvatarInfo_SkillMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[132].reflection = AvatarInfo::AvatarInfo_SkillLevelMapEntry::CreateReflection(file_level_metadata[132].descriptor, _AvatarInfo_SkillLevelMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[133].reflection = AvatarInfo::AvatarInfo_ProudSkillExtraLevelMapEntry::CreateReflection(file_level_metadata[133].descriptor, _AvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[136].reflection = ShowAvatarInfo::ShowAvatarInfo_PropMapEntry::CreateReflection(file_level_metadata[136].descriptor, _ShowAvatarInfo_PropMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[137].reflection = ShowAvatarInfo::ShowAvatarInfo_FightPropMapEntry::CreateReflection(file_level_metadata[137].descriptor, _ShowAvatarInfo_FightPropMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[138].reflection = ShowAvatarInfo::ShowAvatarInfo_SkillLevelMapEntry::CreateReflection(file_level_metadata[138].descriptor, _ShowAvatarInfo_SkillLevelMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[139].reflection = ShowAvatarInfo::ShowAvatarInfo_ProudSkillExtraLevelMapEntry::CreateReflection(file_level_metadata[139].descriptor, _ShowAvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[141].reflection = Quest::Quest_LackedNpcMapEntry::CreateReflection(file_level_metadata[141].descriptor, _Quest_LackedNpcMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[142].reflection = Quest::Quest_LackedPlaceMapEntry::CreateReflection(file_level_metadata[142].descriptor, _Quest_LackedPlaceMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[183].reflection = CustomDungeonAbstractMuipData::CustomDungeonAbstractMuipData_BrickStatisticsMapEntry::CreateReflection(file_level_metadata[183].descriptor, _CustomDungeonAbstractMuipData_BrickStatisticsMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[200].reflection = GCGDuelExtra::GCGDuelExtra_CardFaceMapEntry::CreateReflection(file_level_metadata[200].descriptor, _GCGDuelExtra_CardFaceMapEntry_default_instance_._instance.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 203);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ParamList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ParamList_default_instance_);_PropValue_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PropValue_default_instance_);_Uint32Pair_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Uint32Pair_default_instance_);_RegionSimpleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RegionSimpleInfo_default_instance_);_QueryRegionListHttpRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QueryRegionListHttpRsp_default_instance_);_ForceUpdateInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ForceUpdateInfo_default_instance_);_StopServerInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StopServerInfo_default_instance_);_ResVersionConfig_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResVersionConfig_default_instance_);_RegionInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RegionInfo_default_instance_);_QueryCurrRegionHttpRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QueryCurrRegionHttpRsp_default_instance_);_PlayerUidExtInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlayerUidExtInfo_default_instance_);_Reliquary_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Reliquary_default_instance_);_Weapon_AffixMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Weapon_AffixMapEntry_default_instance_);_Weapon_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Weapon_default_instance_);_MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry_default_instance_);_MaterialDeleteInfo_CountDownDelete_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MaterialDeleteInfo_CountDownDelete_default_instance_);_MaterialDeleteInfo_DateTimeDelete_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MaterialDeleteInfo_DateTimeDelete_default_instance_);_MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry_default_instance_);_MaterialDeleteInfo_DelayWeekCountDownDelete_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MaterialDeleteInfo_DelayWeekCountDownDelete_default_instance_);_MaterialDeleteInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MaterialDeleteInfo_default_instance_);_Material_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Material_default_instance_);_Equip_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Equip_default_instance_);_Furniture_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Furniture_default_instance_);_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Item_default_instance_);_ItemParam_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ItemParam_default_instance_);_EquipParam_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EquipParam_default_instance_);_EquipParamList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EquipParamList_default_instance_);_Reward_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Reward_default_instance_);_AbilityString_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AbilityString_default_instance_);_AbilityFloatValue_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AbilityFloatValue_default_instance_);_AbilityScalarValueEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AbilityScalarValueEntry_default_instance_);_AbilityAppliedAbility_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AbilityAppliedAbility_default_instance_);_AbilityAttachedModifier_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AbilityAttachedModifier_default_instance_);_ModifierDurability_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ModifierDurability_default_instance_);_AbilityAppliedModifier_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AbilityAppliedModifier_default_instance_);_MassivePropParam_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MassivePropParam_default_instance_);_MassivePropSyncInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MassivePropSyncInfo_default_instance_);_BreakoutVector2_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BreakoutVector2_default_instance_);_BreakoutBrickInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BreakoutBrickInfo_default_instance_);_BreakoutPhysicalObjectModifier_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BreakoutPhysicalObjectModifier_default_instance_);_BreakoutPhysicalObject_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BreakoutPhysicalObject_default_instance_);_BreakoutSpawnPoint_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BreakoutSpawnPoint_default_instance_);_BreakoutElementReactionCounter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BreakoutElementReactionCounter_default_instance_);_BreakoutSyncConnectUidInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BreakoutSyncConnectUidInfo_default_instance_);_BreakoutSnapShot_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BreakoutSnapShot_default_instance_);_BreakoutAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BreakoutAction_default_instance_);_AbilityMixinRecoverInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AbilityMixinRecoverInfo_default_instance_);_AbilitySyncStateInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AbilitySyncStateInfo_default_instance_);_AbilityEmbryo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AbilityEmbryo_default_instance_);_AbilityControlBlock_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AbilityControlBlock_default_instance_);_Vector_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Vector_default_instance_);_VectorPlane_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VectorPlane_default_instance_);_Vector3Int_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Vector3Int_default_instance_);_EntityMoveInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EntityMoveInfo_default_instance_);_MotionInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MotionInfo_default_instance_);_PlaceInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlaceInfo_default_instance_);_SceneWeaponInfo_AffixMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneWeaponInfo_AffixMapEntry_default_instance_);_SceneWeaponInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneWeaponInfo_default_instance_);_SceneReliquaryInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneReliquaryInfo_default_instance_);_ServerBuff_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerBuff_default_instance_);_CurVehicleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CurVehicleInfo_default_instance_);_AvatarExcelInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarExcelInfo_default_instance_);_SceneAvatarInfo_SkillLevelMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneAvatarInfo_SkillLevelMapEntry_default_instance_);_SceneAvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneAvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_);_SceneAvatarInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneAvatarInfo_default_instance_);_SceneFishInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneFishInfo_default_instance_);_FishtankFishInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FishtankFishInfo_default_instance_);_SceneMonsterInfo_SummonTagMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneMonsterInfo_SummonTagMapEntry_default_instance_);_SceneMonsterInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneMonsterInfo_default_instance_);_SceneNpcInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneNpcInfo_default_instance_);_WorktopInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WorktopInfo_default_instance_);_MathQuaternion_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MathQuaternion_default_instance_);_PlatformInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlatformInfo_default_instance_);_RoutePoint_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RoutePoint_default_instance_);_Route_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Route_default_instance_);_MonsterRoute_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MonsterRoute_default_instance_);_WeatherInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WeatherInfo_default_instance_);_ClientGadgetInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ClientGadgetInfo_default_instance_);_AbilityGadgetInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AbilityGadgetInfo_default_instance_);_GatherGadgetInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GatherGadgetInfo_default_instance_);_StatueGadgetInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StatueGadgetInfo_default_instance_);_WeeklyBossResinDiscountInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WeeklyBossResinDiscountInfo_default_instance_);_BossChestInfo_UidDiscountMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BossChestInfo_UidDiscountMapEntry_default_instance_);_BossChestInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BossChestInfo_default_instance_);_BlossomChestInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BlossomChestInfo_default_instance_);_GadgetCrucibleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GadgetCrucibleInfo_default_instance_);_GadgetPlayInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GadgetPlayInfo_default_instance_);_MpPlayRewardInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MpPlayRewardInfo_default_instance_);_GadgetGeneralRewardInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GadgetGeneralRewardInfo_default_instance_);_OfferingInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OfferingInfo_default_instance_);_BuildingInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BuildingInfo_default_instance_);_FoundationInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FoundationInfo_default_instance_);_VehicleMember_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VehicleMember_default_instance_);_VehicleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VehicleInfo_default_instance_);_EchoShellInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EchoShellInfo_default_instance_);_ScreenInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScreenInfo_default_instance_);_FishPoolInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FishPoolInfo_default_instance_);_CustomCommonNodeInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CustomCommonNodeInfo_default_instance_);_CustomGadgetTreeInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CustomGadgetTreeInfo_default_instance_);_RoguelikeGadgetInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RoguelikeGadgetInfo_default_instance_);_NightCrowGadgetInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NightCrowGadgetInfo_default_instance_);_DeshretObeliskGadgetInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeshretObeliskGadgetInfo_default_instance_);_CoinCollectOperatorInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CoinCollectOperatorInfo_default_instance_);_SceneGadgetInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGadgetInfo_default_instance_);_AnimatorParameterValueInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AnimatorParameterValueInfo_default_instance_);_ServantInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServantInfo_default_instance_);_SceneEntityAiInfo_SkillCdMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneEntityAiInfo_SkillCdMapEntry_default_instance_);_SceneEntityAiInfo_AiThreatMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneEntityAiInfo_AiThreatMapEntry_default_instance_);_SceneEntityAiInfo_SkillGroupCdMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneEntityAiInfo_SkillGroupCdMapEntry_default_instance_);_SceneEntityAiInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneEntityAiInfo_default_instance_);_EntityRendererChangedInfo_ChangedRenderersEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EntityRendererChangedInfo_ChangedRenderersEntry_default_instance_);_EntityRendererChangedInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EntityRendererChangedInfo_default_instance_);_PropPair_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PropPair_default_instance_);_FightPropPair_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightPropPair_default_instance_);_AnimatorParameterValueInfoPair_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AnimatorParameterValueInfoPair_default_instance_);_EntityEnvironmentInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EntityEnvironmentInfo_default_instance_);_EntityClientExtraInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EntityClientExtraInfo_default_instance_);_EntityAuthorityInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EntityAuthorityInfo_default_instance_);_SceneEntityInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneEntityInfo_default_instance_);_CreateGadgetInfo_Chest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreateGadgetInfo_Chest_default_instance_);_CreateGadgetInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreateGadgetInfo_default_instance_);_CreateEntityInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreateEntityInfo_default_instance_);_TrialAvatarGrantRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TrialAvatarGrantRecord_default_instance_);_TrialAvatarInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TrialAvatarInfo_default_instance_);_AvatarSkillInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarSkillInfo_default_instance_);_FetterData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FetterData_default_instance_);_AvatarFetterInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarFetterInfo_default_instance_);_AvatarExpeditionInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarExpeditionInfo_default_instance_);_AvatarEquipAffixInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarEquipAffixInfo_default_instance_);_AvatarInfo_PropMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarInfo_PropMapEntry_default_instance_);_AvatarInfo_FightPropMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarInfo_FightPropMapEntry_default_instance_);_AvatarInfo_SkillMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarInfo_SkillMapEntry_default_instance_);_AvatarInfo_SkillLevelMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarInfo_SkillLevelMapEntry_default_instance_);_AvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_);_AvatarInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarInfo_default_instance_);_ShowEquip_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShowEquip_default_instance_);_ShowAvatarInfo_PropMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShowAvatarInfo_PropMapEntry_default_instance_);_ShowAvatarInfo_FightPropMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShowAvatarInfo_FightPropMapEntry_default_instance_);_ShowAvatarInfo_SkillLevelMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShowAvatarInfo_SkillLevelMapEntry_default_instance_);_ShowAvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShowAvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_);_ShowAvatarInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShowAvatarInfo_default_instance_);_Quest_LackedNpcMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Quest_LackedNpcMapEntry_default_instance_);_Quest_LackedPlaceMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Quest_LackedPlaceMapEntry_default_instance_);_Quest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Quest_default_instance_);_NpcPositionInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NpcPositionInfo_default_instance_);_MailTextContent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MailTextContent_default_instance_);_MailItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MailItem_default_instance_);_MailData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MailData_default_instance_);_OnlinePlayerInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OnlinePlayerInfo_default_instance_);_Birthday_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Birthday_default_instance_);_MapMarkPoint_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MapMarkPoint_default_instance_);_MassiveWaterInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MassiveWaterInfo_default_instance_);_MassiveGrassInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MassiveGrassInfo_default_instance_);_MassiveBoxInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MassiveBoxInfo_default_instance_);_ClientMassiveEntity_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ClientMassiveEntity_default_instance_);_ShapeSphere_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShapeSphere_default_instance_);_ShapeBox_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShapeBox_default_instance_);_ServerMassiveEntity_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerMassiveEntity_default_instance_);_MassiveEntityState_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MassiveEntityState_default_instance_);_EntityClientData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EntityClientData_default_instance_);_BlockInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BlockInfo_default_instance_);_ShopMcoinProduct_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShopMcoinProduct_default_instance_);_ShopCardProduct_ResinCard_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShopCardProduct_ResinCard_default_instance_);_ShopCardProduct_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShopCardProduct_default_instance_);_PlayProduct_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlayProduct_default_instance_);_ShopConcertProduct_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShopConcertProduct_default_instance_);_HashedString_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HashedString_default_instance_);_PlayTeamEntityInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlayTeamEntityInfo_default_instance_);_FeatureBlockInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FeatureBlockInfo_default_instance_);_MapMarkTipsInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MapMarkTipsInfo_default_instance_);_ExhibitionDisplayInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ExhibitionDisplayInfo_default_instance_);_ProfilePicture_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProfilePicture_default_instance_);_RedPointData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RedPointData_default_instance_);_HomeMarkPointNPCData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HomeMarkPointNPCData_default_instance_);_HomeMarkPointSuiteData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HomeMarkPointSuiteData_default_instance_);_HomeMarkPointFurnitureData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HomeMarkPointFurnitureData_default_instance_);_MapAreaInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MapAreaInfo_default_instance_);_HomeFurnitureArrangementMuipData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HomeFurnitureArrangementMuipData_default_instance_);_HomeBlockArrangementMuipData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HomeBlockArrangementMuipData_default_instance_);_HomeSceneArrangementMuipData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HomeSceneArrangementMuipData_default_instance_);_CustomDungeonBattleRecordMuipData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CustomDungeonBattleRecordMuipData_default_instance_);_PlayerCustomDungeonMuipData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlayerCustomDungeonMuipData_default_instance_);_CustomDungeonSettingMuipData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CustomDungeonSettingMuipData_default_instance_);_CustomDungeonAbstractMuipData_BrickStatisticsMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CustomDungeonAbstractMuipData_BrickStatisticsMapEntry_default_instance_);_CustomDungeonAbstractMuipData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CustomDungeonAbstractMuipData_default_instance_);_CustomDungeonSocialMuipData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CustomDungeonSocialMuipData_default_instance_);_CustomDungeonBriefMuipData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CustomDungeonBriefMuipData_default_instance_);_CustomDungeonBatchBriefMuipData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CustomDungeonBatchBriefMuipData_default_instance_);_HomeBlueprintBriefMuipData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HomeBlueprintBriefMuipData_default_instance_);_HomeBlueprintBatchBriefMuipData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HomeBlueprintBatchBriefMuipData_default_instance_);_ContentAuditInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ContentAuditInfo_default_instance_);_ContentAuditData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ContentAuditData_default_instance_);_ContentAuditField_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ContentAuditField_default_instance_);_ContentAuditAuxiliaryField_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ContentAuditAuxiliaryField_default_instance_);_NicknameSignatureAuditData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NicknameSignatureAuditData_default_instance_);_AvatarRenameAuditContent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarRenameAuditContent_default_instance_);_AvatarRenameContentAuditField_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarRenameContentAuditField_default_instance_);_AvatarRenameAuditData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarRenameAuditData_default_instance_);_ActivityDungeonAvatar_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ActivityDungeonAvatar_default_instance_);_GCGChallengeData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGChallengeData_default_instance_);_GCGDuelExtra_CardFaceMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDuelExtra_CardFaceMapEntry_default_instance_);_GCGDuelExtra_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDuelExtra_default_instance_);_QueryIpRegionData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QueryIpRegionData_default_instance_);_PropValue_default_instance_.ival_ = GOOGLE_LONGLONG(0);
  _PropValue_default_instance_.fval_ = 0;
  _RegionInfo_default_instance_._instance.get_mutable()->res_version_config_ = const_cast< ::proto::ResVersionConfig*>(
      ::proto::ResVersionConfig::internal_default_instance());
  _RegionInfo_default_instance_._instance.get_mutable()->next_res_version_config_ = const_cast< ::proto::ResVersionConfig*>(
      ::proto::ResVersionConfig::internal_default_instance());
  _QueryCurrRegionHttpRsp_default_instance_._instance.get_mutable()->region_info_ = const_cast< ::proto::RegionInfo*>(
      ::proto::RegionInfo::internal_default_instance());
  _QueryCurrRegionHttpRsp_default_instance_.force_udpate_ = const_cast< ::proto::ForceUpdateInfo*>(
      ::proto::ForceUpdateInfo::internal_default_instance());
  _QueryCurrRegionHttpRsp_default_instance_.stop_server_ = const_cast< ::proto::StopServerInfo*>(
      ::proto::StopServerInfo::internal_default_instance());
  _Weapon_AffixMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_Weapon_AffixMapEntry_default_instance_._instance.get_mutable());
  _Weapon_AffixMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry_default_instance_._instance.get_mutable());
  _MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry_default_instance_._instance.get_mutable());
  _MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _MaterialDeleteInfo_default_instance_.count_down_delete_ = const_cast< ::proto::MaterialDeleteInfo_CountDownDelete*>(
      ::proto::MaterialDeleteInfo_CountDownDelete::internal_default_instance());
  _MaterialDeleteInfo_default_instance_.date_delete_ = const_cast< ::proto::MaterialDeleteInfo_DateTimeDelete*>(
      ::proto::MaterialDeleteInfo_DateTimeDelete::internal_default_instance());
  _MaterialDeleteInfo_default_instance_.delay_week_count_down_delete_ = const_cast< ::proto::MaterialDeleteInfo_DelayWeekCountDownDelete*>(
      ::proto::MaterialDeleteInfo_DelayWeekCountDownDelete::internal_default_instance());
  _Material_default_instance_._instance.get_mutable()->delete_info_ = const_cast< ::proto::MaterialDeleteInfo*>(
      ::proto::MaterialDeleteInfo::internal_default_instance());
  _Equip_default_instance_.reliquary_ = const_cast< ::proto::Reliquary*>(
      ::proto::Reliquary::internal_default_instance());
  _Equip_default_instance_.weapon_ = const_cast< ::proto::Weapon*>(
      ::proto::Weapon::internal_default_instance());
  _Item_default_instance_.material_ = const_cast< ::proto::Material*>(
      ::proto::Material::internal_default_instance());
  _Item_default_instance_.equip_ = const_cast< ::proto::Equip*>(
      ::proto::Equip::internal_default_instance());
  _Item_default_instance_.furniture_ = const_cast< ::proto::Furniture*>(
      ::proto::Furniture::internal_default_instance());
  _AbilityString_default_instance_.str_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _AbilityString_default_instance_.hash_ = 0u;
  _AbilityScalarValueEntry_default_instance_._instance.get_mutable()->key_ = const_cast< ::proto::AbilityString*>(
      ::proto::AbilityString::internal_default_instance());
  _AbilityScalarValueEntry_default_instance_.float_value_ = 0;
  _AbilityScalarValueEntry_default_instance_.string_value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _AbilityScalarValueEntry_default_instance_.int_value_ = 0;
  _AbilityScalarValueEntry_default_instance_.uint_value_ = 0u;
  _AbilityAppliedAbility_default_instance_._instance.get_mutable()->ability_name_ = const_cast< ::proto::AbilityString*>(
      ::proto::AbilityString::internal_default_instance());
  _AbilityAppliedAbility_default_instance_._instance.get_mutable()->ability_override_ = const_cast< ::proto::AbilityString*>(
      ::proto::AbilityString::internal_default_instance());
  _AbilityAppliedModifier_default_instance_._instance.get_mutable()->parent_ability_name_ = const_cast< ::proto::AbilityString*>(
      ::proto::AbilityString::internal_default_instance());
  _AbilityAppliedModifier_default_instance_._instance.get_mutable()->parent_ability_override_ = const_cast< ::proto::AbilityString*>(
      ::proto::AbilityString::internal_default_instance());
  _AbilityAppliedModifier_default_instance_._instance.get_mutable()->attached_instanced_modifier_ = const_cast< ::proto::AbilityAttachedModifier*>(
      ::proto::AbilityAttachedModifier::internal_default_instance());
  _AbilityAppliedModifier_default_instance_._instance.get_mutable()->modifier_durability_ = const_cast< ::proto::ModifierDurability*>(
      ::proto::ModifierDurability::internal_default_instance());
  _BreakoutPhysicalObject_default_instance_._instance.get_mutable()->pos_ = const_cast< ::proto::BreakoutVector2*>(
      ::proto::BreakoutVector2::internal_default_instance());
  _BreakoutPhysicalObject_default_instance_._instance.get_mutable()->move_dir_ = const_cast< ::proto::BreakoutVector2*>(
      ::proto::BreakoutVector2::internal_default_instance());
  _BreakoutAction_default_instance_._instance.get_mutable()->pos_ = const_cast< ::proto::BreakoutVector2*>(
      ::proto::BreakoutVector2::internal_default_instance());
  _BreakoutAction_default_instance_._instance.get_mutable()->move_dir_ = const_cast< ::proto::BreakoutVector2*>(
      ::proto::BreakoutVector2::internal_default_instance());
  _BreakoutAction_default_instance_._instance.get_mutable()->extra_ball_dir_ = const_cast< ::proto::BreakoutVector2*>(
      ::proto::BreakoutVector2::internal_default_instance());
  _AbilityMixinRecoverInfo_default_instance_._instance.get_mutable()->breakout_snap_shot_ = const_cast< ::proto::BreakoutSnapShot*>(
      ::proto::BreakoutSnapShot::internal_default_instance());
  _AbilityMixinRecoverInfo_default_instance_.instanced_ability_id_ = 0u;
  _AbilityMixinRecoverInfo_default_instance_.instanced_modifier_id_ = 0u;
  _EntityMoveInfo_default_instance_._instance.get_mutable()->motion_info_ = const_cast< ::proto::MotionInfo*>(
      ::proto::MotionInfo::internal_default_instance());
  _MotionInfo_default_instance_._instance.get_mutable()->pos_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _MotionInfo_default_instance_._instance.get_mutable()->rot_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _MotionInfo_default_instance_._instance.get_mutable()->speed_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _MotionInfo_default_instance_._instance.get_mutable()->ref_pos_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _PlaceInfo_default_instance_._instance.get_mutable()->pos_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _PlaceInfo_default_instance_._instance.get_mutable()->rot_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _SceneWeaponInfo_AffixMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_SceneWeaponInfo_AffixMapEntry_default_instance_._instance.get_mutable());
  _SceneWeaponInfo_AffixMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _SceneWeaponInfo_default_instance_._instance.get_mutable()->ability_info_ = const_cast< ::proto::AbilitySyncStateInfo*>(
      ::proto::AbilitySyncStateInfo::internal_default_instance());
  _SceneWeaponInfo_default_instance_._instance.get_mutable()->renderer_changed_info_ = const_cast< ::proto::EntityRendererChangedInfo*>(
      ::proto::EntityRendererChangedInfo::internal_default_instance());
  _SceneAvatarInfo_SkillLevelMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_SceneAvatarInfo_SkillLevelMapEntry_default_instance_._instance.get_mutable());
  _SceneAvatarInfo_SkillLevelMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _SceneAvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_SceneAvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_._instance.get_mutable());
  _SceneAvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _SceneAvatarInfo_default_instance_._instance.get_mutable()->weapon_ = const_cast< ::proto::SceneWeaponInfo*>(
      ::proto::SceneWeaponInfo::internal_default_instance());
  _SceneAvatarInfo_default_instance_._instance.get_mutable()->cur_vehicle_info_ = const_cast< ::proto::CurVehicleInfo*>(
      ::proto::CurVehicleInfo::internal_default_instance());
  _SceneAvatarInfo_default_instance_._instance.get_mutable()->excel_info_ = const_cast< ::proto::AvatarExcelInfo*>(
      ::proto::AvatarExcelInfo::internal_default_instance());
  _SceneFishInfo_default_instance_._instance.get_mutable()->fish_pool_pos_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _SceneMonsterInfo_SummonTagMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_SceneMonsterInfo_SummonTagMapEntry_default_instance_._instance.get_mutable());
  _SceneMonsterInfo_SummonTagMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _SceneMonsterInfo_default_instance_._instance.get_mutable()->monster_route_ = const_cast< ::proto::MonsterRoute*>(
      ::proto::MonsterRoute::internal_default_instance());
  _SceneMonsterInfo_default_instance_.fish_info_ = const_cast< ::proto::SceneFishInfo*>(
      ::proto::SceneFishInfo::internal_default_instance());
  _SceneMonsterInfo_default_instance_.fishtank_fish_info_ = const_cast< ::proto::FishtankFishInfo*>(
      ::proto::FishtankFishInfo::internal_default_instance());
  _PlatformInfo_default_instance_._instance.get_mutable()->start_pos_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _PlatformInfo_default_instance_._instance.get_mutable()->start_rot_ = const_cast< ::proto::MathQuaternion*>(
      ::proto::MathQuaternion::internal_default_instance());
  _PlatformInfo_default_instance_._instance.get_mutable()->pos_offset_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _PlatformInfo_default_instance_._instance.get_mutable()->rot_offset_ = const_cast< ::proto::MathQuaternion*>(
      ::proto::MathQuaternion::internal_default_instance());
  _PlatformInfo_default_instance_._instance.get_mutable()->route_ = const_cast< ::proto::Route*>(
      ::proto::Route::internal_default_instance());
  _RoutePoint_default_instance_._instance.get_mutable()->position_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _RoutePoint_default_instance_.velocity_ = 0;
  _RoutePoint_default_instance_.time_ = 0;
  _RoutePoint_default_instance_.rotation_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _RoutePoint_default_instance_.rotation_speed_ = const_cast< ::proto::MathQuaternion*>(
      ::proto::MathQuaternion::internal_default_instance());
  _RoutePoint_default_instance_.axis_speed_ = const_cast< ::proto::MathQuaternion*>(
      ::proto::MathQuaternion::internal_default_instance());
  _BossChestInfo_UidDiscountMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_BossChestInfo_UidDiscountMapEntry_default_instance_._instance.get_mutable());
  _BossChestInfo_UidDiscountMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _GadgetPlayInfo_default_instance_.crucible_info_ = const_cast< ::proto::GadgetCrucibleInfo*>(
      ::proto::GadgetCrucibleInfo::internal_default_instance());
  _GadgetGeneralRewardInfo_default_instance_._instance.get_mutable()->item_param_ = const_cast< ::proto::ItemParam*>(
      ::proto::ItemParam::internal_default_instance());
  _SceneGadgetInfo_default_instance_._instance.get_mutable()->platform_ = const_cast< ::proto::PlatformInfo*>(
      ::proto::PlatformInfo::internal_default_instance());
  _SceneGadgetInfo_default_instance_._instance.get_mutable()->play_info_ = const_cast< ::proto::GadgetPlayInfo*>(
      ::proto::GadgetPlayInfo::internal_default_instance());
  _SceneGadgetInfo_default_instance_.trifle_item_ = const_cast< ::proto::Item*>(
      ::proto::Item::internal_default_instance());
  _SceneGadgetInfo_default_instance_.gather_gadget_ = const_cast< ::proto::GatherGadgetInfo*>(
      ::proto::GatherGadgetInfo::internal_default_instance());
  _SceneGadgetInfo_default_instance_.worktop_ = const_cast< ::proto::WorktopInfo*>(
      ::proto::WorktopInfo::internal_default_instance());
  _SceneGadgetInfo_default_instance_.client_gadget_ = const_cast< ::proto::ClientGadgetInfo*>(
      ::proto::ClientGadgetInfo::internal_default_instance());
  _SceneGadgetInfo_default_instance_.weather_ = const_cast< ::proto::WeatherInfo*>(
      ::proto::WeatherInfo::internal_default_instance());
  _SceneGadgetInfo_default_instance_.ability_gadget_ = const_cast< ::proto::AbilityGadgetInfo*>(
      ::proto::AbilityGadgetInfo::internal_default_instance());
  _SceneGadgetInfo_default_instance_.statue_gadget_ = const_cast< ::proto::StatueGadgetInfo*>(
      ::proto::StatueGadgetInfo::internal_default_instance());
  _SceneGadgetInfo_default_instance_.boss_chest_ = const_cast< ::proto::BossChestInfo*>(
      ::proto::BossChestInfo::internal_default_instance());
  _SceneGadgetInfo_default_instance_.blossom_chest_ = const_cast< ::proto::BlossomChestInfo*>(
      ::proto::BlossomChestInfo::internal_default_instance());
  _SceneGadgetInfo_default_instance_.mp_play_reward_ = const_cast< ::proto::MpPlayRewardInfo*>(
      ::proto::MpPlayRewardInfo::internal_default_instance());
  _SceneGadgetInfo_default_instance_.general_reward_ = const_cast< ::proto::GadgetGeneralRewardInfo*>(
      ::proto::GadgetGeneralRewardInfo::internal_default_instance());
  _SceneGadgetInfo_default_instance_.offering_info_ = const_cast< ::proto::OfferingInfo*>(
      ::proto::OfferingInfo::internal_default_instance());
  _SceneGadgetInfo_default_instance_.foundation_info_ = const_cast< ::proto::FoundationInfo*>(
      ::proto::FoundationInfo::internal_default_instance());
  _SceneGadgetInfo_default_instance_.vehicle_info_ = const_cast< ::proto::VehicleInfo*>(
      ::proto::VehicleInfo::internal_default_instance());
  _SceneGadgetInfo_default_instance_.shell_info_ = const_cast< ::proto::EchoShellInfo*>(
      ::proto::EchoShellInfo::internal_default_instance());
  _SceneGadgetInfo_default_instance_.screen_info_ = const_cast< ::proto::ScreenInfo*>(
      ::proto::ScreenInfo::internal_default_instance());
  _SceneGadgetInfo_default_instance_.fish_pool_info_ = const_cast< ::proto::FishPoolInfo*>(
      ::proto::FishPoolInfo::internal_default_instance());
  _SceneGadgetInfo_default_instance_.custom_gadget_tree_info_ = const_cast< ::proto::CustomGadgetTreeInfo*>(
      ::proto::CustomGadgetTreeInfo::internal_default_instance());
  _SceneGadgetInfo_default_instance_.roguelike_gadget_info_ = const_cast< ::proto::RoguelikeGadgetInfo*>(
      ::proto::RoguelikeGadgetInfo::internal_default_instance());
  _SceneGadgetInfo_default_instance_.night_crow_gadget_info_ = const_cast< ::proto::NightCrowGadgetInfo*>(
      ::proto::NightCrowGadgetInfo::internal_default_instance());
  _SceneGadgetInfo_default_instance_.deshret_obelisk_gadget_info_ = const_cast< ::proto::DeshretObeliskGadgetInfo*>(
      ::proto::DeshretObeliskGadgetInfo::internal_default_instance());
  _SceneGadgetInfo_default_instance_.coin_collect_operator_info_ = const_cast< ::proto::CoinCollectOperatorInfo*>(
      ::proto::CoinCollectOperatorInfo::internal_default_instance());
  _AnimatorParameterValueInfo_default_instance_.int_val_ = 0;
  _AnimatorParameterValueInfo_default_instance_.float_val_ = 0;
  _AnimatorParameterValueInfo_default_instance_.bool_val_ = false;
  _SceneEntityAiInfo_SkillCdMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_SceneEntityAiInfo_SkillCdMapEntry_default_instance_._instance.get_mutable());
  _SceneEntityAiInfo_SkillCdMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _SceneEntityAiInfo_AiThreatMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_SceneEntityAiInfo_AiThreatMapEntry_default_instance_._instance.get_mutable());
  _SceneEntityAiInfo_AiThreatMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _SceneEntityAiInfo_SkillGroupCdMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_SceneEntityAiInfo_SkillGroupCdMapEntry_default_instance_._instance.get_mutable());
  _SceneEntityAiInfo_SkillGroupCdMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _SceneEntityAiInfo_default_instance_._instance.get_mutable()->born_pos_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _SceneEntityAiInfo_default_instance_._instance.get_mutable()->servant_info_ = const_cast< ::proto::ServantInfo*>(
      ::proto::ServantInfo::internal_default_instance());
  _EntityRendererChangedInfo_ChangedRenderersEntry_default_instance_._instance.get_mutable()->set_default_instance(_EntityRendererChangedInfo_ChangedRenderersEntry_default_instance_._instance.get_mutable());
  _EntityRendererChangedInfo_ChangedRenderersEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _PropPair_default_instance_._instance.get_mutable()->prop_value_ = const_cast< ::proto::PropValue*>(
      ::proto::PropValue::internal_default_instance());
  _AnimatorParameterValueInfoPair_default_instance_._instance.get_mutable()->animator_para_ = const_cast< ::proto::AnimatorParameterValueInfo*>(
      ::proto::AnimatorParameterValueInfo::internal_default_instance());
  _EntityClientExtraInfo_default_instance_._instance.get_mutable()->skill_anchor_position_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _EntityAuthorityInfo_default_instance_._instance.get_mutable()->ability_info_ = const_cast< ::proto::AbilitySyncStateInfo*>(
      ::proto::AbilitySyncStateInfo::internal_default_instance());
  _EntityAuthorityInfo_default_instance_._instance.get_mutable()->renderer_changed_info_ = const_cast< ::proto::EntityRendererChangedInfo*>(
      ::proto::EntityRendererChangedInfo::internal_default_instance());
  _EntityAuthorityInfo_default_instance_._instance.get_mutable()->ai_info_ = const_cast< ::proto::SceneEntityAiInfo*>(
      ::proto::SceneEntityAiInfo::internal_default_instance());
  _EntityAuthorityInfo_default_instance_._instance.get_mutable()->born_pos_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _EntityAuthorityInfo_default_instance_._instance.get_mutable()->client_extra_info_ = const_cast< ::proto::EntityClientExtraInfo*>(
      ::proto::EntityClientExtraInfo::internal_default_instance());
  _SceneEntityInfo_default_instance_._instance.get_mutable()->motion_info_ = const_cast< ::proto::MotionInfo*>(
      ::proto::MotionInfo::internal_default_instance());
  _SceneEntityInfo_default_instance_._instance.get_mutable()->entity_client_data_ = const_cast< ::proto::EntityClientData*>(
      ::proto::EntityClientData::internal_default_instance());
  _SceneEntityInfo_default_instance_._instance.get_mutable()->entity_authority_info_ = const_cast< ::proto::EntityAuthorityInfo*>(
      ::proto::EntityAuthorityInfo::internal_default_instance());
  _SceneEntityInfo_default_instance_.avatar_ = const_cast< ::proto::SceneAvatarInfo*>(
      ::proto::SceneAvatarInfo::internal_default_instance());
  _SceneEntityInfo_default_instance_.monster_ = const_cast< ::proto::SceneMonsterInfo*>(
      ::proto::SceneMonsterInfo::internal_default_instance());
  _SceneEntityInfo_default_instance_.npc_ = const_cast< ::proto::SceneNpcInfo*>(
      ::proto::SceneNpcInfo::internal_default_instance());
  _SceneEntityInfo_default_instance_.gadget_ = const_cast< ::proto::SceneGadgetInfo*>(
      ::proto::SceneGadgetInfo::internal_default_instance());
  _CreateGadgetInfo_default_instance_._instance.get_mutable()->chest_ = const_cast< ::proto::CreateGadgetInfo_Chest*>(
      ::proto::CreateGadgetInfo_Chest::internal_default_instance());
  _CreateEntityInfo_default_instance_._instance.get_mutable()->pos_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _CreateEntityInfo_default_instance_._instance.get_mutable()->rot_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _CreateEntityInfo_default_instance_.monster_id_ = 0u;
  _CreateEntityInfo_default_instance_.npc_id_ = 0u;
  _CreateEntityInfo_default_instance_.gadget_id_ = 0u;
  _CreateEntityInfo_default_instance_.item_id_ = 0u;
  _CreateEntityInfo_default_instance_.gadget_ = const_cast< ::proto::CreateGadgetInfo*>(
      ::proto::CreateGadgetInfo::internal_default_instance());
  _TrialAvatarInfo_default_instance_._instance.get_mutable()->grant_record_ = const_cast< ::proto::TrialAvatarGrantRecord*>(
      ::proto::TrialAvatarGrantRecord::internal_default_instance());
  _AvatarInfo_PropMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_AvatarInfo_PropMapEntry_default_instance_._instance.get_mutable());
  _AvatarInfo_PropMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _AvatarInfo_FightPropMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_AvatarInfo_FightPropMapEntry_default_instance_._instance.get_mutable());
  _AvatarInfo_FightPropMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _AvatarInfo_SkillMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_AvatarInfo_SkillMapEntry_default_instance_._instance.get_mutable());
  _AvatarInfo_SkillMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _AvatarInfo_SkillLevelMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_AvatarInfo_SkillLevelMapEntry_default_instance_._instance.get_mutable());
  _AvatarInfo_SkillLevelMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _AvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_AvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_._instance.get_mutable());
  _AvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _AvatarInfo_default_instance_._instance.get_mutable()->trial_avatar_info_ = const_cast< ::proto::TrialAvatarInfo*>(
      ::proto::TrialAvatarInfo::internal_default_instance());
  _AvatarInfo_default_instance_._instance.get_mutable()->fetter_info_ = const_cast< ::proto::AvatarFetterInfo*>(
      ::proto::AvatarFetterInfo::internal_default_instance());
  _AvatarInfo_default_instance_._instance.get_mutable()->excel_info_ = const_cast< ::proto::AvatarExcelInfo*>(
      ::proto::AvatarExcelInfo::internal_default_instance());
  _ShowEquip_default_instance_.reliquary_ = const_cast< ::proto::Reliquary*>(
      ::proto::Reliquary::internal_default_instance());
  _ShowEquip_default_instance_.weapon_ = const_cast< ::proto::Weapon*>(
      ::proto::Weapon::internal_default_instance());
  _ShowAvatarInfo_PropMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_ShowAvatarInfo_PropMapEntry_default_instance_._instance.get_mutable());
  _ShowAvatarInfo_PropMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _ShowAvatarInfo_FightPropMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_ShowAvatarInfo_FightPropMapEntry_default_instance_._instance.get_mutable());
  _ShowAvatarInfo_FightPropMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _ShowAvatarInfo_SkillLevelMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_ShowAvatarInfo_SkillLevelMapEntry_default_instance_._instance.get_mutable());
  _ShowAvatarInfo_SkillLevelMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _ShowAvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_ShowAvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_._instance.get_mutable());
  _ShowAvatarInfo_ProudSkillExtraLevelMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _ShowAvatarInfo_default_instance_._instance.get_mutable()->fetter_info_ = const_cast< ::proto::AvatarFetterInfo*>(
      ::proto::AvatarFetterInfo::internal_default_instance());
  _ShowAvatarInfo_default_instance_._instance.get_mutable()->excel_info_ = const_cast< ::proto::AvatarExcelInfo*>(
      ::proto::AvatarExcelInfo::internal_default_instance());
  _Quest_LackedNpcMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_Quest_LackedNpcMapEntry_default_instance_._instance.get_mutable());
  _Quest_LackedNpcMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _Quest_LackedPlaceMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_Quest_LackedPlaceMapEntry_default_instance_._instance.get_mutable());
  _Quest_LackedPlaceMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _NpcPositionInfo_default_instance_._instance.get_mutable()->pos_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _MailItem_default_instance_._instance.get_mutable()->equip_param_ = const_cast< ::proto::EquipParam*>(
      ::proto::EquipParam::internal_default_instance());
  _MailItem_default_instance_._instance.get_mutable()->delete_info_ = const_cast< ::proto::MaterialDeleteInfo*>(
      ::proto::MaterialDeleteInfo::internal_default_instance());
  _MailData_default_instance_._instance.get_mutable()->mail_text_content_ = const_cast< ::proto::MailTextContent*>(
      ::proto::MailTextContent::internal_default_instance());
  _OnlinePlayerInfo_default_instance_._instance.get_mutable()->profile_picture_ = const_cast< ::proto::ProfilePicture*>(
      ::proto::ProfilePicture::internal_default_instance());
  _MapMarkPoint_default_instance_._instance.get_mutable()->pos_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _MassiveGrassInfo_default_instance_._instance.get_mutable()->center_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _MassiveGrassInfo_default_instance_._instance.get_mutable()->size_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _MassiveBoxInfo_default_instance_._instance.get_mutable()->center_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _MassiveBoxInfo_default_instance_._instance.get_mutable()->extents_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _MassiveBoxInfo_default_instance_._instance.get_mutable()->up_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _MassiveBoxInfo_default_instance_._instance.get_mutable()->forward_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _MassiveBoxInfo_default_instance_._instance.get_mutable()->right_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _ClientMassiveEntity_default_instance_.water_info_ = const_cast< ::proto::MassiveWaterInfo*>(
      ::proto::MassiveWaterInfo::internal_default_instance());
  _ClientMassiveEntity_default_instance_.grass_info_ = const_cast< ::proto::MassiveGrassInfo*>(
      ::proto::MassiveGrassInfo::internal_default_instance());
  _ClientMassiveEntity_default_instance_.box_info_ = const_cast< ::proto::MassiveBoxInfo*>(
      ::proto::MassiveBoxInfo::internal_default_instance());
  _ShapeSphere_default_instance_._instance.get_mutable()->center_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _ShapeBox_default_instance_._instance.get_mutable()->center_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _ShapeBox_default_instance_._instance.get_mutable()->axis0_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _ShapeBox_default_instance_._instance.get_mutable()->axis1_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _ShapeBox_default_instance_._instance.get_mutable()->axis2_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _ShapeBox_default_instance_._instance.get_mutable()->extents_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _ServerMassiveEntity_default_instance_.water_info_ = const_cast< ::proto::MassiveWaterInfo*>(
      ::proto::MassiveWaterInfo::internal_default_instance());
  _ServerMassiveEntity_default_instance_.grass_info_ = const_cast< ::proto::MassiveGrassInfo*>(
      ::proto::MassiveGrassInfo::internal_default_instance());
  _ServerMassiveEntity_default_instance_.box_info_ = const_cast< ::proto::MassiveBoxInfo*>(
      ::proto::MassiveBoxInfo::internal_default_instance());
  _ShopCardProduct_default_instance_.resin_card_ = const_cast< ::proto::ShopCardProduct_ResinCard*>(
      ::proto::ShopCardProduct_ResinCard::internal_default_instance());
  _PlayTeamEntityInfo_default_instance_._instance.get_mutable()->ability_info_ = const_cast< ::proto::AbilitySyncStateInfo*>(
      ::proto::AbilitySyncStateInfo::internal_default_instance());
  _HomeMarkPointFurnitureData_default_instance_._instance.get_mutable()->pos_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _HomeMarkPointFurnitureData_default_instance_.npc_data_ = const_cast< ::proto::HomeMarkPointNPCData*>(
      ::proto::HomeMarkPointNPCData::internal_default_instance());
  _HomeMarkPointFurnitureData_default_instance_.suite_data_ = const_cast< ::proto::HomeMarkPointSuiteData*>(
      ::proto::HomeMarkPointSuiteData::internal_default_instance());
  _HomeFurnitureArrangementMuipData_default_instance_._instance.get_mutable()->spawn_pos_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _HomeFurnitureArrangementMuipData_default_instance_._instance.get_mutable()->spawn_rot_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _CustomDungeonAbstractMuipData_BrickStatisticsMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_CustomDungeonAbstractMuipData_BrickStatisticsMapEntry_default_instance_._instance.get_mutable());
  _CustomDungeonAbstractMuipData_BrickStatisticsMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _CustomDungeonBriefMuipData_default_instance_._instance.get_mutable()->setting_ = const_cast< ::proto::CustomDungeonSettingMuipData*>(
      ::proto::CustomDungeonSettingMuipData::internal_default_instance());
  _CustomDungeonBriefMuipData_default_instance_._instance.get_mutable()->abstract_ = const_cast< ::proto::CustomDungeonAbstractMuipData*>(
      ::proto::CustomDungeonAbstractMuipData::internal_default_instance());
  _CustomDungeonBriefMuipData_default_instance_._instance.get_mutable()->social_ = const_cast< ::proto::CustomDungeonSocialMuipData*>(
      ::proto::CustomDungeonSocialMuipData::internal_default_instance());
  _GCGDuelExtra_CardFaceMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_GCGDuelExtra_CardFaceMapEntry_default_instance_._instance.get_mutable());
  _GCGDuelExtra_CardFaceMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014define.proto\022\005proto\"\037\n\tParamList\022\022\n\npa"
      "ram_list\030\001 \003(\r\"O\n\tPropValue\022\014\n\004type\030\001 \001("
      "\r\022\013\n\003val\030\004 \001(\003\022\016\n\004ival\030\002 \001(\003H\000\022\016\n\004fval\030\003"
      " \001(\002H\000B\007\n\005value\"(\n\nUint32Pair\022\013\n\003key\030\001 \001"
      "(\r\022\r\n\005value\030\002 \001(\r\"S\n\020RegionSimpleInfo\022\014\n"
      "\004name\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022\014\n\004type\030\003 \001(\t"
      "\022\024\n\014dispatch_url\030\004 \001(\t\"\263\001\n\026QueryRegionLi"
      "stHttpRsp\022\017\n\007retcode\030\001 \001(\005\022,\n\013region_lis"
      "t\030\002 \003(\0132\027.proto.RegionSimpleInfo\022\031\n\021clie"
      "nt_secret_key\030\005 \001(\014\022&\n\036client_custom_con"
      "fig_encrypted\030\006 \001(\014\022\027\n\017enable_login_pc\030\007"
      " \001(\010\"+\n\017ForceUpdateInfo\022\030\n\020force_update_"
      "url\030\001 \001(\t\"b\n\016StopServerInfo\022\027\n\017stop_begi"
      "n_time\030\001 \001(\r\022\025\n\rstop_end_time\030\002 \001(\r\022\013\n\003u"
      "rl\030\003 \001(\t\022\023\n\013content_msg\030\004 \001(\t\"\242\001\n\020ResVer"
      "sionConfig\022\017\n\007version\030\001 \001(\r\022\017\n\007relogin\030\002"
      " \001(\010\022\013\n\003md5\030\003 \001(\t\022\032\n\022release_total_size\030"
      "\004 \001(\t\022\026\n\016version_suffix\030\005 \001(\t\022\016\n\006branch\030"
      "\006 \001(\t\022\033\n\023next_script_version\030\007 \001(\t\"\273\006\n\nR"
      "egionInfo\022\025\n\rgateserver_ip\030\001 \001(\t\022\027\n\017gate"
      "server_port\030\002 \001(\r\022\030\n\020pay_callback_url\030\003 "
      "\001(\t\022\021\n\tarea_type\030\007 \001(\t\022\024\n\014resource_url\030\010"
      " \001(\t\022\020\n\010data_url\030\t \001(\t\022\024\n\014feedback_url\030\n"
      " \001(\t\022\024\n\014bulletin_url\030\013 \001(\t\022\030\n\020resource_u"
      "rl_bak\030\014 \001(\t\022\024\n\014data_url_bak\030\r \001(\t\022\033\n\023cl"
      "ient_data_version\030\016 \001(\r\022\024\n\014handbook_url\030"
      "\020 \001(\t\022#\n\033client_silence_data_version\030\022 \001"
      "(\r\022\027\n\017client_data_md5\030\023 \001(\t\022\037\n\027client_si"
      "lence_data_md5\030\024 \001(\t\0223\n\022res_version_conf"
      "ig\030\026 \001(\0132\027.proto.ResVersionConfig\022\022\n\nsec"
      "ret_key\030\027 \001(\014\022\036\n\026official_community_url\030"
      "\030 \001(\t\022\035\n\025client_version_suffix\030\032 \001(\t\022%\n\035"
      "client_silence_version_suffix\030\033 \001(\t\022\"\n\032u"
      "se_gateserver_domain_name\030\034 \001(\010\022\036\n\026gates"
      "erver_domain_name\030\035 \001(\t\022\027\n\017user_center_u"
      "rl\030\036 \001(\t\022\030\n\020account_bind_url\030\037 \001(\t\022\021\n\tcd"
      "key_url\030  \001(\t\022\032\n\022privacy_policy_url\030! \001("
      "\t\022\031\n\021next_resource_url\030\" \001(\t\0228\n\027next_res"
      "_version_config\030# \001(\0132\027.proto.ResVersion"
      "Config\022\020\n\010game_biz\030$ \001(\t\"\270\002\n\026QueryCurrRe"
      "gionHttpRsp\022\017\n\007retcode\030\001 \001(\005\022\013\n\003msg\030\002 \001("
      "\t\022&\n\013region_info\030\003 \001(\0132\021.proto.RegionInf"
      "o\022\031\n\021client_secret_key\030\013 \001(\014\022&\n\036region_c"
      "ustom_config_encrypted\030\014 \001(\014\022-\n%client_r"
      "egion_custom_config_encrypted\030\r \001(\014\022.\n\014f"
      "orce_udpate\030\004 \001(\0132\026.proto.ForceUpdateInf"
      "oH\000\022,\n\013stop_server\030\005 \001(\0132\025.proto.StopSer"
      "verInfoH\000B\010\n\006detail\"(\n\020PlayerUidExtInfo\022"
      "\024\n\014reg_platform\030\001 \001(\r\"q\n\tReliquary\022\r\n\005le"
      "vel\030\001 \001(\r\022\013\n\003exp\030\002 \001(\r\022\025\n\rpromote_level\030"
      "\003 \001(\r\022\024\n\014main_prop_id\030\004 \001(\r\022\033\n\023append_pr"
      "op_id_list\030\005 \003(\r\"\234\001\n\006Weapon\022\r\n\005level\030\001 \001"
      "(\r\022\013\n\003exp\030\002 \001(\r\022\025\n\rpromote_level\030\003 \001(\r\022."
      "\n\taffix_map\030\004 \003(\0132\033.proto.Weapon.AffixMa"
      "pEntry\032/\n\rAffixMapEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005"
      "value\030\002 \001(\r:\0028\001\"\215\006\n\022MaterialDeleteInfo\022\031"
      "\n\021has_delete_config\030\001 \001(\010\022F\n\021count_down_"
      "delete\030\002 \001(\0132).proto.MaterialDeleteInfo."
      "CountDownDeleteH\000\022\?\n\013date_delete\030\003 \001(\0132("
      ".proto.MaterialDeleteInfo.DateTimeDelete"
      "H\000\022Z\n\034delay_week_count_down_delete\030\004 \001(\013"
      "22.proto.MaterialDeleteInfo.DelayWeekCou"
      "ntDownDeleteH\000\032\310\001\n\017CountDownDelete\022\\\n\023de"
      "lete_time_num_map\030\001 \003(\0132\?.proto.Material"
      "DeleteInfo.CountDownDelete.DeleteTimeNum"
      "MapEntry\022\036\n\026config_count_down_time\030\002 \001(\r"
      "\0327\n\025DeleteTimeNumMapEntry\022\013\n\003key\030\001 \001(\r\022\r"
      "\n\005value\030\002 \001(\r:\0028\001\032%\n\016DateTimeDelete\022\023\n\013d"
      "elete_time\030\001 \001(\r\032\365\001\n\030DelayWeekCountDownD"
      "elete\022e\n\023delete_time_num_map\030\001 \003(\0132H.pro"
      "to.MaterialDeleteInfo.DelayWeekCountDown"
      "Delete.DeleteTimeNumMapEntry\022\031\n\021config_d"
      "elay_week\030\002 \001(\r\022\036\n\026config_count_down_tim"
      "e\030\003 \001(\r\0327\n\025DeleteTimeNumMapEntry\022\013\n\003key\030"
      "\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001B\r\n\013delete_info\""
      "I\n\010Material\022\r\n\005count\030\001 \001(\r\022.\n\013delete_inf"
      "o\030\002 \001(\0132\031.proto.MaterialDeleteInfo\"l\n\005Eq"
      "uip\022\021\n\tis_locked\030\003 \001(\010\022%\n\treliquary\030\001 \001("
      "\0132\020.proto.ReliquaryH\000\022\037\n\006weapon\030\002 \001(\0132\r."
      "proto.WeaponH\000B\010\n\006detail\"\032\n\tFurniture\022\r\n"
      "\005count\030\001 \001(\r\"\232\001\n\004Item\022\017\n\007item_id\030\001 \001(\r\022\014"
      "\n\004guid\030\002 \001(\004\022#\n\010material\030\005 \001(\0132\017.proto.M"
      "aterialH\000\022\035\n\005equip\030\006 \001(\0132\014.proto.EquipH\000"
      "\022%\n\tfurniture\030\007 \001(\0132\020.proto.FurnitureH\000B"
      "\010\n\006detail\"+\n\tItemParam\022\017\n\007item_id\030\001 \001(\r\022"
      "\r\n\005count\030\002 \001(\r\"Z\n\nEquipParam\022\017\n\007item_id\030"
      "\001 \001(\r\022\020\n\010item_num\030\002 \001(\r\022\022\n\nitem_level\030\003 "
      "\001(\r\022\025\n\rpromote_level\030\004 \001(\r\"6\n\016EquipParam"
      "List\022$\n\titem_list\030\001 \003(\0132\021.proto.EquipPar"
      "am\"@\n\006Reward\022\021\n\treward_id\030\001 \001(\r\022#\n\titem_"
      "list\030\002 \003(\0132\020.proto.ItemParam\"6\n\rAbilityS"
      "tring\022\r\n\003str\030\001 \001(\tH\000\022\016\n\004hash\030\002 \001(\rH\000B\006\n\004"
      "type\"\"\n\021AbilityFloatValue\022\r\n\005value\030\001 \001(\002"
      "\"\315\001\n\027AbilityScalarValueEntry\022!\n\003key\030\001 \001("
      "\0132\024.proto.AbilityString\022,\n\nvalue_type\030\002 "
      "\001(\0162\030.proto.AbilityScalarType\022\025\n\013float_v"
      "alue\030\003 \001(\002H\000\022\026\n\014string_value\030\004 \001(\tH\000\022\023\n\t"
      "int_value\030\005 \001(\005H\000\022\024\n\nuint_value\030\006 \001(\rH\000B"
      "\007\n\005value\"\307\001\n\025AbilityAppliedAbility\022*\n\014ab"
      "ility_name\030\001 \001(\0132\024.proto.AbilityString\022."
      "\n\020ability_override\030\002 \001(\0132\024.proto.Ability"
      "String\0224\n\014override_map\030\003 \003(\0132\036.proto.Abi"
      "lityScalarValueEntry\022\034\n\024instanced_abilit"
      "y_id\030\004 \001(\r\"\237\001\n\027AbilityAttachedModifier\022\022"
      "\n\nis_invalid\030\001 \001(\010\022\027\n\017owner_entity_id\030\002 "
      "\001(\r\022\035\n\025instanced_modifier_id\030\003 \001(\r\022\036\n\026is"
      "_serverbuff_modifier\030\004 \001(\010\022\030\n\020attach_nam"
      "e_hash\030\005 \001(\005\"H\n\022ModifierDurability\022\024\n\014re"
      "duce_ratio\030\001 \001(\002\022\034\n\024remaining_durability"
      "\030\002 \001(\002\"\201\004\n\026AbilityAppliedModifier\022\031\n\021mod"
      "ifier_local_id\030\001 \001(\005\022 \n\030parent_ability_e"
      "ntity_id\030\002 \001(\r\0221\n\023parent_ability_name\030\003 "
      "\001(\0132\024.proto.AbilityString\0225\n\027parent_abil"
      "ity_override\030\004 \001(\0132\024.proto.AbilityString"
      "\022\034\n\024instanced_ability_id\030\005 \001(\r\022\035\n\025instan"
      "ced_modifier_id\030\006 \001(\r\022\026\n\016exist_duration\030"
      "\007 \001(\002\022C\n\033attached_instanced_modifier\030\010 \001"
      "(\0132\036.proto.AbilityAttachedModifier\022\027\n\017ap"
      "ply_entity_id\030\t \001(\r\022\"\n\032is_attached_paren"
      "t_ability\030\n \001(\010\0226\n\023modifier_durability\030\013"
      " \001(\0132\031.proto.ModifierDurability\022\021\n\tsbuff"
      "_uid\030\014 \001(\r\022\036\n\026is_serverbuff_modifier\030\r \001"
      "(\010\"c\n\020MassivePropParam\022\014\n\004type\030\001 \001(\005\022\032\n\022"
      "reaction_info_list\030\002 \003(\r\022\022\n\nparam_list\030\003"
      " \003(\002\022\021\n\tsync_flag\030\004 \001(\r\"M\n\023MassivePropSy"
      "ncInfo\022\n\n\002id\030\001 \001(\003\022*\n\tprop_list\030\002 \003(\0132\027."
      "proto.MassivePropParam\"\'\n\017BreakoutVector"
      "2\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"5\n\021BreakoutBrick"
      "Info\022\n\n\002hp\030\001 \001(\r\022\024\n\014element_type\030\002 \001(\r\"\255"
      "\002\n\036BreakoutPhysicalObjectModifier\022\014\n\004typ"
      "e\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\022\016\n\006param1\030\003 \001(\005\022\016\n\006p"
      "aram2\030\004 \001(\005\022\016\n\006param3\030\005 \001(\005\022\016\n\006param4\030\006 "
      "\001(\005\022\016\n\006param5\030\007 \001(\005\022\016\n\006param6\030\010 \001(\005\022\r\n\005b"
      "ool1\030\t \001(\010\022\020\n\010duration\030\n \001(\005\022\020\n\010end_time"
      "\030\013 \001(\005\022\r\n\005combo\030\014 \001(\r\022\017\n\007peer_id\030\r \001(\r\022\022"
      "\n\nskill_type\030\016 \001(\r\022\r\n\005level\030\017 \001(\r\022\033\n\023cho"
      "ose_player_count\030\020 \001(\r\"\311\003\n\026BreakoutPhysi"
      "calObject\022\n\n\002id\030\001 \001(\r\022\r\n\005index\030\002 \001(\r\022\021\n\t"
      "is_active\030\003 \001(\010\022#\n\003pos\030\004 \001(\0132\026.proto.Bre"
      "akoutVector2\022(\n\010move_dir\030\005 \001(\0132\026.proto.B"
      "reakoutVector2\022\r\n\005speed\030\006 \001(\005\022\024\n\014init_pe"
      "er_id\030\007 \001(\r\022\r\n\005state\030\010 \001(\r\022\024\n\014element_ty"
      "pe\030\t \001(\r\022\035\n\025element_reaction_buff\030\n \001(\r\022"
      "<\n\rmodifier_list\030\013 \003(\0132%.proto.BreakoutP"
      "hysicalObjectModifier\022\026\n\016total_rotation\030"
      "\014 \001(\005\022+\n\tinfo_list\030\r \003(\0132\030.proto.Breakou"
      "tBrickInfo\022\030\n\020last_hit_peer_id\030\016 \001(\r\022\034\n\024"
      "speed_increase_count\030\017 \001(\r\022\016\n\006offset\030\020 \001"
      "(\005\"s\n\022BreakoutSpawnPoint\022\n\n\002id\030\001 \001(\r\022\026\n\016"
      "brick_suite_id\030\002 \001(\r\0229\n\022spawned_brick_li"
      "st\030\003 \003(\0132\035.proto.BreakoutPhysicalObject\""
      "I\n\036BreakoutElementReactionCounter\022\030\n\020ele"
      "ment_reaction\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\"Z\n\032Br"
      "eakoutSyncConnectUidInfo\022\013\n\003uid\030\001 \001(\r\022\025\n"
      "\rskill_id_list\030\002 \003(\r\022\030\n\020skill_level_list"
      "\030\003 \003(\r\"\371\005\n\020BreakoutSnapShot\022\030\n\020client_ga"
      "me_time\030\001 \001(\004\022\030\n\020server_game_time\030\002 \001(\004\022"
      "0\n\tball_list\030\003 \003(\0132\035.proto.BreakoutPhysi"
      "calObject\022;\n\024physical_object_list\030\004 \003(\0132"
      "\035.proto.BreakoutPhysicalObject\022*\n\013action"
      "_list\030\005 \003(\0132\025.proto.BreakoutAction\022\022\n\nwa"
      "ve_index\030\006 \001(\r\022\021\n\tis_finish\030\007 \001(\010\022\r\n\005sco"
      "re\030\010 \001(\r\022\r\n\005combo\030\t \001(\r\022\021\n\tmax_combo\030\n \001"
      "(\r\022\022\n\nlife_count\030\013 \001(\r\022\030\n\020wave_suite_ind"
      "ex\030\014 \001(\r\0223\n\020spawn_point_list\030\r \003(\0132\031.pro"
      "to.BreakoutSpawnPoint\022\031\n\021remaining_boss_"
      "hp\030\016 \001(\r\022J\n\033brick_element_reaction_list\030"
      "\017 \003(\0132%.proto.BreakoutElementReactionCou"
      "nter\022I\n\032ball_element_reaction_list\030\020 \003(\013"
      "2%.proto.BreakoutElementReactionCounter\022"
      "8\n\ruid_info_list\030\021 \003(\0132!.proto.BreakoutS"
      "yncConnectUidInfo\022:\n\023dynamic_object_list"
      "\030\022 \003(\0132\035.proto.BreakoutPhysicalObject\022\025\n"
      "\rid_index_list\030\023 \003(\r\022\034\n\024raw_client_game_"
      "time\030\024 \001(\005\"\201\005\n\016BreakoutAction\022=\n\013action_"
      "type\030\001 \001(\0162(.proto.BreakoutAction.Breako"
      "utActionType\022\030\n\020client_game_time\030\002 \001(\004\022\030"
      "\n\020server_game_time\030\003 \001(\004\022\021\n\tis_failed\030\004 "
      "\001(\010\022\021\n\tpre_index\030\005 \001(\r\022\021\n\tnew_index\030\006 \001("
      "\r\022#\n\003pos\030\007 \001(\0132\026.proto.BreakoutVector2\022("
      "\n\010move_dir\030\010 \001(\0132\026.proto.BreakoutVector2"
      "\022\r\n\005speed\030\t \001(\005\022\017\n\007peer_id\030\n \001(\r\022\024\n\014elem"
      "ent_type\030\013 \001(\r\022\035\n\025element_reaction_buff\030"
      "\014 \001(\r\022\034\n\024speed_increase_count\030\r \001(\r\022\026\n\016h"
      "as_extra_ball\030\016 \001(\010\022.\n\016extra_ball_dir\030\017 "
      "\001(\0132\026.proto.BreakoutVector2\022\030\n\020extra_bal"
      "l_index\030\020 \001(\r\"\236\001\n\022BreakoutActionType\022\024\n\020"
      "ACTION_TYPE_NONE\020\000\022\033\n\027ACTION_TYPE_LAUNCH"
      "_BALL\020\001\022\034\n\030ACTION_TYPE_DESTROY_BALL\020\002\022\036\n"
      "\032ACTION_TYPE_FALLING_OBJECT\020\003\022\027\n\023ACTION_"
      "TYPE_MISSILE\020\004\"\225\002\n\027AbilityMixinRecoverIn"
      "fo\022\020\n\010local_id\030\003 \001(\r\022\021\n\tdata_list\030\004 \003(\r\022"
      "\036\n\026is_serverbuff_modifier\030\005 \001(\010\0225\n\021massi"
      "ve_prop_list\030\006 \003(\0132\032.proto.MassivePropSy"
      "ncInfo\0223\n\022breakout_snap_shot\030\007 \001(\0132\027.pro"
      "to.BreakoutSnapShot\022\036\n\024instanced_ability"
      "_id\030\001 \001(\rH\000\022\037\n\025instanced_modifier_id\030\002 \001"
      "(\rH\000B\010\n\006Source\"\323\002\n\024AbilitySyncStateInfo\022"
      "\021\n\tis_inited\030\001 \001(\010\0229\n\021dynamic_value_map\030"
      "\002 \003(\0132\036.proto.AbilityScalarValueEntry\0227\n"
      "\021applied_abilities\030\003 \003(\0132\034.proto.Ability"
      "AppliedAbility\0228\n\021applied_modifiers\030\004 \003("
      "\0132\035.proto.AbilityAppliedModifier\022;\n\023mixi"
      "n_recover_infos\030\005 \003(\0132\036.proto.AbilityMix"
      "inRecoverInfo\022=\n\025sgv_dynamic_value_map\030\006"
      " \003(\0132\036.proto.AbilityScalarValueEntry\"b\n\r"
      "AbilityEmbryo\022\022\n\nability_id\030\001 \001(\r\022\031\n\021abi"
      "lity_name_hash\030\002 \001(\007\022\"\n\032ability_override"
      "_name_hash\030\003 \001(\007\"H\n\023AbilityControlBlock\022"
      "1\n\023ability_embryo_list\030\001 \003(\0132\024.proto.Abi"
      "lityEmbryo\")\n\006Vector\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001"
      "(\002\022\t\n\001z\030\003 \001(\002\"#\n\013VectorPlane\022\t\n\001x\030\001 \001(\002\022"
      "\t\n\001y\030\002 \001(\002\"-\n\nVector3Int\022\t\n\001x\030\001 \001(\005\022\t\n\001y"
      "\030\002 \001(\005\022\t\n\001z\030\003 \001(\005\"\212\001\n\016EntityMoveInfo\022\021\n\t"
      "entity_id\030\001 \001(\r\022&\n\013motion_info\030\002 \001(\0132\021.p"
      "roto.MotionInfo\022\022\n\nscene_time\030\003 \001(\r\022\024\n\014r"
      "eliable_seq\030\004 \001(\r\022\023\n\013is_reliable\030\005 \001(\010\"\203"
      "\002\n\nMotionInfo\022\032\n\003pos\030\001 \001(\0132\r.proto.Vecto"
      "r\022\032\n\003rot\030\002 \001(\0132\r.proto.Vector\022\034\n\005speed\030\003"
      " \001(\0132\r.proto.Vector\022!\n\005state\030\004 \001(\0162\022.pro"
      "to.MotionState\022\035\n\006params\030\005 \003(\0132\r.proto.V"
      "ector\022\036\n\007ref_pos\030\006 \001(\0132\r.proto.Vector\022\016\n"
      "\006ref_id\030\007 \001(\r\022\022\n\nscene_time\030\010 \001(\r\022\031\n\021int"
      "erval_velocity\030\t \001(\004\"C\n\tPlaceInfo\022\032\n\003pos"
      "\030\001 \001(\0132\r.proto.Vector\022\032\n\003rot\030\002 \001(\0132\r.pro"
      "to.Vector\"\332\002\n\017SceneWeaponInfo\022\021\n\tentity_"
      "id\030\001 \001(\r\022\021\n\tgadget_id\030\002 \001(\r\022\017\n\007item_id\030\003"
      " \001(\r\022\014\n\004guid\030\004 \001(\004\022\r\n\005level\030\005 \001(\r\022\025\n\rpro"
      "mote_level\030\006 \001(\r\0221\n\014ability_info\030\007 \001(\0132\033"
      ".proto.AbilitySyncStateInfo\0227\n\taffix_map"
      "\030\010 \003(\0132$.proto.SceneWeaponInfo.AffixMapE"
      "ntry\022\?\n\025renderer_changed_info\030\t \001(\0132 .pr"
      "oto.EntityRendererChangedInfo\032/\n\rAffixMa"
      "pEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"Y"
      "\n\022SceneReliquaryInfo\022\017\n\007item_id\030\001 \001(\r\022\014\n"
      "\004guid\030\002 \001(\004\022\r\n\005level\030\003 \001(\r\022\025\n\rpromote_le"
      "vel\030\004 \001(\r\"\221\001\n\nServerBuff\022\027\n\017server_buff_"
      "uid\030\001 \001(\r\022\026\n\016server_buff_id\030\002 \001(\r\022\030\n\020ser"
      "ver_buff_type\030\003 \001(\r\022\035\n\025instanced_modifie"
      "r_id\030\004 \001(\r\022\031\n\021is_modifier_added\030\005 \001(\010\"0\n"
      "\016CurVehicleInfo\022\021\n\tentity_id\030\001 \001(\r\022\013\n\003po"
      "s\030\002 \001(\r\"\253\001\n\017AvatarExcelInfo\022\030\n\020prefab_pa"
      "th_hash\030\001 \001(\004\022\037\n\027prefab_path_remote_hash"
      "\030\002 \001(\004\022\034\n\024controller_path_hash\030\003 \001(\004\022#\n\033"
      "controller_path_remote_hash\030\004 \001(\004\022\032\n\022com"
      "bat_config_hash\030\005 \001(\004\"\307\006\n\017SceneAvatarInf"
      "o\022\013\n\003uid\030\001 \001(\r\022\021\n\tavatar_id\030\002 \001(\r\022\014\n\004gui"
      "d\030\003 \001(\004\022\017\n\007peer_id\030\004 \001(\r\022\025\n\requip_id_lis"
      "t\030\005 \003(\r\022\026\n\016skill_depot_id\030\006 \001(\r\022\026\n\016talen"
      "t_id_list\030\007 \003(\r\022&\n\006weapon\030\010 \001(\0132\026.proto."
      "SceneWeaponInfo\0221\n\016reliquary_list\030\t \003(\0132"
      "\031.proto.SceneReliquaryInfo\022\036\n\026core_proud"
      "_skill_level\030\013 \001(\r\022!\n\031inherent_proud_ski"
      "ll_list\030\014 \003(\r\022B\n\017skill_level_map\030\r \003(\0132)"
      ".proto.SceneAvatarInfo.SkillLevelMapEntr"
      "y\022X\n\033proud_skill_extra_level_map\030\016 \003(\01323"
      ".proto.SceneAvatarInfo.ProudSkillExtraLe"
      "velMapEntry\022+\n\020server_buff_list\030\017 \003(\0132\021."
      "proto.ServerBuff\022\033\n\023team_resonance_list\030"
      "\020 \003(\r\022\033\n\023wearing_flycloak_id\030\021 \001(\r\022\021\n\tbo"
      "rn_time\030\022 \001(\r\022\022\n\ncostume_id\030\023 \001(\r\022/\n\020cur"
      "_vehicle_info\030\024 \001(\0132\025.proto.CurVehicleIn"
      "fo\022*\n\nexcel_info\030\025 \001(\0132\026.proto.AvatarExc"
      "elInfo\022\021\n\tanim_hash\030\026 \001(\r\0324\n\022SkillLevelM"
      "apEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\032"
      ">\n\034ProudSkillExtraLevelMapEntry\022\013\n\003key\030\001"
      " \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"\231\001\n\rSceneFishInf"
      "o\022\017\n\007fish_id\030\001 \001(\r\022\033\n\023fish_pool_entity_i"
      "d\030\002 \001(\r\022$\n\rfish_pool_pos\030\003 \001(\0132\r.proto.V"
      "ector\022\033\n\023fish_pool_gadget_id\030\004 \001(\r\022\027\n\017la"
      "st_shock_time\030\005 \001(\r\"d\n\020FishtankFishInfo\022"
      " \n\030fish_distance_from_water\030\001 \001(\002\022\022\n\nfis"
      "h_scale\030\002 \001(\002\022\032\n\022initial_rotation_y\030\003 \001("
      "\002\"\207\006\n\020SceneMonsterInfo\022\022\n\nmonster_id\030\001 \001"
      "(\r\022\020\n\010group_id\030\002 \001(\r\022\021\n\tconfig_id\030\003 \001(\r\022"
      "+\n\013weapon_list\030\004 \003(\0132\026.proto.SceneWeapon"
      "Info\022\031\n\021authority_peer_id\030\005 \001(\r\022\022\n\naffix"
      "_list\030\006 \003(\r\022\020\n\010is_elite\030\007 \001(\010\022\027\n\017owner_e"
      "ntity_id\030\010 \001(\r\022\024\n\014summoned_tag\030\t \001(\r\022A\n\016"
      "summon_tag_map\030\n \003(\0132).proto.SceneMonste"
      "rInfo.SummonTagMapEntry\022\017\n\007pose_id\030\013 \001(\r"
      "\022)\n\tborn_type\030\014 \001(\0162\026.proto.MonsterBornT"
      "ype\022\020\n\010block_id\030\r \001(\r\022\021\n\tmark_flag\030\016 \001(\r"
      "\022\020\n\010title_id\030\017 \001(\r\022\027\n\017special_name_id\030\020 "
      "\001(\r\022\030\n\020attack_target_id\030\021 \001(\r\022*\n\rmonster"
      "_route\030\022 \001(\0132\023.proto.MonsterRoute\022\024\n\014ai_"
      "config_id\030\023 \001(\r\022\026\n\016level_route_id\030\024 \001(\r\022"
      "\024\n\014init_pose_id\030\025 \001(\r\022\020\n\010is_light\030\026 \001(\010\022"
      "\020\n\010kill_num\030\027 \001(\r\022)\n\tfish_info\0302 \001(\0132\024.p"
      "roto.SceneFishInfoH\000\0225\n\022fishtank_fish_in"
      "fo\0303 \001(\0132\027.proto.FishtankFishInfoH\000\0323\n\021S"
      "ummonTagMapEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002"
      " \001(\r:\0028\001B\t\n\007content\"Z\n\014SceneNpcInfo\022\016\n\006n"
      "pc_id\030\001 \001(\r\022\017\n\007room_id\030\002 \001(\r\022\027\n\017parent_q"
      "uest_id\030\003 \001(\r\022\020\n\010block_id\030\004 \001(\r\"@\n\013Workt"
      "opInfo\022\023\n\013option_list\030\001 \003(\r\022\034\n\024is_guest_"
      "can_operate\030\002 \001(\010\"<\n\016MathQuaternion\022\t\n\001x"
      "\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\t\n\001w\030\004 \001(\002\""
      "\253\003\n\014PlatformInfo\022\020\n\010route_id\030\001 \001(\r\022\023\n\013st"
      "art_index\030\002 \001(\005\022\030\n\020start_route_time\030\003 \001("
      "\r\022\030\n\020start_scene_time\030\004 \001(\r\022 \n\tstart_pos"
      "\030\007 \001(\0132\r.proto.Vector\022\022\n\nis_started\030\010 \001("
      "\010\022(\n\tstart_rot\030\t \001(\0132\025.proto.MathQuatern"
      "ion\022\027\n\017stop_scene_time\030\n \001(\r\022!\n\npos_offs"
      "et\030\013 \001(\0132\r.proto.Vector\022)\n\nrot_offset\030\014 "
      "\001(\0132\025.proto.MathQuaternion\0227\n\024moving_pla"
      "tform_type\030\r \001(\0162\031.proto.MovingPlatformT"
      "ype\022\021\n\tis_active\030\016 \001(\010\022\033\n\005route\030\017 \001(\0132\014."
      "proto.Route\022\020\n\010point_id\030\020 \001(\r\"\241\002\n\nRouteP"
      "oint\022\037\n\010position\030\001 \001(\0132\r.proto.Vector\022\024\n"
      "\014arrive_range\030\002 \001(\002\022\027\n\017has_reach_event\030\003"
      " \001(\010\022\022\n\010velocity\030\013 \001(\002H\000\022\016\n\004time\030\014 \001(\002H\000"
      "\022!\n\010rotation\030\025 \001(\0132\r.proto.VectorH\001\022/\n\016r"
      "otation_speed\030\026 \001(\0132\025.proto.MathQuaterni"
      "onH\001\022+\n\naxis_speed\030\027 \001(\0132\025.proto.MathQua"
      "ternionH\001B\r\n\013move_paramsB\017\n\rrotate_param"
      "s\"D\n\005Route\022\'\n\014route_points\030\001 \003(\0132\021.proto"
      ".RoutePoint\022\022\n\nroute_type\030\002 \001(\r\"v\n\014Monst"
      "erRoute\022\'\n\014route_points\030\001 \003(\0132\021.proto.Ro"
      "utePoint\022\023\n\013speed_level\030\002 \001(\r\022\022\n\nroute_t"
      "ype\030\003 \001(\r\022\024\n\014arrive_range\030\004 \001(\002\"&\n\013Weath"
      "erInfo\022\027\n\017weather_area_id\030\001 \001(\r\"\312\001\n\020Clie"
      "ntGadgetInfo\022\017\n\007camp_id\030\001 \001(\r\022\021\n\tcamp_ty"
      "pe\030\002 \001(\r\022\014\n\004guid\030\003 \001(\004\022\027\n\017owner_entity_i"
      "d\030\004 \001(\r\022\030\n\020target_entity_id\030\005 \001(\r\022\022\n\nasy"
      "nc_load\030\006 \001(\010\022\036\n\026is_peer_id_from_player\030"
      "\007 \001(\010\022\035\n\025target_entity_id_list\030\010 \003(\r\"X\n\021"
      "AbilityGadgetInfo\022\017\n\007camp_id\030\001 \001(\r\022\030\n\020ca"
      "mp_target_type\030\002 \001(\r\022\030\n\020target_entity_id"
      "\030\003 \001(\r\"<\n\020GatherGadgetInfo\022\017\n\007item_id\030\001 "
      "\001(\r\022\027\n\017is_forbid_guest\030\002 \001(\010\"2\n\020StatueGa"
      "dgetInfo\022\036\n\026opened_statue_uid_list\030\001 \003(\r"
      "\"\200\001\n\033WeeklyBossResinDiscountInfo\022\024\n\014disc"
      "ount_num\030\001 \001(\r\022\032\n\022discount_num_limit\030\002 \001"
      "(\r\022\022\n\nresin_cost\030\003 \001(\r\022\033\n\023original_resin"
      "_cost\030\004 \001(\r\"\213\002\n\rBossChestInfo\022\031\n\021monster"
      "_config_id\030\001 \001(\r\022\r\n\005resin\030\002 \001(\r\022\027\n\017remai"
      "n_uid_list\030\003 \003(\r\022\030\n\020qualify_uid_list\030\004 \003"
      "(\r\022B\n\020uid_discount_map\030\005 \003(\0132(.proto.Bos"
      "sChestInfo.UidDiscountMapEntry\032Y\n\023UidDis"
      "countMapEntry\022\013\n\003key\030\001 \001(\r\0221\n\005value\030\002 \001("
      "\0132\".proto.WeeklyBossResinDiscountInfo:\0028"
      "\001\"\231\001\n\020BlossomChestInfo\022\r\n\005resin\030\001 \001(\r\022\030\n"
      "\020qualify_uid_list\030\002 \003(\r\022\027\n\017remain_uid_li"
      "st\030\003 \003(\r\022\021\n\tdead_time\030\004 \001(\r\022\034\n\024blossom_r"
      "efresh_type\030\005 \001(\r\022\022\n\nrefresh_id\030\006 \001(\r\"B\n"
      "\022GadgetCrucibleInfo\022\022\n\nmp_play_id\030\001 \001(\r\022"
      "\030\n\020prepare_end_time\030\002 \001(\r\"\313\001\n\016GadgetPlay"
      "Info\022\021\n\tplay_type\030\001 \001(\r\022\020\n\010duration\030\002 \001("
      "\r\022\033\n\023progress_stage_list\030\003 \003(\r\022\020\n\010start_"
      "cd\030\004 \001(\r\022\022\n\nstart_time\030\005 \001(\r\022\020\n\010progress"
      "\030\006 \001(\r\0222\n\rcrucible_info\030\025 \001(\0132\031.proto.Ga"
      "dgetCrucibleInfoH\000B\013\n\tplay_info\"T\n\020MpPla"
      "yRewardInfo\022\r\n\005resin\030\001 \001(\r\022\027\n\017remain_uid"
      "_list\030\002 \003(\r\022\030\n\020qualify_uid_list\030\003 \003(\r\"\224\001"
      "\n\027GadgetGeneralRewardInfo\022\r\n\005resin\030\001 \001(\r"
      "\022\021\n\tdead_time\030\002 \001(\r\022\027\n\017remain_uid_list\030\003"
      " \003(\r\022\030\n\020qualify_uid_list\030\004 \003(\r\022$\n\nitem_p"
      "aram\030\005 \001(\0132\020.proto.ItemParam\"#\n\014Offering"
      "Info\022\023\n\013offering_id\030\001 \001(\r\"\223\001\n\014BuildingIn"
      "fo\022\023\n\013building_id\030\001 \001(\r\022\027\n\017point_config_"
      "id\030\002 \001(\r\022\014\n\004cost\030\003 \001(\r\022\016\n\006refund\030\005 \001(\r\022\021"
      "\n\towner_uid\030\006 \001(\r\022\023\n\013current_num\030\007 \001(\r\022\017"
      "\n\007max_num\030\010 \001(\r\"\177\n\016FoundationInfo\022\'\n\006sta"
      "tus\030\001 \001(\0162\027.proto.FoundationStatus\022\020\n\010ui"
      "d_list\030\002 \003(\r\022\033\n\023current_building_id\030\003 \001("
      "\r\022\025\n\rlocked_by_uid\030\004 \001(\r\">\n\rVehicleMembe"
      "r\022\013\n\003uid\030\001 \001(\r\022\023\n\013avatar_guid\030\002 \001(\004\022\013\n\003p"
      "os\030\003 \001(\r\"`\n\013VehicleInfo\022)\n\013member_list\030\001"
      " \003(\0132\024.proto.VehicleMember\022\021\n\towner_uid\030"
      "\002 \001(\r\022\023\n\013cur_stamina\030\003 \001(\002\"!\n\rEchoShellI"
      "nfo\022\020\n\010shell_id\030\001 \001(\r\":\n\nScreenInfo\022\017\n\007l"
      "ive_id\030\001 \001(\r\022\033\n\023projector_entity_id\030\002 \001("
      "\r\"O\n\014FishPoolInfo\022\017\n\007pool_id\030\001 \001(\r\022\026\n\016fi"
      "sh_area_list\030\002 \003(\r\022\026\n\016today_fish_num\030\003 \001"
      "(\r\"X\n\024CustomCommonNodeInfo\022\024\n\014parent_ind"
      "ex\030\001 \001(\005\022\021\n\tconfig_id\030\002 \001(\r\022\027\n\017slot_iden"
      "tifier\030\003 \001(\t\"F\n\024CustomGadgetTreeInfo\022.\n\t"
      "node_list\030\001 \003(\0132\033.proto.CustomCommonNode"
      "Info\"e\n\023RoguelikeGadgetInfo\022\026\n\016cell_conf"
      "ig_id\030\001 \001(\r\022\021\n\tcell_type\030\002 \001(\r\022\022\n\ncell_s"
      "tate\030\003 \001(\r\022\017\n\007cell_id\030\004 \001(\r\",\n\023NightCrow"
      "GadgetInfo\022\025\n\rargument_list\030\001 \003(\r\"1\n\030Des"
      "hretObeliskGadgetInfo\022\025\n\rargument_list\030\001"
      " \003(\r\"+\n\027CoinCollectOperatorInfo\022\020\n\010level"
      "_id\030\001 \001(\r\"\323\014\n\017SceneGadgetInfo\022\021\n\tgadget_"
      "id\030\001 \001(\r\022\020\n\010group_id\030\002 \001(\r\022\021\n\tconfig_id\030"
      "\003 \001(\r\022\027\n\017owner_entity_id\030\004 \001(\r\022(\n\tborn_t"
      "ype\030\005 \001(\0162\025.proto.GadgetBornType\022\024\n\014gadg"
      "et_state\030\006 \001(\r\022\023\n\013gadget_type\030\007 \001(\r\022\030\n\020i"
      "s_show_cutscene\030\010 \001(\010\022\031\n\021authority_peer_"
      "id\030\t \001(\r\022\032\n\022is_enable_interact\030\n \001(\010\022\023\n\013"
      "interact_id\030\013 \001(\r\022\021\n\tmark_flag\030\025 \001(\r\022\034\n\024"
      "prop_owner_entity_id\030\026 \001(\r\022%\n\010platform\030\027"
      " \001(\0132\023.proto.PlatformInfo\022\031\n\021interact_ui"
      "d_list\030\030 \003(\r\022\020\n\010draft_id\030\031 \001(\r\022\031\n\021gadget"
      "_talk_state\030\032 \001(\r\022(\n\tplay_info\030d \001(\0132\025.p"
      "roto.GadgetPlayInfo\022\"\n\013trifle_item\030\014 \001(\013"
      "2\013.proto.ItemH\000\0220\n\rgather_gadget\030\r \001(\0132\027"
      ".proto.GatherGadgetInfoH\000\022%\n\007worktop\030\016 \001"
      "(\0132\022.proto.WorktopInfoH\000\0220\n\rclient_gadge"
      "t\030\017 \001(\0132\027.proto.ClientGadgetInfoH\000\022%\n\007we"
      "ather\030\021 \001(\0132\022.proto.WeatherInfoH\000\0222\n\016abi"
      "lity_gadget\030\022 \001(\0132\030.proto.AbilityGadgetI"
      "nfoH\000\0220\n\rstatue_gadget\030\023 \001(\0132\027.proto.Sta"
      "tueGadgetInfoH\000\022*\n\nboss_chest\030\024 \001(\0132\024.pr"
      "oto.BossChestInfoH\000\0220\n\rblossom_chest\030) \001"
      "(\0132\027.proto.BlossomChestInfoH\000\0221\n\016mp_play"
      "_reward\030* \001(\0132\027.proto.MpPlayRewardInfoH\000"
      "\0228\n\016general_reward\030+ \001(\0132\036.proto.GadgetG"
      "eneralRewardInfoH\000\022,\n\roffering_info\030, \001("
      "\0132\023.proto.OfferingInfoH\000\0220\n\017foundation_i"
      "nfo\030- \001(\0132\025.proto.FoundationInfoH\000\022*\n\014ve"
      "hicle_info\030. \001(\0132\022.proto.VehicleInfoH\000\022*"
      "\n\nshell_info\030/ \001(\0132\024.proto.EchoShellInfo"
      "H\000\022(\n\013screen_info\0300 \001(\0132\021.proto.ScreenIn"
      "foH\000\022-\n\016fish_pool_info\030; \001(\0132\023.proto.Fis"
      "hPoolInfoH\000\022>\n\027custom_gadget_tree_info\030<"
      " \001(\0132\033.proto.CustomGadgetTreeInfoH\000\022;\n\025r"
      "oguelike_gadget_info\030= \001(\0132\032.proto.Rogue"
      "likeGadgetInfoH\000\022<\n\026night_crow_gadget_in"
      "fo\030> \001(\0132\032.proto.NightCrowGadgetInfoH\000\022F"
      "\n\033deshret_obelisk_gadget_info\030\? \001(\0132\037.pr"
      "oto.DeshretObeliskGadgetInfoH\000\022D\n\032coin_c"
      "ollect_operator_info\030@ \001(\0132\036.proto.CoinC"
      "ollectOperatorInfoH\000B\t\n\007content\"v\n\032Anima"
      "torParameterValueInfo\022\021\n\tpara_type\030\001 \001(\r"
      "\022\021\n\007int_val\030\002 \001(\005H\000\022\023\n\tfloat_val\030\003 \001(\002H\000"
      "\022\022\n\010bool_val\030\004 \001(\010H\000B\t\n\007paraVal\"@\n\013Serva"
      "ntInfo\022\030\n\020master_entity_id\030\001 \001(\r\022\027\n\017born"
      "_slot_index\030\002 \001(\r\"\362\003\n\021SceneEntityAiInfo\022"
      "\022\n\nis_ai_open\030\001 \001(\010\022\037\n\010born_pos\030\002 \001(\0132\r."
      "proto.Vector\022>\n\014skill_cd_map\030\003 \003(\0132(.pro"
      "to.SceneEntityAiInfo.SkillCdMapEntry\022(\n\014"
      "servant_info\030\004 \001(\0132\022.proto.ServantInfo\022@"
      "\n\rai_threat_map\030\005 \003(\0132).proto.SceneEntit"
      "yAiInfo.AiThreatMapEntry\022I\n\022skill_group_"
      "cd_map\030\006 \003(\0132-.proto.SceneEntityAiInfo.S"
      "killGroupCdMapEntry\022\022\n\ncur_tactic\030\007 \001(\r\032"
      "1\n\017SkillCdMapEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value"
      "\030\002 \001(\r:\0028\001\0322\n\020AiThreatMapEntry\022\013\n\003key\030\001 "
      "\001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\0326\n\024SkillGroupCdMa"
      "pEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"\324"
      "\001\n\031EntityRendererChangedInfo\022Q\n\021changed_"
      "renderers\030\001 \003(\01326.proto.EntityRendererCh"
      "angedInfo.ChangedRenderersEntry\022\030\n\020visib"
      "ility_count\030\002 \001(\r\022\021\n\tis_cached\030\003 \001(\010\0327\n\025"
      "ChangedRenderersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
      "lue\030\002 \001(\r:\0028\001\">\n\010PropPair\022\014\n\004type\030\001 \001(\r\022"
      "$\n\nprop_value\030\002 \001(\0132\020.proto.PropValue\"6\n"
      "\rFightPropPair\022\021\n\tprop_type\030\001 \001(\r\022\022\n\npro"
      "p_value\030\002 \001(\002\"k\n\036AnimatorParameterValueI"
      "nfoPair\022\017\n\007name_id\030\001 \001(\005\0228\n\ranimator_par"
      "a\030\002 \001(\0132!.proto.AnimatorParameterValueIn"
      "fo\"K\n\025EntityEnvironmentInfo\022\031\n\021json_clim"
      "ate_type\030\001 \001(\r\022\027\n\017climate_area_id\030\002 \001(\r\""
      "E\n\025EntityClientExtraInfo\022,\n\025skill_anchor"
      "_position\030\001 \001(\0132\r.proto.Vector\"\315\002\n\023Entit"
      "yAuthorityInfo\0221\n\014ability_info\030\001 \001(\0132\033.p"
      "roto.AbilitySyncStateInfo\022\?\n\025renderer_ch"
      "anged_info\030\002 \001(\0132 .proto.EntityRendererC"
      "hangedInfo\022)\n\007ai_info\030\003 \001(\0132\030.proto.Scen"
      "eEntityAiInfo\022\037\n\010born_pos\030\004 \001(\0132\r.proto."
      "Vector\022=\n\016pose_para_list\030\005 \003(\0132%.proto.A"
      "nimatorParameterValueInfoPair\0227\n\021client_"
      "extra_info\030\006 \001(\0132\034.proto.EntityClientExt"
      "raInfo\"\222\006\n\017SceneEntityInfo\022*\n\013entity_typ"
      "e\030\001 \001(\0162\025.proto.ProtEntityType\022\021\n\tentity"
      "_id\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022&\n\013motion_info\030\004"
      " \001(\0132\021.proto.MotionInfo\022\"\n\tprop_list\030\005 \003"
      "(\0132\017.proto.PropPair\022-\n\017fight_prop_list\030\006"
      " \003(\0132\024.proto.FightPropPair\022\022\n\nlife_state"
      "\030\007 \001(\r\022A\n\022animator_para_list\030\t \003(\0132%.pro"
      "to.AnimatorParameterValueInfoPair\022\037\n\027las"
      "t_move_scene_time_ms\030\021 \001(\r\022\036\n\026last_move_"
      "reliable_seq\030\022 \001(\r\0223\n\022entity_client_data"
      "\030\023 \001(\0132\027.proto.EntityClientData\022B\n\034entit"
      "y_environment_info_list\030\024 \003(\0132\034.proto.En"
      "tityEnvironmentInfo\0229\n\025entity_authority_"
      "info\030\025 \001(\0132\032.proto.EntityAuthorityInfo\022\020"
      "\n\010tag_list\030\026 \003(\t\022+\n\020server_buff_list\030\027 \003"
      "(\0132\021.proto.ServerBuff\022(\n\006avatar\030\n \001(\0132\026."
      "proto.SceneAvatarInfoH\000\022*\n\007monster\030\013 \001(\013"
      "2\027.proto.SceneMonsterInfoH\000\022\"\n\003npc\030\014 \001(\013"
      "2\023.proto.SceneNpcInfoH\000\022(\n\006gadget\030\r \001(\0132"
      "\026.proto.SceneGadgetInfoH\000B\010\n\006entity\"\244\001\n\020"
      "CreateGadgetInfo\022(\n\tborn_type\030\001 \001(\0162\025.pr"
      "oto.GadgetBornType\022,\n\005chest\030\002 \001(\0132\035.prot"
      "o.CreateGadgetInfo.Chest\0328\n\005Chest\022\025\n\rche"
      "st_drop_id\030\001 \001(\r\022\030\n\020is_show_cutscene\030\002 \001"
      "(\010\"\261\002\n\020CreateEntityInfo\022\r\n\005level\030\005 \001(\r\022\032"
      "\n\003pos\030\006 \001(\0132\r.proto.Vector\022\032\n\003rot\030\007 \001(\0132"
      "\r.proto.Vector\022\020\n\010scene_id\030\n \001(\r\022\017\n\007room"
      "_id\030\013 \001(\r\022\030\n\020client_unique_id\030\014 \001(\r\022\024\n\nm"
      "onster_id\030\001 \001(\rH\000\022\020\n\006npc_id\030\002 \001(\rH\000\022\023\n\tg"
      "adget_id\030\003 \001(\rH\000\022\021\n\007item_id\030\004 \001(\rH\000\022)\n\006g"
      "adget\030\r \001(\0132\027.proto.CreateGadgetInfoH\001B\010"
      "\n\006entityB\024\n\022entity_create_info\"\227\004\n\026Trial"
      "AvatarGrantRecord\022\024\n\014grant_reason\030\001 \001(\r\022"
      "\034\n\024from_parent_quest_id\030\002 \001(\r\"\310\003\n\013GrantR"
      "eason\022\013\n\007INVALID\020\000\022\022\n\016GRANT_BY_QUEST\020\001\022\""
      "\n\036GRANT_BY_TRIAL_AVATAR_ACTIVITY\020\002\022&\n\"GR"
      "ANT_BY_DUNGEON_ELEMENT_CHALLENGE\020\003\022 \n\034GR"
      "ANT_BY_MIST_TRIAL_ACTIVITY\020\004\022\032\n\026GRANT_BY"
      "_SUMO_ACTIVITY\020\005\022\034\n\030GRANT_BY_POTION_ACTI"
      "VITY\020\006\022\"\n\036GRANT_BY_CRYSTAL_LINK_ACTIVITY"
      "\020\007\022\033\n\027GRANT_BY_IRODORI_MASTER\020\010\022\017\n\013GRANT"
      "_BY_GM\020\t\022$\n GRANT_BY_INSTABLE_SPRAY_ACTI"
      "VITY\020\n\022$\n GRANT_BY_MUQADAS_POTION_ACTIVI"
      "TY\020\013\022\034\n\030GRANT_BY_VINTAGE_HUNTING\020\014\022\033\n\027GR"
      "ANT_BY_CHAR_AMUSEMENT\020\r\022\027\n\023GRANT_BY_DUEL"
      "_HEART\020\016\"\206\001\n\017TrialAvatarInfo\022\027\n\017trial_av"
      "atar_id\030\001 \001(\r\022%\n\020trial_equip_list\030\002 \003(\0132"
      "\013.proto.Item\0223\n\014grant_record\030\003 \001(\0132\035.pro"
      "to.TrialAvatarGrantRecord\"\\\n\017AvatarSkill"
      "Info\022\024\n\014pass_cd_time\030\001 \001(\r\022\031\n\021full_cd_ti"
      "me_list\030\002 \003(\r\022\030\n\020max_charge_count\030\003 \001(\r\""
      "N\n\nFetterData\022\021\n\tfetter_id\030\001 \001(\r\022\024\n\014fett"
      "er_state\030\002 \001(\r\022\027\n\017cond_index_list\030\003 \003(\r\""
      "\263\001\n\020AvatarFetterInfo\022\022\n\nexp_number\030\001 \001(\r"
      "\022\021\n\texp_level\030\002 \001(\r\022\024\n\014open_id_list\030\003 \003("
      "\r\022\026\n\016finish_id_list\030\004 \003(\r\022\"\n\032rewarded_fe"
      "tter_level_list\030\005 \003(\r\022&\n\013fetter_list\030\006 \003"
      "(\0132\021.proto.FetterData\"\221\001\n\024AvatarExpediti"
      "onInfo\022+\n\005state\030\001 \001(\0162\034.proto.AvatarExpe"
      "ditionState\022\016\n\006exp_id\030\002 \001(\r\022\021\n\thour_time"
      "\030\003 \001(\r\022\022\n\nstart_time\030\004 \001(\r\022\025\n\rshorten_ra"
      "tio\030\005 \001(\002\"D\n\024AvatarEquipAffixInfo\022\026\n\016equ"
      "ip_affix_id\030\001 \001(\r\022\024\n\014left_cd_time\030\002 \001(\r\""
      "\366\t\n\nAvatarInfo\022\021\n\tavatar_id\030\001 \001(\r\022\014\n\004gui"
      "d\030\002 \001(\004\0220\n\010prop_map\030\003 \003(\0132\036.proto.Avatar"
      "Info.PropMapEntry\022\022\n\nlife_state\030\004 \001(\r\022\027\n"
      "\017equip_guid_list\030\005 \003(\004\022\026\n\016talent_id_list"
      "\030\006 \003(\r\022;\n\016fight_prop_map\030\007 \003(\0132#.proto.A"
      "vatarInfo.FightPropMapEntry\0221\n\021trial_ava"
      "tar_info\030\t \001(\0132\026.proto.TrialAvatarInfo\0222"
      "\n\tskill_map\030\n \003(\0132\037.proto.AvatarInfo.Ski"
      "llMapEntry\022\026\n\016skill_depot_id\030\013 \001(\r\022,\n\013fe"
      "tter_info\030\014 \001(\0132\027.proto.AvatarFetterInfo"
      "\022\036\n\026core_proud_skill_level\030\r \001(\r\022!\n\031inhe"
      "rent_proud_skill_list\030\016 \003(\r\022=\n\017skill_lev"
      "el_map\030\017 \003(\0132$.proto.AvatarInfo.SkillLev"
      "elMapEntry\0226\n\020expedition_state\030\020 \001(\0162\034.p"
      "roto.AvatarExpeditionState\022S\n\033proud_skil"
      "l_extra_level_map\030\021 \003(\0132..proto.AvatarIn"
      "fo.ProudSkillExtraLevelMapEntry\022\020\n\010is_fo"
      "cus\030\022 \001(\010\022\023\n\013avatar_type\030\023 \001(\r\022\033\n\023team_r"
      "esonance_list\030\024 \003(\r\022\033\n\023wearing_flycloak_"
      "id\030\025 \001(\r\0225\n\020equip_affix_list\030\026 \003(\0132\033.pro"
      "to.AvatarEquipAffixInfo\022\021\n\tborn_time\030\027 \001"
      "(\r\022#\n\033pending_promote_reward_list\030\030 \003(\r\022"
      "\022\n\ncostume_id\030\031 \001(\r\022*\n\nexcel_info\030\032 \001(\0132"
      "\026.proto.AvatarExcelInfo\022\021\n\tanim_hash\030\033 \001"
      "(\r\032@\n\014PropMapEntry\022\013\n\003key\030\001 \001(\r\022\037\n\005value"
      "\030\002 \001(\0132\020.proto.PropValue:\0028\001\0323\n\021FightPro"
      "pMapEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\002:\0028"
      "\001\032G\n\rSkillMapEntry\022\013\n\003key\030\001 \001(\r\022%\n\005value"
      "\030\002 \001(\0132\026.proto.AvatarSkillInfo:\0028\001\0324\n\022Sk"
      "illLevelMapEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002"
      " \001(\r:\0028\001\032>\n\034ProudSkillExtraLevelMapEntry"
      "\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"n\n\tShow"
      "Equip\022\017\n\007item_id\030\001 \001(\r\022%\n\treliquary\030\002 \001("
      "\0132\020.proto.ReliquaryH\000\022\037\n\006weapon\030\003 \001(\0132\r."
      "proto.WeaponH\000B\010\n\006detail\"\252\006\n\016ShowAvatarI"
      "nfo\022\021\n\tavatar_id\030\001 \001(\r\0224\n\010prop_map\030\002 \003(\013"
      "2\".proto.ShowAvatarInfo.PropMapEntry\022\026\n\016"
      "talent_id_list\030\003 \003(\r\022\?\n\016fight_prop_map\030\004"
      " \003(\0132\'.proto.ShowAvatarInfo.FightPropMap"
      "Entry\022\026\n\016skill_depot_id\030\005 \001(\r\022\036\n\026core_pr"
      "oud_skill_level\030\006 \001(\r\022!\n\031inherent_proud_"
      "skill_list\030\007 \003(\r\022A\n\017skill_level_map\030\010 \003("
      "\0132(.proto.ShowAvatarInfo.SkillLevelMapEn"
      "try\022W\n\033proud_skill_extra_level_map\030\t \003(\013"
      "22.proto.ShowAvatarInfo.ProudSkillExtraL"
      "evelMapEntry\022$\n\nequip_list\030\n \003(\0132\020.proto"
      ".ShowEquip\022,\n\013fetter_info\030\013 \001(\0132\027.proto."
      "AvatarFetterInfo\022\022\n\ncostume_id\030\014 \001(\r\022*\n\n"
      "excel_info\030\r \001(\0132\026.proto.AvatarExcelInfo"
      "\032@\n\014PropMapEntry\022\013\n\003key\030\001 \001(\r\022\037\n\005value\030\002"
      " \001(\0132\020.proto.PropValue:\0028\001\0323\n\021FightPropM"
      "apEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\002:\0028\001\032"
      "4\n\022SkillLevelMapEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005va"
      "lue\030\002 \001(\r:\0028\001\032>\n\034ProudSkillExtraLevelMap"
      "Entry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"\375\003"
      "\n\005Quest\022\020\n\010quest_id\030\001 \001(\r\022\r\n\005state\030\002 \001(\r"
      "\022\022\n\nstart_time\030\004 \001(\r\022\021\n\tis_random\030\005 \001(\010\022"
      "\027\n\017parent_quest_id\030\006 \001(\r\022\027\n\017quest_config"
      "_id\030\007 \001(\r\022\027\n\017start_game_time\030\010 \001(\r\022\023\n\013ac"
      "cept_time\030\t \001(\r\022\027\n\017lacked_npc_list\030\n \003(\r"
      "\022\034\n\024finish_progress_list\030\013 \003(\r\022\032\n\022fail_p"
      "rogress_list\030\014 \003(\r\0226\n\016lacked_npc_map\030\r \003"
      "(\0132\036.proto.Quest.LackedNpcMapEntry\022\031\n\021la"
      "cked_place_list\030\016 \003(\r\022:\n\020lacked_place_ma"
      "p\030\017 \003(\0132 .proto.Quest.LackedPlaceMapEntr"
      "y\0323\n\021LackedNpcMapEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005v"
      "alue\030\002 \001(\r:\0028\001\0325\n\023LackedPlaceMapEntry\022\013\n"
      "\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"=\n\017NpcPosi"
      "tionInfo\022\016\n\006npc_id\030\001 \001(\r\022\032\n\003pos\030\002 \001(\0132\r."
      "proto.Vector\"A\n\017MailTextContent\022\r\n\005title"
      "\030\001 \001(\t\022\017\n\007content\030\002 \001(\t\022\016\n\006sender\030\003 \001(\t\""
      "b\n\010MailItem\022&\n\013equip_param\030\001 \001(\0132\021.proto"
      ".EquipParam\022.\n\013delete_info\030\002 \001(\0132\031.proto"
      ".MaterialDeleteInfo\"\264\002\n\010MailData\022\017\n\007mail"
      "_id\030\001 \001(\r\0221\n\021mail_text_content\030\004 \001(\0132\026.p"
      "roto.MailTextContent\022\"\n\titem_list\030\007 \003(\0132"
      "\017.proto.MailItem\022\021\n\tsend_time\030\010 \001(\r\022\023\n\013e"
      "xpire_time\030\t \001(\r\022\022\n\nimportance\030\n \001(\r\022\017\n\007"
      "is_read\030\013 \001(\010\022\031\n\021is_attachment_got\030\014 \001(\010"
      "\022\021\n\tconfig_id\030\r \001(\r\022\025\n\rargument_list\030\016 \003"
      "(\t\022.\n\rcollect_state\030\017 \001(\0162\027.proto.MailCo"
      "llectState\"\327\002\n\020OnlinePlayerInfo\022\013\n\003uid\030\001"
      " \001(\r\022\020\n\010nickname\030\002 \001(\t\022\024\n\014player_level\030\003"
      " \001(\r\022\021\n\tavatar_id\030\004 \001(\r\022-\n\017mp_setting_ty"
      "pe\030\005 \001(\0162\024.proto.MpSettingType\022\037\n\027cur_pl"
      "ayer_num_in_world\030\006 \001(\r\022\023\n\013world_level\030\007"
      " \001(\r\022\021\n\tonline_id\030\010 \001(\t\022\024\n\014name_card_id\030"
      "\t \001(\r\022\032\n\022blacklist_uid_list\030\n \003(\r\022\021\n\tsig"
      "nature\030\013 \001(\t\022.\n\017profile_picture\030\014 \001(\0132\025."
      "proto.ProfilePicture\022\016\n\006psn_id\030\r \001(\t\"&\n\010"
      "Birthday\022\r\n\005month\030\001 \001(\r\022\013\n\003day\030\002 \001(\r\"\310\001\n"
      "\014MapMarkPoint\022\020\n\010scene_id\030\001 \001(\r\022\014\n\004name\030"
      "\002 \001(\t\022\032\n\003pos\030\003 \001(\0132\r.proto.Vector\022+\n\npoi"
      "nt_type\030\004 \001(\0162\027.proto.MapMarkPointType\022\022"
      "\n\nmonster_id\030\005 \001(\r\022)\n\tfrom_type\030\006 \001(\0162\026."
      "proto.MapMarkFromType\022\020\n\010quest_id\030\007 \001(\r\""
      "\036\n\020MassiveWaterInfo\022\n\n\002id\030\001 \001(\003\"Z\n\020Massi"
      "veGrassInfo\022\n\n\002id\030\001 \001(\r\022\035\n\006center\030\002 \001(\0132"
      "\r.proto.Vector\022\033\n\004size\030\003 \001(\0132\r.proto.Vec"
      "tor\"\306\001\n\016MassiveBoxInfo\022\n\n\002id\030\001 \001(\005\022\020\n\010co"
      "nfigId\030\002 \001(\r\022\035\n\006center\030\003 \001(\0132\r.proto.Vec"
      "tor\022\036\n\007extents\030\004 \001(\0132\r.proto.Vector\022\031\n\002u"
      "p\030\005 \001(\0132\r.proto.Vector\022\036\n\007forward\030\006 \001(\0132"
      "\r.proto.Vector\022\034\n\005right\030\007 \001(\0132\r.proto.Ve"
      "ctor\"\345\001\n\023ClientMassiveEntity\022\023\n\013entity_t"
      "ype\030\001 \001(\r\022\021\n\tconfig_id\030\002 \001(\r\022\016\n\006obj_id\030\003"
      " \001(\003\022-\n\nwater_info\030\004 \001(\0132\027.proto.Massive"
      "WaterInfoH\000\022-\n\ngrass_info\030\005 \001(\0132\027.proto."
      "MassiveGrassInfoH\000\022)\n\010box_info\030\006 \001(\0132\025.p"
      "roto.MassiveBoxInfoH\000B\r\n\013entity_info\"<\n\013"
      "ShapeSphere\022\035\n\006center\030\001 \001(\0132\r.proto.Vect"
      "or\022\016\n\006radius\030\002 \001(\002\"\243\001\n\010ShapeBox\022\035\n\006cente"
      "r\030\001 \001(\0132\r.proto.Vector\022\034\n\005axis0\030\002 \001(\0132\r."
      "proto.Vector\022\034\n\005axis1\030\003 \001(\0132\r.proto.Vect"
      "or\022\034\n\005axis2\030\004 \001(\0132\r.proto.Vector\022\036\n\007exte"
      "nts\030\005 \001(\0132\r.proto.Vector\"\224\002\n\023ServerMassi"
      "veEntity\022\023\n\013entity_type\030\001 \001(\r\022\021\n\tconfig_"
      "id\030\002 \001(\r\022\022\n\nruntime_id\030\003 \001(\r\022\031\n\021authorit"
      "y_peer_id\030\004 \001(\r\022\016\n\006obj_id\030\005 \001(\003\022-\n\nwater"
      "_info\030\006 \001(\0132\027.proto.MassiveWaterInfoH\000\022-"
      "\n\ngrass_info\030\007 \001(\0132\027.proto.MassiveGrassI"
      "nfoH\000\022)\n\010box_info\030\010 \001(\0132\025.proto.MassiveB"
      "oxInfoH\000B\r\n\013entity_info\"P\n\022MassiveEntity"
      "State\022\023\n\013entity_type\030\001 \001(\r\022\016\n\006obj_id\030\002 \001"
      "(\003\022\025\n\relement_state\030\003 \001(\r\"q\n\020EntityClien"
      "tData\022\036\n\026wind_change_scene_time\030\001 \001(\r\022\033\n"
      "\023windmill_sync_angle\030\002 \001(\002\022 \n\030wind_chang"
      "e_target_level\030\003 \001(\005\"W\n\tBlockInfo\022\020\n\010blo"
      "ck_id\030\001 \001(\r\022\024\n\014data_version\030\002 \001(\r\022\020\n\010bin"
      "_data\030\003 \001(\014\022\020\n\010is_dirty\030\004 \001(\010\"\242\001\n\020ShopMc"
      "oinProduct\022\022\n\nproduct_id\030\001 \001(\t\022\022\n\nprice_"
      "tier\030\002 \001(\t\022\022\n\nmcoin_base\030\003 \001(\r\022\027\n\017mcoin_"
      "non_first\030\004 \001(\r\022\023\n\013mcoin_first\030\005 \001(\r\022\022\n\n"
      "bought_num\030\006 \001(\r\022\020\n\010is_audit\030\007 \001(\010\"\330\002\n\017S"
      "hopCardProduct\022\022\n\nproduct_id\030\001 \001(\t\022\022\n\npr"
      "ice_tier\030\002 \001(\t\022\022\n\nmcoin_base\030\003 \001(\r\022\025\n\rhc"
      "oin_per_day\030\004 \001(\r\022\014\n\004days\030\005 \001(\r\022\032\n\022remai"
      "n_reward_days\030\006 \001(\r\022\031\n\021card_product_type"
      "\030\007 \001(\r\0226\n\nresin_card\030e \001(\0132 .proto.ShopC"
      "ardProduct.ResinCardH\000\032b\n\tResinCard\022(\n\016b"
      "ase_item_list\030\001 \003(\0132\020.proto.ItemParam\022+\n"
      "\021per_day_item_list\030\002 \003(\0132\020.proto.ItemPar"
      "amB\021\n\017extra_card_data\"J\n\013PlayProduct\022\022\n\n"
      "product_id\030\001 \001(\t\022\022\n\nprice_tier\030\002 \001(\t\022\023\n\013"
      "schedule_id\030\003 \001(\r\"\241\001\n\022ShopConcertProduct"
      "\022\022\n\nproduct_id\030\001 \001(\t\022\022\n\nprice_tier\030\002 \001(\t"
      "\022\024\n\014obtain_count\030\003 \001(\r\022\024\n\014obtain_limit\030\004"
      " \001(\r\022\022\n\nbegin_time\030\005 \001(\r\022\020\n\010end_time\030\006 \001"
      "(\r\022\021\n\tbuy_times\030\007 \001(\r\"\034\n\014HashedString\022\014\n"
      "\004hash\030\001 \001(\r\"\243\001\n\022PlayTeamEntityInfo\022\021\n\ten"
      "tity_id\030\001 \001(\r\022\022\n\nplayer_uid\030\002 \001(\r\022\031\n\021aut"
      "hority_peer_id\030\003 \001(\r\022\030\n\020gadget_config_id"
      "\030\005 \001(\r\0221\n\014ability_info\030\006 \001(\0132\033.proto.Abi"
      "litySyncStateInfo\":\n\020FeatureBlockInfo\022\024\n"
      "\014feature_type\030\001 \001(\r\022\020\n\010end_time\030\002 \001(\r\"S\n"
      "\017MapMarkTipsInfo\022)\n\ttips_type\030\001 \001(\0162\026.pr"
      "oto.MapMarkTipsType\022\025\n\rpoint_id_list\030\002 \003"
      "(\r\"H\n\025ExhibitionDisplayInfo\022\n\n\002id\030\001 \001(\r\022"
      "\r\n\005param\030\002 \001(\r\022\024\n\014detail_param\030\003 \001(\r\"7\n\016"
      "ProfilePicture\022\021\n\tavatar_id\030\001 \001(\r\022\022\n\ncos"
      "tume_id\030\002 \001(\r\"K\n\014RedPointData\022\026\n\016red_poi"
      "nt_type\030\001 \001(\r\022\017\n\007is_show\030\002 \001(\010\022\022\n\nconten"
      "t_id\030\003 \001(\r\"=\n\024HomeMarkPointNPCData\022\021\n\tav"
      "atar_id\030\001 \001(\r\022\022\n\ncostume_id\030\002 \001(\r\"*\n\026Hom"
      "eMarkPointSuiteData\022\020\n\010suite_id\030\001 \001(\r\"\343\001"
      "\n\032HomeMarkPointFurnitureData\022\014\n\004guid\030\001 \001"
      "(\r\022\024\n\014furniture_id\030\002 \001(\r\022\026\n\016furniture_ty"
      "pe\030\003 \001(\r\022\032\n\003pos\030\004 \001(\0132\r.proto.Vector\022/\n\010"
      "npc_data\030\006 \001(\0132\033.proto.HomeMarkPointNPCD"
      "ataH\000\0223\n\nsuite_data\030\007 \001(\0132\035.proto.HomeMa"
      "rkPointSuiteDataH\000B\007\n\005extra\"3\n\013MapAreaIn"
      "fo\022\023\n\013map_area_id\030\001 \001(\r\022\017\n\007is_open\030\002 \001(\010"
      "\"|\n HomeFurnitureArrangementMuipData\022\024\n\014"
      "furniture_id\030\001 \001(\r\022 \n\tspawn_pos\030\002 \001(\0132\r."
      "proto.Vector\022 \n\tspawn_rot\030\003 \001(\0132\r.proto."
      "Vector\"v\n\034HomeBlockArrangementMuipData\022\020"
      "\n\010block_id\030\001 \001(\r\022D\n\023furniture_data_list\030"
      "\002 \003(\0132\'.proto.HomeFurnitureArrangementMu"
      "ipData\"\222\001\n\034HomeSceneArrangementMuipData\022"
      "\021\n\tmodule_id\030\001 \001(\r\022\020\n\010scene_id\030\002 \001(\r\022\017\n\007"
      "is_room\030\003 \001(\010\022<\n\017block_data_list\030\004 \003(\0132#"
      ".proto.HomeBlockArrangementMuipData\"P\n!C"
      "ustomDungeonBattleRecordMuipData\022\024\n\014dung"
      "eon_guid\030\001 \001(\004\022\025\n\rmin_cost_time\030\002 \001(\r\"\252\001"
      "\n\033PlayerCustomDungeonMuipData\022\013\n\003uid\030\001 \001"
      "(\r\022\034\n\024publish_dungeon_list\030\002 \003(\004\022\032\n\022stor"
      "e_dungeon_list\030\003 \003(\004\022D\n\022battle_record_li"
      "st\030\004 \003(\0132(.proto.CustomDungeonBattleReco"
      "rdMuipData\"\213\001\n\034CustomDungeonSettingMuipD"
      "ata\022\030\n\020is_arrive_finish\030\001 \001(\010\022\022\n\ncoin_li"
      "mit\030\002 \001(\r\022\022\n\ntime_limit\030\003 \001(\r\022\027\n\017is_forb"
      "id_skill\030\004 \001(\010\022\020\n\010life_num\030\005 \001(\r\"\355\001\n\035Cus"
      "tomDungeonAbstractMuipData\022\032\n\022first_publ"
      "ish_time\030\001 \001(\r\022\031\n\021last_publish_time\030\002 \001("
      "\r\022Z\n\024brick_statistics_map\030\003 \003(\0132<.proto."
      "CustomDungeonAbstractMuipData.BrickStati"
      "sticsMapEntry\0329\n\027BrickStatisticsMapEntry"
      "\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"e\n\033Cust"
      "omDungeonSocialMuipData\022\020\n\010play_num\030\001 \001("
      "\r\022\020\n\010like_num\030\002 \001(\r\022\021\n\tstore_num\030\003 \001(\r\022\017"
      "\n\007win_num\030\004 \001(\r\"\224\002\n\032CustomDungeonBriefMu"
      "ipData\022\024\n\014dungeon_guid\030\001 \001(\004\022\022\n\ndungeon_"
      "id\030\002 \001(\r\022\030\n\020creator_nickname\030\003 \001(\t\022\020\n\010ta"
      "g_list\030\004 \003(\r\0224\n\007setting\030\005 \001(\0132#.proto.Cu"
      "stomDungeonSettingMuipData\0226\n\010abstract\030\006"
      " \001(\0132$.proto.CustomDungeonAbstractMuipDa"
      "ta\0222\n\006social\030\007 \001(\0132\".proto.CustomDungeon"
      "SocialMuipData\"X\n\037CustomDungeonBatchBrie"
      "fMuipData\0225\n\nbrief_list\030\001 \003(\0132!.proto.Cu"
      "stomDungeonBriefMuipData\"\246\001\n\032HomeBluepri"
      "ntBriefMuipData\022\022\n\nshare_code\030\001 \001(\t\022\021\n\to"
      "wner_uid\030\002 \001(\r\022\021\n\tmodule_id\030\003 \001(\r\022\020\n\010sce"
      "ne_id\030\004 \001(\r\022\020\n\010block_id\030\005 \001(\r\022\025\n\ris_allo"
      "w_copy\030\006 \001(\010\022\023\n\013create_time\030\007 \001(\r\"{\n\037Hom"
      "eBlueprintBatchBriefMuipData\0225\n\nbrief_li"
      "st\030\001 \003(\0132!.proto.HomeBlueprintBriefMuipD"
      "ata\022!\n\031not_exist_share_code_list\030\002 \003(\t\"\210"
      "\001\n\020ContentAuditInfo\022\017\n\007is_open\030\001 \001(\010\022\017\n\007"
      "content\030\002 \001(\t\022\024\n\014submit_count\030\003 \001(\r\022&\n\013a"
      "udit_state\030\004 \001(\0162\021.proto.AuditState\022\024\n\014s"
      "ubmit_limit\030\005 \001(\r\"I\n\020ContentAuditData\022\014\n"
      "\004type\030\001 \001(\t\022\017\n\007content\030\002 \001(\t\022\026\n\016auto_pas"
      "s_time\030\003 \001(\r\"P\n\021ContentAuditField\022-\n\014seg"
      "ment_list\030\001 \003(\0132\027.proto.ContentAuditData"
      "\022\014\n\004name\030\002 \001(\t\"9\n\032ContentAuditAuxiliaryF"
      "ield\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\351\001\n\032Ni"
      "cknameSignatureAuditData\022\013\n\003aid\030\001 \001(\t\022\021\n"
      "\tentity_id\030\002 \001(\t\022\014\n\004lang\030\003 \001(\t\022\021\n\tqueue_"
      "key\030\004 \001(\t\022\016\n\006region\030\005 \001(\t\022\013\n\003uid\030\006 \001(\r\0222"
      "\n\020audit_field_list\030\007 \003(\0132\030.proto.Content"
      "AuditField\0229\n\016aux_field_list\030\010 \003(\0132!.pro"
      "to.ContentAuditAuxiliaryField\"Q\n\030AvatarR"
      "enameAuditContent\022\014\n\004type\030\001 \001(\t\022\017\n\007conte"
      "nt\030\002 \001(\t\022\026\n\016auto_fail_time\030\003 \001(\r\"d\n\035Avat"
      "arRenameContentAuditField\0225\n\014segment_lis"
      "t\030\001 \003(\0132\037.proto.AvatarRenameAuditContent"
      "\022\014\n\004name\030\002 \001(\t\"\360\001\n\025AvatarRenameAuditData"
      "\022\013\n\003aid\030\001 \001(\t\022\021\n\tentity_id\030\002 \001(\t\022\014\n\004lang"
      "\030\003 \001(\t\022\021\n\tqueue_key\030\004 \001(\t\022\016\n\006region\030\005 \001("
      "\t\022\013\n\003uid\030\006 \001(\r\022>\n\020audit_field_list\030\007 \003(\013"
      "2$.proto.AvatarRenameContentAuditField\0229"
      "\n\016aux_field_list\030\010 \003(\0132!.proto.ContentAu"
      "ditAuxiliaryField\"P\n\025ActivityDungeonAvat"
      "ar\022\021\n\tavatar_id\030\001 \001(\r\022\020\n\010is_trial\030\002 \001(\010\022"
      "\022\n\ncostume_id\030\003 \001(\r\"f\n\020GCGChallengeData\022"
      "\024\n\014challenge_id\030\001 \001(\r\022\026\n\016challenge_type\030"
      "\002 \001(\r\022\022\n\nparam_list\030\003 \003(\r\022\020\n\010progress\030\004 "
      "\001(\r\"\210\003\n\014GCGDuelExtra\022\024\n\014card_id_list\030\001 \003"
      "(\r\022\020\n\010field_id\030\002 \001(\r\022\024\n\014card_back_id\030\003 \001"
      "(\r\022;\n\rcard_face_map\030\004 \003(\0132$.proto.GCGDue"
      "lExtra.CardFaceMapEntry\022/\n\016challenge_lis"
      "t\030\005 \003(\0132\027.proto.GCGChallengeData\022\r\n\005scor"
      "e\030\006 \001(\r\022\023\n\013is_match_ai\030\007 \001(\010\022\022\n\nai_deck_"
      "id\030\010 \001(\r\022\023\n\013is_internal\030\t \001(\010\022$\n\034forbid_"
      "finish_challenge_list\030\n \003(\r\022\r\n\005level\030\013 \001"
      "(\r\022\026\n\016client_version\030\014 \001(\r\0322\n\020CardFaceMa"
      "pEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"\037"
      "\n\021QueryIpRegionData\022\n\n\002ip\030\001 \001(\t*\367\004\n\nENet"
      "Reason\022\020\n\014ENET_TIMEOUT\020\000\022\025\n\021ENET_CLIENT_"
      "CLOSE\020\001\022\033\n\027ENET_CLIENT_REBIND_FAIL\020\002\022\030\n\024"
      "ENET_CLIENT_SHUTDOWN\020\003\022\027\n\023ENET_SERVER_RE"
      "LOGIN\020\004\022\024\n\020ENET_SERVER_KICK\020\005\022\030\n\024ENET_SE"
      "RVER_SHUTDOWN\020\006\022\032\n\026ENET_NOT_FOUND_SESSIO"
      "N\020\007\022\031\n\025ENET_LOGIN_UNFINISHED\020\010\022\035\n\031ENET_P"
      "ACKET_FREQ_TOO_HIGH\020\t\022\025\n\021ENET_PING_TIMEO"
      "UT\020\n\022\027\n\023ENET_TRANFER_FAILED\020\013\022\033\n\027ENET_SE"
      "RVER_KILL_CLIENT\020\014\022\031\n\025ENET_CHECK_MOVE_SP"
      "EED\020\r\022 \n\034ENET_ACCOUNT_PASSWORD_CHANGE\020\016\022"
      "\026\n\022ENET_SECURITY_KICK\020\017\022\032\n\026ENET_LUA_SHEL"
      "L_TIMEOUT\020\020\022\025\n\021ENET_SDKFAIL_KICK\020\021\022\031\n\025EN"
      "ET_PACKET_COST_TIME\020\022\022\032\n\026ENET_PACKET_UNI"
      "ON_FREQ\020\023\022\025\n\021ENET_WAIT_SND_MAX\020\024\022\037\n\027ENET"
      "_CLIENT_CONNECT_KEY\020\322\205\330\314\004\022&\n\036ENET_CLIENT"
      "_EDITOR_CONNECT_KEY\020\261\321\371\326\003*\327\002\n\013AccountTyp"
      "e\022\030\n\024ACCOUNT_MIHOYO_GUEST\020\000\022\022\n\016ACCOUNT_M"
      "IHOYO\020\001\022\022\n\016ACCOUNT_XIAOMI\020\013\022\023\n\017ACCOUNT_C"
      "OOLPAD\020\014\022\017\n\013ACCOUNT_YYB\020\r\022\020\n\014ACCOUNT_BIL"
      "I\020\016\022\022\n\016ACCOUNT_HUAWEI\020\017\022\021\n\rACCOUNT_MEIZU"
      "\020\020\022\017\n\013ACCOUNT_360\020\021\022\020\n\014ACCOUNT_OPPO\020\022\022\020\n"
      "\014ACCOUNT_VIVO\020\023\022\016\n\nACCOUNT_UC\020\024\022\024\n\020ACCOU"
      "NT_WANDOJIA\020\025\022\022\n\016ACCOUNT_LENOVO\020\026\022\021\n\rACC"
      "OUNT_JINLI\020\027\022\021\n\rACCOUNT_BAIDU\020\031\022\022\n\016ACCOU"
      "NT_DANGLE\020\032*\353\002\n\rChannelIdType\022\023\n\017CHANNEL"
      "_ID_NONE\020\000\022\025\n\021CHANNEL_ID_MIHOYO\020\001\022\025\n\021CHA"
      "NNEL_ID_XIAOMI\020\013\022\026\n\022CHANNEL_ID_COOLPAD\020\014"
      "\022\022\n\016CHANNEL_ID_YYB\020\r\022\023\n\017CHANNEL_ID_BILI\020"
      "\016\022\025\n\021CHANNEL_ID_HUAWEI\020\017\022\024\n\020CHANNEL_ID_M"
      "EIZU\020\020\022\022\n\016CHANNEL_ID_360\020\021\022\023\n\017CHANNEL_ID"
      "_OPPO\020\022\022\023\n\017CHANNEL_ID_VIVO\020\023\022\021\n\rCHANNEL_"
      "ID_UC\020\024\022\025\n\021CHANNEL_ID_LENOVO\020\026\022\024\n\020CHANNE"
      "L_ID_JINLI\020\027\022\024\n\020CHANNEL_ID_BAIDU\020\031\022\025\n\021CH"
      "ANNEL_ID_DANGLE\020\032*\252\003\n\013ServiceType\022\020\n\014SER"
      "VICE_NONE\020\000\022\022\n\016SERVICE_CLIENT\020\001\022\020\n\014SERVI"
      "CE_GATE\020\002\022\020\n\014SERVICE_GAME\020\003\022\020\n\014SERVICE_N"
      "ODE\020\004\022\016\n\nSERVICE_DB\020\005\022\017\n\013SERVICE_SNS\020\006\022\024"
      "\n\020SERVICE_DISPATCH\020\007\022\020\n\014SERVICE_MUIP\020\010\022\027"
      "\n\023SERVICE_OFFLINE_MSG\020\t\022\020\n\014SERVICE_MAIL\020"
      "\n\022\016\n\nSERVICE_MP\020\013\022\025\n\021SERVICE_HTTPPROXY\020\014"
      "\022\024\n\020SERVICE_ACTIVITY\020\r\022\027\n\023SERVICE_PATHFI"
      "NDING\020\016\022\022\n\016SERVICE_SOCIAL\020\017\022\016\n\nSERVICE_O"
      "A\020\020\022\021\n\rSERVICE_MATCH\020\021\022\026\n\022SERVICE_OFFLIN"
      "E_OP\020\022\022\025\n\021SERVICE_TOTHEMOON\020\023\022\017\n\013SERVICE"
      "_GCG\020\024*0\n\nClientType\022\022\n\016CLIENT_PRODUCT\020\000"
      "\022\016\n\nCLIENT_DEV\020\001*Y\n\nRegionType\022\022\n\016REGION"
      "_PRODUCT\020\000\022\017\n\013REGION_EXAM\020\001\022\022\n\016REGION_DE"
      "V_PUB\020\002\022\022\n\016REGION_DEV_PRI\020\003*\271M\n\020ActionRe"
      "asonType\022\026\n\022ACTION_REASON_NONE\020\000\022\034\n\030ACTI"
      "ON_REASON_QUEST_ITEM\020\001\022\036\n\032ACTION_REASON_"
      "QUEST_REWARD\020\002\022\030\n\024ACTION_REASON_TRIFLE\020\003"
      "\022\026\n\022ACTION_REASON_SHOP\020\004\022\'\n#ACTION_REASO"
      "N_PLAYER_UPGRADE_REWARD\020\005\022\034\n\030ACTION_REAS"
      "ON_ADD_AVATAR\020\006\022#\n\037ACTION_REASON_GADGET_"
      "ENV_ANIMAL\020\007\022$\n ACTION_REASON_MONSTER_EN"
      "V_ANIMAL\020\010\022\032\n\026ACTION_REASON_COMPOUND\020\t\022\026"
      "\n\022ACTION_REASON_COOK\020\n\022\030\n\024ACTION_REASON_"
      "GATHER\020\013\022!\n\035ACTION_REASON_MAIL_ATTACHMEN"
      "T\020\014\022%\n!ACTION_REASON_CITY_LEVELUP_RETURN"
      "\020\017\022%\n!ACTION_REASON_CITY_LEVELUP_REWARD\020"
      "\021\022%\n!ACTION_REASON_AREA_EXPLORE_REWARD\020\022"
      "\022%\n!ACTION_REASON_UNLOCK_POINT_REWARD\020\023\022"
      "$\n ACTION_REASON_DUNGEON_FIRST_PASS\020\024\022\036\n"
      "\032ACTION_REASON_DUNGEON_PASS\020\025\022\"\n\036ACTION_"
      "REASON_CHANGE_ELEM_TYPE\020\027\022\035\n\031ACTION_REAS"
      "ON_FETTER_OPEN\020\031\022\"\n\036ACTION_REASON_DAILY_"
      "TASK_SCORE\020\032\022!\n\035ACTION_REASON_DAILY_TASK"
      "_HOST\020\033\022 \n\034ACTION_REASON_RAND_TASK_HOST\020"
      "\034\022\034\n\030ACTION_REASON_EXPEDITION\020\035\022\027\n\023ACTIO"
      "N_REASON_GACHA\020\036\022\031\n\025ACTION_REASON_COMBIN"
      "E\020\037\022!\n\035ACTION_REASON_RAND_TASK_GUEST\020 \022\""
      "\n\036ACTION_REASON_DAILY_TASK_GUEST\020!\022\036\n\032AC"
      "TION_REASON_FORGE_OUTPUT\020\"\022\036\n\032ACTION_REA"
      "SON_FORGE_RETURN\020#\022\035\n\031ACTION_REASON_INIT"
      "_AVATAR\020$\022\035\n\031ACTION_REASON_MONSTER_DIE\020%"
      "\022\024\n\020ACTION_REASON_GM\020&\022\034\n\030ACTION_REASON_"
      "OPEN_CHEST\020\'\022\034\n\030ACTION_REASON_GADGET_DIE"
      "\020(\022#\n\037ACTION_REASON_MONSTER_CHANGE_HP\020)\022"
      "\037\n\033ACTION_REASON_SUBFIELD_DROP\020*\022\"\n\036ACTI"
      "ON_REASON_PUSH_TIPS_REWARD\020+\022\'\n#ACTION_R"
      "EASON_ACTIVITY_MONSTER_DROP\020,\022!\n\035ACTION_"
      "REASON_ACTIVITY_GATHER\020-\022(\n$ACTION_REASO"
      "N_ACTIVITY_SUBFIELD_DROP\020.\022\'\n#ACTION_REA"
      "SON_TOWER_SCHEDULE_REWARD\020/\022)\n%ACTION_RE"
      "ASON_TOWER_FLOOR_STAR_REWARD\0200\022)\n%ACTION"
      "_REASON_TOWER_FIRST_PASS_REWARD\0201\022$\n ACT"
      "ION_REASON_TOWER_DAILY_REWARD\0202\022+\n\'ACTIO"
      "N_REASON_HIT_CLIENT_TRIVIAL_ENTITY\0203\022\'\n#"
      "ACTION_REASON_OPEN_WORLD_BOSS_CHEST\0204\022(\n"
      "$ACTION_REASON_MATERIAL_DELETE_RETURN\0205\022"
      " \n\034ACTION_REASON_SIGN_IN_REWARD\0206\022$\n ACT"
      "ION_REASON_OPEN_BLOSSOM_CHEST\0207\022\032\n\026ACTIO"
      "N_REASON_RECHARGE\0208\022\'\n#ACTION_REASON_BON"
      "US_ACTIVITY_REWARD\0209\022,\n(ACTION_REASON_TO"
      "WER_COMMEMORATIVE_REWARD\020:\022)\n%ACTION_REA"
      "SON_TOWER_SKIP_FLOOR_REWARD\020;\022 \n\034ACTION_"
      "REASON_RECHARGE_BONUS\020<\022\037\n\033ACTION_REASON"
      "_RECHARGE_CARD\020=\022%\n!ACTION_REASON_RECHAR"
      "GE_CARD_DAILY\020>\022\'\n#ACTION_REASON_RECHARG"
      "E_CARD_REPLACE\020\?\022,\n(ACTION_REASON_RECHAR"
      "GE_CARD_REPLACE_FREE\020@\022\'\n#ACTION_REASON_"
      "RECHARGE_PLAY_REPLACE\020A\022%\n!ACTION_REASON"
      "_MP_PLAY_TAKE_REWARD\020B\022\"\n\036ACTION_REASON_"
      "ACTIVITY_WATCHER\020C\022\'\n#ACTION_REASON_SALE"
      "SMAN_DELIVER_ITEM\020D\022!\n\035ACTION_REASON_SAL"
      "ESMAN_REWARD\020E\022\030\n\024ACTION_REASON_REBATE\020F"
      "\022&\n\"ACTION_REASON_MCOIN_EXCHANGE_HCOIN\020G"
      "\0223\n/ACTION_REASON_DAILY_TASK_EXCHANGE_LE"
      "GENDARY_KEY\020H\022$\n ACTION_REASON_UNLOCK_PE"
      "RSON_LINE\020I\022%\n!ACTION_REASON_FETTER_LEVE"
      "L_REWARD\020J\022\033\n\027ACTION_REASON_BUY_RESIN\020K\022"
      "\"\n\036ACTION_REASON_RECHARGE_PACKAGE\020L\022\'\n#A"
      "CTION_REASON_DELIVERY_DAILY_REWARD\020M\022\'\n#"
      "ACTION_REASON_CITY_REPUTATION_LEVEL\020N\022\'\n"
      "#ACTION_REASON_CITY_REPUTATION_QUEST\020O\022)"
      "\n%ACTION_REASON_CITY_REPUTATION_REQUEST\020"
      "P\022)\n%ACTION_REASON_CITY_REPUTATION_EXPLO"
      "RE\020Q\022!\n\035ACTION_REASON_OFFERGING_LEVEL\020R\022"
      "\036\n\032ACTION_REASON_ROUTINE_HOST\020S\022\037\n\033ACTIO"
      "N_REASON_ROUTINE_GUEST\020T\022)\n%ACTION_REASO"
      "N_TREASURE_MAP_SPOT_TOKEN\020Y\0221\n-ACTION_RE"
      "ASON_TREASURE_MAP_BONUS_LEVEL_REWARD\020Z\022("
      "\n$ACTION_REASON_TREASURE_MAP_MP_REWARD\020["
      "\022\031\n\025ACTION_REASON_CONVERT\020\\\022$\n ACTION_RE"
      "ASON_OVERFLOW_TRANSFORM\020]\0222\n.ACTION_REAS"
      "ON_ACTIVITY_AVATAR_SELECTION_REWARD\020`\022(\n"
      "$ACTION_REASON_ACTIVITY_WATCHER_BATCH\020a\022"
      "\037\n\033ACTION_REASON_HIT_TREE_DROP\020b\022)\n%ACTI"
      "ON_REASON_GET_HOME_LEVELUP_REWARD\020c\022(\n$A"
      "CTION_REASON_HOME_DEFAULT_FURNITURE\020d\022\037\n"
      "\033ACTION_REASON_ACTIVITY_COND\020e\022$\n ACTION"
      "_REASON_BATTLE_PASS_NOTIFY\020f\022%\n!ACTION_R"
      "EASON_RELIQUARY_DECOMPOSE\020g\022+\n\'ACTION_RE"
      "ASON_RECHARGE_GOOGLE_GIFT_GARD\020h\022*\n&ACTI"
      "ON_REASON_RECHARGE_CONCERT_PRODUCT\020i\0222\n."
      "ACTION_REASON_RECHARGE_CONCERT_PRODUCT_R"
      "EPLACE\020j\022.\n*ACTION_REASON_SEND_CONCERT_P"
      "RODUCT_BY_MUIP\020k\022*\n&ACTION_REASON_RECHAR"
      "GE_APPLE_GIFT_GARD\020l\0223\n/ACTION_REASON_RE"
      "CHARGE_PSN_COMPENSATION_PRODUCT\020m\022 \n\034ACT"
      "ION_REASON_COMPOUND_BOOST\020n\022\037\n\033ACTION_RE"
      "ASON_WOOD_EXCHANGE\020o\022,\n(ACTION_REASON_AV"
      "ATAR_RENAME_AUDIT_FAILED\020p\022%\n!ACTION_REA"
      "SON_AVATAR_RENAME_RESET\020q\022\"\n\035ACTION_REAS"
      "ON_PLAYER_USE_ITEM\020\351\007\022\034\n\027ACTION_REASON_D"
      "ROP_ITEM\020\352\007\022!\n\034ACTION_REASON_WEAPON_UPGR"
      "ADE\020\363\007\022!\n\034ACTION_REASON_WEAPON_PROMOTE\020\364"
      "\007\022 \n\033ACTION_REASON_WEAPON_AWAKEN\020\365\007\022 \n\033A"
      "CTION_REASON_RELIC_UPGRADE\020\366\007\022\032\n\025ACTION_"
      "REASON_ABILITY\020\367\007\022&\n!ACTION_REASON_DUNGE"
      "ON_STATUE_DROP\020\370\007\022\036\n\031ACTION_REASON_OFFLI"
      "NE_MSG\020\371\007\022!\n\034ACTION_REASON_AVATAR_UPGRAD"
      "E\020\372\007\022!\n\034ACTION_REASON_AVATAR_PROMOTE\020\373\007\022"
      "\037\n\032ACTION_REASON_QUEST_ACTION\020\375\007\022\037\n\032ACTI"
      "ON_REASON_CITY_LEVELUP\020\376\007\022 \n\033ACTION_REAS"
      "ON_UPGRADE_SKILL\020\200\010\022 \n\033ACTION_REASON_UNL"
      "OCK_TALENT\020\201\010\022&\n!ACTION_REASON_UPGRADE_P"
      "ROUD_SKILL\020\202\010\022(\n#ACTION_REASON_PLAYER_LE"
      "VEL_LIMIT_UP\020\203\010\022 \n\033ACTION_REASON_DUNGEON"
      "_DAILY\020\204\010\022\036\n\031ACTION_REASON_ITEM_GIVING\020\206"
      "\010\022\035\n\030ACTION_REASON_FORGE_COST\020\207\010\022\'\n\"ACTI"
      "ON_REASON_INVESTIGATION_REWARD\020\210\010\022.\n)ACT"
      "ION_REASON_INVESTIGATION_TARGET_REWARD\020\211"
      "\010\022\"\n\035ACTION_REASON_GADGET_INTERACT\020\212\010\022\'\n"
      "\"ACTION_REASON_SEA_LAMP_CI_MATERIAL\020\214\010\022/"
      "\n*ACTION_REASON_SEA_LAMP_CONTRIBUTION_RE"
      "WARD\020\215\010\022(\n#ACTION_REASON_SEA_LAMP_PHASE_"
      "REWARD\020\216\010\022$\n\037ACTION_REASON_SEA_LAMP_FLY_"
      "LAMP\020\217\010\022\037\n\032ACTION_REASON_AUTO_RECOVER\020\220\010"
      "\022\'\n\"ACTION_REASON_ACTIVITY_EXPIRE_ITEM\020\221"
      "\010\022$\n\037ACTION_REASON_SUB_COIN_NEGATIVE\020\222\010\022"
      "!\n\034ACTION_REASON_BARGAIN_DEDUCT\020\223\010\022*\n%AC"
      "TION_REASON_BATTLE_PASS_PAID_REWARD\020\224\010\022+"
      "\n&ACTION_REASON_BATTLE_PASS_LEVEL_REWARD"
      "\020\225\010\022:\n5ACTION_REASON_TRIAL_AVATAR_ACTIVI"
      "TY_FIRST_PASS_REWARD\020\226\010\022(\n#ACTION_REASON"
      "_BUY_BATTLE_PASS_LEVEL\020\227\010\022)\n$ACTION_REAS"
      "ON_GRANT_BIRTHDAY_BENEFIT\020\230\010\022%\n ACTION_R"
      "EASON_ACHIEVEMENT_REWARD\020\231\010\022*\n%ACTION_RE"
      "ASON_ACHIEVEMENT_GOAL_REWARD\020\232\010\0220\n+ACTIO"
      "N_REASON_FIRST_SHARE_TO_SOCIAL_NETWORK\020\233"
      "\010\022#\n\036ACTION_REASON_DESTROY_MATERIAL\020\234\010\022\'"
      "\n\"ACTION_REASON_CODEX_LEVELUP_REWARD\020\235\010\022"
      "\'\n\"ACTION_REASON_HUNTING_OFFER_REWARD\020\236\010"
      "\022*\n%ACTION_REASON_USE_WIDGET_ANCHOR_POIN"
      "T\020\237\010\022%\n ACTION_REASON_USE_WIDGET_BONFIRE"
      "\020\240\010\0221\n,ACTION_REASON_UNGRADE_WEAPON_RETU"
      "RN_MATERIAL\020\241\010\022:\n5ACTION_REASON_USE_WIDG"
      "ET_ONEOFF_GATHER_POINT_DETECTOR\020\242\010\022.\n)AC"
      "TION_REASON_USE_WIDGET_CLIENT_COLLECTOR\020"
      "\243\010\022-\n(ACTION_REASON_USE_WIDGET_CLIENT_DE"
      "TECTOR\020\244\010\022&\n!ACTION_REASON_TAKE_GENERAL_"
      "REWARD\020\245\010\022,\n\'ACTION_REASON_ASTER_TAKE_SP"
      "ECIAL_REWARD\020\246\010\022$\n\037ACTION_REASON_REMOVE_"
      "CODEX_BOOK\020\247\010\022 \n\033ACTION_REASON_OFFERING_"
      "ITEM\020\250\010\022,\n\'ACTION_REASON_USE_WIDGET_GADG"
      "ET_BUILDER\020\251\010\022+\n&ACTION_REASON_EFFIGY_FI"
      "RST_PASS_REWARD\020\252\010\022 \n\033ACTION_REASON_EFFI"
      "GY_REWARD\020\253\010\022,\n\'ACTION_REASON_REUNION_FI"
      "RST_GIFT_REWARD\020\254\010\022)\n$ACTION_REASON_REUN"
      "ION_SIGN_IN_REWARD\020\255\010\022)\n$ACTION_REASON_R"
      "EUNION_WATCHER_REWARD\020\256\010\022%\n ACTION_REASO"
      "N_SALESMAN_MP_REWARD\020\257\010\022)\n$ACTION_REASIO"
      "N_AVATAR_PROMOTE_REWARD\020\260\010\022)\n$ACTION_REA"
      "SON_BLESSING_REDEEM_REWARD\020\261\010\022\037\n\032ACTION_"
      "MIRACLE_RING_REWARD\020\262\010\022$\n\037ACTION_REASON_"
      "EXPEDITION_REWARD\020\263\010\022/\n*ACTION_REASON_TR"
      "EASURE_MAP_REMOVE_DETECTOR\020\264\010\022,\n\'ACTION_"
      "REASON_MECHANICUS_DUNGEON_TICKET\020\265\010\022*\n%A"
      "CTION_REASON_MECHANICUS_LEVELUP_GEAR\020\266\010\022"
      "+\n&ACTION_REASON_MECHANICUS_BATTLE_SETTL"
      "E\020\267\010\022\'\n\"ACTION_REASON_REGION_SEARCH_REWA"
      "RD\020\270\010\022&\n!ACTION_REASON_UNLOCK_COOP_CHAPT"
      "ER\020\271\010\022#\n\036ACTION_REASON_TAKE_COOP_REWARD\020"
      "\272\010\022,\n\'ACTION_REASON_FLEUR_FAIR_DUNGEON_R"
      "EWARD\020\273\010\022!\n\034ACTION_REASON_ACTIVITY_SCORE"
      "\020\274\010\0228\n3ACTION_REASON_CHANNELLER_SLAB_ONE"
      "OFF_DUNGEON_REWARD\020\275\010\022\'\n\"ACTION_REASON_F"
      "URNITURE_MAKE_START\020\276\010\022&\n!ACTION_REASON_"
      "FURNITURE_MAKE_TAKE\020\277\010\022(\n#ACTION_REASON_"
      "FURNITURE_MAKE_CANCEL\020\300\010\022-\n(ACTION_REASO"
      "N_FURNITURE_MAKE_FAST_FINISH\020\301\010\022A\n<ACTIO"
      "N_REASON_CHANNELLER_SLAB_LOOP_DUNGEON_FI"
      "RST_PASS_REWARD\020\302\010\022<\n7ACTION_REASON_CHAN"
      "NELLER_SLAB_LOOP_DUNGEON_SCORE_REWARD\020\303\010"
      "\022(\n#ACTION_REASON_HOME_LIMITED_SHOP_BUY\020"
      "\304\010\022$\n\037ACTION_REASON_HOME_COIN_COLLECT\020\305\010"
      "\0222\n-ACTION_REASON_SUMMER_TIME_SENTRY_TOW"
      "ER_REWARD\020\306\010\0221\n,ACTION_REASON_SUMMER_TIM"
      "E_SPRINT_BOAT_REWARD\020\307\010\022*\n%ACTION_REASON"
      "_SUMMER_TIME_BOSS_REWARD\020\310\010\022*\n%ACTION_RE"
      "ASON_SUMMER_TIME_BOMB_REWARD\020\311\010\022&\n!ACTIO"
      "N_REASON_HOME_FETTER_COLLECT\020\312\010\022$\n\037ACTIO"
      "N_REASON_ECHO_SHELL_REWARD\020\313\010\022$\n\037ACTION_"
      "REASON_HOME_EVENT_REWARD\020\314\010\022,\n\'ACTION_RE"
      "ASON_BLITZ_RUSH_DUNGEON_REWARD\020\315\010\022(\n#ACT"
      "ION_REASON_FURNITURE_MAKE_RETURN\020\316\010\022(\n#A"
      "CTION_REASON_HOME_PLANT_BOX_GATHER\020\317\010\022\"\n"
      "\035ACTION_REASON_HOME_PLANT_SEED\020\320\010\022$\n\037ACT"
      "ION_REASON_HOME_PLANT_GATHER\020\321\010\022\'\n\"ACTIO"
      "N_REASON_CHESS_DUNGEON_REWARD\020\322\010\022+\n&ACTI"
      "ON_REASON_GROUP_LINK_BUNDLE_FINISH\020\323\010\022&\n"
      "!ACTION_REASON_LUNA_RITE_SACRIFICE\020\324\010\0222\n"
      "-ACTION_REASON_LUNA_RITE_TAKE_SACRIFICE_"
      "REWARD\020\325\010\022\034\n\027ACTION_REASON_FISH_BITE\020\326\010\022"
      "\034\n\027ACTION_REASON_FISH_SUCC\020\327\010\022&\n!ACTION_"
      "REASON_PLANT_FLOWER_REWARD\020\330\010\022,\n\'ACTION_"
      "REASON_PLANT_FLOWER_DELIVER_ITEM\020\331\010\022+\n&A"
      "CTION_REASON_PLANT_FLOWER_GIVE_FLOWER\020\332\010"
      "\022+\n&ACTION_REASON_PLANT_FLOWER_RECV_FLOW"
      "ER\020\333\010\022)\n$ACTION_REASON_ROGUE_CHALLENGE_S"
      "ETTLE\020\334\010\022/\n*ACTION_REASON_ROGUE_TAKE_FIR"
      "ST_PASS_REWARD\020\335\010\022*\n%ACTION_REASON_ROGUE"
      "_UPGRADE_SHIKIGAMI\020\336\010\022%\n ACTION_REASON_R"
      "OGUE_REFRESH_CARD\020\337\010\022,\n\'ACTION_REASON_US"
      "E_WIDGET_CAPTURE_ANIMAL\020\340\010\022&\n!ACTION_REA"
      "SON_CAPTURE_ANIMAL_SUCC\020\341\010\022\036\n\031ACTION_REA"
      "SON_SNOW_DRIFTS\020\342\010\022(\n#ACTION_REASON_WINT"
      "ER_CAMP_GIVE_ITEM\020\343\010\022(\n#ACTION_REASON_WI"
      "NTER_CAMP_RECV_ITEM\020\344\010\022-\n(ACTION_REASON_"
      "WINTER_CAMP_EXPLORE_REWARD\020\345\010\022,\n\'ACTION_"
      "REASON_WINTER_CAMP_BATTLE_REWARD\020\346\010\022+\n&A"
      "CTION_REASON_LANTERN_RITE_SKIN_REWARD\020\347\010"
      "\022.\n)ACTION_REASON_LANTERN_RITE_DUNGEON_R"
      "EWARD\020\350\010\0228\n3ACTION_REASON_MICHIAE_MATSUR"
      "I_DARK_CHALLENGE_REWARD\020\351\010\0227\n2ACTION_REA"
      "SON_MICHIAE_MATSURI_UNLOCK_CRYSTAL_SKILL"
      "\020\352\010\022,\n\'ACTION_REASON_LANTERN_RITE_GROUP_"
      "REWARD\020\353\010\022)\n$ACTION_REASON_COSTUME_DEFAU"
      "LT_UNLOCK\020\354\010\022,\n\'ACTION_REASON_SPICE_ACTI"
      "VITY_MAKE_SPICE\020\355\010\022.\n)ACTION_REASON_SPIC"
      "E_ACTIVITY_PROCESS_FOOD\020\356\010\022*\n%ACTION_REA"
      "SON_SPICE_ADD_AVATAR_FETTER\020\357\010\022.\n)ACTION"
      "_REASON_GACHA_ACTIVITY_ROBOT_REWARD\020\360\010\022#"
      "\n\036ACTION_REASON_GIVING_TAKE_BACK\020\361\010\0220\n+A"
      "CTION_REASON_SUMMER_TIME_V2_DUNGEON_REWA"
      "RD\020\362\010\022/\n*ACTION_REASON_GRAVEN_INNOCENCE_"
      "CAMP_REWARD\020\363\010\022/\n*ACTION_REASON_TREASURE"
      "_SEELIE_CHEST_REWARD\020\364\010\0228\n3ACTION_REASON"
      "_GCG_TAVERN_CHALLENGE_UNLOCK_CHARACTER\020\365"
      "\010\022#\n\036ACTION_REASON_GCG_LEVEL_REWARD\020\367\010\022\'"
      "\n\"ACTION_REASON_GCG_CHALLENGE_FINISH\020\370\010\022"
      "&\n!ACTION_REASON_VINTAGE_MARKET_DEAL\020\371\010\022"
      ")\n$ACTION_REASON_VINTAGE_MARKET_BARGAIN\020"
      "\372\010\022\'\n\"ACTION_REASON_VINTAGE_MARKET_STORE"
      "\020\373\010\022\"\n\035ACTION_REASON_VINTAGE_PRESENT\020\374\010\022"
      "%\n ACTION_REASON_VINTAGE_OPEN_STORE\020\375\010\022,"
      "\n\'ACTION_REASON_VINTAGE_STORE_UNLOCK_SLO"
      "T\020\376\010\022*\n%ACTION_REASON_VINTAGE_STORE_NPC_"
      "EVENT\020\377\010\022,\n\'ACTION_REASON_ROCK_BOARD_EXP"
      "LORE_REWARD\020\200\t\022)\n$ACTION_REASON_VINTAGE_"
      "STORE_DIVIDEND\020\201\t\022 \n\033ACTION_REASON_AVATA"
      "R_RENAME\020\202\t\022)\n$ACTION_REASON_GCG_FINISH_"
      "LEVEL_QUEST\020\203\t\022)\n$ACTION_REASON_GCG_PROF"
      "ICIENCY_REWARD\020\204\t\022,\n\'ACTION_REASON_TEAM_"
      "CHAIN_COSTUME_REWARD\020\205\t*<\n\tStoreType\022\016\n\n"
      "STORE_NONE\020\000\022\016\n\nSTORE_PACK\020\001\022\017\n\013STORE_DE"
      "POT\020\002*\360\021\n\013VirtualItem\022\025\n\021ITEM_VIRTUAL_NO"
      "NE\020\000\022\033\n\027ITEM_VIRTUAL_AVATAR_EXP\020e\022\033\n\027ITE"
      "M_VIRTUAL_PLAYER_EXP\020f\022\033\n\027ITEM_VIRTUAL_F"
      "ETTER_EXP\020i\022\026\n\022ITEM_VIRTUAL_RESIN\020j\022\036\n\032I"
      "TEM_VIRTUAL_LEGENDARY_KEY\020k\022\037\n\033ITEM_VIRT"
      "UAL_ASTER_PROGRESS\020l\022\035\n\031ITEM_VIRTUAL_AST"
      "ER_CREDIT\020m\022\034\n\030ITEM_VIRTUAL_ASTER_TOKEN\020"
      "n\022#\n\037ITEM_VIRTUAL_SHIMMERING_ESSENCE\020o\022\035"
      "\n\031ITEM_VIRTUAL_WARM_ESSENCE\020p\022!\n\035ITEM_VI"
      "RTUAL_WONDROUS_ESSENCE\020q\022#\n\037ITEM_VIRTUAL"
      "_TREASURE_MAP_TOKEN\020r\022\036\n\032ITEM_VIRTUAL_SE"
      "A_LAMP_COIN\020s\022$\n ITEM_VIRTUAL_SEA_LAMP_P"
      "OPULARITY\020t\022 \n\034ITEM_VIRTUAL_MECHANICUS_C"
      "OIN\020u\022\"\n\036ITEM_VIRTUAL_FLEUR_FAIR_CREDIT\020"
      "v\022!\n\035ITEM_VIRTUAL_FLEUR_FAIR_TOKEN\020w\022\"\n\036"
      "ITEM_VIRTUAL_WATER_SPIRIT_COIN\020x\022\031\n\025ITEM"
      "_VIRTUAL_HOME_EXP\020y\022&\n\"ITEM_VIRTUAL_CHAN"
      "NELLER_SLAB_TOKEN\020z\022#\n\037ITEM_VIRTUAL_HIDE"
      "_AND_SEEK_COIN\020{\022\'\n#ITEM_VIRTUAL_SUMMER_"
      "TIME_DRAFT_WOOD\020|\022+\n\'ITEM_VIRTUAL_SUMMER"
      "_TIME_MINI_HARPASTUM\020}\022&\n\"ITEM_VIRTUAL_B"
      "OUNCE_CONJURING_COIN\020~\022\"\n\036ITEM_VIRTUAL_B"
      "LITZ_RUSH_COIN_A\020\177\022#\n\036ITEM_VIRTUAL_BLITZ"
      "_RUSH_COIN_B\020\200\001\022\033\n\026ITEM_VIRTUAL_CHESS_EX"
      "P\020\201\001\022\034\n\027ITEM_VIRTUAL_CHESS_COIN\020\202\001\022&\n!IT"
      "EM_VIRTUAL_LUNA_RITE_ATMOSPHERE\020\203\001\022\"\n\035IT"
      "EM_VIRTUAL_ROGUELIKE_COIN_A\020\204\001\022\"\n\035ITEM_V"
      "IRTUAL_ROGUELIKE_COIN_B\020\205\001\022\"\n\035ITEM_VIRTU"
      "AL_ROGUELIKE_COIN_C\020\206\001\022$\n\037ITEM_VIRTUAL_W"
      "INTER_CAMP_COIN_A\020\207\001\022$\n\037ITEM_VIRTUAL_WIN"
      "TER_CAMP_COIN_B\020\210\001\022%\n ITEM_VIRTUAL_LANTE"
      "RN_RITE_COIN_A\020\211\001\022%\n ITEM_VIRTUAL_LANTER"
      "N_RITE_COIN_B\020\212\001\022%\n ITEM_VIRTUAL_LANTERN"
      "_RITE_COIN_C\020\213\001\022\"\n\035ITEM_VIRTUAL_ROGUE_DI"
      "ARY_COIN\020\214\001\022%\n ITEM_VIRTUAL_SUMMER_TIME_"
      "V2_COIN\020\215\001\022*\n%ITEM_VIRTUAL_ROGUE_DIARY_D"
      "UNGEON_COIN\020\216\001\022)\n$ITEM_VIRTUAL_GRAVEN_IN"
      "NOCENCE_COIN_A\020\217\001\022)\n$ITEM_VIRTUAL_GRAVEN"
      "_INNOCENCE_COIN_B\020\220\001\022&\n!ITEM_VIRTUAL_TRE"
      "ASURE_SEELIE_COIN\020\221\001\022$\n\037ITEM_VIRTUAL_VIN"
      "TAGE_POPULARITY\020\223\001\022\031\n\024ITEM_VIRTUAL_GCG_E"
      "XP\020\222\001\022\'\n\"ITEM_VIRTUAL_VINTAGE_MARKET_COI"
      "N_A\020\224\001\022\'\n\"ITEM_VIRTUAL_VINTAGE_MARKET_CO"
      "IN_B\020\225\001\022\'\n\"ITEM_VIRTUAL_VINTAGE_MARKET_C"
      "OIN_C\020\226\001\022-\n(ITEM_VIRTUAL_FUNGUS_FIGHTER_"
      "CAPTURE_COIN\020\227\001\022.\n)ITEM_VIRTUAL_FUNGUS_F"
      "IGHTER_TRAINING_COIN\020\230\001\022*\n%ITEM_VIRTUAL_"
      "EFFIGY_CHALLENGE_V2_COIN\020\231\001\022!\n\034ITEM_VIRT"
      "UAL_TEAM_CHAIN_COIN\020\232\001\022$\n\037ITEM_VIRTUAL_B"
      "RICK_BREAKER_COIN\020\233\001\022\"\n\035ITEM_VIRTUAL_SEA"
      "_LAMP_V3_COIN\020\234\001\022\027\n\022ITEM_VIRTUAL_HCOIN\020\311"
      "\001\022\027\n\022ITEM_VIRTUAL_SCOIN\020\312\001\022\027\n\022ITEM_VIRTU"
      "AL_MCOIN\020\313\001\022\033\n\026ITEM_VIRTUAL_HOME_COIN\020\314\001"
      "\022\032\n\025ITEM_VIRTUAL_GCG_COIN\020\315\001\022$\n\037ITEM_VIR"
      "TUAL_INAZUMA_REPUTATION\020\272\002\022#\n\036ITEM_VIRTU"
      "AL_MENGDE_REPUTATION\020\273\002\022#\n\036ITEM_VIRTUAL_"
      "SUMERU_REPUTATION\020\274\002\022\"\n\035ITEM_VIRTUAL_LIY"
      "UE_REPUTATION\020\275\002*\224\001\n\022ReliquaryFilterKey\022"
      "\035\n\031RELIQUARY_FILTER_KEY_NONE\020\000\022\035\n\031RELIQU"
      "ARY_FILTER_KEY_LOCK\020\001\022\036\n\032RELIQUARY_FILTE"
      "R_KEY_LEVEL\020\002\022 \n\034RELIQUARY_FILTER_KEY_WE"
      "ARING\020\003*\216\001\n\030ReliquaryFilterLockState\022$\n "
      "RELIQUARY_FILTER_LOCK_STATE_NONE\020\000\022$\n RE"
      "LIQUARY_FILTER_LOCK_STATE_LOCK\020\001\022&\n\"RELI"
      "QUARY_FILTER_LOCK_STATE_UNLOCK\020\002*\240\001\n\031Rel"
      "iquaryFilterLevelState\022%\n!RELIQUARY_FILT"
      "ER_LEVEL_STATE_NONE\020\000\022+\n\'RELIQUARY_FILTE"
      "R_LEVEL_STATE_FULL_LEVEL\020\001\022/\n+RELIQUARY_"
      "FILTER_LEVEL_STATE_NOT_FULL_LEVEL\020\002*\256\001\n\032"
      "ReliquaryFilterWearedState\022&\n\"RELIQUARY_"
      "FILTER_WEARED_STATE_NONE\020\000\0221\n-RELIQUARY_"
      "FILTER_WEARED_STATE_HAS_BEEN_WEARED\020\001\0225\n"
      "1RELIQUARY_FILTER_WEARED_STATE_HAS_NOT_B"
      "EEN_WEARED\020\002*\354\001\n\021AbilityScalarType\022\036\n\032AB"
      "ILITY_SCALAR_TYPE_UNKNOW\020\000\022\035\n\031ABILITY_SC"
      "ALAR_TYPE_FLOAT\020\001\022\033\n\027ABILITY_SCALAR_TYPE"
      "_INT\020\002\022\034\n\030ABILITY_SCALAR_TYPE_BOOL\020\003\022\037\n\033"
      "ABILITY_SCALAR_TYPE_TRIGGER\020\004\022\036\n\032ABILITY"
      "_SCALAR_TYPE_STRING\020\005\022\034\n\030ABILITY_SCALAR_"
      "TYPE_UINT\020\006*\276\n\n\013MotionState\022\017\n\013MOTION_NO"
      "NE\020\000\022\020\n\014MOTION_RESET\020\001\022\022\n\016MOTION_STANDBY"
      "\020\002\022\027\n\023MOTION_STANDBY_MOVE\020\003\022\017\n\013MOTION_WA"
      "LK\020\004\022\016\n\nMOTION_RUN\020\005\022\017\n\013MOTION_DASH\020\006\022\020\n"
      "\014MOTION_CLIMB\020\007\022\025\n\021MOTION_CLIMB_JUMP\020\010\022\033"
      "\n\027MOTION_STANDBY_TO_CLIMB\020\t\022\020\n\014MOTION_FI"
      "GHT\020\n\022\017\n\013MOTION_JUMP\020\013\022\017\n\013MOTION_DROP\020\014\022"
      "\016\n\nMOTION_FLY\020\r\022\024\n\020MOTION_SWIM_MOVE\020\016\022\024\n"
      "\020MOTION_SWIM_IDLE\020\017\022\024\n\020MOTION_SWIM_DASH\020"
      "\020\022\024\n\020MOTION_SWIM_JUMP\020\021\022\017\n\013MOTION_SLIP\020\022"
      "\022\026\n\022MOTION_GO_UPSTAIRS\020\023\022\031\n\025MOTION_FALL_"
      "ON_GROUND\020\024\022#\n\037MOTION_JUMP_UP_WALL_FOR_S"
      "TANDBY\020\025\022\030\n\024MOTION_JUMP_OFF_WALL\020\026\022\026\n\022MO"
      "TION_POWERED_FLY\020\027\022\026\n\022MOTION_LADDER_IDLE"
      "\020\030\022\026\n\022MOTION_LADDER_MOVE\020\031\022\026\n\022MOTION_LAD"
      "DER_SLIP\020\032\022\034\n\030MOTION_STANDBY_TO_LADDER\020\033"
      "\022\034\n\030MOTION_LADDER_TO_STANDBY\020\034\022\031\n\025MOTION"
      "_DANGER_STANDBY\020\035\022\036\n\032MOTION_DANGER_STAND"
      "BY_MOVE\020\036\022\026\n\022MOTION_DANGER_WALK\020\037\022\025\n\021MOT"
      "ION_DANGER_RUN\020 \022\026\n\022MOTION_DANGER_DASH\020!"
      "\022\026\n\022MOTION_CROUCH_IDLE\020\"\022\026\n\022MOTION_CROUC"
      "H_MOVE\020#\022\026\n\022MOTION_CROUCH_ROLL\020$\022\021\n\rMOTI"
      "ON_NOTIFY\020%\022\025\n\021MOTION_LAND_SPEED\020&\022\030\n\024MO"
      "TION_MOVE_FAIL_ACK\020\'\022\024\n\020MOTION_WATERFALL"
      "\020(\022\034\n\030MOTION_DASH_BEFORE_SHAKE\020)\022\023\n\017MOTI"
      "ON_SIT_IDLE\020*\022\030\n\024MOTION_FORCE_SET_POS\020+\022"
      "\033\n\027MOTION_QUEST_FORCE_DRAG\020,\022\027\n\023MOTION_F"
      "OLLOW_ROUTE\020-\022\031\n\025MOTION_SKIFF_BOARDING\020."
      "\022\027\n\023MOTION_SKIFF_NORMAL\020/\022\025\n\021MOTION_SKIF"
      "F_DASH\0200\022\035\n\031MOTION_SKIFF_POWERED_DASH\0201\022"
      "\032\n\026MOTION_DESTROY_VEHICLE\0202\022\023\n\017MOTION_FL"
      "Y_IDLE\0203\022\023\n\017MOTION_FLY_SLOW\0204\022\023\n\017MOTION_"
      "FLY_FAST\0205\022\023\n\017MOTION_AIM_MOVE\0206\022\033\n\027MOTIO"
      "N_AIR_COMPENSATION\0207\022\016\n\nMOTION_NUM\0208*\206\003\n"
      "\016ProtEntityType\022\024\n\020PROT_ENTITY_NONE\020\000\022\026\n"
      "\022PROT_ENTITY_AVATAR\020\001\022\027\n\023PROT_ENTITY_MON"
      "STER\020\002\022\023\n\017PROT_ENTITY_NPC\020\003\022\026\n\022PROT_ENTI"
      "TY_GADGET\020\004\022\026\n\022PROT_ENTITY_REGION\020\005\022\026\n\022P"
      "ROT_ENTITY_WEAPON\020\006\022\027\n\023PROT_ENTITY_WEATH"
      "ER\020\007\022\025\n\021PROT_ENTITY_SCENE\020\010\022\024\n\020PROT_ENTI"
      "TY_TEAM\020\t\022\036\n\032PROT_ENTITY_MASSIVE_ENTITY\020"
      "\n\022\030\n\024PROT_ENTITY_MP_LEVEL\020\013\022 \n\034PROT_ENTI"
      "TY_PLAY_TEAM_ENTITY\020\014\022\031\n\025PROT_ENTITY_EYE"
      "_POINT\020\r\022\023\n\017PROT_ENTITY_MAX\020\016*I\n\014NpcTalk"
      "State\022\021\n\rNPC_TALK_NONE\020\000\022\021\n\rNPC_TALK_AUT"
      "O\020\001\022\023\n\017NPC_TALK_MANUAL\020\002*(\n\013VehicleSlot\022"
      "\031\n\025VEHICLE_SLOT_OPERATOR\020\000*[\n\017MonsterBor"
      "nType\022\025\n\021MONSTER_BORN_NONE\020\000\022\030\n\024MONSTER_"
      "BORN_DEFAULT\020\001\022\027\n\023MONSTER_BORN_RANDOM\020\002*"
      "\300\001\n\016GadgetBornType\022\024\n\020GADGET_BORN_NONE\020\000"
      "\022\026\n\022GADGET_BORN_IN_AIR\020\001\022\026\n\022GADGET_BORN_"
      "PLAYER\020\002\022\033\n\027GADGET_BORN_MONSTER_HIT\020\003\022\033\n"
      "\027GADGET_BORN_MONSTER_DIE\020\004\022\026\n\022GADGET_BOR"
      "N_GADGET\020\005\022\026\n\022GADGET_BORN_GROUND\020\006*\206\001\n\022M"
      "ovingPlatformType\022\030\n\024MOVING_PLATFORM_NON"
      "E\020\000\022\036\n\032MOVING_PLATFORM_USE_CONFIG\020\001\022\033\n\027M"
      "OVING_PLATFORM_ABILITY\020\002\022\031\n\025MOVING_PLATF"
      "ORM_ROUTE\020\003*@\n\016GadgetPlayType\022\024\n\020GADGET_"
      "PLAY_NONE\020\000\022\030\n\024GADGET_PLAY_CRUSIBLE\020\001*\207\001"
      "\n\020FoundationStatus\022\032\n\026FOUNDATION_STATUS_"
      "NONE\020\000\022\032\n\026FOUNDATION_STATUS_INIT\020\001\022\036\n\032FO"
      "UNDATION_STATUS_BUILDING\020\002\022\033\n\027FOUNDATION"
      "_STATUS_BUILT\020\003*\324\006\n\rChangHpReason\022\022\n\016CHA"
      "NGE_HP_NONE\020\000\022\030\n\024CHANGE_HP_SUB_AVATAR\020\001\022"
      "\031\n\025CHANGE_HP_SUB_MONSTER\020\002\022\026\n\022CHANGE_HP_"
      "SUB_GEAR\020\003\022\027\n\023CHANGE_HP_SUB_ENVIR\020\004\022\026\n\022C"
      "HANGE_HP_SUB_FALL\020\005\022\027\n\023CHANGE_HP_SUB_DRA"
      "WN\020\006\022\027\n\023CHANGE_HP_SUB_ABYSS\020\007\022\031\n\025CHANGE_"
      "HP_SUB_ABILITY\020\010\022\030\n\024CHANGE_HP_SUB_SUMMON"
      "\020\t\022\030\n\024CHANGE_HP_SUB_SCRIPT\020\n\022\024\n\020CHANGE_H"
      "P_SUB_GM\020\013\022\033\n\027CHANGE_HP_SUB_KILL_SELF\020\014\022"
      "\036\n\032CHANGE_HP_SUB_CLIMATE_COLD\020\r\022!\n\035CHANG"
      "E_HP_SUB_STORM_LIGHTNING\020\016\022$\n CHANGE_HP_"
      "SUB_KILL_SERVER_GADGET\020\017\022\031\n\025CHANGE_HP_SU"
      "B_REPLACE\020\020\022\036\n\032CHANGE_HP_SUB_PLAYER_LEAV"
      "E\020\021\022\036\n\032CHANGE_HP_ATTACK_BY_ENERGY\020\022\022\037\n\033C"
      "HANGE_HP_ATTACK_BY_RECYCLE\020\023\022\024\n\020CHANGE_H"
      "P_BY_LUA\0203\022\031\n\025CHANGE_HP_ADD_ABILITY\020e\022\026\n"
      "\022CHANGE_HP_ADD_ITEM\020f\022\030\n\024CHANGE_HP_ADD_R"
      "EVIVE\020g\022\031\n\025CHANGE_HP_ADD_UPGRADE\020h\022\030\n\024CH"
      "ANGE_HP_ADD_STATUE\020i\022\034\n\030CHANGE_HP_ADD_BA"
      "CKGROUND\020j\022\024\n\020CHANGE_HP_ADD_GM\020k\022\'\n#CHAN"
      "GE_HP_ADD_TRIAL_AVATAR_ACTIVITY\020l\022#\n\037CHA"
      "NGE_HP_ADD_ROUGUELIKE_SPRING\020m*\361\001\n\rPlaye"
      "rDieType\022\023\n\017PLAYER_DIE_NONE\020\000\022\036\n\032PLAYER_"
      "DIE_KILL_BY_MONSTER\020\001\022\033\n\027PLAYER_DIE_KILL"
      "_BY_GEAR\020\002\022\023\n\017PLAYER_DIE_FALL\020\003\022\024\n\020PLAYE"
      "R_DIE_DRAWN\020\004\022\024\n\020PLAYER_DIE_ABYSS\020\005\022\021\n\rP"
      "LAYER_DIE_GM\020\006\022\033\n\027PLAYER_DIE_CLIMATE_COL"
      "D\020\007\022\035\n\031PLAYER_DIE_STORM_LIGHTING\020\010*_\n\017Pl"
      "ayerDieOption\022\020\n\014DIE_OPT_NONE\020\000\022\022\n\016DIE_O"
      "PT_REPLAY\020\001\022\022\n\016DIE_OPT_CANCEL\020\002\022\022\n\016DIE_O"
      "PT_REVIVE\020\003*\211\001\n\013FetterState\022\025\n\021FETTER_ST"
      "ATE_NONE\020\000\022\031\n\025FETTER_STATE_NOT_OPEN\020\001\022\025\n"
      "\021FETTER_STATE_OPEN\020\002\022\027\n\023FETTER_STATE_FIN"
      "ISH\020\003\022\030\n\024FETTER_STATE_CONCEAL\020\004*\304\001\n\025Avat"
      "arExpeditionState\022\032\n\026AVATAR_EXPEDITION_N"
      "ONE\020\000\022\033\n\027AVATAR_EXPEDITION_DOING\020\001\022(\n$AV"
      "ATAR_EXPEDITION_FINISH_WAIT_REWARD\020\002\022*\n&"
      "AVATAR_EXPEDITION_CALLBACK_WAIT_REWARD\020\003"
      "\022\034\n\030AVATAR_EXPEDITION_LOCKED\020\004*i\n\nAvatar"
      "Type\022\024\n\020AVATAR_TYPE_NONE\020\000\022\026\n\022AVATAR_TYP"
      "E_FORMAL\020\001\022\025\n\021AVATAR_TYPE_TRIAL\020\002\022\026\n\022AVA"
      "TAR_TYPE_MIRROR\020\003*I\n\020EventTriggerType\022\026\n"
      "\022EVENT_TRIGGER_NONE\020\000\022\035\n\031EVENT_TRIGGER_E"
      "NTER_FORCE\020\001*\213\001\n\020MailCollectState\022\033\n\027MAI"
      "L_COLLECTIBLE_UNKONW\020\000\022\030\n\024MAIL_NOT_COLLE"
      "CTIBLE\020\001\022 \n\034MAIL_COLLECTIBLE_UNCOLLECTED"
      "\020\002\022\036\n\032MAIL_COLLECTIBLE_COLLECTED\020\003*g\n\rMp"
      "SettingType\022\027\n\023MP_SETTING_NO_ENTER\020\000\022\033\n\027"
      "MP_SETTING_ENTER_FREELY\020\001\022 \n\034MP_SETTING_"
      "ENTER_AFTER_APPLY\020\002*\261\001\n\022MathExpressionTy"
      "pe\022\022\n\016MATH_EXPR_NONE\020\000\022\023\n\017MATH_EXPR_LEVE"
      "L\020\001\022\033\n\027MATH_EXPR_REGISTER_TIME\020\002\022\035\n\031MATH"
      "_EXPR_LAST_LOGIN_TIME\020\003\022\036\n\032MATH_EXPR_TOT"
      "AL_LOGIN_DAYS\020\004\022\026\n\022MATH_EXPR_PLATFORM\020\005*"
      "L\n\025LoginRewardConfigType\022\033\n\027LOGIN_REWARD"
      "_IMMEDIDATE\020\000\022\026\n\022LOGIN_REWARD_FIRST\020\001*\240\002"
      "\n\014LanguageType\022\021\n\rLANGUAGE_NONE\020\000\022\017\n\013LAN"
      "GUAGE_EN\020\001\022\017\n\013LANGUAGE_SC\020\002\022\017\n\013LANGUAGE_"
      "TC\020\003\022\017\n\013LANGUAGE_FR\020\004\022\017\n\013LANGUAGE_DE\020\005\022\017"
      "\n\013LANGUAGE_ES\020\006\022\017\n\013LANGUAGE_PT\020\007\022\017\n\013LANG"
      "UAGE_RU\020\010\022\017\n\013LANGUAGE_JP\020\t\022\017\n\013LANGUAGE_K"
      "R\020\n\022\017\n\013LANGUAGE_TH\020\013\022\017\n\013LANGUAGE_VN\020\014\022\017\n"
      "\013LANGUAGE_ID\020\r\022\017\n\013LANGUAGE_TR\020\016\022\017\n\013LANGU"
      "AGE_IT\020\017*\352\001\n\014PlatformType\022\n\n\006EDITOR\020\000\022\007\n"
      "\003IOS\020\001\022\013\n\007ANDROID\020\002\022\006\n\002PC\020\003\022\007\n\003PS4\020\004\022\n\n\006"
      "SERVER\020\005\022\021\n\rCLOUD_ANDROID\020\006\022\r\n\tCLOUD_IOS"
      "\020\007\022\007\n\003PS5\020\010\022\r\n\tCLOUD_WEB\020\t\022\014\n\010CLOUD_TV\020\n"
      "\022\r\n\tCLOUD_MAC\020\013\022\014\n\010CLOUD_PC\020\014\022\034\n\030CLOUD_T"
      "HIRD_PARTY_MOBILE\020\r\022\030\n\024CLOUD_THIRD_PARTY"
      "_PC\020\016*i\n\020MapMarkPointType\022\007\n\003NPC\020\000\022\t\n\005QU"
      "EST\020\001\022\013\n\007SPECIAL\020\002\022\010\n\004MINE\020\003\022\016\n\nCOLLECTI"
      "ON\020\004\022\013\n\007MONSTER\020\005\022\r\n\tFISH_POOL\020\006*k\n\017MapM"
      "arkFromType\022\032\n\026MAP_MARK_FROM_TYPE_NOE\020\000\022"
      "\036\n\032MAP_MARK_FROM_TYPE_MONSTER\020\001\022\034\n\030MAP_M"
      "ARK_FROM_TYPE_QUEST\020\002*\335\001\n\037DungeonCandida"
      "teTeamInviteState\022,\n(DUNGEON_CANDIDATE_T"
      "EAM_INVITE_STATE_NONE\020\000\022,\n(DUNGEON_CANDI"
      "DATE_TEAM_INVITE_STATE_SEND\020\001\022.\n*DUNGEON"
      "_CANDIDATE_TEAM_INVITE_STATE_ACCEPT\020\002\022.\n"
      "*DUNGEON_CANDIDATE_TEAM_INVITE_STATE_REF"
      "USE\020\003*\363\001\n\023MonsterGuestBanDrop\022\032\n\026MONSTER"
      "_GUEST_BAN_NONE\020\000\022\035\n\031MONSTER_GUEST_BAN_D"
      "IE_EXP\020\001\022\035\n\031MONSTER_GUEST_BAN_DIE_LUA\020\002\022"
      "\037\n\033MONSTER_GUEST_BAN_DIE_EXCEL\020\004\022\"\n\036MONS"
      "TER_GUEST_BAN_DIE_ACTIVITY\020\010\022\035\n\031MONSTER_"
      "GUEST_BAN_DROP_HP\020\020\022\036\n\032MONSTER_GUEST_BAN"
      "_SUBFIELD\020 *l\n\022GadgetGuestBanDrop\022\031\n\025GAD"
      "GET_GUEST_BAN_NONE\020\000\022\034\n\030GADGET_GUEST_BAN"
      "_DIE_LUA\020\001\022\035\n\031GADGET_GUEST_BAN_SUBFIELD\020"
      "\002*i\n\021GroupLoadStrategy\022\023\n\017GROUP_LOAD_NON"
      "E\020\000\022\025\n\021GROUP_LOAD_SINGLE\020\001\022\024\n\020GROUP_LOAD"
      "_MULTI\020\002\022\022\n\016GROUP_LOAD_ALL\020\003*\227\001\n\tMatchTy"
      "pe\022\023\n\017MATCH_TYPE_NONE\020\000\022\026\n\022MATCH_TYPE_DU"
      "NGEON\020\001\022\026\n\022MATCH_TYPE_MP_PLAY\020\002\022\031\n\025MATCH"
      "_TYPE_MECHANICUS\020\003\022\026\n\022MATCH_TYPE_GENERAL"
      "\020\004\022\022\n\016MATCH_TYPE_GCG\020\005*I\n\nMpPlayType\022\020\n\014"
      "MP_PLAY_NONE\020\000\022\023\n\017MP_PLAY_DUNGEON\020\001\022\024\n\020M"
      "P_PLAY_CRUCIBLE\020\002*\221\001\n\016OpActivityType\022\024\n\020"
      "OP_ACTIVITY_NONE\020\000\022\027\n\023OP_ACTIVITY_SIGN_I"
      "N\020\001\022\025\n\021OP_ACTIVITY_BONUS\020\002\022\037\n\033OP_ACTIVIT"
      "Y_TRAVEL_BUSINESS\020\003\022\030\n\024OP_ACTIVITY_CRUCI"
      "BLE\020\004*\353\001\n\013MatchReason\022\016\n\nMATCH_NONE\020\000\022\020\n"
      "\014MATCH_FINISH\020\001\022\027\n\023MATCH_PLAYER_CANCEL\020\002"
      "\022\021\n\rMATCH_TIMEOUT\020\003\022\030\n\024MATCH_PLAYER_CONF"
      "IRM\020\004\022\020\n\014MATCH_FAILED\020\005\022\026\n\022MATCH_SYSTEM_"
      "ERROR\020\006\022\025\n\021MATCH_INTERRUPTED\020\007\022\030\n\024MATCH_"
      "MP_UNAVAILABLE\020\010\022\031\n\025MATCH_CONFIRM_TIMEOU"
      "T\020\t*<\n\022LuaShellNotifyType\022\023\n\017LUASHELL_NO"
      "TIFY\020\000\022\021\n\rLUASHELL_HIDE\020\001*f\n\014LuaShellTyp"
      "e\022\021\n\rLUASHELL_NONE\020\000\022\023\n\017LUASHELL_NORMAL\020"
      "\001\022\025\n\021LUASHELL_SECURITY\020\002\022\027\n\023LUASHELL_SHE"
      "LL_CODE\020\003*\211\001\n\022SalesmanStatusType\022\030\n\024SALE"
      "SMAN_STATUS_NONE\020\000\022\035\n\031SALESMAN_STATUS_UN"
      "STARTED\020\001\022\033\n\027SALESMAN_STATUS_STARTED\020\002\022\035"
      "\n\031SALESMAN_STATUS_DELIVERED\020\003*F\n\021Securit"
      "yCheckType\022\027\n\023SECURITY_CHECK_NONE\020\000\022\030\n\024S"
      "ECURITY_CHECK_LOGIN\020\001*\256\001\n\tCodexType\022\016\n\nC"
      "ODEX_NONE\020\000\022\017\n\013CODEX_QUEST\020\001\022\020\n\014CODEX_WE"
      "APON\020\002\022\020\n\014CODEX_ANIMAL\020\003\022\022\n\016CODEX_MATERI"
      "AL\020\004\022\017\n\013CODEX_BOOKS\020\005\022\022\n\016CODEX_PUSHTIPS\020"
      "\006\022\016\n\nCODEX_VIEW\020\007\022\023\n\017CODEX_RELIQUARY\020\010*\255"
      "\001\n\024SegmentCRCModuleType\022\017\n\013MODULE_NONE\020\000"
      "\022\022\n\016PC_UNITYPLAYER\020\001\022\023\n\017PC_USERASSEMBLY\020"
      "\002\022\013\n\007PC_XLUA\020\003\022\025\n\021ANDROID_LIBIL2CPP\020\013\022\024\n"
      "\020ANDROID_LIBUNITY\020\014\022\023\n\017ANDROID_LIBXLUA\020\r"
      "\022\014\n\010IOS_HK4E\020\025*g\n\021ExchangeMcoinType\022\026\n\022E"
      "XCHANGEMCOIN_NONE\020\000\022\034\n\030EXCHANGEMCOIN_PCM"
      "_TO_PSN\020\001\022\034\n\030EXCHANGEMCOIN_PSN_TO_PCM\020\002*"
      "q\n\013ExploreType\022\020\n\014EXPLORE_NONE\020\000\022\023\n\017EXPL"
      "ORE_CRYSTAL\020\001\022\021\n\rEXPLORE_CHEST\020\002\022\022\n\016EXPL"
      "ORE_TEMPLE\020\003\022\024\n\020EXPLORE_TELEPORT\020\004*\227\001\n\025A"
      "sterLittleStageState\022\033\n\027ASTER_LITTLE_STA"
      "GE_NONE\020\000\022 \n\034ASTER_LITTLE_STAGE_UNSTARTE"
      "D\020\001\022\036\n\032ASTER_LITTLE_STAGE_STARTED\020\002\022\037\n\033A"
      "STER_LITTLE_STAGE_FINISHED\020\003*\223\001\n\021Hunting"
      "OfferState\022\034\n\030HUNTING_OFFER_STATE_NONE\020\000"
      "\022\037\n\033HUNTING_OFFER_STATE_STARTED\020\001\022!\n\035HUN"
      "TING_OFFER_STATE_UNSTARTED\020\002\022\034\n\030HUNTING_"
      "OFFER_STATE_SUCC\020\003*\236\001\n\021RegionSearchState"
      "\022\026\n\022REGION_SEARCH_NONE\020\000\022\033\n\027REGION_SEARC"
      "H_UNSTARTED\020\001\022\031\n\025REGION_SEARCH_STARTED\020\002"
      "\022\035\n\031REGION_SEARCH_WAIT_REWARD\020\003\022\032\n\026REGIO"
      "N_SEARCH_FINISHED\020\004*j\n\tPlayerTag\022\025\n\021PLAY"
      "ER_TAG_NORMAL\020\000\022\032\n\026PLAYER_TAG_SUB_ACCOUN"
      "T\020\003\022*\n&PLAYER_TAG_SUB_ACCOUNT_TRANS_TO_N"
      "ORMAL\020\005*\241\001\n\020FeatureBlockType\022\033\n\027FEATURE_"
      "BLOCK_TYPE_NONE\020\000\022\033\n\027FEATURE_BLOCK_TYPE_"
      "CHAT\020\001\022\031\n\025FEATURE_BLOCK_TYPE_MP\020\002\022\033\n\027FEA"
      "TRURE_BLOCK_TYPE_CRC\020\003\022\033\n\027FEATURE_BLOCK_"
      "TYPE_HOME\020\004*\315\001\n\020ReportReasonType\022\026\n\022REPO"
      "RT_REASON_NONE\020\000\022\037\n\033REPORT_REASON_DECEPT"
      "IVE_ADS\020\001\022\031\n\025REPORT_REASON_ABUSING\020\002\022\027\n\023"
      "REPORT_REASON_CHEAT\020\003\022\033\n\027REPORT_REASON_P"
      "OLITICAL\020\004\022\027\n\023REPORT_REASON_OTHER\020\005\022\026\n\022R"
      "EPORT_REASON_HOME\020\006*6\n\017MapMarkTipsType\022#"
      "\n\037MARK_TIPS_DUNGEON_ELEMENT_TRIAL\020\000*\207\001\n\017"
      "ExpeditionState\022\023\n\017EXPEDITION_NONE\020\000\022\026\n\022"
      "EXPEDITION_STARTED\020\001\022\027\n\023EXPEDITION_FINIS"
      "HED\020\002\022\027\n\023EXPEDITION_REWARDED\020\003\022\025\n\021EXPEDI"
      "TION_LOCKED\020\004*\305\017\n\013EnterReason\022\025\n\021ENTER_R"
      "EASON_NONE\020\000\022\026\n\022ENTER_REASON_LOGIN\020\001\022\037\n\033"
      "ENTER_REASON_DUNGEON_REPLAY\020\013\022+\n\'ENTER_R"
      "EASON_DUNGEON_REVIVE_ON_WAYPOINT\020\014\022\036\n\032EN"
      "TER_REASON_DUNGEON_ENTER\020\r\022\035\n\031ENTER_REAS"
      "ON_DUNGEON_QUIT\020\016\022\023\n\017ENTER_REASON_GM\020\025\022\037"
      "\n\033ENTER_REASON_QUEST_ROLLBACK\020\037\022\030\n\024ENTER"
      "_REASON_REVIVAL\020 \022\037\n\033ENTER_REASON_PERSON"
      "AL_SCENE\020)\022\034\n\030ENTER_REASON_TRANS_POINT\020*"
      "\022 \n\034ENTER_REASON_CLIENT_TRANSMIT\020+\022 \n\034EN"
      "TER_REASON_FORCE_DRAG_BACK\020,\022\032\n\026ENTER_RE"
      "ASON_TEAM_KICK\0203\022\032\n\026ENTER_REASON_TEAM_JO"
      "IN\0204\022\032\n\026ENTER_REASON_TEAM_BACK\0205\022\025\n\021ENTE"
      "R_REASON_MUIP\0206\022&\n\"ENTER_REASON_DUNGEON_"
      "INVITE_ACCEPT\0207\022\024\n\020ENTER_REASON_LUA\0208\022&\n"
      "\"ENTER_REASON_ACTIVITY_LOAD_TERRAIN\0209\022\'\n"
      "#ENTER_REASON_HOST_FROM_SINGLE_TO_MP\020:\022\030"
      "\n\024ENTER_REASON_MP_PLAY\020;\022\035\n\031ENTER_REASON"
      "_ANCHOR_POINT\020<\022\034\n\030ENTER_REASON_LUA_SKIP"
      "_UI\020=\022\037\n\033ENTER_REASON_RELOAD_TERRAIN\020>\022\037"
      "\n\033ENTER_REASON_DRAFT_TRANSFER\020\?\022\033\n\027ENTER"
      "_REASON_ENTER_HOME\020@\022\032\n\026ENTER_REASON_EXI"
      "T_HOME\020A\022#\n\037ENTER_REASON_CHANGE_HOME_MOD"
      "ULE\020B\022\030\n\024ENTER_REASON_GALLERY\020C\022 \n\034ENTER"
      "_REASON_HOME_SCENE_JUMP\020D\022\036\n\032ENTER_REASO"
      "N_HIDE_AND_SEEK\020E\022&\n\"ENTER_REASON_SUMMER"
      "_TIME_MIST_ZONE\020F\022!\n\035ENTER_REASON_FORCE_"
      "QUIT_SCENE\020G\022\034\n\030ENTER_REASON_HERO_COURSE"
      "\020H\022\036\n\032ENTER_REASON_TRANS_CLIMATE\020I\022)\n%EN"
      "TER_REASON_SUMMER_TIME_BOAT_RESTART\020J\022%\n"
      "!ENTER_REASON_TSURUMI_MIST_CLIMATE\020K\022.\n*"
      "ENTER_REASON_TSURUMI_REGIONAL_MIST_CLIMA"
      "TE\020L\022$\n ENTER_REASON_WINTER_CAMP_RESTART"
      "\020M\022#\n\037ENTER_REASON_TALK_EXEC_TRANSFER\020N\022"
      "%\n!ENTER_REASON_SEALAMP_BOAT_RESTART\020O\022\""
      "\n\036ENTER_REASON_SEALAMP_BOAT_BACK\020P\022)\n%EN"
      "TER_REASON_CHALLENGE_INTERRUPT_BACK\020Q\022(\n"
      "$ENTER_REASON_IRODORI_MASTER_TRANSFER\020R\022"
      "\035\n\031ENTER_REASON_GALLERY_BACK\020S\022,\n(ENTER_"
      "REASON_SUMMER_TIME_V2_BOAT_RESTART\020T\0222\n."
      "ENTER_REASON_ISLAND_PARTY_GALLERY_START_"
      "FAILED\020U\022.\n*ENTER_REASON_GRAVEN_INNOCENC"
      "E_RACE_RESTART\020V\022)\n%ENTER_REASON_VINTAGE"
      "_HUNTING_TRANSFER\020W\022(\n$ENTER_REASON_FUNG"
      "US_FIGHTER_TRANSFER\020X\022\036\n\032ENTER_REASON_BR"
      "ICK_BREAKER\020Y\022%\n!ENTER_REASON_BRICK_BREA"
      "KER_SINGLE\020Z\022$\n ENTER_REASON_TRANSFER_GU"
      "ARD_STOP\020[\022$\n ENTER_REASON_COIN_COLLECT_"
      "SINGLE\020\\\022%\n!ENTER_REASON_LAN_V3_BOAT_TRA"
      "NSFER\020]\022$\n ENTER_REASON_LAN_V3_RACE_REST"
      "ART\020^*\214\001\n\025FriendEnterHomeOption\022)\n%FRIEN"
      "D_ENTER_HOME_OPTION_NEED_CONFIRM\020\000\022#\n\037FR"
      "IEND_ENTER_HOME_OPTION_REFUSE\020\001\022#\n\037FRIEN"
      "D_ENTER_HOME_OPTION_DIRECT\020\002*\270\001\n\013ChatCha"
      "nnel\022\020\n\014CHANNEL_TEAM\020\000\022\022\n\016CHANNEL_FRIEND"
      "\020\001\022\020\n\014CHANNEL_NONE\020\002\022\027\n\023CHANNEL_HIDEANDS"
      "EEK\020\003\022\034\n\030CHANNEL_HIDEANDSEEK_TEAM\020\005\022\027\n\023C"
      "HANNEL_LAN_V3_BOAT\020\006\022\017\n\013CHANNEL_ALL\020\n\022\020\n"
      "\014CHANNEL_TEST\020d*\232\001\n\020LeaveWorldReason\022\033\n\027"
      "LEAVE_WORLD_REASON_NONE\020\000\022\035\n\031LEAVE_WORLD"
      "_REASON_LOGOUT\020\001\022$\n LEAVE_WORLD_REASON_B"
      "ACK_MY_WORLD\020\002\022$\n LEAVE_WORLD_REASON_KIC"
      "K_BY_OWNER\020\003*\267\001\n\037DungeonCandidateTeamPla"
      "yerState\022,\n(DUNGEON_CANDIDATE_TEAM_PLAYE"
      "R_STATE_IDLE\020\000\0227\n3DUNGEON_CANDIDATE_TEAM"
      "_PLAYER_STATE_CHANGING_AVATAR\020\001\022-\n)DUNGE"
      "ON_CANDIDATE_TEAM_PLAYER_STATE_READY\020\002*w"
      "\n\022CreateGadgetReason\022\026\n\022CREATE_GADGET_NO"
      "NE\020\000\022\030\n\024CREATE_GADGET_PLAYER\020\001\022\031\n\025CREATE"
      "_GADGET_MISSION\020\002\022\024\n\020CREATE_GADGET_GM\020\003*"
      "\201\001\n\026LunaRiteHintStatusType\022!\n\035LUNA_RITE_"
      "HINT_STATUS_DEFAULT\020\000\022\"\n\036LUNA_RITE_HINT_"
      "STATUS_NO_COUNT\020\001\022 \n\034LUNA_RITE_HINT_STAT"
      "US_FINISH\020\002*r\n\025LunaRiteHintPointType\022\034\n\030"
      "LUNA_RITE_HINT_TYPE_NONE\020\000\022\034\n\030LUNA_RITE_"
      "HINT_TYPE_RUNE\020\001\022\035\n\031LUNA_RITE_HINT_TYPE_"
      "CHEST\020\002*L\n\021GroupVariableType\022\030\n\024VARIABLE"
      "_TYPE_NORMAL\020\000\022\035\n\031VARIABLE_TYPE_LOGIC_ST"
      "ATE\020\001*\200\001\n\017ClientInputType\022\025\n\021CLIENT_INPU"
      "T_NONE\020\000\022\036\n\032CLIENT_INPUT_KEYBORD_MOUSE\020\001"
      "\022\030\n\024CLIENT_INPUT_GAMEPAD\020\002\022\034\n\030CLIENT_INP"
      "UT_TOUCH_PANEL\020\003*\202\001\n\022CustomDungeonEvent\022"
      "\035\n\031CUSTOM_DUNGEON_EVENT_NONE\020\000\022)\n%CUSTOM"
      "_DUNGEON_EVENT_OFFICIAL_RESTART\020\001\022\"\n\036CUS"
      "TOM_DUNGEON_EVENT_OUT_STUCK\020\002*d\n\020Platfor"
      "mCategory\022\032\n\026PLATFORM_CATEGORY_NONE\020\000\022\031\n"
      "\025PLATFORM_CATEGORY_PCM\020\001\022\031\n\025PLATFORM_CAT"
      "EGORY_PSN\020\002*\273\001\n\021SceneidConstValue\022\026\n\022SCE"
      "NEID_CONST_NONE\020\000\022\026\n\022SCENEID_CONST_MAIN\020"
      "\003\022\030\n\024SCENEID_CONST_ISLAND\020\004\022\034\n\030SCENEID_C"
      "ONST_ENKANOMIYA\020\005\022!\n\035SCENEID_CONST_MICHI"
      "AE_MATSURI\020\007\022\033\n\027SCENEID_CONST_28_ISLAND\020"
      "\t*\211\001\n\020CityidConstValue\022\025\n\021CITYID_CONST_N"
      "ONE\020\000\022\027\n\023CITYID_CONST_MENGDE\020\001\022\026\n\022CITYID"
      "_CONST_LIYUE\020\002\022\026\n\022CITYID_CONST_DAOQI\020\003\022\025"
      "\n\021CITYID_CONST_XUMI\020\004*\264\001\n\026AranaraCollect"
      "ionState\022!\n\035ARANARA_COLLECTION_STATE_NON"
      "E\020\000\022(\n$ARANARA_COLLECTION_STATE_COLLECTA"
      "BLE\020\001\022&\n\"ARANARA_COLLECTION_STATE_COLLEC"
      "TED\020\002\022%\n!ARANARA_COLLECTION_STATE_FINISH"
      "ED\020\003*A\n\nAuditState\022\016\n\nAUDIT_NONE\020\000\022\021\n\rAU"
      "DIT_WAITING\020\001\022\020\n\014AUDIT_FAILED\020\002*\215\001\n\033Avat"
      "arRenameAuditSourceType\022#\n\037AVATAR_RENAME"
      "_AUDIT_SOURCE_NONE\020\000\022#\n\037AVATAR_RENAME_AU"
      "DIT_SOURCE_ITEM\020\001\022$\n AVATAR_RENAME_AUDIT"
      "_SOURCE_QUEST\020\002*\277\001\n\027ResetAvatarRenameRea"
      "son\022#\n\037RESET_AVATAR_RENAME_REASON_NONE\020\000"
      "\022,\n(RESET_AVATAR_RENAME_REASON_IP_BLACK_"
      "LIST\020\001\022*\n&RESET_AVATAR_RENAME_REASON_QUE"
      "ST_AUDIT\020\002\022%\n!RESET_AVATAR_RENAME_REASON"
      "_ACTIVE\020\003B(Z&github.com/teyvat-helper/hk"
      "4e-proto/pbb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 59819);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "define.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_define_2eproto

const ::google::protobuf::EnumDescriptor* BreakoutAction_BreakoutActionType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[0];
}
bool BreakoutAction_BreakoutActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BreakoutAction_BreakoutActionType BreakoutAction::ACTION_TYPE_NONE;
const BreakoutAction_BreakoutActionType BreakoutAction::ACTION_TYPE_LAUNCH_BALL;
const BreakoutAction_BreakoutActionType BreakoutAction::ACTION_TYPE_DESTROY_BALL;
const BreakoutAction_BreakoutActionType BreakoutAction::ACTION_TYPE_FALLING_OBJECT;
const BreakoutAction_BreakoutActionType BreakoutAction::ACTION_TYPE_MISSILE;
const BreakoutAction_BreakoutActionType BreakoutAction::BreakoutActionType_MIN;
const BreakoutAction_BreakoutActionType BreakoutAction::BreakoutActionType_MAX;
const int BreakoutAction::BreakoutActionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrialAvatarGrantRecord_GrantReason_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[1];
}
bool TrialAvatarGrantRecord_GrantReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrialAvatarGrantRecord_GrantReason TrialAvatarGrantRecord::INVALID;
const TrialAvatarGrantRecord_GrantReason TrialAvatarGrantRecord::GRANT_BY_QUEST;
const TrialAvatarGrantRecord_GrantReason TrialAvatarGrantRecord::GRANT_BY_TRIAL_AVATAR_ACTIVITY;
const TrialAvatarGrantRecord_GrantReason TrialAvatarGrantRecord::GRANT_BY_DUNGEON_ELEMENT_CHALLENGE;
const TrialAvatarGrantRecord_GrantReason TrialAvatarGrantRecord::GRANT_BY_MIST_TRIAL_ACTIVITY;
const TrialAvatarGrantRecord_GrantReason TrialAvatarGrantRecord::GRANT_BY_SUMO_ACTIVITY;
const TrialAvatarGrantRecord_GrantReason TrialAvatarGrantRecord::GRANT_BY_POTION_ACTIVITY;
const TrialAvatarGrantRecord_GrantReason TrialAvatarGrantRecord::GRANT_BY_CRYSTAL_LINK_ACTIVITY;
const TrialAvatarGrantRecord_GrantReason TrialAvatarGrantRecord::GRANT_BY_IRODORI_MASTER;
const TrialAvatarGrantRecord_GrantReason TrialAvatarGrantRecord::GRANT_BY_GM;
const TrialAvatarGrantRecord_GrantReason TrialAvatarGrantRecord::GRANT_BY_INSTABLE_SPRAY_ACTIVITY;
const TrialAvatarGrantRecord_GrantReason TrialAvatarGrantRecord::GRANT_BY_MUQADAS_POTION_ACTIVITY;
const TrialAvatarGrantRecord_GrantReason TrialAvatarGrantRecord::GRANT_BY_VINTAGE_HUNTING;
const TrialAvatarGrantRecord_GrantReason TrialAvatarGrantRecord::GRANT_BY_CHAR_AMUSEMENT;
const TrialAvatarGrantRecord_GrantReason TrialAvatarGrantRecord::GRANT_BY_DUEL_HEART;
const TrialAvatarGrantRecord_GrantReason TrialAvatarGrantRecord::GrantReason_MIN;
const TrialAvatarGrantRecord_GrantReason TrialAvatarGrantRecord::GrantReason_MAX;
const int TrialAvatarGrantRecord::GrantReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ENetReason_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[2];
}
bool ENetReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 987654321:
    case 1234567890:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AccountType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[3];
}
bool AccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChannelIdType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[4];
}
bool ChannelIdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 22:
    case 23:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServiceType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[5];
}
bool ServiceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ClientType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[6];
}
bool ClientType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RegionType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[7];
}
bool RegionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActionReasonType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[8];
}
bool ActionReasonType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 1001:
    case 1002:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1021:
    case 1022:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1036:
    case 1037:
    case 1038:
    case 1039:
    case 1040:
    case 1041:
    case 1042:
    case 1043:
    case 1044:
    case 1045:
    case 1046:
    case 1047:
    case 1048:
    case 1049:
    case 1050:
    case 1051:
    case 1052:
    case 1053:
    case 1054:
    case 1055:
    case 1056:
    case 1057:
    case 1058:
    case 1059:
    case 1060:
    case 1061:
    case 1062:
    case 1063:
    case 1064:
    case 1065:
    case 1066:
    case 1067:
    case 1068:
    case 1069:
    case 1070:
    case 1071:
    case 1072:
    case 1073:
    case 1074:
    case 1075:
    case 1076:
    case 1077:
    case 1078:
    case 1079:
    case 1080:
    case 1081:
    case 1082:
    case 1083:
    case 1084:
    case 1085:
    case 1086:
    case 1087:
    case 1088:
    case 1089:
    case 1090:
    case 1091:
    case 1092:
    case 1093:
    case 1094:
    case 1095:
    case 1096:
    case 1097:
    case 1098:
    case 1099:
    case 1100:
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1106:
    case 1107:
    case 1108:
    case 1109:
    case 1110:
    case 1111:
    case 1112:
    case 1113:
    case 1114:
    case 1115:
    case 1116:
    case 1117:
    case 1118:
    case 1119:
    case 1120:
    case 1121:
    case 1122:
    case 1123:
    case 1124:
    case 1125:
    case 1126:
    case 1127:
    case 1128:
    case 1129:
    case 1130:
    case 1131:
    case 1132:
    case 1133:
    case 1134:
    case 1135:
    case 1136:
    case 1137:
    case 1138:
    case 1139:
    case 1140:
    case 1141:
    case 1143:
    case 1144:
    case 1145:
    case 1146:
    case 1147:
    case 1148:
    case 1149:
    case 1150:
    case 1151:
    case 1152:
    case 1153:
    case 1154:
    case 1155:
    case 1156:
    case 1157:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StoreType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[9];
}
bool StoreType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VirtualItem_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[10];
}
bool VirtualItem_IsValid(int value) {
  switch (value) {
    case 0:
    case 101:
    case 102:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 314:
    case 315:
    case 316:
    case 317:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReliquaryFilterKey_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[11];
}
bool ReliquaryFilterKey_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReliquaryFilterLockState_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[12];
}
bool ReliquaryFilterLockState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReliquaryFilterLevelState_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[13];
}
bool ReliquaryFilterLevelState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReliquaryFilterWearedState_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[14];
}
bool ReliquaryFilterWearedState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AbilityScalarType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[15];
}
bool AbilityScalarType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MotionState_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[16];
}
bool MotionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ProtEntityType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[17];
}
bool ProtEntityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NpcTalkState_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[18];
}
bool NpcTalkState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VehicleSlot_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[19];
}
bool VehicleSlot_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MonsterBornType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[20];
}
bool MonsterBornType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GadgetBornType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[21];
}
bool GadgetBornType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MovingPlatformType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[22];
}
bool MovingPlatformType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GadgetPlayType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[23];
}
bool GadgetPlayType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FoundationStatus_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[24];
}
bool FoundationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChangHpReason_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[25];
}
bool ChangHpReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 51:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerDieType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[26];
}
bool PlayerDieType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerDieOption_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[27];
}
bool PlayerDieOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FetterState_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[28];
}
bool FetterState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AvatarExpeditionState_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[29];
}
bool AvatarExpeditionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AvatarType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[30];
}
bool AvatarType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EventTriggerType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[31];
}
bool EventTriggerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MailCollectState_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[32];
}
bool MailCollectState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MpSettingType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[33];
}
bool MpSettingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MathExpressionType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[34];
}
bool MathExpressionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LoginRewardConfigType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[35];
}
bool LoginRewardConfigType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LanguageType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[36];
}
bool LanguageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlatformType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[37];
}
bool PlatformType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MapMarkPointType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[38];
}
bool MapMarkPointType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MapMarkFromType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[39];
}
bool MapMarkFromType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamInviteState_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[40];
}
bool DungeonCandidateTeamInviteState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MonsterGuestBanDrop_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[41];
}
bool MonsterGuestBanDrop_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GadgetGuestBanDrop_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[42];
}
bool GadgetGuestBanDrop_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GroupLoadStrategy_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[43];
}
bool GroupLoadStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MatchType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[44];
}
bool MatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MpPlayType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[45];
}
bool MpPlayType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpActivityType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[46];
}
bool OpActivityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MatchReason_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[47];
}
bool MatchReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LuaShellNotifyType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[48];
}
bool LuaShellNotifyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LuaShellType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[49];
}
bool LuaShellType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SalesmanStatusType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[50];
}
bool SalesmanStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SecurityCheckType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[51];
}
bool SecurityCheckType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CodexType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[52];
}
bool CodexType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SegmentCRCModuleType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[53];
}
bool SegmentCRCModuleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 11:
    case 12:
    case 13:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ExchangeMcoinType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[54];
}
bool ExchangeMcoinType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ExploreType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[55];
}
bool ExploreType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AsterLittleStageState_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[56];
}
bool AsterLittleStageState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HuntingOfferState_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[57];
}
bool HuntingOfferState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RegionSearchState_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[58];
}
bool RegionSearchState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerTag_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[59];
}
bool PlayerTag_IsValid(int value) {
  switch (value) {
    case 0:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FeatureBlockType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[60];
}
bool FeatureBlockType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReportReasonType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[61];
}
bool ReportReasonType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MapMarkTipsType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[62];
}
bool MapMarkTipsType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ExpeditionState_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[63];
}
bool ExpeditionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnterReason_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[64];
}
bool EnterReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 11:
    case 12:
    case 13:
    case 14:
    case 21:
    case 31:
    case 32:
    case 41:
    case 42:
    case 43:
    case 44:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FriendEnterHomeOption_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[65];
}
bool FriendEnterHomeOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChatChannel_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[66];
}
bool ChatChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 10:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LeaveWorldReason_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[67];
}
bool LeaveWorldReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamPlayerState_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[68];
}
bool DungeonCandidateTeamPlayerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CreateGadgetReason_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[69];
}
bool CreateGadgetReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LunaRiteHintStatusType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[70];
}
bool LunaRiteHintStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LunaRiteHintPointType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[71];
}
bool LunaRiteHintPointType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GroupVariableType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[72];
}
bool GroupVariableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ClientInputType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[73];
}
bool ClientInputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CustomDungeonEvent_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[74];
}
bool CustomDungeonEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlatformCategory_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[75];
}
bool PlatformCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SceneidConstValue_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[76];
}
bool SceneidConstValue_IsValid(int value) {
  switch (value) {
    case 0:
    case 3:
    case 4:
    case 5:
    case 7:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CityidConstValue_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[77];
}
bool CityidConstValue_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AranaraCollectionState_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[78];
}
bool AranaraCollectionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AuditState_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[79];
}
bool AuditState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AvatarRenameAuditSourceType_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[80];
}
bool AvatarRenameAuditSourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResetAvatarRenameReason_descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_enum_descriptors[81];
}
bool ResetAvatarRenameReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParamList::kParamListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParamList::ParamList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ParamList)
}
ParamList::ParamList(const ParamList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      param_list_(from.param_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.ParamList)
}

void ParamList::SharedCtor() {
  _cached_size_ = 0;
}

ParamList::~ParamList() {
  // @@protoc_insertion_point(destructor:proto.ParamList)
  SharedDtor();
}

void ParamList::SharedDtor() {
}

void ParamList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParamList::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParamList& ParamList::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ParamList* ParamList::New(::google::protobuf::Arena* arena) const {
  ParamList* n = new ParamList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParamList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ParamList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_list_.Clear();
  _internal_metadata_.Clear();
}

bool ParamList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ParamList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 param_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_param_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_param_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ParamList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ParamList)
  return false;
#undef DO_
}

void ParamList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ParamList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 param_list = 1;
  if (this->param_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _param_list_cached_byte_size_));
  }
  for (int i = 0, n = this->param_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->param_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ParamList)
}

::google::protobuf::uint8* ParamList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ParamList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 param_list = 1;
  if (this->param_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _param_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->param_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ParamList)
  return target;
}

size_t ParamList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ParamList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 param_list = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->param_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _param_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParamList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ParamList)
  GOOGLE_DCHECK_NE(&from, this);
  const ParamList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParamList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ParamList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ParamList)
    MergeFrom(*source);
  }
}

void ParamList::MergeFrom(const ParamList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ParamList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  param_list_.MergeFrom(from.param_list_);
}

void ParamList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ParamList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamList::CopyFrom(const ParamList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ParamList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamList::IsInitialized() const {
  return true;
}

void ParamList::Swap(ParamList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParamList::InternalSwap(ParamList* other) {
  using std::swap;
  param_list_.InternalSwap(&other->param_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParamList::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParamList

// repeated uint32 param_list = 1;
int ParamList::param_list_size() const {
  return param_list_.size();
}
void ParamList::clear_param_list() {
  param_list_.Clear();
}
::google::protobuf::uint32 ParamList::param_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ParamList.param_list)
  return param_list_.Get(index);
}
void ParamList::set_param_list(int index, ::google::protobuf::uint32 value) {
  param_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ParamList.param_list)
}
void ParamList::add_param_list(::google::protobuf::uint32 value) {
  param_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ParamList.param_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ParamList::param_list() const {
  // @@protoc_insertion_point(field_list:proto.ParamList.param_list)
  return param_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ParamList::mutable_param_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ParamList.param_list)
  return &param_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropValue::kTypeFieldNumber;
const int PropValue::kValFieldNumber;
const int PropValue::kIvalFieldNumber;
const int PropValue::kFvalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropValue::PropValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PropValue)
}
PropValue::PropValue(const PropValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&val_) -
    reinterpret_cast<char*>(&type_)) + sizeof(val_));
  clear_has_value();
  switch (from.value_case()) {
    case kIval: {
      set_ival(from.ival());
      break;
    }
    case kFval: {
      set_fval(from.fval());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.PropValue)
}

void PropValue::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&type_)) + sizeof(val_));
  clear_has_value();
  _cached_size_ = 0;
}

PropValue::~PropValue() {
  // @@protoc_insertion_point(destructor:proto.PropValue)
  SharedDtor();
}

void PropValue::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void PropValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropValue::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PropValue& PropValue::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

PropValue* PropValue::New(::google::protobuf::Arena* arena) const {
  PropValue* n = new PropValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:proto.PropValue)
  switch (value_case()) {
    case kIval: {
      // No need to clear
      break;
    }
    case kFval: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void PropValue::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PropValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&type_)) + sizeof(val_));
  clear_value();
  _internal_metadata_.Clear();
}

bool PropValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PropValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ival = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_.ival_)));
          set_has_ival();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fval = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_.fval_)));
          set_has_fval();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 val = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PropValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PropValue)
  return false;
#undef DO_
}

void PropValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PropValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // int64 ival = 2;
  if (has_ival()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ival(), output);
  }

  // float fval = 3;
  if (has_fval()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fval(), output);
  }

  // int64 val = 4;
  if (this->val() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->val(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PropValue)
}

::google::protobuf::uint8* PropValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PropValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // int64 ival = 2;
  if (has_ival()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ival(), target);
  }

  // float fval = 3;
  if (has_fval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->fval(), target);
  }

  // int64 val = 4;
  if (this->val() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->val(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PropValue)
  return target;
}

size_t PropValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PropValue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // int64 val = 4;
  if (this->val() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->val());
  }

  switch (value_case()) {
    // int64 ival = 2;
    case kIval: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ival());
      break;
    }
    // float fval = 3;
    case kFval: {
      total_size += 1 + 4;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PropValue)
  GOOGLE_DCHECK_NE(&from, this);
  const PropValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PropValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PropValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PropValue)
    MergeFrom(*source);
  }
}

void PropValue::MergeFrom(const PropValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PropValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.val() != 0) {
    set_val(from.val());
  }
  switch (from.value_case()) {
    case kIval: {
      set_ival(from.ival());
      break;
    }
    case kFval: {
      set_fval(from.fval());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void PropValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PropValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropValue::CopyFrom(const PropValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PropValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropValue::IsInitialized() const {
  return true;
}

void PropValue::Swap(PropValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropValue::InternalSwap(PropValue* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(val_, other->val_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PropValue::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PropValue

// uint32 type = 1;
void PropValue::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 PropValue::type() const {
  // @@protoc_insertion_point(field_get:proto.PropValue.type)
  return type_;
}
void PropValue::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.PropValue.type)
}

// int64 val = 4;
void PropValue::clear_val() {
  val_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 PropValue::val() const {
  // @@protoc_insertion_point(field_get:proto.PropValue.val)
  return val_;
}
void PropValue::set_val(::google::protobuf::int64 value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:proto.PropValue.val)
}

// int64 ival = 2;
bool PropValue::has_ival() const {
  return value_case() == kIval;
}
void PropValue::set_has_ival() {
  _oneof_case_[0] = kIval;
}
void PropValue::clear_ival() {
  if (has_ival()) {
    value_.ival_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
::google::protobuf::int64 PropValue::ival() const {
  // @@protoc_insertion_point(field_get:proto.PropValue.ival)
  if (has_ival()) {
    return value_.ival_;
  }
  return GOOGLE_LONGLONG(0);
}
void PropValue::set_ival(::google::protobuf::int64 value) {
  if (!has_ival()) {
    clear_value();
    set_has_ival();
  }
  value_.ival_ = value;
  // @@protoc_insertion_point(field_set:proto.PropValue.ival)
}

// float fval = 3;
bool PropValue::has_fval() const {
  return value_case() == kFval;
}
void PropValue::set_has_fval() {
  _oneof_case_[0] = kFval;
}
void PropValue::clear_fval() {
  if (has_fval()) {
    value_.fval_ = 0;
    clear_has_value();
  }
}
float PropValue::fval() const {
  // @@protoc_insertion_point(field_get:proto.PropValue.fval)
  if (has_fval()) {
    return value_.fval_;
  }
  return 0;
}
void PropValue::set_fval(float value) {
  if (!has_fval()) {
    clear_value();
    set_has_fval();
  }
  value_.fval_ = value;
  // @@protoc_insertion_point(field_set:proto.PropValue.fval)
}

bool PropValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void PropValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
PropValue::ValueCase PropValue::value_case() const {
  return PropValue::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Uint32Pair::kKeyFieldNumber;
const int Uint32Pair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Uint32Pair::Uint32Pair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Uint32Pair)
}
Uint32Pair::Uint32Pair(const Uint32Pair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:proto.Uint32Pair)
}

void Uint32Pair::SharedCtor() {
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
  _cached_size_ = 0;
}

Uint32Pair::~Uint32Pair() {
  // @@protoc_insertion_point(destructor:proto.Uint32Pair)
  SharedDtor();
}

void Uint32Pair::SharedDtor() {
}

void Uint32Pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Uint32Pair::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Uint32Pair& Uint32Pair::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

Uint32Pair* Uint32Pair::New(::google::protobuf::Arena* arena) const {
  Uint32Pair* n = new Uint32Pair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Uint32Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Uint32Pair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

bool Uint32Pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Uint32Pair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Uint32Pair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Uint32Pair)
  return false;
#undef DO_
}

void Uint32Pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Uint32Pair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 key = 1;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // uint32 value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Uint32Pair)
}

::google::protobuf::uint8* Uint32Pair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Uint32Pair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 key = 1;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // uint32 value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Uint32Pair)
  return target;
}

size_t Uint32Pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Uint32Pair)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->key());
  }

  // uint32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Uint32Pair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Uint32Pair)
  GOOGLE_DCHECK_NE(&from, this);
  const Uint32Pair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Uint32Pair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Uint32Pair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Uint32Pair)
    MergeFrom(*source);
  }
}

void Uint32Pair::MergeFrom(const Uint32Pair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Uint32Pair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Uint32Pair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Uint32Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uint32Pair::CopyFrom(const Uint32Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Uint32Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uint32Pair::IsInitialized() const {
  return true;
}

void Uint32Pair::Swap(Uint32Pair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Uint32Pair::InternalSwap(Uint32Pair* other) {
  using std::swap;
  swap(key_, other->key_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Uint32Pair::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Uint32Pair

// uint32 key = 1;
void Uint32Pair::clear_key() {
  key_ = 0u;
}
::google::protobuf::uint32 Uint32Pair::key() const {
  // @@protoc_insertion_point(field_get:proto.Uint32Pair.key)
  return key_;
}
void Uint32Pair::set_key(::google::protobuf::uint32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:proto.Uint32Pair.key)
}

// uint32 value = 2;
void Uint32Pair::clear_value() {
  value_ = 0u;
}
::google::protobuf::uint32 Uint32Pair::value() const {
  // @@protoc_insertion_point(field_get:proto.Uint32Pair.value)
  return value_;
}
void Uint32Pair::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:proto.Uint32Pair.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionSimpleInfo::kNameFieldNumber;
const int RegionSimpleInfo::kTitleFieldNumber;
const int RegionSimpleInfo::kTypeFieldNumber;
const int RegionSimpleInfo::kDispatchUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionSimpleInfo::RegionSimpleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RegionSimpleInfo)
}
RegionSimpleInfo::RegionSimpleInfo(const RegionSimpleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  dispatch_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dispatch_url().size() > 0) {
    dispatch_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dispatch_url_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.RegionSimpleInfo)
}

void RegionSimpleInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dispatch_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RegionSimpleInfo::~RegionSimpleInfo() {
  // @@protoc_insertion_point(destructor:proto.RegionSimpleInfo)
  SharedDtor();
}

void RegionSimpleInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dispatch_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RegionSimpleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionSimpleInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegionSimpleInfo& RegionSimpleInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegionSimpleInfo* RegionSimpleInfo::New(::google::protobuf::Arena* arena) const {
  RegionSimpleInfo* n = new RegionSimpleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionSimpleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RegionSimpleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dispatch_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RegionSimpleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.RegionSimpleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionSimpleInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionSimpleInfo.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionSimpleInfo.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dispatch_url = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dispatch_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dispatch_url().data(), static_cast<int>(this->dispatch_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionSimpleInfo.dispatch_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.RegionSimpleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.RegionSimpleInfo)
  return false;
#undef DO_
}

void RegionSimpleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.RegionSimpleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionSimpleInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionSimpleInfo.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionSimpleInfo.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // string dispatch_url = 4;
  if (this->dispatch_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dispatch_url().data(), static_cast<int>(this->dispatch_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionSimpleInfo.dispatch_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->dispatch_url(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.RegionSimpleInfo)
}

::google::protobuf::uint8* RegionSimpleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.RegionSimpleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionSimpleInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionSimpleInfo.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionSimpleInfo.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // string dispatch_url = 4;
  if (this->dispatch_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dispatch_url().data(), static_cast<int>(this->dispatch_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionSimpleInfo.dispatch_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dispatch_url(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RegionSimpleInfo)
  return target;
}

size_t RegionSimpleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RegionSimpleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string type = 3;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string dispatch_url = 4;
  if (this->dispatch_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dispatch_url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionSimpleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.RegionSimpleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionSimpleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionSimpleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.RegionSimpleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.RegionSimpleInfo)
    MergeFrom(*source);
  }
}

void RegionSimpleInfo::MergeFrom(const RegionSimpleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RegionSimpleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.dispatch_url().size() > 0) {

    dispatch_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dispatch_url_);
  }
}

void RegionSimpleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.RegionSimpleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionSimpleInfo::CopyFrom(const RegionSimpleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RegionSimpleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionSimpleInfo::IsInitialized() const {
  return true;
}

void RegionSimpleInfo::Swap(RegionSimpleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionSimpleInfo::InternalSwap(RegionSimpleInfo* other) {
  using std::swap;
  name_.Swap(&other->name_);
  title_.Swap(&other->title_);
  type_.Swap(&other->type_);
  dispatch_url_.Swap(&other->dispatch_url_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionSimpleInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionSimpleInfo

// string name = 1;
void RegionSimpleInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionSimpleInfo::name() const {
  // @@protoc_insertion_point(field_get:proto.RegionSimpleInfo.name)
  return name_.GetNoArena();
}
void RegionSimpleInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionSimpleInfo.name)
}
#if LANG_CXX11
void RegionSimpleInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionSimpleInfo.name)
}
#endif
void RegionSimpleInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionSimpleInfo.name)
}
void RegionSimpleInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionSimpleInfo.name)
}
::std::string* RegionSimpleInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionSimpleInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionSimpleInfo::release_name() {
  // @@protoc_insertion_point(field_release:proto.RegionSimpleInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionSimpleInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionSimpleInfo.name)
}

// string title = 2;
void RegionSimpleInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionSimpleInfo::title() const {
  // @@protoc_insertion_point(field_get:proto.RegionSimpleInfo.title)
  return title_.GetNoArena();
}
void RegionSimpleInfo::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionSimpleInfo.title)
}
#if LANG_CXX11
void RegionSimpleInfo::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionSimpleInfo.title)
}
#endif
void RegionSimpleInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionSimpleInfo.title)
}
void RegionSimpleInfo::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionSimpleInfo.title)
}
::std::string* RegionSimpleInfo::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionSimpleInfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionSimpleInfo::release_title() {
  // @@protoc_insertion_point(field_release:proto.RegionSimpleInfo.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionSimpleInfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionSimpleInfo.title)
}

// string type = 3;
void RegionSimpleInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionSimpleInfo::type() const {
  // @@protoc_insertion_point(field_get:proto.RegionSimpleInfo.type)
  return type_.GetNoArena();
}
void RegionSimpleInfo::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionSimpleInfo.type)
}
#if LANG_CXX11
void RegionSimpleInfo::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionSimpleInfo.type)
}
#endif
void RegionSimpleInfo::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionSimpleInfo.type)
}
void RegionSimpleInfo::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionSimpleInfo.type)
}
::std::string* RegionSimpleInfo::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionSimpleInfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionSimpleInfo::release_type() {
  // @@protoc_insertion_point(field_release:proto.RegionSimpleInfo.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionSimpleInfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionSimpleInfo.type)
}

// string dispatch_url = 4;
void RegionSimpleInfo::clear_dispatch_url() {
  dispatch_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionSimpleInfo::dispatch_url() const {
  // @@protoc_insertion_point(field_get:proto.RegionSimpleInfo.dispatch_url)
  return dispatch_url_.GetNoArena();
}
void RegionSimpleInfo::set_dispatch_url(const ::std::string& value) {
  
  dispatch_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionSimpleInfo.dispatch_url)
}
#if LANG_CXX11
void RegionSimpleInfo::set_dispatch_url(::std::string&& value) {
  
  dispatch_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionSimpleInfo.dispatch_url)
}
#endif
void RegionSimpleInfo::set_dispatch_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dispatch_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionSimpleInfo.dispatch_url)
}
void RegionSimpleInfo::set_dispatch_url(const char* value, size_t size) {
  
  dispatch_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionSimpleInfo.dispatch_url)
}
::std::string* RegionSimpleInfo::mutable_dispatch_url() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionSimpleInfo.dispatch_url)
  return dispatch_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionSimpleInfo::release_dispatch_url() {
  // @@protoc_insertion_point(field_release:proto.RegionSimpleInfo.dispatch_url)
  
  return dispatch_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionSimpleInfo::set_allocated_dispatch_url(::std::string* dispatch_url) {
  if (dispatch_url != NULL) {
    
  } else {
    
  }
  dispatch_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dispatch_url);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionSimpleInfo.dispatch_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryRegionListHttpRsp::kRetcodeFieldNumber;
const int QueryRegionListHttpRsp::kRegionListFieldNumber;
const int QueryRegionListHttpRsp::kClientSecretKeyFieldNumber;
const int QueryRegionListHttpRsp::kClientCustomConfigEncryptedFieldNumber;
const int QueryRegionListHttpRsp::kEnableLoginPcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryRegionListHttpRsp::QueryRegionListHttpRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.QueryRegionListHttpRsp)
}
QueryRegionListHttpRsp::QueryRegionListHttpRsp(const QueryRegionListHttpRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      region_list_(from.region_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_secret_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_secret_key().size() > 0) {
    client_secret_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_secret_key_);
  }
  client_custom_config_encrypted_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_custom_config_encrypted().size() > 0) {
    client_custom_config_encrypted_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_custom_config_encrypted_);
  }
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_login_pc_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(enable_login_pc_));
  // @@protoc_insertion_point(copy_constructor:proto.QueryRegionListHttpRsp)
}

void QueryRegionListHttpRsp::SharedCtor() {
  client_secret_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_custom_config_encrypted_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_login_pc_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(enable_login_pc_));
  _cached_size_ = 0;
}

QueryRegionListHttpRsp::~QueryRegionListHttpRsp() {
  // @@protoc_insertion_point(destructor:proto.QueryRegionListHttpRsp)
  SharedDtor();
}

void QueryRegionListHttpRsp::SharedDtor() {
  client_secret_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_custom_config_encrypted_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryRegionListHttpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryRegionListHttpRsp::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryRegionListHttpRsp& QueryRegionListHttpRsp::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryRegionListHttpRsp* QueryRegionListHttpRsp::New(::google::protobuf::Arena* arena) const {
  QueryRegionListHttpRsp* n = new QueryRegionListHttpRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryRegionListHttpRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.QueryRegionListHttpRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_list_.Clear();
  client_secret_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_custom_config_encrypted_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_login_pc_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(enable_login_pc_));
  _internal_metadata_.Clear();
}

bool QueryRegionListHttpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.QueryRegionListHttpRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.RegionSimpleInfo region_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_region_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes client_secret_key = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_secret_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes client_custom_config_encrypted = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_custom_config_encrypted()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_login_pc = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_login_pc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.QueryRegionListHttpRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.QueryRegionListHttpRsp)
  return false;
#undef DO_
}

void QueryRegionListHttpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.QueryRegionListHttpRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // repeated .proto.RegionSimpleInfo region_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->region_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->region_list(static_cast<int>(i)), output);
  }

  // bytes client_secret_key = 5;
  if (this->client_secret_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->client_secret_key(), output);
  }

  // bytes client_custom_config_encrypted = 6;
  if (this->client_custom_config_encrypted().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->client_custom_config_encrypted(), output);
  }

  // bool enable_login_pc = 7;
  if (this->enable_login_pc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->enable_login_pc(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.QueryRegionListHttpRsp)
}

::google::protobuf::uint8* QueryRegionListHttpRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.QueryRegionListHttpRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // repeated .proto.RegionSimpleInfo region_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->region_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->region_list(static_cast<int>(i)), deterministic, target);
  }

  // bytes client_secret_key = 5;
  if (this->client_secret_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->client_secret_key(), target);
  }

  // bytes client_custom_config_encrypted = 6;
  if (this->client_custom_config_encrypted().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->client_custom_config_encrypted(), target);
  }

  // bool enable_login_pc = 7;
  if (this->enable_login_pc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->enable_login_pc(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.QueryRegionListHttpRsp)
  return target;
}

size_t QueryRegionListHttpRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.QueryRegionListHttpRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.RegionSimpleInfo region_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->region_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_list(static_cast<int>(i)));
    }
  }

  // bytes client_secret_key = 5;
  if (this->client_secret_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->client_secret_key());
  }

  // bytes client_custom_config_encrypted = 6;
  if (this->client_custom_config_encrypted().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->client_custom_config_encrypted());
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // bool enable_login_pc = 7;
  if (this->enable_login_pc() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryRegionListHttpRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.QueryRegionListHttpRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryRegionListHttpRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryRegionListHttpRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.QueryRegionListHttpRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.QueryRegionListHttpRsp)
    MergeFrom(*source);
  }
}

void QueryRegionListHttpRsp::MergeFrom(const QueryRegionListHttpRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.QueryRegionListHttpRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  region_list_.MergeFrom(from.region_list_);
  if (from.client_secret_key().size() > 0) {

    client_secret_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_secret_key_);
  }
  if (from.client_custom_config_encrypted().size() > 0) {

    client_custom_config_encrypted_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_custom_config_encrypted_);
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.enable_login_pc() != 0) {
    set_enable_login_pc(from.enable_login_pc());
  }
}

void QueryRegionListHttpRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.QueryRegionListHttpRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRegionListHttpRsp::CopyFrom(const QueryRegionListHttpRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.QueryRegionListHttpRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRegionListHttpRsp::IsInitialized() const {
  return true;
}

void QueryRegionListHttpRsp::Swap(QueryRegionListHttpRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryRegionListHttpRsp::InternalSwap(QueryRegionListHttpRsp* other) {
  using std::swap;
  region_list_.InternalSwap(&other->region_list_);
  client_secret_key_.Swap(&other->client_secret_key_);
  client_custom_config_encrypted_.Swap(&other->client_custom_config_encrypted_);
  swap(retcode_, other->retcode_);
  swap(enable_login_pc_, other->enable_login_pc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryRegionListHttpRsp::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryRegionListHttpRsp

// int32 retcode = 1;
void QueryRegionListHttpRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 QueryRegionListHttpRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.QueryRegionListHttpRsp.retcode)
  return retcode_;
}
void QueryRegionListHttpRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.QueryRegionListHttpRsp.retcode)
}

// repeated .proto.RegionSimpleInfo region_list = 2;
int QueryRegionListHttpRsp::region_list_size() const {
  return region_list_.size();
}
void QueryRegionListHttpRsp::clear_region_list() {
  region_list_.Clear();
}
const ::proto::RegionSimpleInfo& QueryRegionListHttpRsp::region_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.QueryRegionListHttpRsp.region_list)
  return region_list_.Get(index);
}
::proto::RegionSimpleInfo* QueryRegionListHttpRsp::mutable_region_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.QueryRegionListHttpRsp.region_list)
  return region_list_.Mutable(index);
}
::proto::RegionSimpleInfo* QueryRegionListHttpRsp::add_region_list() {
  // @@protoc_insertion_point(field_add:proto.QueryRegionListHttpRsp.region_list)
  return region_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::RegionSimpleInfo >*
QueryRegionListHttpRsp::mutable_region_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.QueryRegionListHttpRsp.region_list)
  return &region_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::RegionSimpleInfo >&
QueryRegionListHttpRsp::region_list() const {
  // @@protoc_insertion_point(field_list:proto.QueryRegionListHttpRsp.region_list)
  return region_list_;
}

// bytes client_secret_key = 5;
void QueryRegionListHttpRsp::clear_client_secret_key() {
  client_secret_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryRegionListHttpRsp::client_secret_key() const {
  // @@protoc_insertion_point(field_get:proto.QueryRegionListHttpRsp.client_secret_key)
  return client_secret_key_.GetNoArena();
}
void QueryRegionListHttpRsp::set_client_secret_key(const ::std::string& value) {
  
  client_secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.QueryRegionListHttpRsp.client_secret_key)
}
#if LANG_CXX11
void QueryRegionListHttpRsp::set_client_secret_key(::std::string&& value) {
  
  client_secret_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.QueryRegionListHttpRsp.client_secret_key)
}
#endif
void QueryRegionListHttpRsp::set_client_secret_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.QueryRegionListHttpRsp.client_secret_key)
}
void QueryRegionListHttpRsp::set_client_secret_key(const void* value, size_t size) {
  
  client_secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.QueryRegionListHttpRsp.client_secret_key)
}
::std::string* QueryRegionListHttpRsp::mutable_client_secret_key() {
  
  // @@protoc_insertion_point(field_mutable:proto.QueryRegionListHttpRsp.client_secret_key)
  return client_secret_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryRegionListHttpRsp::release_client_secret_key() {
  // @@protoc_insertion_point(field_release:proto.QueryRegionListHttpRsp.client_secret_key)
  
  return client_secret_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryRegionListHttpRsp::set_allocated_client_secret_key(::std::string* client_secret_key) {
  if (client_secret_key != NULL) {
    
  } else {
    
  }
  client_secret_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_secret_key);
  // @@protoc_insertion_point(field_set_allocated:proto.QueryRegionListHttpRsp.client_secret_key)
}

// bytes client_custom_config_encrypted = 6;
void QueryRegionListHttpRsp::clear_client_custom_config_encrypted() {
  client_custom_config_encrypted_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryRegionListHttpRsp::client_custom_config_encrypted() const {
  // @@protoc_insertion_point(field_get:proto.QueryRegionListHttpRsp.client_custom_config_encrypted)
  return client_custom_config_encrypted_.GetNoArena();
}
void QueryRegionListHttpRsp::set_client_custom_config_encrypted(const ::std::string& value) {
  
  client_custom_config_encrypted_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.QueryRegionListHttpRsp.client_custom_config_encrypted)
}
#if LANG_CXX11
void QueryRegionListHttpRsp::set_client_custom_config_encrypted(::std::string&& value) {
  
  client_custom_config_encrypted_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.QueryRegionListHttpRsp.client_custom_config_encrypted)
}
#endif
void QueryRegionListHttpRsp::set_client_custom_config_encrypted(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_custom_config_encrypted_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.QueryRegionListHttpRsp.client_custom_config_encrypted)
}
void QueryRegionListHttpRsp::set_client_custom_config_encrypted(const void* value, size_t size) {
  
  client_custom_config_encrypted_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.QueryRegionListHttpRsp.client_custom_config_encrypted)
}
::std::string* QueryRegionListHttpRsp::mutable_client_custom_config_encrypted() {
  
  // @@protoc_insertion_point(field_mutable:proto.QueryRegionListHttpRsp.client_custom_config_encrypted)
  return client_custom_config_encrypted_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryRegionListHttpRsp::release_client_custom_config_encrypted() {
  // @@protoc_insertion_point(field_release:proto.QueryRegionListHttpRsp.client_custom_config_encrypted)
  
  return client_custom_config_encrypted_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryRegionListHttpRsp::set_allocated_client_custom_config_encrypted(::std::string* client_custom_config_encrypted) {
  if (client_custom_config_encrypted != NULL) {
    
  } else {
    
  }
  client_custom_config_encrypted_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_custom_config_encrypted);
  // @@protoc_insertion_point(field_set_allocated:proto.QueryRegionListHttpRsp.client_custom_config_encrypted)
}

// bool enable_login_pc = 7;
void QueryRegionListHttpRsp::clear_enable_login_pc() {
  enable_login_pc_ = false;
}
bool QueryRegionListHttpRsp::enable_login_pc() const {
  // @@protoc_insertion_point(field_get:proto.QueryRegionListHttpRsp.enable_login_pc)
  return enable_login_pc_;
}
void QueryRegionListHttpRsp::set_enable_login_pc(bool value) {
  
  enable_login_pc_ = value;
  // @@protoc_insertion_point(field_set:proto.QueryRegionListHttpRsp.enable_login_pc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForceUpdateInfo::kForceUpdateUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForceUpdateInfo::ForceUpdateInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ForceUpdateInfo)
}
ForceUpdateInfo::ForceUpdateInfo(const ForceUpdateInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  force_update_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.force_update_url().size() > 0) {
    force_update_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.force_update_url_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.ForceUpdateInfo)
}

void ForceUpdateInfo::SharedCtor() {
  force_update_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ForceUpdateInfo::~ForceUpdateInfo() {
  // @@protoc_insertion_point(destructor:proto.ForceUpdateInfo)
  SharedDtor();
}

void ForceUpdateInfo::SharedDtor() {
  force_update_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ForceUpdateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForceUpdateInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ForceUpdateInfo& ForceUpdateInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ForceUpdateInfo* ForceUpdateInfo::New(::google::protobuf::Arena* arena) const {
  ForceUpdateInfo* n = new ForceUpdateInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForceUpdateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ForceUpdateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  force_update_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ForceUpdateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ForceUpdateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string force_update_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_force_update_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->force_update_url().data(), static_cast<int>(this->force_update_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ForceUpdateInfo.force_update_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ForceUpdateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ForceUpdateInfo)
  return false;
#undef DO_
}

void ForceUpdateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ForceUpdateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string force_update_url = 1;
  if (this->force_update_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->force_update_url().data(), static_cast<int>(this->force_update_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ForceUpdateInfo.force_update_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->force_update_url(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ForceUpdateInfo)
}

::google::protobuf::uint8* ForceUpdateInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ForceUpdateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string force_update_url = 1;
  if (this->force_update_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->force_update_url().data(), static_cast<int>(this->force_update_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ForceUpdateInfo.force_update_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->force_update_url(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ForceUpdateInfo)
  return target;
}

size_t ForceUpdateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ForceUpdateInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string force_update_url = 1;
  if (this->force_update_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->force_update_url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForceUpdateInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ForceUpdateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ForceUpdateInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ForceUpdateInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ForceUpdateInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ForceUpdateInfo)
    MergeFrom(*source);
  }
}

void ForceUpdateInfo::MergeFrom(const ForceUpdateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ForceUpdateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.force_update_url().size() > 0) {

    force_update_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.force_update_url_);
  }
}

void ForceUpdateInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ForceUpdateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForceUpdateInfo::CopyFrom(const ForceUpdateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ForceUpdateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceUpdateInfo::IsInitialized() const {
  return true;
}

void ForceUpdateInfo::Swap(ForceUpdateInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForceUpdateInfo::InternalSwap(ForceUpdateInfo* other) {
  using std::swap;
  force_update_url_.Swap(&other->force_update_url_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForceUpdateInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForceUpdateInfo

// string force_update_url = 1;
void ForceUpdateInfo::clear_force_update_url() {
  force_update_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ForceUpdateInfo::force_update_url() const {
  // @@protoc_insertion_point(field_get:proto.ForceUpdateInfo.force_update_url)
  return force_update_url_.GetNoArena();
}
void ForceUpdateInfo::set_force_update_url(const ::std::string& value) {
  
  force_update_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ForceUpdateInfo.force_update_url)
}
#if LANG_CXX11
void ForceUpdateInfo::set_force_update_url(::std::string&& value) {
  
  force_update_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ForceUpdateInfo.force_update_url)
}
#endif
void ForceUpdateInfo::set_force_update_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  force_update_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ForceUpdateInfo.force_update_url)
}
void ForceUpdateInfo::set_force_update_url(const char* value, size_t size) {
  
  force_update_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ForceUpdateInfo.force_update_url)
}
::std::string* ForceUpdateInfo::mutable_force_update_url() {
  
  // @@protoc_insertion_point(field_mutable:proto.ForceUpdateInfo.force_update_url)
  return force_update_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ForceUpdateInfo::release_force_update_url() {
  // @@protoc_insertion_point(field_release:proto.ForceUpdateInfo.force_update_url)
  
  return force_update_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ForceUpdateInfo::set_allocated_force_update_url(::std::string* force_update_url) {
  if (force_update_url != NULL) {
    
  } else {
    
  }
  force_update_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), force_update_url);
  // @@protoc_insertion_point(field_set_allocated:proto.ForceUpdateInfo.force_update_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopServerInfo::kStopBeginTimeFieldNumber;
const int StopServerInfo::kStopEndTimeFieldNumber;
const int StopServerInfo::kUrlFieldNumber;
const int StopServerInfo::kContentMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopServerInfo::StopServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.StopServerInfo)
}
StopServerInfo::StopServerInfo(const StopServerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  content_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content_msg().size() > 0) {
    content_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_msg_);
  }
  ::memcpy(&stop_begin_time_, &from.stop_begin_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_end_time_) -
    reinterpret_cast<char*>(&stop_begin_time_)) + sizeof(stop_end_time_));
  // @@protoc_insertion_point(copy_constructor:proto.StopServerInfo)
}

void StopServerInfo::SharedCtor() {
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stop_begin_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_end_time_) -
      reinterpret_cast<char*>(&stop_begin_time_)) + sizeof(stop_end_time_));
  _cached_size_ = 0;
}

StopServerInfo::~StopServerInfo() {
  // @@protoc_insertion_point(destructor:proto.StopServerInfo)
  SharedDtor();
}

void StopServerInfo::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StopServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopServerInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StopServerInfo& StopServerInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

StopServerInfo* StopServerInfo::New(::google::protobuf::Arena* arena) const {
  StopServerInfo* n = new StopServerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.StopServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stop_begin_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_end_time_) -
      reinterpret_cast<char*>(&stop_begin_time_)) + sizeof(stop_end_time_));
  _internal_metadata_.Clear();
}

bool StopServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.StopServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 stop_begin_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stop_begin_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 stop_end_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stop_end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.StopServerInfo.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content_msg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content_msg().data(), static_cast<int>(this->content_msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.StopServerInfo.content_msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.StopServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.StopServerInfo)
  return false;
#undef DO_
}

void StopServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.StopServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stop_begin_time = 1;
  if (this->stop_begin_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stop_begin_time(), output);
  }

  // uint32 stop_end_time = 2;
  if (this->stop_end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stop_end_time(), output);
  }

  // string url = 3;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.StopServerInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // string content_msg = 4;
  if (this->content_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content_msg().data(), static_cast<int>(this->content_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.StopServerInfo.content_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content_msg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.StopServerInfo)
}

::google::protobuf::uint8* StopServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.StopServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stop_begin_time = 1;
  if (this->stop_begin_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stop_begin_time(), target);
  }

  // uint32 stop_end_time = 2;
  if (this->stop_end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stop_end_time(), target);
  }

  // string url = 3;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.StopServerInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // string content_msg = 4;
  if (this->content_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content_msg().data(), static_cast<int>(this->content_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.StopServerInfo.content_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content_msg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.StopServerInfo)
  return target;
}

size_t StopServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.StopServerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string url = 3;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // string content_msg = 4;
  if (this->content_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content_msg());
  }

  // uint32 stop_begin_time = 1;
  if (this->stop_begin_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stop_begin_time());
  }

  // uint32 stop_end_time = 2;
  if (this->stop_end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stop_end_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.StopServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StopServerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.StopServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.StopServerInfo)
    MergeFrom(*source);
  }
}

void StopServerInfo::MergeFrom(const StopServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.StopServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.content_msg().size() > 0) {

    content_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_msg_);
  }
  if (from.stop_begin_time() != 0) {
    set_stop_begin_time(from.stop_begin_time());
  }
  if (from.stop_end_time() != 0) {
    set_stop_end_time(from.stop_end_time());
  }
}

void StopServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.StopServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopServerInfo::CopyFrom(const StopServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.StopServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopServerInfo::IsInitialized() const {
  return true;
}

void StopServerInfo::Swap(StopServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopServerInfo::InternalSwap(StopServerInfo* other) {
  using std::swap;
  url_.Swap(&other->url_);
  content_msg_.Swap(&other->content_msg_);
  swap(stop_begin_time_, other->stop_begin_time_);
  swap(stop_end_time_, other->stop_end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopServerInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopServerInfo

// uint32 stop_begin_time = 1;
void StopServerInfo::clear_stop_begin_time() {
  stop_begin_time_ = 0u;
}
::google::protobuf::uint32 StopServerInfo::stop_begin_time() const {
  // @@protoc_insertion_point(field_get:proto.StopServerInfo.stop_begin_time)
  return stop_begin_time_;
}
void StopServerInfo::set_stop_begin_time(::google::protobuf::uint32 value) {
  
  stop_begin_time_ = value;
  // @@protoc_insertion_point(field_set:proto.StopServerInfo.stop_begin_time)
}

// uint32 stop_end_time = 2;
void StopServerInfo::clear_stop_end_time() {
  stop_end_time_ = 0u;
}
::google::protobuf::uint32 StopServerInfo::stop_end_time() const {
  // @@protoc_insertion_point(field_get:proto.StopServerInfo.stop_end_time)
  return stop_end_time_;
}
void StopServerInfo::set_stop_end_time(::google::protobuf::uint32 value) {
  
  stop_end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.StopServerInfo.stop_end_time)
}

// string url = 3;
void StopServerInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StopServerInfo::url() const {
  // @@protoc_insertion_point(field_get:proto.StopServerInfo.url)
  return url_.GetNoArena();
}
void StopServerInfo::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.StopServerInfo.url)
}
#if LANG_CXX11
void StopServerInfo::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.StopServerInfo.url)
}
#endif
void StopServerInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.StopServerInfo.url)
}
void StopServerInfo::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.StopServerInfo.url)
}
::std::string* StopServerInfo::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:proto.StopServerInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StopServerInfo::release_url() {
  // @@protoc_insertion_point(field_release:proto.StopServerInfo.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StopServerInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.StopServerInfo.url)
}

// string content_msg = 4;
void StopServerInfo::clear_content_msg() {
  content_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StopServerInfo::content_msg() const {
  // @@protoc_insertion_point(field_get:proto.StopServerInfo.content_msg)
  return content_msg_.GetNoArena();
}
void StopServerInfo::set_content_msg(const ::std::string& value) {
  
  content_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.StopServerInfo.content_msg)
}
#if LANG_CXX11
void StopServerInfo::set_content_msg(::std::string&& value) {
  
  content_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.StopServerInfo.content_msg)
}
#endif
void StopServerInfo::set_content_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.StopServerInfo.content_msg)
}
void StopServerInfo::set_content_msg(const char* value, size_t size) {
  
  content_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.StopServerInfo.content_msg)
}
::std::string* StopServerInfo::mutable_content_msg() {
  
  // @@protoc_insertion_point(field_mutable:proto.StopServerInfo.content_msg)
  return content_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StopServerInfo::release_content_msg() {
  // @@protoc_insertion_point(field_release:proto.StopServerInfo.content_msg)
  
  return content_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StopServerInfo::set_allocated_content_msg(::std::string* content_msg) {
  if (content_msg != NULL) {
    
  } else {
    
  }
  content_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content_msg);
  // @@protoc_insertion_point(field_set_allocated:proto.StopServerInfo.content_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResVersionConfig::kVersionFieldNumber;
const int ResVersionConfig::kReloginFieldNumber;
const int ResVersionConfig::kMd5FieldNumber;
const int ResVersionConfig::kReleaseTotalSizeFieldNumber;
const int ResVersionConfig::kVersionSuffixFieldNumber;
const int ResVersionConfig::kBranchFieldNumber;
const int ResVersionConfig::kNextScriptVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResVersionConfig::ResVersionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ResVersionConfig)
}
ResVersionConfig::ResVersionConfig(const ResVersionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.md5().size() > 0) {
    md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  release_total_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.release_total_size().size() > 0) {
    release_total_size_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.release_total_size_);
  }
  version_suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version_suffix().size() > 0) {
    version_suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_suffix_);
  }
  branch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.branch().size() > 0) {
    branch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.branch_);
  }
  next_script_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_script_version().size() > 0) {
    next_script_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_script_version_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&relogin_) -
    reinterpret_cast<char*>(&version_)) + sizeof(relogin_));
  // @@protoc_insertion_point(copy_constructor:proto.ResVersionConfig)
}

void ResVersionConfig::SharedCtor() {
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  release_total_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_script_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relogin_) -
      reinterpret_cast<char*>(&version_)) + sizeof(relogin_));
  _cached_size_ = 0;
}

ResVersionConfig::~ResVersionConfig() {
  // @@protoc_insertion_point(destructor:proto.ResVersionConfig)
  SharedDtor();
}

void ResVersionConfig::SharedDtor() {
  md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  release_total_size_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_suffix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_script_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResVersionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResVersionConfig::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResVersionConfig& ResVersionConfig::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResVersionConfig* ResVersionConfig::New(::google::protobuf::Arena* arena) const {
  ResVersionConfig* n = new ResVersionConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResVersionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ResVersionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  release_total_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_suffix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_script_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relogin_) -
      reinterpret_cast<char*>(&version_)) + sizeof(relogin_));
  _internal_metadata_.Clear();
}

bool ResVersionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ResVersionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool relogin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &relogin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string md5 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->md5().data(), static_cast<int>(this->md5().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ResVersionConfig.md5"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string release_total_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_release_total_size()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->release_total_size().data(), static_cast<int>(this->release_total_size().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ResVersionConfig.release_total_size"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version_suffix = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version_suffix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version_suffix().data(), static_cast<int>(this->version_suffix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ResVersionConfig.version_suffix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string branch = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branch()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->branch().data(), static_cast<int>(this->branch().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ResVersionConfig.branch"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_script_version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_script_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_script_version().data(), static_cast<int>(this->next_script_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ResVersionConfig.next_script_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ResVersionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ResVersionConfig)
  return false;
#undef DO_
}

void ResVersionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ResVersionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // bool relogin = 2;
  if (this->relogin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->relogin(), output);
  }

  // string md5 = 3;
  if (this->md5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5().data(), static_cast<int>(this->md5().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ResVersionConfig.md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->md5(), output);
  }

  // string release_total_size = 4;
  if (this->release_total_size().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->release_total_size().data(), static_cast<int>(this->release_total_size().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ResVersionConfig.release_total_size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->release_total_size(), output);
  }

  // string version_suffix = 5;
  if (this->version_suffix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version_suffix().data(), static_cast<int>(this->version_suffix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ResVersionConfig.version_suffix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->version_suffix(), output);
  }

  // string branch = 6;
  if (this->branch().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->branch().data(), static_cast<int>(this->branch().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ResVersionConfig.branch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->branch(), output);
  }

  // string next_script_version = 7;
  if (this->next_script_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_script_version().data(), static_cast<int>(this->next_script_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ResVersionConfig.next_script_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->next_script_version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ResVersionConfig)
}

::google::protobuf::uint8* ResVersionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ResVersionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // bool relogin = 2;
  if (this->relogin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->relogin(), target);
  }

  // string md5 = 3;
  if (this->md5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5().data(), static_cast<int>(this->md5().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ResVersionConfig.md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->md5(), target);
  }

  // string release_total_size = 4;
  if (this->release_total_size().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->release_total_size().data(), static_cast<int>(this->release_total_size().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ResVersionConfig.release_total_size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->release_total_size(), target);
  }

  // string version_suffix = 5;
  if (this->version_suffix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version_suffix().data(), static_cast<int>(this->version_suffix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ResVersionConfig.version_suffix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version_suffix(), target);
  }

  // string branch = 6;
  if (this->branch().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->branch().data(), static_cast<int>(this->branch().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ResVersionConfig.branch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->branch(), target);
  }

  // string next_script_version = 7;
  if (this->next_script_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_script_version().data(), static_cast<int>(this->next_script_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ResVersionConfig.next_script_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->next_script_version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ResVersionConfig)
  return target;
}

size_t ResVersionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ResVersionConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string md5 = 3;
  if (this->md5().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->md5());
  }

  // string release_total_size = 4;
  if (this->release_total_size().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->release_total_size());
  }

  // string version_suffix = 5;
  if (this->version_suffix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version_suffix());
  }

  // string branch = 6;
  if (this->branch().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->branch());
  }

  // string next_script_version = 7;
  if (this->next_script_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_script_version());
  }

  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // bool relogin = 2;
  if (this->relogin() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResVersionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ResVersionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ResVersionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResVersionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ResVersionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ResVersionConfig)
    MergeFrom(*source);
  }
}

void ResVersionConfig::MergeFrom(const ResVersionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ResVersionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.md5().size() > 0) {

    md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  if (from.release_total_size().size() > 0) {

    release_total_size_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.release_total_size_);
  }
  if (from.version_suffix().size() > 0) {

    version_suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_suffix_);
  }
  if (from.branch().size() > 0) {

    branch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.branch_);
  }
  if (from.next_script_version().size() > 0) {

    next_script_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_script_version_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.relogin() != 0) {
    set_relogin(from.relogin());
  }
}

void ResVersionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ResVersionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResVersionConfig::CopyFrom(const ResVersionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ResVersionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResVersionConfig::IsInitialized() const {
  return true;
}

void ResVersionConfig::Swap(ResVersionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResVersionConfig::InternalSwap(ResVersionConfig* other) {
  using std::swap;
  md5_.Swap(&other->md5_);
  release_total_size_.Swap(&other->release_total_size_);
  version_suffix_.Swap(&other->version_suffix_);
  branch_.Swap(&other->branch_);
  next_script_version_.Swap(&other->next_script_version_);
  swap(version_, other->version_);
  swap(relogin_, other->relogin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResVersionConfig::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResVersionConfig

// uint32 version = 1;
void ResVersionConfig::clear_version() {
  version_ = 0u;
}
::google::protobuf::uint32 ResVersionConfig::version() const {
  // @@protoc_insertion_point(field_get:proto.ResVersionConfig.version)
  return version_;
}
void ResVersionConfig::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.ResVersionConfig.version)
}

// bool relogin = 2;
void ResVersionConfig::clear_relogin() {
  relogin_ = false;
}
bool ResVersionConfig::relogin() const {
  // @@protoc_insertion_point(field_get:proto.ResVersionConfig.relogin)
  return relogin_;
}
void ResVersionConfig::set_relogin(bool value) {
  
  relogin_ = value;
  // @@protoc_insertion_point(field_set:proto.ResVersionConfig.relogin)
}

// string md5 = 3;
void ResVersionConfig::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResVersionConfig::md5() const {
  // @@protoc_insertion_point(field_get:proto.ResVersionConfig.md5)
  return md5_.GetNoArena();
}
void ResVersionConfig::set_md5(const ::std::string& value) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ResVersionConfig.md5)
}
#if LANG_CXX11
void ResVersionConfig::set_md5(::std::string&& value) {
  
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ResVersionConfig.md5)
}
#endif
void ResVersionConfig::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ResVersionConfig.md5)
}
void ResVersionConfig::set_md5(const char* value, size_t size) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ResVersionConfig.md5)
}
::std::string* ResVersionConfig::mutable_md5() {
  
  // @@protoc_insertion_point(field_mutable:proto.ResVersionConfig.md5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResVersionConfig::release_md5() {
  // @@protoc_insertion_point(field_release:proto.ResVersionConfig.md5)
  
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResVersionConfig::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    
  } else {
    
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:proto.ResVersionConfig.md5)
}

// string release_total_size = 4;
void ResVersionConfig::clear_release_total_size() {
  release_total_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResVersionConfig::release_total_size() const {
  // @@protoc_insertion_point(field_get:proto.ResVersionConfig.release_total_size)
  return release_total_size_.GetNoArena();
}
void ResVersionConfig::set_release_total_size(const ::std::string& value) {
  
  release_total_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ResVersionConfig.release_total_size)
}
#if LANG_CXX11
void ResVersionConfig::set_release_total_size(::std::string&& value) {
  
  release_total_size_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ResVersionConfig.release_total_size)
}
#endif
void ResVersionConfig::set_release_total_size(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  release_total_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ResVersionConfig.release_total_size)
}
void ResVersionConfig::set_release_total_size(const char* value, size_t size) {
  
  release_total_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ResVersionConfig.release_total_size)
}
::std::string* ResVersionConfig::mutable_release_total_size() {
  
  // @@protoc_insertion_point(field_mutable:proto.ResVersionConfig.release_total_size)
  return release_total_size_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResVersionConfig::release_release_total_size() {
  // @@protoc_insertion_point(field_release:proto.ResVersionConfig.release_total_size)
  
  return release_total_size_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResVersionConfig::set_allocated_release_total_size(::std::string* release_total_size) {
  if (release_total_size != NULL) {
    
  } else {
    
  }
  release_total_size_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), release_total_size);
  // @@protoc_insertion_point(field_set_allocated:proto.ResVersionConfig.release_total_size)
}

// string version_suffix = 5;
void ResVersionConfig::clear_version_suffix() {
  version_suffix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResVersionConfig::version_suffix() const {
  // @@protoc_insertion_point(field_get:proto.ResVersionConfig.version_suffix)
  return version_suffix_.GetNoArena();
}
void ResVersionConfig::set_version_suffix(const ::std::string& value) {
  
  version_suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ResVersionConfig.version_suffix)
}
#if LANG_CXX11
void ResVersionConfig::set_version_suffix(::std::string&& value) {
  
  version_suffix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ResVersionConfig.version_suffix)
}
#endif
void ResVersionConfig::set_version_suffix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ResVersionConfig.version_suffix)
}
void ResVersionConfig::set_version_suffix(const char* value, size_t size) {
  
  version_suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ResVersionConfig.version_suffix)
}
::std::string* ResVersionConfig::mutable_version_suffix() {
  
  // @@protoc_insertion_point(field_mutable:proto.ResVersionConfig.version_suffix)
  return version_suffix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResVersionConfig::release_version_suffix() {
  // @@protoc_insertion_point(field_release:proto.ResVersionConfig.version_suffix)
  
  return version_suffix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResVersionConfig::set_allocated_version_suffix(::std::string* version_suffix) {
  if (version_suffix != NULL) {
    
  } else {
    
  }
  version_suffix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version_suffix);
  // @@protoc_insertion_point(field_set_allocated:proto.ResVersionConfig.version_suffix)
}

// string branch = 6;
void ResVersionConfig::clear_branch() {
  branch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResVersionConfig::branch() const {
  // @@protoc_insertion_point(field_get:proto.ResVersionConfig.branch)
  return branch_.GetNoArena();
}
void ResVersionConfig::set_branch(const ::std::string& value) {
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ResVersionConfig.branch)
}
#if LANG_CXX11
void ResVersionConfig::set_branch(::std::string&& value) {
  
  branch_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ResVersionConfig.branch)
}
#endif
void ResVersionConfig::set_branch(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ResVersionConfig.branch)
}
void ResVersionConfig::set_branch(const char* value, size_t size) {
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ResVersionConfig.branch)
}
::std::string* ResVersionConfig::mutable_branch() {
  
  // @@protoc_insertion_point(field_mutable:proto.ResVersionConfig.branch)
  return branch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResVersionConfig::release_branch() {
  // @@protoc_insertion_point(field_release:proto.ResVersionConfig.branch)
  
  return branch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResVersionConfig::set_allocated_branch(::std::string* branch) {
  if (branch != NULL) {
    
  } else {
    
  }
  branch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), branch);
  // @@protoc_insertion_point(field_set_allocated:proto.ResVersionConfig.branch)
}

// string next_script_version = 7;
void ResVersionConfig::clear_next_script_version() {
  next_script_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResVersionConfig::next_script_version() const {
  // @@protoc_insertion_point(field_get:proto.ResVersionConfig.next_script_version)
  return next_script_version_.GetNoArena();
}
void ResVersionConfig::set_next_script_version(const ::std::string& value) {
  
  next_script_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ResVersionConfig.next_script_version)
}
#if LANG_CXX11
void ResVersionConfig::set_next_script_version(::std::string&& value) {
  
  next_script_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ResVersionConfig.next_script_version)
}
#endif
void ResVersionConfig::set_next_script_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_script_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ResVersionConfig.next_script_version)
}
void ResVersionConfig::set_next_script_version(const char* value, size_t size) {
  
  next_script_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ResVersionConfig.next_script_version)
}
::std::string* ResVersionConfig::mutable_next_script_version() {
  
  // @@protoc_insertion_point(field_mutable:proto.ResVersionConfig.next_script_version)
  return next_script_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResVersionConfig::release_next_script_version() {
  // @@protoc_insertion_point(field_release:proto.ResVersionConfig.next_script_version)
  
  return next_script_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResVersionConfig::set_allocated_next_script_version(::std::string* next_script_version) {
  if (next_script_version != NULL) {
    
  } else {
    
  }
  next_script_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_script_version);
  // @@protoc_insertion_point(field_set_allocated:proto.ResVersionConfig.next_script_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionInfo::kGateserverIpFieldNumber;
const int RegionInfo::kGateserverPortFieldNumber;
const int RegionInfo::kPayCallbackUrlFieldNumber;
const int RegionInfo::kAreaTypeFieldNumber;
const int RegionInfo::kResourceUrlFieldNumber;
const int RegionInfo::kDataUrlFieldNumber;
const int RegionInfo::kFeedbackUrlFieldNumber;
const int RegionInfo::kBulletinUrlFieldNumber;
const int RegionInfo::kResourceUrlBakFieldNumber;
const int RegionInfo::kDataUrlBakFieldNumber;
const int RegionInfo::kClientDataVersionFieldNumber;
const int RegionInfo::kHandbookUrlFieldNumber;
const int RegionInfo::kClientSilenceDataVersionFieldNumber;
const int RegionInfo::kClientDataMd5FieldNumber;
const int RegionInfo::kClientSilenceDataMd5FieldNumber;
const int RegionInfo::kResVersionConfigFieldNumber;
const int RegionInfo::kSecretKeyFieldNumber;
const int RegionInfo::kOfficialCommunityUrlFieldNumber;
const int RegionInfo::kClientVersionSuffixFieldNumber;
const int RegionInfo::kClientSilenceVersionSuffixFieldNumber;
const int RegionInfo::kUseGateserverDomainNameFieldNumber;
const int RegionInfo::kGateserverDomainNameFieldNumber;
const int RegionInfo::kUserCenterUrlFieldNumber;
const int RegionInfo::kAccountBindUrlFieldNumber;
const int RegionInfo::kCdkeyUrlFieldNumber;
const int RegionInfo::kPrivacyPolicyUrlFieldNumber;
const int RegionInfo::kNextResourceUrlFieldNumber;
const int RegionInfo::kNextResVersionConfigFieldNumber;
const int RegionInfo::kGameBizFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionInfo::RegionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RegionInfo)
}
RegionInfo::RegionInfo(const RegionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gateserver_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gateserver_ip().size() > 0) {
    gateserver_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateserver_ip_);
  }
  pay_callback_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pay_callback_url().size() > 0) {
    pay_callback_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pay_callback_url_);
  }
  area_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.area_type().size() > 0) {
    area_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.area_type_);
  }
  resource_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.resource_url().size() > 0) {
    resource_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource_url_);
  }
  data_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data_url().size() > 0) {
    data_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_url_);
  }
  feedback_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.feedback_url().size() > 0) {
    feedback_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feedback_url_);
  }
  bulletin_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bulletin_url().size() > 0) {
    bulletin_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bulletin_url_);
  }
  resource_url_bak_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.resource_url_bak().size() > 0) {
    resource_url_bak_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource_url_bak_);
  }
  data_url_bak_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data_url_bak().size() > 0) {
    data_url_bak_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_url_bak_);
  }
  handbook_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.handbook_url().size() > 0) {
    handbook_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.handbook_url_);
  }
  client_data_md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_data_md5().size() > 0) {
    client_data_md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_data_md5_);
  }
  client_silence_data_md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_silence_data_md5().size() > 0) {
    client_silence_data_md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_silence_data_md5_);
  }
  secret_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.secret_key().size() > 0) {
    secret_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_key_);
  }
  official_community_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.official_community_url().size() > 0) {
    official_community_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.official_community_url_);
  }
  client_version_suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_version_suffix().size() > 0) {
    client_version_suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_version_suffix_);
  }
  client_silence_version_suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_silence_version_suffix().size() > 0) {
    client_silence_version_suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_silence_version_suffix_);
  }
  gateserver_domain_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gateserver_domain_name().size() > 0) {
    gateserver_domain_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateserver_domain_name_);
  }
  user_center_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_center_url().size() > 0) {
    user_center_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_center_url_);
  }
  account_bind_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account_bind_url().size() > 0) {
    account_bind_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_bind_url_);
  }
  cdkey_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cdkey_url().size() > 0) {
    cdkey_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdkey_url_);
  }
  privacy_policy_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.privacy_policy_url().size() > 0) {
    privacy_policy_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.privacy_policy_url_);
  }
  next_resource_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_resource_url().size() > 0) {
    next_resource_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_resource_url_);
  }
  game_biz_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.game_biz().size() > 0) {
    game_biz_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_biz_);
  }
  if (from.has_res_version_config()) {
    res_version_config_ = new ::proto::ResVersionConfig(*from.res_version_config_);
  } else {
    res_version_config_ = NULL;
  }
  if (from.has_next_res_version_config()) {
    next_res_version_config_ = new ::proto::ResVersionConfig(*from.next_res_version_config_);
  } else {
    next_res_version_config_ = NULL;
  }
  ::memcpy(&gateserver_port_, &from.gateserver_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_gateserver_domain_name_) -
    reinterpret_cast<char*>(&gateserver_port_)) + sizeof(use_gateserver_domain_name_));
  // @@protoc_insertion_point(copy_constructor:proto.RegionInfo)
}

void RegionInfo::SharedCtor() {
  gateserver_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pay_callback_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  area_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feedback_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bulletin_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_url_bak_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_url_bak_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handbook_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_data_md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_silence_data_md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  official_community_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_version_suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_silence_version_suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gateserver_domain_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_center_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_bind_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdkey_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  privacy_policy_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_resource_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_biz_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&res_version_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_gateserver_domain_name_) -
      reinterpret_cast<char*>(&res_version_config_)) + sizeof(use_gateserver_domain_name_));
  _cached_size_ = 0;
}

RegionInfo::~RegionInfo() {
  // @@protoc_insertion_point(destructor:proto.RegionInfo)
  SharedDtor();
}

void RegionInfo::SharedDtor() {
  gateserver_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pay_callback_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  area_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feedback_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bulletin_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_url_bak_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_url_bak_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handbook_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_data_md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_silence_data_md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  official_community_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_version_suffix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_silence_version_suffix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gateserver_domain_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_center_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_bind_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdkey_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  privacy_policy_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_resource_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_biz_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete res_version_config_;
  if (this != internal_default_instance()) delete next_res_version_config_;
}

void RegionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegionInfo& RegionInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegionInfo* RegionInfo::New(::google::protobuf::Arena* arena) const {
  RegionInfo* n = new RegionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RegionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gateserver_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pay_callback_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  area_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feedback_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bulletin_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_url_bak_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_url_bak_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handbook_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_data_md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_silence_data_md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  official_community_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_version_suffix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_silence_version_suffix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gateserver_domain_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_center_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_bind_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdkey_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  privacy_policy_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_resource_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_biz_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && res_version_config_ != NULL) {
    delete res_version_config_;
  }
  res_version_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && next_res_version_config_ != NULL) {
    delete next_res_version_config_;
  }
  next_res_version_config_ = NULL;
  ::memset(&gateserver_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_gateserver_domain_name_) -
      reinterpret_cast<char*>(&gateserver_port_)) + sizeof(use_gateserver_domain_name_));
  _internal_metadata_.Clear();
}

bool RegionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.RegionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gateserver_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateserver_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateserver_ip().data(), static_cast<int>(this->gateserver_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionInfo.gateserver_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gateserver_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateserver_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pay_callback_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pay_callback_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pay_callback_url().data(), static_cast<int>(this->pay_callback_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionInfo.pay_callback_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string area_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_area_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->area_type().data(), static_cast<int>(this->area_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionInfo.area_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string resource_url = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resource_url().data(), static_cast<int>(this->resource_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionInfo.resource_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data_url = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data_url().data(), static_cast<int>(this->data_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionInfo.data_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string feedback_url = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feedback_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->feedback_url().data(), static_cast<int>(this->feedback_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionInfo.feedback_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bulletin_url = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bulletin_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bulletin_url().data(), static_cast<int>(this->bulletin_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionInfo.bulletin_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string resource_url_bak = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource_url_bak()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resource_url_bak().data(), static_cast<int>(this->resource_url_bak().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionInfo.resource_url_bak"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data_url_bak = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_url_bak()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data_url_bak().data(), static_cast<int>(this->data_url_bak().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionInfo.data_url_bak"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 client_data_version = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_data_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string handbook_url = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handbook_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->handbook_url().data(), static_cast<int>(this->handbook_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionInfo.handbook_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 client_silence_data_version = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_silence_data_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_data_md5 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_data_md5()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_data_md5().data(), static_cast<int>(this->client_data_md5().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionInfo.client_data_md5"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_silence_data_md5 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_silence_data_md5()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_silence_data_md5().data(), static_cast<int>(this->client_silence_data_md5().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionInfo.client_silence_data_md5"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ResVersionConfig res_version_config = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res_version_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes secret_key = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secret_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string official_community_url = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_official_community_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->official_community_url().data(), static_cast<int>(this->official_community_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionInfo.official_community_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_version_suffix = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_version_suffix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_version_suffix().data(), static_cast<int>(this->client_version_suffix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionInfo.client_version_suffix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_silence_version_suffix = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_silence_version_suffix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_silence_version_suffix().data(), static_cast<int>(this->client_silence_version_suffix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionInfo.client_silence_version_suffix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_gateserver_domain_name = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_gateserver_domain_name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gateserver_domain_name = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateserver_domain_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateserver_domain_name().data(), static_cast<int>(this->gateserver_domain_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionInfo.gateserver_domain_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_center_url = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_center_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_center_url().data(), static_cast<int>(this->user_center_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionInfo.user_center_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account_bind_url = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_bind_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_bind_url().data(), static_cast<int>(this->account_bind_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionInfo.account_bind_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cdkey_url = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdkey_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cdkey_url().data(), static_cast<int>(this->cdkey_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionInfo.cdkey_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string privacy_policy_url = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_privacy_policy_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->privacy_policy_url().data(), static_cast<int>(this->privacy_policy_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionInfo.privacy_policy_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_resource_url = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_resource_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_resource_url().data(), static_cast<int>(this->next_resource_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionInfo.next_resource_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ResVersionConfig next_res_version_config = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_next_res_version_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string game_biz = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_biz()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->game_biz().data(), static_cast<int>(this->game_biz().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RegionInfo.game_biz"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.RegionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.RegionInfo)
  return false;
#undef DO_
}

void RegionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.RegionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gateserver_ip = 1;
  if (this->gateserver_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateserver_ip().data(), static_cast<int>(this->gateserver_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.gateserver_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gateserver_ip(), output);
  }

  // uint32 gateserver_port = 2;
  if (this->gateserver_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gateserver_port(), output);
  }

  // string pay_callback_url = 3;
  if (this->pay_callback_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pay_callback_url().data(), static_cast<int>(this->pay_callback_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.pay_callback_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pay_callback_url(), output);
  }

  // string area_type = 7;
  if (this->area_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->area_type().data(), static_cast<int>(this->area_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.area_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->area_type(), output);
  }

  // string resource_url = 8;
  if (this->resource_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resource_url().data(), static_cast<int>(this->resource_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.resource_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->resource_url(), output);
  }

  // string data_url = 9;
  if (this->data_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_url().data(), static_cast<int>(this->data_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.data_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->data_url(), output);
  }

  // string feedback_url = 10;
  if (this->feedback_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feedback_url().data(), static_cast<int>(this->feedback_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.feedback_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->feedback_url(), output);
  }

  // string bulletin_url = 11;
  if (this->bulletin_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bulletin_url().data(), static_cast<int>(this->bulletin_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.bulletin_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->bulletin_url(), output);
  }

  // string resource_url_bak = 12;
  if (this->resource_url_bak().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resource_url_bak().data(), static_cast<int>(this->resource_url_bak().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.resource_url_bak");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->resource_url_bak(), output);
  }

  // string data_url_bak = 13;
  if (this->data_url_bak().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_url_bak().data(), static_cast<int>(this->data_url_bak().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.data_url_bak");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->data_url_bak(), output);
  }

  // uint32 client_data_version = 14;
  if (this->client_data_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->client_data_version(), output);
  }

  // string handbook_url = 16;
  if (this->handbook_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handbook_url().data(), static_cast<int>(this->handbook_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.handbook_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->handbook_url(), output);
  }

  // uint32 client_silence_data_version = 18;
  if (this->client_silence_data_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->client_silence_data_version(), output);
  }

  // string client_data_md5 = 19;
  if (this->client_data_md5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_data_md5().data(), static_cast<int>(this->client_data_md5().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.client_data_md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->client_data_md5(), output);
  }

  // string client_silence_data_md5 = 20;
  if (this->client_silence_data_md5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_silence_data_md5().data(), static_cast<int>(this->client_silence_data_md5().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.client_silence_data_md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->client_silence_data_md5(), output);
  }

  // .proto.ResVersionConfig res_version_config = 22;
  if (this->has_res_version_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->res_version_config_, output);
  }

  // bytes secret_key = 23;
  if (this->secret_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      23, this->secret_key(), output);
  }

  // string official_community_url = 24;
  if (this->official_community_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->official_community_url().data(), static_cast<int>(this->official_community_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.official_community_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->official_community_url(), output);
  }

  // string client_version_suffix = 26;
  if (this->client_version_suffix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_version_suffix().data(), static_cast<int>(this->client_version_suffix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.client_version_suffix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->client_version_suffix(), output);
  }

  // string client_silence_version_suffix = 27;
  if (this->client_silence_version_suffix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_silence_version_suffix().data(), static_cast<int>(this->client_silence_version_suffix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.client_silence_version_suffix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->client_silence_version_suffix(), output);
  }

  // bool use_gateserver_domain_name = 28;
  if (this->use_gateserver_domain_name() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->use_gateserver_domain_name(), output);
  }

  // string gateserver_domain_name = 29;
  if (this->gateserver_domain_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateserver_domain_name().data(), static_cast<int>(this->gateserver_domain_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.gateserver_domain_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->gateserver_domain_name(), output);
  }

  // string user_center_url = 30;
  if (this->user_center_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_center_url().data(), static_cast<int>(this->user_center_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.user_center_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->user_center_url(), output);
  }

  // string account_bind_url = 31;
  if (this->account_bind_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_bind_url().data(), static_cast<int>(this->account_bind_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.account_bind_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->account_bind_url(), output);
  }

  // string cdkey_url = 32;
  if (this->cdkey_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cdkey_url().data(), static_cast<int>(this->cdkey_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.cdkey_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->cdkey_url(), output);
  }

  // string privacy_policy_url = 33;
  if (this->privacy_policy_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->privacy_policy_url().data(), static_cast<int>(this->privacy_policy_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.privacy_policy_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->privacy_policy_url(), output);
  }

  // string next_resource_url = 34;
  if (this->next_resource_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_resource_url().data(), static_cast<int>(this->next_resource_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.next_resource_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->next_resource_url(), output);
  }

  // .proto.ResVersionConfig next_res_version_config = 35;
  if (this->has_next_res_version_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, *this->next_res_version_config_, output);
  }

  // string game_biz = 36;
  if (this->game_biz().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->game_biz().data(), static_cast<int>(this->game_biz().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.game_biz");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      36, this->game_biz(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.RegionInfo)
}

::google::protobuf::uint8* RegionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.RegionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gateserver_ip = 1;
  if (this->gateserver_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateserver_ip().data(), static_cast<int>(this->gateserver_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.gateserver_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gateserver_ip(), target);
  }

  // uint32 gateserver_port = 2;
  if (this->gateserver_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gateserver_port(), target);
  }

  // string pay_callback_url = 3;
  if (this->pay_callback_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pay_callback_url().data(), static_cast<int>(this->pay_callback_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.pay_callback_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pay_callback_url(), target);
  }

  // string area_type = 7;
  if (this->area_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->area_type().data(), static_cast<int>(this->area_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.area_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->area_type(), target);
  }

  // string resource_url = 8;
  if (this->resource_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resource_url().data(), static_cast<int>(this->resource_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.resource_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->resource_url(), target);
  }

  // string data_url = 9;
  if (this->data_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_url().data(), static_cast<int>(this->data_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.data_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->data_url(), target);
  }

  // string feedback_url = 10;
  if (this->feedback_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feedback_url().data(), static_cast<int>(this->feedback_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.feedback_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->feedback_url(), target);
  }

  // string bulletin_url = 11;
  if (this->bulletin_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bulletin_url().data(), static_cast<int>(this->bulletin_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.bulletin_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->bulletin_url(), target);
  }

  // string resource_url_bak = 12;
  if (this->resource_url_bak().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resource_url_bak().data(), static_cast<int>(this->resource_url_bak().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.resource_url_bak");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->resource_url_bak(), target);
  }

  // string data_url_bak = 13;
  if (this->data_url_bak().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_url_bak().data(), static_cast<int>(this->data_url_bak().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.data_url_bak");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->data_url_bak(), target);
  }

  // uint32 client_data_version = 14;
  if (this->client_data_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->client_data_version(), target);
  }

  // string handbook_url = 16;
  if (this->handbook_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handbook_url().data(), static_cast<int>(this->handbook_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.handbook_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->handbook_url(), target);
  }

  // uint32 client_silence_data_version = 18;
  if (this->client_silence_data_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->client_silence_data_version(), target);
  }

  // string client_data_md5 = 19;
  if (this->client_data_md5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_data_md5().data(), static_cast<int>(this->client_data_md5().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.client_data_md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->client_data_md5(), target);
  }

  // string client_silence_data_md5 = 20;
  if (this->client_silence_data_md5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_silence_data_md5().data(), static_cast<int>(this->client_silence_data_md5().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.client_silence_data_md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->client_silence_data_md5(), target);
  }

  // .proto.ResVersionConfig res_version_config = 22;
  if (this->has_res_version_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->res_version_config_, deterministic, target);
  }

  // bytes secret_key = 23;
  if (this->secret_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->secret_key(), target);
  }

  // string official_community_url = 24;
  if (this->official_community_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->official_community_url().data(), static_cast<int>(this->official_community_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.official_community_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->official_community_url(), target);
  }

  // string client_version_suffix = 26;
  if (this->client_version_suffix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_version_suffix().data(), static_cast<int>(this->client_version_suffix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.client_version_suffix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->client_version_suffix(), target);
  }

  // string client_silence_version_suffix = 27;
  if (this->client_silence_version_suffix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_silence_version_suffix().data(), static_cast<int>(this->client_silence_version_suffix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.client_silence_version_suffix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->client_silence_version_suffix(), target);
  }

  // bool use_gateserver_domain_name = 28;
  if (this->use_gateserver_domain_name() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->use_gateserver_domain_name(), target);
  }

  // string gateserver_domain_name = 29;
  if (this->gateserver_domain_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateserver_domain_name().data(), static_cast<int>(this->gateserver_domain_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.gateserver_domain_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->gateserver_domain_name(), target);
  }

  // string user_center_url = 30;
  if (this->user_center_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_center_url().data(), static_cast<int>(this->user_center_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.user_center_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->user_center_url(), target);
  }

  // string account_bind_url = 31;
  if (this->account_bind_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_bind_url().data(), static_cast<int>(this->account_bind_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.account_bind_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->account_bind_url(), target);
  }

  // string cdkey_url = 32;
  if (this->cdkey_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cdkey_url().data(), static_cast<int>(this->cdkey_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.cdkey_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->cdkey_url(), target);
  }

  // string privacy_policy_url = 33;
  if (this->privacy_policy_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->privacy_policy_url().data(), static_cast<int>(this->privacy_policy_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.privacy_policy_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->privacy_policy_url(), target);
  }

  // string next_resource_url = 34;
  if (this->next_resource_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_resource_url().data(), static_cast<int>(this->next_resource_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.next_resource_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->next_resource_url(), target);
  }

  // .proto.ResVersionConfig next_res_version_config = 35;
  if (this->has_next_res_version_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        35, *this->next_res_version_config_, deterministic, target);
  }

  // string game_biz = 36;
  if (this->game_biz().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->game_biz().data(), static_cast<int>(this->game_biz().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RegionInfo.game_biz");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->game_biz(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RegionInfo)
  return target;
}

size_t RegionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RegionInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string gateserver_ip = 1;
  if (this->gateserver_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gateserver_ip());
  }

  // string pay_callback_url = 3;
  if (this->pay_callback_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pay_callback_url());
  }

  // string area_type = 7;
  if (this->area_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->area_type());
  }

  // string resource_url = 8;
  if (this->resource_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resource_url());
  }

  // string data_url = 9;
  if (this->data_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data_url());
  }

  // string feedback_url = 10;
  if (this->feedback_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->feedback_url());
  }

  // string bulletin_url = 11;
  if (this->bulletin_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bulletin_url());
  }

  // string resource_url_bak = 12;
  if (this->resource_url_bak().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resource_url_bak());
  }

  // string data_url_bak = 13;
  if (this->data_url_bak().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data_url_bak());
  }

  // string handbook_url = 16;
  if (this->handbook_url().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->handbook_url());
  }

  // string client_data_md5 = 19;
  if (this->client_data_md5().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_data_md5());
  }

  // string client_silence_data_md5 = 20;
  if (this->client_silence_data_md5().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_silence_data_md5());
  }

  // bytes secret_key = 23;
  if (this->secret_key().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->secret_key());
  }

  // string official_community_url = 24;
  if (this->official_community_url().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->official_community_url());
  }

  // string client_version_suffix = 26;
  if (this->client_version_suffix().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_version_suffix());
  }

  // string client_silence_version_suffix = 27;
  if (this->client_silence_version_suffix().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_silence_version_suffix());
  }

  // string gateserver_domain_name = 29;
  if (this->gateserver_domain_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gateserver_domain_name());
  }

  // string user_center_url = 30;
  if (this->user_center_url().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_center_url());
  }

  // string account_bind_url = 31;
  if (this->account_bind_url().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_bind_url());
  }

  // string cdkey_url = 32;
  if (this->cdkey_url().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cdkey_url());
  }

  // string privacy_policy_url = 33;
  if (this->privacy_policy_url().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->privacy_policy_url());
  }

  // string next_resource_url = 34;
  if (this->next_resource_url().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_resource_url());
  }

  // string game_biz = 36;
  if (this->game_biz().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->game_biz());
  }

  // .proto.ResVersionConfig res_version_config = 22;
  if (this->has_res_version_config()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->res_version_config_);
  }

  // .proto.ResVersionConfig next_res_version_config = 35;
  if (this->has_next_res_version_config()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->next_res_version_config_);
  }

  // uint32 gateserver_port = 2;
  if (this->gateserver_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gateserver_port());
  }

  // uint32 client_data_version = 14;
  if (this->client_data_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->client_data_version());
  }

  // uint32 client_silence_data_version = 18;
  if (this->client_silence_data_version() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->client_silence_data_version());
  }

  // bool use_gateserver_domain_name = 28;
  if (this->use_gateserver_domain_name() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.RegionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.RegionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.RegionInfo)
    MergeFrom(*source);
  }
}

void RegionInfo::MergeFrom(const RegionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RegionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gateserver_ip().size() > 0) {

    gateserver_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateserver_ip_);
  }
  if (from.pay_callback_url().size() > 0) {

    pay_callback_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pay_callback_url_);
  }
  if (from.area_type().size() > 0) {

    area_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.area_type_);
  }
  if (from.resource_url().size() > 0) {

    resource_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource_url_);
  }
  if (from.data_url().size() > 0) {

    data_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_url_);
  }
  if (from.feedback_url().size() > 0) {

    feedback_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feedback_url_);
  }
  if (from.bulletin_url().size() > 0) {

    bulletin_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bulletin_url_);
  }
  if (from.resource_url_bak().size() > 0) {

    resource_url_bak_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource_url_bak_);
  }
  if (from.data_url_bak().size() > 0) {

    data_url_bak_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_url_bak_);
  }
  if (from.handbook_url().size() > 0) {

    handbook_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.handbook_url_);
  }
  if (from.client_data_md5().size() > 0) {

    client_data_md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_data_md5_);
  }
  if (from.client_silence_data_md5().size() > 0) {

    client_silence_data_md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_silence_data_md5_);
  }
  if (from.secret_key().size() > 0) {

    secret_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_key_);
  }
  if (from.official_community_url().size() > 0) {

    official_community_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.official_community_url_);
  }
  if (from.client_version_suffix().size() > 0) {

    client_version_suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_version_suffix_);
  }
  if (from.client_silence_version_suffix().size() > 0) {

    client_silence_version_suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_silence_version_suffix_);
  }
  if (from.gateserver_domain_name().size() > 0) {

    gateserver_domain_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateserver_domain_name_);
  }
  if (from.user_center_url().size() > 0) {

    user_center_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_center_url_);
  }
  if (from.account_bind_url().size() > 0) {

    account_bind_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_bind_url_);
  }
  if (from.cdkey_url().size() > 0) {

    cdkey_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdkey_url_);
  }
  if (from.privacy_policy_url().size() > 0) {

    privacy_policy_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.privacy_policy_url_);
  }
  if (from.next_resource_url().size() > 0) {

    next_resource_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_resource_url_);
  }
  if (from.game_biz().size() > 0) {

    game_biz_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_biz_);
  }
  if (from.has_res_version_config()) {
    mutable_res_version_config()->::proto::ResVersionConfig::MergeFrom(from.res_version_config());
  }
  if (from.has_next_res_version_config()) {
    mutable_next_res_version_config()->::proto::ResVersionConfig::MergeFrom(from.next_res_version_config());
  }
  if (from.gateserver_port() != 0) {
    set_gateserver_port(from.gateserver_port());
  }
  if (from.client_data_version() != 0) {
    set_client_data_version(from.client_data_version());
  }
  if (from.client_silence_data_version() != 0) {
    set_client_silence_data_version(from.client_silence_data_version());
  }
  if (from.use_gateserver_domain_name() != 0) {
    set_use_gateserver_domain_name(from.use_gateserver_domain_name());
  }
}

void RegionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.RegionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionInfo::CopyFrom(const RegionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RegionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionInfo::IsInitialized() const {
  return true;
}

void RegionInfo::Swap(RegionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionInfo::InternalSwap(RegionInfo* other) {
  using std::swap;
  gateserver_ip_.Swap(&other->gateserver_ip_);
  pay_callback_url_.Swap(&other->pay_callback_url_);
  area_type_.Swap(&other->area_type_);
  resource_url_.Swap(&other->resource_url_);
  data_url_.Swap(&other->data_url_);
  feedback_url_.Swap(&other->feedback_url_);
  bulletin_url_.Swap(&other->bulletin_url_);
  resource_url_bak_.Swap(&other->resource_url_bak_);
  data_url_bak_.Swap(&other->data_url_bak_);
  handbook_url_.Swap(&other->handbook_url_);
  client_data_md5_.Swap(&other->client_data_md5_);
  client_silence_data_md5_.Swap(&other->client_silence_data_md5_);
  secret_key_.Swap(&other->secret_key_);
  official_community_url_.Swap(&other->official_community_url_);
  client_version_suffix_.Swap(&other->client_version_suffix_);
  client_silence_version_suffix_.Swap(&other->client_silence_version_suffix_);
  gateserver_domain_name_.Swap(&other->gateserver_domain_name_);
  user_center_url_.Swap(&other->user_center_url_);
  account_bind_url_.Swap(&other->account_bind_url_);
  cdkey_url_.Swap(&other->cdkey_url_);
  privacy_policy_url_.Swap(&other->privacy_policy_url_);
  next_resource_url_.Swap(&other->next_resource_url_);
  game_biz_.Swap(&other->game_biz_);
  swap(res_version_config_, other->res_version_config_);
  swap(next_res_version_config_, other->next_res_version_config_);
  swap(gateserver_port_, other->gateserver_port_);
  swap(client_data_version_, other->client_data_version_);
  swap(client_silence_data_version_, other->client_silence_data_version_);
  swap(use_gateserver_domain_name_, other->use_gateserver_domain_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionInfo

// string gateserver_ip = 1;
void RegionInfo::clear_gateserver_ip() {
  gateserver_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionInfo::gateserver_ip() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.gateserver_ip)
  return gateserver_ip_.GetNoArena();
}
void RegionInfo::set_gateserver_ip(const ::std::string& value) {
  
  gateserver_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionInfo.gateserver_ip)
}
#if LANG_CXX11
void RegionInfo::set_gateserver_ip(::std::string&& value) {
  
  gateserver_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionInfo.gateserver_ip)
}
#endif
void RegionInfo::set_gateserver_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gateserver_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionInfo.gateserver_ip)
}
void RegionInfo::set_gateserver_ip(const char* value, size_t size) {
  
  gateserver_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionInfo.gateserver_ip)
}
::std::string* RegionInfo::mutable_gateserver_ip() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.gateserver_ip)
  return gateserver_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionInfo::release_gateserver_ip() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.gateserver_ip)
  
  return gateserver_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionInfo::set_allocated_gateserver_ip(::std::string* gateserver_ip) {
  if (gateserver_ip != NULL) {
    
  } else {
    
  }
  gateserver_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateserver_ip);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.gateserver_ip)
}

// uint32 gateserver_port = 2;
void RegionInfo::clear_gateserver_port() {
  gateserver_port_ = 0u;
}
::google::protobuf::uint32 RegionInfo::gateserver_port() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.gateserver_port)
  return gateserver_port_;
}
void RegionInfo::set_gateserver_port(::google::protobuf::uint32 value) {
  
  gateserver_port_ = value;
  // @@protoc_insertion_point(field_set:proto.RegionInfo.gateserver_port)
}

// string pay_callback_url = 3;
void RegionInfo::clear_pay_callback_url() {
  pay_callback_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionInfo::pay_callback_url() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.pay_callback_url)
  return pay_callback_url_.GetNoArena();
}
void RegionInfo::set_pay_callback_url(const ::std::string& value) {
  
  pay_callback_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionInfo.pay_callback_url)
}
#if LANG_CXX11
void RegionInfo::set_pay_callback_url(::std::string&& value) {
  
  pay_callback_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionInfo.pay_callback_url)
}
#endif
void RegionInfo::set_pay_callback_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pay_callback_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionInfo.pay_callback_url)
}
void RegionInfo::set_pay_callback_url(const char* value, size_t size) {
  
  pay_callback_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionInfo.pay_callback_url)
}
::std::string* RegionInfo::mutable_pay_callback_url() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.pay_callback_url)
  return pay_callback_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionInfo::release_pay_callback_url() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.pay_callback_url)
  
  return pay_callback_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionInfo::set_allocated_pay_callback_url(::std::string* pay_callback_url) {
  if (pay_callback_url != NULL) {
    
  } else {
    
  }
  pay_callback_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pay_callback_url);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.pay_callback_url)
}

// string area_type = 7;
void RegionInfo::clear_area_type() {
  area_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionInfo::area_type() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.area_type)
  return area_type_.GetNoArena();
}
void RegionInfo::set_area_type(const ::std::string& value) {
  
  area_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionInfo.area_type)
}
#if LANG_CXX11
void RegionInfo::set_area_type(::std::string&& value) {
  
  area_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionInfo.area_type)
}
#endif
void RegionInfo::set_area_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  area_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionInfo.area_type)
}
void RegionInfo::set_area_type(const char* value, size_t size) {
  
  area_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionInfo.area_type)
}
::std::string* RegionInfo::mutable_area_type() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.area_type)
  return area_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionInfo::release_area_type() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.area_type)
  
  return area_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionInfo::set_allocated_area_type(::std::string* area_type) {
  if (area_type != NULL) {
    
  } else {
    
  }
  area_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), area_type);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.area_type)
}

// string resource_url = 8;
void RegionInfo::clear_resource_url() {
  resource_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionInfo::resource_url() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.resource_url)
  return resource_url_.GetNoArena();
}
void RegionInfo::set_resource_url(const ::std::string& value) {
  
  resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionInfo.resource_url)
}
#if LANG_CXX11
void RegionInfo::set_resource_url(::std::string&& value) {
  
  resource_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionInfo.resource_url)
}
#endif
void RegionInfo::set_resource_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionInfo.resource_url)
}
void RegionInfo::set_resource_url(const char* value, size_t size) {
  
  resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionInfo.resource_url)
}
::std::string* RegionInfo::mutable_resource_url() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.resource_url)
  return resource_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionInfo::release_resource_url() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.resource_url)
  
  return resource_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionInfo::set_allocated_resource_url(::std::string* resource_url) {
  if (resource_url != NULL) {
    
  } else {
    
  }
  resource_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource_url);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.resource_url)
}

// string data_url = 9;
void RegionInfo::clear_data_url() {
  data_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionInfo::data_url() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.data_url)
  return data_url_.GetNoArena();
}
void RegionInfo::set_data_url(const ::std::string& value) {
  
  data_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionInfo.data_url)
}
#if LANG_CXX11
void RegionInfo::set_data_url(::std::string&& value) {
  
  data_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionInfo.data_url)
}
#endif
void RegionInfo::set_data_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionInfo.data_url)
}
void RegionInfo::set_data_url(const char* value, size_t size) {
  
  data_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionInfo.data_url)
}
::std::string* RegionInfo::mutable_data_url() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.data_url)
  return data_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionInfo::release_data_url() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.data_url)
  
  return data_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionInfo::set_allocated_data_url(::std::string* data_url) {
  if (data_url != NULL) {
    
  } else {
    
  }
  data_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_url);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.data_url)
}

// string feedback_url = 10;
void RegionInfo::clear_feedback_url() {
  feedback_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionInfo::feedback_url() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.feedback_url)
  return feedback_url_.GetNoArena();
}
void RegionInfo::set_feedback_url(const ::std::string& value) {
  
  feedback_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionInfo.feedback_url)
}
#if LANG_CXX11
void RegionInfo::set_feedback_url(::std::string&& value) {
  
  feedback_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionInfo.feedback_url)
}
#endif
void RegionInfo::set_feedback_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  feedback_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionInfo.feedback_url)
}
void RegionInfo::set_feedback_url(const char* value, size_t size) {
  
  feedback_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionInfo.feedback_url)
}
::std::string* RegionInfo::mutable_feedback_url() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.feedback_url)
  return feedback_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionInfo::release_feedback_url() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.feedback_url)
  
  return feedback_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionInfo::set_allocated_feedback_url(::std::string* feedback_url) {
  if (feedback_url != NULL) {
    
  } else {
    
  }
  feedback_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feedback_url);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.feedback_url)
}

// string bulletin_url = 11;
void RegionInfo::clear_bulletin_url() {
  bulletin_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionInfo::bulletin_url() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.bulletin_url)
  return bulletin_url_.GetNoArena();
}
void RegionInfo::set_bulletin_url(const ::std::string& value) {
  
  bulletin_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionInfo.bulletin_url)
}
#if LANG_CXX11
void RegionInfo::set_bulletin_url(::std::string&& value) {
  
  bulletin_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionInfo.bulletin_url)
}
#endif
void RegionInfo::set_bulletin_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bulletin_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionInfo.bulletin_url)
}
void RegionInfo::set_bulletin_url(const char* value, size_t size) {
  
  bulletin_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionInfo.bulletin_url)
}
::std::string* RegionInfo::mutable_bulletin_url() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.bulletin_url)
  return bulletin_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionInfo::release_bulletin_url() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.bulletin_url)
  
  return bulletin_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionInfo::set_allocated_bulletin_url(::std::string* bulletin_url) {
  if (bulletin_url != NULL) {
    
  } else {
    
  }
  bulletin_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bulletin_url);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.bulletin_url)
}

// string resource_url_bak = 12;
void RegionInfo::clear_resource_url_bak() {
  resource_url_bak_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionInfo::resource_url_bak() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.resource_url_bak)
  return resource_url_bak_.GetNoArena();
}
void RegionInfo::set_resource_url_bak(const ::std::string& value) {
  
  resource_url_bak_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionInfo.resource_url_bak)
}
#if LANG_CXX11
void RegionInfo::set_resource_url_bak(::std::string&& value) {
  
  resource_url_bak_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionInfo.resource_url_bak)
}
#endif
void RegionInfo::set_resource_url_bak(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resource_url_bak_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionInfo.resource_url_bak)
}
void RegionInfo::set_resource_url_bak(const char* value, size_t size) {
  
  resource_url_bak_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionInfo.resource_url_bak)
}
::std::string* RegionInfo::mutable_resource_url_bak() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.resource_url_bak)
  return resource_url_bak_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionInfo::release_resource_url_bak() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.resource_url_bak)
  
  return resource_url_bak_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionInfo::set_allocated_resource_url_bak(::std::string* resource_url_bak) {
  if (resource_url_bak != NULL) {
    
  } else {
    
  }
  resource_url_bak_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource_url_bak);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.resource_url_bak)
}

// string data_url_bak = 13;
void RegionInfo::clear_data_url_bak() {
  data_url_bak_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionInfo::data_url_bak() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.data_url_bak)
  return data_url_bak_.GetNoArena();
}
void RegionInfo::set_data_url_bak(const ::std::string& value) {
  
  data_url_bak_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionInfo.data_url_bak)
}
#if LANG_CXX11
void RegionInfo::set_data_url_bak(::std::string&& value) {
  
  data_url_bak_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionInfo.data_url_bak)
}
#endif
void RegionInfo::set_data_url_bak(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_url_bak_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionInfo.data_url_bak)
}
void RegionInfo::set_data_url_bak(const char* value, size_t size) {
  
  data_url_bak_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionInfo.data_url_bak)
}
::std::string* RegionInfo::mutable_data_url_bak() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.data_url_bak)
  return data_url_bak_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionInfo::release_data_url_bak() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.data_url_bak)
  
  return data_url_bak_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionInfo::set_allocated_data_url_bak(::std::string* data_url_bak) {
  if (data_url_bak != NULL) {
    
  } else {
    
  }
  data_url_bak_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_url_bak);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.data_url_bak)
}

// uint32 client_data_version = 14;
void RegionInfo::clear_client_data_version() {
  client_data_version_ = 0u;
}
::google::protobuf::uint32 RegionInfo::client_data_version() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.client_data_version)
  return client_data_version_;
}
void RegionInfo::set_client_data_version(::google::protobuf::uint32 value) {
  
  client_data_version_ = value;
  // @@protoc_insertion_point(field_set:proto.RegionInfo.client_data_version)
}

// string handbook_url = 16;
void RegionInfo::clear_handbook_url() {
  handbook_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionInfo::handbook_url() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.handbook_url)
  return handbook_url_.GetNoArena();
}
void RegionInfo::set_handbook_url(const ::std::string& value) {
  
  handbook_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionInfo.handbook_url)
}
#if LANG_CXX11
void RegionInfo::set_handbook_url(::std::string&& value) {
  
  handbook_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionInfo.handbook_url)
}
#endif
void RegionInfo::set_handbook_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  handbook_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionInfo.handbook_url)
}
void RegionInfo::set_handbook_url(const char* value, size_t size) {
  
  handbook_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionInfo.handbook_url)
}
::std::string* RegionInfo::mutable_handbook_url() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.handbook_url)
  return handbook_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionInfo::release_handbook_url() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.handbook_url)
  
  return handbook_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionInfo::set_allocated_handbook_url(::std::string* handbook_url) {
  if (handbook_url != NULL) {
    
  } else {
    
  }
  handbook_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handbook_url);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.handbook_url)
}

// uint32 client_silence_data_version = 18;
void RegionInfo::clear_client_silence_data_version() {
  client_silence_data_version_ = 0u;
}
::google::protobuf::uint32 RegionInfo::client_silence_data_version() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.client_silence_data_version)
  return client_silence_data_version_;
}
void RegionInfo::set_client_silence_data_version(::google::protobuf::uint32 value) {
  
  client_silence_data_version_ = value;
  // @@protoc_insertion_point(field_set:proto.RegionInfo.client_silence_data_version)
}

// string client_data_md5 = 19;
void RegionInfo::clear_client_data_md5() {
  client_data_md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionInfo::client_data_md5() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.client_data_md5)
  return client_data_md5_.GetNoArena();
}
void RegionInfo::set_client_data_md5(const ::std::string& value) {
  
  client_data_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionInfo.client_data_md5)
}
#if LANG_CXX11
void RegionInfo::set_client_data_md5(::std::string&& value) {
  
  client_data_md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionInfo.client_data_md5)
}
#endif
void RegionInfo::set_client_data_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_data_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionInfo.client_data_md5)
}
void RegionInfo::set_client_data_md5(const char* value, size_t size) {
  
  client_data_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionInfo.client_data_md5)
}
::std::string* RegionInfo::mutable_client_data_md5() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.client_data_md5)
  return client_data_md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionInfo::release_client_data_md5() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.client_data_md5)
  
  return client_data_md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionInfo::set_allocated_client_data_md5(::std::string* client_data_md5) {
  if (client_data_md5 != NULL) {
    
  } else {
    
  }
  client_data_md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_data_md5);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.client_data_md5)
}

// string client_silence_data_md5 = 20;
void RegionInfo::clear_client_silence_data_md5() {
  client_silence_data_md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionInfo::client_silence_data_md5() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.client_silence_data_md5)
  return client_silence_data_md5_.GetNoArena();
}
void RegionInfo::set_client_silence_data_md5(const ::std::string& value) {
  
  client_silence_data_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionInfo.client_silence_data_md5)
}
#if LANG_CXX11
void RegionInfo::set_client_silence_data_md5(::std::string&& value) {
  
  client_silence_data_md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionInfo.client_silence_data_md5)
}
#endif
void RegionInfo::set_client_silence_data_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_silence_data_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionInfo.client_silence_data_md5)
}
void RegionInfo::set_client_silence_data_md5(const char* value, size_t size) {
  
  client_silence_data_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionInfo.client_silence_data_md5)
}
::std::string* RegionInfo::mutable_client_silence_data_md5() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.client_silence_data_md5)
  return client_silence_data_md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionInfo::release_client_silence_data_md5() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.client_silence_data_md5)
  
  return client_silence_data_md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionInfo::set_allocated_client_silence_data_md5(::std::string* client_silence_data_md5) {
  if (client_silence_data_md5 != NULL) {
    
  } else {
    
  }
  client_silence_data_md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_silence_data_md5);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.client_silence_data_md5)
}

// .proto.ResVersionConfig res_version_config = 22;
bool RegionInfo::has_res_version_config() const {
  return this != internal_default_instance() && res_version_config_ != NULL;
}
void RegionInfo::clear_res_version_config() {
  if (GetArenaNoVirtual() == NULL && res_version_config_ != NULL) delete res_version_config_;
  res_version_config_ = NULL;
}
const ::proto::ResVersionConfig& RegionInfo::res_version_config() const {
  const ::proto::ResVersionConfig* p = res_version_config_;
  // @@protoc_insertion_point(field_get:proto.RegionInfo.res_version_config)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ResVersionConfig*>(
      &::proto::_ResVersionConfig_default_instance_);
}
::proto::ResVersionConfig* RegionInfo::mutable_res_version_config() {
  
  if (res_version_config_ == NULL) {
    res_version_config_ = new ::proto::ResVersionConfig;
  }
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.res_version_config)
  return res_version_config_;
}
::proto::ResVersionConfig* RegionInfo::release_res_version_config() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.res_version_config)
  
  ::proto::ResVersionConfig* temp = res_version_config_;
  res_version_config_ = NULL;
  return temp;
}
void RegionInfo::set_allocated_res_version_config(::proto::ResVersionConfig* res_version_config) {
  delete res_version_config_;
  res_version_config_ = res_version_config;
  if (res_version_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.res_version_config)
}

// bytes secret_key = 23;
void RegionInfo::clear_secret_key() {
  secret_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionInfo::secret_key() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.secret_key)
  return secret_key_.GetNoArena();
}
void RegionInfo::set_secret_key(const ::std::string& value) {
  
  secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionInfo.secret_key)
}
#if LANG_CXX11
void RegionInfo::set_secret_key(::std::string&& value) {
  
  secret_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionInfo.secret_key)
}
#endif
void RegionInfo::set_secret_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionInfo.secret_key)
}
void RegionInfo::set_secret_key(const void* value, size_t size) {
  
  secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionInfo.secret_key)
}
::std::string* RegionInfo::mutable_secret_key() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.secret_key)
  return secret_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionInfo::release_secret_key() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.secret_key)
  
  return secret_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionInfo::set_allocated_secret_key(::std::string* secret_key) {
  if (secret_key != NULL) {
    
  } else {
    
  }
  secret_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret_key);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.secret_key)
}

// string official_community_url = 24;
void RegionInfo::clear_official_community_url() {
  official_community_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionInfo::official_community_url() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.official_community_url)
  return official_community_url_.GetNoArena();
}
void RegionInfo::set_official_community_url(const ::std::string& value) {
  
  official_community_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionInfo.official_community_url)
}
#if LANG_CXX11
void RegionInfo::set_official_community_url(::std::string&& value) {
  
  official_community_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionInfo.official_community_url)
}
#endif
void RegionInfo::set_official_community_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  official_community_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionInfo.official_community_url)
}
void RegionInfo::set_official_community_url(const char* value, size_t size) {
  
  official_community_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionInfo.official_community_url)
}
::std::string* RegionInfo::mutable_official_community_url() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.official_community_url)
  return official_community_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionInfo::release_official_community_url() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.official_community_url)
  
  return official_community_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionInfo::set_allocated_official_community_url(::std::string* official_community_url) {
  if (official_community_url != NULL) {
    
  } else {
    
  }
  official_community_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), official_community_url);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.official_community_url)
}

// string client_version_suffix = 26;
void RegionInfo::clear_client_version_suffix() {
  client_version_suffix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionInfo::client_version_suffix() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.client_version_suffix)
  return client_version_suffix_.GetNoArena();
}
void RegionInfo::set_client_version_suffix(const ::std::string& value) {
  
  client_version_suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionInfo.client_version_suffix)
}
#if LANG_CXX11
void RegionInfo::set_client_version_suffix(::std::string&& value) {
  
  client_version_suffix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionInfo.client_version_suffix)
}
#endif
void RegionInfo::set_client_version_suffix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_version_suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionInfo.client_version_suffix)
}
void RegionInfo::set_client_version_suffix(const char* value, size_t size) {
  
  client_version_suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionInfo.client_version_suffix)
}
::std::string* RegionInfo::mutable_client_version_suffix() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.client_version_suffix)
  return client_version_suffix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionInfo::release_client_version_suffix() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.client_version_suffix)
  
  return client_version_suffix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionInfo::set_allocated_client_version_suffix(::std::string* client_version_suffix) {
  if (client_version_suffix != NULL) {
    
  } else {
    
  }
  client_version_suffix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_version_suffix);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.client_version_suffix)
}

// string client_silence_version_suffix = 27;
void RegionInfo::clear_client_silence_version_suffix() {
  client_silence_version_suffix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionInfo::client_silence_version_suffix() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.client_silence_version_suffix)
  return client_silence_version_suffix_.GetNoArena();
}
void RegionInfo::set_client_silence_version_suffix(const ::std::string& value) {
  
  client_silence_version_suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionInfo.client_silence_version_suffix)
}
#if LANG_CXX11
void RegionInfo::set_client_silence_version_suffix(::std::string&& value) {
  
  client_silence_version_suffix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionInfo.client_silence_version_suffix)
}
#endif
void RegionInfo::set_client_silence_version_suffix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_silence_version_suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionInfo.client_silence_version_suffix)
}
void RegionInfo::set_client_silence_version_suffix(const char* value, size_t size) {
  
  client_silence_version_suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionInfo.client_silence_version_suffix)
}
::std::string* RegionInfo::mutable_client_silence_version_suffix() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.client_silence_version_suffix)
  return client_silence_version_suffix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionInfo::release_client_silence_version_suffix() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.client_silence_version_suffix)
  
  return client_silence_version_suffix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionInfo::set_allocated_client_silence_version_suffix(::std::string* client_silence_version_suffix) {
  if (client_silence_version_suffix != NULL) {
    
  } else {
    
  }
  client_silence_version_suffix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_silence_version_suffix);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.client_silence_version_suffix)
}

// bool use_gateserver_domain_name = 28;
void RegionInfo::clear_use_gateserver_domain_name() {
  use_gateserver_domain_name_ = false;
}
bool RegionInfo::use_gateserver_domain_name() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.use_gateserver_domain_name)
  return use_gateserver_domain_name_;
}
void RegionInfo::set_use_gateserver_domain_name(bool value) {
  
  use_gateserver_domain_name_ = value;
  // @@protoc_insertion_point(field_set:proto.RegionInfo.use_gateserver_domain_name)
}

// string gateserver_domain_name = 29;
void RegionInfo::clear_gateserver_domain_name() {
  gateserver_domain_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionInfo::gateserver_domain_name() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.gateserver_domain_name)
  return gateserver_domain_name_.GetNoArena();
}
void RegionInfo::set_gateserver_domain_name(const ::std::string& value) {
  
  gateserver_domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionInfo.gateserver_domain_name)
}
#if LANG_CXX11
void RegionInfo::set_gateserver_domain_name(::std::string&& value) {
  
  gateserver_domain_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionInfo.gateserver_domain_name)
}
#endif
void RegionInfo::set_gateserver_domain_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gateserver_domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionInfo.gateserver_domain_name)
}
void RegionInfo::set_gateserver_domain_name(const char* value, size_t size) {
  
  gateserver_domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionInfo.gateserver_domain_name)
}
::std::string* RegionInfo::mutable_gateserver_domain_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.gateserver_domain_name)
  return gateserver_domain_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionInfo::release_gateserver_domain_name() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.gateserver_domain_name)
  
  return gateserver_domain_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionInfo::set_allocated_gateserver_domain_name(::std::string* gateserver_domain_name) {
  if (gateserver_domain_name != NULL) {
    
  } else {
    
  }
  gateserver_domain_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateserver_domain_name);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.gateserver_domain_name)
}

// string user_center_url = 30;
void RegionInfo::clear_user_center_url() {
  user_center_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionInfo::user_center_url() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.user_center_url)
  return user_center_url_.GetNoArena();
}
void RegionInfo::set_user_center_url(const ::std::string& value) {
  
  user_center_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionInfo.user_center_url)
}
#if LANG_CXX11
void RegionInfo::set_user_center_url(::std::string&& value) {
  
  user_center_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionInfo.user_center_url)
}
#endif
void RegionInfo::set_user_center_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_center_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionInfo.user_center_url)
}
void RegionInfo::set_user_center_url(const char* value, size_t size) {
  
  user_center_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionInfo.user_center_url)
}
::std::string* RegionInfo::mutable_user_center_url() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.user_center_url)
  return user_center_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionInfo::release_user_center_url() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.user_center_url)
  
  return user_center_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionInfo::set_allocated_user_center_url(::std::string* user_center_url) {
  if (user_center_url != NULL) {
    
  } else {
    
  }
  user_center_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_center_url);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.user_center_url)
}

// string account_bind_url = 31;
void RegionInfo::clear_account_bind_url() {
  account_bind_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionInfo::account_bind_url() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.account_bind_url)
  return account_bind_url_.GetNoArena();
}
void RegionInfo::set_account_bind_url(const ::std::string& value) {
  
  account_bind_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionInfo.account_bind_url)
}
#if LANG_CXX11
void RegionInfo::set_account_bind_url(::std::string&& value) {
  
  account_bind_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionInfo.account_bind_url)
}
#endif
void RegionInfo::set_account_bind_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_bind_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionInfo.account_bind_url)
}
void RegionInfo::set_account_bind_url(const char* value, size_t size) {
  
  account_bind_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionInfo.account_bind_url)
}
::std::string* RegionInfo::mutable_account_bind_url() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.account_bind_url)
  return account_bind_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionInfo::release_account_bind_url() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.account_bind_url)
  
  return account_bind_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionInfo::set_allocated_account_bind_url(::std::string* account_bind_url) {
  if (account_bind_url != NULL) {
    
  } else {
    
  }
  account_bind_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_bind_url);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.account_bind_url)
}

// string cdkey_url = 32;
void RegionInfo::clear_cdkey_url() {
  cdkey_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionInfo::cdkey_url() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.cdkey_url)
  return cdkey_url_.GetNoArena();
}
void RegionInfo::set_cdkey_url(const ::std::string& value) {
  
  cdkey_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionInfo.cdkey_url)
}
#if LANG_CXX11
void RegionInfo::set_cdkey_url(::std::string&& value) {
  
  cdkey_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionInfo.cdkey_url)
}
#endif
void RegionInfo::set_cdkey_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cdkey_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionInfo.cdkey_url)
}
void RegionInfo::set_cdkey_url(const char* value, size_t size) {
  
  cdkey_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionInfo.cdkey_url)
}
::std::string* RegionInfo::mutable_cdkey_url() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.cdkey_url)
  return cdkey_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionInfo::release_cdkey_url() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.cdkey_url)
  
  return cdkey_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionInfo::set_allocated_cdkey_url(::std::string* cdkey_url) {
  if (cdkey_url != NULL) {
    
  } else {
    
  }
  cdkey_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdkey_url);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.cdkey_url)
}

// string privacy_policy_url = 33;
void RegionInfo::clear_privacy_policy_url() {
  privacy_policy_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionInfo::privacy_policy_url() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.privacy_policy_url)
  return privacy_policy_url_.GetNoArena();
}
void RegionInfo::set_privacy_policy_url(const ::std::string& value) {
  
  privacy_policy_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionInfo.privacy_policy_url)
}
#if LANG_CXX11
void RegionInfo::set_privacy_policy_url(::std::string&& value) {
  
  privacy_policy_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionInfo.privacy_policy_url)
}
#endif
void RegionInfo::set_privacy_policy_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  privacy_policy_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionInfo.privacy_policy_url)
}
void RegionInfo::set_privacy_policy_url(const char* value, size_t size) {
  
  privacy_policy_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionInfo.privacy_policy_url)
}
::std::string* RegionInfo::mutable_privacy_policy_url() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.privacy_policy_url)
  return privacy_policy_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionInfo::release_privacy_policy_url() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.privacy_policy_url)
  
  return privacy_policy_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionInfo::set_allocated_privacy_policy_url(::std::string* privacy_policy_url) {
  if (privacy_policy_url != NULL) {
    
  } else {
    
  }
  privacy_policy_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), privacy_policy_url);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.privacy_policy_url)
}

// string next_resource_url = 34;
void RegionInfo::clear_next_resource_url() {
  next_resource_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionInfo::next_resource_url() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.next_resource_url)
  return next_resource_url_.GetNoArena();
}
void RegionInfo::set_next_resource_url(const ::std::string& value) {
  
  next_resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionInfo.next_resource_url)
}
#if LANG_CXX11
void RegionInfo::set_next_resource_url(::std::string&& value) {
  
  next_resource_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionInfo.next_resource_url)
}
#endif
void RegionInfo::set_next_resource_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionInfo.next_resource_url)
}
void RegionInfo::set_next_resource_url(const char* value, size_t size) {
  
  next_resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionInfo.next_resource_url)
}
::std::string* RegionInfo::mutable_next_resource_url() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.next_resource_url)
  return next_resource_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionInfo::release_next_resource_url() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.next_resource_url)
  
  return next_resource_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionInfo::set_allocated_next_resource_url(::std::string* next_resource_url) {
  if (next_resource_url != NULL) {
    
  } else {
    
  }
  next_resource_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_resource_url);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.next_resource_url)
}

// .proto.ResVersionConfig next_res_version_config = 35;
bool RegionInfo::has_next_res_version_config() const {
  return this != internal_default_instance() && next_res_version_config_ != NULL;
}
void RegionInfo::clear_next_res_version_config() {
  if (GetArenaNoVirtual() == NULL && next_res_version_config_ != NULL) delete next_res_version_config_;
  next_res_version_config_ = NULL;
}
const ::proto::ResVersionConfig& RegionInfo::next_res_version_config() const {
  const ::proto::ResVersionConfig* p = next_res_version_config_;
  // @@protoc_insertion_point(field_get:proto.RegionInfo.next_res_version_config)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ResVersionConfig*>(
      &::proto::_ResVersionConfig_default_instance_);
}
::proto::ResVersionConfig* RegionInfo::mutable_next_res_version_config() {
  
  if (next_res_version_config_ == NULL) {
    next_res_version_config_ = new ::proto::ResVersionConfig;
  }
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.next_res_version_config)
  return next_res_version_config_;
}
::proto::ResVersionConfig* RegionInfo::release_next_res_version_config() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.next_res_version_config)
  
  ::proto::ResVersionConfig* temp = next_res_version_config_;
  next_res_version_config_ = NULL;
  return temp;
}
void RegionInfo::set_allocated_next_res_version_config(::proto::ResVersionConfig* next_res_version_config) {
  delete next_res_version_config_;
  next_res_version_config_ = next_res_version_config;
  if (next_res_version_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.next_res_version_config)
}

// string game_biz = 36;
void RegionInfo::clear_game_biz() {
  game_biz_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegionInfo::game_biz() const {
  // @@protoc_insertion_point(field_get:proto.RegionInfo.game_biz)
  return game_biz_.GetNoArena();
}
void RegionInfo::set_game_biz(const ::std::string& value) {
  
  game_biz_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RegionInfo.game_biz)
}
#if LANG_CXX11
void RegionInfo::set_game_biz(::std::string&& value) {
  
  game_biz_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RegionInfo.game_biz)
}
#endif
void RegionInfo::set_game_biz(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  game_biz_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RegionInfo.game_biz)
}
void RegionInfo::set_game_biz(const char* value, size_t size) {
  
  game_biz_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RegionInfo.game_biz)
}
::std::string* RegionInfo::mutable_game_biz() {
  
  // @@protoc_insertion_point(field_mutable:proto.RegionInfo.game_biz)
  return game_biz_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegionInfo::release_game_biz() {
  // @@protoc_insertion_point(field_release:proto.RegionInfo.game_biz)
  
  return game_biz_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegionInfo::set_allocated_game_biz(::std::string* game_biz) {
  if (game_biz != NULL) {
    
  } else {
    
  }
  game_biz_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_biz);
  // @@protoc_insertion_point(field_set_allocated:proto.RegionInfo.game_biz)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryCurrRegionHttpRsp::kRetcodeFieldNumber;
const int QueryCurrRegionHttpRsp::kMsgFieldNumber;
const int QueryCurrRegionHttpRsp::kRegionInfoFieldNumber;
const int QueryCurrRegionHttpRsp::kClientSecretKeyFieldNumber;
const int QueryCurrRegionHttpRsp::kRegionCustomConfigEncryptedFieldNumber;
const int QueryCurrRegionHttpRsp::kClientRegionCustomConfigEncryptedFieldNumber;
const int QueryCurrRegionHttpRsp::kForceUdpateFieldNumber;
const int QueryCurrRegionHttpRsp::kStopServerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryCurrRegionHttpRsp::QueryCurrRegionHttpRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.QueryCurrRegionHttpRsp)
}
QueryCurrRegionHttpRsp::QueryCurrRegionHttpRsp(const QueryCurrRegionHttpRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  client_secret_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_secret_key().size() > 0) {
    client_secret_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_secret_key_);
  }
  region_custom_config_encrypted_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.region_custom_config_encrypted().size() > 0) {
    region_custom_config_encrypted_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_custom_config_encrypted_);
  }
  client_region_custom_config_encrypted_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_region_custom_config_encrypted().size() > 0) {
    client_region_custom_config_encrypted_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_region_custom_config_encrypted_);
  }
  if (from.has_region_info()) {
    region_info_ = new ::proto::RegionInfo(*from.region_info_);
  } else {
    region_info_ = NULL;
  }
  retcode_ = from.retcode_;
  clear_has_detail();
  switch (from.detail_case()) {
    case kForceUdpate: {
      mutable_force_udpate()->::proto::ForceUpdateInfo::MergeFrom(from.force_udpate());
      break;
    }
    case kStopServer: {
      mutable_stop_server()->::proto::StopServerInfo::MergeFrom(from.stop_server());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.QueryCurrRegionHttpRsp)
}

void QueryCurrRegionHttpRsp::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_secret_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_custom_config_encrypted_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_region_custom_config_encrypted_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&region_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&region_info_)) + sizeof(retcode_));
  clear_has_detail();
  _cached_size_ = 0;
}

QueryCurrRegionHttpRsp::~QueryCurrRegionHttpRsp() {
  // @@protoc_insertion_point(destructor:proto.QueryCurrRegionHttpRsp)
  SharedDtor();
}

void QueryCurrRegionHttpRsp::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_secret_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_custom_config_encrypted_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_region_custom_config_encrypted_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete region_info_;
  if (has_detail()) {
    clear_detail();
  }
}

void QueryCurrRegionHttpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryCurrRegionHttpRsp::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryCurrRegionHttpRsp& QueryCurrRegionHttpRsp::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryCurrRegionHttpRsp* QueryCurrRegionHttpRsp::New(::google::protobuf::Arena* arena) const {
  QueryCurrRegionHttpRsp* n = new QueryCurrRegionHttpRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryCurrRegionHttpRsp::clear_detail() {
// @@protoc_insertion_point(one_of_clear_start:proto.QueryCurrRegionHttpRsp)
  switch (detail_case()) {
    case kForceUdpate: {
      delete detail_.force_udpate_;
      break;
    }
    case kStopServer: {
      delete detail_.stop_server_;
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DETAIL_NOT_SET;
}


void QueryCurrRegionHttpRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.QueryCurrRegionHttpRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_secret_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_custom_config_encrypted_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_region_custom_config_encrypted_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && region_info_ != NULL) {
    delete region_info_;
  }
  region_info_ = NULL;
  retcode_ = 0;
  clear_detail();
  _internal_metadata_.Clear();
}

bool QueryCurrRegionHttpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.QueryCurrRegionHttpRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.QueryCurrRegionHttpRsp.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.RegionInfo region_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ForceUpdateInfo force_udpate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_force_udpate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.StopServerInfo stop_server = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes client_secret_key = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_secret_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes region_custom_config_encrypted = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_region_custom_config_encrypted()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes client_region_custom_config_encrypted = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_region_custom_config_encrypted()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.QueryCurrRegionHttpRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.QueryCurrRegionHttpRsp)
  return false;
#undef DO_
}

void QueryCurrRegionHttpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.QueryCurrRegionHttpRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.QueryCurrRegionHttpRsp.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // .proto.RegionInfo region_info = 3;
  if (this->has_region_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->region_info_, output);
  }

  // .proto.ForceUpdateInfo force_udpate = 4;
  if (has_force_udpate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *detail_.force_udpate_, output);
  }

  // .proto.StopServerInfo stop_server = 5;
  if (has_stop_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *detail_.stop_server_, output);
  }

  // bytes client_secret_key = 11;
  if (this->client_secret_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->client_secret_key(), output);
  }

  // bytes region_custom_config_encrypted = 12;
  if (this->region_custom_config_encrypted().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->region_custom_config_encrypted(), output);
  }

  // bytes client_region_custom_config_encrypted = 13;
  if (this->client_region_custom_config_encrypted().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->client_region_custom_config_encrypted(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.QueryCurrRegionHttpRsp)
}

::google::protobuf::uint8* QueryCurrRegionHttpRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.QueryCurrRegionHttpRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.QueryCurrRegionHttpRsp.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // .proto.RegionInfo region_info = 3;
  if (this->has_region_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->region_info_, deterministic, target);
  }

  // .proto.ForceUpdateInfo force_udpate = 4;
  if (has_force_udpate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *detail_.force_udpate_, deterministic, target);
  }

  // .proto.StopServerInfo stop_server = 5;
  if (has_stop_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *detail_.stop_server_, deterministic, target);
  }

  // bytes client_secret_key = 11;
  if (this->client_secret_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->client_secret_key(), target);
  }

  // bytes region_custom_config_encrypted = 12;
  if (this->region_custom_config_encrypted().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->region_custom_config_encrypted(), target);
  }

  // bytes client_region_custom_config_encrypted = 13;
  if (this->client_region_custom_config_encrypted().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->client_region_custom_config_encrypted(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.QueryCurrRegionHttpRsp)
  return target;
}

size_t QueryCurrRegionHttpRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.QueryCurrRegionHttpRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // bytes client_secret_key = 11;
  if (this->client_secret_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->client_secret_key());
  }

  // bytes region_custom_config_encrypted = 12;
  if (this->region_custom_config_encrypted().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->region_custom_config_encrypted());
  }

  // bytes client_region_custom_config_encrypted = 13;
  if (this->client_region_custom_config_encrypted().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->client_region_custom_config_encrypted());
  }

  // .proto.RegionInfo region_info = 3;
  if (this->has_region_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_info_);
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  switch (detail_case()) {
    // .proto.ForceUpdateInfo force_udpate = 4;
    case kForceUdpate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.force_udpate_);
      break;
    }
    // .proto.StopServerInfo stop_server = 5;
    case kStopServer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.stop_server_);
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryCurrRegionHttpRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.QueryCurrRegionHttpRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryCurrRegionHttpRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryCurrRegionHttpRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.QueryCurrRegionHttpRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.QueryCurrRegionHttpRsp)
    MergeFrom(*source);
  }
}

void QueryCurrRegionHttpRsp::MergeFrom(const QueryCurrRegionHttpRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.QueryCurrRegionHttpRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.client_secret_key().size() > 0) {

    client_secret_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_secret_key_);
  }
  if (from.region_custom_config_encrypted().size() > 0) {

    region_custom_config_encrypted_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_custom_config_encrypted_);
  }
  if (from.client_region_custom_config_encrypted().size() > 0) {

    client_region_custom_config_encrypted_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_region_custom_config_encrypted_);
  }
  if (from.has_region_info()) {
    mutable_region_info()->::proto::RegionInfo::MergeFrom(from.region_info());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  switch (from.detail_case()) {
    case kForceUdpate: {
      mutable_force_udpate()->::proto::ForceUpdateInfo::MergeFrom(from.force_udpate());
      break;
    }
    case kStopServer: {
      mutable_stop_server()->::proto::StopServerInfo::MergeFrom(from.stop_server());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
}

void QueryCurrRegionHttpRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.QueryCurrRegionHttpRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryCurrRegionHttpRsp::CopyFrom(const QueryCurrRegionHttpRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.QueryCurrRegionHttpRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryCurrRegionHttpRsp::IsInitialized() const {
  return true;
}

void QueryCurrRegionHttpRsp::Swap(QueryCurrRegionHttpRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryCurrRegionHttpRsp::InternalSwap(QueryCurrRegionHttpRsp* other) {
  using std::swap;
  msg_.Swap(&other->msg_);
  client_secret_key_.Swap(&other->client_secret_key_);
  region_custom_config_encrypted_.Swap(&other->region_custom_config_encrypted_);
  client_region_custom_config_encrypted_.Swap(&other->client_region_custom_config_encrypted_);
  swap(region_info_, other->region_info_);
  swap(retcode_, other->retcode_);
  swap(detail_, other->detail_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryCurrRegionHttpRsp::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryCurrRegionHttpRsp

// int32 retcode = 1;
void QueryCurrRegionHttpRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 QueryCurrRegionHttpRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.QueryCurrRegionHttpRsp.retcode)
  return retcode_;
}
void QueryCurrRegionHttpRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.QueryCurrRegionHttpRsp.retcode)
}

// string msg = 2;
void QueryCurrRegionHttpRsp::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryCurrRegionHttpRsp::msg() const {
  // @@protoc_insertion_point(field_get:proto.QueryCurrRegionHttpRsp.msg)
  return msg_.GetNoArena();
}
void QueryCurrRegionHttpRsp::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.QueryCurrRegionHttpRsp.msg)
}
#if LANG_CXX11
void QueryCurrRegionHttpRsp::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.QueryCurrRegionHttpRsp.msg)
}
#endif
void QueryCurrRegionHttpRsp::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.QueryCurrRegionHttpRsp.msg)
}
void QueryCurrRegionHttpRsp::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.QueryCurrRegionHttpRsp.msg)
}
::std::string* QueryCurrRegionHttpRsp::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:proto.QueryCurrRegionHttpRsp.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryCurrRegionHttpRsp::release_msg() {
  // @@protoc_insertion_point(field_release:proto.QueryCurrRegionHttpRsp.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryCurrRegionHttpRsp::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:proto.QueryCurrRegionHttpRsp.msg)
}

// .proto.RegionInfo region_info = 3;
bool QueryCurrRegionHttpRsp::has_region_info() const {
  return this != internal_default_instance() && region_info_ != NULL;
}
void QueryCurrRegionHttpRsp::clear_region_info() {
  if (GetArenaNoVirtual() == NULL && region_info_ != NULL) delete region_info_;
  region_info_ = NULL;
}
const ::proto::RegionInfo& QueryCurrRegionHttpRsp::region_info() const {
  const ::proto::RegionInfo* p = region_info_;
  // @@protoc_insertion_point(field_get:proto.QueryCurrRegionHttpRsp.region_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::RegionInfo*>(
      &::proto::_RegionInfo_default_instance_);
}
::proto::RegionInfo* QueryCurrRegionHttpRsp::mutable_region_info() {
  
  if (region_info_ == NULL) {
    region_info_ = new ::proto::RegionInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.QueryCurrRegionHttpRsp.region_info)
  return region_info_;
}
::proto::RegionInfo* QueryCurrRegionHttpRsp::release_region_info() {
  // @@protoc_insertion_point(field_release:proto.QueryCurrRegionHttpRsp.region_info)
  
  ::proto::RegionInfo* temp = region_info_;
  region_info_ = NULL;
  return temp;
}
void QueryCurrRegionHttpRsp::set_allocated_region_info(::proto::RegionInfo* region_info) {
  delete region_info_;
  region_info_ = region_info;
  if (region_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.QueryCurrRegionHttpRsp.region_info)
}

// bytes client_secret_key = 11;
void QueryCurrRegionHttpRsp::clear_client_secret_key() {
  client_secret_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryCurrRegionHttpRsp::client_secret_key() const {
  // @@protoc_insertion_point(field_get:proto.QueryCurrRegionHttpRsp.client_secret_key)
  return client_secret_key_.GetNoArena();
}
void QueryCurrRegionHttpRsp::set_client_secret_key(const ::std::string& value) {
  
  client_secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.QueryCurrRegionHttpRsp.client_secret_key)
}
#if LANG_CXX11
void QueryCurrRegionHttpRsp::set_client_secret_key(::std::string&& value) {
  
  client_secret_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.QueryCurrRegionHttpRsp.client_secret_key)
}
#endif
void QueryCurrRegionHttpRsp::set_client_secret_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.QueryCurrRegionHttpRsp.client_secret_key)
}
void QueryCurrRegionHttpRsp::set_client_secret_key(const void* value, size_t size) {
  
  client_secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.QueryCurrRegionHttpRsp.client_secret_key)
}
::std::string* QueryCurrRegionHttpRsp::mutable_client_secret_key() {
  
  // @@protoc_insertion_point(field_mutable:proto.QueryCurrRegionHttpRsp.client_secret_key)
  return client_secret_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryCurrRegionHttpRsp::release_client_secret_key() {
  // @@protoc_insertion_point(field_release:proto.QueryCurrRegionHttpRsp.client_secret_key)
  
  return client_secret_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryCurrRegionHttpRsp::set_allocated_client_secret_key(::std::string* client_secret_key) {
  if (client_secret_key != NULL) {
    
  } else {
    
  }
  client_secret_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_secret_key);
  // @@protoc_insertion_point(field_set_allocated:proto.QueryCurrRegionHttpRsp.client_secret_key)
}

// bytes region_custom_config_encrypted = 12;
void QueryCurrRegionHttpRsp::clear_region_custom_config_encrypted() {
  region_custom_config_encrypted_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryCurrRegionHttpRsp::region_custom_config_encrypted() const {
  // @@protoc_insertion_point(field_get:proto.QueryCurrRegionHttpRsp.region_custom_config_encrypted)
  return region_custom_config_encrypted_.GetNoArena();
}
void QueryCurrRegionHttpRsp::set_region_custom_config_encrypted(const ::std::string& value) {
  
  region_custom_config_encrypted_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.QueryCurrRegionHttpRsp.region_custom_config_encrypted)
}
#if LANG_CXX11
void QueryCurrRegionHttpRsp::set_region_custom_config_encrypted(::std::string&& value) {
  
  region_custom_config_encrypted_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.QueryCurrRegionHttpRsp.region_custom_config_encrypted)
}
#endif
void QueryCurrRegionHttpRsp::set_region_custom_config_encrypted(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_custom_config_encrypted_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.QueryCurrRegionHttpRsp.region_custom_config_encrypted)
}
void QueryCurrRegionHttpRsp::set_region_custom_config_encrypted(const void* value, size_t size) {
  
  region_custom_config_encrypted_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.QueryCurrRegionHttpRsp.region_custom_config_encrypted)
}
::std::string* QueryCurrRegionHttpRsp::mutable_region_custom_config_encrypted() {
  
  // @@protoc_insertion_point(field_mutable:proto.QueryCurrRegionHttpRsp.region_custom_config_encrypted)
  return region_custom_config_encrypted_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryCurrRegionHttpRsp::release_region_custom_config_encrypted() {
  // @@protoc_insertion_point(field_release:proto.QueryCurrRegionHttpRsp.region_custom_config_encrypted)
  
  return region_custom_config_encrypted_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryCurrRegionHttpRsp::set_allocated_region_custom_config_encrypted(::std::string* region_custom_config_encrypted) {
  if (region_custom_config_encrypted != NULL) {
    
  } else {
    
  }
  region_custom_config_encrypted_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region_custom_config_encrypted);
  // @@protoc_insertion_point(field_set_allocated:proto.QueryCurrRegionHttpRsp.region_custom_config_encrypted)
}

// bytes client_region_custom_config_encrypted = 13;
void QueryCurrRegionHttpRsp::clear_client_region_custom_config_encrypted() {
  client_region_custom_config_encrypted_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryCurrRegionHttpRsp::client_region_custom_config_encrypted() const {
  // @@protoc_insertion_point(field_get:proto.QueryCurrRegionHttpRsp.client_region_custom_config_encrypted)
  return client_region_custom_config_encrypted_.GetNoArena();
}
void QueryCurrRegionHttpRsp::set_client_region_custom_config_encrypted(const ::std::string& value) {
  
  client_region_custom_config_encrypted_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.QueryCurrRegionHttpRsp.client_region_custom_config_encrypted)
}
#if LANG_CXX11
void QueryCurrRegionHttpRsp::set_client_region_custom_config_encrypted(::std::string&& value) {
  
  client_region_custom_config_encrypted_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.QueryCurrRegionHttpRsp.client_region_custom_config_encrypted)
}
#endif
void QueryCurrRegionHttpRsp::set_client_region_custom_config_encrypted(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_region_custom_config_encrypted_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.QueryCurrRegionHttpRsp.client_region_custom_config_encrypted)
}
void QueryCurrRegionHttpRsp::set_client_region_custom_config_encrypted(const void* value, size_t size) {
  
  client_region_custom_config_encrypted_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.QueryCurrRegionHttpRsp.client_region_custom_config_encrypted)
}
::std::string* QueryCurrRegionHttpRsp::mutable_client_region_custom_config_encrypted() {
  
  // @@protoc_insertion_point(field_mutable:proto.QueryCurrRegionHttpRsp.client_region_custom_config_encrypted)
  return client_region_custom_config_encrypted_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryCurrRegionHttpRsp::release_client_region_custom_config_encrypted() {
  // @@protoc_insertion_point(field_release:proto.QueryCurrRegionHttpRsp.client_region_custom_config_encrypted)
  
  return client_region_custom_config_encrypted_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryCurrRegionHttpRsp::set_allocated_client_region_custom_config_encrypted(::std::string* client_region_custom_config_encrypted) {
  if (client_region_custom_config_encrypted != NULL) {
    
  } else {
    
  }
  client_region_custom_config_encrypted_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_region_custom_config_encrypted);
  // @@protoc_insertion_point(field_set_allocated:proto.QueryCurrRegionHttpRsp.client_region_custom_config_encrypted)
}

// .proto.ForceUpdateInfo force_udpate = 4;
bool QueryCurrRegionHttpRsp::has_force_udpate() const {
  return detail_case() == kForceUdpate;
}
void QueryCurrRegionHttpRsp::set_has_force_udpate() {
  _oneof_case_[0] = kForceUdpate;
}
void QueryCurrRegionHttpRsp::clear_force_udpate() {
  if (has_force_udpate()) {
    delete detail_.force_udpate_;
    clear_has_detail();
  }
}
 const ::proto::ForceUpdateInfo& QueryCurrRegionHttpRsp::force_udpate() const {
  // @@protoc_insertion_point(field_get:proto.QueryCurrRegionHttpRsp.force_udpate)
  return has_force_udpate()
      ? *detail_.force_udpate_
      : ::proto::ForceUpdateInfo::default_instance();
}
::proto::ForceUpdateInfo* QueryCurrRegionHttpRsp::mutable_force_udpate() {
  if (!has_force_udpate()) {
    clear_detail();
    set_has_force_udpate();
    detail_.force_udpate_ = new ::proto::ForceUpdateInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.QueryCurrRegionHttpRsp.force_udpate)
  return detail_.force_udpate_;
}
::proto::ForceUpdateInfo* QueryCurrRegionHttpRsp::release_force_udpate() {
  // @@protoc_insertion_point(field_release:proto.QueryCurrRegionHttpRsp.force_udpate)
  if (has_force_udpate()) {
    clear_has_detail();
    ::proto::ForceUpdateInfo* temp = detail_.force_udpate_;
    detail_.force_udpate_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void QueryCurrRegionHttpRsp::set_allocated_force_udpate(::proto::ForceUpdateInfo* force_udpate) {
  clear_detail();
  if (force_udpate) {
    set_has_force_udpate();
    detail_.force_udpate_ = force_udpate;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.QueryCurrRegionHttpRsp.force_udpate)
}

// .proto.StopServerInfo stop_server = 5;
bool QueryCurrRegionHttpRsp::has_stop_server() const {
  return detail_case() == kStopServer;
}
void QueryCurrRegionHttpRsp::set_has_stop_server() {
  _oneof_case_[0] = kStopServer;
}
void QueryCurrRegionHttpRsp::clear_stop_server() {
  if (has_stop_server()) {
    delete detail_.stop_server_;
    clear_has_detail();
  }
}
 const ::proto::StopServerInfo& QueryCurrRegionHttpRsp::stop_server() const {
  // @@protoc_insertion_point(field_get:proto.QueryCurrRegionHttpRsp.stop_server)
  return has_stop_server()
      ? *detail_.stop_server_
      : ::proto::StopServerInfo::default_instance();
}
::proto::StopServerInfo* QueryCurrRegionHttpRsp::mutable_stop_server() {
  if (!has_stop_server()) {
    clear_detail();
    set_has_stop_server();
    detail_.stop_server_ = new ::proto::StopServerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.QueryCurrRegionHttpRsp.stop_server)
  return detail_.stop_server_;
}
::proto::StopServerInfo* QueryCurrRegionHttpRsp::release_stop_server() {
  // @@protoc_insertion_point(field_release:proto.QueryCurrRegionHttpRsp.stop_server)
  if (has_stop_server()) {
    clear_has_detail();
    ::proto::StopServerInfo* temp = detail_.stop_server_;
    detail_.stop_server_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void QueryCurrRegionHttpRsp::set_allocated_stop_server(::proto::StopServerInfo* stop_server) {
  clear_detail();
  if (stop_server) {
    set_has_stop_server();
    detail_.stop_server_ = stop_server;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.QueryCurrRegionHttpRsp.stop_server)
}

bool QueryCurrRegionHttpRsp::has_detail() const {
  return detail_case() != DETAIL_NOT_SET;
}
void QueryCurrRegionHttpRsp::clear_has_detail() {
  _oneof_case_[0] = DETAIL_NOT_SET;
}
QueryCurrRegionHttpRsp::DetailCase QueryCurrRegionHttpRsp::detail_case() const {
  return QueryCurrRegionHttpRsp::DetailCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerUidExtInfo::kRegPlatformFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerUidExtInfo::PlayerUidExtInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PlayerUidExtInfo)
}
PlayerUidExtInfo::PlayerUidExtInfo(const PlayerUidExtInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reg_platform_ = from.reg_platform_;
  // @@protoc_insertion_point(copy_constructor:proto.PlayerUidExtInfo)
}

void PlayerUidExtInfo::SharedCtor() {
  reg_platform_ = 0u;
  _cached_size_ = 0;
}

PlayerUidExtInfo::~PlayerUidExtInfo() {
  // @@protoc_insertion_point(destructor:proto.PlayerUidExtInfo)
  SharedDtor();
}

void PlayerUidExtInfo::SharedDtor() {
}

void PlayerUidExtInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerUidExtInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerUidExtInfo& PlayerUidExtInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerUidExtInfo* PlayerUidExtInfo::New(::google::protobuf::Arena* arena) const {
  PlayerUidExtInfo* n = new PlayerUidExtInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerUidExtInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PlayerUidExtInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reg_platform_ = 0u;
  _internal_metadata_.Clear();
}

bool PlayerUidExtInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PlayerUidExtInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 reg_platform = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_platform_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PlayerUidExtInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PlayerUidExtInfo)
  return false;
#undef DO_
}

void PlayerUidExtInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PlayerUidExtInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reg_platform = 1;
  if (this->reg_platform() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reg_platform(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PlayerUidExtInfo)
}

::google::protobuf::uint8* PlayerUidExtInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PlayerUidExtInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reg_platform = 1;
  if (this->reg_platform() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reg_platform(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PlayerUidExtInfo)
  return target;
}

size_t PlayerUidExtInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PlayerUidExtInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 reg_platform = 1;
  if (this->reg_platform() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reg_platform());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerUidExtInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PlayerUidExtInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerUidExtInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerUidExtInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PlayerUidExtInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PlayerUidExtInfo)
    MergeFrom(*source);
  }
}

void PlayerUidExtInfo::MergeFrom(const PlayerUidExtInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PlayerUidExtInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reg_platform() != 0) {
    set_reg_platform(from.reg_platform());
  }
}

void PlayerUidExtInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PlayerUidExtInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerUidExtInfo::CopyFrom(const PlayerUidExtInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PlayerUidExtInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerUidExtInfo::IsInitialized() const {
  return true;
}

void PlayerUidExtInfo::Swap(PlayerUidExtInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerUidExtInfo::InternalSwap(PlayerUidExtInfo* other) {
  using std::swap;
  swap(reg_platform_, other->reg_platform_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerUidExtInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerUidExtInfo

// uint32 reg_platform = 1;
void PlayerUidExtInfo::clear_reg_platform() {
  reg_platform_ = 0u;
}
::google::protobuf::uint32 PlayerUidExtInfo::reg_platform() const {
  // @@protoc_insertion_point(field_get:proto.PlayerUidExtInfo.reg_platform)
  return reg_platform_;
}
void PlayerUidExtInfo::set_reg_platform(::google::protobuf::uint32 value) {
  
  reg_platform_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerUidExtInfo.reg_platform)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reliquary::kLevelFieldNumber;
const int Reliquary::kExpFieldNumber;
const int Reliquary::kPromoteLevelFieldNumber;
const int Reliquary::kMainPropIdFieldNumber;
const int Reliquary::kAppendPropIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reliquary::Reliquary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Reliquary)
}
Reliquary::Reliquary(const Reliquary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      append_prop_id_list_(from.append_prop_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&main_prop_id_) -
    reinterpret_cast<char*>(&level_)) + sizeof(main_prop_id_));
  // @@protoc_insertion_point(copy_constructor:proto.Reliquary)
}

void Reliquary::SharedCtor() {
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&main_prop_id_) -
      reinterpret_cast<char*>(&level_)) + sizeof(main_prop_id_));
  _cached_size_ = 0;
}

Reliquary::~Reliquary() {
  // @@protoc_insertion_point(destructor:proto.Reliquary)
  SharedDtor();
}

void Reliquary::SharedDtor() {
}

void Reliquary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reliquary::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Reliquary& Reliquary::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

Reliquary* Reliquary::New(::google::protobuf::Arena* arena) const {
  Reliquary* n = new Reliquary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Reliquary::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Reliquary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  append_prop_id_list_.Clear();
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&main_prop_id_) -
      reinterpret_cast<char*>(&level_)) + sizeof(main_prop_id_));
  _internal_metadata_.Clear();
}

bool Reliquary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Reliquary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 exp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 promote_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &promote_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 main_prop_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &main_prop_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 append_prop_id_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_append_prop_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_append_prop_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Reliquary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Reliquary)
  return false;
#undef DO_
}

void Reliquary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Reliquary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level = 1;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // uint32 exp = 2;
  if (this->exp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }

  // uint32 promote_level = 3;
  if (this->promote_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->promote_level(), output);
  }

  // uint32 main_prop_id = 4;
  if (this->main_prop_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->main_prop_id(), output);
  }

  // repeated uint32 append_prop_id_list = 5;
  if (this->append_prop_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _append_prop_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->append_prop_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->append_prop_id_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Reliquary)
}

::google::protobuf::uint8* Reliquary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Reliquary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level = 1;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // uint32 exp = 2;
  if (this->exp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exp(), target);
  }

  // uint32 promote_level = 3;
  if (this->promote_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->promote_level(), target);
  }

  // uint32 main_prop_id = 4;
  if (this->main_prop_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->main_prop_id(), target);
  }

  // repeated uint32 append_prop_id_list = 5;
  if (this->append_prop_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _append_prop_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->append_prop_id_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Reliquary)
  return target;
}

size_t Reliquary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Reliquary)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 append_prop_id_list = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->append_prop_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _append_prop_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // uint32 exp = 2;
  if (this->exp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exp());
  }

  // uint32 promote_level = 3;
  if (this->promote_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->promote_level());
  }

  // uint32 main_prop_id = 4;
  if (this->main_prop_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->main_prop_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reliquary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Reliquary)
  GOOGLE_DCHECK_NE(&from, this);
  const Reliquary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Reliquary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Reliquary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Reliquary)
    MergeFrom(*source);
  }
}

void Reliquary::MergeFrom(const Reliquary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Reliquary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  append_prop_id_list_.MergeFrom(from.append_prop_id_list_);
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.exp() != 0) {
    set_exp(from.exp());
  }
  if (from.promote_level() != 0) {
    set_promote_level(from.promote_level());
  }
  if (from.main_prop_id() != 0) {
    set_main_prop_id(from.main_prop_id());
  }
}

void Reliquary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Reliquary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reliquary::CopyFrom(const Reliquary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Reliquary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reliquary::IsInitialized() const {
  return true;
}

void Reliquary::Swap(Reliquary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reliquary::InternalSwap(Reliquary* other) {
  using std::swap;
  append_prop_id_list_.InternalSwap(&other->append_prop_id_list_);
  swap(level_, other->level_);
  swap(exp_, other->exp_);
  swap(promote_level_, other->promote_level_);
  swap(main_prop_id_, other->main_prop_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Reliquary::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Reliquary

// uint32 level = 1;
void Reliquary::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 Reliquary::level() const {
  // @@protoc_insertion_point(field_get:proto.Reliquary.level)
  return level_;
}
void Reliquary::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.Reliquary.level)
}

// uint32 exp = 2;
void Reliquary::clear_exp() {
  exp_ = 0u;
}
::google::protobuf::uint32 Reliquary::exp() const {
  // @@protoc_insertion_point(field_get:proto.Reliquary.exp)
  return exp_;
}
void Reliquary::set_exp(::google::protobuf::uint32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:proto.Reliquary.exp)
}

// uint32 promote_level = 3;
void Reliquary::clear_promote_level() {
  promote_level_ = 0u;
}
::google::protobuf::uint32 Reliquary::promote_level() const {
  // @@protoc_insertion_point(field_get:proto.Reliquary.promote_level)
  return promote_level_;
}
void Reliquary::set_promote_level(::google::protobuf::uint32 value) {
  
  promote_level_ = value;
  // @@protoc_insertion_point(field_set:proto.Reliquary.promote_level)
}

// uint32 main_prop_id = 4;
void Reliquary::clear_main_prop_id() {
  main_prop_id_ = 0u;
}
::google::protobuf::uint32 Reliquary::main_prop_id() const {
  // @@protoc_insertion_point(field_get:proto.Reliquary.main_prop_id)
  return main_prop_id_;
}
void Reliquary::set_main_prop_id(::google::protobuf::uint32 value) {
  
  main_prop_id_ = value;
  // @@protoc_insertion_point(field_set:proto.Reliquary.main_prop_id)
}

// repeated uint32 append_prop_id_list = 5;
int Reliquary::append_prop_id_list_size() const {
  return append_prop_id_list_.size();
}
void Reliquary::clear_append_prop_id_list() {
  append_prop_id_list_.Clear();
}
::google::protobuf::uint32 Reliquary::append_prop_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.Reliquary.append_prop_id_list)
  return append_prop_id_list_.Get(index);
}
void Reliquary::set_append_prop_id_list(int index, ::google::protobuf::uint32 value) {
  append_prop_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.Reliquary.append_prop_id_list)
}
void Reliquary::add_append_prop_id_list(::google::protobuf::uint32 value) {
  append_prop_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.Reliquary.append_prop_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Reliquary::append_prop_id_list() const {
  // @@protoc_insertion_point(field_list:proto.Reliquary.append_prop_id_list)
  return append_prop_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Reliquary::mutable_append_prop_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.Reliquary.append_prop_id_list)
  return &append_prop_id_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Weapon::Weapon_AffixMapEntry::Weapon_AffixMapEntry() {}
Weapon::Weapon_AffixMapEntry::Weapon_AffixMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata Weapon::Weapon_AffixMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[12];
}
void Weapon::Weapon_AffixMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void Weapon::Weapon_AffixMapEntry::MergeFrom(const Weapon_AffixMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Weapon::kLevelFieldNumber;
const int Weapon::kExpFieldNumber;
const int Weapon::kPromoteLevelFieldNumber;
const int Weapon::kAffixMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Weapon::Weapon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Weapon)
}
Weapon::Weapon(const Weapon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  affix_map_.MergeFrom(from.affix_map_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&promote_level_) -
    reinterpret_cast<char*>(&level_)) + sizeof(promote_level_));
  // @@protoc_insertion_point(copy_constructor:proto.Weapon)
}

void Weapon::SharedCtor() {
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&promote_level_) -
      reinterpret_cast<char*>(&level_)) + sizeof(promote_level_));
  _cached_size_ = 0;
}

Weapon::~Weapon() {
  // @@protoc_insertion_point(destructor:proto.Weapon)
  SharedDtor();
}

void Weapon::SharedDtor() {
}

void Weapon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Weapon::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Weapon& Weapon::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

Weapon* Weapon::New(::google::protobuf::Arena* arena) const {
  Weapon* n = new Weapon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Weapon::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Weapon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  affix_map_.Clear();
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&promote_level_) -
      reinterpret_cast<char*>(&level_)) + sizeof(promote_level_));
  _internal_metadata_.Clear();
}

bool Weapon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Weapon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 exp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 promote_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &promote_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> affix_map = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          Weapon_AffixMapEntry::Parser< ::google::protobuf::internal::MapField<
              Weapon_AffixMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&affix_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Weapon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Weapon)
  return false;
#undef DO_
}

void Weapon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Weapon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level = 1;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // uint32 exp = 2;
  if (this->exp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }

  // uint32 promote_level = 3;
  if (this->promote_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->promote_level(), output);
  }

  // map<uint32, uint32> affix_map = 4;
  if (!this->affix_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->affix_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->affix_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->affix_map().begin();
          it != this->affix_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Weapon_AffixMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(affix_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<Weapon_AffixMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->affix_map().begin();
          it != this->affix_map().end(); ++it) {
        entry.reset(affix_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Weapon)
}

::google::protobuf::uint8* Weapon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Weapon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level = 1;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // uint32 exp = 2;
  if (this->exp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exp(), target);
  }

  // uint32 promote_level = 3;
  if (this->promote_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->promote_level(), target);
  }

  // map<uint32, uint32> affix_map = 4;
  if (!this->affix_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->affix_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->affix_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->affix_map().begin();
          it != this->affix_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Weapon_AffixMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(affix_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<Weapon_AffixMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->affix_map().begin();
          it != this->affix_map().end(); ++it) {
        entry.reset(affix_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Weapon)
  return target;
}

size_t Weapon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Weapon)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, uint32> affix_map = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->affix_map_size());
  {
    ::google::protobuf::scoped_ptr<Weapon_AffixMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->affix_map().begin();
        it != this->affix_map().end(); ++it) {
      entry.reset(affix_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // uint32 exp = 2;
  if (this->exp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exp());
  }

  // uint32 promote_level = 3;
  if (this->promote_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->promote_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Weapon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Weapon)
  GOOGLE_DCHECK_NE(&from, this);
  const Weapon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Weapon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Weapon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Weapon)
    MergeFrom(*source);
  }
}

void Weapon::MergeFrom(const Weapon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Weapon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  affix_map_.MergeFrom(from.affix_map_);
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.exp() != 0) {
    set_exp(from.exp());
  }
  if (from.promote_level() != 0) {
    set_promote_level(from.promote_level());
  }
}

void Weapon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Weapon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Weapon::CopyFrom(const Weapon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Weapon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Weapon::IsInitialized() const {
  return true;
}

void Weapon::Swap(Weapon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Weapon::InternalSwap(Weapon* other) {
  using std::swap;
  affix_map_.Swap(&other->affix_map_);
  swap(level_, other->level_);
  swap(exp_, other->exp_);
  swap(promote_level_, other->promote_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Weapon::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Weapon

// uint32 level = 1;
void Weapon::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 Weapon::level() const {
  // @@protoc_insertion_point(field_get:proto.Weapon.level)
  return level_;
}
void Weapon::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.Weapon.level)
}

// uint32 exp = 2;
void Weapon::clear_exp() {
  exp_ = 0u;
}
::google::protobuf::uint32 Weapon::exp() const {
  // @@protoc_insertion_point(field_get:proto.Weapon.exp)
  return exp_;
}
void Weapon::set_exp(::google::protobuf::uint32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:proto.Weapon.exp)
}

// uint32 promote_level = 3;
void Weapon::clear_promote_level() {
  promote_level_ = 0u;
}
::google::protobuf::uint32 Weapon::promote_level() const {
  // @@protoc_insertion_point(field_get:proto.Weapon.promote_level)
  return promote_level_;
}
void Weapon::set_promote_level(::google::protobuf::uint32 value) {
  
  promote_level_ = value;
  // @@protoc_insertion_point(field_set:proto.Weapon.promote_level)
}

// map<uint32, uint32> affix_map = 4;
int Weapon::affix_map_size() const {
  return affix_map_.size();
}
void Weapon::clear_affix_map() {
  affix_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
Weapon::affix_map() const {
  // @@protoc_insertion_point(field_map:proto.Weapon.affix_map)
  return affix_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
Weapon::mutable_affix_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.Weapon.affix_map)
  return affix_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

MaterialDeleteInfo_CountDownDelete::MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry::MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry() {}
MaterialDeleteInfo_CountDownDelete::MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry::MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata MaterialDeleteInfo_CountDownDelete::MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[14];
}
void MaterialDeleteInfo_CountDownDelete::MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void MaterialDeleteInfo_CountDownDelete::MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry::MergeFrom(const MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaterialDeleteInfo_CountDownDelete::kDeleteTimeNumMapFieldNumber;
const int MaterialDeleteInfo_CountDownDelete::kConfigCountDownTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaterialDeleteInfo_CountDownDelete::MaterialDeleteInfo_CountDownDelete()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MaterialDeleteInfo.CountDownDelete)
}
MaterialDeleteInfo_CountDownDelete::MaterialDeleteInfo_CountDownDelete(const MaterialDeleteInfo_CountDownDelete& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  delete_time_num_map_.MergeFrom(from.delete_time_num_map_);
  config_count_down_time_ = from.config_count_down_time_;
  // @@protoc_insertion_point(copy_constructor:proto.MaterialDeleteInfo.CountDownDelete)
}

void MaterialDeleteInfo_CountDownDelete::SharedCtor() {
  config_count_down_time_ = 0u;
  _cached_size_ = 0;
}

MaterialDeleteInfo_CountDownDelete::~MaterialDeleteInfo_CountDownDelete() {
  // @@protoc_insertion_point(destructor:proto.MaterialDeleteInfo.CountDownDelete)
  SharedDtor();
}

void MaterialDeleteInfo_CountDownDelete::SharedDtor() {
}

void MaterialDeleteInfo_CountDownDelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaterialDeleteInfo_CountDownDelete::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MaterialDeleteInfo_CountDownDelete& MaterialDeleteInfo_CountDownDelete::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

MaterialDeleteInfo_CountDownDelete* MaterialDeleteInfo_CountDownDelete::New(::google::protobuf::Arena* arena) const {
  MaterialDeleteInfo_CountDownDelete* n = new MaterialDeleteInfo_CountDownDelete;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MaterialDeleteInfo_CountDownDelete::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MaterialDeleteInfo.CountDownDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delete_time_num_map_.Clear();
  config_count_down_time_ = 0u;
  _internal_metadata_.Clear();
}

bool MaterialDeleteInfo_CountDownDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MaterialDeleteInfo.CountDownDelete)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, uint32> delete_time_num_map = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry::Parser< ::google::protobuf::internal::MapField<
              MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&delete_time_num_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 config_count_down_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_count_down_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MaterialDeleteInfo.CountDownDelete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MaterialDeleteInfo.CountDownDelete)
  return false;
#undef DO_
}

void MaterialDeleteInfo_CountDownDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MaterialDeleteInfo.CountDownDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> delete_time_num_map = 1;
  if (!this->delete_time_num_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->delete_time_num_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->delete_time_num_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->delete_time_num_map().begin();
          it != this->delete_time_num_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(delete_time_num_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->delete_time_num_map().begin();
          it != this->delete_time_num_map().end(); ++it) {
        entry.reset(delete_time_num_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  // uint32 config_count_down_time = 2;
  if (this->config_count_down_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->config_count_down_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MaterialDeleteInfo.CountDownDelete)
}

::google::protobuf::uint8* MaterialDeleteInfo_CountDownDelete::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MaterialDeleteInfo.CountDownDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> delete_time_num_map = 1;
  if (!this->delete_time_num_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->delete_time_num_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->delete_time_num_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->delete_time_num_map().begin();
          it != this->delete_time_num_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(delete_time_num_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->delete_time_num_map().begin();
          it != this->delete_time_num_map().end(); ++it) {
        entry.reset(delete_time_num_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  // uint32 config_count_down_time = 2;
  if (this->config_count_down_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->config_count_down_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MaterialDeleteInfo.CountDownDelete)
  return target;
}

size_t MaterialDeleteInfo_CountDownDelete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MaterialDeleteInfo.CountDownDelete)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, uint32> delete_time_num_map = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->delete_time_num_map_size());
  {
    ::google::protobuf::scoped_ptr<MaterialDeleteInfo_CountDownDelete_DeleteTimeNumMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->delete_time_num_map().begin();
        it != this->delete_time_num_map().end(); ++it) {
      entry.reset(delete_time_num_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 config_count_down_time = 2;
  if (this->config_count_down_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->config_count_down_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaterialDeleteInfo_CountDownDelete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MaterialDeleteInfo.CountDownDelete)
  GOOGLE_DCHECK_NE(&from, this);
  const MaterialDeleteInfo_CountDownDelete* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MaterialDeleteInfo_CountDownDelete>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MaterialDeleteInfo.CountDownDelete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MaterialDeleteInfo.CountDownDelete)
    MergeFrom(*source);
  }
}

void MaterialDeleteInfo_CountDownDelete::MergeFrom(const MaterialDeleteInfo_CountDownDelete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MaterialDeleteInfo.CountDownDelete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  delete_time_num_map_.MergeFrom(from.delete_time_num_map_);
  if (from.config_count_down_time() != 0) {
    set_config_count_down_time(from.config_count_down_time());
  }
}

void MaterialDeleteInfo_CountDownDelete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MaterialDeleteInfo.CountDownDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaterialDeleteInfo_CountDownDelete::CopyFrom(const MaterialDeleteInfo_CountDownDelete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MaterialDeleteInfo.CountDownDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialDeleteInfo_CountDownDelete::IsInitialized() const {
  return true;
}

void MaterialDeleteInfo_CountDownDelete::Swap(MaterialDeleteInfo_CountDownDelete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MaterialDeleteInfo_CountDownDelete::InternalSwap(MaterialDeleteInfo_CountDownDelete* other) {
  using std::swap;
  delete_time_num_map_.Swap(&other->delete_time_num_map_);
  swap(config_count_down_time_, other->config_count_down_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MaterialDeleteInfo_CountDownDelete::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MaterialDeleteInfo_CountDownDelete

// map<uint32, uint32> delete_time_num_map = 1;
int MaterialDeleteInfo_CountDownDelete::delete_time_num_map_size() const {
  return delete_time_num_map_.size();
}
void MaterialDeleteInfo_CountDownDelete::clear_delete_time_num_map() {
  delete_time_num_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
MaterialDeleteInfo_CountDownDelete::delete_time_num_map() const {
  // @@protoc_insertion_point(field_map:proto.MaterialDeleteInfo.CountDownDelete.delete_time_num_map)
  return delete_time_num_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
MaterialDeleteInfo_CountDownDelete::mutable_delete_time_num_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.MaterialDeleteInfo.CountDownDelete.delete_time_num_map)
  return delete_time_num_map_.MutableMap();
}

// uint32 config_count_down_time = 2;
void MaterialDeleteInfo_CountDownDelete::clear_config_count_down_time() {
  config_count_down_time_ = 0u;
}
::google::protobuf::uint32 MaterialDeleteInfo_CountDownDelete::config_count_down_time() const {
  // @@protoc_insertion_point(field_get:proto.MaterialDeleteInfo.CountDownDelete.config_count_down_time)
  return config_count_down_time_;
}
void MaterialDeleteInfo_CountDownDelete::set_config_count_down_time(::google::protobuf::uint32 value) {
  
  config_count_down_time_ = value;
  // @@protoc_insertion_point(field_set:proto.MaterialDeleteInfo.CountDownDelete.config_count_down_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaterialDeleteInfo_DateTimeDelete::kDeleteTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaterialDeleteInfo_DateTimeDelete::MaterialDeleteInfo_DateTimeDelete()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MaterialDeleteInfo.DateTimeDelete)
}
MaterialDeleteInfo_DateTimeDelete::MaterialDeleteInfo_DateTimeDelete(const MaterialDeleteInfo_DateTimeDelete& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  delete_time_ = from.delete_time_;
  // @@protoc_insertion_point(copy_constructor:proto.MaterialDeleteInfo.DateTimeDelete)
}

void MaterialDeleteInfo_DateTimeDelete::SharedCtor() {
  delete_time_ = 0u;
  _cached_size_ = 0;
}

MaterialDeleteInfo_DateTimeDelete::~MaterialDeleteInfo_DateTimeDelete() {
  // @@protoc_insertion_point(destructor:proto.MaterialDeleteInfo.DateTimeDelete)
  SharedDtor();
}

void MaterialDeleteInfo_DateTimeDelete::SharedDtor() {
}

void MaterialDeleteInfo_DateTimeDelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaterialDeleteInfo_DateTimeDelete::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MaterialDeleteInfo_DateTimeDelete& MaterialDeleteInfo_DateTimeDelete::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

MaterialDeleteInfo_DateTimeDelete* MaterialDeleteInfo_DateTimeDelete::New(::google::protobuf::Arena* arena) const {
  MaterialDeleteInfo_DateTimeDelete* n = new MaterialDeleteInfo_DateTimeDelete;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MaterialDeleteInfo_DateTimeDelete::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MaterialDeleteInfo.DateTimeDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delete_time_ = 0u;
  _internal_metadata_.Clear();
}

bool MaterialDeleteInfo_DateTimeDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MaterialDeleteInfo.DateTimeDelete)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 delete_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delete_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MaterialDeleteInfo.DateTimeDelete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MaterialDeleteInfo.DateTimeDelete)
  return false;
#undef DO_
}

void MaterialDeleteInfo_DateTimeDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MaterialDeleteInfo.DateTimeDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 delete_time = 1;
  if (this->delete_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->delete_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MaterialDeleteInfo.DateTimeDelete)
}

::google::protobuf::uint8* MaterialDeleteInfo_DateTimeDelete::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MaterialDeleteInfo.DateTimeDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 delete_time = 1;
  if (this->delete_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->delete_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MaterialDeleteInfo.DateTimeDelete)
  return target;
}

size_t MaterialDeleteInfo_DateTimeDelete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MaterialDeleteInfo.DateTimeDelete)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 delete_time = 1;
  if (this->delete_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->delete_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaterialDeleteInfo_DateTimeDelete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MaterialDeleteInfo.DateTimeDelete)
  GOOGLE_DCHECK_NE(&from, this);
  const MaterialDeleteInfo_DateTimeDelete* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MaterialDeleteInfo_DateTimeDelete>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MaterialDeleteInfo.DateTimeDelete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MaterialDeleteInfo.DateTimeDelete)
    MergeFrom(*source);
  }
}

void MaterialDeleteInfo_DateTimeDelete::MergeFrom(const MaterialDeleteInfo_DateTimeDelete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MaterialDeleteInfo.DateTimeDelete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.delete_time() != 0) {
    set_delete_time(from.delete_time());
  }
}

void MaterialDeleteInfo_DateTimeDelete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MaterialDeleteInfo.DateTimeDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaterialDeleteInfo_DateTimeDelete::CopyFrom(const MaterialDeleteInfo_DateTimeDelete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MaterialDeleteInfo.DateTimeDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialDeleteInfo_DateTimeDelete::IsInitialized() const {
  return true;
}

void MaterialDeleteInfo_DateTimeDelete::Swap(MaterialDeleteInfo_DateTimeDelete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MaterialDeleteInfo_DateTimeDelete::InternalSwap(MaterialDeleteInfo_DateTimeDelete* other) {
  using std::swap;
  swap(delete_time_, other->delete_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MaterialDeleteInfo_DateTimeDelete::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MaterialDeleteInfo_DateTimeDelete

// uint32 delete_time = 1;
void MaterialDeleteInfo_DateTimeDelete::clear_delete_time() {
  delete_time_ = 0u;
}
::google::protobuf::uint32 MaterialDeleteInfo_DateTimeDelete::delete_time() const {
  // @@protoc_insertion_point(field_get:proto.MaterialDeleteInfo.DateTimeDelete.delete_time)
  return delete_time_;
}
void MaterialDeleteInfo_DateTimeDelete::set_delete_time(::google::protobuf::uint32 value) {
  
  delete_time_ = value;
  // @@protoc_insertion_point(field_set:proto.MaterialDeleteInfo.DateTimeDelete.delete_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

MaterialDeleteInfo_DelayWeekCountDownDelete::MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry::MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry() {}
MaterialDeleteInfo_DelayWeekCountDownDelete::MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry::MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata MaterialDeleteInfo_DelayWeekCountDownDelete::MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[17];
}
void MaterialDeleteInfo_DelayWeekCountDownDelete::MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void MaterialDeleteInfo_DelayWeekCountDownDelete::MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry::MergeFrom(const MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaterialDeleteInfo_DelayWeekCountDownDelete::kDeleteTimeNumMapFieldNumber;
const int MaterialDeleteInfo_DelayWeekCountDownDelete::kConfigDelayWeekFieldNumber;
const int MaterialDeleteInfo_DelayWeekCountDownDelete::kConfigCountDownTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaterialDeleteInfo_DelayWeekCountDownDelete::MaterialDeleteInfo_DelayWeekCountDownDelete()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MaterialDeleteInfo.DelayWeekCountDownDelete)
}
MaterialDeleteInfo_DelayWeekCountDownDelete::MaterialDeleteInfo_DelayWeekCountDownDelete(const MaterialDeleteInfo_DelayWeekCountDownDelete& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  delete_time_num_map_.MergeFrom(from.delete_time_num_map_);
  ::memcpy(&config_delay_week_, &from.config_delay_week_,
    static_cast<size_t>(reinterpret_cast<char*>(&config_count_down_time_) -
    reinterpret_cast<char*>(&config_delay_week_)) + sizeof(config_count_down_time_));
  // @@protoc_insertion_point(copy_constructor:proto.MaterialDeleteInfo.DelayWeekCountDownDelete)
}

void MaterialDeleteInfo_DelayWeekCountDownDelete::SharedCtor() {
  ::memset(&config_delay_week_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_count_down_time_) -
      reinterpret_cast<char*>(&config_delay_week_)) + sizeof(config_count_down_time_));
  _cached_size_ = 0;
}

MaterialDeleteInfo_DelayWeekCountDownDelete::~MaterialDeleteInfo_DelayWeekCountDownDelete() {
  // @@protoc_insertion_point(destructor:proto.MaterialDeleteInfo.DelayWeekCountDownDelete)
  SharedDtor();
}

void MaterialDeleteInfo_DelayWeekCountDownDelete::SharedDtor() {
}

void MaterialDeleteInfo_DelayWeekCountDownDelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaterialDeleteInfo_DelayWeekCountDownDelete::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MaterialDeleteInfo_DelayWeekCountDownDelete& MaterialDeleteInfo_DelayWeekCountDownDelete::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

MaterialDeleteInfo_DelayWeekCountDownDelete* MaterialDeleteInfo_DelayWeekCountDownDelete::New(::google::protobuf::Arena* arena) const {
  MaterialDeleteInfo_DelayWeekCountDownDelete* n = new MaterialDeleteInfo_DelayWeekCountDownDelete;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MaterialDeleteInfo_DelayWeekCountDownDelete::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MaterialDeleteInfo.DelayWeekCountDownDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delete_time_num_map_.Clear();
  ::memset(&config_delay_week_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_count_down_time_) -
      reinterpret_cast<char*>(&config_delay_week_)) + sizeof(config_count_down_time_));
  _internal_metadata_.Clear();
}

bool MaterialDeleteInfo_DelayWeekCountDownDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MaterialDeleteInfo.DelayWeekCountDownDelete)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, uint32> delete_time_num_map = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry::Parser< ::google::protobuf::internal::MapField<
              MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&delete_time_num_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 config_delay_week = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_delay_week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 config_count_down_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_count_down_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MaterialDeleteInfo.DelayWeekCountDownDelete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MaterialDeleteInfo.DelayWeekCountDownDelete)
  return false;
#undef DO_
}

void MaterialDeleteInfo_DelayWeekCountDownDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MaterialDeleteInfo.DelayWeekCountDownDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> delete_time_num_map = 1;
  if (!this->delete_time_num_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->delete_time_num_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->delete_time_num_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->delete_time_num_map().begin();
          it != this->delete_time_num_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(delete_time_num_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->delete_time_num_map().begin();
          it != this->delete_time_num_map().end(); ++it) {
        entry.reset(delete_time_num_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  // uint32 config_delay_week = 2;
  if (this->config_delay_week() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->config_delay_week(), output);
  }

  // uint32 config_count_down_time = 3;
  if (this->config_count_down_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->config_count_down_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MaterialDeleteInfo.DelayWeekCountDownDelete)
}

::google::protobuf::uint8* MaterialDeleteInfo_DelayWeekCountDownDelete::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MaterialDeleteInfo.DelayWeekCountDownDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> delete_time_num_map = 1;
  if (!this->delete_time_num_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->delete_time_num_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->delete_time_num_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->delete_time_num_map().begin();
          it != this->delete_time_num_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(delete_time_num_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->delete_time_num_map().begin();
          it != this->delete_time_num_map().end(); ++it) {
        entry.reset(delete_time_num_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  // uint32 config_delay_week = 2;
  if (this->config_delay_week() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->config_delay_week(), target);
  }

  // uint32 config_count_down_time = 3;
  if (this->config_count_down_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->config_count_down_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MaterialDeleteInfo.DelayWeekCountDownDelete)
  return target;
}

size_t MaterialDeleteInfo_DelayWeekCountDownDelete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MaterialDeleteInfo.DelayWeekCountDownDelete)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, uint32> delete_time_num_map = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->delete_time_num_map_size());
  {
    ::google::protobuf::scoped_ptr<MaterialDeleteInfo_DelayWeekCountDownDelete_DeleteTimeNumMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->delete_time_num_map().begin();
        it != this->delete_time_num_map().end(); ++it) {
      entry.reset(delete_time_num_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 config_delay_week = 2;
  if (this->config_delay_week() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->config_delay_week());
  }

  // uint32 config_count_down_time = 3;
  if (this->config_count_down_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->config_count_down_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaterialDeleteInfo_DelayWeekCountDownDelete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MaterialDeleteInfo.DelayWeekCountDownDelete)
  GOOGLE_DCHECK_NE(&from, this);
  const MaterialDeleteInfo_DelayWeekCountDownDelete* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MaterialDeleteInfo_DelayWeekCountDownDelete>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MaterialDeleteInfo.DelayWeekCountDownDelete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MaterialDeleteInfo.DelayWeekCountDownDelete)
    MergeFrom(*source);
  }
}

void MaterialDeleteInfo_DelayWeekCountDownDelete::MergeFrom(const MaterialDeleteInfo_DelayWeekCountDownDelete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MaterialDeleteInfo.DelayWeekCountDownDelete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  delete_time_num_map_.MergeFrom(from.delete_time_num_map_);
  if (from.config_delay_week() != 0) {
    set_config_delay_week(from.config_delay_week());
  }
  if (from.config_count_down_time() != 0) {
    set_config_count_down_time(from.config_count_down_time());
  }
}

void MaterialDeleteInfo_DelayWeekCountDownDelete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MaterialDeleteInfo.DelayWeekCountDownDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaterialDeleteInfo_DelayWeekCountDownDelete::CopyFrom(const MaterialDeleteInfo_DelayWeekCountDownDelete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MaterialDeleteInfo.DelayWeekCountDownDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialDeleteInfo_DelayWeekCountDownDelete::IsInitialized() const {
  return true;
}

void MaterialDeleteInfo_DelayWeekCountDownDelete::Swap(MaterialDeleteInfo_DelayWeekCountDownDelete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MaterialDeleteInfo_DelayWeekCountDownDelete::InternalSwap(MaterialDeleteInfo_DelayWeekCountDownDelete* other) {
  using std::swap;
  delete_time_num_map_.Swap(&other->delete_time_num_map_);
  swap(config_delay_week_, other->config_delay_week_);
  swap(config_count_down_time_, other->config_count_down_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MaterialDeleteInfo_DelayWeekCountDownDelete::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MaterialDeleteInfo_DelayWeekCountDownDelete

// map<uint32, uint32> delete_time_num_map = 1;
int MaterialDeleteInfo_DelayWeekCountDownDelete::delete_time_num_map_size() const {
  return delete_time_num_map_.size();
}
void MaterialDeleteInfo_DelayWeekCountDownDelete::clear_delete_time_num_map() {
  delete_time_num_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
MaterialDeleteInfo_DelayWeekCountDownDelete::delete_time_num_map() const {
  // @@protoc_insertion_point(field_map:proto.MaterialDeleteInfo.DelayWeekCountDownDelete.delete_time_num_map)
  return delete_time_num_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
MaterialDeleteInfo_DelayWeekCountDownDelete::mutable_delete_time_num_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.MaterialDeleteInfo.DelayWeekCountDownDelete.delete_time_num_map)
  return delete_time_num_map_.MutableMap();
}

// uint32 config_delay_week = 2;
void MaterialDeleteInfo_DelayWeekCountDownDelete::clear_config_delay_week() {
  config_delay_week_ = 0u;
}
::google::protobuf::uint32 MaterialDeleteInfo_DelayWeekCountDownDelete::config_delay_week() const {
  // @@protoc_insertion_point(field_get:proto.MaterialDeleteInfo.DelayWeekCountDownDelete.config_delay_week)
  return config_delay_week_;
}
void MaterialDeleteInfo_DelayWeekCountDownDelete::set_config_delay_week(::google::protobuf::uint32 value) {
  
  config_delay_week_ = value;
  // @@protoc_insertion_point(field_set:proto.MaterialDeleteInfo.DelayWeekCountDownDelete.config_delay_week)
}

// uint32 config_count_down_time = 3;
void MaterialDeleteInfo_DelayWeekCountDownDelete::clear_config_count_down_time() {
  config_count_down_time_ = 0u;
}
::google::protobuf::uint32 MaterialDeleteInfo_DelayWeekCountDownDelete::config_count_down_time() const {
  // @@protoc_insertion_point(field_get:proto.MaterialDeleteInfo.DelayWeekCountDownDelete.config_count_down_time)
  return config_count_down_time_;
}
void MaterialDeleteInfo_DelayWeekCountDownDelete::set_config_count_down_time(::google::protobuf::uint32 value) {
  
  config_count_down_time_ = value;
  // @@protoc_insertion_point(field_set:proto.MaterialDeleteInfo.DelayWeekCountDownDelete.config_count_down_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaterialDeleteInfo::kHasDeleteConfigFieldNumber;
const int MaterialDeleteInfo::kCountDownDeleteFieldNumber;
const int MaterialDeleteInfo::kDateDeleteFieldNumber;
const int MaterialDeleteInfo::kDelayWeekCountDownDeleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaterialDeleteInfo::MaterialDeleteInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MaterialDeleteInfo)
}
MaterialDeleteInfo::MaterialDeleteInfo(const MaterialDeleteInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  has_delete_config_ = from.has_delete_config_;
  clear_has_delete_info();
  switch (from.delete_info_case()) {
    case kCountDownDelete: {
      mutable_count_down_delete()->::proto::MaterialDeleteInfo_CountDownDelete::MergeFrom(from.count_down_delete());
      break;
    }
    case kDateDelete: {
      mutable_date_delete()->::proto::MaterialDeleteInfo_DateTimeDelete::MergeFrom(from.date_delete());
      break;
    }
    case kDelayWeekCountDownDelete: {
      mutable_delay_week_count_down_delete()->::proto::MaterialDeleteInfo_DelayWeekCountDownDelete::MergeFrom(from.delay_week_count_down_delete());
      break;
    }
    case DELETE_INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.MaterialDeleteInfo)
}

void MaterialDeleteInfo::SharedCtor() {
  has_delete_config_ = false;
  clear_has_delete_info();
  _cached_size_ = 0;
}

MaterialDeleteInfo::~MaterialDeleteInfo() {
  // @@protoc_insertion_point(destructor:proto.MaterialDeleteInfo)
  SharedDtor();
}

void MaterialDeleteInfo::SharedDtor() {
  if (has_delete_info()) {
    clear_delete_info();
  }
}

void MaterialDeleteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaterialDeleteInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MaterialDeleteInfo& MaterialDeleteInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

MaterialDeleteInfo* MaterialDeleteInfo::New(::google::protobuf::Arena* arena) const {
  MaterialDeleteInfo* n = new MaterialDeleteInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MaterialDeleteInfo::clear_delete_info() {
// @@protoc_insertion_point(one_of_clear_start:proto.MaterialDeleteInfo)
  switch (delete_info_case()) {
    case kCountDownDelete: {
      delete delete_info_.count_down_delete_;
      break;
    }
    case kDateDelete: {
      delete delete_info_.date_delete_;
      break;
    }
    case kDelayWeekCountDownDelete: {
      delete delete_info_.delay_week_count_down_delete_;
      break;
    }
    case DELETE_INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DELETE_INFO_NOT_SET;
}


void MaterialDeleteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MaterialDeleteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  has_delete_config_ = false;
  clear_delete_info();
  _internal_metadata_.Clear();
}

bool MaterialDeleteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MaterialDeleteInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool has_delete_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_delete_config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MaterialDeleteInfo.CountDownDelete count_down_delete = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_count_down_delete()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MaterialDeleteInfo.DateTimeDelete date_delete = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_date_delete()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MaterialDeleteInfo.DelayWeekCountDownDelete delay_week_count_down_delete = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delay_week_count_down_delete()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MaterialDeleteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MaterialDeleteInfo)
  return false;
#undef DO_
}

void MaterialDeleteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MaterialDeleteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_delete_config = 1;
  if (this->has_delete_config() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_delete_config(), output);
  }

  // .proto.MaterialDeleteInfo.CountDownDelete count_down_delete = 2;
  if (has_count_down_delete()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *delete_info_.count_down_delete_, output);
  }

  // .proto.MaterialDeleteInfo.DateTimeDelete date_delete = 3;
  if (has_date_delete()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *delete_info_.date_delete_, output);
  }

  // .proto.MaterialDeleteInfo.DelayWeekCountDownDelete delay_week_count_down_delete = 4;
  if (has_delay_week_count_down_delete()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *delete_info_.delay_week_count_down_delete_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MaterialDeleteInfo)
}

::google::protobuf::uint8* MaterialDeleteInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MaterialDeleteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_delete_config = 1;
  if (this->has_delete_config() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_delete_config(), target);
  }

  // .proto.MaterialDeleteInfo.CountDownDelete count_down_delete = 2;
  if (has_count_down_delete()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *delete_info_.count_down_delete_, deterministic, target);
  }

  // .proto.MaterialDeleteInfo.DateTimeDelete date_delete = 3;
  if (has_date_delete()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *delete_info_.date_delete_, deterministic, target);
  }

  // .proto.MaterialDeleteInfo.DelayWeekCountDownDelete delay_week_count_down_delete = 4;
  if (has_delay_week_count_down_delete()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *delete_info_.delay_week_count_down_delete_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MaterialDeleteInfo)
  return target;
}

size_t MaterialDeleteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MaterialDeleteInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool has_delete_config = 1;
  if (this->has_delete_config() != 0) {
    total_size += 1 + 1;
  }

  switch (delete_info_case()) {
    // .proto.MaterialDeleteInfo.CountDownDelete count_down_delete = 2;
    case kCountDownDelete: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *delete_info_.count_down_delete_);
      break;
    }
    // .proto.MaterialDeleteInfo.DateTimeDelete date_delete = 3;
    case kDateDelete: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *delete_info_.date_delete_);
      break;
    }
    // .proto.MaterialDeleteInfo.DelayWeekCountDownDelete delay_week_count_down_delete = 4;
    case kDelayWeekCountDownDelete: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *delete_info_.delay_week_count_down_delete_);
      break;
    }
    case DELETE_INFO_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaterialDeleteInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MaterialDeleteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MaterialDeleteInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MaterialDeleteInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MaterialDeleteInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MaterialDeleteInfo)
    MergeFrom(*source);
  }
}

void MaterialDeleteInfo::MergeFrom(const MaterialDeleteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MaterialDeleteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_delete_config() != 0) {
    set_has_delete_config(from.has_delete_config());
  }
  switch (from.delete_info_case()) {
    case kCountDownDelete: {
      mutable_count_down_delete()->::proto::MaterialDeleteInfo_CountDownDelete::MergeFrom(from.count_down_delete());
      break;
    }
    case kDateDelete: {
      mutable_date_delete()->::proto::MaterialDeleteInfo_DateTimeDelete::MergeFrom(from.date_delete());
      break;
    }
    case kDelayWeekCountDownDelete: {
      mutable_delay_week_count_down_delete()->::proto::MaterialDeleteInfo_DelayWeekCountDownDelete::MergeFrom(from.delay_week_count_down_delete());
      break;
    }
    case DELETE_INFO_NOT_SET: {
      break;
    }
  }
}

void MaterialDeleteInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MaterialDeleteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaterialDeleteInfo::CopyFrom(const MaterialDeleteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MaterialDeleteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialDeleteInfo::IsInitialized() const {
  return true;
}

void MaterialDeleteInfo::Swap(MaterialDeleteInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MaterialDeleteInfo::InternalSwap(MaterialDeleteInfo* other) {
  using std::swap;
  swap(has_delete_config_, other->has_delete_config_);
  swap(delete_info_, other->delete_info_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MaterialDeleteInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MaterialDeleteInfo

// bool has_delete_config = 1;
void MaterialDeleteInfo::clear_has_delete_config() {
  has_delete_config_ = false;
}
bool MaterialDeleteInfo::has_delete_config() const {
  // @@protoc_insertion_point(field_get:proto.MaterialDeleteInfo.has_delete_config)
  return has_delete_config_;
}
void MaterialDeleteInfo::set_has_delete_config(bool value) {
  
  has_delete_config_ = value;
  // @@protoc_insertion_point(field_set:proto.MaterialDeleteInfo.has_delete_config)
}

// .proto.MaterialDeleteInfo.CountDownDelete count_down_delete = 2;
bool MaterialDeleteInfo::has_count_down_delete() const {
  return delete_info_case() == kCountDownDelete;
}
void MaterialDeleteInfo::set_has_count_down_delete() {
  _oneof_case_[0] = kCountDownDelete;
}
void MaterialDeleteInfo::clear_count_down_delete() {
  if (has_count_down_delete()) {
    delete delete_info_.count_down_delete_;
    clear_has_delete_info();
  }
}
 const ::proto::MaterialDeleteInfo_CountDownDelete& MaterialDeleteInfo::count_down_delete() const {
  // @@protoc_insertion_point(field_get:proto.MaterialDeleteInfo.count_down_delete)
  return has_count_down_delete()
      ? *delete_info_.count_down_delete_
      : ::proto::MaterialDeleteInfo_CountDownDelete::default_instance();
}
::proto::MaterialDeleteInfo_CountDownDelete* MaterialDeleteInfo::mutable_count_down_delete() {
  if (!has_count_down_delete()) {
    clear_delete_info();
    set_has_count_down_delete();
    delete_info_.count_down_delete_ = new ::proto::MaterialDeleteInfo_CountDownDelete;
  }
  // @@protoc_insertion_point(field_mutable:proto.MaterialDeleteInfo.count_down_delete)
  return delete_info_.count_down_delete_;
}
::proto::MaterialDeleteInfo_CountDownDelete* MaterialDeleteInfo::release_count_down_delete() {
  // @@protoc_insertion_point(field_release:proto.MaterialDeleteInfo.count_down_delete)
  if (has_count_down_delete()) {
    clear_has_delete_info();
    ::proto::MaterialDeleteInfo_CountDownDelete* temp = delete_info_.count_down_delete_;
    delete_info_.count_down_delete_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialDeleteInfo::set_allocated_count_down_delete(::proto::MaterialDeleteInfo_CountDownDelete* count_down_delete) {
  clear_delete_info();
  if (count_down_delete) {
    set_has_count_down_delete();
    delete_info_.count_down_delete_ = count_down_delete;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MaterialDeleteInfo.count_down_delete)
}

// .proto.MaterialDeleteInfo.DateTimeDelete date_delete = 3;
bool MaterialDeleteInfo::has_date_delete() const {
  return delete_info_case() == kDateDelete;
}
void MaterialDeleteInfo::set_has_date_delete() {
  _oneof_case_[0] = kDateDelete;
}
void MaterialDeleteInfo::clear_date_delete() {
  if (has_date_delete()) {
    delete delete_info_.date_delete_;
    clear_has_delete_info();
  }
}
 const ::proto::MaterialDeleteInfo_DateTimeDelete& MaterialDeleteInfo::date_delete() const {
  // @@protoc_insertion_point(field_get:proto.MaterialDeleteInfo.date_delete)
  return has_date_delete()
      ? *delete_info_.date_delete_
      : ::proto::MaterialDeleteInfo_DateTimeDelete::default_instance();
}
::proto::MaterialDeleteInfo_DateTimeDelete* MaterialDeleteInfo::mutable_date_delete() {
  if (!has_date_delete()) {
    clear_delete_info();
    set_has_date_delete();
    delete_info_.date_delete_ = new ::proto::MaterialDeleteInfo_DateTimeDelete;
  }
  // @@protoc_insertion_point(field_mutable:proto.MaterialDeleteInfo.date_delete)
  return delete_info_.date_delete_;
}
::proto::MaterialDeleteInfo_DateTimeDelete* MaterialDeleteInfo::release_date_delete() {
  // @@protoc_insertion_point(field_release:proto.MaterialDeleteInfo.date_delete)
  if (has_date_delete()) {
    clear_has_delete_info();
    ::proto::MaterialDeleteInfo_DateTimeDelete* temp = delete_info_.date_delete_;
    delete_info_.date_delete_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialDeleteInfo::set_allocated_date_delete(::proto::MaterialDeleteInfo_DateTimeDelete* date_delete) {
  clear_delete_info();
  if (date_delete) {
    set_has_date_delete();
    delete_info_.date_delete_ = date_delete;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MaterialDeleteInfo.date_delete)
}

// .proto.MaterialDeleteInfo.DelayWeekCountDownDelete delay_week_count_down_delete = 4;
bool MaterialDeleteInfo::has_delay_week_count_down_delete() const {
  return delete_info_case() == kDelayWeekCountDownDelete;
}
void MaterialDeleteInfo::set_has_delay_week_count_down_delete() {
  _oneof_case_[0] = kDelayWeekCountDownDelete;
}
void MaterialDeleteInfo::clear_delay_week_count_down_delete() {
  if (has_delay_week_count_down_delete()) {
    delete delete_info_.delay_week_count_down_delete_;
    clear_has_delete_info();
  }
}
 const ::proto::MaterialDeleteInfo_DelayWeekCountDownDelete& MaterialDeleteInfo::delay_week_count_down_delete() const {
  // @@protoc_insertion_point(field_get:proto.MaterialDeleteInfo.delay_week_count_down_delete)
  return has_delay_week_count_down_delete()
      ? *delete_info_.delay_week_count_down_delete_
      : ::proto::MaterialDeleteInfo_DelayWeekCountDownDelete::default_instance();
}
::proto::MaterialDeleteInfo_DelayWeekCountDownDelete* MaterialDeleteInfo::mutable_delay_week_count_down_delete() {
  if (!has_delay_week_count_down_delete()) {
    clear_delete_info();
    set_has_delay_week_count_down_delete();
    delete_info_.delay_week_count_down_delete_ = new ::proto::MaterialDeleteInfo_DelayWeekCountDownDelete;
  }
  // @@protoc_insertion_point(field_mutable:proto.MaterialDeleteInfo.delay_week_count_down_delete)
  return delete_info_.delay_week_count_down_delete_;
}
::proto::MaterialDeleteInfo_DelayWeekCountDownDelete* MaterialDeleteInfo::release_delay_week_count_down_delete() {
  // @@protoc_insertion_point(field_release:proto.MaterialDeleteInfo.delay_week_count_down_delete)
  if (has_delay_week_count_down_delete()) {
    clear_has_delete_info();
    ::proto::MaterialDeleteInfo_DelayWeekCountDownDelete* temp = delete_info_.delay_week_count_down_delete_;
    delete_info_.delay_week_count_down_delete_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialDeleteInfo::set_allocated_delay_week_count_down_delete(::proto::MaterialDeleteInfo_DelayWeekCountDownDelete* delay_week_count_down_delete) {
  clear_delete_info();
  if (delay_week_count_down_delete) {
    set_has_delay_week_count_down_delete();
    delete_info_.delay_week_count_down_delete_ = delay_week_count_down_delete;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MaterialDeleteInfo.delay_week_count_down_delete)
}

bool MaterialDeleteInfo::has_delete_info() const {
  return delete_info_case() != DELETE_INFO_NOT_SET;
}
void MaterialDeleteInfo::clear_has_delete_info() {
  _oneof_case_[0] = DELETE_INFO_NOT_SET;
}
MaterialDeleteInfo::DeleteInfoCase MaterialDeleteInfo::delete_info_case() const {
  return MaterialDeleteInfo::DeleteInfoCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Material::kCountFieldNumber;
const int Material::kDeleteInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Material::Material()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Material)
}
Material::Material(const Material& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_delete_info()) {
    delete_info_ = new ::proto::MaterialDeleteInfo(*from.delete_info_);
  } else {
    delete_info_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:proto.Material)
}

void Material::SharedCtor() {
  ::memset(&delete_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&delete_info_)) + sizeof(count_));
  _cached_size_ = 0;
}

Material::~Material() {
  // @@protoc_insertion_point(destructor:proto.Material)
  SharedDtor();
}

void Material::SharedDtor() {
  if (this != internal_default_instance()) delete delete_info_;
}

void Material::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Material::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Material& Material::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

Material* Material::New(::google::protobuf::Arena* arena) const {
  Material* n = new Material;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Material::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Material)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && delete_info_ != NULL) {
    delete delete_info_;
  }
  delete_info_ = NULL;
  count_ = 0u;
  _internal_metadata_.Clear();
}

bool Material::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Material)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MaterialDeleteInfo delete_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Material)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Material)
  return false;
#undef DO_
}

void Material::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Material)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // .proto.MaterialDeleteInfo delete_info = 2;
  if (this->has_delete_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->delete_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Material)
}

::google::protobuf::uint8* Material::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Material)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // .proto.MaterialDeleteInfo delete_info = 2;
  if (this->has_delete_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->delete_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Material)
  return target;
}

size_t Material::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Material)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.MaterialDeleteInfo delete_info = 2;
  if (this->has_delete_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->delete_info_);
  }

  // uint32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Material::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Material)
  GOOGLE_DCHECK_NE(&from, this);
  const Material* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Material>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Material)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Material)
    MergeFrom(*source);
  }
}

void Material::MergeFrom(const Material& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Material)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_delete_info()) {
    mutable_delete_info()->::proto::MaterialDeleteInfo::MergeFrom(from.delete_info());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void Material::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Material::CopyFrom(const Material& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Material::IsInitialized() const {
  return true;
}

void Material::Swap(Material* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Material::InternalSwap(Material* other) {
  using std::swap;
  swap(delete_info_, other->delete_info_);
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Material::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Material

// uint32 count = 1;
void Material::clear_count() {
  count_ = 0u;
}
::google::protobuf::uint32 Material::count() const {
  // @@protoc_insertion_point(field_get:proto.Material.count)
  return count_;
}
void Material::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.Material.count)
}

// .proto.MaterialDeleteInfo delete_info = 2;
bool Material::has_delete_info() const {
  return this != internal_default_instance() && delete_info_ != NULL;
}
void Material::clear_delete_info() {
  if (GetArenaNoVirtual() == NULL && delete_info_ != NULL) delete delete_info_;
  delete_info_ = NULL;
}
const ::proto::MaterialDeleteInfo& Material::delete_info() const {
  const ::proto::MaterialDeleteInfo* p = delete_info_;
  // @@protoc_insertion_point(field_get:proto.Material.delete_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::MaterialDeleteInfo*>(
      &::proto::_MaterialDeleteInfo_default_instance_);
}
::proto::MaterialDeleteInfo* Material::mutable_delete_info() {
  
  if (delete_info_ == NULL) {
    delete_info_ = new ::proto::MaterialDeleteInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.Material.delete_info)
  return delete_info_;
}
::proto::MaterialDeleteInfo* Material::release_delete_info() {
  // @@protoc_insertion_point(field_release:proto.Material.delete_info)
  
  ::proto::MaterialDeleteInfo* temp = delete_info_;
  delete_info_ = NULL;
  return temp;
}
void Material::set_allocated_delete_info(::proto::MaterialDeleteInfo* delete_info) {
  delete delete_info_;
  delete_info_ = delete_info;
  if (delete_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Material.delete_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Equip::kIsLockedFieldNumber;
const int Equip::kReliquaryFieldNumber;
const int Equip::kWeaponFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Equip::Equip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Equip)
}
Equip::Equip(const Equip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_locked_ = from.is_locked_;
  clear_has_detail();
  switch (from.detail_case()) {
    case kReliquary: {
      mutable_reliquary()->::proto::Reliquary::MergeFrom(from.reliquary());
      break;
    }
    case kWeapon: {
      mutable_weapon()->::proto::Weapon::MergeFrom(from.weapon());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.Equip)
}

void Equip::SharedCtor() {
  is_locked_ = false;
  clear_has_detail();
  _cached_size_ = 0;
}

Equip::~Equip() {
  // @@protoc_insertion_point(destructor:proto.Equip)
  SharedDtor();
}

void Equip::SharedDtor() {
  if (has_detail()) {
    clear_detail();
  }
}

void Equip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Equip::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Equip& Equip::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

Equip* Equip::New(::google::protobuf::Arena* arena) const {
  Equip* n = new Equip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Equip::clear_detail() {
// @@protoc_insertion_point(one_of_clear_start:proto.Equip)
  switch (detail_case()) {
    case kReliquary: {
      delete detail_.reliquary_;
      break;
    }
    case kWeapon: {
      delete detail_.weapon_;
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DETAIL_NOT_SET;
}


void Equip::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Equip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_locked_ = false;
  clear_detail();
  _internal_metadata_.Clear();
}

bool Equip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Equip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.Reliquary reliquary = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reliquary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Weapon weapon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weapon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_locked = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_locked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Equip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Equip)
  return false;
#undef DO_
}

void Equip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Equip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Reliquary reliquary = 1;
  if (has_reliquary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *detail_.reliquary_, output);
  }

  // .proto.Weapon weapon = 2;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *detail_.weapon_, output);
  }

  // bool is_locked = 3;
  if (this->is_locked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_locked(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Equip)
}

::google::protobuf::uint8* Equip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Equip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Reliquary reliquary = 1;
  if (has_reliquary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *detail_.reliquary_, deterministic, target);
  }

  // .proto.Weapon weapon = 2;
  if (has_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *detail_.weapon_, deterministic, target);
  }

  // bool is_locked = 3;
  if (this->is_locked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_locked(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Equip)
  return target;
}

size_t Equip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Equip)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_locked = 3;
  if (this->is_locked() != 0) {
    total_size += 1 + 1;
  }

  switch (detail_case()) {
    // .proto.Reliquary reliquary = 1;
    case kReliquary: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.reliquary_);
      break;
    }
    // .proto.Weapon weapon = 2;
    case kWeapon: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.weapon_);
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Equip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Equip)
  GOOGLE_DCHECK_NE(&from, this);
  const Equip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Equip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Equip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Equip)
    MergeFrom(*source);
  }
}

void Equip::MergeFrom(const Equip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Equip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_locked() != 0) {
    set_is_locked(from.is_locked());
  }
  switch (from.detail_case()) {
    case kReliquary: {
      mutable_reliquary()->::proto::Reliquary::MergeFrom(from.reliquary());
      break;
    }
    case kWeapon: {
      mutable_weapon()->::proto::Weapon::MergeFrom(from.weapon());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
}

void Equip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Equip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Equip::CopyFrom(const Equip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Equip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equip::IsInitialized() const {
  return true;
}

void Equip::Swap(Equip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Equip::InternalSwap(Equip* other) {
  using std::swap;
  swap(is_locked_, other->is_locked_);
  swap(detail_, other->detail_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Equip::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Equip

// bool is_locked = 3;
void Equip::clear_is_locked() {
  is_locked_ = false;
}
bool Equip::is_locked() const {
  // @@protoc_insertion_point(field_get:proto.Equip.is_locked)
  return is_locked_;
}
void Equip::set_is_locked(bool value) {
  
  is_locked_ = value;
  // @@protoc_insertion_point(field_set:proto.Equip.is_locked)
}

// .proto.Reliquary reliquary = 1;
bool Equip::has_reliquary() const {
  return detail_case() == kReliquary;
}
void Equip::set_has_reliquary() {
  _oneof_case_[0] = kReliquary;
}
void Equip::clear_reliquary() {
  if (has_reliquary()) {
    delete detail_.reliquary_;
    clear_has_detail();
  }
}
 const ::proto::Reliquary& Equip::reliquary() const {
  // @@protoc_insertion_point(field_get:proto.Equip.reliquary)
  return has_reliquary()
      ? *detail_.reliquary_
      : ::proto::Reliquary::default_instance();
}
::proto::Reliquary* Equip::mutable_reliquary() {
  if (!has_reliquary()) {
    clear_detail();
    set_has_reliquary();
    detail_.reliquary_ = new ::proto::Reliquary;
  }
  // @@protoc_insertion_point(field_mutable:proto.Equip.reliquary)
  return detail_.reliquary_;
}
::proto::Reliquary* Equip::release_reliquary() {
  // @@protoc_insertion_point(field_release:proto.Equip.reliquary)
  if (has_reliquary()) {
    clear_has_detail();
    ::proto::Reliquary* temp = detail_.reliquary_;
    detail_.reliquary_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Equip::set_allocated_reliquary(::proto::Reliquary* reliquary) {
  clear_detail();
  if (reliquary) {
    set_has_reliquary();
    detail_.reliquary_ = reliquary;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Equip.reliquary)
}

// .proto.Weapon weapon = 2;
bool Equip::has_weapon() const {
  return detail_case() == kWeapon;
}
void Equip::set_has_weapon() {
  _oneof_case_[0] = kWeapon;
}
void Equip::clear_weapon() {
  if (has_weapon()) {
    delete detail_.weapon_;
    clear_has_detail();
  }
}
 const ::proto::Weapon& Equip::weapon() const {
  // @@protoc_insertion_point(field_get:proto.Equip.weapon)
  return has_weapon()
      ? *detail_.weapon_
      : ::proto::Weapon::default_instance();
}
::proto::Weapon* Equip::mutable_weapon() {
  if (!has_weapon()) {
    clear_detail();
    set_has_weapon();
    detail_.weapon_ = new ::proto::Weapon;
  }
  // @@protoc_insertion_point(field_mutable:proto.Equip.weapon)
  return detail_.weapon_;
}
::proto::Weapon* Equip::release_weapon() {
  // @@protoc_insertion_point(field_release:proto.Equip.weapon)
  if (has_weapon()) {
    clear_has_detail();
    ::proto::Weapon* temp = detail_.weapon_;
    detail_.weapon_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Equip::set_allocated_weapon(::proto::Weapon* weapon) {
  clear_detail();
  if (weapon) {
    set_has_weapon();
    detail_.weapon_ = weapon;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Equip.weapon)
}

bool Equip::has_detail() const {
  return detail_case() != DETAIL_NOT_SET;
}
void Equip::clear_has_detail() {
  _oneof_case_[0] = DETAIL_NOT_SET;
}
Equip::DetailCase Equip::detail_case() const {
  return Equip::DetailCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Furniture::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Furniture::Furniture()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Furniture)
}
Furniture::Furniture(const Furniture& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:proto.Furniture)
}

void Furniture::SharedCtor() {
  count_ = 0u;
  _cached_size_ = 0;
}

Furniture::~Furniture() {
  // @@protoc_insertion_point(destructor:proto.Furniture)
  SharedDtor();
}

void Furniture::SharedDtor() {
}

void Furniture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Furniture::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Furniture& Furniture::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

Furniture* Furniture::New(::google::protobuf::Arena* arena) const {
  Furniture* n = new Furniture;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Furniture::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Furniture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = 0u;
  _internal_metadata_.Clear();
}

bool Furniture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Furniture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Furniture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Furniture)
  return false;
#undef DO_
}

void Furniture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Furniture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Furniture)
}

::google::protobuf::uint8* Furniture::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Furniture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Furniture)
  return target;
}

size_t Furniture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Furniture)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Furniture::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Furniture)
  GOOGLE_DCHECK_NE(&from, this);
  const Furniture* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Furniture>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Furniture)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Furniture)
    MergeFrom(*source);
  }
}

void Furniture::MergeFrom(const Furniture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Furniture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    set_count(from.count());
  }
}

void Furniture::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Furniture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Furniture::CopyFrom(const Furniture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Furniture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Furniture::IsInitialized() const {
  return true;
}

void Furniture::Swap(Furniture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Furniture::InternalSwap(Furniture* other) {
  using std::swap;
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Furniture::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Furniture

// uint32 count = 1;
void Furniture::clear_count() {
  count_ = 0u;
}
::google::protobuf::uint32 Furniture::count() const {
  // @@protoc_insertion_point(field_get:proto.Furniture.count)
  return count_;
}
void Furniture::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.Furniture.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Item::kItemIdFieldNumber;
const int Item::kGuidFieldNumber;
const int Item::kMaterialFieldNumber;
const int Item::kEquipFieldNumber;
const int Item::kFurnitureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Item::Item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Item)
}
Item::Item(const Item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(item_id_));
  clear_has_detail();
  switch (from.detail_case()) {
    case kMaterial: {
      mutable_material()->::proto::Material::MergeFrom(from.material());
      break;
    }
    case kEquip: {
      mutable_equip()->::proto::Equip::MergeFrom(from.equip());
      break;
    }
    case kFurniture: {
      mutable_furniture()->::proto::Furniture::MergeFrom(from.furniture());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.Item)
}

void Item::SharedCtor() {
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_id_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(item_id_));
  clear_has_detail();
  _cached_size_ = 0;
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:proto.Item)
  SharedDtor();
}

void Item::SharedDtor() {
  if (has_detail()) {
    clear_detail();
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Item& Item::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

Item* Item::New(::google::protobuf::Arena* arena) const {
  Item* n = new Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Item::clear_detail() {
// @@protoc_insertion_point(one_of_clear_start:proto.Item)
  switch (detail_case()) {
    case kMaterial: {
      delete detail_.material_;
      break;
    }
    case kEquip: {
      delete detail_.equip_;
      break;
    }
    case kFurniture: {
      delete detail_.furniture_;
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DETAIL_NOT_SET;
}


void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_id_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(item_id_));
  clear_detail();
  _internal_metadata_.Clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Material material = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_material()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Equip equip = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Furniture furniture = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_furniture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Item)
  return false;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // .proto.Material material = 5;
  if (has_material()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *detail_.material_, output);
  }

  // .proto.Equip equip = 6;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *detail_.equip_, output);
  }

  // .proto.Furniture furniture = 7;
  if (has_furniture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *detail_.furniture_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Item)
}

::google::protobuf::uint8* Item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // .proto.Material material = 5;
  if (has_material()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *detail_.material_, deterministic, target);
  }

  // .proto.Equip equip = 6;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *detail_.equip_, deterministic, target);
  }

  // .proto.Furniture furniture = 7;
  if (has_furniture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *detail_.furniture_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Item)
  return target;
}

size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Item)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 guid = 2;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_id());
  }

  switch (detail_case()) {
    // .proto.Material material = 5;
    case kMaterial: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.material_);
      break;
    }
    // .proto.Equip equip = 6;
    case kEquip: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.equip_);
      break;
    }
    // .proto.Furniture furniture = 7;
    case kFurniture: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.furniture_);
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const Item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Item)
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.item_id() != 0) {
    set_item_id(from.item_id());
  }
  switch (from.detail_case()) {
    case kMaterial: {
      mutable_material()->::proto::Material::MergeFrom(from.material());
      break;
    }
    case kEquip: {
      mutable_equip()->::proto::Equip::MergeFrom(from.equip());
      break;
    }
    case kFurniture: {
      mutable_furniture()->::proto::Furniture::MergeFrom(from.furniture());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  return true;
}

void Item::Swap(Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Item::InternalSwap(Item* other) {
  using std::swap;
  swap(guid_, other->guid_);
  swap(item_id_, other->item_id_);
  swap(detail_, other->detail_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Item

// uint32 item_id = 1;
void Item::clear_item_id() {
  item_id_ = 0u;
}
::google::protobuf::uint32 Item::item_id() const {
  // @@protoc_insertion_point(field_get:proto.Item.item_id)
  return item_id_;
}
void Item::set_item_id(::google::protobuf::uint32 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.Item.item_id)
}

// uint64 guid = 2;
void Item::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Item::guid() const {
  // @@protoc_insertion_point(field_get:proto.Item.guid)
  return guid_;
}
void Item::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:proto.Item.guid)
}

// .proto.Material material = 5;
bool Item::has_material() const {
  return detail_case() == kMaterial;
}
void Item::set_has_material() {
  _oneof_case_[0] = kMaterial;
}
void Item::clear_material() {
  if (has_material()) {
    delete detail_.material_;
    clear_has_detail();
  }
}
 const ::proto::Material& Item::material() const {
  // @@protoc_insertion_point(field_get:proto.Item.material)
  return has_material()
      ? *detail_.material_
      : ::proto::Material::default_instance();
}
::proto::Material* Item::mutable_material() {
  if (!has_material()) {
    clear_detail();
    set_has_material();
    detail_.material_ = new ::proto::Material;
  }
  // @@protoc_insertion_point(field_mutable:proto.Item.material)
  return detail_.material_;
}
::proto::Material* Item::release_material() {
  // @@protoc_insertion_point(field_release:proto.Item.material)
  if (has_material()) {
    clear_has_detail();
    ::proto::Material* temp = detail_.material_;
    detail_.material_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Item::set_allocated_material(::proto::Material* material) {
  clear_detail();
  if (material) {
    set_has_material();
    detail_.material_ = material;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Item.material)
}

// .proto.Equip equip = 6;
bool Item::has_equip() const {
  return detail_case() == kEquip;
}
void Item::set_has_equip() {
  _oneof_case_[0] = kEquip;
}
void Item::clear_equip() {
  if (has_equip()) {
    delete detail_.equip_;
    clear_has_detail();
  }
}
 const ::proto::Equip& Item::equip() const {
  // @@protoc_insertion_point(field_get:proto.Item.equip)
  return has_equip()
      ? *detail_.equip_
      : ::proto::Equip::default_instance();
}
::proto::Equip* Item::mutable_equip() {
  if (!has_equip()) {
    clear_detail();
    set_has_equip();
    detail_.equip_ = new ::proto::Equip;
  }
  // @@protoc_insertion_point(field_mutable:proto.Item.equip)
  return detail_.equip_;
}
::proto::Equip* Item::release_equip() {
  // @@protoc_insertion_point(field_release:proto.Item.equip)
  if (has_equip()) {
    clear_has_detail();
    ::proto::Equip* temp = detail_.equip_;
    detail_.equip_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Item::set_allocated_equip(::proto::Equip* equip) {
  clear_detail();
  if (equip) {
    set_has_equip();
    detail_.equip_ = equip;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Item.equip)
}

// .proto.Furniture furniture = 7;
bool Item::has_furniture() const {
  return detail_case() == kFurniture;
}
void Item::set_has_furniture() {
  _oneof_case_[0] = kFurniture;
}
void Item::clear_furniture() {
  if (has_furniture()) {
    delete detail_.furniture_;
    clear_has_detail();
  }
}
 const ::proto::Furniture& Item::furniture() const {
  // @@protoc_insertion_point(field_get:proto.Item.furniture)
  return has_furniture()
      ? *detail_.furniture_
      : ::proto::Furniture::default_instance();
}
::proto::Furniture* Item::mutable_furniture() {
  if (!has_furniture()) {
    clear_detail();
    set_has_furniture();
    detail_.furniture_ = new ::proto::Furniture;
  }
  // @@protoc_insertion_point(field_mutable:proto.Item.furniture)
  return detail_.furniture_;
}
::proto::Furniture* Item::release_furniture() {
  // @@protoc_insertion_point(field_release:proto.Item.furniture)
  if (has_furniture()) {
    clear_has_detail();
    ::proto::Furniture* temp = detail_.furniture_;
    detail_.furniture_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Item::set_allocated_furniture(::proto::Furniture* furniture) {
  clear_detail();
  if (furniture) {
    set_has_furniture();
    detail_.furniture_ = furniture;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Item.furniture)
}

bool Item::has_detail() const {
  return detail_case() != DETAIL_NOT_SET;
}
void Item::clear_has_detail() {
  _oneof_case_[0] = DETAIL_NOT_SET;
}
Item::DetailCase Item::detail_case() const {
  return Item::DetailCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ItemParam::kItemIdFieldNumber;
const int ItemParam::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ItemParam::ItemParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ItemParam)
}
ItemParam::ItemParam(const ItemParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:proto.ItemParam)
}

void ItemParam::SharedCtor() {
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(count_));
  _cached_size_ = 0;
}

ItemParam::~ItemParam() {
  // @@protoc_insertion_point(destructor:proto.ItemParam)
  SharedDtor();
}

void ItemParam::SharedDtor() {
}

void ItemParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemParam::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ItemParam& ItemParam::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ItemParam* ItemParam::New(::google::protobuf::Arena* arena) const {
  ItemParam* n = new ItemParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ItemParam::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ItemParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

bool ItemParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ItemParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ItemParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ItemParam)
  return false;
#undef DO_
}

void ItemParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ItemParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ItemParam)
}

::google::protobuf::uint8* ItemParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ItemParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ItemParam)
  return target;
}

size_t ItemParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ItemParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_id());
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ItemParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ItemParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ItemParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ItemParam)
    MergeFrom(*source);
  }
}

void ItemParam::MergeFrom(const ItemParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ItemParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.item_id() != 0) {
    set_item_id(from.item_id());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void ItemParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ItemParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemParam::CopyFrom(const ItemParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ItemParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemParam::IsInitialized() const {
  return true;
}

void ItemParam::Swap(ItemParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ItemParam::InternalSwap(ItemParam* other) {
  using std::swap;
  swap(item_id_, other->item_id_);
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ItemParam::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ItemParam

// uint32 item_id = 1;
void ItemParam::clear_item_id() {
  item_id_ = 0u;
}
::google::protobuf::uint32 ItemParam::item_id() const {
  // @@protoc_insertion_point(field_get:proto.ItemParam.item_id)
  return item_id_;
}
void ItemParam::set_item_id(::google::protobuf::uint32 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ItemParam.item_id)
}

// uint32 count = 2;
void ItemParam::clear_count() {
  count_ = 0u;
}
::google::protobuf::uint32 ItemParam::count() const {
  // @@protoc_insertion_point(field_get:proto.ItemParam.count)
  return count_;
}
void ItemParam::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.ItemParam.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EquipParam::kItemIdFieldNumber;
const int EquipParam::kItemNumFieldNumber;
const int EquipParam::kItemLevelFieldNumber;
const int EquipParam::kPromoteLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EquipParam::EquipParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.EquipParam)
}
EquipParam::EquipParam(const EquipParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&promote_level_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(promote_level_));
  // @@protoc_insertion_point(copy_constructor:proto.EquipParam)
}

void EquipParam::SharedCtor() {
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&promote_level_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(promote_level_));
  _cached_size_ = 0;
}

EquipParam::~EquipParam() {
  // @@protoc_insertion_point(destructor:proto.EquipParam)
  SharedDtor();
}

void EquipParam::SharedDtor() {
}

void EquipParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipParam::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EquipParam& EquipParam::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

EquipParam* EquipParam::New(::google::protobuf::Arena* arena) const {
  EquipParam* n = new EquipParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EquipParam::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EquipParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&promote_level_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(promote_level_));
  _internal_metadata_.Clear();
}

bool EquipParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.EquipParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 item_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 item_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 promote_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &promote_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.EquipParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.EquipParam)
  return false;
#undef DO_
}

void EquipParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.EquipParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // uint32 item_num = 2;
  if (this->item_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_num(), output);
  }

  // uint32 item_level = 3;
  if (this->item_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_level(), output);
  }

  // uint32 promote_level = 4;
  if (this->promote_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->promote_level(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.EquipParam)
}

::google::protobuf::uint8* EquipParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.EquipParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // uint32 item_num = 2;
  if (this->item_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_num(), target);
  }

  // uint32 item_level = 3;
  if (this->item_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_level(), target);
  }

  // uint32 promote_level = 4;
  if (this->promote_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->promote_level(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EquipParam)
  return target;
}

size_t EquipParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EquipParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_id());
  }

  // uint32 item_num = 2;
  if (this->item_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_num());
  }

  // uint32 item_level = 3;
  if (this->item_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_level());
  }

  // uint32 promote_level = 4;
  if (this->promote_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->promote_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.EquipParam)
  GOOGLE_DCHECK_NE(&from, this);
  const EquipParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EquipParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.EquipParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.EquipParam)
    MergeFrom(*source);
  }
}

void EquipParam::MergeFrom(const EquipParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.EquipParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.item_id() != 0) {
    set_item_id(from.item_id());
  }
  if (from.item_num() != 0) {
    set_item_num(from.item_num());
  }
  if (from.item_level() != 0) {
    set_item_level(from.item_level());
  }
  if (from.promote_level() != 0) {
    set_promote_level(from.promote_level());
  }
}

void EquipParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.EquipParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipParam::CopyFrom(const EquipParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EquipParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipParam::IsInitialized() const {
  return true;
}

void EquipParam::Swap(EquipParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EquipParam::InternalSwap(EquipParam* other) {
  using std::swap;
  swap(item_id_, other->item_id_);
  swap(item_num_, other->item_num_);
  swap(item_level_, other->item_level_);
  swap(promote_level_, other->promote_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EquipParam::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EquipParam

// uint32 item_id = 1;
void EquipParam::clear_item_id() {
  item_id_ = 0u;
}
::google::protobuf::uint32 EquipParam::item_id() const {
  // @@protoc_insertion_point(field_get:proto.EquipParam.item_id)
  return item_id_;
}
void EquipParam::set_item_id(::google::protobuf::uint32 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.EquipParam.item_id)
}

// uint32 item_num = 2;
void EquipParam::clear_item_num() {
  item_num_ = 0u;
}
::google::protobuf::uint32 EquipParam::item_num() const {
  // @@protoc_insertion_point(field_get:proto.EquipParam.item_num)
  return item_num_;
}
void EquipParam::set_item_num(::google::protobuf::uint32 value) {
  
  item_num_ = value;
  // @@protoc_insertion_point(field_set:proto.EquipParam.item_num)
}

// uint32 item_level = 3;
void EquipParam::clear_item_level() {
  item_level_ = 0u;
}
::google::protobuf::uint32 EquipParam::item_level() const {
  // @@protoc_insertion_point(field_get:proto.EquipParam.item_level)
  return item_level_;
}
void EquipParam::set_item_level(::google::protobuf::uint32 value) {
  
  item_level_ = value;
  // @@protoc_insertion_point(field_set:proto.EquipParam.item_level)
}

// uint32 promote_level = 4;
void EquipParam::clear_promote_level() {
  promote_level_ = 0u;
}
::google::protobuf::uint32 EquipParam::promote_level() const {
  // @@protoc_insertion_point(field_get:proto.EquipParam.promote_level)
  return promote_level_;
}
void EquipParam::set_promote_level(::google::protobuf::uint32 value) {
  
  promote_level_ = value;
  // @@protoc_insertion_point(field_set:proto.EquipParam.promote_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EquipParamList::kItemListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EquipParamList::EquipParamList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.EquipParamList)
}
EquipParamList::EquipParamList(const EquipParamList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      item_list_(from.item_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.EquipParamList)
}

void EquipParamList::SharedCtor() {
  _cached_size_ = 0;
}

EquipParamList::~EquipParamList() {
  // @@protoc_insertion_point(destructor:proto.EquipParamList)
  SharedDtor();
}

void EquipParamList::SharedDtor() {
}

void EquipParamList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipParamList::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EquipParamList& EquipParamList::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

EquipParamList* EquipParamList::New(::google::protobuf::Arena* arena) const {
  EquipParamList* n = new EquipParamList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EquipParamList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EquipParamList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_list_.Clear();
  _internal_metadata_.Clear();
}

bool EquipParamList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.EquipParamList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.EquipParam item_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.EquipParamList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.EquipParamList)
  return false;
#undef DO_
}

void EquipParamList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.EquipParamList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.EquipParam item_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.EquipParamList)
}

::google::protobuf::uint8* EquipParamList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.EquipParamList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.EquipParam item_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->item_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EquipParamList)
  return target;
}

size_t EquipParamList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EquipParamList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.EquipParam item_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipParamList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.EquipParamList)
  GOOGLE_DCHECK_NE(&from, this);
  const EquipParamList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EquipParamList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.EquipParamList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.EquipParamList)
    MergeFrom(*source);
  }
}

void EquipParamList::MergeFrom(const EquipParamList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.EquipParamList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_list_.MergeFrom(from.item_list_);
}

void EquipParamList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.EquipParamList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipParamList::CopyFrom(const EquipParamList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EquipParamList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipParamList::IsInitialized() const {
  return true;
}

void EquipParamList::Swap(EquipParamList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EquipParamList::InternalSwap(EquipParamList* other) {
  using std::swap;
  item_list_.InternalSwap(&other->item_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EquipParamList::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EquipParamList

// repeated .proto.EquipParam item_list = 1;
int EquipParamList::item_list_size() const {
  return item_list_.size();
}
void EquipParamList::clear_item_list() {
  item_list_.Clear();
}
const ::proto::EquipParam& EquipParamList::item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.EquipParamList.item_list)
  return item_list_.Get(index);
}
::proto::EquipParam* EquipParamList::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.EquipParamList.item_list)
  return item_list_.Mutable(index);
}
::proto::EquipParam* EquipParamList::add_item_list() {
  // @@protoc_insertion_point(field_add:proto.EquipParamList.item_list)
  return item_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::EquipParam >*
EquipParamList::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.EquipParamList.item_list)
  return &item_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::EquipParam >&
EquipParamList::item_list() const {
  // @@protoc_insertion_point(field_list:proto.EquipParamList.item_list)
  return item_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reward::kRewardIdFieldNumber;
const int Reward::kItemListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reward::Reward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Reward)
}
Reward::Reward(const Reward& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      item_list_(from.item_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reward_id_ = from.reward_id_;
  // @@protoc_insertion_point(copy_constructor:proto.Reward)
}

void Reward::SharedCtor() {
  reward_id_ = 0u;
  _cached_size_ = 0;
}

Reward::~Reward() {
  // @@protoc_insertion_point(destructor:proto.Reward)
  SharedDtor();
}

void Reward::SharedDtor() {
}

void Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reward::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Reward& Reward::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

Reward* Reward::New(::google::protobuf::Arena* arena) const {
  Reward* n = new Reward;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Reward::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Reward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_list_.Clear();
  reward_id_ = 0u;
  _internal_metadata_.Clear();
}

bool Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Reward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 reward_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ItemParam item_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Reward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Reward)
  return false;
#undef DO_
}

void Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Reward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reward_id = 1;
  if (this->reward_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reward_id(), output);
  }

  // repeated .proto.ItemParam item_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Reward)
}

::google::protobuf::uint8* Reward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Reward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reward_id = 1;
  if (this->reward_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reward_id(), target);
  }

  // repeated .proto.ItemParam item_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->item_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Reward)
  return target;
}

size_t Reward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Reward)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ItemParam item_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->item_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_list(static_cast<int>(i)));
    }
  }

  // uint32 reward_id = 1;
  if (this->reward_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reward_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Reward)
  GOOGLE_DCHECK_NE(&from, this);
  const Reward* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Reward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Reward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Reward)
    MergeFrom(*source);
  }
}

void Reward::MergeFrom(const Reward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Reward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_list_.MergeFrom(from.item_list_);
  if (from.reward_id() != 0) {
    set_reward_id(from.reward_id());
  }
}

void Reward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Reward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reward::CopyFrom(const Reward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Reward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reward::IsInitialized() const {
  return true;
}

void Reward::Swap(Reward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reward::InternalSwap(Reward* other) {
  using std::swap;
  item_list_.InternalSwap(&other->item_list_);
  swap(reward_id_, other->reward_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Reward::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Reward

// uint32 reward_id = 1;
void Reward::clear_reward_id() {
  reward_id_ = 0u;
}
::google::protobuf::uint32 Reward::reward_id() const {
  // @@protoc_insertion_point(field_get:proto.Reward.reward_id)
  return reward_id_;
}
void Reward::set_reward_id(::google::protobuf::uint32 value) {
  
  reward_id_ = value;
  // @@protoc_insertion_point(field_set:proto.Reward.reward_id)
}

// repeated .proto.ItemParam item_list = 2;
int Reward::item_list_size() const {
  return item_list_.size();
}
void Reward::clear_item_list() {
  item_list_.Clear();
}
const ::proto::ItemParam& Reward::item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.Reward.item_list)
  return item_list_.Get(index);
}
::proto::ItemParam* Reward::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.Reward.item_list)
  return item_list_.Mutable(index);
}
::proto::ItemParam* Reward::add_item_list() {
  // @@protoc_insertion_point(field_add:proto.Reward.item_list)
  return item_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
Reward::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.Reward.item_list)
  return &item_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
Reward::item_list() const {
  // @@protoc_insertion_point(field_list:proto.Reward.item_list)
  return item_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbilityString::kStrFieldNumber;
const int AbilityString::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbilityString::AbilityString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AbilityString)
}
AbilityString::AbilityString(const AbilityString& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kStr: {
      set_str(from.str());
      break;
    }
    case kHash: {
      set_hash(from.hash());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.AbilityString)
}

void AbilityString::SharedCtor() {
  clear_has_type();
  _cached_size_ = 0;
}

AbilityString::~AbilityString() {
  // @@protoc_insertion_point(destructor:proto.AbilityString)
  SharedDtor();
}

void AbilityString::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void AbilityString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbilityString::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AbilityString& AbilityString::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

AbilityString* AbilityString::New(::google::protobuf::Arena* arena) const {
  AbilityString* n = new AbilityString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AbilityString::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:proto.AbilityString)
  switch (type_case()) {
    case kStr: {
      type_.str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kHash: {
      // No need to clear
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void AbilityString::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AbilityString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

bool AbilityString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AbilityString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string str = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->str().data(), static_cast<int>(this->str().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.AbilityString.str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_.hash_)));
          set_has_hash();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AbilityString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AbilityString)
  return false;
#undef DO_
}

void AbilityString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AbilityString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str().data(), static_cast<int>(this->str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AbilityString.str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->str(), output);
  }

  // uint32 hash = 2;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hash(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AbilityString)
}

::google::protobuf::uint8* AbilityString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AbilityString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str().data(), static_cast<int>(this->str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AbilityString.str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }

  // uint32 hash = 2;
  if (has_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hash(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AbilityString)
  return target;
}

size_t AbilityString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AbilityString)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (type_case()) {
    // string str = 1;
    case kStr: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
      break;
    }
    // uint32 hash = 2;
    case kHash: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hash());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbilityString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AbilityString)
  GOOGLE_DCHECK_NE(&from, this);
  const AbilityString* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AbilityString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AbilityString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AbilityString)
    MergeFrom(*source);
  }
}

void AbilityString::MergeFrom(const AbilityString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AbilityString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kStr: {
      set_str(from.str());
      break;
    }
    case kHash: {
      set_hash(from.hash());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void AbilityString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AbilityString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbilityString::CopyFrom(const AbilityString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AbilityString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbilityString::IsInitialized() const {
  return true;
}

void AbilityString::Swap(AbilityString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbilityString::InternalSwap(AbilityString* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AbilityString::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AbilityString

// string str = 1;
bool AbilityString::has_str() const {
  return type_case() == kStr;
}
void AbilityString::set_has_str() {
  _oneof_case_[0] = kStr;
}
void AbilityString::clear_str() {
  if (has_str()) {
    type_.str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_type();
  }
}
const ::std::string& AbilityString::str() const {
  // @@protoc_insertion_point(field_get:proto.AbilityString.str)
  if (has_str()) {
    return type_.str_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void AbilityString::set_str(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.AbilityString.str)
  if (!has_str()) {
    clear_type();
    set_has_str();
    type_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AbilityString.str)
}
#if LANG_CXX11
void AbilityString::set_str(::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.AbilityString.str)
  if (!has_str()) {
    clear_type();
    set_has_str();
    type_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AbilityString.str)
}
#endif
void AbilityString::set_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_str()) {
    clear_type();
    set_has_str();
    type_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AbilityString.str)
}
void AbilityString::set_str(const char* value, size_t size) {
  if (!has_str()) {
    clear_type();
    set_has_str();
    type_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AbilityString.str)
}
::std::string* AbilityString::mutable_str() {
  if (!has_str()) {
    clear_type();
    set_has_str();
    type_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:proto.AbilityString.str)
  return type_.str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AbilityString::release_str() {
  // @@protoc_insertion_point(field_release:proto.AbilityString.str)
  if (has_str()) {
    clear_has_type();
    return type_.str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void AbilityString::set_allocated_str(::std::string* str) {
  if (!has_str()) {
    type_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_type();
  if (str != NULL) {
    set_has_str();
    type_.str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        str);
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AbilityString.str)
}

// uint32 hash = 2;
bool AbilityString::has_hash() const {
  return type_case() == kHash;
}
void AbilityString::set_has_hash() {
  _oneof_case_[0] = kHash;
}
void AbilityString::clear_hash() {
  if (has_hash()) {
    type_.hash_ = 0u;
    clear_has_type();
  }
}
::google::protobuf::uint32 AbilityString::hash() const {
  // @@protoc_insertion_point(field_get:proto.AbilityString.hash)
  if (has_hash()) {
    return type_.hash_;
  }
  return 0u;
}
void AbilityString::set_hash(::google::protobuf::uint32 value) {
  if (!has_hash()) {
    clear_type();
    set_has_hash();
  }
  type_.hash_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityString.hash)
}

bool AbilityString::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
void AbilityString::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
AbilityString::TypeCase AbilityString::type_case() const {
  return AbilityString::TypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbilityFloatValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbilityFloatValue::AbilityFloatValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AbilityFloatValue)
}
AbilityFloatValue::AbilityFloatValue(const AbilityFloatValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:proto.AbilityFloatValue)
}

void AbilityFloatValue::SharedCtor() {
  value_ = 0;
  _cached_size_ = 0;
}

AbilityFloatValue::~AbilityFloatValue() {
  // @@protoc_insertion_point(destructor:proto.AbilityFloatValue)
  SharedDtor();
}

void AbilityFloatValue::SharedDtor() {
}

void AbilityFloatValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbilityFloatValue::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AbilityFloatValue& AbilityFloatValue::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

AbilityFloatValue* AbilityFloatValue::New(::google::protobuf::Arena* arena) const {
  AbilityFloatValue* n = new AbilityFloatValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AbilityFloatValue::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AbilityFloatValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear();
}

bool AbilityFloatValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AbilityFloatValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AbilityFloatValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AbilityFloatValue)
  return false;
#undef DO_
}

void AbilityFloatValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AbilityFloatValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AbilityFloatValue)
}

::google::protobuf::uint8* AbilityFloatValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AbilityFloatValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AbilityFloatValue)
  return target;
}

size_t AbilityFloatValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AbilityFloatValue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float value = 1;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbilityFloatValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AbilityFloatValue)
  GOOGLE_DCHECK_NE(&from, this);
  const AbilityFloatValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AbilityFloatValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AbilityFloatValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AbilityFloatValue)
    MergeFrom(*source);
  }
}

void AbilityFloatValue::MergeFrom(const AbilityFloatValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AbilityFloatValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
}

void AbilityFloatValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AbilityFloatValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbilityFloatValue::CopyFrom(const AbilityFloatValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AbilityFloatValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbilityFloatValue::IsInitialized() const {
  return true;
}

void AbilityFloatValue::Swap(AbilityFloatValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbilityFloatValue::InternalSwap(AbilityFloatValue* other) {
  using std::swap;
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AbilityFloatValue::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AbilityFloatValue

// float value = 1;
void AbilityFloatValue::clear_value() {
  value_ = 0;
}
float AbilityFloatValue::value() const {
  // @@protoc_insertion_point(field_get:proto.AbilityFloatValue.value)
  return value_;
}
void AbilityFloatValue::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityFloatValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbilityScalarValueEntry::kKeyFieldNumber;
const int AbilityScalarValueEntry::kValueTypeFieldNumber;
const int AbilityScalarValueEntry::kFloatValueFieldNumber;
const int AbilityScalarValueEntry::kStringValueFieldNumber;
const int AbilityScalarValueEntry::kIntValueFieldNumber;
const int AbilityScalarValueEntry::kUintValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbilityScalarValueEntry::AbilityScalarValueEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AbilityScalarValueEntry)
}
AbilityScalarValueEntry::AbilityScalarValueEntry(const AbilityScalarValueEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::proto::AbilityString(*from.key_);
  } else {
    key_ = NULL;
  }
  value_type_ = from.value_type_;
  clear_has_value();
  switch (from.value_case()) {
    case kFloatValue: {
      set_float_value(from.float_value());
      break;
    }
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case kUintValue: {
      set_uint_value(from.uint_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.AbilityScalarValueEntry)
}

void AbilityScalarValueEntry::SharedCtor() {
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_type_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_type_));
  clear_has_value();
  _cached_size_ = 0;
}

AbilityScalarValueEntry::~AbilityScalarValueEntry() {
  // @@protoc_insertion_point(destructor:proto.AbilityScalarValueEntry)
  SharedDtor();
}

void AbilityScalarValueEntry::SharedDtor() {
  if (this != internal_default_instance()) delete key_;
  if (has_value()) {
    clear_value();
  }
}

void AbilityScalarValueEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbilityScalarValueEntry::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AbilityScalarValueEntry& AbilityScalarValueEntry::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

AbilityScalarValueEntry* AbilityScalarValueEntry::New(::google::protobuf::Arena* arena) const {
  AbilityScalarValueEntry* n = new AbilityScalarValueEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AbilityScalarValueEntry::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:proto.AbilityScalarValueEntry)
  switch (value_case()) {
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      value_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kUintValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void AbilityScalarValueEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AbilityScalarValueEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
  value_type_ = 0;
  clear_value();
  _internal_metadata_.Clear();
}

bool AbilityScalarValueEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AbilityScalarValueEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.AbilityString key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AbilityScalarType value_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_value_type(static_cast< ::proto::AbilityScalarType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float float_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_.float_value_)));
          set_has_float_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string string_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string_value().data(), static_cast<int>(this->string_value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.AbilityScalarValueEntry.string_value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 int_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_.int_value_)));
          set_has_int_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uint_value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_.uint_value_)));
          set_has_uint_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AbilityScalarValueEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AbilityScalarValueEntry)
  return false;
#undef DO_
}

void AbilityScalarValueEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AbilityScalarValueEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.AbilityString key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->key_, output);
  }

  // .proto.AbilityScalarType value_type = 2;
  if (this->value_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->value_type(), output);
  }

  // float float_value = 3;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->float_value(), output);
  }

  // string string_value = 4;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AbilityScalarValueEntry.string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->string_value(), output);
  }

  // int32 int_value = 5;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->int_value(), output);
  }

  // uint32 uint_value = 6;
  if (has_uint_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uint_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AbilityScalarValueEntry)
}

::google::protobuf::uint8* AbilityScalarValueEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AbilityScalarValueEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.AbilityString key = 1;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->key_, deterministic, target);
  }

  // .proto.AbilityScalarType value_type = 2;
  if (this->value_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->value_type(), target);
  }

  // float float_value = 3;
  if (has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->float_value(), target);
  }

  // string string_value = 4;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AbilityScalarValueEntry.string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->string_value(), target);
  }

  // int32 int_value = 5;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->int_value(), target);
  }

  // uint32 uint_value = 6;
  if (has_uint_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uint_value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AbilityScalarValueEntry)
  return target;
}

size_t AbilityScalarValueEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AbilityScalarValueEntry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.AbilityString key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // .proto.AbilityScalarType value_type = 2;
  if (this->value_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->value_type());
  }

  switch (value_case()) {
    // float float_value = 3;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // string string_value = 4;
    case kStringValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
      break;
    }
    // int32 int_value = 5;
    case kIntValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_value());
      break;
    }
    // uint32 uint_value = 6;
    case kUintValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbilityScalarValueEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AbilityScalarValueEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const AbilityScalarValueEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AbilityScalarValueEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AbilityScalarValueEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AbilityScalarValueEntry)
    MergeFrom(*source);
  }
}

void AbilityScalarValueEntry::MergeFrom(const AbilityScalarValueEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AbilityScalarValueEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    mutable_key()->::proto::AbilityString::MergeFrom(from.key());
  }
  if (from.value_type() != 0) {
    set_value_type(from.value_type());
  }
  switch (from.value_case()) {
    case kFloatValue: {
      set_float_value(from.float_value());
      break;
    }
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case kUintValue: {
      set_uint_value(from.uint_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void AbilityScalarValueEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AbilityScalarValueEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbilityScalarValueEntry::CopyFrom(const AbilityScalarValueEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AbilityScalarValueEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbilityScalarValueEntry::IsInitialized() const {
  return true;
}

void AbilityScalarValueEntry::Swap(AbilityScalarValueEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbilityScalarValueEntry::InternalSwap(AbilityScalarValueEntry* other) {
  using std::swap;
  swap(key_, other->key_);
  swap(value_type_, other->value_type_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AbilityScalarValueEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AbilityScalarValueEntry

// .proto.AbilityString key = 1;
bool AbilityScalarValueEntry::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
void AbilityScalarValueEntry::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::proto::AbilityString& AbilityScalarValueEntry::key() const {
  const ::proto::AbilityString* p = key_;
  // @@protoc_insertion_point(field_get:proto.AbilityScalarValueEntry.key)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::AbilityString*>(
      &::proto::_AbilityString_default_instance_);
}
::proto::AbilityString* AbilityScalarValueEntry::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::proto::AbilityString;
  }
  // @@protoc_insertion_point(field_mutable:proto.AbilityScalarValueEntry.key)
  return key_;
}
::proto::AbilityString* AbilityScalarValueEntry::release_key() {
  // @@protoc_insertion_point(field_release:proto.AbilityScalarValueEntry.key)
  
  ::proto::AbilityString* temp = key_;
  key_ = NULL;
  return temp;
}
void AbilityScalarValueEntry::set_allocated_key(::proto::AbilityString* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AbilityScalarValueEntry.key)
}

// .proto.AbilityScalarType value_type = 2;
void AbilityScalarValueEntry::clear_value_type() {
  value_type_ = 0;
}
::proto::AbilityScalarType AbilityScalarValueEntry::value_type() const {
  // @@protoc_insertion_point(field_get:proto.AbilityScalarValueEntry.value_type)
  return static_cast< ::proto::AbilityScalarType >(value_type_);
}
void AbilityScalarValueEntry::set_value_type(::proto::AbilityScalarType value) {
  
  value_type_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityScalarValueEntry.value_type)
}

// float float_value = 3;
bool AbilityScalarValueEntry::has_float_value() const {
  return value_case() == kFloatValue;
}
void AbilityScalarValueEntry::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
void AbilityScalarValueEntry::clear_float_value() {
  if (has_float_value()) {
    value_.float_value_ = 0;
    clear_has_value();
  }
}
float AbilityScalarValueEntry::float_value() const {
  // @@protoc_insertion_point(field_get:proto.AbilityScalarValueEntry.float_value)
  if (has_float_value()) {
    return value_.float_value_;
  }
  return 0;
}
void AbilityScalarValueEntry::set_float_value(float value) {
  if (!has_float_value()) {
    clear_value();
    set_has_float_value();
  }
  value_.float_value_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityScalarValueEntry.float_value)
}

// string string_value = 4;
bool AbilityScalarValueEntry::has_string_value() const {
  return value_case() == kStringValue;
}
void AbilityScalarValueEntry::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
void AbilityScalarValueEntry::clear_string_value() {
  if (has_string_value()) {
    value_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
const ::std::string& AbilityScalarValueEntry::string_value() const {
  // @@protoc_insertion_point(field_get:proto.AbilityScalarValueEntry.string_value)
  if (has_string_value()) {
    return value_.string_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void AbilityScalarValueEntry::set_string_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.AbilityScalarValueEntry.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AbilityScalarValueEntry.string_value)
}
#if LANG_CXX11
void AbilityScalarValueEntry::set_string_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.AbilityScalarValueEntry.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AbilityScalarValueEntry.string_value)
}
#endif
void AbilityScalarValueEntry::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AbilityScalarValueEntry.string_value)
}
void AbilityScalarValueEntry::set_string_value(const char* value, size_t size) {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AbilityScalarValueEntry.string_value)
}
::std::string* AbilityScalarValueEntry::mutable_string_value() {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:proto.AbilityScalarValueEntry.string_value)
  return value_.string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AbilityScalarValueEntry::release_string_value() {
  // @@protoc_insertion_point(field_release:proto.AbilityScalarValueEntry.string_value)
  if (has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void AbilityScalarValueEntry::set_allocated_string_value(::std::string* string_value) {
  if (!has_string_value()) {
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (string_value != NULL) {
    set_has_string_value();
    value_.string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AbilityScalarValueEntry.string_value)
}

// int32 int_value = 5;
bool AbilityScalarValueEntry::has_int_value() const {
  return value_case() == kIntValue;
}
void AbilityScalarValueEntry::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
void AbilityScalarValueEntry::clear_int_value() {
  if (has_int_value()) {
    value_.int_value_ = 0;
    clear_has_value();
  }
}
::google::protobuf::int32 AbilityScalarValueEntry::int_value() const {
  // @@protoc_insertion_point(field_get:proto.AbilityScalarValueEntry.int_value)
  if (has_int_value()) {
    return value_.int_value_;
  }
  return 0;
}
void AbilityScalarValueEntry::set_int_value(::google::protobuf::int32 value) {
  if (!has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityScalarValueEntry.int_value)
}

// uint32 uint_value = 6;
bool AbilityScalarValueEntry::has_uint_value() const {
  return value_case() == kUintValue;
}
void AbilityScalarValueEntry::set_has_uint_value() {
  _oneof_case_[0] = kUintValue;
}
void AbilityScalarValueEntry::clear_uint_value() {
  if (has_uint_value()) {
    value_.uint_value_ = 0u;
    clear_has_value();
  }
}
::google::protobuf::uint32 AbilityScalarValueEntry::uint_value() const {
  // @@protoc_insertion_point(field_get:proto.AbilityScalarValueEntry.uint_value)
  if (has_uint_value()) {
    return value_.uint_value_;
  }
  return 0u;
}
void AbilityScalarValueEntry::set_uint_value(::google::protobuf::uint32 value) {
  if (!has_uint_value()) {
    clear_value();
    set_has_uint_value();
  }
  value_.uint_value_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityScalarValueEntry.uint_value)
}

bool AbilityScalarValueEntry::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void AbilityScalarValueEntry::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
AbilityScalarValueEntry::ValueCase AbilityScalarValueEntry::value_case() const {
  return AbilityScalarValueEntry::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbilityAppliedAbility::kAbilityNameFieldNumber;
const int AbilityAppliedAbility::kAbilityOverrideFieldNumber;
const int AbilityAppliedAbility::kOverrideMapFieldNumber;
const int AbilityAppliedAbility::kInstancedAbilityIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbilityAppliedAbility::AbilityAppliedAbility()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AbilityAppliedAbility)
}
AbilityAppliedAbility::AbilityAppliedAbility(const AbilityAppliedAbility& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      override_map_(from.override_map_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ability_name()) {
    ability_name_ = new ::proto::AbilityString(*from.ability_name_);
  } else {
    ability_name_ = NULL;
  }
  if (from.has_ability_override()) {
    ability_override_ = new ::proto::AbilityString(*from.ability_override_);
  } else {
    ability_override_ = NULL;
  }
  instanced_ability_id_ = from.instanced_ability_id_;
  // @@protoc_insertion_point(copy_constructor:proto.AbilityAppliedAbility)
}

void AbilityAppliedAbility::SharedCtor() {
  ::memset(&ability_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&instanced_ability_id_) -
      reinterpret_cast<char*>(&ability_name_)) + sizeof(instanced_ability_id_));
  _cached_size_ = 0;
}

AbilityAppliedAbility::~AbilityAppliedAbility() {
  // @@protoc_insertion_point(destructor:proto.AbilityAppliedAbility)
  SharedDtor();
}

void AbilityAppliedAbility::SharedDtor() {
  if (this != internal_default_instance()) delete ability_name_;
  if (this != internal_default_instance()) delete ability_override_;
}

void AbilityAppliedAbility::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbilityAppliedAbility::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AbilityAppliedAbility& AbilityAppliedAbility::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

AbilityAppliedAbility* AbilityAppliedAbility::New(::google::protobuf::Arena* arena) const {
  AbilityAppliedAbility* n = new AbilityAppliedAbility;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AbilityAppliedAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AbilityAppliedAbility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  override_map_.Clear();
  if (GetArenaNoVirtual() == NULL && ability_name_ != NULL) {
    delete ability_name_;
  }
  ability_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && ability_override_ != NULL) {
    delete ability_override_;
  }
  ability_override_ = NULL;
  instanced_ability_id_ = 0u;
  _internal_metadata_.Clear();
}

bool AbilityAppliedAbility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AbilityAppliedAbility)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.AbilityString ability_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ability_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AbilityString ability_override = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ability_override()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.AbilityScalarValueEntry override_map = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_override_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 instanced_ability_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instanced_ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AbilityAppliedAbility)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AbilityAppliedAbility)
  return false;
#undef DO_
}

void AbilityAppliedAbility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AbilityAppliedAbility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.AbilityString ability_name = 1;
  if (this->has_ability_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ability_name_, output);
  }

  // .proto.AbilityString ability_override = 2;
  if (this->has_ability_override()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ability_override_, output);
  }

  // repeated .proto.AbilityScalarValueEntry override_map = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->override_map_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->override_map(static_cast<int>(i)), output);
  }

  // uint32 instanced_ability_id = 4;
  if (this->instanced_ability_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->instanced_ability_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AbilityAppliedAbility)
}

::google::protobuf::uint8* AbilityAppliedAbility::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AbilityAppliedAbility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.AbilityString ability_name = 1;
  if (this->has_ability_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ability_name_, deterministic, target);
  }

  // .proto.AbilityString ability_override = 2;
  if (this->has_ability_override()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->ability_override_, deterministic, target);
  }

  // repeated .proto.AbilityScalarValueEntry override_map = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->override_map_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->override_map(static_cast<int>(i)), deterministic, target);
  }

  // uint32 instanced_ability_id = 4;
  if (this->instanced_ability_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->instanced_ability_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AbilityAppliedAbility)
  return target;
}

size_t AbilityAppliedAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AbilityAppliedAbility)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.AbilityScalarValueEntry override_map = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->override_map_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->override_map(static_cast<int>(i)));
    }
  }

  // .proto.AbilityString ability_name = 1;
  if (this->has_ability_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ability_name_);
  }

  // .proto.AbilityString ability_override = 2;
  if (this->has_ability_override()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ability_override_);
  }

  // uint32 instanced_ability_id = 4;
  if (this->instanced_ability_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->instanced_ability_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbilityAppliedAbility::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AbilityAppliedAbility)
  GOOGLE_DCHECK_NE(&from, this);
  const AbilityAppliedAbility* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AbilityAppliedAbility>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AbilityAppliedAbility)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AbilityAppliedAbility)
    MergeFrom(*source);
  }
}

void AbilityAppliedAbility::MergeFrom(const AbilityAppliedAbility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AbilityAppliedAbility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  override_map_.MergeFrom(from.override_map_);
  if (from.has_ability_name()) {
    mutable_ability_name()->::proto::AbilityString::MergeFrom(from.ability_name());
  }
  if (from.has_ability_override()) {
    mutable_ability_override()->::proto::AbilityString::MergeFrom(from.ability_override());
  }
  if (from.instanced_ability_id() != 0) {
    set_instanced_ability_id(from.instanced_ability_id());
  }
}

void AbilityAppliedAbility::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AbilityAppliedAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbilityAppliedAbility::CopyFrom(const AbilityAppliedAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AbilityAppliedAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbilityAppliedAbility::IsInitialized() const {
  return true;
}

void AbilityAppliedAbility::Swap(AbilityAppliedAbility* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbilityAppliedAbility::InternalSwap(AbilityAppliedAbility* other) {
  using std::swap;
  override_map_.InternalSwap(&other->override_map_);
  swap(ability_name_, other->ability_name_);
  swap(ability_override_, other->ability_override_);
  swap(instanced_ability_id_, other->instanced_ability_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AbilityAppliedAbility::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AbilityAppliedAbility

// .proto.AbilityString ability_name = 1;
bool AbilityAppliedAbility::has_ability_name() const {
  return this != internal_default_instance() && ability_name_ != NULL;
}
void AbilityAppliedAbility::clear_ability_name() {
  if (GetArenaNoVirtual() == NULL && ability_name_ != NULL) delete ability_name_;
  ability_name_ = NULL;
}
const ::proto::AbilityString& AbilityAppliedAbility::ability_name() const {
  const ::proto::AbilityString* p = ability_name_;
  // @@protoc_insertion_point(field_get:proto.AbilityAppliedAbility.ability_name)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::AbilityString*>(
      &::proto::_AbilityString_default_instance_);
}
::proto::AbilityString* AbilityAppliedAbility::mutable_ability_name() {
  
  if (ability_name_ == NULL) {
    ability_name_ = new ::proto::AbilityString;
  }
  // @@protoc_insertion_point(field_mutable:proto.AbilityAppliedAbility.ability_name)
  return ability_name_;
}
::proto::AbilityString* AbilityAppliedAbility::release_ability_name() {
  // @@protoc_insertion_point(field_release:proto.AbilityAppliedAbility.ability_name)
  
  ::proto::AbilityString* temp = ability_name_;
  ability_name_ = NULL;
  return temp;
}
void AbilityAppliedAbility::set_allocated_ability_name(::proto::AbilityString* ability_name) {
  delete ability_name_;
  ability_name_ = ability_name;
  if (ability_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AbilityAppliedAbility.ability_name)
}

// .proto.AbilityString ability_override = 2;
bool AbilityAppliedAbility::has_ability_override() const {
  return this != internal_default_instance() && ability_override_ != NULL;
}
void AbilityAppliedAbility::clear_ability_override() {
  if (GetArenaNoVirtual() == NULL && ability_override_ != NULL) delete ability_override_;
  ability_override_ = NULL;
}
const ::proto::AbilityString& AbilityAppliedAbility::ability_override() const {
  const ::proto::AbilityString* p = ability_override_;
  // @@protoc_insertion_point(field_get:proto.AbilityAppliedAbility.ability_override)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::AbilityString*>(
      &::proto::_AbilityString_default_instance_);
}
::proto::AbilityString* AbilityAppliedAbility::mutable_ability_override() {
  
  if (ability_override_ == NULL) {
    ability_override_ = new ::proto::AbilityString;
  }
  // @@protoc_insertion_point(field_mutable:proto.AbilityAppliedAbility.ability_override)
  return ability_override_;
}
::proto::AbilityString* AbilityAppliedAbility::release_ability_override() {
  // @@protoc_insertion_point(field_release:proto.AbilityAppliedAbility.ability_override)
  
  ::proto::AbilityString* temp = ability_override_;
  ability_override_ = NULL;
  return temp;
}
void AbilityAppliedAbility::set_allocated_ability_override(::proto::AbilityString* ability_override) {
  delete ability_override_;
  ability_override_ = ability_override;
  if (ability_override) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AbilityAppliedAbility.ability_override)
}

// repeated .proto.AbilityScalarValueEntry override_map = 3;
int AbilityAppliedAbility::override_map_size() const {
  return override_map_.size();
}
void AbilityAppliedAbility::clear_override_map() {
  override_map_.Clear();
}
const ::proto::AbilityScalarValueEntry& AbilityAppliedAbility::override_map(int index) const {
  // @@protoc_insertion_point(field_get:proto.AbilityAppliedAbility.override_map)
  return override_map_.Get(index);
}
::proto::AbilityScalarValueEntry* AbilityAppliedAbility::mutable_override_map(int index) {
  // @@protoc_insertion_point(field_mutable:proto.AbilityAppliedAbility.override_map)
  return override_map_.Mutable(index);
}
::proto::AbilityScalarValueEntry* AbilityAppliedAbility::add_override_map() {
  // @@protoc_insertion_point(field_add:proto.AbilityAppliedAbility.override_map)
  return override_map_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::AbilityScalarValueEntry >*
AbilityAppliedAbility::mutable_override_map() {
  // @@protoc_insertion_point(field_mutable_list:proto.AbilityAppliedAbility.override_map)
  return &override_map_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::AbilityScalarValueEntry >&
AbilityAppliedAbility::override_map() const {
  // @@protoc_insertion_point(field_list:proto.AbilityAppliedAbility.override_map)
  return override_map_;
}

// uint32 instanced_ability_id = 4;
void AbilityAppliedAbility::clear_instanced_ability_id() {
  instanced_ability_id_ = 0u;
}
::google::protobuf::uint32 AbilityAppliedAbility::instanced_ability_id() const {
  // @@protoc_insertion_point(field_get:proto.AbilityAppliedAbility.instanced_ability_id)
  return instanced_ability_id_;
}
void AbilityAppliedAbility::set_instanced_ability_id(::google::protobuf::uint32 value) {
  
  instanced_ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityAppliedAbility.instanced_ability_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbilityAttachedModifier::kIsInvalidFieldNumber;
const int AbilityAttachedModifier::kOwnerEntityIdFieldNumber;
const int AbilityAttachedModifier::kInstancedModifierIdFieldNumber;
const int AbilityAttachedModifier::kIsServerbuffModifierFieldNumber;
const int AbilityAttachedModifier::kAttachNameHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbilityAttachedModifier::AbilityAttachedModifier()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AbilityAttachedModifier)
}
AbilityAttachedModifier::AbilityAttachedModifier(const AbilityAttachedModifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&owner_entity_id_, &from.owner_entity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&attach_name_hash_) -
    reinterpret_cast<char*>(&owner_entity_id_)) + sizeof(attach_name_hash_));
  // @@protoc_insertion_point(copy_constructor:proto.AbilityAttachedModifier)
}

void AbilityAttachedModifier::SharedCtor() {
  ::memset(&owner_entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attach_name_hash_) -
      reinterpret_cast<char*>(&owner_entity_id_)) + sizeof(attach_name_hash_));
  _cached_size_ = 0;
}

AbilityAttachedModifier::~AbilityAttachedModifier() {
  // @@protoc_insertion_point(destructor:proto.AbilityAttachedModifier)
  SharedDtor();
}

void AbilityAttachedModifier::SharedDtor() {
}

void AbilityAttachedModifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbilityAttachedModifier::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AbilityAttachedModifier& AbilityAttachedModifier::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

AbilityAttachedModifier* AbilityAttachedModifier::New(::google::protobuf::Arena* arena) const {
  AbilityAttachedModifier* n = new AbilityAttachedModifier;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AbilityAttachedModifier::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AbilityAttachedModifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&owner_entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attach_name_hash_) -
      reinterpret_cast<char*>(&owner_entity_id_)) + sizeof(attach_name_hash_));
  _internal_metadata_.Clear();
}

bool AbilityAttachedModifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AbilityAttachedModifier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_invalid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_invalid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 owner_entity_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 instanced_modifier_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instanced_modifier_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_serverbuff_modifier = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_serverbuff_modifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 attach_name_hash = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_name_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AbilityAttachedModifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AbilityAttachedModifier)
  return false;
#undef DO_
}

void AbilityAttachedModifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AbilityAttachedModifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_invalid = 1;
  if (this->is_invalid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_invalid(), output);
  }

  // uint32 owner_entity_id = 2;
  if (this->owner_entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_entity_id(), output);
  }

  // uint32 instanced_modifier_id = 3;
  if (this->instanced_modifier_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->instanced_modifier_id(), output);
  }

  // bool is_serverbuff_modifier = 4;
  if (this->is_serverbuff_modifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_serverbuff_modifier(), output);
  }

  // int32 attach_name_hash = 5;
  if (this->attach_name_hash() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->attach_name_hash(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AbilityAttachedModifier)
}

::google::protobuf::uint8* AbilityAttachedModifier::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AbilityAttachedModifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_invalid = 1;
  if (this->is_invalid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_invalid(), target);
  }

  // uint32 owner_entity_id = 2;
  if (this->owner_entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_entity_id(), target);
  }

  // uint32 instanced_modifier_id = 3;
  if (this->instanced_modifier_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->instanced_modifier_id(), target);
  }

  // bool is_serverbuff_modifier = 4;
  if (this->is_serverbuff_modifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_serverbuff_modifier(), target);
  }

  // int32 attach_name_hash = 5;
  if (this->attach_name_hash() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->attach_name_hash(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AbilityAttachedModifier)
  return target;
}

size_t AbilityAttachedModifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AbilityAttachedModifier)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 owner_entity_id = 2;
  if (this->owner_entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner_entity_id());
  }

  // bool is_invalid = 1;
  if (this->is_invalid() != 0) {
    total_size += 1 + 1;
  }

  // bool is_serverbuff_modifier = 4;
  if (this->is_serverbuff_modifier() != 0) {
    total_size += 1 + 1;
  }

  // uint32 instanced_modifier_id = 3;
  if (this->instanced_modifier_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->instanced_modifier_id());
  }

  // int32 attach_name_hash = 5;
  if (this->attach_name_hash() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attach_name_hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbilityAttachedModifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AbilityAttachedModifier)
  GOOGLE_DCHECK_NE(&from, this);
  const AbilityAttachedModifier* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AbilityAttachedModifier>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AbilityAttachedModifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AbilityAttachedModifier)
    MergeFrom(*source);
  }
}

void AbilityAttachedModifier::MergeFrom(const AbilityAttachedModifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AbilityAttachedModifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_entity_id() != 0) {
    set_owner_entity_id(from.owner_entity_id());
  }
  if (from.is_invalid() != 0) {
    set_is_invalid(from.is_invalid());
  }
  if (from.is_serverbuff_modifier() != 0) {
    set_is_serverbuff_modifier(from.is_serverbuff_modifier());
  }
  if (from.instanced_modifier_id() != 0) {
    set_instanced_modifier_id(from.instanced_modifier_id());
  }
  if (from.attach_name_hash() != 0) {
    set_attach_name_hash(from.attach_name_hash());
  }
}

void AbilityAttachedModifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AbilityAttachedModifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbilityAttachedModifier::CopyFrom(const AbilityAttachedModifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AbilityAttachedModifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbilityAttachedModifier::IsInitialized() const {
  return true;
}

void AbilityAttachedModifier::Swap(AbilityAttachedModifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbilityAttachedModifier::InternalSwap(AbilityAttachedModifier* other) {
  using std::swap;
  swap(owner_entity_id_, other->owner_entity_id_);
  swap(is_invalid_, other->is_invalid_);
  swap(is_serverbuff_modifier_, other->is_serverbuff_modifier_);
  swap(instanced_modifier_id_, other->instanced_modifier_id_);
  swap(attach_name_hash_, other->attach_name_hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AbilityAttachedModifier::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AbilityAttachedModifier

// bool is_invalid = 1;
void AbilityAttachedModifier::clear_is_invalid() {
  is_invalid_ = false;
}
bool AbilityAttachedModifier::is_invalid() const {
  // @@protoc_insertion_point(field_get:proto.AbilityAttachedModifier.is_invalid)
  return is_invalid_;
}
void AbilityAttachedModifier::set_is_invalid(bool value) {
  
  is_invalid_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityAttachedModifier.is_invalid)
}

// uint32 owner_entity_id = 2;
void AbilityAttachedModifier::clear_owner_entity_id() {
  owner_entity_id_ = 0u;
}
::google::protobuf::uint32 AbilityAttachedModifier::owner_entity_id() const {
  // @@protoc_insertion_point(field_get:proto.AbilityAttachedModifier.owner_entity_id)
  return owner_entity_id_;
}
void AbilityAttachedModifier::set_owner_entity_id(::google::protobuf::uint32 value) {
  
  owner_entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityAttachedModifier.owner_entity_id)
}

// uint32 instanced_modifier_id = 3;
void AbilityAttachedModifier::clear_instanced_modifier_id() {
  instanced_modifier_id_ = 0u;
}
::google::protobuf::uint32 AbilityAttachedModifier::instanced_modifier_id() const {
  // @@protoc_insertion_point(field_get:proto.AbilityAttachedModifier.instanced_modifier_id)
  return instanced_modifier_id_;
}
void AbilityAttachedModifier::set_instanced_modifier_id(::google::protobuf::uint32 value) {
  
  instanced_modifier_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityAttachedModifier.instanced_modifier_id)
}

// bool is_serverbuff_modifier = 4;
void AbilityAttachedModifier::clear_is_serverbuff_modifier() {
  is_serverbuff_modifier_ = false;
}
bool AbilityAttachedModifier::is_serverbuff_modifier() const {
  // @@protoc_insertion_point(field_get:proto.AbilityAttachedModifier.is_serverbuff_modifier)
  return is_serverbuff_modifier_;
}
void AbilityAttachedModifier::set_is_serverbuff_modifier(bool value) {
  
  is_serverbuff_modifier_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityAttachedModifier.is_serverbuff_modifier)
}

// int32 attach_name_hash = 5;
void AbilityAttachedModifier::clear_attach_name_hash() {
  attach_name_hash_ = 0;
}
::google::protobuf::int32 AbilityAttachedModifier::attach_name_hash() const {
  // @@protoc_insertion_point(field_get:proto.AbilityAttachedModifier.attach_name_hash)
  return attach_name_hash_;
}
void AbilityAttachedModifier::set_attach_name_hash(::google::protobuf::int32 value) {
  
  attach_name_hash_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityAttachedModifier.attach_name_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModifierDurability::kReduceRatioFieldNumber;
const int ModifierDurability::kRemainingDurabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModifierDurability::ModifierDurability()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ModifierDurability)
}
ModifierDurability::ModifierDurability(const ModifierDurability& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reduce_ratio_, &from.reduce_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&remaining_durability_) -
    reinterpret_cast<char*>(&reduce_ratio_)) + sizeof(remaining_durability_));
  // @@protoc_insertion_point(copy_constructor:proto.ModifierDurability)
}

void ModifierDurability::SharedCtor() {
  ::memset(&reduce_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_durability_) -
      reinterpret_cast<char*>(&reduce_ratio_)) + sizeof(remaining_durability_));
  _cached_size_ = 0;
}

ModifierDurability::~ModifierDurability() {
  // @@protoc_insertion_point(destructor:proto.ModifierDurability)
  SharedDtor();
}

void ModifierDurability::SharedDtor() {
}

void ModifierDurability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifierDurability::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModifierDurability& ModifierDurability::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModifierDurability* ModifierDurability::New(::google::protobuf::Arena* arena) const {
  ModifierDurability* n = new ModifierDurability;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModifierDurability::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ModifierDurability)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reduce_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_durability_) -
      reinterpret_cast<char*>(&reduce_ratio_)) + sizeof(remaining_durability_));
  _internal_metadata_.Clear();
}

bool ModifierDurability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ModifierDurability)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float reduce_ratio = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reduce_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float remaining_durability = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &remaining_durability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ModifierDurability)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ModifierDurability)
  return false;
#undef DO_
}

void ModifierDurability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ModifierDurability)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float reduce_ratio = 1;
  if (this->reduce_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->reduce_ratio(), output);
  }

  // float remaining_durability = 2;
  if (this->remaining_durability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->remaining_durability(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ModifierDurability)
}

::google::protobuf::uint8* ModifierDurability::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ModifierDurability)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float reduce_ratio = 1;
  if (this->reduce_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->reduce_ratio(), target);
  }

  // float remaining_durability = 2;
  if (this->remaining_durability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->remaining_durability(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ModifierDurability)
  return target;
}

size_t ModifierDurability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ModifierDurability)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float reduce_ratio = 1;
  if (this->reduce_ratio() != 0) {
    total_size += 1 + 4;
  }

  // float remaining_durability = 2;
  if (this->remaining_durability() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifierDurability::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ModifierDurability)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifierDurability* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModifierDurability>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ModifierDurability)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ModifierDurability)
    MergeFrom(*source);
  }
}

void ModifierDurability::MergeFrom(const ModifierDurability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ModifierDurability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reduce_ratio() != 0) {
    set_reduce_ratio(from.reduce_ratio());
  }
  if (from.remaining_durability() != 0) {
    set_remaining_durability(from.remaining_durability());
  }
}

void ModifierDurability::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ModifierDurability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifierDurability::CopyFrom(const ModifierDurability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ModifierDurability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifierDurability::IsInitialized() const {
  return true;
}

void ModifierDurability::Swap(ModifierDurability* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModifierDurability::InternalSwap(ModifierDurability* other) {
  using std::swap;
  swap(reduce_ratio_, other->reduce_ratio_);
  swap(remaining_durability_, other->remaining_durability_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModifierDurability::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModifierDurability

// float reduce_ratio = 1;
void ModifierDurability::clear_reduce_ratio() {
  reduce_ratio_ = 0;
}
float ModifierDurability::reduce_ratio() const {
  // @@protoc_insertion_point(field_get:proto.ModifierDurability.reduce_ratio)
  return reduce_ratio_;
}
void ModifierDurability::set_reduce_ratio(float value) {
  
  reduce_ratio_ = value;
  // @@protoc_insertion_point(field_set:proto.ModifierDurability.reduce_ratio)
}

// float remaining_durability = 2;
void ModifierDurability::clear_remaining_durability() {
  remaining_durability_ = 0;
}
float ModifierDurability::remaining_durability() const {
  // @@protoc_insertion_point(field_get:proto.ModifierDurability.remaining_durability)
  return remaining_durability_;
}
void ModifierDurability::set_remaining_durability(float value) {
  
  remaining_durability_ = value;
  // @@protoc_insertion_point(field_set:proto.ModifierDurability.remaining_durability)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbilityAppliedModifier::kModifierLocalIdFieldNumber;
const int AbilityAppliedModifier::kParentAbilityEntityIdFieldNumber;
const int AbilityAppliedModifier::kParentAbilityNameFieldNumber;
const int AbilityAppliedModifier::kParentAbilityOverrideFieldNumber;
const int AbilityAppliedModifier::kInstancedAbilityIdFieldNumber;
const int AbilityAppliedModifier::kInstancedModifierIdFieldNumber;
const int AbilityAppliedModifier::kExistDurationFieldNumber;
const int AbilityAppliedModifier::kAttachedInstancedModifierFieldNumber;
const int AbilityAppliedModifier::kApplyEntityIdFieldNumber;
const int AbilityAppliedModifier::kIsAttachedParentAbilityFieldNumber;
const int AbilityAppliedModifier::kModifierDurabilityFieldNumber;
const int AbilityAppliedModifier::kSbuffUidFieldNumber;
const int AbilityAppliedModifier::kIsServerbuffModifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbilityAppliedModifier::AbilityAppliedModifier()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AbilityAppliedModifier)
}
AbilityAppliedModifier::AbilityAppliedModifier(const AbilityAppliedModifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_parent_ability_name()) {
    parent_ability_name_ = new ::proto::AbilityString(*from.parent_ability_name_);
  } else {
    parent_ability_name_ = NULL;
  }
  if (from.has_parent_ability_override()) {
    parent_ability_override_ = new ::proto::AbilityString(*from.parent_ability_override_);
  } else {
    parent_ability_override_ = NULL;
  }
  if (from.has_attached_instanced_modifier()) {
    attached_instanced_modifier_ = new ::proto::AbilityAttachedModifier(*from.attached_instanced_modifier_);
  } else {
    attached_instanced_modifier_ = NULL;
  }
  if (from.has_modifier_durability()) {
    modifier_durability_ = new ::proto::ModifierDurability(*from.modifier_durability_);
  } else {
    modifier_durability_ = NULL;
  }
  ::memcpy(&modifier_local_id_, &from.modifier_local_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sbuff_uid_) -
    reinterpret_cast<char*>(&modifier_local_id_)) + sizeof(sbuff_uid_));
  // @@protoc_insertion_point(copy_constructor:proto.AbilityAppliedModifier)
}

void AbilityAppliedModifier::SharedCtor() {
  ::memset(&parent_ability_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sbuff_uid_) -
      reinterpret_cast<char*>(&parent_ability_name_)) + sizeof(sbuff_uid_));
  _cached_size_ = 0;
}

AbilityAppliedModifier::~AbilityAppliedModifier() {
  // @@protoc_insertion_point(destructor:proto.AbilityAppliedModifier)
  SharedDtor();
}

void AbilityAppliedModifier::SharedDtor() {
  if (this != internal_default_instance()) delete parent_ability_name_;
  if (this != internal_default_instance()) delete parent_ability_override_;
  if (this != internal_default_instance()) delete attached_instanced_modifier_;
  if (this != internal_default_instance()) delete modifier_durability_;
}

void AbilityAppliedModifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbilityAppliedModifier::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AbilityAppliedModifier& AbilityAppliedModifier::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

AbilityAppliedModifier* AbilityAppliedModifier::New(::google::protobuf::Arena* arena) const {
  AbilityAppliedModifier* n = new AbilityAppliedModifier;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AbilityAppliedModifier::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AbilityAppliedModifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && parent_ability_name_ != NULL) {
    delete parent_ability_name_;
  }
  parent_ability_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && parent_ability_override_ != NULL) {
    delete parent_ability_override_;
  }
  parent_ability_override_ = NULL;
  if (GetArenaNoVirtual() == NULL && attached_instanced_modifier_ != NULL) {
    delete attached_instanced_modifier_;
  }
  attached_instanced_modifier_ = NULL;
  if (GetArenaNoVirtual() == NULL && modifier_durability_ != NULL) {
    delete modifier_durability_;
  }
  modifier_durability_ = NULL;
  ::memset(&modifier_local_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sbuff_uid_) -
      reinterpret_cast<char*>(&modifier_local_id_)) + sizeof(sbuff_uid_));
  _internal_metadata_.Clear();
}

bool AbilityAppliedModifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AbilityAppliedModifier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 modifier_local_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modifier_local_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 parent_ability_entity_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_ability_entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AbilityString parent_ability_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent_ability_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AbilityString parent_ability_override = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent_ability_override()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 instanced_ability_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instanced_ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 instanced_modifier_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instanced_modifier_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float exist_duration = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &exist_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AbilityAttachedModifier attached_instanced_modifier = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attached_instanced_modifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 apply_entity_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apply_entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_attached_parent_ability = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attached_parent_ability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ModifierDurability modifier_durability = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modifier_durability()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sbuff_uid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sbuff_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_serverbuff_modifier = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_serverbuff_modifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AbilityAppliedModifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AbilityAppliedModifier)
  return false;
#undef DO_
}

void AbilityAppliedModifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AbilityAppliedModifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modifier_local_id = 1;
  if (this->modifier_local_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modifier_local_id(), output);
  }

  // uint32 parent_ability_entity_id = 2;
  if (this->parent_ability_entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->parent_ability_entity_id(), output);
  }

  // .proto.AbilityString parent_ability_name = 3;
  if (this->has_parent_ability_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->parent_ability_name_, output);
  }

  // .proto.AbilityString parent_ability_override = 4;
  if (this->has_parent_ability_override()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->parent_ability_override_, output);
  }

  // uint32 instanced_ability_id = 5;
  if (this->instanced_ability_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->instanced_ability_id(), output);
  }

  // uint32 instanced_modifier_id = 6;
  if (this->instanced_modifier_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->instanced_modifier_id(), output);
  }

  // float exist_duration = 7;
  if (this->exist_duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->exist_duration(), output);
  }

  // .proto.AbilityAttachedModifier attached_instanced_modifier = 8;
  if (this->has_attached_instanced_modifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->attached_instanced_modifier_, output);
  }

  // uint32 apply_entity_id = 9;
  if (this->apply_entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->apply_entity_id(), output);
  }

  // bool is_attached_parent_ability = 10;
  if (this->is_attached_parent_ability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_attached_parent_ability(), output);
  }

  // .proto.ModifierDurability modifier_durability = 11;
  if (this->has_modifier_durability()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->modifier_durability_, output);
  }

  // uint32 sbuff_uid = 12;
  if (this->sbuff_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->sbuff_uid(), output);
  }

  // bool is_serverbuff_modifier = 13;
  if (this->is_serverbuff_modifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_serverbuff_modifier(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AbilityAppliedModifier)
}

::google::protobuf::uint8* AbilityAppliedModifier::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AbilityAppliedModifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modifier_local_id = 1;
  if (this->modifier_local_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modifier_local_id(), target);
  }

  // uint32 parent_ability_entity_id = 2;
  if (this->parent_ability_entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->parent_ability_entity_id(), target);
  }

  // .proto.AbilityString parent_ability_name = 3;
  if (this->has_parent_ability_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->parent_ability_name_, deterministic, target);
  }

  // .proto.AbilityString parent_ability_override = 4;
  if (this->has_parent_ability_override()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->parent_ability_override_, deterministic, target);
  }

  // uint32 instanced_ability_id = 5;
  if (this->instanced_ability_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->instanced_ability_id(), target);
  }

  // uint32 instanced_modifier_id = 6;
  if (this->instanced_modifier_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->instanced_modifier_id(), target);
  }

  // float exist_duration = 7;
  if (this->exist_duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->exist_duration(), target);
  }

  // .proto.AbilityAttachedModifier attached_instanced_modifier = 8;
  if (this->has_attached_instanced_modifier()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->attached_instanced_modifier_, deterministic, target);
  }

  // uint32 apply_entity_id = 9;
  if (this->apply_entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->apply_entity_id(), target);
  }

  // bool is_attached_parent_ability = 10;
  if (this->is_attached_parent_ability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_attached_parent_ability(), target);
  }

  // .proto.ModifierDurability modifier_durability = 11;
  if (this->has_modifier_durability()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->modifier_durability_, deterministic, target);
  }

  // uint32 sbuff_uid = 12;
  if (this->sbuff_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->sbuff_uid(), target);
  }

  // bool is_serverbuff_modifier = 13;
  if (this->is_serverbuff_modifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_serverbuff_modifier(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AbilityAppliedModifier)
  return target;
}

size_t AbilityAppliedModifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AbilityAppliedModifier)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.AbilityString parent_ability_name = 3;
  if (this->has_parent_ability_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->parent_ability_name_);
  }

  // .proto.AbilityString parent_ability_override = 4;
  if (this->has_parent_ability_override()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->parent_ability_override_);
  }

  // .proto.AbilityAttachedModifier attached_instanced_modifier = 8;
  if (this->has_attached_instanced_modifier()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->attached_instanced_modifier_);
  }

  // .proto.ModifierDurability modifier_durability = 11;
  if (this->has_modifier_durability()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->modifier_durability_);
  }

  // int32 modifier_local_id = 1;
  if (this->modifier_local_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->modifier_local_id());
  }

  // uint32 parent_ability_entity_id = 2;
  if (this->parent_ability_entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->parent_ability_entity_id());
  }

  // uint32 instanced_ability_id = 5;
  if (this->instanced_ability_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->instanced_ability_id());
  }

  // uint32 instanced_modifier_id = 6;
  if (this->instanced_modifier_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->instanced_modifier_id());
  }

  // float exist_duration = 7;
  if (this->exist_duration() != 0) {
    total_size += 1 + 4;
  }

  // uint32 apply_entity_id = 9;
  if (this->apply_entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->apply_entity_id());
  }

  // bool is_attached_parent_ability = 10;
  if (this->is_attached_parent_ability() != 0) {
    total_size += 1 + 1;
  }

  // bool is_serverbuff_modifier = 13;
  if (this->is_serverbuff_modifier() != 0) {
    total_size += 1 + 1;
  }

  // uint32 sbuff_uid = 12;
  if (this->sbuff_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sbuff_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbilityAppliedModifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AbilityAppliedModifier)
  GOOGLE_DCHECK_NE(&from, this);
  const AbilityAppliedModifier* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AbilityAppliedModifier>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AbilityAppliedModifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AbilityAppliedModifier)
    MergeFrom(*source);
  }
}

void AbilityAppliedModifier::MergeFrom(const AbilityAppliedModifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AbilityAppliedModifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_parent_ability_name()) {
    mutable_parent_ability_name()->::proto::AbilityString::MergeFrom(from.parent_ability_name());
  }
  if (from.has_parent_ability_override()) {
    mutable_parent_ability_override()->::proto::AbilityString::MergeFrom(from.parent_ability_override());
  }
  if (from.has_attached_instanced_modifier()) {
    mutable_attached_instanced_modifier()->::proto::AbilityAttachedModifier::MergeFrom(from.attached_instanced_modifier());
  }
  if (from.has_modifier_durability()) {
    mutable_modifier_durability()->::proto::ModifierDurability::MergeFrom(from.modifier_durability());
  }
  if (from.modifier_local_id() != 0) {
    set_modifier_local_id(from.modifier_local_id());
  }
  if (from.parent_ability_entity_id() != 0) {
    set_parent_ability_entity_id(from.parent_ability_entity_id());
  }
  if (from.instanced_ability_id() != 0) {
    set_instanced_ability_id(from.instanced_ability_id());
  }
  if (from.instanced_modifier_id() != 0) {
    set_instanced_modifier_id(from.instanced_modifier_id());
  }
  if (from.exist_duration() != 0) {
    set_exist_duration(from.exist_duration());
  }
  if (from.apply_entity_id() != 0) {
    set_apply_entity_id(from.apply_entity_id());
  }
  if (from.is_attached_parent_ability() != 0) {
    set_is_attached_parent_ability(from.is_attached_parent_ability());
  }
  if (from.is_serverbuff_modifier() != 0) {
    set_is_serverbuff_modifier(from.is_serverbuff_modifier());
  }
  if (from.sbuff_uid() != 0) {
    set_sbuff_uid(from.sbuff_uid());
  }
}

void AbilityAppliedModifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AbilityAppliedModifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbilityAppliedModifier::CopyFrom(const AbilityAppliedModifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AbilityAppliedModifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbilityAppliedModifier::IsInitialized() const {
  return true;
}

void AbilityAppliedModifier::Swap(AbilityAppliedModifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbilityAppliedModifier::InternalSwap(AbilityAppliedModifier* other) {
  using std::swap;
  swap(parent_ability_name_, other->parent_ability_name_);
  swap(parent_ability_override_, other->parent_ability_override_);
  swap(attached_instanced_modifier_, other->attached_instanced_modifier_);
  swap(modifier_durability_, other->modifier_durability_);
  swap(modifier_local_id_, other->modifier_local_id_);
  swap(parent_ability_entity_id_, other->parent_ability_entity_id_);
  swap(instanced_ability_id_, other->instanced_ability_id_);
  swap(instanced_modifier_id_, other->instanced_modifier_id_);
  swap(exist_duration_, other->exist_duration_);
  swap(apply_entity_id_, other->apply_entity_id_);
  swap(is_attached_parent_ability_, other->is_attached_parent_ability_);
  swap(is_serverbuff_modifier_, other->is_serverbuff_modifier_);
  swap(sbuff_uid_, other->sbuff_uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AbilityAppliedModifier::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AbilityAppliedModifier

// int32 modifier_local_id = 1;
void AbilityAppliedModifier::clear_modifier_local_id() {
  modifier_local_id_ = 0;
}
::google::protobuf::int32 AbilityAppliedModifier::modifier_local_id() const {
  // @@protoc_insertion_point(field_get:proto.AbilityAppliedModifier.modifier_local_id)
  return modifier_local_id_;
}
void AbilityAppliedModifier::set_modifier_local_id(::google::protobuf::int32 value) {
  
  modifier_local_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityAppliedModifier.modifier_local_id)
}

// uint32 parent_ability_entity_id = 2;
void AbilityAppliedModifier::clear_parent_ability_entity_id() {
  parent_ability_entity_id_ = 0u;
}
::google::protobuf::uint32 AbilityAppliedModifier::parent_ability_entity_id() const {
  // @@protoc_insertion_point(field_get:proto.AbilityAppliedModifier.parent_ability_entity_id)
  return parent_ability_entity_id_;
}
void AbilityAppliedModifier::set_parent_ability_entity_id(::google::protobuf::uint32 value) {
  
  parent_ability_entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityAppliedModifier.parent_ability_entity_id)
}

// .proto.AbilityString parent_ability_name = 3;
bool AbilityAppliedModifier::has_parent_ability_name() const {
  return this != internal_default_instance() && parent_ability_name_ != NULL;
}
void AbilityAppliedModifier::clear_parent_ability_name() {
  if (GetArenaNoVirtual() == NULL && parent_ability_name_ != NULL) delete parent_ability_name_;
  parent_ability_name_ = NULL;
}
const ::proto::AbilityString& AbilityAppliedModifier::parent_ability_name() const {
  const ::proto::AbilityString* p = parent_ability_name_;
  // @@protoc_insertion_point(field_get:proto.AbilityAppliedModifier.parent_ability_name)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::AbilityString*>(
      &::proto::_AbilityString_default_instance_);
}
::proto::AbilityString* AbilityAppliedModifier::mutable_parent_ability_name() {
  
  if (parent_ability_name_ == NULL) {
    parent_ability_name_ = new ::proto::AbilityString;
  }
  // @@protoc_insertion_point(field_mutable:proto.AbilityAppliedModifier.parent_ability_name)
  return parent_ability_name_;
}
::proto::AbilityString* AbilityAppliedModifier::release_parent_ability_name() {
  // @@protoc_insertion_point(field_release:proto.AbilityAppliedModifier.parent_ability_name)
  
  ::proto::AbilityString* temp = parent_ability_name_;
  parent_ability_name_ = NULL;
  return temp;
}
void AbilityAppliedModifier::set_allocated_parent_ability_name(::proto::AbilityString* parent_ability_name) {
  delete parent_ability_name_;
  parent_ability_name_ = parent_ability_name;
  if (parent_ability_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AbilityAppliedModifier.parent_ability_name)
}

// .proto.AbilityString parent_ability_override = 4;
bool AbilityAppliedModifier::has_parent_ability_override() const {
  return this != internal_default_instance() && parent_ability_override_ != NULL;
}
void AbilityAppliedModifier::clear_parent_ability_override() {
  if (GetArenaNoVirtual() == NULL && parent_ability_override_ != NULL) delete parent_ability_override_;
  parent_ability_override_ = NULL;
}
const ::proto::AbilityString& AbilityAppliedModifier::parent_ability_override() const {
  const ::proto::AbilityString* p = parent_ability_override_;
  // @@protoc_insertion_point(field_get:proto.AbilityAppliedModifier.parent_ability_override)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::AbilityString*>(
      &::proto::_AbilityString_default_instance_);
}
::proto::AbilityString* AbilityAppliedModifier::mutable_parent_ability_override() {
  
  if (parent_ability_override_ == NULL) {
    parent_ability_override_ = new ::proto::AbilityString;
  }
  // @@protoc_insertion_point(field_mutable:proto.AbilityAppliedModifier.parent_ability_override)
  return parent_ability_override_;
}
::proto::AbilityString* AbilityAppliedModifier::release_parent_ability_override() {
  // @@protoc_insertion_point(field_release:proto.AbilityAppliedModifier.parent_ability_override)
  
  ::proto::AbilityString* temp = parent_ability_override_;
  parent_ability_override_ = NULL;
  return temp;
}
void AbilityAppliedModifier::set_allocated_parent_ability_override(::proto::AbilityString* parent_ability_override) {
  delete parent_ability_override_;
  parent_ability_override_ = parent_ability_override;
  if (parent_ability_override) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AbilityAppliedModifier.parent_ability_override)
}

// uint32 instanced_ability_id = 5;
void AbilityAppliedModifier::clear_instanced_ability_id() {
  instanced_ability_id_ = 0u;
}
::google::protobuf::uint32 AbilityAppliedModifier::instanced_ability_id() const {
  // @@protoc_insertion_point(field_get:proto.AbilityAppliedModifier.instanced_ability_id)
  return instanced_ability_id_;
}
void AbilityAppliedModifier::set_instanced_ability_id(::google::protobuf::uint32 value) {
  
  instanced_ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityAppliedModifier.instanced_ability_id)
}

// uint32 instanced_modifier_id = 6;
void AbilityAppliedModifier::clear_instanced_modifier_id() {
  instanced_modifier_id_ = 0u;
}
::google::protobuf::uint32 AbilityAppliedModifier::instanced_modifier_id() const {
  // @@protoc_insertion_point(field_get:proto.AbilityAppliedModifier.instanced_modifier_id)
  return instanced_modifier_id_;
}
void AbilityAppliedModifier::set_instanced_modifier_id(::google::protobuf::uint32 value) {
  
  instanced_modifier_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityAppliedModifier.instanced_modifier_id)
}

// float exist_duration = 7;
void AbilityAppliedModifier::clear_exist_duration() {
  exist_duration_ = 0;
}
float AbilityAppliedModifier::exist_duration() const {
  // @@protoc_insertion_point(field_get:proto.AbilityAppliedModifier.exist_duration)
  return exist_duration_;
}
void AbilityAppliedModifier::set_exist_duration(float value) {
  
  exist_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityAppliedModifier.exist_duration)
}

// .proto.AbilityAttachedModifier attached_instanced_modifier = 8;
bool AbilityAppliedModifier::has_attached_instanced_modifier() const {
  return this != internal_default_instance() && attached_instanced_modifier_ != NULL;
}
void AbilityAppliedModifier::clear_attached_instanced_modifier() {
  if (GetArenaNoVirtual() == NULL && attached_instanced_modifier_ != NULL) delete attached_instanced_modifier_;
  attached_instanced_modifier_ = NULL;
}
const ::proto::AbilityAttachedModifier& AbilityAppliedModifier::attached_instanced_modifier() const {
  const ::proto::AbilityAttachedModifier* p = attached_instanced_modifier_;
  // @@protoc_insertion_point(field_get:proto.AbilityAppliedModifier.attached_instanced_modifier)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::AbilityAttachedModifier*>(
      &::proto::_AbilityAttachedModifier_default_instance_);
}
::proto::AbilityAttachedModifier* AbilityAppliedModifier::mutable_attached_instanced_modifier() {
  
  if (attached_instanced_modifier_ == NULL) {
    attached_instanced_modifier_ = new ::proto::AbilityAttachedModifier;
  }
  // @@protoc_insertion_point(field_mutable:proto.AbilityAppliedModifier.attached_instanced_modifier)
  return attached_instanced_modifier_;
}
::proto::AbilityAttachedModifier* AbilityAppliedModifier::release_attached_instanced_modifier() {
  // @@protoc_insertion_point(field_release:proto.AbilityAppliedModifier.attached_instanced_modifier)
  
  ::proto::AbilityAttachedModifier* temp = attached_instanced_modifier_;
  attached_instanced_modifier_ = NULL;
  return temp;
}
void AbilityAppliedModifier::set_allocated_attached_instanced_modifier(::proto::AbilityAttachedModifier* attached_instanced_modifier) {
  delete attached_instanced_modifier_;
  attached_instanced_modifier_ = attached_instanced_modifier;
  if (attached_instanced_modifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AbilityAppliedModifier.attached_instanced_modifier)
}

// uint32 apply_entity_id = 9;
void AbilityAppliedModifier::clear_apply_entity_id() {
  apply_entity_id_ = 0u;
}
::google::protobuf::uint32 AbilityAppliedModifier::apply_entity_id() const {
  // @@protoc_insertion_point(field_get:proto.AbilityAppliedModifier.apply_entity_id)
  return apply_entity_id_;
}
void AbilityAppliedModifier::set_apply_entity_id(::google::protobuf::uint32 value) {
  
  apply_entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityAppliedModifier.apply_entity_id)
}

// bool is_attached_parent_ability = 10;
void AbilityAppliedModifier::clear_is_attached_parent_ability() {
  is_attached_parent_ability_ = false;
}
bool AbilityAppliedModifier::is_attached_parent_ability() const {
  // @@protoc_insertion_point(field_get:proto.AbilityAppliedModifier.is_attached_parent_ability)
  return is_attached_parent_ability_;
}
void AbilityAppliedModifier::set_is_attached_parent_ability(bool value) {
  
  is_attached_parent_ability_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityAppliedModifier.is_attached_parent_ability)
}

// .proto.ModifierDurability modifier_durability = 11;
bool AbilityAppliedModifier::has_modifier_durability() const {
  return this != internal_default_instance() && modifier_durability_ != NULL;
}
void AbilityAppliedModifier::clear_modifier_durability() {
  if (GetArenaNoVirtual() == NULL && modifier_durability_ != NULL) delete modifier_durability_;
  modifier_durability_ = NULL;
}
const ::proto::ModifierDurability& AbilityAppliedModifier::modifier_durability() const {
  const ::proto::ModifierDurability* p = modifier_durability_;
  // @@protoc_insertion_point(field_get:proto.AbilityAppliedModifier.modifier_durability)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ModifierDurability*>(
      &::proto::_ModifierDurability_default_instance_);
}
::proto::ModifierDurability* AbilityAppliedModifier::mutable_modifier_durability() {
  
  if (modifier_durability_ == NULL) {
    modifier_durability_ = new ::proto::ModifierDurability;
  }
  // @@protoc_insertion_point(field_mutable:proto.AbilityAppliedModifier.modifier_durability)
  return modifier_durability_;
}
::proto::ModifierDurability* AbilityAppliedModifier::release_modifier_durability() {
  // @@protoc_insertion_point(field_release:proto.AbilityAppliedModifier.modifier_durability)
  
  ::proto::ModifierDurability* temp = modifier_durability_;
  modifier_durability_ = NULL;
  return temp;
}
void AbilityAppliedModifier::set_allocated_modifier_durability(::proto::ModifierDurability* modifier_durability) {
  delete modifier_durability_;
  modifier_durability_ = modifier_durability;
  if (modifier_durability) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AbilityAppliedModifier.modifier_durability)
}

// uint32 sbuff_uid = 12;
void AbilityAppliedModifier::clear_sbuff_uid() {
  sbuff_uid_ = 0u;
}
::google::protobuf::uint32 AbilityAppliedModifier::sbuff_uid() const {
  // @@protoc_insertion_point(field_get:proto.AbilityAppliedModifier.sbuff_uid)
  return sbuff_uid_;
}
void AbilityAppliedModifier::set_sbuff_uid(::google::protobuf::uint32 value) {
  
  sbuff_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityAppliedModifier.sbuff_uid)
}

// bool is_serverbuff_modifier = 13;
void AbilityAppliedModifier::clear_is_serverbuff_modifier() {
  is_serverbuff_modifier_ = false;
}
bool AbilityAppliedModifier::is_serverbuff_modifier() const {
  // @@protoc_insertion_point(field_get:proto.AbilityAppliedModifier.is_serverbuff_modifier)
  return is_serverbuff_modifier_;
}
void AbilityAppliedModifier::set_is_serverbuff_modifier(bool value) {
  
  is_serverbuff_modifier_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityAppliedModifier.is_serverbuff_modifier)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MassivePropParam::kTypeFieldNumber;
const int MassivePropParam::kReactionInfoListFieldNumber;
const int MassivePropParam::kParamListFieldNumber;
const int MassivePropParam::kSyncFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MassivePropParam::MassivePropParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MassivePropParam)
}
MassivePropParam::MassivePropParam(const MassivePropParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      reaction_info_list_(from.reaction_info_list_),
      param_list_(from.param_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&sync_flag_) -
    reinterpret_cast<char*>(&type_)) + sizeof(sync_flag_));
  // @@protoc_insertion_point(copy_constructor:proto.MassivePropParam)
}

void MassivePropParam::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sync_flag_) -
      reinterpret_cast<char*>(&type_)) + sizeof(sync_flag_));
  _cached_size_ = 0;
}

MassivePropParam::~MassivePropParam() {
  // @@protoc_insertion_point(destructor:proto.MassivePropParam)
  SharedDtor();
}

void MassivePropParam::SharedDtor() {
}

void MassivePropParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MassivePropParam::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MassivePropParam& MassivePropParam::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

MassivePropParam* MassivePropParam::New(::google::protobuf::Arena* arena) const {
  MassivePropParam* n = new MassivePropParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MassivePropParam::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MassivePropParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reaction_info_list_.Clear();
  param_list_.Clear();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sync_flag_) -
      reinterpret_cast<char*>(&type_)) + sizeof(sync_flag_));
  _internal_metadata_.Clear();
}

bool MassivePropParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MassivePropParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 reaction_info_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_reaction_info_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_reaction_info_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float param_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_param_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_param_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sync_flag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sync_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MassivePropParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MassivePropParam)
  return false;
#undef DO_
}

void MassivePropParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MassivePropParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated uint32 reaction_info_list = 2;
  if (this->reaction_info_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _reaction_info_list_cached_byte_size_));
  }
  for (int i = 0, n = this->reaction_info_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->reaction_info_list(i), output);
  }

  // repeated float param_list = 3;
  if (this->param_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _param_list_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->param_list().data(), this->param_list_size(), output);
  }

  // uint32 sync_flag = 4;
  if (this->sync_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sync_flag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MassivePropParam)
}

::google::protobuf::uint8* MassivePropParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MassivePropParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated uint32 reaction_info_list = 2;
  if (this->reaction_info_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _reaction_info_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->reaction_info_list_, target);
  }

  // repeated float param_list = 3;
  if (this->param_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _param_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->param_list_, target);
  }

  // uint32 sync_flag = 4;
  if (this->sync_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sync_flag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MassivePropParam)
  return target;
}

size_t MassivePropParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MassivePropParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 reaction_info_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->reaction_info_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _reaction_info_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float param_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->param_list_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _param_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // uint32 sync_flag = 4;
  if (this->sync_flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sync_flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MassivePropParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MassivePropParam)
  GOOGLE_DCHECK_NE(&from, this);
  const MassivePropParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MassivePropParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MassivePropParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MassivePropParam)
    MergeFrom(*source);
  }
}

void MassivePropParam::MergeFrom(const MassivePropParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MassivePropParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reaction_info_list_.MergeFrom(from.reaction_info_list_);
  param_list_.MergeFrom(from.param_list_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.sync_flag() != 0) {
    set_sync_flag(from.sync_flag());
  }
}

void MassivePropParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MassivePropParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MassivePropParam::CopyFrom(const MassivePropParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MassivePropParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MassivePropParam::IsInitialized() const {
  return true;
}

void MassivePropParam::Swap(MassivePropParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MassivePropParam::InternalSwap(MassivePropParam* other) {
  using std::swap;
  reaction_info_list_.InternalSwap(&other->reaction_info_list_);
  param_list_.InternalSwap(&other->param_list_);
  swap(type_, other->type_);
  swap(sync_flag_, other->sync_flag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MassivePropParam::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MassivePropParam

// int32 type = 1;
void MassivePropParam::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 MassivePropParam::type() const {
  // @@protoc_insertion_point(field_get:proto.MassivePropParam.type)
  return type_;
}
void MassivePropParam::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.MassivePropParam.type)
}

// repeated uint32 reaction_info_list = 2;
int MassivePropParam::reaction_info_list_size() const {
  return reaction_info_list_.size();
}
void MassivePropParam::clear_reaction_info_list() {
  reaction_info_list_.Clear();
}
::google::protobuf::uint32 MassivePropParam::reaction_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.MassivePropParam.reaction_info_list)
  return reaction_info_list_.Get(index);
}
void MassivePropParam::set_reaction_info_list(int index, ::google::protobuf::uint32 value) {
  reaction_info_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.MassivePropParam.reaction_info_list)
}
void MassivePropParam::add_reaction_info_list(::google::protobuf::uint32 value) {
  reaction_info_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.MassivePropParam.reaction_info_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MassivePropParam::reaction_info_list() const {
  // @@protoc_insertion_point(field_list:proto.MassivePropParam.reaction_info_list)
  return reaction_info_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MassivePropParam::mutable_reaction_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.MassivePropParam.reaction_info_list)
  return &reaction_info_list_;
}

// repeated float param_list = 3;
int MassivePropParam::param_list_size() const {
  return param_list_.size();
}
void MassivePropParam::clear_param_list() {
  param_list_.Clear();
}
float MassivePropParam::param_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.MassivePropParam.param_list)
  return param_list_.Get(index);
}
void MassivePropParam::set_param_list(int index, float value) {
  param_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.MassivePropParam.param_list)
}
void MassivePropParam::add_param_list(float value) {
  param_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.MassivePropParam.param_list)
}
const ::google::protobuf::RepeatedField< float >&
MassivePropParam::param_list() const {
  // @@protoc_insertion_point(field_list:proto.MassivePropParam.param_list)
  return param_list_;
}
::google::protobuf::RepeatedField< float >*
MassivePropParam::mutable_param_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.MassivePropParam.param_list)
  return &param_list_;
}

// uint32 sync_flag = 4;
void MassivePropParam::clear_sync_flag() {
  sync_flag_ = 0u;
}
::google::protobuf::uint32 MassivePropParam::sync_flag() const {
  // @@protoc_insertion_point(field_get:proto.MassivePropParam.sync_flag)
  return sync_flag_;
}
void MassivePropParam::set_sync_flag(::google::protobuf::uint32 value) {
  
  sync_flag_ = value;
  // @@protoc_insertion_point(field_set:proto.MassivePropParam.sync_flag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MassivePropSyncInfo::kIdFieldNumber;
const int MassivePropSyncInfo::kPropListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MassivePropSyncInfo::MassivePropSyncInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MassivePropSyncInfo)
}
MassivePropSyncInfo::MassivePropSyncInfo(const MassivePropSyncInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      prop_list_(from.prop_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:proto.MassivePropSyncInfo)
}

void MassivePropSyncInfo::SharedCtor() {
  id_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

MassivePropSyncInfo::~MassivePropSyncInfo() {
  // @@protoc_insertion_point(destructor:proto.MassivePropSyncInfo)
  SharedDtor();
}

void MassivePropSyncInfo::SharedDtor() {
}

void MassivePropSyncInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MassivePropSyncInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MassivePropSyncInfo& MassivePropSyncInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

MassivePropSyncInfo* MassivePropSyncInfo::New(::google::protobuf::Arena* arena) const {
  MassivePropSyncInfo* n = new MassivePropSyncInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MassivePropSyncInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MassivePropSyncInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prop_list_.Clear();
  id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool MassivePropSyncInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MassivePropSyncInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.MassivePropParam prop_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prop_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MassivePropSyncInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MassivePropSyncInfo)
  return false;
#undef DO_
}

void MassivePropSyncInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MassivePropSyncInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated .proto.MassivePropParam prop_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prop_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prop_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MassivePropSyncInfo)
}

::google::protobuf::uint8* MassivePropSyncInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MassivePropSyncInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // repeated .proto.MassivePropParam prop_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prop_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->prop_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MassivePropSyncInfo)
  return target;
}

size_t MassivePropSyncInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MassivePropSyncInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.MassivePropParam prop_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->prop_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prop_list(static_cast<int>(i)));
    }
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MassivePropSyncInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MassivePropSyncInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MassivePropSyncInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MassivePropSyncInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MassivePropSyncInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MassivePropSyncInfo)
    MergeFrom(*source);
  }
}

void MassivePropSyncInfo::MergeFrom(const MassivePropSyncInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MassivePropSyncInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prop_list_.MergeFrom(from.prop_list_);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void MassivePropSyncInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MassivePropSyncInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MassivePropSyncInfo::CopyFrom(const MassivePropSyncInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MassivePropSyncInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MassivePropSyncInfo::IsInitialized() const {
  return true;
}

void MassivePropSyncInfo::Swap(MassivePropSyncInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MassivePropSyncInfo::InternalSwap(MassivePropSyncInfo* other) {
  using std::swap;
  prop_list_.InternalSwap(&other->prop_list_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MassivePropSyncInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MassivePropSyncInfo

// int64 id = 1;
void MassivePropSyncInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MassivePropSyncInfo::id() const {
  // @@protoc_insertion_point(field_get:proto.MassivePropSyncInfo.id)
  return id_;
}
void MassivePropSyncInfo::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.MassivePropSyncInfo.id)
}

// repeated .proto.MassivePropParam prop_list = 2;
int MassivePropSyncInfo::prop_list_size() const {
  return prop_list_.size();
}
void MassivePropSyncInfo::clear_prop_list() {
  prop_list_.Clear();
}
const ::proto::MassivePropParam& MassivePropSyncInfo::prop_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.MassivePropSyncInfo.prop_list)
  return prop_list_.Get(index);
}
::proto::MassivePropParam* MassivePropSyncInfo::mutable_prop_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.MassivePropSyncInfo.prop_list)
  return prop_list_.Mutable(index);
}
::proto::MassivePropParam* MassivePropSyncInfo::add_prop_list() {
  // @@protoc_insertion_point(field_add:proto.MassivePropSyncInfo.prop_list)
  return prop_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::MassivePropParam >*
MassivePropSyncInfo::mutable_prop_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.MassivePropSyncInfo.prop_list)
  return &prop_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::MassivePropParam >&
MassivePropSyncInfo::prop_list() const {
  // @@protoc_insertion_point(field_list:proto.MassivePropSyncInfo.prop_list)
  return prop_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BreakoutVector2::kXFieldNumber;
const int BreakoutVector2::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BreakoutVector2::BreakoutVector2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BreakoutVector2)
}
BreakoutVector2::BreakoutVector2(const BreakoutVector2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:proto.BreakoutVector2)
}

void BreakoutVector2::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _cached_size_ = 0;
}

BreakoutVector2::~BreakoutVector2() {
  // @@protoc_insertion_point(destructor:proto.BreakoutVector2)
  SharedDtor();
}

void BreakoutVector2::SharedDtor() {
}

void BreakoutVector2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BreakoutVector2::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BreakoutVector2& BreakoutVector2::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

BreakoutVector2* BreakoutVector2::New(::google::protobuf::Arena* arena) const {
  BreakoutVector2* n = new BreakoutVector2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BreakoutVector2::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BreakoutVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool BreakoutVector2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BreakoutVector2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BreakoutVector2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BreakoutVector2)
  return false;
#undef DO_
}

void BreakoutVector2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BreakoutVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BreakoutVector2)
}

::google::protobuf::uint8* BreakoutVector2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BreakoutVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BreakoutVector2)
  return target;
}

size_t BreakoutVector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BreakoutVector2)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BreakoutVector2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BreakoutVector2)
  GOOGLE_DCHECK_NE(&from, this);
  const BreakoutVector2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BreakoutVector2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BreakoutVector2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BreakoutVector2)
    MergeFrom(*source);
  }
}

void BreakoutVector2::MergeFrom(const BreakoutVector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BreakoutVector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void BreakoutVector2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BreakoutVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BreakoutVector2::CopyFrom(const BreakoutVector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BreakoutVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BreakoutVector2::IsInitialized() const {
  return true;
}

void BreakoutVector2::Swap(BreakoutVector2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BreakoutVector2::InternalSwap(BreakoutVector2* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BreakoutVector2::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BreakoutVector2

// int32 x = 1;
void BreakoutVector2::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 BreakoutVector2::x() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutVector2.x)
  return x_;
}
void BreakoutVector2::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutVector2.x)
}

// int32 y = 2;
void BreakoutVector2::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 BreakoutVector2::y() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutVector2.y)
  return y_;
}
void BreakoutVector2::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutVector2.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BreakoutBrickInfo::kHpFieldNumber;
const int BreakoutBrickInfo::kElementTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BreakoutBrickInfo::BreakoutBrickInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BreakoutBrickInfo)
}
BreakoutBrickInfo::BreakoutBrickInfo(const BreakoutBrickInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hp_, &from.hp_,
    static_cast<size_t>(reinterpret_cast<char*>(&element_type_) -
    reinterpret_cast<char*>(&hp_)) + sizeof(element_type_));
  // @@protoc_insertion_point(copy_constructor:proto.BreakoutBrickInfo)
}

void BreakoutBrickInfo::SharedCtor() {
  ::memset(&hp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&element_type_) -
      reinterpret_cast<char*>(&hp_)) + sizeof(element_type_));
  _cached_size_ = 0;
}

BreakoutBrickInfo::~BreakoutBrickInfo() {
  // @@protoc_insertion_point(destructor:proto.BreakoutBrickInfo)
  SharedDtor();
}

void BreakoutBrickInfo::SharedDtor() {
}

void BreakoutBrickInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BreakoutBrickInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BreakoutBrickInfo& BreakoutBrickInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

BreakoutBrickInfo* BreakoutBrickInfo::New(::google::protobuf::Arena* arena) const {
  BreakoutBrickInfo* n = new BreakoutBrickInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BreakoutBrickInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BreakoutBrickInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&element_type_) -
      reinterpret_cast<char*>(&hp_)) + sizeof(element_type_));
  _internal_metadata_.Clear();
}

bool BreakoutBrickInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BreakoutBrickInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 hp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 element_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &element_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BreakoutBrickInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BreakoutBrickInfo)
  return false;
#undef DO_
}

void BreakoutBrickInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BreakoutBrickInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hp = 1;
  if (this->hp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hp(), output);
  }

  // uint32 element_type = 2;
  if (this->element_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->element_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BreakoutBrickInfo)
}

::google::protobuf::uint8* BreakoutBrickInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BreakoutBrickInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hp = 1;
  if (this->hp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hp(), target);
  }

  // uint32 element_type = 2;
  if (this->element_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->element_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BreakoutBrickInfo)
  return target;
}

size_t BreakoutBrickInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BreakoutBrickInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 hp = 1;
  if (this->hp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hp());
  }

  // uint32 element_type = 2;
  if (this->element_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->element_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BreakoutBrickInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BreakoutBrickInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BreakoutBrickInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BreakoutBrickInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BreakoutBrickInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BreakoutBrickInfo)
    MergeFrom(*source);
  }
}

void BreakoutBrickInfo::MergeFrom(const BreakoutBrickInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BreakoutBrickInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hp() != 0) {
    set_hp(from.hp());
  }
  if (from.element_type() != 0) {
    set_element_type(from.element_type());
  }
}

void BreakoutBrickInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BreakoutBrickInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BreakoutBrickInfo::CopyFrom(const BreakoutBrickInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BreakoutBrickInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BreakoutBrickInfo::IsInitialized() const {
  return true;
}

void BreakoutBrickInfo::Swap(BreakoutBrickInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BreakoutBrickInfo::InternalSwap(BreakoutBrickInfo* other) {
  using std::swap;
  swap(hp_, other->hp_);
  swap(element_type_, other->element_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BreakoutBrickInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BreakoutBrickInfo

// uint32 hp = 1;
void BreakoutBrickInfo::clear_hp() {
  hp_ = 0u;
}
::google::protobuf::uint32 BreakoutBrickInfo::hp() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutBrickInfo.hp)
  return hp_;
}
void BreakoutBrickInfo::set_hp(::google::protobuf::uint32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutBrickInfo.hp)
}

// uint32 element_type = 2;
void BreakoutBrickInfo::clear_element_type() {
  element_type_ = 0u;
}
::google::protobuf::uint32 BreakoutBrickInfo::element_type() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutBrickInfo.element_type)
  return element_type_;
}
void BreakoutBrickInfo::set_element_type(::google::protobuf::uint32 value) {
  
  element_type_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutBrickInfo.element_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BreakoutPhysicalObjectModifier::kTypeFieldNumber;
const int BreakoutPhysicalObjectModifier::kIdFieldNumber;
const int BreakoutPhysicalObjectModifier::kParam1FieldNumber;
const int BreakoutPhysicalObjectModifier::kParam2FieldNumber;
const int BreakoutPhysicalObjectModifier::kParam3FieldNumber;
const int BreakoutPhysicalObjectModifier::kParam4FieldNumber;
const int BreakoutPhysicalObjectModifier::kParam5FieldNumber;
const int BreakoutPhysicalObjectModifier::kParam6FieldNumber;
const int BreakoutPhysicalObjectModifier::kBool1FieldNumber;
const int BreakoutPhysicalObjectModifier::kDurationFieldNumber;
const int BreakoutPhysicalObjectModifier::kEndTimeFieldNumber;
const int BreakoutPhysicalObjectModifier::kComboFieldNumber;
const int BreakoutPhysicalObjectModifier::kPeerIdFieldNumber;
const int BreakoutPhysicalObjectModifier::kSkillTypeFieldNumber;
const int BreakoutPhysicalObjectModifier::kLevelFieldNumber;
const int BreakoutPhysicalObjectModifier::kChoosePlayerCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BreakoutPhysicalObjectModifier::BreakoutPhysicalObjectModifier()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BreakoutPhysicalObjectModifier)
}
BreakoutPhysicalObjectModifier::BreakoutPhysicalObjectModifier(const BreakoutPhysicalObjectModifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&choose_player_count_) -
    reinterpret_cast<char*>(&type_)) + sizeof(choose_player_count_));
  // @@protoc_insertion_point(copy_constructor:proto.BreakoutPhysicalObjectModifier)
}

void BreakoutPhysicalObjectModifier::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&choose_player_count_) -
      reinterpret_cast<char*>(&type_)) + sizeof(choose_player_count_));
  _cached_size_ = 0;
}

BreakoutPhysicalObjectModifier::~BreakoutPhysicalObjectModifier() {
  // @@protoc_insertion_point(destructor:proto.BreakoutPhysicalObjectModifier)
  SharedDtor();
}

void BreakoutPhysicalObjectModifier::SharedDtor() {
}

void BreakoutPhysicalObjectModifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BreakoutPhysicalObjectModifier::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BreakoutPhysicalObjectModifier& BreakoutPhysicalObjectModifier::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

BreakoutPhysicalObjectModifier* BreakoutPhysicalObjectModifier::New(::google::protobuf::Arena* arena) const {
  BreakoutPhysicalObjectModifier* n = new BreakoutPhysicalObjectModifier;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BreakoutPhysicalObjectModifier::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BreakoutPhysicalObjectModifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&choose_player_count_) -
      reinterpret_cast<char*>(&type_)) + sizeof(choose_player_count_));
  _internal_metadata_.Clear();
}

bool BreakoutPhysicalObjectModifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BreakoutPhysicalObjectModifier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 param1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 param2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 param3 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 param4 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 param5 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 param6 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bool1 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bool1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 duration = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 end_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 combo = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peer_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 skill_type = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 choose_player_count = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &choose_player_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BreakoutPhysicalObjectModifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BreakoutPhysicalObjectModifier)
  return false;
#undef DO_
}

void BreakoutPhysicalObjectModifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BreakoutPhysicalObjectModifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // int32 param1 = 3;
  if (this->param1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->param1(), output);
  }

  // int32 param2 = 4;
  if (this->param2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->param2(), output);
  }

  // int32 param3 = 5;
  if (this->param3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->param3(), output);
  }

  // int32 param4 = 6;
  if (this->param4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->param4(), output);
  }

  // int32 param5 = 7;
  if (this->param5() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->param5(), output);
  }

  // int32 param6 = 8;
  if (this->param6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->param6(), output);
  }

  // bool bool1 = 9;
  if (this->bool1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->bool1(), output);
  }

  // int32 duration = 10;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->duration(), output);
  }

  // int32 end_time = 11;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->end_time(), output);
  }

  // uint32 combo = 12;
  if (this->combo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->combo(), output);
  }

  // uint32 peer_id = 13;
  if (this->peer_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->peer_id(), output);
  }

  // uint32 skill_type = 14;
  if (this->skill_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->skill_type(), output);
  }

  // uint32 level = 15;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->level(), output);
  }

  // uint32 choose_player_count = 16;
  if (this->choose_player_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->choose_player_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BreakoutPhysicalObjectModifier)
}

::google::protobuf::uint8* BreakoutPhysicalObjectModifier::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BreakoutPhysicalObjectModifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // int32 param1 = 3;
  if (this->param1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->param1(), target);
  }

  // int32 param2 = 4;
  if (this->param2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->param2(), target);
  }

  // int32 param3 = 5;
  if (this->param3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->param3(), target);
  }

  // int32 param4 = 6;
  if (this->param4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->param4(), target);
  }

  // int32 param5 = 7;
  if (this->param5() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->param5(), target);
  }

  // int32 param6 = 8;
  if (this->param6() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->param6(), target);
  }

  // bool bool1 = 9;
  if (this->bool1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->bool1(), target);
  }

  // int32 duration = 10;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->duration(), target);
  }

  // int32 end_time = 11;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->end_time(), target);
  }

  // uint32 combo = 12;
  if (this->combo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->combo(), target);
  }

  // uint32 peer_id = 13;
  if (this->peer_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->peer_id(), target);
  }

  // uint32 skill_type = 14;
  if (this->skill_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->skill_type(), target);
  }

  // uint32 level = 15;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->level(), target);
  }

  // uint32 choose_player_count = 16;
  if (this->choose_player_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->choose_player_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BreakoutPhysicalObjectModifier)
  return target;
}

size_t BreakoutPhysicalObjectModifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BreakoutPhysicalObjectModifier)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // int32 param1 = 3;
  if (this->param1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->param1());
  }

  // int32 param2 = 4;
  if (this->param2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->param2());
  }

  // int32 param3 = 5;
  if (this->param3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->param3());
  }

  // int32 param4 = 6;
  if (this->param4() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->param4());
  }

  // int32 param5 = 7;
  if (this->param5() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->param5());
  }

  // int32 param6 = 8;
  if (this->param6() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->param6());
  }

  // bool bool1 = 9;
  if (this->bool1() != 0) {
    total_size += 1 + 1;
  }

  // int32 duration = 10;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());
  }

  // int32 end_time = 11;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end_time());
  }

  // uint32 combo = 12;
  if (this->combo() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->combo());
  }

  // uint32 peer_id = 13;
  if (this->peer_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peer_id());
  }

  // uint32 skill_type = 14;
  if (this->skill_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_type());
  }

  // uint32 level = 15;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // uint32 choose_player_count = 16;
  if (this->choose_player_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->choose_player_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BreakoutPhysicalObjectModifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BreakoutPhysicalObjectModifier)
  GOOGLE_DCHECK_NE(&from, this);
  const BreakoutPhysicalObjectModifier* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BreakoutPhysicalObjectModifier>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BreakoutPhysicalObjectModifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BreakoutPhysicalObjectModifier)
    MergeFrom(*source);
  }
}

void BreakoutPhysicalObjectModifier::MergeFrom(const BreakoutPhysicalObjectModifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BreakoutPhysicalObjectModifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.param1() != 0) {
    set_param1(from.param1());
  }
  if (from.param2() != 0) {
    set_param2(from.param2());
  }
  if (from.param3() != 0) {
    set_param3(from.param3());
  }
  if (from.param4() != 0) {
    set_param4(from.param4());
  }
  if (from.param5() != 0) {
    set_param5(from.param5());
  }
  if (from.param6() != 0) {
    set_param6(from.param6());
  }
  if (from.bool1() != 0) {
    set_bool1(from.bool1());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
  if (from.combo() != 0) {
    set_combo(from.combo());
  }
  if (from.peer_id() != 0) {
    set_peer_id(from.peer_id());
  }
  if (from.skill_type() != 0) {
    set_skill_type(from.skill_type());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.choose_player_count() != 0) {
    set_choose_player_count(from.choose_player_count());
  }
}

void BreakoutPhysicalObjectModifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BreakoutPhysicalObjectModifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BreakoutPhysicalObjectModifier::CopyFrom(const BreakoutPhysicalObjectModifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BreakoutPhysicalObjectModifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BreakoutPhysicalObjectModifier::IsInitialized() const {
  return true;
}

void BreakoutPhysicalObjectModifier::Swap(BreakoutPhysicalObjectModifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BreakoutPhysicalObjectModifier::InternalSwap(BreakoutPhysicalObjectModifier* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(id_, other->id_);
  swap(param1_, other->param1_);
  swap(param2_, other->param2_);
  swap(param3_, other->param3_);
  swap(param4_, other->param4_);
  swap(param5_, other->param5_);
  swap(param6_, other->param6_);
  swap(bool1_, other->bool1_);
  swap(duration_, other->duration_);
  swap(end_time_, other->end_time_);
  swap(combo_, other->combo_);
  swap(peer_id_, other->peer_id_);
  swap(skill_type_, other->skill_type_);
  swap(level_, other->level_);
  swap(choose_player_count_, other->choose_player_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BreakoutPhysicalObjectModifier::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BreakoutPhysicalObjectModifier

// uint32 type = 1;
void BreakoutPhysicalObjectModifier::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 BreakoutPhysicalObjectModifier::type() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObjectModifier.type)
  return type_;
}
void BreakoutPhysicalObjectModifier::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObjectModifier.type)
}

// uint32 id = 2;
void BreakoutPhysicalObjectModifier::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 BreakoutPhysicalObjectModifier::id() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObjectModifier.id)
  return id_;
}
void BreakoutPhysicalObjectModifier::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObjectModifier.id)
}

// int32 param1 = 3;
void BreakoutPhysicalObjectModifier::clear_param1() {
  param1_ = 0;
}
::google::protobuf::int32 BreakoutPhysicalObjectModifier::param1() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObjectModifier.param1)
  return param1_;
}
void BreakoutPhysicalObjectModifier::set_param1(::google::protobuf::int32 value) {
  
  param1_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObjectModifier.param1)
}

// int32 param2 = 4;
void BreakoutPhysicalObjectModifier::clear_param2() {
  param2_ = 0;
}
::google::protobuf::int32 BreakoutPhysicalObjectModifier::param2() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObjectModifier.param2)
  return param2_;
}
void BreakoutPhysicalObjectModifier::set_param2(::google::protobuf::int32 value) {
  
  param2_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObjectModifier.param2)
}

// int32 param3 = 5;
void BreakoutPhysicalObjectModifier::clear_param3() {
  param3_ = 0;
}
::google::protobuf::int32 BreakoutPhysicalObjectModifier::param3() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObjectModifier.param3)
  return param3_;
}
void BreakoutPhysicalObjectModifier::set_param3(::google::protobuf::int32 value) {
  
  param3_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObjectModifier.param3)
}

// int32 param4 = 6;
void BreakoutPhysicalObjectModifier::clear_param4() {
  param4_ = 0;
}
::google::protobuf::int32 BreakoutPhysicalObjectModifier::param4() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObjectModifier.param4)
  return param4_;
}
void BreakoutPhysicalObjectModifier::set_param4(::google::protobuf::int32 value) {
  
  param4_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObjectModifier.param4)
}

// int32 param5 = 7;
void BreakoutPhysicalObjectModifier::clear_param5() {
  param5_ = 0;
}
::google::protobuf::int32 BreakoutPhysicalObjectModifier::param5() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObjectModifier.param5)
  return param5_;
}
void BreakoutPhysicalObjectModifier::set_param5(::google::protobuf::int32 value) {
  
  param5_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObjectModifier.param5)
}

// int32 param6 = 8;
void BreakoutPhysicalObjectModifier::clear_param6() {
  param6_ = 0;
}
::google::protobuf::int32 BreakoutPhysicalObjectModifier::param6() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObjectModifier.param6)
  return param6_;
}
void BreakoutPhysicalObjectModifier::set_param6(::google::protobuf::int32 value) {
  
  param6_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObjectModifier.param6)
}

// bool bool1 = 9;
void BreakoutPhysicalObjectModifier::clear_bool1() {
  bool1_ = false;
}
bool BreakoutPhysicalObjectModifier::bool1() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObjectModifier.bool1)
  return bool1_;
}
void BreakoutPhysicalObjectModifier::set_bool1(bool value) {
  
  bool1_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObjectModifier.bool1)
}

// int32 duration = 10;
void BreakoutPhysicalObjectModifier::clear_duration() {
  duration_ = 0;
}
::google::protobuf::int32 BreakoutPhysicalObjectModifier::duration() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObjectModifier.duration)
  return duration_;
}
void BreakoutPhysicalObjectModifier::set_duration(::google::protobuf::int32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObjectModifier.duration)
}

// int32 end_time = 11;
void BreakoutPhysicalObjectModifier::clear_end_time() {
  end_time_ = 0;
}
::google::protobuf::int32 BreakoutPhysicalObjectModifier::end_time() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObjectModifier.end_time)
  return end_time_;
}
void BreakoutPhysicalObjectModifier::set_end_time(::google::protobuf::int32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObjectModifier.end_time)
}

// uint32 combo = 12;
void BreakoutPhysicalObjectModifier::clear_combo() {
  combo_ = 0u;
}
::google::protobuf::uint32 BreakoutPhysicalObjectModifier::combo() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObjectModifier.combo)
  return combo_;
}
void BreakoutPhysicalObjectModifier::set_combo(::google::protobuf::uint32 value) {
  
  combo_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObjectModifier.combo)
}

// uint32 peer_id = 13;
void BreakoutPhysicalObjectModifier::clear_peer_id() {
  peer_id_ = 0u;
}
::google::protobuf::uint32 BreakoutPhysicalObjectModifier::peer_id() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObjectModifier.peer_id)
  return peer_id_;
}
void BreakoutPhysicalObjectModifier::set_peer_id(::google::protobuf::uint32 value) {
  
  peer_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObjectModifier.peer_id)
}

// uint32 skill_type = 14;
void BreakoutPhysicalObjectModifier::clear_skill_type() {
  skill_type_ = 0u;
}
::google::protobuf::uint32 BreakoutPhysicalObjectModifier::skill_type() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObjectModifier.skill_type)
  return skill_type_;
}
void BreakoutPhysicalObjectModifier::set_skill_type(::google::protobuf::uint32 value) {
  
  skill_type_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObjectModifier.skill_type)
}

// uint32 level = 15;
void BreakoutPhysicalObjectModifier::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 BreakoutPhysicalObjectModifier::level() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObjectModifier.level)
  return level_;
}
void BreakoutPhysicalObjectModifier::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObjectModifier.level)
}

// uint32 choose_player_count = 16;
void BreakoutPhysicalObjectModifier::clear_choose_player_count() {
  choose_player_count_ = 0u;
}
::google::protobuf::uint32 BreakoutPhysicalObjectModifier::choose_player_count() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObjectModifier.choose_player_count)
  return choose_player_count_;
}
void BreakoutPhysicalObjectModifier::set_choose_player_count(::google::protobuf::uint32 value) {
  
  choose_player_count_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObjectModifier.choose_player_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BreakoutPhysicalObject::kIdFieldNumber;
const int BreakoutPhysicalObject::kIndexFieldNumber;
const int BreakoutPhysicalObject::kIsActiveFieldNumber;
const int BreakoutPhysicalObject::kPosFieldNumber;
const int BreakoutPhysicalObject::kMoveDirFieldNumber;
const int BreakoutPhysicalObject::kSpeedFieldNumber;
const int BreakoutPhysicalObject::kInitPeerIdFieldNumber;
const int BreakoutPhysicalObject::kStateFieldNumber;
const int BreakoutPhysicalObject::kElementTypeFieldNumber;
const int BreakoutPhysicalObject::kElementReactionBuffFieldNumber;
const int BreakoutPhysicalObject::kModifierListFieldNumber;
const int BreakoutPhysicalObject::kTotalRotationFieldNumber;
const int BreakoutPhysicalObject::kInfoListFieldNumber;
const int BreakoutPhysicalObject::kLastHitPeerIdFieldNumber;
const int BreakoutPhysicalObject::kSpeedIncreaseCountFieldNumber;
const int BreakoutPhysicalObject::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BreakoutPhysicalObject::BreakoutPhysicalObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BreakoutPhysicalObject)
}
BreakoutPhysicalObject::BreakoutPhysicalObject(const BreakoutPhysicalObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      modifier_list_(from.modifier_list_),
      info_list_(from.info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::proto::BreakoutVector2(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_move_dir()) {
    move_dir_ = new ::proto::BreakoutVector2(*from.move_dir_);
  } else {
    move_dir_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&id_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:proto.BreakoutPhysicalObject)
}

void BreakoutPhysicalObject::SharedCtor() {
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(offset_));
  _cached_size_ = 0;
}

BreakoutPhysicalObject::~BreakoutPhysicalObject() {
  // @@protoc_insertion_point(destructor:proto.BreakoutPhysicalObject)
  SharedDtor();
}

void BreakoutPhysicalObject::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete move_dir_;
}

void BreakoutPhysicalObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BreakoutPhysicalObject::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BreakoutPhysicalObject& BreakoutPhysicalObject::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

BreakoutPhysicalObject* BreakoutPhysicalObject::New(::google::protobuf::Arena* arena) const {
  BreakoutPhysicalObject* n = new BreakoutPhysicalObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BreakoutPhysicalObject::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BreakoutPhysicalObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modifier_list_.Clear();
  info_list_.Clear();
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && move_dir_ != NULL) {
    delete move_dir_;
  }
  move_dir_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&id_)) + sizeof(offset_));
  _internal_metadata_.Clear();
}

bool BreakoutPhysicalObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BreakoutPhysicalObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_active = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.BreakoutVector2 pos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.BreakoutVector2 move_dir = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_move_dir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 speed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 init_peer_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &init_peer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 state = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 element_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &element_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 element_reaction_buff = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &element_reaction_buff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.BreakoutPhysicalObjectModifier modifier_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_modifier_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 total_rotation = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.BreakoutBrickInfo info_list = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 last_hit_peer_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hit_peer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 speed_increase_count = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_increase_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 offset = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BreakoutPhysicalObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BreakoutPhysicalObject)
  return false;
#undef DO_
}

void BreakoutPhysicalObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BreakoutPhysicalObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // bool is_active = 3;
  if (this->is_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_active(), output);
  }

  // .proto.BreakoutVector2 pos = 4;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pos_, output);
  }

  // .proto.BreakoutVector2 move_dir = 5;
  if (this->has_move_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->move_dir_, output);
  }

  // int32 speed = 6;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->speed(), output);
  }

  // uint32 init_peer_id = 7;
  if (this->init_peer_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->init_peer_id(), output);
  }

  // uint32 state = 8;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->state(), output);
  }

  // uint32 element_type = 9;
  if (this->element_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->element_type(), output);
  }

  // uint32 element_reaction_buff = 10;
  if (this->element_reaction_buff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->element_reaction_buff(), output);
  }

  // repeated .proto.BreakoutPhysicalObjectModifier modifier_list = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->modifier_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->modifier_list(static_cast<int>(i)), output);
  }

  // int32 total_rotation = 12;
  if (this->total_rotation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->total_rotation(), output);
  }

  // repeated .proto.BreakoutBrickInfo info_list = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->info_list(static_cast<int>(i)), output);
  }

  // uint32 last_hit_peer_id = 14;
  if (this->last_hit_peer_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->last_hit_peer_id(), output);
  }

  // uint32 speed_increase_count = 15;
  if (this->speed_increase_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->speed_increase_count(), output);
  }

  // int32 offset = 16;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->offset(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BreakoutPhysicalObject)
}

::google::protobuf::uint8* BreakoutPhysicalObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BreakoutPhysicalObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // bool is_active = 3;
  if (this->is_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_active(), target);
  }

  // .proto.BreakoutVector2 pos = 4;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->pos_, deterministic, target);
  }

  // .proto.BreakoutVector2 move_dir = 5;
  if (this->has_move_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->move_dir_, deterministic, target);
  }

  // int32 speed = 6;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->speed(), target);
  }

  // uint32 init_peer_id = 7;
  if (this->init_peer_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->init_peer_id(), target);
  }

  // uint32 state = 8;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->state(), target);
  }

  // uint32 element_type = 9;
  if (this->element_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->element_type(), target);
  }

  // uint32 element_reaction_buff = 10;
  if (this->element_reaction_buff() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->element_reaction_buff(), target);
  }

  // repeated .proto.BreakoutPhysicalObjectModifier modifier_list = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->modifier_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->modifier_list(static_cast<int>(i)), deterministic, target);
  }

  // int32 total_rotation = 12;
  if (this->total_rotation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->total_rotation(), target);
  }

  // repeated .proto.BreakoutBrickInfo info_list = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->info_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 last_hit_peer_id = 14;
  if (this->last_hit_peer_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->last_hit_peer_id(), target);
  }

  // uint32 speed_increase_count = 15;
  if (this->speed_increase_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->speed_increase_count(), target);
  }

  // int32 offset = 16;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->offset(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BreakoutPhysicalObject)
  return target;
}

size_t BreakoutPhysicalObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BreakoutPhysicalObject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.BreakoutPhysicalObjectModifier modifier_list = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->modifier_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modifier_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.BreakoutBrickInfo info_list = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info_list(static_cast<int>(i)));
    }
  }

  // .proto.BreakoutVector2 pos = 4;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  // .proto.BreakoutVector2 move_dir = 5;
  if (this->has_move_dir()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->move_dir_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  // bool is_active = 3;
  if (this->is_active() != 0) {
    total_size += 1 + 1;
  }

  // int32 speed = 6;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->speed());
  }

  // uint32 init_peer_id = 7;
  if (this->init_peer_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->init_peer_id());
  }

  // uint32 state = 8;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  // uint32 element_type = 9;
  if (this->element_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->element_type());
  }

  // uint32 element_reaction_buff = 10;
  if (this->element_reaction_buff() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->element_reaction_buff());
  }

  // int32 total_rotation = 12;
  if (this->total_rotation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_rotation());
  }

  // uint32 last_hit_peer_id = 14;
  if (this->last_hit_peer_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->last_hit_peer_id());
  }

  // uint32 speed_increase_count = 15;
  if (this->speed_increase_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->speed_increase_count());
  }

  // int32 offset = 16;
  if (this->offset() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->offset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BreakoutPhysicalObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BreakoutPhysicalObject)
  GOOGLE_DCHECK_NE(&from, this);
  const BreakoutPhysicalObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BreakoutPhysicalObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BreakoutPhysicalObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BreakoutPhysicalObject)
    MergeFrom(*source);
  }
}

void BreakoutPhysicalObject::MergeFrom(const BreakoutPhysicalObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BreakoutPhysicalObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  modifier_list_.MergeFrom(from.modifier_list_);
  info_list_.MergeFrom(from.info_list_);
  if (from.has_pos()) {
    mutable_pos()->::proto::BreakoutVector2::MergeFrom(from.pos());
  }
  if (from.has_move_dir()) {
    mutable_move_dir()->::proto::BreakoutVector2::MergeFrom(from.move_dir());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.is_active() != 0) {
    set_is_active(from.is_active());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.init_peer_id() != 0) {
    set_init_peer_id(from.init_peer_id());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.element_type() != 0) {
    set_element_type(from.element_type());
  }
  if (from.element_reaction_buff() != 0) {
    set_element_reaction_buff(from.element_reaction_buff());
  }
  if (from.total_rotation() != 0) {
    set_total_rotation(from.total_rotation());
  }
  if (from.last_hit_peer_id() != 0) {
    set_last_hit_peer_id(from.last_hit_peer_id());
  }
  if (from.speed_increase_count() != 0) {
    set_speed_increase_count(from.speed_increase_count());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
}

void BreakoutPhysicalObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BreakoutPhysicalObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BreakoutPhysicalObject::CopyFrom(const BreakoutPhysicalObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BreakoutPhysicalObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BreakoutPhysicalObject::IsInitialized() const {
  return true;
}

void BreakoutPhysicalObject::Swap(BreakoutPhysicalObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BreakoutPhysicalObject::InternalSwap(BreakoutPhysicalObject* other) {
  using std::swap;
  modifier_list_.InternalSwap(&other->modifier_list_);
  info_list_.InternalSwap(&other->info_list_);
  swap(pos_, other->pos_);
  swap(move_dir_, other->move_dir_);
  swap(id_, other->id_);
  swap(index_, other->index_);
  swap(is_active_, other->is_active_);
  swap(speed_, other->speed_);
  swap(init_peer_id_, other->init_peer_id_);
  swap(state_, other->state_);
  swap(element_type_, other->element_type_);
  swap(element_reaction_buff_, other->element_reaction_buff_);
  swap(total_rotation_, other->total_rotation_);
  swap(last_hit_peer_id_, other->last_hit_peer_id_);
  swap(speed_increase_count_, other->speed_increase_count_);
  swap(offset_, other->offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BreakoutPhysicalObject::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BreakoutPhysicalObject

// uint32 id = 1;
void BreakoutPhysicalObject::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 BreakoutPhysicalObject::id() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObject.id)
  return id_;
}
void BreakoutPhysicalObject::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObject.id)
}

// uint32 index = 2;
void BreakoutPhysicalObject::clear_index() {
  index_ = 0u;
}
::google::protobuf::uint32 BreakoutPhysicalObject::index() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObject.index)
  return index_;
}
void BreakoutPhysicalObject::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObject.index)
}

// bool is_active = 3;
void BreakoutPhysicalObject::clear_is_active() {
  is_active_ = false;
}
bool BreakoutPhysicalObject::is_active() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObject.is_active)
  return is_active_;
}
void BreakoutPhysicalObject::set_is_active(bool value) {
  
  is_active_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObject.is_active)
}

// .proto.BreakoutVector2 pos = 4;
bool BreakoutPhysicalObject::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
void BreakoutPhysicalObject::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
const ::proto::BreakoutVector2& BreakoutPhysicalObject::pos() const {
  const ::proto::BreakoutVector2* p = pos_;
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObject.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BreakoutVector2*>(
      &::proto::_BreakoutVector2_default_instance_);
}
::proto::BreakoutVector2* BreakoutPhysicalObject::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::proto::BreakoutVector2;
  }
  // @@protoc_insertion_point(field_mutable:proto.BreakoutPhysicalObject.pos)
  return pos_;
}
::proto::BreakoutVector2* BreakoutPhysicalObject::release_pos() {
  // @@protoc_insertion_point(field_release:proto.BreakoutPhysicalObject.pos)
  
  ::proto::BreakoutVector2* temp = pos_;
  pos_ = NULL;
  return temp;
}
void BreakoutPhysicalObject::set_allocated_pos(::proto::BreakoutVector2* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BreakoutPhysicalObject.pos)
}

// .proto.BreakoutVector2 move_dir = 5;
bool BreakoutPhysicalObject::has_move_dir() const {
  return this != internal_default_instance() && move_dir_ != NULL;
}
void BreakoutPhysicalObject::clear_move_dir() {
  if (GetArenaNoVirtual() == NULL && move_dir_ != NULL) delete move_dir_;
  move_dir_ = NULL;
}
const ::proto::BreakoutVector2& BreakoutPhysicalObject::move_dir() const {
  const ::proto::BreakoutVector2* p = move_dir_;
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObject.move_dir)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BreakoutVector2*>(
      &::proto::_BreakoutVector2_default_instance_);
}
::proto::BreakoutVector2* BreakoutPhysicalObject::mutable_move_dir() {
  
  if (move_dir_ == NULL) {
    move_dir_ = new ::proto::BreakoutVector2;
  }
  // @@protoc_insertion_point(field_mutable:proto.BreakoutPhysicalObject.move_dir)
  return move_dir_;
}
::proto::BreakoutVector2* BreakoutPhysicalObject::release_move_dir() {
  // @@protoc_insertion_point(field_release:proto.BreakoutPhysicalObject.move_dir)
  
  ::proto::BreakoutVector2* temp = move_dir_;
  move_dir_ = NULL;
  return temp;
}
void BreakoutPhysicalObject::set_allocated_move_dir(::proto::BreakoutVector2* move_dir) {
  delete move_dir_;
  move_dir_ = move_dir;
  if (move_dir) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BreakoutPhysicalObject.move_dir)
}

// int32 speed = 6;
void BreakoutPhysicalObject::clear_speed() {
  speed_ = 0;
}
::google::protobuf::int32 BreakoutPhysicalObject::speed() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObject.speed)
  return speed_;
}
void BreakoutPhysicalObject::set_speed(::google::protobuf::int32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObject.speed)
}

// uint32 init_peer_id = 7;
void BreakoutPhysicalObject::clear_init_peer_id() {
  init_peer_id_ = 0u;
}
::google::protobuf::uint32 BreakoutPhysicalObject::init_peer_id() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObject.init_peer_id)
  return init_peer_id_;
}
void BreakoutPhysicalObject::set_init_peer_id(::google::protobuf::uint32 value) {
  
  init_peer_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObject.init_peer_id)
}

// uint32 state = 8;
void BreakoutPhysicalObject::clear_state() {
  state_ = 0u;
}
::google::protobuf::uint32 BreakoutPhysicalObject::state() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObject.state)
  return state_;
}
void BreakoutPhysicalObject::set_state(::google::protobuf::uint32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObject.state)
}

// uint32 element_type = 9;
void BreakoutPhysicalObject::clear_element_type() {
  element_type_ = 0u;
}
::google::protobuf::uint32 BreakoutPhysicalObject::element_type() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObject.element_type)
  return element_type_;
}
void BreakoutPhysicalObject::set_element_type(::google::protobuf::uint32 value) {
  
  element_type_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObject.element_type)
}

// uint32 element_reaction_buff = 10;
void BreakoutPhysicalObject::clear_element_reaction_buff() {
  element_reaction_buff_ = 0u;
}
::google::protobuf::uint32 BreakoutPhysicalObject::element_reaction_buff() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObject.element_reaction_buff)
  return element_reaction_buff_;
}
void BreakoutPhysicalObject::set_element_reaction_buff(::google::protobuf::uint32 value) {
  
  element_reaction_buff_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObject.element_reaction_buff)
}

// repeated .proto.BreakoutPhysicalObjectModifier modifier_list = 11;
int BreakoutPhysicalObject::modifier_list_size() const {
  return modifier_list_.size();
}
void BreakoutPhysicalObject::clear_modifier_list() {
  modifier_list_.Clear();
}
const ::proto::BreakoutPhysicalObjectModifier& BreakoutPhysicalObject::modifier_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObject.modifier_list)
  return modifier_list_.Get(index);
}
::proto::BreakoutPhysicalObjectModifier* BreakoutPhysicalObject::mutable_modifier_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BreakoutPhysicalObject.modifier_list)
  return modifier_list_.Mutable(index);
}
::proto::BreakoutPhysicalObjectModifier* BreakoutPhysicalObject::add_modifier_list() {
  // @@protoc_insertion_point(field_add:proto.BreakoutPhysicalObject.modifier_list)
  return modifier_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::BreakoutPhysicalObjectModifier >*
BreakoutPhysicalObject::mutable_modifier_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BreakoutPhysicalObject.modifier_list)
  return &modifier_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::BreakoutPhysicalObjectModifier >&
BreakoutPhysicalObject::modifier_list() const {
  // @@protoc_insertion_point(field_list:proto.BreakoutPhysicalObject.modifier_list)
  return modifier_list_;
}

// int32 total_rotation = 12;
void BreakoutPhysicalObject::clear_total_rotation() {
  total_rotation_ = 0;
}
::google::protobuf::int32 BreakoutPhysicalObject::total_rotation() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObject.total_rotation)
  return total_rotation_;
}
void BreakoutPhysicalObject::set_total_rotation(::google::protobuf::int32 value) {
  
  total_rotation_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObject.total_rotation)
}

// repeated .proto.BreakoutBrickInfo info_list = 13;
int BreakoutPhysicalObject::info_list_size() const {
  return info_list_.size();
}
void BreakoutPhysicalObject::clear_info_list() {
  info_list_.Clear();
}
const ::proto::BreakoutBrickInfo& BreakoutPhysicalObject::info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObject.info_list)
  return info_list_.Get(index);
}
::proto::BreakoutBrickInfo* BreakoutPhysicalObject::mutable_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BreakoutPhysicalObject.info_list)
  return info_list_.Mutable(index);
}
::proto::BreakoutBrickInfo* BreakoutPhysicalObject::add_info_list() {
  // @@protoc_insertion_point(field_add:proto.BreakoutPhysicalObject.info_list)
  return info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::BreakoutBrickInfo >*
BreakoutPhysicalObject::mutable_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BreakoutPhysicalObject.info_list)
  return &info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::BreakoutBrickInfo >&
BreakoutPhysicalObject::info_list() const {
  // @@protoc_insertion_point(field_list:proto.BreakoutPhysicalObject.info_list)
  return info_list_;
}

// uint32 last_hit_peer_id = 14;
void BreakoutPhysicalObject::clear_last_hit_peer_id() {
  last_hit_peer_id_ = 0u;
}
::google::protobuf::uint32 BreakoutPhysicalObject::last_hit_peer_id() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObject.last_hit_peer_id)
  return last_hit_peer_id_;
}
void BreakoutPhysicalObject::set_last_hit_peer_id(::google::protobuf::uint32 value) {
  
  last_hit_peer_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObject.last_hit_peer_id)
}

// uint32 speed_increase_count = 15;
void BreakoutPhysicalObject::clear_speed_increase_count() {
  speed_increase_count_ = 0u;
}
::google::protobuf::uint32 BreakoutPhysicalObject::speed_increase_count() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObject.speed_increase_count)
  return speed_increase_count_;
}
void BreakoutPhysicalObject::set_speed_increase_count(::google::protobuf::uint32 value) {
  
  speed_increase_count_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObject.speed_increase_count)
}

// int32 offset = 16;
void BreakoutPhysicalObject::clear_offset() {
  offset_ = 0;
}
::google::protobuf::int32 BreakoutPhysicalObject::offset() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutPhysicalObject.offset)
  return offset_;
}
void BreakoutPhysicalObject::set_offset(::google::protobuf::int32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutPhysicalObject.offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BreakoutSpawnPoint::kIdFieldNumber;
const int BreakoutSpawnPoint::kBrickSuiteIdFieldNumber;
const int BreakoutSpawnPoint::kSpawnedBrickListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BreakoutSpawnPoint::BreakoutSpawnPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BreakoutSpawnPoint)
}
BreakoutSpawnPoint::BreakoutSpawnPoint(const BreakoutSpawnPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      spawned_brick_list_(from.spawned_brick_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&brick_suite_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(brick_suite_id_));
  // @@protoc_insertion_point(copy_constructor:proto.BreakoutSpawnPoint)
}

void BreakoutSpawnPoint::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brick_suite_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(brick_suite_id_));
  _cached_size_ = 0;
}

BreakoutSpawnPoint::~BreakoutSpawnPoint() {
  // @@protoc_insertion_point(destructor:proto.BreakoutSpawnPoint)
  SharedDtor();
}

void BreakoutSpawnPoint::SharedDtor() {
}

void BreakoutSpawnPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BreakoutSpawnPoint::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BreakoutSpawnPoint& BreakoutSpawnPoint::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

BreakoutSpawnPoint* BreakoutSpawnPoint::New(::google::protobuf::Arena* arena) const {
  BreakoutSpawnPoint* n = new BreakoutSpawnPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BreakoutSpawnPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BreakoutSpawnPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spawned_brick_list_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brick_suite_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(brick_suite_id_));
  _internal_metadata_.Clear();
}

bool BreakoutSpawnPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BreakoutSpawnPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 brick_suite_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &brick_suite_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.BreakoutPhysicalObject spawned_brick_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spawned_brick_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BreakoutSpawnPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BreakoutSpawnPoint)
  return false;
#undef DO_
}

void BreakoutSpawnPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BreakoutSpawnPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // uint32 brick_suite_id = 2;
  if (this->brick_suite_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->brick_suite_id(), output);
  }

  // repeated .proto.BreakoutPhysicalObject spawned_brick_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spawned_brick_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->spawned_brick_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BreakoutSpawnPoint)
}

::google::protobuf::uint8* BreakoutSpawnPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BreakoutSpawnPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // uint32 brick_suite_id = 2;
  if (this->brick_suite_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->brick_suite_id(), target);
  }

  // repeated .proto.BreakoutPhysicalObject spawned_brick_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spawned_brick_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->spawned_brick_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BreakoutSpawnPoint)
  return target;
}

size_t BreakoutSpawnPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BreakoutSpawnPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.BreakoutPhysicalObject spawned_brick_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->spawned_brick_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spawned_brick_list(static_cast<int>(i)));
    }
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // uint32 brick_suite_id = 2;
  if (this->brick_suite_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->brick_suite_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BreakoutSpawnPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BreakoutSpawnPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const BreakoutSpawnPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BreakoutSpawnPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BreakoutSpawnPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BreakoutSpawnPoint)
    MergeFrom(*source);
  }
}

void BreakoutSpawnPoint::MergeFrom(const BreakoutSpawnPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BreakoutSpawnPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spawned_brick_list_.MergeFrom(from.spawned_brick_list_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.brick_suite_id() != 0) {
    set_brick_suite_id(from.brick_suite_id());
  }
}

void BreakoutSpawnPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BreakoutSpawnPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BreakoutSpawnPoint::CopyFrom(const BreakoutSpawnPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BreakoutSpawnPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BreakoutSpawnPoint::IsInitialized() const {
  return true;
}

void BreakoutSpawnPoint::Swap(BreakoutSpawnPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BreakoutSpawnPoint::InternalSwap(BreakoutSpawnPoint* other) {
  using std::swap;
  spawned_brick_list_.InternalSwap(&other->spawned_brick_list_);
  swap(id_, other->id_);
  swap(brick_suite_id_, other->brick_suite_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BreakoutSpawnPoint::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BreakoutSpawnPoint

// uint32 id = 1;
void BreakoutSpawnPoint::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 BreakoutSpawnPoint::id() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSpawnPoint.id)
  return id_;
}
void BreakoutSpawnPoint::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutSpawnPoint.id)
}

// uint32 brick_suite_id = 2;
void BreakoutSpawnPoint::clear_brick_suite_id() {
  brick_suite_id_ = 0u;
}
::google::protobuf::uint32 BreakoutSpawnPoint::brick_suite_id() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSpawnPoint.brick_suite_id)
  return brick_suite_id_;
}
void BreakoutSpawnPoint::set_brick_suite_id(::google::protobuf::uint32 value) {
  
  brick_suite_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutSpawnPoint.brick_suite_id)
}

// repeated .proto.BreakoutPhysicalObject spawned_brick_list = 3;
int BreakoutSpawnPoint::spawned_brick_list_size() const {
  return spawned_brick_list_.size();
}
void BreakoutSpawnPoint::clear_spawned_brick_list() {
  spawned_brick_list_.Clear();
}
const ::proto::BreakoutPhysicalObject& BreakoutSpawnPoint::spawned_brick_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSpawnPoint.spawned_brick_list)
  return spawned_brick_list_.Get(index);
}
::proto::BreakoutPhysicalObject* BreakoutSpawnPoint::mutable_spawned_brick_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BreakoutSpawnPoint.spawned_brick_list)
  return spawned_brick_list_.Mutable(index);
}
::proto::BreakoutPhysicalObject* BreakoutSpawnPoint::add_spawned_brick_list() {
  // @@protoc_insertion_point(field_add:proto.BreakoutSpawnPoint.spawned_brick_list)
  return spawned_brick_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::BreakoutPhysicalObject >*
BreakoutSpawnPoint::mutable_spawned_brick_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BreakoutSpawnPoint.spawned_brick_list)
  return &spawned_brick_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::BreakoutPhysicalObject >&
BreakoutSpawnPoint::spawned_brick_list() const {
  // @@protoc_insertion_point(field_list:proto.BreakoutSpawnPoint.spawned_brick_list)
  return spawned_brick_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BreakoutElementReactionCounter::kElementReactionFieldNumber;
const int BreakoutElementReactionCounter::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BreakoutElementReactionCounter::BreakoutElementReactionCounter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BreakoutElementReactionCounter)
}
BreakoutElementReactionCounter::BreakoutElementReactionCounter(const BreakoutElementReactionCounter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&element_reaction_, &from.element_reaction_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&element_reaction_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:proto.BreakoutElementReactionCounter)
}

void BreakoutElementReactionCounter::SharedCtor() {
  ::memset(&element_reaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&element_reaction_)) + sizeof(count_));
  _cached_size_ = 0;
}

BreakoutElementReactionCounter::~BreakoutElementReactionCounter() {
  // @@protoc_insertion_point(destructor:proto.BreakoutElementReactionCounter)
  SharedDtor();
}

void BreakoutElementReactionCounter::SharedDtor() {
}

void BreakoutElementReactionCounter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BreakoutElementReactionCounter::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BreakoutElementReactionCounter& BreakoutElementReactionCounter::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

BreakoutElementReactionCounter* BreakoutElementReactionCounter::New(::google::protobuf::Arena* arena) const {
  BreakoutElementReactionCounter* n = new BreakoutElementReactionCounter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BreakoutElementReactionCounter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BreakoutElementReactionCounter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&element_reaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&element_reaction_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

bool BreakoutElementReactionCounter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BreakoutElementReactionCounter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 element_reaction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &element_reaction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BreakoutElementReactionCounter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BreakoutElementReactionCounter)
  return false;
#undef DO_
}

void BreakoutElementReactionCounter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BreakoutElementReactionCounter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 element_reaction = 1;
  if (this->element_reaction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->element_reaction(), output);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BreakoutElementReactionCounter)
}

::google::protobuf::uint8* BreakoutElementReactionCounter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BreakoutElementReactionCounter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 element_reaction = 1;
  if (this->element_reaction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->element_reaction(), target);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BreakoutElementReactionCounter)
  return target;
}

size_t BreakoutElementReactionCounter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BreakoutElementReactionCounter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 element_reaction = 1;
  if (this->element_reaction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->element_reaction());
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BreakoutElementReactionCounter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BreakoutElementReactionCounter)
  GOOGLE_DCHECK_NE(&from, this);
  const BreakoutElementReactionCounter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BreakoutElementReactionCounter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BreakoutElementReactionCounter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BreakoutElementReactionCounter)
    MergeFrom(*source);
  }
}

void BreakoutElementReactionCounter::MergeFrom(const BreakoutElementReactionCounter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BreakoutElementReactionCounter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.element_reaction() != 0) {
    set_element_reaction(from.element_reaction());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void BreakoutElementReactionCounter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BreakoutElementReactionCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BreakoutElementReactionCounter::CopyFrom(const BreakoutElementReactionCounter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BreakoutElementReactionCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BreakoutElementReactionCounter::IsInitialized() const {
  return true;
}

void BreakoutElementReactionCounter::Swap(BreakoutElementReactionCounter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BreakoutElementReactionCounter::InternalSwap(BreakoutElementReactionCounter* other) {
  using std::swap;
  swap(element_reaction_, other->element_reaction_);
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BreakoutElementReactionCounter::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BreakoutElementReactionCounter

// uint32 element_reaction = 1;
void BreakoutElementReactionCounter::clear_element_reaction() {
  element_reaction_ = 0u;
}
::google::protobuf::uint32 BreakoutElementReactionCounter::element_reaction() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutElementReactionCounter.element_reaction)
  return element_reaction_;
}
void BreakoutElementReactionCounter::set_element_reaction(::google::protobuf::uint32 value) {
  
  element_reaction_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutElementReactionCounter.element_reaction)
}

// uint32 count = 2;
void BreakoutElementReactionCounter::clear_count() {
  count_ = 0u;
}
::google::protobuf::uint32 BreakoutElementReactionCounter::count() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutElementReactionCounter.count)
  return count_;
}
void BreakoutElementReactionCounter::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutElementReactionCounter.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BreakoutSyncConnectUidInfo::kUidFieldNumber;
const int BreakoutSyncConnectUidInfo::kSkillIdListFieldNumber;
const int BreakoutSyncConnectUidInfo::kSkillLevelListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BreakoutSyncConnectUidInfo::BreakoutSyncConnectUidInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BreakoutSyncConnectUidInfo)
}
BreakoutSyncConnectUidInfo::BreakoutSyncConnectUidInfo(const BreakoutSyncConnectUidInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      skill_id_list_(from.skill_id_list_),
      skill_level_list_(from.skill_level_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:proto.BreakoutSyncConnectUidInfo)
}

void BreakoutSyncConnectUidInfo::SharedCtor() {
  uid_ = 0u;
  _cached_size_ = 0;
}

BreakoutSyncConnectUidInfo::~BreakoutSyncConnectUidInfo() {
  // @@protoc_insertion_point(destructor:proto.BreakoutSyncConnectUidInfo)
  SharedDtor();
}

void BreakoutSyncConnectUidInfo::SharedDtor() {
}

void BreakoutSyncConnectUidInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BreakoutSyncConnectUidInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BreakoutSyncConnectUidInfo& BreakoutSyncConnectUidInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

BreakoutSyncConnectUidInfo* BreakoutSyncConnectUidInfo::New(::google::protobuf::Arena* arena) const {
  BreakoutSyncConnectUidInfo* n = new BreakoutSyncConnectUidInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BreakoutSyncConnectUidInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BreakoutSyncConnectUidInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skill_id_list_.Clear();
  skill_level_list_.Clear();
  uid_ = 0u;
  _internal_metadata_.Clear();
}

bool BreakoutSyncConnectUidInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BreakoutSyncConnectUidInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 skill_id_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skill_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_skill_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 skill_level_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skill_level_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_skill_level_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BreakoutSyncConnectUidInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BreakoutSyncConnectUidInfo)
  return false;
#undef DO_
}

void BreakoutSyncConnectUidInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BreakoutSyncConnectUidInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // repeated uint32 skill_id_list = 2;
  if (this->skill_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _skill_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->skill_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->skill_id_list(i), output);
  }

  // repeated uint32 skill_level_list = 3;
  if (this->skill_level_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _skill_level_list_cached_byte_size_));
  }
  for (int i = 0, n = this->skill_level_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->skill_level_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BreakoutSyncConnectUidInfo)
}

::google::protobuf::uint8* BreakoutSyncConnectUidInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BreakoutSyncConnectUidInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // repeated uint32 skill_id_list = 2;
  if (this->skill_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _skill_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->skill_id_list_, target);
  }

  // repeated uint32 skill_level_list = 3;
  if (this->skill_level_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _skill_level_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->skill_level_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BreakoutSyncConnectUidInfo)
  return target;
}

size_t BreakoutSyncConnectUidInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BreakoutSyncConnectUidInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 skill_id_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->skill_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _skill_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 skill_level_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->skill_level_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _skill_level_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BreakoutSyncConnectUidInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BreakoutSyncConnectUidInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BreakoutSyncConnectUidInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BreakoutSyncConnectUidInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BreakoutSyncConnectUidInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BreakoutSyncConnectUidInfo)
    MergeFrom(*source);
  }
}

void BreakoutSyncConnectUidInfo::MergeFrom(const BreakoutSyncConnectUidInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BreakoutSyncConnectUidInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skill_id_list_.MergeFrom(from.skill_id_list_);
  skill_level_list_.MergeFrom(from.skill_level_list_);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void BreakoutSyncConnectUidInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BreakoutSyncConnectUidInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BreakoutSyncConnectUidInfo::CopyFrom(const BreakoutSyncConnectUidInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BreakoutSyncConnectUidInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BreakoutSyncConnectUidInfo::IsInitialized() const {
  return true;
}

void BreakoutSyncConnectUidInfo::Swap(BreakoutSyncConnectUidInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BreakoutSyncConnectUidInfo::InternalSwap(BreakoutSyncConnectUidInfo* other) {
  using std::swap;
  skill_id_list_.InternalSwap(&other->skill_id_list_);
  skill_level_list_.InternalSwap(&other->skill_level_list_);
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BreakoutSyncConnectUidInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BreakoutSyncConnectUidInfo

// uint32 uid = 1;
void BreakoutSyncConnectUidInfo::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 BreakoutSyncConnectUidInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSyncConnectUidInfo.uid)
  return uid_;
}
void BreakoutSyncConnectUidInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutSyncConnectUidInfo.uid)
}

// repeated uint32 skill_id_list = 2;
int BreakoutSyncConnectUidInfo::skill_id_list_size() const {
  return skill_id_list_.size();
}
void BreakoutSyncConnectUidInfo::clear_skill_id_list() {
  skill_id_list_.Clear();
}
::google::protobuf::uint32 BreakoutSyncConnectUidInfo::skill_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSyncConnectUidInfo.skill_id_list)
  return skill_id_list_.Get(index);
}
void BreakoutSyncConnectUidInfo::set_skill_id_list(int index, ::google::protobuf::uint32 value) {
  skill_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BreakoutSyncConnectUidInfo.skill_id_list)
}
void BreakoutSyncConnectUidInfo::add_skill_id_list(::google::protobuf::uint32 value) {
  skill_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BreakoutSyncConnectUidInfo.skill_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BreakoutSyncConnectUidInfo::skill_id_list() const {
  // @@protoc_insertion_point(field_list:proto.BreakoutSyncConnectUidInfo.skill_id_list)
  return skill_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BreakoutSyncConnectUidInfo::mutable_skill_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BreakoutSyncConnectUidInfo.skill_id_list)
  return &skill_id_list_;
}

// repeated uint32 skill_level_list = 3;
int BreakoutSyncConnectUidInfo::skill_level_list_size() const {
  return skill_level_list_.size();
}
void BreakoutSyncConnectUidInfo::clear_skill_level_list() {
  skill_level_list_.Clear();
}
::google::protobuf::uint32 BreakoutSyncConnectUidInfo::skill_level_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSyncConnectUidInfo.skill_level_list)
  return skill_level_list_.Get(index);
}
void BreakoutSyncConnectUidInfo::set_skill_level_list(int index, ::google::protobuf::uint32 value) {
  skill_level_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BreakoutSyncConnectUidInfo.skill_level_list)
}
void BreakoutSyncConnectUidInfo::add_skill_level_list(::google::protobuf::uint32 value) {
  skill_level_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BreakoutSyncConnectUidInfo.skill_level_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BreakoutSyncConnectUidInfo::skill_level_list() const {
  // @@protoc_insertion_point(field_list:proto.BreakoutSyncConnectUidInfo.skill_level_list)
  return skill_level_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BreakoutSyncConnectUidInfo::mutable_skill_level_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BreakoutSyncConnectUidInfo.skill_level_list)
  return &skill_level_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BreakoutSnapShot::kClientGameTimeFieldNumber;
const int BreakoutSnapShot::kServerGameTimeFieldNumber;
const int BreakoutSnapShot::kBallListFieldNumber;
const int BreakoutSnapShot::kPhysicalObjectListFieldNumber;
const int BreakoutSnapShot::kActionListFieldNumber;
const int BreakoutSnapShot::kWaveIndexFieldNumber;
const int BreakoutSnapShot::kIsFinishFieldNumber;
const int BreakoutSnapShot::kScoreFieldNumber;
const int BreakoutSnapShot::kComboFieldNumber;
const int BreakoutSnapShot::kMaxComboFieldNumber;
const int BreakoutSnapShot::kLifeCountFieldNumber;
const int BreakoutSnapShot::kWaveSuiteIndexFieldNumber;
const int BreakoutSnapShot::kSpawnPointListFieldNumber;
const int BreakoutSnapShot::kRemainingBossHpFieldNumber;
const int BreakoutSnapShot::kBrickElementReactionListFieldNumber;
const int BreakoutSnapShot::kBallElementReactionListFieldNumber;
const int BreakoutSnapShot::kUidInfoListFieldNumber;
const int BreakoutSnapShot::kDynamicObjectListFieldNumber;
const int BreakoutSnapShot::kIdIndexListFieldNumber;
const int BreakoutSnapShot::kRawClientGameTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BreakoutSnapShot::BreakoutSnapShot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BreakoutSnapShot)
}
BreakoutSnapShot::BreakoutSnapShot(const BreakoutSnapShot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ball_list_(from.ball_list_),
      physical_object_list_(from.physical_object_list_),
      action_list_(from.action_list_),
      spawn_point_list_(from.spawn_point_list_),
      brick_element_reaction_list_(from.brick_element_reaction_list_),
      ball_element_reaction_list_(from.ball_element_reaction_list_),
      uid_info_list_(from.uid_info_list_),
      dynamic_object_list_(from.dynamic_object_list_),
      id_index_list_(from.id_index_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&client_game_time_, &from.client_game_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&raw_client_game_time_) -
    reinterpret_cast<char*>(&client_game_time_)) + sizeof(raw_client_game_time_));
  // @@protoc_insertion_point(copy_constructor:proto.BreakoutSnapShot)
}

void BreakoutSnapShot::SharedCtor() {
  ::memset(&client_game_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raw_client_game_time_) -
      reinterpret_cast<char*>(&client_game_time_)) + sizeof(raw_client_game_time_));
  _cached_size_ = 0;
}

BreakoutSnapShot::~BreakoutSnapShot() {
  // @@protoc_insertion_point(destructor:proto.BreakoutSnapShot)
  SharedDtor();
}

void BreakoutSnapShot::SharedDtor() {
}

void BreakoutSnapShot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BreakoutSnapShot::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BreakoutSnapShot& BreakoutSnapShot::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

BreakoutSnapShot* BreakoutSnapShot::New(::google::protobuf::Arena* arena) const {
  BreakoutSnapShot* n = new BreakoutSnapShot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BreakoutSnapShot::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BreakoutSnapShot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ball_list_.Clear();
  physical_object_list_.Clear();
  action_list_.Clear();
  spawn_point_list_.Clear();
  brick_element_reaction_list_.Clear();
  ball_element_reaction_list_.Clear();
  uid_info_list_.Clear();
  dynamic_object_list_.Clear();
  id_index_list_.Clear();
  ::memset(&client_game_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raw_client_game_time_) -
      reinterpret_cast<char*>(&client_game_time_)) + sizeof(raw_client_game_time_));
  _internal_metadata_.Clear();
}

bool BreakoutSnapShot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BreakoutSnapShot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 client_game_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 server_game_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.BreakoutPhysicalObject ball_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ball_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.BreakoutPhysicalObject physical_object_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_physical_object_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.BreakoutAction action_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_action_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wave_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wave_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_finish = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_finish_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 score = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 combo = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_combo = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_combo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 life_count = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &life_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wave_suite_index = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wave_suite_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.BreakoutSpawnPoint spawn_point_list = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spawn_point_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 remaining_boss_hp = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaining_boss_hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.BreakoutElementReactionCounter brick_element_reaction_list = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_brick_element_reaction_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.BreakoutElementReactionCounter ball_element_reaction_list = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ball_element_reaction_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.BreakoutSyncConnectUidInfo uid_info_list = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uid_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.BreakoutPhysicalObject dynamic_object_list = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dynamic_object_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 id_index_list = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id_index_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 154u, input, this->mutable_id_index_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 raw_client_game_time = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raw_client_game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BreakoutSnapShot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BreakoutSnapShot)
  return false;
#undef DO_
}

void BreakoutSnapShot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BreakoutSnapShot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 client_game_time = 1;
  if (this->client_game_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->client_game_time(), output);
  }

  // uint64 server_game_time = 2;
  if (this->server_game_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->server_game_time(), output);
  }

  // repeated .proto.BreakoutPhysicalObject ball_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ball_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ball_list(static_cast<int>(i)), output);
  }

  // repeated .proto.BreakoutPhysicalObject physical_object_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->physical_object_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->physical_object_list(static_cast<int>(i)), output);
  }

  // repeated .proto.BreakoutAction action_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->action_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->action_list(static_cast<int>(i)), output);
  }

  // uint32 wave_index = 6;
  if (this->wave_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->wave_index(), output);
  }

  // bool is_finish = 7;
  if (this->is_finish() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_finish(), output);
  }

  // uint32 score = 8;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->score(), output);
  }

  // uint32 combo = 9;
  if (this->combo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->combo(), output);
  }

  // uint32 max_combo = 10;
  if (this->max_combo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->max_combo(), output);
  }

  // uint32 life_count = 11;
  if (this->life_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->life_count(), output);
  }

  // uint32 wave_suite_index = 12;
  if (this->wave_suite_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->wave_suite_index(), output);
  }

  // repeated .proto.BreakoutSpawnPoint spawn_point_list = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spawn_point_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->spawn_point_list(static_cast<int>(i)), output);
  }

  // uint32 remaining_boss_hp = 14;
  if (this->remaining_boss_hp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->remaining_boss_hp(), output);
  }

  // repeated .proto.BreakoutElementReactionCounter brick_element_reaction_list = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->brick_element_reaction_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->brick_element_reaction_list(static_cast<int>(i)), output);
  }

  // repeated .proto.BreakoutElementReactionCounter ball_element_reaction_list = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ball_element_reaction_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->ball_element_reaction_list(static_cast<int>(i)), output);
  }

  // repeated .proto.BreakoutSyncConnectUidInfo uid_info_list = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uid_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->uid_info_list(static_cast<int>(i)), output);
  }

  // repeated .proto.BreakoutPhysicalObject dynamic_object_list = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dynamic_object_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->dynamic_object_list(static_cast<int>(i)), output);
  }

  // repeated uint32 id_index_list = 19;
  if (this->id_index_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(19, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _id_index_list_cached_byte_size_));
  }
  for (int i = 0, n = this->id_index_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->id_index_list(i), output);
  }

  // int32 raw_client_game_time = 20;
  if (this->raw_client_game_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->raw_client_game_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BreakoutSnapShot)
}

::google::protobuf::uint8* BreakoutSnapShot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BreakoutSnapShot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 client_game_time = 1;
  if (this->client_game_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->client_game_time(), target);
  }

  // uint64 server_game_time = 2;
  if (this->server_game_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->server_game_time(), target);
  }

  // repeated .proto.BreakoutPhysicalObject ball_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ball_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->ball_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.BreakoutPhysicalObject physical_object_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->physical_object_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->physical_object_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.BreakoutAction action_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->action_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->action_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 wave_index = 6;
  if (this->wave_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->wave_index(), target);
  }

  // bool is_finish = 7;
  if (this->is_finish() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_finish(), target);
  }

  // uint32 score = 8;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->score(), target);
  }

  // uint32 combo = 9;
  if (this->combo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->combo(), target);
  }

  // uint32 max_combo = 10;
  if (this->max_combo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->max_combo(), target);
  }

  // uint32 life_count = 11;
  if (this->life_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->life_count(), target);
  }

  // uint32 wave_suite_index = 12;
  if (this->wave_suite_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->wave_suite_index(), target);
  }

  // repeated .proto.BreakoutSpawnPoint spawn_point_list = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spawn_point_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->spawn_point_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 remaining_boss_hp = 14;
  if (this->remaining_boss_hp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->remaining_boss_hp(), target);
  }

  // repeated .proto.BreakoutElementReactionCounter brick_element_reaction_list = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->brick_element_reaction_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->brick_element_reaction_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.BreakoutElementReactionCounter ball_element_reaction_list = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ball_element_reaction_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, this->ball_element_reaction_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.BreakoutSyncConnectUidInfo uid_info_list = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uid_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, this->uid_info_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.BreakoutPhysicalObject dynamic_object_list = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dynamic_object_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->dynamic_object_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 id_index_list = 19;
  if (this->id_index_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      19,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _id_index_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->id_index_list_, target);
  }

  // int32 raw_client_game_time = 20;
  if (this->raw_client_game_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->raw_client_game_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BreakoutSnapShot)
  return target;
}

size_t BreakoutSnapShot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BreakoutSnapShot)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.BreakoutPhysicalObject ball_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->ball_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ball_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.BreakoutPhysicalObject physical_object_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->physical_object_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->physical_object_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.BreakoutAction action_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->action_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->action_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.BreakoutSpawnPoint spawn_point_list = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->spawn_point_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spawn_point_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.BreakoutElementReactionCounter brick_element_reaction_list = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->brick_element_reaction_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->brick_element_reaction_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.BreakoutElementReactionCounter ball_element_reaction_list = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->ball_element_reaction_list_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ball_element_reaction_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.BreakoutSyncConnectUidInfo uid_info_list = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->uid_info_list_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uid_info_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.BreakoutPhysicalObject dynamic_object_list = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->dynamic_object_list_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dynamic_object_list(static_cast<int>(i)));
    }
  }

  // repeated uint32 id_index_list = 19;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->id_index_list_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _id_index_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint64 client_game_time = 1;
  if (this->client_game_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->client_game_time());
  }

  // uint64 server_game_time = 2;
  if (this->server_game_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->server_game_time());
  }

  // uint32 wave_index = 6;
  if (this->wave_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wave_index());
  }

  // bool is_finish = 7;
  if (this->is_finish() != 0) {
    total_size += 1 + 1;
  }

  // uint32 score = 8;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  // uint32 combo = 9;
  if (this->combo() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->combo());
  }

  // uint32 max_combo = 10;
  if (this->max_combo() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_combo());
  }

  // uint32 life_count = 11;
  if (this->life_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->life_count());
  }

  // uint32 wave_suite_index = 12;
  if (this->wave_suite_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wave_suite_index());
  }

  // uint32 remaining_boss_hp = 14;
  if (this->remaining_boss_hp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remaining_boss_hp());
  }

  // int32 raw_client_game_time = 20;
  if (this->raw_client_game_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->raw_client_game_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BreakoutSnapShot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BreakoutSnapShot)
  GOOGLE_DCHECK_NE(&from, this);
  const BreakoutSnapShot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BreakoutSnapShot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BreakoutSnapShot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BreakoutSnapShot)
    MergeFrom(*source);
  }
}

void BreakoutSnapShot::MergeFrom(const BreakoutSnapShot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BreakoutSnapShot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ball_list_.MergeFrom(from.ball_list_);
  physical_object_list_.MergeFrom(from.physical_object_list_);
  action_list_.MergeFrom(from.action_list_);
  spawn_point_list_.MergeFrom(from.spawn_point_list_);
  brick_element_reaction_list_.MergeFrom(from.brick_element_reaction_list_);
  ball_element_reaction_list_.MergeFrom(from.ball_element_reaction_list_);
  uid_info_list_.MergeFrom(from.uid_info_list_);
  dynamic_object_list_.MergeFrom(from.dynamic_object_list_);
  id_index_list_.MergeFrom(from.id_index_list_);
  if (from.client_game_time() != 0) {
    set_client_game_time(from.client_game_time());
  }
  if (from.server_game_time() != 0) {
    set_server_game_time(from.server_game_time());
  }
  if (from.wave_index() != 0) {
    set_wave_index(from.wave_index());
  }
  if (from.is_finish() != 0) {
    set_is_finish(from.is_finish());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.combo() != 0) {
    set_combo(from.combo());
  }
  if (from.max_combo() != 0) {
    set_max_combo(from.max_combo());
  }
  if (from.life_count() != 0) {
    set_life_count(from.life_count());
  }
  if (from.wave_suite_index() != 0) {
    set_wave_suite_index(from.wave_suite_index());
  }
  if (from.remaining_boss_hp() != 0) {
    set_remaining_boss_hp(from.remaining_boss_hp());
  }
  if (from.raw_client_game_time() != 0) {
    set_raw_client_game_time(from.raw_client_game_time());
  }
}

void BreakoutSnapShot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BreakoutSnapShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BreakoutSnapShot::CopyFrom(const BreakoutSnapShot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BreakoutSnapShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BreakoutSnapShot::IsInitialized() const {
  return true;
}

void BreakoutSnapShot::Swap(BreakoutSnapShot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BreakoutSnapShot::InternalSwap(BreakoutSnapShot* other) {
  using std::swap;
  ball_list_.InternalSwap(&other->ball_list_);
  physical_object_list_.InternalSwap(&other->physical_object_list_);
  action_list_.InternalSwap(&other->action_list_);
  spawn_point_list_.InternalSwap(&other->spawn_point_list_);
  brick_element_reaction_list_.InternalSwap(&other->brick_element_reaction_list_);
  ball_element_reaction_list_.InternalSwap(&other->ball_element_reaction_list_);
  uid_info_list_.InternalSwap(&other->uid_info_list_);
  dynamic_object_list_.InternalSwap(&other->dynamic_object_list_);
  id_index_list_.InternalSwap(&other->id_index_list_);
  swap(client_game_time_, other->client_game_time_);
  swap(server_game_time_, other->server_game_time_);
  swap(wave_index_, other->wave_index_);
  swap(is_finish_, other->is_finish_);
  swap(score_, other->score_);
  swap(combo_, other->combo_);
  swap(max_combo_, other->max_combo_);
  swap(life_count_, other->life_count_);
  swap(wave_suite_index_, other->wave_suite_index_);
  swap(remaining_boss_hp_, other->remaining_boss_hp_);
  swap(raw_client_game_time_, other->raw_client_game_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BreakoutSnapShot::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BreakoutSnapShot

// uint64 client_game_time = 1;
void BreakoutSnapShot::clear_client_game_time() {
  client_game_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 BreakoutSnapShot::client_game_time() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSnapShot.client_game_time)
  return client_game_time_;
}
void BreakoutSnapShot::set_client_game_time(::google::protobuf::uint64 value) {
  
  client_game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutSnapShot.client_game_time)
}

// uint64 server_game_time = 2;
void BreakoutSnapShot::clear_server_game_time() {
  server_game_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 BreakoutSnapShot::server_game_time() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSnapShot.server_game_time)
  return server_game_time_;
}
void BreakoutSnapShot::set_server_game_time(::google::protobuf::uint64 value) {
  
  server_game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutSnapShot.server_game_time)
}

// repeated .proto.BreakoutPhysicalObject ball_list = 3;
int BreakoutSnapShot::ball_list_size() const {
  return ball_list_.size();
}
void BreakoutSnapShot::clear_ball_list() {
  ball_list_.Clear();
}
const ::proto::BreakoutPhysicalObject& BreakoutSnapShot::ball_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSnapShot.ball_list)
  return ball_list_.Get(index);
}
::proto::BreakoutPhysicalObject* BreakoutSnapShot::mutable_ball_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BreakoutSnapShot.ball_list)
  return ball_list_.Mutable(index);
}
::proto::BreakoutPhysicalObject* BreakoutSnapShot::add_ball_list() {
  // @@protoc_insertion_point(field_add:proto.BreakoutSnapShot.ball_list)
  return ball_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::BreakoutPhysicalObject >*
BreakoutSnapShot::mutable_ball_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BreakoutSnapShot.ball_list)
  return &ball_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::BreakoutPhysicalObject >&
BreakoutSnapShot::ball_list() const {
  // @@protoc_insertion_point(field_list:proto.BreakoutSnapShot.ball_list)
  return ball_list_;
}

// repeated .proto.BreakoutPhysicalObject physical_object_list = 4;
int BreakoutSnapShot::physical_object_list_size() const {
  return physical_object_list_.size();
}
void BreakoutSnapShot::clear_physical_object_list() {
  physical_object_list_.Clear();
}
const ::proto::BreakoutPhysicalObject& BreakoutSnapShot::physical_object_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSnapShot.physical_object_list)
  return physical_object_list_.Get(index);
}
::proto::BreakoutPhysicalObject* BreakoutSnapShot::mutable_physical_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BreakoutSnapShot.physical_object_list)
  return physical_object_list_.Mutable(index);
}
::proto::BreakoutPhysicalObject* BreakoutSnapShot::add_physical_object_list() {
  // @@protoc_insertion_point(field_add:proto.BreakoutSnapShot.physical_object_list)
  return physical_object_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::BreakoutPhysicalObject >*
BreakoutSnapShot::mutable_physical_object_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BreakoutSnapShot.physical_object_list)
  return &physical_object_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::BreakoutPhysicalObject >&
BreakoutSnapShot::physical_object_list() const {
  // @@protoc_insertion_point(field_list:proto.BreakoutSnapShot.physical_object_list)
  return physical_object_list_;
}

// repeated .proto.BreakoutAction action_list = 5;
int BreakoutSnapShot::action_list_size() const {
  return action_list_.size();
}
void BreakoutSnapShot::clear_action_list() {
  action_list_.Clear();
}
const ::proto::BreakoutAction& BreakoutSnapShot::action_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSnapShot.action_list)
  return action_list_.Get(index);
}
::proto::BreakoutAction* BreakoutSnapShot::mutable_action_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BreakoutSnapShot.action_list)
  return action_list_.Mutable(index);
}
::proto::BreakoutAction* BreakoutSnapShot::add_action_list() {
  // @@protoc_insertion_point(field_add:proto.BreakoutSnapShot.action_list)
  return action_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::BreakoutAction >*
BreakoutSnapShot::mutable_action_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BreakoutSnapShot.action_list)
  return &action_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::BreakoutAction >&
BreakoutSnapShot::action_list() const {
  // @@protoc_insertion_point(field_list:proto.BreakoutSnapShot.action_list)
  return action_list_;
}

// uint32 wave_index = 6;
void BreakoutSnapShot::clear_wave_index() {
  wave_index_ = 0u;
}
::google::protobuf::uint32 BreakoutSnapShot::wave_index() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSnapShot.wave_index)
  return wave_index_;
}
void BreakoutSnapShot::set_wave_index(::google::protobuf::uint32 value) {
  
  wave_index_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutSnapShot.wave_index)
}

// bool is_finish = 7;
void BreakoutSnapShot::clear_is_finish() {
  is_finish_ = false;
}
bool BreakoutSnapShot::is_finish() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSnapShot.is_finish)
  return is_finish_;
}
void BreakoutSnapShot::set_is_finish(bool value) {
  
  is_finish_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutSnapShot.is_finish)
}

// uint32 score = 8;
void BreakoutSnapShot::clear_score() {
  score_ = 0u;
}
::google::protobuf::uint32 BreakoutSnapShot::score() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSnapShot.score)
  return score_;
}
void BreakoutSnapShot::set_score(::google::protobuf::uint32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutSnapShot.score)
}

// uint32 combo = 9;
void BreakoutSnapShot::clear_combo() {
  combo_ = 0u;
}
::google::protobuf::uint32 BreakoutSnapShot::combo() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSnapShot.combo)
  return combo_;
}
void BreakoutSnapShot::set_combo(::google::protobuf::uint32 value) {
  
  combo_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutSnapShot.combo)
}

// uint32 max_combo = 10;
void BreakoutSnapShot::clear_max_combo() {
  max_combo_ = 0u;
}
::google::protobuf::uint32 BreakoutSnapShot::max_combo() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSnapShot.max_combo)
  return max_combo_;
}
void BreakoutSnapShot::set_max_combo(::google::protobuf::uint32 value) {
  
  max_combo_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutSnapShot.max_combo)
}

// uint32 life_count = 11;
void BreakoutSnapShot::clear_life_count() {
  life_count_ = 0u;
}
::google::protobuf::uint32 BreakoutSnapShot::life_count() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSnapShot.life_count)
  return life_count_;
}
void BreakoutSnapShot::set_life_count(::google::protobuf::uint32 value) {
  
  life_count_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutSnapShot.life_count)
}

// uint32 wave_suite_index = 12;
void BreakoutSnapShot::clear_wave_suite_index() {
  wave_suite_index_ = 0u;
}
::google::protobuf::uint32 BreakoutSnapShot::wave_suite_index() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSnapShot.wave_suite_index)
  return wave_suite_index_;
}
void BreakoutSnapShot::set_wave_suite_index(::google::protobuf::uint32 value) {
  
  wave_suite_index_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutSnapShot.wave_suite_index)
}

// repeated .proto.BreakoutSpawnPoint spawn_point_list = 13;
int BreakoutSnapShot::spawn_point_list_size() const {
  return spawn_point_list_.size();
}
void BreakoutSnapShot::clear_spawn_point_list() {
  spawn_point_list_.Clear();
}
const ::proto::BreakoutSpawnPoint& BreakoutSnapShot::spawn_point_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSnapShot.spawn_point_list)
  return spawn_point_list_.Get(index);
}
::proto::BreakoutSpawnPoint* BreakoutSnapShot::mutable_spawn_point_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BreakoutSnapShot.spawn_point_list)
  return spawn_point_list_.Mutable(index);
}
::proto::BreakoutSpawnPoint* BreakoutSnapShot::add_spawn_point_list() {
  // @@protoc_insertion_point(field_add:proto.BreakoutSnapShot.spawn_point_list)
  return spawn_point_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::BreakoutSpawnPoint >*
BreakoutSnapShot::mutable_spawn_point_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BreakoutSnapShot.spawn_point_list)
  return &spawn_point_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::BreakoutSpawnPoint >&
BreakoutSnapShot::spawn_point_list() const {
  // @@protoc_insertion_point(field_list:proto.BreakoutSnapShot.spawn_point_list)
  return spawn_point_list_;
}

// uint32 remaining_boss_hp = 14;
void BreakoutSnapShot::clear_remaining_boss_hp() {
  remaining_boss_hp_ = 0u;
}
::google::protobuf::uint32 BreakoutSnapShot::remaining_boss_hp() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSnapShot.remaining_boss_hp)
  return remaining_boss_hp_;
}
void BreakoutSnapShot::set_remaining_boss_hp(::google::protobuf::uint32 value) {
  
  remaining_boss_hp_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutSnapShot.remaining_boss_hp)
}

// repeated .proto.BreakoutElementReactionCounter brick_element_reaction_list = 15;
int BreakoutSnapShot::brick_element_reaction_list_size() const {
  return brick_element_reaction_list_.size();
}
void BreakoutSnapShot::clear_brick_element_reaction_list() {
  brick_element_reaction_list_.Clear();
}
const ::proto::BreakoutElementReactionCounter& BreakoutSnapShot::brick_element_reaction_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSnapShot.brick_element_reaction_list)
  return brick_element_reaction_list_.Get(index);
}
::proto::BreakoutElementReactionCounter* BreakoutSnapShot::mutable_brick_element_reaction_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BreakoutSnapShot.brick_element_reaction_list)
  return brick_element_reaction_list_.Mutable(index);
}
::proto::BreakoutElementReactionCounter* BreakoutSnapShot::add_brick_element_reaction_list() {
  // @@protoc_insertion_point(field_add:proto.BreakoutSnapShot.brick_element_reaction_list)
  return brick_element_reaction_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::BreakoutElementReactionCounter >*
BreakoutSnapShot::mutable_brick_element_reaction_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BreakoutSnapShot.brick_element_reaction_list)
  return &brick_element_reaction_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::BreakoutElementReactionCounter >&
BreakoutSnapShot::brick_element_reaction_list() const {
  // @@protoc_insertion_point(field_list:proto.BreakoutSnapShot.brick_element_reaction_list)
  return brick_element_reaction_list_;
}

// repeated .proto.BreakoutElementReactionCounter ball_element_reaction_list = 16;
int BreakoutSnapShot::ball_element_reaction_list_size() const {
  return ball_element_reaction_list_.size();
}
void BreakoutSnapShot::clear_ball_element_reaction_list() {
  ball_element_reaction_list_.Clear();
}
const ::proto::BreakoutElementReactionCounter& BreakoutSnapShot::ball_element_reaction_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSnapShot.ball_element_reaction_list)
  return ball_element_reaction_list_.Get(index);
}
::proto::BreakoutElementReactionCounter* BreakoutSnapShot::mutable_ball_element_reaction_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BreakoutSnapShot.ball_element_reaction_list)
  return ball_element_reaction_list_.Mutable(index);
}
::proto::BreakoutElementReactionCounter* BreakoutSnapShot::add_ball_element_reaction_list() {
  // @@protoc_insertion_point(field_add:proto.BreakoutSnapShot.ball_element_reaction_list)
  return ball_element_reaction_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::BreakoutElementReactionCounter >*
BreakoutSnapShot::mutable_ball_element_reaction_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BreakoutSnapShot.ball_element_reaction_list)
  return &ball_element_reaction_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::BreakoutElementReactionCounter >&
BreakoutSnapShot::ball_element_reaction_list() const {
  // @@protoc_insertion_point(field_list:proto.BreakoutSnapShot.ball_element_reaction_list)
  return ball_element_reaction_list_;
}

// repeated .proto.BreakoutSyncConnectUidInfo uid_info_list = 17;
int BreakoutSnapShot::uid_info_list_size() const {
  return uid_info_list_.size();
}
void BreakoutSnapShot::clear_uid_info_list() {
  uid_info_list_.Clear();
}
const ::proto::BreakoutSyncConnectUidInfo& BreakoutSnapShot::uid_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSnapShot.uid_info_list)
  return uid_info_list_.Get(index);
}
::proto::BreakoutSyncConnectUidInfo* BreakoutSnapShot::mutable_uid_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BreakoutSnapShot.uid_info_list)
  return uid_info_list_.Mutable(index);
}
::proto::BreakoutSyncConnectUidInfo* BreakoutSnapShot::add_uid_info_list() {
  // @@protoc_insertion_point(field_add:proto.BreakoutSnapShot.uid_info_list)
  return uid_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::BreakoutSyncConnectUidInfo >*
BreakoutSnapShot::mutable_uid_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BreakoutSnapShot.uid_info_list)
  return &uid_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::BreakoutSyncConnectUidInfo >&
BreakoutSnapShot::uid_info_list() const {
  // @@protoc_insertion_point(field_list:proto.BreakoutSnapShot.uid_info_list)
  return uid_info_list_;
}

// repeated .proto.BreakoutPhysicalObject dynamic_object_list = 18;
int BreakoutSnapShot::dynamic_object_list_size() const {
  return dynamic_object_list_.size();
}
void BreakoutSnapShot::clear_dynamic_object_list() {
  dynamic_object_list_.Clear();
}
const ::proto::BreakoutPhysicalObject& BreakoutSnapShot::dynamic_object_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSnapShot.dynamic_object_list)
  return dynamic_object_list_.Get(index);
}
::proto::BreakoutPhysicalObject* BreakoutSnapShot::mutable_dynamic_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BreakoutSnapShot.dynamic_object_list)
  return dynamic_object_list_.Mutable(index);
}
::proto::BreakoutPhysicalObject* BreakoutSnapShot::add_dynamic_object_list() {
  // @@protoc_insertion_point(field_add:proto.BreakoutSnapShot.dynamic_object_list)
  return dynamic_object_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::BreakoutPhysicalObject >*
BreakoutSnapShot::mutable_dynamic_object_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BreakoutSnapShot.dynamic_object_list)
  return &dynamic_object_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::BreakoutPhysicalObject >&
BreakoutSnapShot::dynamic_object_list() const {
  // @@protoc_insertion_point(field_list:proto.BreakoutSnapShot.dynamic_object_list)
  return dynamic_object_list_;
}

// repeated uint32 id_index_list = 19;
int BreakoutSnapShot::id_index_list_size() const {
  return id_index_list_.size();
}
void BreakoutSnapShot::clear_id_index_list() {
  id_index_list_.Clear();
}
::google::protobuf::uint32 BreakoutSnapShot::id_index_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSnapShot.id_index_list)
  return id_index_list_.Get(index);
}
void BreakoutSnapShot::set_id_index_list(int index, ::google::protobuf::uint32 value) {
  id_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BreakoutSnapShot.id_index_list)
}
void BreakoutSnapShot::add_id_index_list(::google::protobuf::uint32 value) {
  id_index_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BreakoutSnapShot.id_index_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BreakoutSnapShot::id_index_list() const {
  // @@protoc_insertion_point(field_list:proto.BreakoutSnapShot.id_index_list)
  return id_index_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BreakoutSnapShot::mutable_id_index_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BreakoutSnapShot.id_index_list)
  return &id_index_list_;
}

// int32 raw_client_game_time = 20;
void BreakoutSnapShot::clear_raw_client_game_time() {
  raw_client_game_time_ = 0;
}
::google::protobuf::int32 BreakoutSnapShot::raw_client_game_time() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutSnapShot.raw_client_game_time)
  return raw_client_game_time_;
}
void BreakoutSnapShot::set_raw_client_game_time(::google::protobuf::int32 value) {
  
  raw_client_game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutSnapShot.raw_client_game_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BreakoutAction::kActionTypeFieldNumber;
const int BreakoutAction::kClientGameTimeFieldNumber;
const int BreakoutAction::kServerGameTimeFieldNumber;
const int BreakoutAction::kIsFailedFieldNumber;
const int BreakoutAction::kPreIndexFieldNumber;
const int BreakoutAction::kNewIndexFieldNumber;
const int BreakoutAction::kPosFieldNumber;
const int BreakoutAction::kMoveDirFieldNumber;
const int BreakoutAction::kSpeedFieldNumber;
const int BreakoutAction::kPeerIdFieldNumber;
const int BreakoutAction::kElementTypeFieldNumber;
const int BreakoutAction::kElementReactionBuffFieldNumber;
const int BreakoutAction::kSpeedIncreaseCountFieldNumber;
const int BreakoutAction::kHasExtraBallFieldNumber;
const int BreakoutAction::kExtraBallDirFieldNumber;
const int BreakoutAction::kExtraBallIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BreakoutAction::BreakoutAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BreakoutAction)
}
BreakoutAction::BreakoutAction(const BreakoutAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::proto::BreakoutVector2(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_move_dir()) {
    move_dir_ = new ::proto::BreakoutVector2(*from.move_dir_);
  } else {
    move_dir_ = NULL;
  }
  if (from.has_extra_ball_dir()) {
    extra_ball_dir_ = new ::proto::BreakoutVector2(*from.extra_ball_dir_);
  } else {
    extra_ball_dir_ = NULL;
  }
  ::memcpy(&client_game_time_, &from.client_game_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&extra_ball_index_) -
    reinterpret_cast<char*>(&client_game_time_)) + sizeof(extra_ball_index_));
  // @@protoc_insertion_point(copy_constructor:proto.BreakoutAction)
}

void BreakoutAction::SharedCtor() {
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extra_ball_index_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(extra_ball_index_));
  _cached_size_ = 0;
}

BreakoutAction::~BreakoutAction() {
  // @@protoc_insertion_point(destructor:proto.BreakoutAction)
  SharedDtor();
}

void BreakoutAction::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete move_dir_;
  if (this != internal_default_instance()) delete extra_ball_dir_;
}

void BreakoutAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BreakoutAction::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BreakoutAction& BreakoutAction::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

BreakoutAction* BreakoutAction::New(::google::protobuf::Arena* arena) const {
  BreakoutAction* n = new BreakoutAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BreakoutAction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BreakoutAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && move_dir_ != NULL) {
    delete move_dir_;
  }
  move_dir_ = NULL;
  if (GetArenaNoVirtual() == NULL && extra_ball_dir_ != NULL) {
    delete extra_ball_dir_;
  }
  extra_ball_dir_ = NULL;
  ::memset(&client_game_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extra_ball_index_) -
      reinterpret_cast<char*>(&client_game_time_)) + sizeof(extra_ball_index_));
  _internal_metadata_.Clear();
}

bool BreakoutAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BreakoutAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.BreakoutAction.BreakoutActionType action_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action_type(static_cast< ::proto::BreakoutAction_BreakoutActionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 client_game_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 server_game_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_failed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_failed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pre_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 new_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.BreakoutVector2 pos = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.BreakoutVector2 move_dir = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_move_dir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 speed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peer_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 element_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &element_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 element_reaction_buff = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &element_reaction_buff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 speed_increase_count = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_increase_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_extra_ball = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_extra_ball_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.BreakoutVector2 extra_ball_dir = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extra_ball_dir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 extra_ball_index = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extra_ball_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BreakoutAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BreakoutAction)
  return false;
#undef DO_
}

void BreakoutAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BreakoutAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.BreakoutAction.BreakoutActionType action_type = 1;
  if (this->action_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action_type(), output);
  }

  // uint64 client_game_time = 2;
  if (this->client_game_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->client_game_time(), output);
  }

  // uint64 server_game_time = 3;
  if (this->server_game_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->server_game_time(), output);
  }

  // bool is_failed = 4;
  if (this->is_failed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_failed(), output);
  }

  // uint32 pre_index = 5;
  if (this->pre_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pre_index(), output);
  }

  // uint32 new_index = 6;
  if (this->new_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->new_index(), output);
  }

  // .proto.BreakoutVector2 pos = 7;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->pos_, output);
  }

  // .proto.BreakoutVector2 move_dir = 8;
  if (this->has_move_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->move_dir_, output);
  }

  // int32 speed = 9;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->speed(), output);
  }

  // uint32 peer_id = 10;
  if (this->peer_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->peer_id(), output);
  }

  // uint32 element_type = 11;
  if (this->element_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->element_type(), output);
  }

  // uint32 element_reaction_buff = 12;
  if (this->element_reaction_buff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->element_reaction_buff(), output);
  }

  // uint32 speed_increase_count = 13;
  if (this->speed_increase_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->speed_increase_count(), output);
  }

  // bool has_extra_ball = 14;
  if (this->has_extra_ball() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->has_extra_ball(), output);
  }

  // .proto.BreakoutVector2 extra_ball_dir = 15;
  if (this->has_extra_ball_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->extra_ball_dir_, output);
  }

  // uint32 extra_ball_index = 16;
  if (this->extra_ball_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->extra_ball_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BreakoutAction)
}

::google::protobuf::uint8* BreakoutAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BreakoutAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.BreakoutAction.BreakoutActionType action_type = 1;
  if (this->action_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action_type(), target);
  }

  // uint64 client_game_time = 2;
  if (this->client_game_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->client_game_time(), target);
  }

  // uint64 server_game_time = 3;
  if (this->server_game_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->server_game_time(), target);
  }

  // bool is_failed = 4;
  if (this->is_failed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_failed(), target);
  }

  // uint32 pre_index = 5;
  if (this->pre_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pre_index(), target);
  }

  // uint32 new_index = 6;
  if (this->new_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->new_index(), target);
  }

  // .proto.BreakoutVector2 pos = 7;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->pos_, deterministic, target);
  }

  // .proto.BreakoutVector2 move_dir = 8;
  if (this->has_move_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->move_dir_, deterministic, target);
  }

  // int32 speed = 9;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->speed(), target);
  }

  // uint32 peer_id = 10;
  if (this->peer_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->peer_id(), target);
  }

  // uint32 element_type = 11;
  if (this->element_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->element_type(), target);
  }

  // uint32 element_reaction_buff = 12;
  if (this->element_reaction_buff() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->element_reaction_buff(), target);
  }

  // uint32 speed_increase_count = 13;
  if (this->speed_increase_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->speed_increase_count(), target);
  }

  // bool has_extra_ball = 14;
  if (this->has_extra_ball() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->has_extra_ball(), target);
  }

  // .proto.BreakoutVector2 extra_ball_dir = 15;
  if (this->has_extra_ball_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->extra_ball_dir_, deterministic, target);
  }

  // uint32 extra_ball_index = 16;
  if (this->extra_ball_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->extra_ball_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BreakoutAction)
  return target;
}

size_t BreakoutAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BreakoutAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.BreakoutVector2 pos = 7;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  // .proto.BreakoutVector2 move_dir = 8;
  if (this->has_move_dir()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->move_dir_);
  }

  // .proto.BreakoutVector2 extra_ball_dir = 15;
  if (this->has_extra_ball_dir()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extra_ball_dir_);
  }

  // uint64 client_game_time = 2;
  if (this->client_game_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->client_game_time());
  }

  // uint64 server_game_time = 3;
  if (this->server_game_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->server_game_time());
  }

  // .proto.BreakoutAction.BreakoutActionType action_type = 1;
  if (this->action_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action_type());
  }

  // uint32 pre_index = 5;
  if (this->pre_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pre_index());
  }

  // uint32 new_index = 6;
  if (this->new_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->new_index());
  }

  // int32 speed = 9;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->speed());
  }

  // bool is_failed = 4;
  if (this->is_failed() != 0) {
    total_size += 1 + 1;
  }

  // bool has_extra_ball = 14;
  if (this->has_extra_ball() != 0) {
    total_size += 1 + 1;
  }

  // uint32 peer_id = 10;
  if (this->peer_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peer_id());
  }

  // uint32 element_type = 11;
  if (this->element_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->element_type());
  }

  // uint32 element_reaction_buff = 12;
  if (this->element_reaction_buff() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->element_reaction_buff());
  }

  // uint32 speed_increase_count = 13;
  if (this->speed_increase_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->speed_increase_count());
  }

  // uint32 extra_ball_index = 16;
  if (this->extra_ball_index() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->extra_ball_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BreakoutAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BreakoutAction)
  GOOGLE_DCHECK_NE(&from, this);
  const BreakoutAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BreakoutAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BreakoutAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BreakoutAction)
    MergeFrom(*source);
  }
}

void BreakoutAction::MergeFrom(const BreakoutAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BreakoutAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    mutable_pos()->::proto::BreakoutVector2::MergeFrom(from.pos());
  }
  if (from.has_move_dir()) {
    mutable_move_dir()->::proto::BreakoutVector2::MergeFrom(from.move_dir());
  }
  if (from.has_extra_ball_dir()) {
    mutable_extra_ball_dir()->::proto::BreakoutVector2::MergeFrom(from.extra_ball_dir());
  }
  if (from.client_game_time() != 0) {
    set_client_game_time(from.client_game_time());
  }
  if (from.server_game_time() != 0) {
    set_server_game_time(from.server_game_time());
  }
  if (from.action_type() != 0) {
    set_action_type(from.action_type());
  }
  if (from.pre_index() != 0) {
    set_pre_index(from.pre_index());
  }
  if (from.new_index() != 0) {
    set_new_index(from.new_index());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.is_failed() != 0) {
    set_is_failed(from.is_failed());
  }
  if (from.has_extra_ball() != 0) {
    set_has_extra_ball(from.has_extra_ball());
  }
  if (from.peer_id() != 0) {
    set_peer_id(from.peer_id());
  }
  if (from.element_type() != 0) {
    set_element_type(from.element_type());
  }
  if (from.element_reaction_buff() != 0) {
    set_element_reaction_buff(from.element_reaction_buff());
  }
  if (from.speed_increase_count() != 0) {
    set_speed_increase_count(from.speed_increase_count());
  }
  if (from.extra_ball_index() != 0) {
    set_extra_ball_index(from.extra_ball_index());
  }
}

void BreakoutAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BreakoutAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BreakoutAction::CopyFrom(const BreakoutAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BreakoutAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BreakoutAction::IsInitialized() const {
  return true;
}

void BreakoutAction::Swap(BreakoutAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BreakoutAction::InternalSwap(BreakoutAction* other) {
  using std::swap;
  swap(pos_, other->pos_);
  swap(move_dir_, other->move_dir_);
  swap(extra_ball_dir_, other->extra_ball_dir_);
  swap(client_game_time_, other->client_game_time_);
  swap(server_game_time_, other->server_game_time_);
  swap(action_type_, other->action_type_);
  swap(pre_index_, other->pre_index_);
  swap(new_index_, other->new_index_);
  swap(speed_, other->speed_);
  swap(is_failed_, other->is_failed_);
  swap(has_extra_ball_, other->has_extra_ball_);
  swap(peer_id_, other->peer_id_);
  swap(element_type_, other->element_type_);
  swap(element_reaction_buff_, other->element_reaction_buff_);
  swap(speed_increase_count_, other->speed_increase_count_);
  swap(extra_ball_index_, other->extra_ball_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BreakoutAction::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BreakoutAction

// .proto.BreakoutAction.BreakoutActionType action_type = 1;
void BreakoutAction::clear_action_type() {
  action_type_ = 0;
}
::proto::BreakoutAction_BreakoutActionType BreakoutAction::action_type() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutAction.action_type)
  return static_cast< ::proto::BreakoutAction_BreakoutActionType >(action_type_);
}
void BreakoutAction::set_action_type(::proto::BreakoutAction_BreakoutActionType value) {
  
  action_type_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutAction.action_type)
}

// uint64 client_game_time = 2;
void BreakoutAction::clear_client_game_time() {
  client_game_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 BreakoutAction::client_game_time() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutAction.client_game_time)
  return client_game_time_;
}
void BreakoutAction::set_client_game_time(::google::protobuf::uint64 value) {
  
  client_game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutAction.client_game_time)
}

// uint64 server_game_time = 3;
void BreakoutAction::clear_server_game_time() {
  server_game_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 BreakoutAction::server_game_time() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutAction.server_game_time)
  return server_game_time_;
}
void BreakoutAction::set_server_game_time(::google::protobuf::uint64 value) {
  
  server_game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutAction.server_game_time)
}

// bool is_failed = 4;
void BreakoutAction::clear_is_failed() {
  is_failed_ = false;
}
bool BreakoutAction::is_failed() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutAction.is_failed)
  return is_failed_;
}
void BreakoutAction::set_is_failed(bool value) {
  
  is_failed_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutAction.is_failed)
}

// uint32 pre_index = 5;
void BreakoutAction::clear_pre_index() {
  pre_index_ = 0u;
}
::google::protobuf::uint32 BreakoutAction::pre_index() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutAction.pre_index)
  return pre_index_;
}
void BreakoutAction::set_pre_index(::google::protobuf::uint32 value) {
  
  pre_index_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutAction.pre_index)
}

// uint32 new_index = 6;
void BreakoutAction::clear_new_index() {
  new_index_ = 0u;
}
::google::protobuf::uint32 BreakoutAction::new_index() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutAction.new_index)
  return new_index_;
}
void BreakoutAction::set_new_index(::google::protobuf::uint32 value) {
  
  new_index_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutAction.new_index)
}

// .proto.BreakoutVector2 pos = 7;
bool BreakoutAction::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
void BreakoutAction::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
const ::proto::BreakoutVector2& BreakoutAction::pos() const {
  const ::proto::BreakoutVector2* p = pos_;
  // @@protoc_insertion_point(field_get:proto.BreakoutAction.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BreakoutVector2*>(
      &::proto::_BreakoutVector2_default_instance_);
}
::proto::BreakoutVector2* BreakoutAction::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::proto::BreakoutVector2;
  }
  // @@protoc_insertion_point(field_mutable:proto.BreakoutAction.pos)
  return pos_;
}
::proto::BreakoutVector2* BreakoutAction::release_pos() {
  // @@protoc_insertion_point(field_release:proto.BreakoutAction.pos)
  
  ::proto::BreakoutVector2* temp = pos_;
  pos_ = NULL;
  return temp;
}
void BreakoutAction::set_allocated_pos(::proto::BreakoutVector2* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BreakoutAction.pos)
}

// .proto.BreakoutVector2 move_dir = 8;
bool BreakoutAction::has_move_dir() const {
  return this != internal_default_instance() && move_dir_ != NULL;
}
void BreakoutAction::clear_move_dir() {
  if (GetArenaNoVirtual() == NULL && move_dir_ != NULL) delete move_dir_;
  move_dir_ = NULL;
}
const ::proto::BreakoutVector2& BreakoutAction::move_dir() const {
  const ::proto::BreakoutVector2* p = move_dir_;
  // @@protoc_insertion_point(field_get:proto.BreakoutAction.move_dir)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BreakoutVector2*>(
      &::proto::_BreakoutVector2_default_instance_);
}
::proto::BreakoutVector2* BreakoutAction::mutable_move_dir() {
  
  if (move_dir_ == NULL) {
    move_dir_ = new ::proto::BreakoutVector2;
  }
  // @@protoc_insertion_point(field_mutable:proto.BreakoutAction.move_dir)
  return move_dir_;
}
::proto::BreakoutVector2* BreakoutAction::release_move_dir() {
  // @@protoc_insertion_point(field_release:proto.BreakoutAction.move_dir)
  
  ::proto::BreakoutVector2* temp = move_dir_;
  move_dir_ = NULL;
  return temp;
}
void BreakoutAction::set_allocated_move_dir(::proto::BreakoutVector2* move_dir) {
  delete move_dir_;
  move_dir_ = move_dir;
  if (move_dir) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BreakoutAction.move_dir)
}

// int32 speed = 9;
void BreakoutAction::clear_speed() {
  speed_ = 0;
}
::google::protobuf::int32 BreakoutAction::speed() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutAction.speed)
  return speed_;
}
void BreakoutAction::set_speed(::google::protobuf::int32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutAction.speed)
}

// uint32 peer_id = 10;
void BreakoutAction::clear_peer_id() {
  peer_id_ = 0u;
}
::google::protobuf::uint32 BreakoutAction::peer_id() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutAction.peer_id)
  return peer_id_;
}
void BreakoutAction::set_peer_id(::google::protobuf::uint32 value) {
  
  peer_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutAction.peer_id)
}

// uint32 element_type = 11;
void BreakoutAction::clear_element_type() {
  element_type_ = 0u;
}
::google::protobuf::uint32 BreakoutAction::element_type() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutAction.element_type)
  return element_type_;
}
void BreakoutAction::set_element_type(::google::protobuf::uint32 value) {
  
  element_type_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutAction.element_type)
}

// uint32 element_reaction_buff = 12;
void BreakoutAction::clear_element_reaction_buff() {
  element_reaction_buff_ = 0u;
}
::google::protobuf::uint32 BreakoutAction::element_reaction_buff() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutAction.element_reaction_buff)
  return element_reaction_buff_;
}
void BreakoutAction::set_element_reaction_buff(::google::protobuf::uint32 value) {
  
  element_reaction_buff_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutAction.element_reaction_buff)
}

// uint32 speed_increase_count = 13;
void BreakoutAction::clear_speed_increase_count() {
  speed_increase_count_ = 0u;
}
::google::protobuf::uint32 BreakoutAction::speed_increase_count() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutAction.speed_increase_count)
  return speed_increase_count_;
}
void BreakoutAction::set_speed_increase_count(::google::protobuf::uint32 value) {
  
  speed_increase_count_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutAction.speed_increase_count)
}

// bool has_extra_ball = 14;
void BreakoutAction::clear_has_extra_ball() {
  has_extra_ball_ = false;
}
bool BreakoutAction::has_extra_ball() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutAction.has_extra_ball)
  return has_extra_ball_;
}
void BreakoutAction::set_has_extra_ball(bool value) {
  
  has_extra_ball_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutAction.has_extra_ball)
}

// .proto.BreakoutVector2 extra_ball_dir = 15;
bool BreakoutAction::has_extra_ball_dir() const {
  return this != internal_default_instance() && extra_ball_dir_ != NULL;
}
void BreakoutAction::clear_extra_ball_dir() {
  if (GetArenaNoVirtual() == NULL && extra_ball_dir_ != NULL) delete extra_ball_dir_;
  extra_ball_dir_ = NULL;
}
const ::proto::BreakoutVector2& BreakoutAction::extra_ball_dir() const {
  const ::proto::BreakoutVector2* p = extra_ball_dir_;
  // @@protoc_insertion_point(field_get:proto.BreakoutAction.extra_ball_dir)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BreakoutVector2*>(
      &::proto::_BreakoutVector2_default_instance_);
}
::proto::BreakoutVector2* BreakoutAction::mutable_extra_ball_dir() {
  
  if (extra_ball_dir_ == NULL) {
    extra_ball_dir_ = new ::proto::BreakoutVector2;
  }
  // @@protoc_insertion_point(field_mutable:proto.BreakoutAction.extra_ball_dir)
  return extra_ball_dir_;
}
::proto::BreakoutVector2* BreakoutAction::release_extra_ball_dir() {
  // @@protoc_insertion_point(field_release:proto.BreakoutAction.extra_ball_dir)
  
  ::proto::BreakoutVector2* temp = extra_ball_dir_;
  extra_ball_dir_ = NULL;
  return temp;
}
void BreakoutAction::set_allocated_extra_ball_dir(::proto::BreakoutVector2* extra_ball_dir) {
  delete extra_ball_dir_;
  extra_ball_dir_ = extra_ball_dir;
  if (extra_ball_dir) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BreakoutAction.extra_ball_dir)
}

// uint32 extra_ball_index = 16;
void BreakoutAction::clear_extra_ball_index() {
  extra_ball_index_ = 0u;
}
::google::protobuf::uint32 BreakoutAction::extra_ball_index() const {
  // @@protoc_insertion_point(field_get:proto.BreakoutAction.extra_ball_index)
  return extra_ball_index_;
}
void BreakoutAction::set_extra_ball_index(::google::protobuf::uint32 value) {
  
  extra_ball_index_ = value;
  // @@protoc_insertion_point(field_set:proto.BreakoutAction.extra_ball_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbilityMixinRecoverInfo::kLocalIdFieldNumber;
const int AbilityMixinRecoverInfo::kDataListFieldNumber;
const int AbilityMixinRecoverInfo::kIsServerbuffModifierFieldNumber;
const int AbilityMixinRecoverInfo::kMassivePropListFieldNumber;
const int AbilityMixinRecoverInfo::kBreakoutSnapShotFieldNumber;
const int AbilityMixinRecoverInfo::kInstancedAbilityIdFieldNumber;
const int AbilityMixinRecoverInfo::kInstancedModifierIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbilityMixinRecoverInfo::AbilityMixinRecoverInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AbilityMixinRecoverInfo)
}
AbilityMixinRecoverInfo::AbilityMixinRecoverInfo(const AbilityMixinRecoverInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_list_(from.data_list_),
      massive_prop_list_(from.massive_prop_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_breakout_snap_shot()) {
    breakout_snap_shot_ = new ::proto::BreakoutSnapShot(*from.breakout_snap_shot_);
  } else {
    breakout_snap_shot_ = NULL;
  }
  ::memcpy(&local_id_, &from.local_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_serverbuff_modifier_) -
    reinterpret_cast<char*>(&local_id_)) + sizeof(is_serverbuff_modifier_));
  clear_has_Source();
  switch (from.Source_case()) {
    case kInstancedAbilityId: {
      set_instanced_ability_id(from.instanced_ability_id());
      break;
    }
    case kInstancedModifierId: {
      set_instanced_modifier_id(from.instanced_modifier_id());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.AbilityMixinRecoverInfo)
}

void AbilityMixinRecoverInfo::SharedCtor() {
  ::memset(&breakout_snap_shot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_serverbuff_modifier_) -
      reinterpret_cast<char*>(&breakout_snap_shot_)) + sizeof(is_serverbuff_modifier_));
  clear_has_Source();
  _cached_size_ = 0;
}

AbilityMixinRecoverInfo::~AbilityMixinRecoverInfo() {
  // @@protoc_insertion_point(destructor:proto.AbilityMixinRecoverInfo)
  SharedDtor();
}

void AbilityMixinRecoverInfo::SharedDtor() {
  if (this != internal_default_instance()) delete breakout_snap_shot_;
  if (has_Source()) {
    clear_Source();
  }
}

void AbilityMixinRecoverInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbilityMixinRecoverInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AbilityMixinRecoverInfo& AbilityMixinRecoverInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

AbilityMixinRecoverInfo* AbilityMixinRecoverInfo::New(::google::protobuf::Arena* arena) const {
  AbilityMixinRecoverInfo* n = new AbilityMixinRecoverInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AbilityMixinRecoverInfo::clear_Source() {
// @@protoc_insertion_point(one_of_clear_start:proto.AbilityMixinRecoverInfo)
  switch (Source_case()) {
    case kInstancedAbilityId: {
      // No need to clear
      break;
    }
    case kInstancedModifierId: {
      // No need to clear
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SOURCE_NOT_SET;
}


void AbilityMixinRecoverInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AbilityMixinRecoverInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_list_.Clear();
  massive_prop_list_.Clear();
  if (GetArenaNoVirtual() == NULL && breakout_snap_shot_ != NULL) {
    delete breakout_snap_shot_;
  }
  breakout_snap_shot_ = NULL;
  ::memset(&local_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_serverbuff_modifier_) -
      reinterpret_cast<char*>(&local_id_)) + sizeof(is_serverbuff_modifier_));
  clear_Source();
  _internal_metadata_.Clear();
}

bool AbilityMixinRecoverInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AbilityMixinRecoverInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 instanced_ability_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_Source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &Source_.instanced_ability_id_)));
          set_has_instanced_ability_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 instanced_modifier_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_Source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &Source_.instanced_modifier_id_)));
          set_has_instanced_modifier_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 local_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 data_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_data_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_data_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_serverbuff_modifier = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_serverbuff_modifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.MassivePropSyncInfo massive_prop_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_massive_prop_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.BreakoutSnapShot breakout_snap_shot = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_breakout_snap_shot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AbilityMixinRecoverInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AbilityMixinRecoverInfo)
  return false;
#undef DO_
}

void AbilityMixinRecoverInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AbilityMixinRecoverInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 instanced_ability_id = 1;
  if (has_instanced_ability_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->instanced_ability_id(), output);
  }

  // uint32 instanced_modifier_id = 2;
  if (has_instanced_modifier_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->instanced_modifier_id(), output);
  }

  // uint32 local_id = 3;
  if (this->local_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->local_id(), output);
  }

  // repeated uint32 data_list = 4;
  if (this->data_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _data_list_cached_byte_size_));
  }
  for (int i = 0, n = this->data_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->data_list(i), output);
  }

  // bool is_serverbuff_modifier = 5;
  if (this->is_serverbuff_modifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_serverbuff_modifier(), output);
  }

  // repeated .proto.MassivePropSyncInfo massive_prop_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->massive_prop_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->massive_prop_list(static_cast<int>(i)), output);
  }

  // .proto.BreakoutSnapShot breakout_snap_shot = 7;
  if (this->has_breakout_snap_shot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->breakout_snap_shot_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AbilityMixinRecoverInfo)
}

::google::protobuf::uint8* AbilityMixinRecoverInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AbilityMixinRecoverInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 instanced_ability_id = 1;
  if (has_instanced_ability_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->instanced_ability_id(), target);
  }

  // uint32 instanced_modifier_id = 2;
  if (has_instanced_modifier_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->instanced_modifier_id(), target);
  }

  // uint32 local_id = 3;
  if (this->local_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->local_id(), target);
  }

  // repeated uint32 data_list = 4;
  if (this->data_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _data_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->data_list_, target);
  }

  // bool is_serverbuff_modifier = 5;
  if (this->is_serverbuff_modifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_serverbuff_modifier(), target);
  }

  // repeated .proto.MassivePropSyncInfo massive_prop_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->massive_prop_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->massive_prop_list(static_cast<int>(i)), deterministic, target);
  }

  // .proto.BreakoutSnapShot breakout_snap_shot = 7;
  if (this->has_breakout_snap_shot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->breakout_snap_shot_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AbilityMixinRecoverInfo)
  return target;
}

size_t AbilityMixinRecoverInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AbilityMixinRecoverInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 data_list = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->data_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto.MassivePropSyncInfo massive_prop_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->massive_prop_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->massive_prop_list(static_cast<int>(i)));
    }
  }

  // .proto.BreakoutSnapShot breakout_snap_shot = 7;
  if (this->has_breakout_snap_shot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->breakout_snap_shot_);
  }

  // uint32 local_id = 3;
  if (this->local_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->local_id());
  }

  // bool is_serverbuff_modifier = 5;
  if (this->is_serverbuff_modifier() != 0) {
    total_size += 1 + 1;
  }

  switch (Source_case()) {
    // uint32 instanced_ability_id = 1;
    case kInstancedAbilityId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instanced_ability_id());
      break;
    }
    // uint32 instanced_modifier_id = 2;
    case kInstancedModifierId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instanced_modifier_id());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbilityMixinRecoverInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AbilityMixinRecoverInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AbilityMixinRecoverInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AbilityMixinRecoverInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AbilityMixinRecoverInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AbilityMixinRecoverInfo)
    MergeFrom(*source);
  }
}

void AbilityMixinRecoverInfo::MergeFrom(const AbilityMixinRecoverInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AbilityMixinRecoverInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_list_.MergeFrom(from.data_list_);
  massive_prop_list_.MergeFrom(from.massive_prop_list_);
  if (from.has_breakout_snap_shot()) {
    mutable_breakout_snap_shot()->::proto::BreakoutSnapShot::MergeFrom(from.breakout_snap_shot());
  }
  if (from.local_id() != 0) {
    set_local_id(from.local_id());
  }
  if (from.is_serverbuff_modifier() != 0) {
    set_is_serverbuff_modifier(from.is_serverbuff_modifier());
  }
  switch (from.Source_case()) {
    case kInstancedAbilityId: {
      set_instanced_ability_id(from.instanced_ability_id());
      break;
    }
    case kInstancedModifierId: {
      set_instanced_modifier_id(from.instanced_modifier_id());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
}

void AbilityMixinRecoverInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AbilityMixinRecoverInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbilityMixinRecoverInfo::CopyFrom(const AbilityMixinRecoverInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AbilityMixinRecoverInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbilityMixinRecoverInfo::IsInitialized() const {
  return true;
}

void AbilityMixinRecoverInfo::Swap(AbilityMixinRecoverInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbilityMixinRecoverInfo::InternalSwap(AbilityMixinRecoverInfo* other) {
  using std::swap;
  data_list_.InternalSwap(&other->data_list_);
  massive_prop_list_.InternalSwap(&other->massive_prop_list_);
  swap(breakout_snap_shot_, other->breakout_snap_shot_);
  swap(local_id_, other->local_id_);
  swap(is_serverbuff_modifier_, other->is_serverbuff_modifier_);
  swap(Source_, other->Source_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AbilityMixinRecoverInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AbilityMixinRecoverInfo

// uint32 local_id = 3;
void AbilityMixinRecoverInfo::clear_local_id() {
  local_id_ = 0u;
}
::google::protobuf::uint32 AbilityMixinRecoverInfo::local_id() const {
  // @@protoc_insertion_point(field_get:proto.AbilityMixinRecoverInfo.local_id)
  return local_id_;
}
void AbilityMixinRecoverInfo::set_local_id(::google::protobuf::uint32 value) {
  
  local_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityMixinRecoverInfo.local_id)
}

// repeated uint32 data_list = 4;
int AbilityMixinRecoverInfo::data_list_size() const {
  return data_list_.size();
}
void AbilityMixinRecoverInfo::clear_data_list() {
  data_list_.Clear();
}
::google::protobuf::uint32 AbilityMixinRecoverInfo::data_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AbilityMixinRecoverInfo.data_list)
  return data_list_.Get(index);
}
void AbilityMixinRecoverInfo::set_data_list(int index, ::google::protobuf::uint32 value) {
  data_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.AbilityMixinRecoverInfo.data_list)
}
void AbilityMixinRecoverInfo::add_data_list(::google::protobuf::uint32 value) {
  data_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.AbilityMixinRecoverInfo.data_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AbilityMixinRecoverInfo::data_list() const {
  // @@protoc_insertion_point(field_list:proto.AbilityMixinRecoverInfo.data_list)
  return data_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AbilityMixinRecoverInfo::mutable_data_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AbilityMixinRecoverInfo.data_list)
  return &data_list_;
}

// bool is_serverbuff_modifier = 5;
void AbilityMixinRecoverInfo::clear_is_serverbuff_modifier() {
  is_serverbuff_modifier_ = false;
}
bool AbilityMixinRecoverInfo::is_serverbuff_modifier() const {
  // @@protoc_insertion_point(field_get:proto.AbilityMixinRecoverInfo.is_serverbuff_modifier)
  return is_serverbuff_modifier_;
}
void AbilityMixinRecoverInfo::set_is_serverbuff_modifier(bool value) {
  
  is_serverbuff_modifier_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityMixinRecoverInfo.is_serverbuff_modifier)
}

// repeated .proto.MassivePropSyncInfo massive_prop_list = 6;
int AbilityMixinRecoverInfo::massive_prop_list_size() const {
  return massive_prop_list_.size();
}
void AbilityMixinRecoverInfo::clear_massive_prop_list() {
  massive_prop_list_.Clear();
}
const ::proto::MassivePropSyncInfo& AbilityMixinRecoverInfo::massive_prop_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AbilityMixinRecoverInfo.massive_prop_list)
  return massive_prop_list_.Get(index);
}
::proto::MassivePropSyncInfo* AbilityMixinRecoverInfo::mutable_massive_prop_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.AbilityMixinRecoverInfo.massive_prop_list)
  return massive_prop_list_.Mutable(index);
}
::proto::MassivePropSyncInfo* AbilityMixinRecoverInfo::add_massive_prop_list() {
  // @@protoc_insertion_point(field_add:proto.AbilityMixinRecoverInfo.massive_prop_list)
  return massive_prop_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::MassivePropSyncInfo >*
AbilityMixinRecoverInfo::mutable_massive_prop_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AbilityMixinRecoverInfo.massive_prop_list)
  return &massive_prop_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::MassivePropSyncInfo >&
AbilityMixinRecoverInfo::massive_prop_list() const {
  // @@protoc_insertion_point(field_list:proto.AbilityMixinRecoverInfo.massive_prop_list)
  return massive_prop_list_;
}

// .proto.BreakoutSnapShot breakout_snap_shot = 7;
bool AbilityMixinRecoverInfo::has_breakout_snap_shot() const {
  return this != internal_default_instance() && breakout_snap_shot_ != NULL;
}
void AbilityMixinRecoverInfo::clear_breakout_snap_shot() {
  if (GetArenaNoVirtual() == NULL && breakout_snap_shot_ != NULL) delete breakout_snap_shot_;
  breakout_snap_shot_ = NULL;
}
const ::proto::BreakoutSnapShot& AbilityMixinRecoverInfo::breakout_snap_shot() const {
  const ::proto::BreakoutSnapShot* p = breakout_snap_shot_;
  // @@protoc_insertion_point(field_get:proto.AbilityMixinRecoverInfo.breakout_snap_shot)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BreakoutSnapShot*>(
      &::proto::_BreakoutSnapShot_default_instance_);
}
::proto::BreakoutSnapShot* AbilityMixinRecoverInfo::mutable_breakout_snap_shot() {
  
  if (breakout_snap_shot_ == NULL) {
    breakout_snap_shot_ = new ::proto::BreakoutSnapShot;
  }
  // @@protoc_insertion_point(field_mutable:proto.AbilityMixinRecoverInfo.breakout_snap_shot)
  return breakout_snap_shot_;
}
::proto::BreakoutSnapShot* AbilityMixinRecoverInfo::release_breakout_snap_shot() {
  // @@protoc_insertion_point(field_release:proto.AbilityMixinRecoverInfo.breakout_snap_shot)
  
  ::proto::BreakoutSnapShot* temp = breakout_snap_shot_;
  breakout_snap_shot_ = NULL;
  return temp;
}
void AbilityMixinRecoverInfo::set_allocated_breakout_snap_shot(::proto::BreakoutSnapShot* breakout_snap_shot) {
  delete breakout_snap_shot_;
  breakout_snap_shot_ = breakout_snap_shot;
  if (breakout_snap_shot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AbilityMixinRecoverInfo.breakout_snap_shot)
}

// uint32 instanced_ability_id = 1;
bool AbilityMixinRecoverInfo::has_instanced_ability_id() const {
  return Source_case() == kInstancedAbilityId;
}
void AbilityMixinRecoverInfo::set_has_instanced_ability_id() {
  _oneof_case_[0] = kInstancedAbilityId;
}
void AbilityMixinRecoverInfo::clear_instanced_ability_id() {
  if (has_instanced_ability_id()) {
    Source_.instanced_ability_id_ = 0u;
    clear_has_Source();
  }
}
::google::protobuf::uint32 AbilityMixinRecoverInfo::instanced_ability_id() const {
  // @@protoc_insertion_point(field_get:proto.AbilityMixinRecoverInfo.instanced_ability_id)
  if (has_instanced_ability_id()) {
    return Source_.instanced_ability_id_;
  }
  return 0u;
}
void AbilityMixinRecoverInfo::set_instanced_ability_id(::google::protobuf::uint32 value) {
  if (!has_instanced_ability_id()) {
    clear_Source();
    set_has_instanced_ability_id();
  }
  Source_.instanced_ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityMixinRecoverInfo.instanced_ability_id)
}

// uint32 instanced_modifier_id = 2;
bool AbilityMixinRecoverInfo::has_instanced_modifier_id() const {
  return Source_case() == kInstancedModifierId;
}
void AbilityMixinRecoverInfo::set_has_instanced_modifier_id() {
  _oneof_case_[0] = kInstancedModifierId;
}
void AbilityMixinRecoverInfo::clear_instanced_modifier_id() {
  if (has_instanced_modifier_id()) {
    Source_.instanced_modifier_id_ = 0u;
    clear_has_Source();
  }
}
::google::protobuf::uint32 AbilityMixinRecoverInfo::instanced_modifier_id() const {
  // @@protoc_insertion_point(field_get:proto.AbilityMixinRecoverInfo.instanced_modifier_id)
  if (has_instanced_modifier_id()) {
    return Source_.instanced_modifier_id_;
  }
  return 0u;
}
void AbilityMixinRecoverInfo::set_instanced_modifier_id(::google::protobuf::uint32 value) {
  if (!has_instanced_modifier_id()) {
    clear_Source();
    set_has_instanced_modifier_id();
  }
  Source_.instanced_modifier_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityMixinRecoverInfo.instanced_modifier_id)
}

bool AbilityMixinRecoverInfo::has_Source() const {
  return Source_case() != SOURCE_NOT_SET;
}
void AbilityMixinRecoverInfo::clear_has_Source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
AbilityMixinRecoverInfo::SourceCase AbilityMixinRecoverInfo::Source_case() const {
  return AbilityMixinRecoverInfo::SourceCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbilitySyncStateInfo::kIsInitedFieldNumber;
const int AbilitySyncStateInfo::kDynamicValueMapFieldNumber;
const int AbilitySyncStateInfo::kAppliedAbilitiesFieldNumber;
const int AbilitySyncStateInfo::kAppliedModifiersFieldNumber;
const int AbilitySyncStateInfo::kMixinRecoverInfosFieldNumber;
const int AbilitySyncStateInfo::kSgvDynamicValueMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbilitySyncStateInfo::AbilitySyncStateInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AbilitySyncStateInfo)
}
AbilitySyncStateInfo::AbilitySyncStateInfo(const AbilitySyncStateInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dynamic_value_map_(from.dynamic_value_map_),
      applied_abilities_(from.applied_abilities_),
      applied_modifiers_(from.applied_modifiers_),
      mixin_recover_infos_(from.mixin_recover_infos_),
      sgv_dynamic_value_map_(from.sgv_dynamic_value_map_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_inited_ = from.is_inited_;
  // @@protoc_insertion_point(copy_constructor:proto.AbilitySyncStateInfo)
}

void AbilitySyncStateInfo::SharedCtor() {
  is_inited_ = false;
  _cached_size_ = 0;
}

AbilitySyncStateInfo::~AbilitySyncStateInfo() {
  // @@protoc_insertion_point(destructor:proto.AbilitySyncStateInfo)
  SharedDtor();
}

void AbilitySyncStateInfo::SharedDtor() {
}

void AbilitySyncStateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbilitySyncStateInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AbilitySyncStateInfo& AbilitySyncStateInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

AbilitySyncStateInfo* AbilitySyncStateInfo::New(::google::protobuf::Arena* arena) const {
  AbilitySyncStateInfo* n = new AbilitySyncStateInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AbilitySyncStateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AbilitySyncStateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dynamic_value_map_.Clear();
  applied_abilities_.Clear();
  applied_modifiers_.Clear();
  mixin_recover_infos_.Clear();
  sgv_dynamic_value_map_.Clear();
  is_inited_ = false;
  _internal_metadata_.Clear();
}

bool AbilitySyncStateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AbilitySyncStateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_inited = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_inited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.AbilityScalarValueEntry dynamic_value_map = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dynamic_value_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.AbilityAppliedAbility applied_abilities = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applied_abilities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.AbilityAppliedModifier applied_modifiers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applied_modifiers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.AbilityMixinRecoverInfo mixin_recover_infos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mixin_recover_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.AbilityScalarValueEntry sgv_dynamic_value_map = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sgv_dynamic_value_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AbilitySyncStateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AbilitySyncStateInfo)
  return false;
#undef DO_
}

void AbilitySyncStateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AbilitySyncStateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_inited = 1;
  if (this->is_inited() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_inited(), output);
  }

  // repeated .proto.AbilityScalarValueEntry dynamic_value_map = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dynamic_value_map_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dynamic_value_map(static_cast<int>(i)), output);
  }

  // repeated .proto.AbilityAppliedAbility applied_abilities = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->applied_abilities_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->applied_abilities(static_cast<int>(i)), output);
  }

  // repeated .proto.AbilityAppliedModifier applied_modifiers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->applied_modifiers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->applied_modifiers(static_cast<int>(i)), output);
  }

  // repeated .proto.AbilityMixinRecoverInfo mixin_recover_infos = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mixin_recover_infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mixin_recover_infos(static_cast<int>(i)), output);
  }

  // repeated .proto.AbilityScalarValueEntry sgv_dynamic_value_map = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sgv_dynamic_value_map_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sgv_dynamic_value_map(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AbilitySyncStateInfo)
}

::google::protobuf::uint8* AbilitySyncStateInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AbilitySyncStateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_inited = 1;
  if (this->is_inited() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_inited(), target);
  }

  // repeated .proto.AbilityScalarValueEntry dynamic_value_map = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dynamic_value_map_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->dynamic_value_map(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.AbilityAppliedAbility applied_abilities = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->applied_abilities_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->applied_abilities(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.AbilityAppliedModifier applied_modifiers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->applied_modifiers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->applied_modifiers(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.AbilityMixinRecoverInfo mixin_recover_infos = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mixin_recover_infos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->mixin_recover_infos(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.AbilityScalarValueEntry sgv_dynamic_value_map = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sgv_dynamic_value_map_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->sgv_dynamic_value_map(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AbilitySyncStateInfo)
  return target;
}

size_t AbilitySyncStateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AbilitySyncStateInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.AbilityScalarValueEntry dynamic_value_map = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->dynamic_value_map_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dynamic_value_map(static_cast<int>(i)));
    }
  }

  // repeated .proto.AbilityAppliedAbility applied_abilities = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->applied_abilities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->applied_abilities(static_cast<int>(i)));
    }
  }

  // repeated .proto.AbilityAppliedModifier applied_modifiers = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->applied_modifiers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->applied_modifiers(static_cast<int>(i)));
    }
  }

  // repeated .proto.AbilityMixinRecoverInfo mixin_recover_infos = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->mixin_recover_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mixin_recover_infos(static_cast<int>(i)));
    }
  }

  // repeated .proto.AbilityScalarValueEntry sgv_dynamic_value_map = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->sgv_dynamic_value_map_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sgv_dynamic_value_map(static_cast<int>(i)));
    }
  }

  // bool is_inited = 1;
  if (this->is_inited() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbilitySyncStateInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AbilitySyncStateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AbilitySyncStateInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AbilitySyncStateInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AbilitySyncStateInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AbilitySyncStateInfo)
    MergeFrom(*source);
  }
}

void AbilitySyncStateInfo::MergeFrom(const AbilitySyncStateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AbilitySyncStateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dynamic_value_map_.MergeFrom(from.dynamic_value_map_);
  applied_abilities_.MergeFrom(from.applied_abilities_);
  applied_modifiers_.MergeFrom(from.applied_modifiers_);
  mixin_recover_infos_.MergeFrom(from.mixin_recover_infos_);
  sgv_dynamic_value_map_.MergeFrom(from.sgv_dynamic_value_map_);
  if (from.is_inited() != 0) {
    set_is_inited(from.is_inited());
  }
}

void AbilitySyncStateInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AbilitySyncStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbilitySyncStateInfo::CopyFrom(const AbilitySyncStateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AbilitySyncStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbilitySyncStateInfo::IsInitialized() const {
  return true;
}

void AbilitySyncStateInfo::Swap(AbilitySyncStateInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbilitySyncStateInfo::InternalSwap(AbilitySyncStateInfo* other) {
  using std::swap;
  dynamic_value_map_.InternalSwap(&other->dynamic_value_map_);
  applied_abilities_.InternalSwap(&other->applied_abilities_);
  applied_modifiers_.InternalSwap(&other->applied_modifiers_);
  mixin_recover_infos_.InternalSwap(&other->mixin_recover_infos_);
  sgv_dynamic_value_map_.InternalSwap(&other->sgv_dynamic_value_map_);
  swap(is_inited_, other->is_inited_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AbilitySyncStateInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AbilitySyncStateInfo

// bool is_inited = 1;
void AbilitySyncStateInfo::clear_is_inited() {
  is_inited_ = false;
}
bool AbilitySyncStateInfo::is_inited() const {
  // @@protoc_insertion_point(field_get:proto.AbilitySyncStateInfo.is_inited)
  return is_inited_;
}
void AbilitySyncStateInfo::set_is_inited(bool value) {
  
  is_inited_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilitySyncStateInfo.is_inited)
}

// repeated .proto.AbilityScalarValueEntry dynamic_value_map = 2;
int AbilitySyncStateInfo::dynamic_value_map_size() const {
  return dynamic_value_map_.size();
}
void AbilitySyncStateInfo::clear_dynamic_value_map() {
  dynamic_value_map_.Clear();
}
const ::proto::AbilityScalarValueEntry& AbilitySyncStateInfo::dynamic_value_map(int index) const {
  // @@protoc_insertion_point(field_get:proto.AbilitySyncStateInfo.dynamic_value_map)
  return dynamic_value_map_.Get(index);
}
::proto::AbilityScalarValueEntry* AbilitySyncStateInfo::mutable_dynamic_value_map(int index) {
  // @@protoc_insertion_point(field_mutable:proto.AbilitySyncStateInfo.dynamic_value_map)
  return dynamic_value_map_.Mutable(index);
}
::proto::AbilityScalarValueEntry* AbilitySyncStateInfo::add_dynamic_value_map() {
  // @@protoc_insertion_point(field_add:proto.AbilitySyncStateInfo.dynamic_value_map)
  return dynamic_value_map_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::AbilityScalarValueEntry >*
AbilitySyncStateInfo::mutable_dynamic_value_map() {
  // @@protoc_insertion_point(field_mutable_list:proto.AbilitySyncStateInfo.dynamic_value_map)
  return &dynamic_value_map_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::AbilityScalarValueEntry >&
AbilitySyncStateInfo::dynamic_value_map() const {
  // @@protoc_insertion_point(field_list:proto.AbilitySyncStateInfo.dynamic_value_map)
  return dynamic_value_map_;
}

// repeated .proto.AbilityAppliedAbility applied_abilities = 3;
int AbilitySyncStateInfo::applied_abilities_size() const {
  return applied_abilities_.size();
}
void AbilitySyncStateInfo::clear_applied_abilities() {
  applied_abilities_.Clear();
}
const ::proto::AbilityAppliedAbility& AbilitySyncStateInfo::applied_abilities(int index) const {
  // @@protoc_insertion_point(field_get:proto.AbilitySyncStateInfo.applied_abilities)
  return applied_abilities_.Get(index);
}
::proto::AbilityAppliedAbility* AbilitySyncStateInfo::mutable_applied_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:proto.AbilitySyncStateInfo.applied_abilities)
  return applied_abilities_.Mutable(index);
}
::proto::AbilityAppliedAbility* AbilitySyncStateInfo::add_applied_abilities() {
  // @@protoc_insertion_point(field_add:proto.AbilitySyncStateInfo.applied_abilities)
  return applied_abilities_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::AbilityAppliedAbility >*
AbilitySyncStateInfo::mutable_applied_abilities() {
  // @@protoc_insertion_point(field_mutable_list:proto.AbilitySyncStateInfo.applied_abilities)
  return &applied_abilities_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::AbilityAppliedAbility >&
AbilitySyncStateInfo::applied_abilities() const {
  // @@protoc_insertion_point(field_list:proto.AbilitySyncStateInfo.applied_abilities)
  return applied_abilities_;
}

// repeated .proto.AbilityAppliedModifier applied_modifiers = 4;
int AbilitySyncStateInfo::applied_modifiers_size() const {
  return applied_modifiers_.size();
}
void AbilitySyncStateInfo::clear_applied_modifiers() {
  applied_modifiers_.Clear();
}
const ::proto::AbilityAppliedModifier& AbilitySyncStateInfo::applied_modifiers(int index) const {
  // @@protoc_insertion_point(field_get:proto.AbilitySyncStateInfo.applied_modifiers)
  return applied_modifiers_.Get(index);
}
::proto::AbilityAppliedModifier* AbilitySyncStateInfo::mutable_applied_modifiers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.AbilitySyncStateInfo.applied_modifiers)
  return applied_modifiers_.Mutable(index);
}
::proto::AbilityAppliedModifier* AbilitySyncStateInfo::add_applied_modifiers() {
  // @@protoc_insertion_point(field_add:proto.AbilitySyncStateInfo.applied_modifiers)
  return applied_modifiers_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::AbilityAppliedModifier >*
AbilitySyncStateInfo::mutable_applied_modifiers() {
  // @@protoc_insertion_point(field_mutable_list:proto.AbilitySyncStateInfo.applied_modifiers)
  return &applied_modifiers_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::AbilityAppliedModifier >&
AbilitySyncStateInfo::applied_modifiers() const {
  // @@protoc_insertion_point(field_list:proto.AbilitySyncStateInfo.applied_modifiers)
  return applied_modifiers_;
}

// repeated .proto.AbilityMixinRecoverInfo mixin_recover_infos = 5;
int AbilitySyncStateInfo::mixin_recover_infos_size() const {
  return mixin_recover_infos_.size();
}
void AbilitySyncStateInfo::clear_mixin_recover_infos() {
  mixin_recover_infos_.Clear();
}
const ::proto::AbilityMixinRecoverInfo& AbilitySyncStateInfo::mixin_recover_infos(int index) const {
  // @@protoc_insertion_point(field_get:proto.AbilitySyncStateInfo.mixin_recover_infos)
  return mixin_recover_infos_.Get(index);
}
::proto::AbilityMixinRecoverInfo* AbilitySyncStateInfo::mutable_mixin_recover_infos(int index) {
  // @@protoc_insertion_point(field_mutable:proto.AbilitySyncStateInfo.mixin_recover_infos)
  return mixin_recover_infos_.Mutable(index);
}
::proto::AbilityMixinRecoverInfo* AbilitySyncStateInfo::add_mixin_recover_infos() {
  // @@protoc_insertion_point(field_add:proto.AbilitySyncStateInfo.mixin_recover_infos)
  return mixin_recover_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::AbilityMixinRecoverInfo >*
AbilitySyncStateInfo::mutable_mixin_recover_infos() {
  // @@protoc_insertion_point(field_mutable_list:proto.AbilitySyncStateInfo.mixin_recover_infos)
  return &mixin_recover_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::AbilityMixinRecoverInfo >&
AbilitySyncStateInfo::mixin_recover_infos() const {
  // @@protoc_insertion_point(field_list:proto.AbilitySyncStateInfo.mixin_recover_infos)
  return mixin_recover_infos_;
}

// repeated .proto.AbilityScalarValueEntry sgv_dynamic_value_map = 6;
int AbilitySyncStateInfo::sgv_dynamic_value_map_size() const {
  return sgv_dynamic_value_map_.size();
}
void AbilitySyncStateInfo::clear_sgv_dynamic_value_map() {
  sgv_dynamic_value_map_.Clear();
}
const ::proto::AbilityScalarValueEntry& AbilitySyncStateInfo::sgv_dynamic_value_map(int index) const {
  // @@protoc_insertion_point(field_get:proto.AbilitySyncStateInfo.sgv_dynamic_value_map)
  return sgv_dynamic_value_map_.Get(index);
}
::proto::AbilityScalarValueEntry* AbilitySyncStateInfo::mutable_sgv_dynamic_value_map(int index) {
  // @@protoc_insertion_point(field_mutable:proto.AbilitySyncStateInfo.sgv_dynamic_value_map)
  return sgv_dynamic_value_map_.Mutable(index);
}
::proto::AbilityScalarValueEntry* AbilitySyncStateInfo::add_sgv_dynamic_value_map() {
  // @@protoc_insertion_point(field_add:proto.AbilitySyncStateInfo.sgv_dynamic_value_map)
  return sgv_dynamic_value_map_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::AbilityScalarValueEntry >*
AbilitySyncStateInfo::mutable_sgv_dynamic_value_map() {
  // @@protoc_insertion_point(field_mutable_list:proto.AbilitySyncStateInfo.sgv_dynamic_value_map)
  return &sgv_dynamic_value_map_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::AbilityScalarValueEntry >&
AbilitySyncStateInfo::sgv_dynamic_value_map() const {
  // @@protoc_insertion_point(field_list:proto.AbilitySyncStateInfo.sgv_dynamic_value_map)
  return sgv_dynamic_value_map_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbilityEmbryo::kAbilityIdFieldNumber;
const int AbilityEmbryo::kAbilityNameHashFieldNumber;
const int AbilityEmbryo::kAbilityOverrideNameHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbilityEmbryo::AbilityEmbryo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AbilityEmbryo)
}
AbilityEmbryo::AbilityEmbryo(const AbilityEmbryo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ability_id_, &from.ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ability_override_name_hash_) -
    reinterpret_cast<char*>(&ability_id_)) + sizeof(ability_override_name_hash_));
  // @@protoc_insertion_point(copy_constructor:proto.AbilityEmbryo)
}

void AbilityEmbryo::SharedCtor() {
  ::memset(&ability_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ability_override_name_hash_) -
      reinterpret_cast<char*>(&ability_id_)) + sizeof(ability_override_name_hash_));
  _cached_size_ = 0;
}

AbilityEmbryo::~AbilityEmbryo() {
  // @@protoc_insertion_point(destructor:proto.AbilityEmbryo)
  SharedDtor();
}

void AbilityEmbryo::SharedDtor() {
}

void AbilityEmbryo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbilityEmbryo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AbilityEmbryo& AbilityEmbryo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

AbilityEmbryo* AbilityEmbryo::New(::google::protobuf::Arena* arena) const {
  AbilityEmbryo* n = new AbilityEmbryo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AbilityEmbryo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AbilityEmbryo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ability_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ability_override_name_hash_) -
      reinterpret_cast<char*>(&ability_id_)) + sizeof(ability_override_name_hash_));
  _internal_metadata_.Clear();
}

bool AbilityEmbryo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AbilityEmbryo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 ability_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 ability_name_hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ability_name_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 ability_override_name_hash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ability_override_name_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AbilityEmbryo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AbilityEmbryo)
  return false;
#undef DO_
}

void AbilityEmbryo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AbilityEmbryo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ability_id = 1;
  if (this->ability_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ability_id(), output);
  }

  // fixed32 ability_name_hash = 2;
  if (this->ability_name_hash() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->ability_name_hash(), output);
  }

  // fixed32 ability_override_name_hash = 3;
  if (this->ability_override_name_hash() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->ability_override_name_hash(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AbilityEmbryo)
}

::google::protobuf::uint8* AbilityEmbryo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AbilityEmbryo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ability_id = 1;
  if (this->ability_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ability_id(), target);
  }

  // fixed32 ability_name_hash = 2;
  if (this->ability_name_hash() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->ability_name_hash(), target);
  }

  // fixed32 ability_override_name_hash = 3;
  if (this->ability_override_name_hash() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->ability_override_name_hash(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AbilityEmbryo)
  return target;
}

size_t AbilityEmbryo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AbilityEmbryo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 ability_id = 1;
  if (this->ability_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ability_id());
  }

  // fixed32 ability_name_hash = 2;
  if (this->ability_name_hash() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 ability_override_name_hash = 3;
  if (this->ability_override_name_hash() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbilityEmbryo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AbilityEmbryo)
  GOOGLE_DCHECK_NE(&from, this);
  const AbilityEmbryo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AbilityEmbryo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AbilityEmbryo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AbilityEmbryo)
    MergeFrom(*source);
  }
}

void AbilityEmbryo::MergeFrom(const AbilityEmbryo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AbilityEmbryo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ability_id() != 0) {
    set_ability_id(from.ability_id());
  }
  if (from.ability_name_hash() != 0) {
    set_ability_name_hash(from.ability_name_hash());
  }
  if (from.ability_override_name_hash() != 0) {
    set_ability_override_name_hash(from.ability_override_name_hash());
  }
}

void AbilityEmbryo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AbilityEmbryo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbilityEmbryo::CopyFrom(const AbilityEmbryo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AbilityEmbryo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbilityEmbryo::IsInitialized() const {
  return true;
}

void AbilityEmbryo::Swap(AbilityEmbryo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbilityEmbryo::InternalSwap(AbilityEmbryo* other) {
  using std::swap;
  swap(ability_id_, other->ability_id_);
  swap(ability_name_hash_, other->ability_name_hash_);
  swap(ability_override_name_hash_, other->ability_override_name_hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AbilityEmbryo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AbilityEmbryo

// uint32 ability_id = 1;
void AbilityEmbryo::clear_ability_id() {
  ability_id_ = 0u;
}
::google::protobuf::uint32 AbilityEmbryo::ability_id() const {
  // @@protoc_insertion_point(field_get:proto.AbilityEmbryo.ability_id)
  return ability_id_;
}
void AbilityEmbryo::set_ability_id(::google::protobuf::uint32 value) {
  
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityEmbryo.ability_id)
}

// fixed32 ability_name_hash = 2;
void AbilityEmbryo::clear_ability_name_hash() {
  ability_name_hash_ = 0u;
}
::google::protobuf::uint32 AbilityEmbryo::ability_name_hash() const {
  // @@protoc_insertion_point(field_get:proto.AbilityEmbryo.ability_name_hash)
  return ability_name_hash_;
}
void AbilityEmbryo::set_ability_name_hash(::google::protobuf::uint32 value) {
  
  ability_name_hash_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityEmbryo.ability_name_hash)
}

// fixed32 ability_override_name_hash = 3;
void AbilityEmbryo::clear_ability_override_name_hash() {
  ability_override_name_hash_ = 0u;
}
::google::protobuf::uint32 AbilityEmbryo::ability_override_name_hash() const {
  // @@protoc_insertion_point(field_get:proto.AbilityEmbryo.ability_override_name_hash)
  return ability_override_name_hash_;
}
void AbilityEmbryo::set_ability_override_name_hash(::google::protobuf::uint32 value) {
  
  ability_override_name_hash_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityEmbryo.ability_override_name_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbilityControlBlock::kAbilityEmbryoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbilityControlBlock::AbilityControlBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AbilityControlBlock)
}
AbilityControlBlock::AbilityControlBlock(const AbilityControlBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ability_embryo_list_(from.ability_embryo_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.AbilityControlBlock)
}

void AbilityControlBlock::SharedCtor() {
  _cached_size_ = 0;
}

AbilityControlBlock::~AbilityControlBlock() {
  // @@protoc_insertion_point(destructor:proto.AbilityControlBlock)
  SharedDtor();
}

void AbilityControlBlock::SharedDtor() {
}

void AbilityControlBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbilityControlBlock::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AbilityControlBlock& AbilityControlBlock::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

AbilityControlBlock* AbilityControlBlock::New(::google::protobuf::Arena* arena) const {
  AbilityControlBlock* n = new AbilityControlBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AbilityControlBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AbilityControlBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ability_embryo_list_.Clear();
  _internal_metadata_.Clear();
}

bool AbilityControlBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AbilityControlBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.AbilityEmbryo ability_embryo_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ability_embryo_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AbilityControlBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AbilityControlBlock)
  return false;
#undef DO_
}

void AbilityControlBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AbilityControlBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.AbilityEmbryo ability_embryo_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ability_embryo_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ability_embryo_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AbilityControlBlock)
}

::google::protobuf::uint8* AbilityControlBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AbilityControlBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.AbilityEmbryo ability_embryo_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ability_embryo_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->ability_embryo_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AbilityControlBlock)
  return target;
}

size_t AbilityControlBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AbilityControlBlock)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.AbilityEmbryo ability_embryo_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->ability_embryo_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ability_embryo_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbilityControlBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AbilityControlBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const AbilityControlBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AbilityControlBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AbilityControlBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AbilityControlBlock)
    MergeFrom(*source);
  }
}

void AbilityControlBlock::MergeFrom(const AbilityControlBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AbilityControlBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ability_embryo_list_.MergeFrom(from.ability_embryo_list_);
}

void AbilityControlBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AbilityControlBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbilityControlBlock::CopyFrom(const AbilityControlBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AbilityControlBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbilityControlBlock::IsInitialized() const {
  return true;
}

void AbilityControlBlock::Swap(AbilityControlBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbilityControlBlock::InternalSwap(AbilityControlBlock* other) {
  using std::swap;
  ability_embryo_list_.InternalSwap(&other->ability_embryo_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AbilityControlBlock::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AbilityControlBlock

// repeated .proto.AbilityEmbryo ability_embryo_list = 1;
int AbilityControlBlock::ability_embryo_list_size() const {
  return ability_embryo_list_.size();
}
void AbilityControlBlock::clear_ability_embryo_list() {
  ability_embryo_list_.Clear();
}
const ::proto::AbilityEmbryo& AbilityControlBlock::ability_embryo_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AbilityControlBlock.ability_embryo_list)
  return ability_embryo_list_.Get(index);
}
::proto::AbilityEmbryo* AbilityControlBlock::mutable_ability_embryo_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.AbilityControlBlock.ability_embryo_list)
  return ability_embryo_list_.Mutable(index);
}
::proto::AbilityEmbryo* AbilityControlBlock::add_ability_embryo_list() {
  // @@protoc_insertion_point(field_add:proto.AbilityControlBlock.ability_embryo_list)
  return ability_embryo_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::AbilityEmbryo >*
AbilityControlBlock::mutable_ability_embryo_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AbilityControlBlock.ability_embryo_list)
  return &ability_embryo_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::AbilityEmbryo >&
AbilityControlBlock::ability_embryo_list() const {
  // @@protoc_insertion_point(field_list:proto.AbilityControlBlock.ability_embryo_list)
  return ability_embryo_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector::kXFieldNumber;
const int Vector::kYFieldNumber;
const int Vector::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector::Vector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Vector)
}
Vector::Vector(const Vector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:proto.Vector)
}

void Vector::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _cached_size_ = 0;
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:proto.Vector)
  SharedDtor();
}

void Vector::SharedDtor() {
}

void Vector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector& Vector::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vector* Vector::New(::google::protobuf::Arena* arena) const {
  Vector* n = new Vector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Vector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool Vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Vector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Vector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Vector)
  return false;
#undef DO_
}

void Vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Vector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Vector)
}

::google::protobuf::uint8* Vector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Vector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Vector)
  return target;
}

size_t Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Vector)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Vector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Vector)
    MergeFrom(*source);
  }
}

void Vector::MergeFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector::CopyFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  return true;
}

void Vector::Swap(Vector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector::InternalSwap(Vector* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector

// float x = 1;
void Vector::clear_x() {
  x_ = 0;
}
float Vector::x() const {
  // @@protoc_insertion_point(field_get:proto.Vector.x)
  return x_;
}
void Vector::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.Vector.x)
}

// float y = 2;
void Vector::clear_y() {
  y_ = 0;
}
float Vector::y() const {
  // @@protoc_insertion_point(field_get:proto.Vector.y)
  return y_;
}
void Vector::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.Vector.y)
}

// float z = 3;
void Vector::clear_z() {
  z_ = 0;
}
float Vector::z() const {
  // @@protoc_insertion_point(field_get:proto.Vector.z)
  return z_;
}
void Vector::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:proto.Vector.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VectorPlane::kXFieldNumber;
const int VectorPlane::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VectorPlane::VectorPlane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.VectorPlane)
}
VectorPlane::VectorPlane(const VectorPlane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:proto.VectorPlane)
}

void VectorPlane::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _cached_size_ = 0;
}

VectorPlane::~VectorPlane() {
  // @@protoc_insertion_point(destructor:proto.VectorPlane)
  SharedDtor();
}

void VectorPlane::SharedDtor() {
}

void VectorPlane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorPlane::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VectorPlane& VectorPlane::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

VectorPlane* VectorPlane::New(::google::protobuf::Arena* arena) const {
  VectorPlane* n = new VectorPlane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VectorPlane::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.VectorPlane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool VectorPlane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.VectorPlane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.VectorPlane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.VectorPlane)
  return false;
#undef DO_
}

void VectorPlane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.VectorPlane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.VectorPlane)
}

::google::protobuf::uint8* VectorPlane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.VectorPlane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.VectorPlane)
  return target;
}

size_t VectorPlane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.VectorPlane)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorPlane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.VectorPlane)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorPlane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VectorPlane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.VectorPlane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.VectorPlane)
    MergeFrom(*source);
  }
}

void VectorPlane::MergeFrom(const VectorPlane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.VectorPlane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void VectorPlane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.VectorPlane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorPlane::CopyFrom(const VectorPlane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.VectorPlane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorPlane::IsInitialized() const {
  return true;
}

void VectorPlane::Swap(VectorPlane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VectorPlane::InternalSwap(VectorPlane* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VectorPlane::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VectorPlane

// float x = 1;
void VectorPlane::clear_x() {
  x_ = 0;
}
float VectorPlane::x() const {
  // @@protoc_insertion_point(field_get:proto.VectorPlane.x)
  return x_;
}
void VectorPlane::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.VectorPlane.x)
}

// float y = 2;
void VectorPlane::clear_y() {
  y_ = 0;
}
float VectorPlane::y() const {
  // @@protoc_insertion_point(field_get:proto.VectorPlane.y)
  return y_;
}
void VectorPlane::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.VectorPlane.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3Int::kXFieldNumber;
const int Vector3Int::kYFieldNumber;
const int Vector3Int::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3Int::Vector3Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Vector3Int)
}
Vector3Int::Vector3Int(const Vector3Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:proto.Vector3Int)
}

void Vector3Int::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _cached_size_ = 0;
}

Vector3Int::~Vector3Int() {
  // @@protoc_insertion_point(destructor:proto.Vector3Int)
  SharedDtor();
}

void Vector3Int::SharedDtor() {
}

void Vector3Int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3Int::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector3Int& Vector3Int::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vector3Int* Vector3Int::New(::google::protobuf::Arena* arena) const {
  Vector3Int* n = new Vector3Int;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3Int::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Vector3Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool Vector3Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Vector3Int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Vector3Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Vector3Int)
  return false;
#undef DO_
}

void Vector3Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Vector3Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // int32 z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Vector3Int)
}

::google::protobuf::uint8* Vector3Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Vector3Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // int32 z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Vector3Int)
  return target;
}

size_t Vector3Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Vector3Int)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // int32 z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Vector3Int)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Vector3Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Vector3Int)
    MergeFrom(*source);
  }
}

void Vector3Int::MergeFrom(const Vector3Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Vector3Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vector3Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Vector3Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3Int::CopyFrom(const Vector3Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Vector3Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3Int::IsInitialized() const {
  return true;
}

void Vector3Int::Swap(Vector3Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3Int::InternalSwap(Vector3Int* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3Int::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3Int

// int32 x = 1;
void Vector3Int::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 Vector3Int::x() const {
  // @@protoc_insertion_point(field_get:proto.Vector3Int.x)
  return x_;
}
void Vector3Int::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.Vector3Int.x)
}

// int32 y = 2;
void Vector3Int::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 Vector3Int::y() const {
  // @@protoc_insertion_point(field_get:proto.Vector3Int.y)
  return y_;
}
void Vector3Int::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.Vector3Int.y)
}

// int32 z = 3;
void Vector3Int::clear_z() {
  z_ = 0;
}
::google::protobuf::int32 Vector3Int::z() const {
  // @@protoc_insertion_point(field_get:proto.Vector3Int.z)
  return z_;
}
void Vector3Int::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:proto.Vector3Int.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityMoveInfo::kEntityIdFieldNumber;
const int EntityMoveInfo::kMotionInfoFieldNumber;
const int EntityMoveInfo::kSceneTimeFieldNumber;
const int EntityMoveInfo::kReliableSeqFieldNumber;
const int EntityMoveInfo::kIsReliableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityMoveInfo::EntityMoveInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.EntityMoveInfo)
}
EntityMoveInfo::EntityMoveInfo(const EntityMoveInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_motion_info()) {
    motion_info_ = new ::proto::MotionInfo(*from.motion_info_);
  } else {
    motion_info_ = NULL;
  }
  ::memcpy(&entity_id_, &from.entity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_reliable_) -
    reinterpret_cast<char*>(&entity_id_)) + sizeof(is_reliable_));
  // @@protoc_insertion_point(copy_constructor:proto.EntityMoveInfo)
}

void EntityMoveInfo::SharedCtor() {
  ::memset(&motion_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_reliable_) -
      reinterpret_cast<char*>(&motion_info_)) + sizeof(is_reliable_));
  _cached_size_ = 0;
}

EntityMoveInfo::~EntityMoveInfo() {
  // @@protoc_insertion_point(destructor:proto.EntityMoveInfo)
  SharedDtor();
}

void EntityMoveInfo::SharedDtor() {
  if (this != internal_default_instance()) delete motion_info_;
}

void EntityMoveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityMoveInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityMoveInfo& EntityMoveInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

EntityMoveInfo* EntityMoveInfo::New(::google::protobuf::Arena* arena) const {
  EntityMoveInfo* n = new EntityMoveInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityMoveInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EntityMoveInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && motion_info_ != NULL) {
    delete motion_info_;
  }
  motion_info_ = NULL;
  ::memset(&entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_reliable_) -
      reinterpret_cast<char*>(&entity_id_)) + sizeof(is_reliable_));
  _internal_metadata_.Clear();
}

bool EntityMoveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.EntityMoveInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 entity_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MotionInfo motion_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motion_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 scene_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 reliable_seq = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reliable_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_reliable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reliable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.EntityMoveInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.EntityMoveInfo)
  return false;
#undef DO_
}

void EntityMoveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.EntityMoveInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entity_id = 1;
  if (this->entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->entity_id(), output);
  }

  // .proto.MotionInfo motion_info = 2;
  if (this->has_motion_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->motion_info_, output);
  }

  // uint32 scene_time = 3;
  if (this->scene_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene_time(), output);
  }

  // uint32 reliable_seq = 4;
  if (this->reliable_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reliable_seq(), output);
  }

  // bool is_reliable = 5;
  if (this->is_reliable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_reliable(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.EntityMoveInfo)
}

::google::protobuf::uint8* EntityMoveInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.EntityMoveInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entity_id = 1;
  if (this->entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->entity_id(), target);
  }

  // .proto.MotionInfo motion_info = 2;
  if (this->has_motion_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->motion_info_, deterministic, target);
  }

  // uint32 scene_time = 3;
  if (this->scene_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene_time(), target);
  }

  // uint32 reliable_seq = 4;
  if (this->reliable_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reliable_seq(), target);
  }

  // bool is_reliable = 5;
  if (this->is_reliable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_reliable(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EntityMoveInfo)
  return target;
}

size_t EntityMoveInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EntityMoveInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.MotionInfo motion_info = 2;
  if (this->has_motion_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->motion_info_);
  }

  // uint32 entity_id = 1;
  if (this->entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->entity_id());
  }

  // uint32 scene_time = 3;
  if (this->scene_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_time());
  }

  // uint32 reliable_seq = 4;
  if (this->reliable_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reliable_seq());
  }

  // bool is_reliable = 5;
  if (this->is_reliable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityMoveInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.EntityMoveInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityMoveInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityMoveInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.EntityMoveInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.EntityMoveInfo)
    MergeFrom(*source);
  }
}

void EntityMoveInfo::MergeFrom(const EntityMoveInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.EntityMoveInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_motion_info()) {
    mutable_motion_info()->::proto::MotionInfo::MergeFrom(from.motion_info());
  }
  if (from.entity_id() != 0) {
    set_entity_id(from.entity_id());
  }
  if (from.scene_time() != 0) {
    set_scene_time(from.scene_time());
  }
  if (from.reliable_seq() != 0) {
    set_reliable_seq(from.reliable_seq());
  }
  if (from.is_reliable() != 0) {
    set_is_reliable(from.is_reliable());
  }
}

void EntityMoveInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.EntityMoveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityMoveInfo::CopyFrom(const EntityMoveInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EntityMoveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityMoveInfo::IsInitialized() const {
  return true;
}

void EntityMoveInfo::Swap(EntityMoveInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityMoveInfo::InternalSwap(EntityMoveInfo* other) {
  using std::swap;
  swap(motion_info_, other->motion_info_);
  swap(entity_id_, other->entity_id_);
  swap(scene_time_, other->scene_time_);
  swap(reliable_seq_, other->reliable_seq_);
  swap(is_reliable_, other->is_reliable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityMoveInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EntityMoveInfo

// uint32 entity_id = 1;
void EntityMoveInfo::clear_entity_id() {
  entity_id_ = 0u;
}
::google::protobuf::uint32 EntityMoveInfo::entity_id() const {
  // @@protoc_insertion_point(field_get:proto.EntityMoveInfo.entity_id)
  return entity_id_;
}
void EntityMoveInfo::set_entity_id(::google::protobuf::uint32 value) {
  
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.EntityMoveInfo.entity_id)
}

// .proto.MotionInfo motion_info = 2;
bool EntityMoveInfo::has_motion_info() const {
  return this != internal_default_instance() && motion_info_ != NULL;
}
void EntityMoveInfo::clear_motion_info() {
  if (GetArenaNoVirtual() == NULL && motion_info_ != NULL) delete motion_info_;
  motion_info_ = NULL;
}
const ::proto::MotionInfo& EntityMoveInfo::motion_info() const {
  const ::proto::MotionInfo* p = motion_info_;
  // @@protoc_insertion_point(field_get:proto.EntityMoveInfo.motion_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::MotionInfo*>(
      &::proto::_MotionInfo_default_instance_);
}
::proto::MotionInfo* EntityMoveInfo::mutable_motion_info() {
  
  if (motion_info_ == NULL) {
    motion_info_ = new ::proto::MotionInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.EntityMoveInfo.motion_info)
  return motion_info_;
}
::proto::MotionInfo* EntityMoveInfo::release_motion_info() {
  // @@protoc_insertion_point(field_release:proto.EntityMoveInfo.motion_info)
  
  ::proto::MotionInfo* temp = motion_info_;
  motion_info_ = NULL;
  return temp;
}
void EntityMoveInfo::set_allocated_motion_info(::proto::MotionInfo* motion_info) {
  delete motion_info_;
  motion_info_ = motion_info;
  if (motion_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.EntityMoveInfo.motion_info)
}

// uint32 scene_time = 3;
void EntityMoveInfo::clear_scene_time() {
  scene_time_ = 0u;
}
::google::protobuf::uint32 EntityMoveInfo::scene_time() const {
  // @@protoc_insertion_point(field_get:proto.EntityMoveInfo.scene_time)
  return scene_time_;
}
void EntityMoveInfo::set_scene_time(::google::protobuf::uint32 value) {
  
  scene_time_ = value;
  // @@protoc_insertion_point(field_set:proto.EntityMoveInfo.scene_time)
}

// uint32 reliable_seq = 4;
void EntityMoveInfo::clear_reliable_seq() {
  reliable_seq_ = 0u;
}
::google::protobuf::uint32 EntityMoveInfo::reliable_seq() const {
  // @@protoc_insertion_point(field_get:proto.EntityMoveInfo.reliable_seq)
  return reliable_seq_;
}
void EntityMoveInfo::set_reliable_seq(::google::protobuf::uint32 value) {
  
  reliable_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.EntityMoveInfo.reliable_seq)
}

// bool is_reliable = 5;
void EntityMoveInfo::clear_is_reliable() {
  is_reliable_ = false;
}
bool EntityMoveInfo::is_reliable() const {
  // @@protoc_insertion_point(field_get:proto.EntityMoveInfo.is_reliable)
  return is_reliable_;
}
void EntityMoveInfo::set_is_reliable(bool value) {
  
  is_reliable_ = value;
  // @@protoc_insertion_point(field_set:proto.EntityMoveInfo.is_reliable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MotionInfo::kPosFieldNumber;
const int MotionInfo::kRotFieldNumber;
const int MotionInfo::kSpeedFieldNumber;
const int MotionInfo::kStateFieldNumber;
const int MotionInfo::kParamsFieldNumber;
const int MotionInfo::kRefPosFieldNumber;
const int MotionInfo::kRefIdFieldNumber;
const int MotionInfo::kSceneTimeFieldNumber;
const int MotionInfo::kIntervalVelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MotionInfo::MotionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MotionInfo)
}
MotionInfo::MotionInfo(const MotionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      params_(from.params_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::proto::Vector(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_rot()) {
    rot_ = new ::proto::Vector(*from.rot_);
  } else {
    rot_ = NULL;
  }
  if (from.has_speed()) {
    speed_ = new ::proto::Vector(*from.speed_);
  } else {
    speed_ = NULL;
  }
  if (from.has_ref_pos()) {
    ref_pos_ = new ::proto::Vector(*from.ref_pos_);
  } else {
    ref_pos_ = NULL;
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&scene_time_) -
    reinterpret_cast<char*>(&state_)) + sizeof(scene_time_));
  // @@protoc_insertion_point(copy_constructor:proto.MotionInfo)
}

void MotionInfo::SharedCtor() {
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_time_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(scene_time_));
  _cached_size_ = 0;
}

MotionInfo::~MotionInfo() {
  // @@protoc_insertion_point(destructor:proto.MotionInfo)
  SharedDtor();
}

void MotionInfo::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete rot_;
  if (this != internal_default_instance()) delete speed_;
  if (this != internal_default_instance()) delete ref_pos_;
}

void MotionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MotionInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MotionInfo& MotionInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

MotionInfo* MotionInfo::New(::google::protobuf::Arena* arena) const {
  MotionInfo* n = new MotionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MotionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MotionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && rot_ != NULL) {
    delete rot_;
  }
  rot_ = NULL;
  if (GetArenaNoVirtual() == NULL && speed_ != NULL) {
    delete speed_;
  }
  speed_ = NULL;
  if (GetArenaNoVirtual() == NULL && ref_pos_ != NULL) {
    delete ref_pos_;
  }
  ref_pos_ = NULL;
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_time_) -
      reinterpret_cast<char*>(&state_)) + sizeof(scene_time_));
  _internal_metadata_.Clear();
}

bool MotionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MotionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.Vector pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector rot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector speed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MotionState state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::proto::MotionState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.Vector params = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector ref_pos = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ref_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ref_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ref_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 scene_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 interval_velocity = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &interval_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MotionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MotionInfo)
  return false;
#undef DO_
}

void MotionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MotionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Vector pos = 1;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pos_, output);
  }

  // .proto.Vector rot = 2;
  if (this->has_rot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rot_, output);
  }

  // .proto.Vector speed = 3;
  if (this->has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->speed_, output);
  }

  // .proto.MotionState state = 4;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // repeated .proto.Vector params = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->params_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->params(static_cast<int>(i)), output);
  }

  // .proto.Vector ref_pos = 6;
  if (this->has_ref_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ref_pos_, output);
  }

  // uint32 ref_id = 7;
  if (this->ref_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ref_id(), output);
  }

  // uint32 scene_time = 8;
  if (this->scene_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->scene_time(), output);
  }

  // uint64 interval_velocity = 9;
  if (this->interval_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->interval_velocity(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MotionInfo)
}

::google::protobuf::uint8* MotionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MotionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Vector pos = 1;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pos_, deterministic, target);
  }

  // .proto.Vector rot = 2;
  if (this->has_rot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->rot_, deterministic, target);
  }

  // .proto.Vector speed = 3;
  if (this->has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->speed_, deterministic, target);
  }

  // .proto.MotionState state = 4;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // repeated .proto.Vector params = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->params_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->params(static_cast<int>(i)), deterministic, target);
  }

  // .proto.Vector ref_pos = 6;
  if (this->has_ref_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->ref_pos_, deterministic, target);
  }

  // uint32 ref_id = 7;
  if (this->ref_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ref_id(), target);
  }

  // uint32 scene_time = 8;
  if (this->scene_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->scene_time(), target);
  }

  // uint64 interval_velocity = 9;
  if (this->interval_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->interval_velocity(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MotionInfo)
  return target;
}

size_t MotionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MotionInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.Vector params = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->params_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params(static_cast<int>(i)));
    }
  }

  // .proto.Vector pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  // .proto.Vector rot = 2;
  if (this->has_rot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rot_);
  }

  // .proto.Vector speed = 3;
  if (this->has_speed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->speed_);
  }

  // .proto.Vector ref_pos = 6;
  if (this->has_ref_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ref_pos_);
  }

  // .proto.MotionState state = 4;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // uint32 ref_id = 7;
  if (this->ref_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ref_id());
  }

  // uint64 interval_velocity = 9;
  if (this->interval_velocity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->interval_velocity());
  }

  // uint32 scene_time = 8;
  if (this->scene_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MotionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MotionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MotionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MotionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MotionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MotionInfo)
    MergeFrom(*source);
  }
}

void MotionInfo::MergeFrom(const MotionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MotionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  if (from.has_pos()) {
    mutable_pos()->::proto::Vector::MergeFrom(from.pos());
  }
  if (from.has_rot()) {
    mutable_rot()->::proto::Vector::MergeFrom(from.rot());
  }
  if (from.has_speed()) {
    mutable_speed()->::proto::Vector::MergeFrom(from.speed());
  }
  if (from.has_ref_pos()) {
    mutable_ref_pos()->::proto::Vector::MergeFrom(from.ref_pos());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.ref_id() != 0) {
    set_ref_id(from.ref_id());
  }
  if (from.interval_velocity() != 0) {
    set_interval_velocity(from.interval_velocity());
  }
  if (from.scene_time() != 0) {
    set_scene_time(from.scene_time());
  }
}

void MotionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MotionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionInfo::CopyFrom(const MotionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MotionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionInfo::IsInitialized() const {
  return true;
}

void MotionInfo::Swap(MotionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MotionInfo::InternalSwap(MotionInfo* other) {
  using std::swap;
  params_.InternalSwap(&other->params_);
  swap(pos_, other->pos_);
  swap(rot_, other->rot_);
  swap(speed_, other->speed_);
  swap(ref_pos_, other->ref_pos_);
  swap(state_, other->state_);
  swap(ref_id_, other->ref_id_);
  swap(interval_velocity_, other->interval_velocity_);
  swap(scene_time_, other->scene_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MotionInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MotionInfo

// .proto.Vector pos = 1;
bool MotionInfo::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
void MotionInfo::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
const ::proto::Vector& MotionInfo::pos() const {
  const ::proto::Vector* p = pos_;
  // @@protoc_insertion_point(field_get:proto.MotionInfo.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* MotionInfo::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.MotionInfo.pos)
  return pos_;
}
::proto::Vector* MotionInfo::release_pos() {
  // @@protoc_insertion_point(field_release:proto.MotionInfo.pos)
  
  ::proto::Vector* temp = pos_;
  pos_ = NULL;
  return temp;
}
void MotionInfo::set_allocated_pos(::proto::Vector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MotionInfo.pos)
}

// .proto.Vector rot = 2;
bool MotionInfo::has_rot() const {
  return this != internal_default_instance() && rot_ != NULL;
}
void MotionInfo::clear_rot() {
  if (GetArenaNoVirtual() == NULL && rot_ != NULL) delete rot_;
  rot_ = NULL;
}
const ::proto::Vector& MotionInfo::rot() const {
  const ::proto::Vector* p = rot_;
  // @@protoc_insertion_point(field_get:proto.MotionInfo.rot)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* MotionInfo::mutable_rot() {
  
  if (rot_ == NULL) {
    rot_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.MotionInfo.rot)
  return rot_;
}
::proto::Vector* MotionInfo::release_rot() {
  // @@protoc_insertion_point(field_release:proto.MotionInfo.rot)
  
  ::proto::Vector* temp = rot_;
  rot_ = NULL;
  return temp;
}
void MotionInfo::set_allocated_rot(::proto::Vector* rot) {
  delete rot_;
  rot_ = rot;
  if (rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MotionInfo.rot)
}

// .proto.Vector speed = 3;
bool MotionInfo::has_speed() const {
  return this != internal_default_instance() && speed_ != NULL;
}
void MotionInfo::clear_speed() {
  if (GetArenaNoVirtual() == NULL && speed_ != NULL) delete speed_;
  speed_ = NULL;
}
const ::proto::Vector& MotionInfo::speed() const {
  const ::proto::Vector* p = speed_;
  // @@protoc_insertion_point(field_get:proto.MotionInfo.speed)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* MotionInfo::mutable_speed() {
  
  if (speed_ == NULL) {
    speed_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.MotionInfo.speed)
  return speed_;
}
::proto::Vector* MotionInfo::release_speed() {
  // @@protoc_insertion_point(field_release:proto.MotionInfo.speed)
  
  ::proto::Vector* temp = speed_;
  speed_ = NULL;
  return temp;
}
void MotionInfo::set_allocated_speed(::proto::Vector* speed) {
  delete speed_;
  speed_ = speed;
  if (speed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MotionInfo.speed)
}

// .proto.MotionState state = 4;
void MotionInfo::clear_state() {
  state_ = 0;
}
::proto::MotionState MotionInfo::state() const {
  // @@protoc_insertion_point(field_get:proto.MotionInfo.state)
  return static_cast< ::proto::MotionState >(state_);
}
void MotionInfo::set_state(::proto::MotionState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.MotionInfo.state)
}

// repeated .proto.Vector params = 5;
int MotionInfo::params_size() const {
  return params_.size();
}
void MotionInfo::clear_params() {
  params_.Clear();
}
const ::proto::Vector& MotionInfo::params(int index) const {
  // @@protoc_insertion_point(field_get:proto.MotionInfo.params)
  return params_.Get(index);
}
::proto::Vector* MotionInfo::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:proto.MotionInfo.params)
  return params_.Mutable(index);
}
::proto::Vector* MotionInfo::add_params() {
  // @@protoc_insertion_point(field_add:proto.MotionInfo.params)
  return params_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::Vector >*
MotionInfo::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:proto.MotionInfo.params)
  return &params_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::Vector >&
MotionInfo::params() const {
  // @@protoc_insertion_point(field_list:proto.MotionInfo.params)
  return params_;
}

// .proto.Vector ref_pos = 6;
bool MotionInfo::has_ref_pos() const {
  return this != internal_default_instance() && ref_pos_ != NULL;
}
void MotionInfo::clear_ref_pos() {
  if (GetArenaNoVirtual() == NULL && ref_pos_ != NULL) delete ref_pos_;
  ref_pos_ = NULL;
}
const ::proto::Vector& MotionInfo::ref_pos() const {
  const ::proto::Vector* p = ref_pos_;
  // @@protoc_insertion_point(field_get:proto.MotionInfo.ref_pos)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* MotionInfo::mutable_ref_pos() {
  
  if (ref_pos_ == NULL) {
    ref_pos_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.MotionInfo.ref_pos)
  return ref_pos_;
}
::proto::Vector* MotionInfo::release_ref_pos() {
  // @@protoc_insertion_point(field_release:proto.MotionInfo.ref_pos)
  
  ::proto::Vector* temp = ref_pos_;
  ref_pos_ = NULL;
  return temp;
}
void MotionInfo::set_allocated_ref_pos(::proto::Vector* ref_pos) {
  delete ref_pos_;
  ref_pos_ = ref_pos;
  if (ref_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MotionInfo.ref_pos)
}

// uint32 ref_id = 7;
void MotionInfo::clear_ref_id() {
  ref_id_ = 0u;
}
::google::protobuf::uint32 MotionInfo::ref_id() const {
  // @@protoc_insertion_point(field_get:proto.MotionInfo.ref_id)
  return ref_id_;
}
void MotionInfo::set_ref_id(::google::protobuf::uint32 value) {
  
  ref_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MotionInfo.ref_id)
}

// uint32 scene_time = 8;
void MotionInfo::clear_scene_time() {
  scene_time_ = 0u;
}
::google::protobuf::uint32 MotionInfo::scene_time() const {
  // @@protoc_insertion_point(field_get:proto.MotionInfo.scene_time)
  return scene_time_;
}
void MotionInfo::set_scene_time(::google::protobuf::uint32 value) {
  
  scene_time_ = value;
  // @@protoc_insertion_point(field_set:proto.MotionInfo.scene_time)
}

// uint64 interval_velocity = 9;
void MotionInfo::clear_interval_velocity() {
  interval_velocity_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MotionInfo::interval_velocity() const {
  // @@protoc_insertion_point(field_get:proto.MotionInfo.interval_velocity)
  return interval_velocity_;
}
void MotionInfo::set_interval_velocity(::google::protobuf::uint64 value) {
  
  interval_velocity_ = value;
  // @@protoc_insertion_point(field_set:proto.MotionInfo.interval_velocity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaceInfo::kPosFieldNumber;
const int PlaceInfo::kRotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaceInfo::PlaceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PlaceInfo)
}
PlaceInfo::PlaceInfo(const PlaceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::proto::Vector(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_rot()) {
    rot_ = new ::proto::Vector(*from.rot_);
  } else {
    rot_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.PlaceInfo)
}

void PlaceInfo::SharedCtor() {
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rot_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(rot_));
  _cached_size_ = 0;
}

PlaceInfo::~PlaceInfo() {
  // @@protoc_insertion_point(destructor:proto.PlaceInfo)
  SharedDtor();
}

void PlaceInfo::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete rot_;
}

void PlaceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlaceInfo& PlaceInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlaceInfo* PlaceInfo::New(::google::protobuf::Arena* arena) const {
  PlaceInfo* n = new PlaceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlaceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PlaceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && rot_ != NULL) {
    delete rot_;
  }
  rot_ = NULL;
  _internal_metadata_.Clear();
}

bool PlaceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PlaceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.Vector pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector rot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PlaceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PlaceInfo)
  return false;
#undef DO_
}

void PlaceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PlaceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Vector pos = 1;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pos_, output);
  }

  // .proto.Vector rot = 2;
  if (this->has_rot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rot_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PlaceInfo)
}

::google::protobuf::uint8* PlaceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PlaceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Vector pos = 1;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pos_, deterministic, target);
  }

  // .proto.Vector rot = 2;
  if (this->has_rot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->rot_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PlaceInfo)
  return target;
}

size_t PlaceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PlaceInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.Vector pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  // .proto.Vector rot = 2;
  if (this->has_rot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rot_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PlaceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlaceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PlaceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PlaceInfo)
    MergeFrom(*source);
  }
}

void PlaceInfo::MergeFrom(const PlaceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PlaceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    mutable_pos()->::proto::Vector::MergeFrom(from.pos());
  }
  if (from.has_rot()) {
    mutable_rot()->::proto::Vector::MergeFrom(from.rot());
  }
}

void PlaceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PlaceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceInfo::CopyFrom(const PlaceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PlaceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceInfo::IsInitialized() const {
  return true;
}

void PlaceInfo::Swap(PlaceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaceInfo::InternalSwap(PlaceInfo* other) {
  using std::swap;
  swap(pos_, other->pos_);
  swap(rot_, other->rot_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlaceInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlaceInfo

// .proto.Vector pos = 1;
bool PlaceInfo::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
void PlaceInfo::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
const ::proto::Vector& PlaceInfo::pos() const {
  const ::proto::Vector* p = pos_;
  // @@protoc_insertion_point(field_get:proto.PlaceInfo.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* PlaceInfo::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.PlaceInfo.pos)
  return pos_;
}
::proto::Vector* PlaceInfo::release_pos() {
  // @@protoc_insertion_point(field_release:proto.PlaceInfo.pos)
  
  ::proto::Vector* temp = pos_;
  pos_ = NULL;
  return temp;
}
void PlaceInfo::set_allocated_pos(::proto::Vector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.PlaceInfo.pos)
}

// .proto.Vector rot = 2;
bool PlaceInfo::has_rot() const {
  return this != internal_default_instance() && rot_ != NULL;
}
void PlaceInfo::clear_rot() {
  if (GetArenaNoVirtual() == NULL && rot_ != NULL) delete rot_;
  rot_ = NULL;
}
const ::proto::Vector& PlaceInfo::rot() const {
  const ::proto::Vector* p = rot_;
  // @@protoc_insertion_point(field_get:proto.PlaceInfo.rot)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* PlaceInfo::mutable_rot() {
  
  if (rot_ == NULL) {
    rot_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.PlaceInfo.rot)
  return rot_;
}
::proto::Vector* PlaceInfo::release_rot() {
  // @@protoc_insertion_point(field_release:proto.PlaceInfo.rot)
  
  ::proto::Vector* temp = rot_;
  rot_ = NULL;
  return temp;
}
void PlaceInfo::set_allocated_rot(::proto::Vector* rot) {
  delete rot_;
  rot_ = rot;
  if (rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.PlaceInfo.rot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

SceneWeaponInfo::SceneWeaponInfo_AffixMapEntry::SceneWeaponInfo_AffixMapEntry() {}
SceneWeaponInfo::SceneWeaponInfo_AffixMapEntry::SceneWeaponInfo_AffixMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata SceneWeaponInfo::SceneWeaponInfo_AffixMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[56];
}
void SceneWeaponInfo::SceneWeaponInfo_AffixMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void SceneWeaponInfo::SceneWeaponInfo_AffixMapEntry::MergeFrom(const SceneWeaponInfo_AffixMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneWeaponInfo::kEntityIdFieldNumber;
const int SceneWeaponInfo::kGadgetIdFieldNumber;
const int SceneWeaponInfo::kItemIdFieldNumber;
const int SceneWeaponInfo::kGuidFieldNumber;
const int SceneWeaponInfo::kLevelFieldNumber;
const int SceneWeaponInfo::kPromoteLevelFieldNumber;
const int SceneWeaponInfo::kAbilityInfoFieldNumber;
const int SceneWeaponInfo::kAffixMapFieldNumber;
const int SceneWeaponInfo::kRendererChangedInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneWeaponInfo::SceneWeaponInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneWeaponInfo)
}
SceneWeaponInfo::SceneWeaponInfo(const SceneWeaponInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  affix_map_.MergeFrom(from.affix_map_);
  if (from.has_ability_info()) {
    ability_info_ = new ::proto::AbilitySyncStateInfo(*from.ability_info_);
  } else {
    ability_info_ = NULL;
  }
  if (from.has_renderer_changed_info()) {
    renderer_changed_info_ = new ::proto::EntityRendererChangedInfo(*from.renderer_changed_info_);
  } else {
    renderer_changed_info_ = NULL;
  }
  ::memcpy(&entity_id_, &from.entity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&promote_level_) -
    reinterpret_cast<char*>(&entity_id_)) + sizeof(promote_level_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneWeaponInfo)
}

void SceneWeaponInfo::SharedCtor() {
  ::memset(&ability_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&promote_level_) -
      reinterpret_cast<char*>(&ability_info_)) + sizeof(promote_level_));
  _cached_size_ = 0;
}

SceneWeaponInfo::~SceneWeaponInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneWeaponInfo)
  SharedDtor();
}

void SceneWeaponInfo::SharedDtor() {
  if (this != internal_default_instance()) delete ability_info_;
  if (this != internal_default_instance()) delete renderer_changed_info_;
}

void SceneWeaponInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneWeaponInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneWeaponInfo& SceneWeaponInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneWeaponInfo* SceneWeaponInfo::New(::google::protobuf::Arena* arena) const {
  SceneWeaponInfo* n = new SceneWeaponInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneWeaponInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneWeaponInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  affix_map_.Clear();
  if (GetArenaNoVirtual() == NULL && ability_info_ != NULL) {
    delete ability_info_;
  }
  ability_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && renderer_changed_info_ != NULL) {
    delete renderer_changed_info_;
  }
  renderer_changed_info_ = NULL;
  ::memset(&entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&promote_level_) -
      reinterpret_cast<char*>(&entity_id_)) + sizeof(promote_level_));
  _internal_metadata_.Clear();
}

bool SceneWeaponInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneWeaponInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 entity_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gadget_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gadget_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 item_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 guid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 promote_level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &promote_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AbilitySyncStateInfo ability_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ability_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> affix_map = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          SceneWeaponInfo_AffixMapEntry::Parser< ::google::protobuf::internal::MapField<
              SceneWeaponInfo_AffixMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&affix_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.EntityRendererChangedInfo renderer_changed_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_renderer_changed_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneWeaponInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneWeaponInfo)
  return false;
#undef DO_
}

void SceneWeaponInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneWeaponInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entity_id = 1;
  if (this->entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->entity_id(), output);
  }

  // uint32 gadget_id = 2;
  if (this->gadget_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gadget_id(), output);
  }

  // uint32 item_id = 3;
  if (this->item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_id(), output);
  }

  // uint64 guid = 4;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->guid(), output);
  }

  // uint32 level = 5;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // uint32 promote_level = 6;
  if (this->promote_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->promote_level(), output);
  }

  // .proto.AbilitySyncStateInfo ability_info = 7;
  if (this->has_ability_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->ability_info_, output);
  }

  // map<uint32, uint32> affix_map = 8;
  if (!this->affix_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->affix_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->affix_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->affix_map().begin();
          it != this->affix_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneWeaponInfo_AffixMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(affix_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneWeaponInfo_AffixMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->affix_map().begin();
          it != this->affix_map().end(); ++it) {
        entry.reset(affix_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
      }
    }
  }

  // .proto.EntityRendererChangedInfo renderer_changed_info = 9;
  if (this->has_renderer_changed_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->renderer_changed_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneWeaponInfo)
}

::google::protobuf::uint8* SceneWeaponInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneWeaponInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entity_id = 1;
  if (this->entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->entity_id(), target);
  }

  // uint32 gadget_id = 2;
  if (this->gadget_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gadget_id(), target);
  }

  // uint32 item_id = 3;
  if (this->item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_id(), target);
  }

  // uint64 guid = 4;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->guid(), target);
  }

  // uint32 level = 5;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // uint32 promote_level = 6;
  if (this->promote_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->promote_level(), target);
  }

  // .proto.AbilitySyncStateInfo ability_info = 7;
  if (this->has_ability_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->ability_info_, deterministic, target);
  }

  // map<uint32, uint32> affix_map = 8;
  if (!this->affix_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->affix_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->affix_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->affix_map().begin();
          it != this->affix_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneWeaponInfo_AffixMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(affix_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneWeaponInfo_AffixMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->affix_map().begin();
          it != this->affix_map().end(); ++it) {
        entry.reset(affix_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
      }
    }
  }

  // .proto.EntityRendererChangedInfo renderer_changed_info = 9;
  if (this->has_renderer_changed_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->renderer_changed_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneWeaponInfo)
  return target;
}

size_t SceneWeaponInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneWeaponInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, uint32> affix_map = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->affix_map_size());
  {
    ::google::protobuf::scoped_ptr<SceneWeaponInfo_AffixMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->affix_map().begin();
        it != this->affix_map().end(); ++it) {
      entry.reset(affix_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .proto.AbilitySyncStateInfo ability_info = 7;
  if (this->has_ability_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ability_info_);
  }

  // .proto.EntityRendererChangedInfo renderer_changed_info = 9;
  if (this->has_renderer_changed_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->renderer_changed_info_);
  }

  // uint32 entity_id = 1;
  if (this->entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->entity_id());
  }

  // uint32 gadget_id = 2;
  if (this->gadget_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gadget_id());
  }

  // uint64 guid = 4;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // uint32 item_id = 3;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_id());
  }

  // uint32 level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // uint32 promote_level = 6;
  if (this->promote_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->promote_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneWeaponInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneWeaponInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneWeaponInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneWeaponInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneWeaponInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneWeaponInfo)
    MergeFrom(*source);
  }
}

void SceneWeaponInfo::MergeFrom(const SceneWeaponInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneWeaponInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  affix_map_.MergeFrom(from.affix_map_);
  if (from.has_ability_info()) {
    mutable_ability_info()->::proto::AbilitySyncStateInfo::MergeFrom(from.ability_info());
  }
  if (from.has_renderer_changed_info()) {
    mutable_renderer_changed_info()->::proto::EntityRendererChangedInfo::MergeFrom(from.renderer_changed_info());
  }
  if (from.entity_id() != 0) {
    set_entity_id(from.entity_id());
  }
  if (from.gadget_id() != 0) {
    set_gadget_id(from.gadget_id());
  }
  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.item_id() != 0) {
    set_item_id(from.item_id());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.promote_level() != 0) {
    set_promote_level(from.promote_level());
  }
}

void SceneWeaponInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneWeaponInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneWeaponInfo::CopyFrom(const SceneWeaponInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneWeaponInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneWeaponInfo::IsInitialized() const {
  return true;
}

void SceneWeaponInfo::Swap(SceneWeaponInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneWeaponInfo::InternalSwap(SceneWeaponInfo* other) {
  using std::swap;
  affix_map_.Swap(&other->affix_map_);
  swap(ability_info_, other->ability_info_);
  swap(renderer_changed_info_, other->renderer_changed_info_);
  swap(entity_id_, other->entity_id_);
  swap(gadget_id_, other->gadget_id_);
  swap(guid_, other->guid_);
  swap(item_id_, other->item_id_);
  swap(level_, other->level_);
  swap(promote_level_, other->promote_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneWeaponInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneWeaponInfo

// uint32 entity_id = 1;
void SceneWeaponInfo::clear_entity_id() {
  entity_id_ = 0u;
}
::google::protobuf::uint32 SceneWeaponInfo::entity_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneWeaponInfo.entity_id)
  return entity_id_;
}
void SceneWeaponInfo::set_entity_id(::google::protobuf::uint32 value) {
  
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneWeaponInfo.entity_id)
}

// uint32 gadget_id = 2;
void SceneWeaponInfo::clear_gadget_id() {
  gadget_id_ = 0u;
}
::google::protobuf::uint32 SceneWeaponInfo::gadget_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneWeaponInfo.gadget_id)
  return gadget_id_;
}
void SceneWeaponInfo::set_gadget_id(::google::protobuf::uint32 value) {
  
  gadget_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneWeaponInfo.gadget_id)
}

// uint32 item_id = 3;
void SceneWeaponInfo::clear_item_id() {
  item_id_ = 0u;
}
::google::protobuf::uint32 SceneWeaponInfo::item_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneWeaponInfo.item_id)
  return item_id_;
}
void SceneWeaponInfo::set_item_id(::google::protobuf::uint32 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneWeaponInfo.item_id)
}

// uint64 guid = 4;
void SceneWeaponInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SceneWeaponInfo::guid() const {
  // @@protoc_insertion_point(field_get:proto.SceneWeaponInfo.guid)
  return guid_;
}
void SceneWeaponInfo::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneWeaponInfo.guid)
}

// uint32 level = 5;
void SceneWeaponInfo::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 SceneWeaponInfo::level() const {
  // @@protoc_insertion_point(field_get:proto.SceneWeaponInfo.level)
  return level_;
}
void SceneWeaponInfo::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneWeaponInfo.level)
}

// uint32 promote_level = 6;
void SceneWeaponInfo::clear_promote_level() {
  promote_level_ = 0u;
}
::google::protobuf::uint32 SceneWeaponInfo::promote_level() const {
  // @@protoc_insertion_point(field_get:proto.SceneWeaponInfo.promote_level)
  return promote_level_;
}
void SceneWeaponInfo::set_promote_level(::google::protobuf::uint32 value) {
  
  promote_level_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneWeaponInfo.promote_level)
}

// .proto.AbilitySyncStateInfo ability_info = 7;
bool SceneWeaponInfo::has_ability_info() const {
  return this != internal_default_instance() && ability_info_ != NULL;
}
void SceneWeaponInfo::clear_ability_info() {
  if (GetArenaNoVirtual() == NULL && ability_info_ != NULL) delete ability_info_;
  ability_info_ = NULL;
}
const ::proto::AbilitySyncStateInfo& SceneWeaponInfo::ability_info() const {
  const ::proto::AbilitySyncStateInfo* p = ability_info_;
  // @@protoc_insertion_point(field_get:proto.SceneWeaponInfo.ability_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::AbilitySyncStateInfo*>(
      &::proto::_AbilitySyncStateInfo_default_instance_);
}
::proto::AbilitySyncStateInfo* SceneWeaponInfo::mutable_ability_info() {
  
  if (ability_info_ == NULL) {
    ability_info_ = new ::proto::AbilitySyncStateInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneWeaponInfo.ability_info)
  return ability_info_;
}
::proto::AbilitySyncStateInfo* SceneWeaponInfo::release_ability_info() {
  // @@protoc_insertion_point(field_release:proto.SceneWeaponInfo.ability_info)
  
  ::proto::AbilitySyncStateInfo* temp = ability_info_;
  ability_info_ = NULL;
  return temp;
}
void SceneWeaponInfo::set_allocated_ability_info(::proto::AbilitySyncStateInfo* ability_info) {
  delete ability_info_;
  ability_info_ = ability_info;
  if (ability_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneWeaponInfo.ability_info)
}

// map<uint32, uint32> affix_map = 8;
int SceneWeaponInfo::affix_map_size() const {
  return affix_map_.size();
}
void SceneWeaponInfo::clear_affix_map() {
  affix_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
SceneWeaponInfo::affix_map() const {
  // @@protoc_insertion_point(field_map:proto.SceneWeaponInfo.affix_map)
  return affix_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
SceneWeaponInfo::mutable_affix_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.SceneWeaponInfo.affix_map)
  return affix_map_.MutableMap();
}

// .proto.EntityRendererChangedInfo renderer_changed_info = 9;
bool SceneWeaponInfo::has_renderer_changed_info() const {
  return this != internal_default_instance() && renderer_changed_info_ != NULL;
}
void SceneWeaponInfo::clear_renderer_changed_info() {
  if (GetArenaNoVirtual() == NULL && renderer_changed_info_ != NULL) delete renderer_changed_info_;
  renderer_changed_info_ = NULL;
}
const ::proto::EntityRendererChangedInfo& SceneWeaponInfo::renderer_changed_info() const {
  const ::proto::EntityRendererChangedInfo* p = renderer_changed_info_;
  // @@protoc_insertion_point(field_get:proto.SceneWeaponInfo.renderer_changed_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::EntityRendererChangedInfo*>(
      &::proto::_EntityRendererChangedInfo_default_instance_);
}
::proto::EntityRendererChangedInfo* SceneWeaponInfo::mutable_renderer_changed_info() {
  
  if (renderer_changed_info_ == NULL) {
    renderer_changed_info_ = new ::proto::EntityRendererChangedInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneWeaponInfo.renderer_changed_info)
  return renderer_changed_info_;
}
::proto::EntityRendererChangedInfo* SceneWeaponInfo::release_renderer_changed_info() {
  // @@protoc_insertion_point(field_release:proto.SceneWeaponInfo.renderer_changed_info)
  
  ::proto::EntityRendererChangedInfo* temp = renderer_changed_info_;
  renderer_changed_info_ = NULL;
  return temp;
}
void SceneWeaponInfo::set_allocated_renderer_changed_info(::proto::EntityRendererChangedInfo* renderer_changed_info) {
  delete renderer_changed_info_;
  renderer_changed_info_ = renderer_changed_info;
  if (renderer_changed_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneWeaponInfo.renderer_changed_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneReliquaryInfo::kItemIdFieldNumber;
const int SceneReliquaryInfo::kGuidFieldNumber;
const int SceneReliquaryInfo::kLevelFieldNumber;
const int SceneReliquaryInfo::kPromoteLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneReliquaryInfo::SceneReliquaryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneReliquaryInfo)
}
SceneReliquaryInfo::SceneReliquaryInfo(const SceneReliquaryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&promote_level_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(promote_level_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneReliquaryInfo)
}

void SceneReliquaryInfo::SharedCtor() {
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&promote_level_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(promote_level_));
  _cached_size_ = 0;
}

SceneReliquaryInfo::~SceneReliquaryInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneReliquaryInfo)
  SharedDtor();
}

void SceneReliquaryInfo::SharedDtor() {
}

void SceneReliquaryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneReliquaryInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneReliquaryInfo& SceneReliquaryInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneReliquaryInfo* SceneReliquaryInfo::New(::google::protobuf::Arena* arena) const {
  SceneReliquaryInfo* n = new SceneReliquaryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneReliquaryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneReliquaryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&promote_level_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(promote_level_));
  _internal_metadata_.Clear();
}

bool SceneReliquaryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneReliquaryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 promote_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &promote_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneReliquaryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneReliquaryInfo)
  return false;
#undef DO_
}

void SceneReliquaryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneReliquaryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // uint32 level = 3;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // uint32 promote_level = 4;
  if (this->promote_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->promote_level(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneReliquaryInfo)
}

::google::protobuf::uint8* SceneReliquaryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneReliquaryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // uint32 level = 3;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // uint32 promote_level = 4;
  if (this->promote_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->promote_level(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneReliquaryInfo)
  return target;
}

size_t SceneReliquaryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneReliquaryInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 guid = 2;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_id());
  }

  // uint32 level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // uint32 promote_level = 4;
  if (this->promote_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->promote_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneReliquaryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneReliquaryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneReliquaryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneReliquaryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneReliquaryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneReliquaryInfo)
    MergeFrom(*source);
  }
}

void SceneReliquaryInfo::MergeFrom(const SceneReliquaryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneReliquaryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.item_id() != 0) {
    set_item_id(from.item_id());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.promote_level() != 0) {
    set_promote_level(from.promote_level());
  }
}

void SceneReliquaryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneReliquaryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneReliquaryInfo::CopyFrom(const SceneReliquaryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneReliquaryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneReliquaryInfo::IsInitialized() const {
  return true;
}

void SceneReliquaryInfo::Swap(SceneReliquaryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneReliquaryInfo::InternalSwap(SceneReliquaryInfo* other) {
  using std::swap;
  swap(guid_, other->guid_);
  swap(item_id_, other->item_id_);
  swap(level_, other->level_);
  swap(promote_level_, other->promote_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneReliquaryInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneReliquaryInfo

// uint32 item_id = 1;
void SceneReliquaryInfo::clear_item_id() {
  item_id_ = 0u;
}
::google::protobuf::uint32 SceneReliquaryInfo::item_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneReliquaryInfo.item_id)
  return item_id_;
}
void SceneReliquaryInfo::set_item_id(::google::protobuf::uint32 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneReliquaryInfo.item_id)
}

// uint64 guid = 2;
void SceneReliquaryInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SceneReliquaryInfo::guid() const {
  // @@protoc_insertion_point(field_get:proto.SceneReliquaryInfo.guid)
  return guid_;
}
void SceneReliquaryInfo::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneReliquaryInfo.guid)
}

// uint32 level = 3;
void SceneReliquaryInfo::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 SceneReliquaryInfo::level() const {
  // @@protoc_insertion_point(field_get:proto.SceneReliquaryInfo.level)
  return level_;
}
void SceneReliquaryInfo::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneReliquaryInfo.level)
}

// uint32 promote_level = 4;
void SceneReliquaryInfo::clear_promote_level() {
  promote_level_ = 0u;
}
::google::protobuf::uint32 SceneReliquaryInfo::promote_level() const {
  // @@protoc_insertion_point(field_get:proto.SceneReliquaryInfo.promote_level)
  return promote_level_;
}
void SceneReliquaryInfo::set_promote_level(::google::protobuf::uint32 value) {
  
  promote_level_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneReliquaryInfo.promote_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerBuff::kServerBuffUidFieldNumber;
const int ServerBuff::kServerBuffIdFieldNumber;
const int ServerBuff::kServerBuffTypeFieldNumber;
const int ServerBuff::kInstancedModifierIdFieldNumber;
const int ServerBuff::kIsModifierAddedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerBuff::ServerBuff()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerBuff)
}
ServerBuff::ServerBuff(const ServerBuff& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_buff_uid_, &from.server_buff_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_modifier_added_) -
    reinterpret_cast<char*>(&server_buff_uid_)) + sizeof(is_modifier_added_));
  // @@protoc_insertion_point(copy_constructor:proto.ServerBuff)
}

void ServerBuff::SharedCtor() {
  ::memset(&server_buff_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_modifier_added_) -
      reinterpret_cast<char*>(&server_buff_uid_)) + sizeof(is_modifier_added_));
  _cached_size_ = 0;
}

ServerBuff::~ServerBuff() {
  // @@protoc_insertion_point(destructor:proto.ServerBuff)
  SharedDtor();
}

void ServerBuff::SharedDtor() {
}

void ServerBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerBuff::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerBuff& ServerBuff::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerBuff* ServerBuff::New(::google::protobuf::Arena* arena) const {
  ServerBuff* n = new ServerBuff;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerBuff::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerBuff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&server_buff_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_modifier_added_) -
      reinterpret_cast<char*>(&server_buff_uid_)) + sizeof(is_modifier_added_));
  _internal_metadata_.Clear();
}

bool ServerBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerBuff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 server_buff_uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_buff_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 server_buff_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_buff_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 server_buff_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_buff_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 instanced_modifier_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instanced_modifier_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_modifier_added = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_modifier_added_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerBuff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerBuff)
  return false;
#undef DO_
}

void ServerBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerBuff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_buff_uid = 1;
  if (this->server_buff_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_buff_uid(), output);
  }

  // uint32 server_buff_id = 2;
  if (this->server_buff_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_buff_id(), output);
  }

  // uint32 server_buff_type = 3;
  if (this->server_buff_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_buff_type(), output);
  }

  // uint32 instanced_modifier_id = 4;
  if (this->instanced_modifier_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->instanced_modifier_id(), output);
  }

  // bool is_modifier_added = 5;
  if (this->is_modifier_added() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_modifier_added(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerBuff)
}

::google::protobuf::uint8* ServerBuff::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerBuff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_buff_uid = 1;
  if (this->server_buff_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_buff_uid(), target);
  }

  // uint32 server_buff_id = 2;
  if (this->server_buff_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_buff_id(), target);
  }

  // uint32 server_buff_type = 3;
  if (this->server_buff_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_buff_type(), target);
  }

  // uint32 instanced_modifier_id = 4;
  if (this->instanced_modifier_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->instanced_modifier_id(), target);
  }

  // bool is_modifier_added = 5;
  if (this->is_modifier_added() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_modifier_added(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerBuff)
  return target;
}

size_t ServerBuff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerBuff)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 server_buff_uid = 1;
  if (this->server_buff_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_buff_uid());
  }

  // uint32 server_buff_id = 2;
  if (this->server_buff_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_buff_id());
  }

  // uint32 server_buff_type = 3;
  if (this->server_buff_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_buff_type());
  }

  // uint32 instanced_modifier_id = 4;
  if (this->instanced_modifier_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->instanced_modifier_id());
  }

  // bool is_modifier_added = 5;
  if (this->is_modifier_added() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerBuff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerBuff)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerBuff* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerBuff>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerBuff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerBuff)
    MergeFrom(*source);
  }
}

void ServerBuff::MergeFrom(const ServerBuff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerBuff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_buff_uid() != 0) {
    set_server_buff_uid(from.server_buff_uid());
  }
  if (from.server_buff_id() != 0) {
    set_server_buff_id(from.server_buff_id());
  }
  if (from.server_buff_type() != 0) {
    set_server_buff_type(from.server_buff_type());
  }
  if (from.instanced_modifier_id() != 0) {
    set_instanced_modifier_id(from.instanced_modifier_id());
  }
  if (from.is_modifier_added() != 0) {
    set_is_modifier_added(from.is_modifier_added());
  }
}

void ServerBuff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerBuff::CopyFrom(const ServerBuff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerBuff::IsInitialized() const {
  return true;
}

void ServerBuff::Swap(ServerBuff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerBuff::InternalSwap(ServerBuff* other) {
  using std::swap;
  swap(server_buff_uid_, other->server_buff_uid_);
  swap(server_buff_id_, other->server_buff_id_);
  swap(server_buff_type_, other->server_buff_type_);
  swap(instanced_modifier_id_, other->instanced_modifier_id_);
  swap(is_modifier_added_, other->is_modifier_added_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerBuff::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerBuff

// uint32 server_buff_uid = 1;
void ServerBuff::clear_server_buff_uid() {
  server_buff_uid_ = 0u;
}
::google::protobuf::uint32 ServerBuff::server_buff_uid() const {
  // @@protoc_insertion_point(field_get:proto.ServerBuff.server_buff_uid)
  return server_buff_uid_;
}
void ServerBuff::set_server_buff_uid(::google::protobuf::uint32 value) {
  
  server_buff_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerBuff.server_buff_uid)
}

// uint32 server_buff_id = 2;
void ServerBuff::clear_server_buff_id() {
  server_buff_id_ = 0u;
}
::google::protobuf::uint32 ServerBuff::server_buff_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerBuff.server_buff_id)
  return server_buff_id_;
}
void ServerBuff::set_server_buff_id(::google::protobuf::uint32 value) {
  
  server_buff_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerBuff.server_buff_id)
}

// uint32 server_buff_type = 3;
void ServerBuff::clear_server_buff_type() {
  server_buff_type_ = 0u;
}
::google::protobuf::uint32 ServerBuff::server_buff_type() const {
  // @@protoc_insertion_point(field_get:proto.ServerBuff.server_buff_type)
  return server_buff_type_;
}
void ServerBuff::set_server_buff_type(::google::protobuf::uint32 value) {
  
  server_buff_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerBuff.server_buff_type)
}

// uint32 instanced_modifier_id = 4;
void ServerBuff::clear_instanced_modifier_id() {
  instanced_modifier_id_ = 0u;
}
::google::protobuf::uint32 ServerBuff::instanced_modifier_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerBuff.instanced_modifier_id)
  return instanced_modifier_id_;
}
void ServerBuff::set_instanced_modifier_id(::google::protobuf::uint32 value) {
  
  instanced_modifier_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerBuff.instanced_modifier_id)
}

// bool is_modifier_added = 5;
void ServerBuff::clear_is_modifier_added() {
  is_modifier_added_ = false;
}
bool ServerBuff::is_modifier_added() const {
  // @@protoc_insertion_point(field_get:proto.ServerBuff.is_modifier_added)
  return is_modifier_added_;
}
void ServerBuff::set_is_modifier_added(bool value) {
  
  is_modifier_added_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerBuff.is_modifier_added)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurVehicleInfo::kEntityIdFieldNumber;
const int CurVehicleInfo::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurVehicleInfo::CurVehicleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CurVehicleInfo)
}
CurVehicleInfo::CurVehicleInfo(const CurVehicleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&entity_id_, &from.entity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
    reinterpret_cast<char*>(&entity_id_)) + sizeof(pos_));
  // @@protoc_insertion_point(copy_constructor:proto.CurVehicleInfo)
}

void CurVehicleInfo::SharedCtor() {
  ::memset(&entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&entity_id_)) + sizeof(pos_));
  _cached_size_ = 0;
}

CurVehicleInfo::~CurVehicleInfo() {
  // @@protoc_insertion_point(destructor:proto.CurVehicleInfo)
  SharedDtor();
}

void CurVehicleInfo::SharedDtor() {
}

void CurVehicleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurVehicleInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CurVehicleInfo& CurVehicleInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

CurVehicleInfo* CurVehicleInfo::New(::google::protobuf::Arena* arena) const {
  CurVehicleInfo* n = new CurVehicleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CurVehicleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CurVehicleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&entity_id_)) + sizeof(pos_));
  _internal_metadata_.Clear();
}

bool CurVehicleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CurVehicleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 entity_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CurVehicleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CurVehicleInfo)
  return false;
#undef DO_
}

void CurVehicleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CurVehicleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entity_id = 1;
  if (this->entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->entity_id(), output);
  }

  // uint32 pos = 2;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CurVehicleInfo)
}

::google::protobuf::uint8* CurVehicleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CurVehicleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entity_id = 1;
  if (this->entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->entity_id(), target);
  }

  // uint32 pos = 2;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CurVehicleInfo)
  return target;
}

size_t CurVehicleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CurVehicleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 entity_id = 1;
  if (this->entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->entity_id());
  }

  // uint32 pos = 2;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurVehicleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CurVehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CurVehicleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CurVehicleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CurVehicleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CurVehicleInfo)
    MergeFrom(*source);
  }
}

void CurVehicleInfo::MergeFrom(const CurVehicleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CurVehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity_id() != 0) {
    set_entity_id(from.entity_id());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
}

void CurVehicleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CurVehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurVehicleInfo::CopyFrom(const CurVehicleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CurVehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurVehicleInfo::IsInitialized() const {
  return true;
}

void CurVehicleInfo::Swap(CurVehicleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurVehicleInfo::InternalSwap(CurVehicleInfo* other) {
  using std::swap;
  swap(entity_id_, other->entity_id_);
  swap(pos_, other->pos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CurVehicleInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CurVehicleInfo

// uint32 entity_id = 1;
void CurVehicleInfo::clear_entity_id() {
  entity_id_ = 0u;
}
::google::protobuf::uint32 CurVehicleInfo::entity_id() const {
  // @@protoc_insertion_point(field_get:proto.CurVehicleInfo.entity_id)
  return entity_id_;
}
void CurVehicleInfo::set_entity_id(::google::protobuf::uint32 value) {
  
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CurVehicleInfo.entity_id)
}

// uint32 pos = 2;
void CurVehicleInfo::clear_pos() {
  pos_ = 0u;
}
::google::protobuf::uint32 CurVehicleInfo::pos() const {
  // @@protoc_insertion_point(field_get:proto.CurVehicleInfo.pos)
  return pos_;
}
void CurVehicleInfo::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:proto.CurVehicleInfo.pos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarExcelInfo::kPrefabPathHashFieldNumber;
const int AvatarExcelInfo::kPrefabPathRemoteHashFieldNumber;
const int AvatarExcelInfo::kControllerPathHashFieldNumber;
const int AvatarExcelInfo::kControllerPathRemoteHashFieldNumber;
const int AvatarExcelInfo::kCombatConfigHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarExcelInfo::AvatarExcelInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarExcelInfo)
}
AvatarExcelInfo::AvatarExcelInfo(const AvatarExcelInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&prefab_path_hash_, &from.prefab_path_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&combat_config_hash_) -
    reinterpret_cast<char*>(&prefab_path_hash_)) + sizeof(combat_config_hash_));
  // @@protoc_insertion_point(copy_constructor:proto.AvatarExcelInfo)
}

void AvatarExcelInfo::SharedCtor() {
  ::memset(&prefab_path_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&combat_config_hash_) -
      reinterpret_cast<char*>(&prefab_path_hash_)) + sizeof(combat_config_hash_));
  _cached_size_ = 0;
}

AvatarExcelInfo::~AvatarExcelInfo() {
  // @@protoc_insertion_point(destructor:proto.AvatarExcelInfo)
  SharedDtor();
}

void AvatarExcelInfo::SharedDtor() {
}

void AvatarExcelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarExcelInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarExcelInfo& AvatarExcelInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarExcelInfo* AvatarExcelInfo::New(::google::protobuf::Arena* arena) const {
  AvatarExcelInfo* n = new AvatarExcelInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarExcelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarExcelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&prefab_path_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&combat_config_hash_) -
      reinterpret_cast<char*>(&prefab_path_hash_)) + sizeof(combat_config_hash_));
  _internal_metadata_.Clear();
}

bool AvatarExcelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarExcelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 prefab_path_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prefab_path_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 prefab_path_remote_hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prefab_path_remote_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 controller_path_hash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &controller_path_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 controller_path_remote_hash = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &controller_path_remote_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 combat_config_hash = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &combat_config_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarExcelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarExcelInfo)
  return false;
#undef DO_
}

void AvatarExcelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarExcelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 prefab_path_hash = 1;
  if (this->prefab_path_hash() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->prefab_path_hash(), output);
  }

  // uint64 prefab_path_remote_hash = 2;
  if (this->prefab_path_remote_hash() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->prefab_path_remote_hash(), output);
  }

  // uint64 controller_path_hash = 3;
  if (this->controller_path_hash() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->controller_path_hash(), output);
  }

  // uint64 controller_path_remote_hash = 4;
  if (this->controller_path_remote_hash() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->controller_path_remote_hash(), output);
  }

  // uint64 combat_config_hash = 5;
  if (this->combat_config_hash() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->combat_config_hash(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarExcelInfo)
}

::google::protobuf::uint8* AvatarExcelInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarExcelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 prefab_path_hash = 1;
  if (this->prefab_path_hash() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->prefab_path_hash(), target);
  }

  // uint64 prefab_path_remote_hash = 2;
  if (this->prefab_path_remote_hash() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->prefab_path_remote_hash(), target);
  }

  // uint64 controller_path_hash = 3;
  if (this->controller_path_hash() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->controller_path_hash(), target);
  }

  // uint64 controller_path_remote_hash = 4;
  if (this->controller_path_remote_hash() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->controller_path_remote_hash(), target);
  }

  // uint64 combat_config_hash = 5;
  if (this->combat_config_hash() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->combat_config_hash(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarExcelInfo)
  return target;
}

size_t AvatarExcelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarExcelInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 prefab_path_hash = 1;
  if (this->prefab_path_hash() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->prefab_path_hash());
  }

  // uint64 prefab_path_remote_hash = 2;
  if (this->prefab_path_remote_hash() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->prefab_path_remote_hash());
  }

  // uint64 controller_path_hash = 3;
  if (this->controller_path_hash() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->controller_path_hash());
  }

  // uint64 controller_path_remote_hash = 4;
  if (this->controller_path_remote_hash() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->controller_path_remote_hash());
  }

  // uint64 combat_config_hash = 5;
  if (this->combat_config_hash() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->combat_config_hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarExcelInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarExcelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarExcelInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarExcelInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarExcelInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarExcelInfo)
    MergeFrom(*source);
  }
}

void AvatarExcelInfo::MergeFrom(const AvatarExcelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarExcelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prefab_path_hash() != 0) {
    set_prefab_path_hash(from.prefab_path_hash());
  }
  if (from.prefab_path_remote_hash() != 0) {
    set_prefab_path_remote_hash(from.prefab_path_remote_hash());
  }
  if (from.controller_path_hash() != 0) {
    set_controller_path_hash(from.controller_path_hash());
  }
  if (from.controller_path_remote_hash() != 0) {
    set_controller_path_remote_hash(from.controller_path_remote_hash());
  }
  if (from.combat_config_hash() != 0) {
    set_combat_config_hash(from.combat_config_hash());
  }
}

void AvatarExcelInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarExcelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarExcelInfo::CopyFrom(const AvatarExcelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarExcelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarExcelInfo::IsInitialized() const {
  return true;
}

void AvatarExcelInfo::Swap(AvatarExcelInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarExcelInfo::InternalSwap(AvatarExcelInfo* other) {
  using std::swap;
  swap(prefab_path_hash_, other->prefab_path_hash_);
  swap(prefab_path_remote_hash_, other->prefab_path_remote_hash_);
  swap(controller_path_hash_, other->controller_path_hash_);
  swap(controller_path_remote_hash_, other->controller_path_remote_hash_);
  swap(combat_config_hash_, other->combat_config_hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarExcelInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarExcelInfo

// uint64 prefab_path_hash = 1;
void AvatarExcelInfo::clear_prefab_path_hash() {
  prefab_path_hash_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AvatarExcelInfo::prefab_path_hash() const {
  // @@protoc_insertion_point(field_get:proto.AvatarExcelInfo.prefab_path_hash)
  return prefab_path_hash_;
}
void AvatarExcelInfo::set_prefab_path_hash(::google::protobuf::uint64 value) {
  
  prefab_path_hash_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarExcelInfo.prefab_path_hash)
}

// uint64 prefab_path_remote_hash = 2;
void AvatarExcelInfo::clear_prefab_path_remote_hash() {
  prefab_path_remote_hash_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AvatarExcelInfo::prefab_path_remote_hash() const {
  // @@protoc_insertion_point(field_get:proto.AvatarExcelInfo.prefab_path_remote_hash)
  return prefab_path_remote_hash_;
}
void AvatarExcelInfo::set_prefab_path_remote_hash(::google::protobuf::uint64 value) {
  
  prefab_path_remote_hash_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarExcelInfo.prefab_path_remote_hash)
}

// uint64 controller_path_hash = 3;
void AvatarExcelInfo::clear_controller_path_hash() {
  controller_path_hash_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AvatarExcelInfo::controller_path_hash() const {
  // @@protoc_insertion_point(field_get:proto.AvatarExcelInfo.controller_path_hash)
  return controller_path_hash_;
}
void AvatarExcelInfo::set_controller_path_hash(::google::protobuf::uint64 value) {
  
  controller_path_hash_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarExcelInfo.controller_path_hash)
}

// uint64 controller_path_remote_hash = 4;
void AvatarExcelInfo::clear_controller_path_remote_hash() {
  controller_path_remote_hash_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AvatarExcelInfo::controller_path_remote_hash() const {
  // @@protoc_insertion_point(field_get:proto.AvatarExcelInfo.controller_path_remote_hash)
  return controller_path_remote_hash_;
}
void AvatarExcelInfo::set_controller_path_remote_hash(::google::protobuf::uint64 value) {
  
  controller_path_remote_hash_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarExcelInfo.controller_path_remote_hash)
}

// uint64 combat_config_hash = 5;
void AvatarExcelInfo::clear_combat_config_hash() {
  combat_config_hash_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AvatarExcelInfo::combat_config_hash() const {
  // @@protoc_insertion_point(field_get:proto.AvatarExcelInfo.combat_config_hash)
  return combat_config_hash_;
}
void AvatarExcelInfo::set_combat_config_hash(::google::protobuf::uint64 value) {
  
  combat_config_hash_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarExcelInfo.combat_config_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

SceneAvatarInfo::SceneAvatarInfo_SkillLevelMapEntry::SceneAvatarInfo_SkillLevelMapEntry() {}
SceneAvatarInfo::SceneAvatarInfo_SkillLevelMapEntry::SceneAvatarInfo_SkillLevelMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata SceneAvatarInfo::SceneAvatarInfo_SkillLevelMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[62];
}
void SceneAvatarInfo::SceneAvatarInfo_SkillLevelMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void SceneAvatarInfo::SceneAvatarInfo_SkillLevelMapEntry::MergeFrom(const SceneAvatarInfo_SkillLevelMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

SceneAvatarInfo::SceneAvatarInfo_ProudSkillExtraLevelMapEntry::SceneAvatarInfo_ProudSkillExtraLevelMapEntry() {}
SceneAvatarInfo::SceneAvatarInfo_ProudSkillExtraLevelMapEntry::SceneAvatarInfo_ProudSkillExtraLevelMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata SceneAvatarInfo::SceneAvatarInfo_ProudSkillExtraLevelMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[63];
}
void SceneAvatarInfo::SceneAvatarInfo_ProudSkillExtraLevelMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void SceneAvatarInfo::SceneAvatarInfo_ProudSkillExtraLevelMapEntry::MergeFrom(const SceneAvatarInfo_ProudSkillExtraLevelMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneAvatarInfo::kUidFieldNumber;
const int SceneAvatarInfo::kAvatarIdFieldNumber;
const int SceneAvatarInfo::kGuidFieldNumber;
const int SceneAvatarInfo::kPeerIdFieldNumber;
const int SceneAvatarInfo::kEquipIdListFieldNumber;
const int SceneAvatarInfo::kSkillDepotIdFieldNumber;
const int SceneAvatarInfo::kTalentIdListFieldNumber;
const int SceneAvatarInfo::kWeaponFieldNumber;
const int SceneAvatarInfo::kReliquaryListFieldNumber;
const int SceneAvatarInfo::kCoreProudSkillLevelFieldNumber;
const int SceneAvatarInfo::kInherentProudSkillListFieldNumber;
const int SceneAvatarInfo::kSkillLevelMapFieldNumber;
const int SceneAvatarInfo::kProudSkillExtraLevelMapFieldNumber;
const int SceneAvatarInfo::kServerBuffListFieldNumber;
const int SceneAvatarInfo::kTeamResonanceListFieldNumber;
const int SceneAvatarInfo::kWearingFlycloakIdFieldNumber;
const int SceneAvatarInfo::kBornTimeFieldNumber;
const int SceneAvatarInfo::kCostumeIdFieldNumber;
const int SceneAvatarInfo::kCurVehicleInfoFieldNumber;
const int SceneAvatarInfo::kExcelInfoFieldNumber;
const int SceneAvatarInfo::kAnimHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneAvatarInfo::SceneAvatarInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneAvatarInfo)
}
SceneAvatarInfo::SceneAvatarInfo(const SceneAvatarInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      equip_id_list_(from.equip_id_list_),
      talent_id_list_(from.talent_id_list_),
      reliquary_list_(from.reliquary_list_),
      inherent_proud_skill_list_(from.inherent_proud_skill_list_),
      server_buff_list_(from.server_buff_list_),
      team_resonance_list_(from.team_resonance_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  skill_level_map_.MergeFrom(from.skill_level_map_);
  proud_skill_extra_level_map_.MergeFrom(from.proud_skill_extra_level_map_);
  if (from.has_weapon()) {
    weapon_ = new ::proto::SceneWeaponInfo(*from.weapon_);
  } else {
    weapon_ = NULL;
  }
  if (from.has_cur_vehicle_info()) {
    cur_vehicle_info_ = new ::proto::CurVehicleInfo(*from.cur_vehicle_info_);
  } else {
    cur_vehicle_info_ = NULL;
  }
  if (from.has_excel_info()) {
    excel_info_ = new ::proto::AvatarExcelInfo(*from.excel_info_);
  } else {
    excel_info_ = NULL;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&anim_hash_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(anim_hash_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneAvatarInfo)
}

void SceneAvatarInfo::SharedCtor() {
  ::memset(&weapon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&anim_hash_) -
      reinterpret_cast<char*>(&weapon_)) + sizeof(anim_hash_));
  _cached_size_ = 0;
}

SceneAvatarInfo::~SceneAvatarInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneAvatarInfo)
  SharedDtor();
}

void SceneAvatarInfo::SharedDtor() {
  if (this != internal_default_instance()) delete weapon_;
  if (this != internal_default_instance()) delete cur_vehicle_info_;
  if (this != internal_default_instance()) delete excel_info_;
}

void SceneAvatarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneAvatarInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneAvatarInfo& SceneAvatarInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneAvatarInfo* SceneAvatarInfo::New(::google::protobuf::Arena* arena) const {
  SceneAvatarInfo* n = new SceneAvatarInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneAvatarInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneAvatarInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equip_id_list_.Clear();
  talent_id_list_.Clear();
  reliquary_list_.Clear();
  inherent_proud_skill_list_.Clear();
  skill_level_map_.Clear();
  proud_skill_extra_level_map_.Clear();
  server_buff_list_.Clear();
  team_resonance_list_.Clear();
  if (GetArenaNoVirtual() == NULL && weapon_ != NULL) {
    delete weapon_;
  }
  weapon_ = NULL;
  if (GetArenaNoVirtual() == NULL && cur_vehicle_info_ != NULL) {
    delete cur_vehicle_info_;
  }
  cur_vehicle_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && excel_info_ != NULL) {
    delete excel_info_;
  }
  excel_info_ = NULL;
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&anim_hash_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(anim_hash_));
  _internal_metadata_.Clear();
}

bool SceneAvatarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneAvatarInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 avatar_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 guid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peer_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 equip_id_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_equip_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_equip_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 skill_depot_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_depot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 talent_id_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_talent_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58u, input, this->mutable_talent_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneWeaponInfo weapon = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weapon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.SceneReliquaryInfo reliquary_list = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reliquary_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 core_proud_skill_level = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &core_proud_skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 inherent_proud_skill_list = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_inherent_proud_skill_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 98u, input, this->mutable_inherent_proud_skill_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> skill_level_map = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          SceneAvatarInfo_SkillLevelMapEntry::Parser< ::google::protobuf::internal::MapField<
              SceneAvatarInfo_SkillLevelMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&skill_level_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> proud_skill_extra_level_map = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          SceneAvatarInfo_ProudSkillExtraLevelMapEntry::Parser< ::google::protobuf::internal::MapField<
              SceneAvatarInfo_ProudSkillExtraLevelMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&proud_skill_extra_level_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ServerBuff server_buff_list = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_buff_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 team_resonance_list = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_team_resonance_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 130u, input, this->mutable_team_resonance_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wearing_flycloak_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wearing_flycloak_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 born_time = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &born_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 costume_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costume_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.CurVehicleInfo cur_vehicle_info = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cur_vehicle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AvatarExcelInfo excel_info = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_excel_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 anim_hash = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &anim_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneAvatarInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneAvatarInfo)
  return false;
#undef DO_
}

void SceneAvatarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneAvatarInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // uint32 avatar_id = 2;
  if (this->avatar_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->avatar_id(), output);
  }

  // uint64 guid = 3;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guid(), output);
  }

  // uint32 peer_id = 4;
  if (this->peer_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->peer_id(), output);
  }

  // repeated uint32 equip_id_list = 5;
  if (this->equip_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _equip_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->equip_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->equip_id_list(i), output);
  }

  // uint32 skill_depot_id = 6;
  if (this->skill_depot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->skill_depot_id(), output);
  }

  // repeated uint32 talent_id_list = 7;
  if (this->talent_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _talent_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->talent_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->talent_id_list(i), output);
  }

  // .proto.SceneWeaponInfo weapon = 8;
  if (this->has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->weapon_, output);
  }

  // repeated .proto.SceneReliquaryInfo reliquary_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reliquary_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->reliquary_list(static_cast<int>(i)), output);
  }

  // uint32 core_proud_skill_level = 11;
  if (this->core_proud_skill_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->core_proud_skill_level(), output);
  }

  // repeated uint32 inherent_proud_skill_list = 12;
  if (this->inherent_proud_skill_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _inherent_proud_skill_list_cached_byte_size_));
  }
  for (int i = 0, n = this->inherent_proud_skill_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->inherent_proud_skill_list(i), output);
  }

  // map<uint32, uint32> skill_level_map = 13;
  if (!this->skill_level_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->skill_level_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->skill_level_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->skill_level_map().begin();
          it != this->skill_level_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneAvatarInfo_SkillLevelMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(skill_level_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneAvatarInfo_SkillLevelMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->skill_level_map().begin();
          it != this->skill_level_map().end(); ++it) {
        entry.reset(skill_level_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
      }
    }
  }

  // map<uint32, uint32> proud_skill_extra_level_map = 14;
  if (!this->proud_skill_extra_level_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->proud_skill_extra_level_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->proud_skill_extra_level_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->proud_skill_extra_level_map().begin();
          it != this->proud_skill_extra_level_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneAvatarInfo_ProudSkillExtraLevelMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(proud_skill_extra_level_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            14, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneAvatarInfo_ProudSkillExtraLevelMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->proud_skill_extra_level_map().begin();
          it != this->proud_skill_extra_level_map().end(); ++it) {
        entry.reset(proud_skill_extra_level_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            14, *entry, output);
      }
    }
  }

  // repeated .proto.ServerBuff server_buff_list = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->server_buff_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->server_buff_list(static_cast<int>(i)), output);
  }

  // repeated uint32 team_resonance_list = 16;
  if (this->team_resonance_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(16, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _team_resonance_list_cached_byte_size_));
  }
  for (int i = 0, n = this->team_resonance_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->team_resonance_list(i), output);
  }

  // uint32 wearing_flycloak_id = 17;
  if (this->wearing_flycloak_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->wearing_flycloak_id(), output);
  }

  // uint32 born_time = 18;
  if (this->born_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->born_time(), output);
  }

  // uint32 costume_id = 19;
  if (this->costume_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->costume_id(), output);
  }

  // .proto.CurVehicleInfo cur_vehicle_info = 20;
  if (this->has_cur_vehicle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->cur_vehicle_info_, output);
  }

  // .proto.AvatarExcelInfo excel_info = 21;
  if (this->has_excel_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->excel_info_, output);
  }

  // uint32 anim_hash = 22;
  if (this->anim_hash() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->anim_hash(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneAvatarInfo)
}

::google::protobuf::uint8* SceneAvatarInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneAvatarInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // uint32 avatar_id = 2;
  if (this->avatar_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->avatar_id(), target);
  }

  // uint64 guid = 3;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guid(), target);
  }

  // uint32 peer_id = 4;
  if (this->peer_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->peer_id(), target);
  }

  // repeated uint32 equip_id_list = 5;
  if (this->equip_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _equip_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->equip_id_list_, target);
  }

  // uint32 skill_depot_id = 6;
  if (this->skill_depot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->skill_depot_id(), target);
  }

  // repeated uint32 talent_id_list = 7;
  if (this->talent_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _talent_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->talent_id_list_, target);
  }

  // .proto.SceneWeaponInfo weapon = 8;
  if (this->has_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->weapon_, deterministic, target);
  }

  // repeated .proto.SceneReliquaryInfo reliquary_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reliquary_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->reliquary_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 core_proud_skill_level = 11;
  if (this->core_proud_skill_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->core_proud_skill_level(), target);
  }

  // repeated uint32 inherent_proud_skill_list = 12;
  if (this->inherent_proud_skill_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _inherent_proud_skill_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->inherent_proud_skill_list_, target);
  }

  // map<uint32, uint32> skill_level_map = 13;
  if (!this->skill_level_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->skill_level_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->skill_level_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->skill_level_map().begin();
          it != this->skill_level_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneAvatarInfo_SkillLevelMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(skill_level_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneAvatarInfo_SkillLevelMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->skill_level_map().begin();
          it != this->skill_level_map().end(); ++it) {
        entry.reset(skill_level_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
      }
    }
  }

  // map<uint32, uint32> proud_skill_extra_level_map = 14;
  if (!this->proud_skill_extra_level_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->proud_skill_extra_level_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->proud_skill_extra_level_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->proud_skill_extra_level_map().begin();
          it != this->proud_skill_extra_level_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneAvatarInfo_ProudSkillExtraLevelMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(proud_skill_extra_level_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       14, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneAvatarInfo_ProudSkillExtraLevelMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->proud_skill_extra_level_map().begin();
          it != this->proud_skill_extra_level_map().end(); ++it) {
        entry.reset(proud_skill_extra_level_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       14, *entry, deterministic, target);
;
      }
    }
  }

  // repeated .proto.ServerBuff server_buff_list = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->server_buff_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->server_buff_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 team_resonance_list = 16;
  if (this->team_resonance_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      16,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _team_resonance_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->team_resonance_list_, target);
  }

  // uint32 wearing_flycloak_id = 17;
  if (this->wearing_flycloak_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->wearing_flycloak_id(), target);
  }

  // uint32 born_time = 18;
  if (this->born_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->born_time(), target);
  }

  // uint32 costume_id = 19;
  if (this->costume_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->costume_id(), target);
  }

  // .proto.CurVehicleInfo cur_vehicle_info = 20;
  if (this->has_cur_vehicle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->cur_vehicle_info_, deterministic, target);
  }

  // .proto.AvatarExcelInfo excel_info = 21;
  if (this->has_excel_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->excel_info_, deterministic, target);
  }

  // uint32 anim_hash = 22;
  if (this->anim_hash() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->anim_hash(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneAvatarInfo)
  return target;
}

size_t SceneAvatarInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneAvatarInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 equip_id_list = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->equip_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _equip_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 talent_id_list = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->talent_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _talent_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto.SceneReliquaryInfo reliquary_list = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->reliquary_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reliquary_list(static_cast<int>(i)));
    }
  }

  // repeated uint32 inherent_proud_skill_list = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->inherent_proud_skill_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _inherent_proud_skill_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<uint32, uint32> skill_level_map = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->skill_level_map_size());
  {
    ::google::protobuf::scoped_ptr<SceneAvatarInfo_SkillLevelMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->skill_level_map().begin();
        it != this->skill_level_map().end(); ++it) {
      entry.reset(skill_level_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint32, uint32> proud_skill_extra_level_map = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->proud_skill_extra_level_map_size());
  {
    ::google::protobuf::scoped_ptr<SceneAvatarInfo_ProudSkillExtraLevelMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->proud_skill_extra_level_map().begin();
        it != this->proud_skill_extra_level_map().end(); ++it) {
      entry.reset(proud_skill_extra_level_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .proto.ServerBuff server_buff_list = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->server_buff_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_buff_list(static_cast<int>(i)));
    }
  }

  // repeated uint32 team_resonance_list = 16;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->team_resonance_list_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _team_resonance_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .proto.SceneWeaponInfo weapon = 8;
  if (this->has_weapon()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->weapon_);
  }

  // .proto.CurVehicleInfo cur_vehicle_info = 20;
  if (this->has_cur_vehicle_info()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cur_vehicle_info_);
  }

  // .proto.AvatarExcelInfo excel_info = 21;
  if (this->has_excel_info()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->excel_info_);
  }

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // uint32 avatar_id = 2;
  if (this->avatar_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avatar_id());
  }

  // uint64 guid = 3;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // uint32 peer_id = 4;
  if (this->peer_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peer_id());
  }

  // uint32 skill_depot_id = 6;
  if (this->skill_depot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_depot_id());
  }

  // uint32 core_proud_skill_level = 11;
  if (this->core_proud_skill_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->core_proud_skill_level());
  }

  // uint32 wearing_flycloak_id = 17;
  if (this->wearing_flycloak_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wearing_flycloak_id());
  }

  // uint32 born_time = 18;
  if (this->born_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->born_time());
  }

  // uint32 costume_id = 19;
  if (this->costume_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->costume_id());
  }

  // uint32 anim_hash = 22;
  if (this->anim_hash() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->anim_hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneAvatarInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneAvatarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneAvatarInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneAvatarInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneAvatarInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneAvatarInfo)
    MergeFrom(*source);
  }
}

void SceneAvatarInfo::MergeFrom(const SceneAvatarInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneAvatarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equip_id_list_.MergeFrom(from.equip_id_list_);
  talent_id_list_.MergeFrom(from.talent_id_list_);
  reliquary_list_.MergeFrom(from.reliquary_list_);
  inherent_proud_skill_list_.MergeFrom(from.inherent_proud_skill_list_);
  skill_level_map_.MergeFrom(from.skill_level_map_);
  proud_skill_extra_level_map_.MergeFrom(from.proud_skill_extra_level_map_);
  server_buff_list_.MergeFrom(from.server_buff_list_);
  team_resonance_list_.MergeFrom(from.team_resonance_list_);
  if (from.has_weapon()) {
    mutable_weapon()->::proto::SceneWeaponInfo::MergeFrom(from.weapon());
  }
  if (from.has_cur_vehicle_info()) {
    mutable_cur_vehicle_info()->::proto::CurVehicleInfo::MergeFrom(from.cur_vehicle_info());
  }
  if (from.has_excel_info()) {
    mutable_excel_info()->::proto::AvatarExcelInfo::MergeFrom(from.excel_info());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.avatar_id() != 0) {
    set_avatar_id(from.avatar_id());
  }
  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.peer_id() != 0) {
    set_peer_id(from.peer_id());
  }
  if (from.skill_depot_id() != 0) {
    set_skill_depot_id(from.skill_depot_id());
  }
  if (from.core_proud_skill_level() != 0) {
    set_core_proud_skill_level(from.core_proud_skill_level());
  }
  if (from.wearing_flycloak_id() != 0) {
    set_wearing_flycloak_id(from.wearing_flycloak_id());
  }
  if (from.born_time() != 0) {
    set_born_time(from.born_time());
  }
  if (from.costume_id() != 0) {
    set_costume_id(from.costume_id());
  }
  if (from.anim_hash() != 0) {
    set_anim_hash(from.anim_hash());
  }
}

void SceneAvatarInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneAvatarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneAvatarInfo::CopyFrom(const SceneAvatarInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneAvatarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneAvatarInfo::IsInitialized() const {
  return true;
}

void SceneAvatarInfo::Swap(SceneAvatarInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneAvatarInfo::InternalSwap(SceneAvatarInfo* other) {
  using std::swap;
  equip_id_list_.InternalSwap(&other->equip_id_list_);
  talent_id_list_.InternalSwap(&other->talent_id_list_);
  reliquary_list_.InternalSwap(&other->reliquary_list_);
  inherent_proud_skill_list_.InternalSwap(&other->inherent_proud_skill_list_);
  skill_level_map_.Swap(&other->skill_level_map_);
  proud_skill_extra_level_map_.Swap(&other->proud_skill_extra_level_map_);
  server_buff_list_.InternalSwap(&other->server_buff_list_);
  team_resonance_list_.InternalSwap(&other->team_resonance_list_);
  swap(weapon_, other->weapon_);
  swap(cur_vehicle_info_, other->cur_vehicle_info_);
  swap(excel_info_, other->excel_info_);
  swap(uid_, other->uid_);
  swap(avatar_id_, other->avatar_id_);
  swap(guid_, other->guid_);
  swap(peer_id_, other->peer_id_);
  swap(skill_depot_id_, other->skill_depot_id_);
  swap(core_proud_skill_level_, other->core_proud_skill_level_);
  swap(wearing_flycloak_id_, other->wearing_flycloak_id_);
  swap(born_time_, other->born_time_);
  swap(costume_id_, other->costume_id_);
  swap(anim_hash_, other->anim_hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneAvatarInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneAvatarInfo

// uint32 uid = 1;
void SceneAvatarInfo::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 SceneAvatarInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.SceneAvatarInfo.uid)
  return uid_;
}
void SceneAvatarInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneAvatarInfo.uid)
}

// uint32 avatar_id = 2;
void SceneAvatarInfo::clear_avatar_id() {
  avatar_id_ = 0u;
}
::google::protobuf::uint32 SceneAvatarInfo::avatar_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneAvatarInfo.avatar_id)
  return avatar_id_;
}
void SceneAvatarInfo::set_avatar_id(::google::protobuf::uint32 value) {
  
  avatar_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneAvatarInfo.avatar_id)
}

// uint64 guid = 3;
void SceneAvatarInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SceneAvatarInfo::guid() const {
  // @@protoc_insertion_point(field_get:proto.SceneAvatarInfo.guid)
  return guid_;
}
void SceneAvatarInfo::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneAvatarInfo.guid)
}

// uint32 peer_id = 4;
void SceneAvatarInfo::clear_peer_id() {
  peer_id_ = 0u;
}
::google::protobuf::uint32 SceneAvatarInfo::peer_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneAvatarInfo.peer_id)
  return peer_id_;
}
void SceneAvatarInfo::set_peer_id(::google::protobuf::uint32 value) {
  
  peer_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneAvatarInfo.peer_id)
}

// repeated uint32 equip_id_list = 5;
int SceneAvatarInfo::equip_id_list_size() const {
  return equip_id_list_.size();
}
void SceneAvatarInfo::clear_equip_id_list() {
  equip_id_list_.Clear();
}
::google::protobuf::uint32 SceneAvatarInfo::equip_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SceneAvatarInfo.equip_id_list)
  return equip_id_list_.Get(index);
}
void SceneAvatarInfo::set_equip_id_list(int index, ::google::protobuf::uint32 value) {
  equip_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.SceneAvatarInfo.equip_id_list)
}
void SceneAvatarInfo::add_equip_id_list(::google::protobuf::uint32 value) {
  equip_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.SceneAvatarInfo.equip_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SceneAvatarInfo::equip_id_list() const {
  // @@protoc_insertion_point(field_list:proto.SceneAvatarInfo.equip_id_list)
  return equip_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SceneAvatarInfo::mutable_equip_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SceneAvatarInfo.equip_id_list)
  return &equip_id_list_;
}

// uint32 skill_depot_id = 6;
void SceneAvatarInfo::clear_skill_depot_id() {
  skill_depot_id_ = 0u;
}
::google::protobuf::uint32 SceneAvatarInfo::skill_depot_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneAvatarInfo.skill_depot_id)
  return skill_depot_id_;
}
void SceneAvatarInfo::set_skill_depot_id(::google::protobuf::uint32 value) {
  
  skill_depot_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneAvatarInfo.skill_depot_id)
}

// repeated uint32 talent_id_list = 7;
int SceneAvatarInfo::talent_id_list_size() const {
  return talent_id_list_.size();
}
void SceneAvatarInfo::clear_talent_id_list() {
  talent_id_list_.Clear();
}
::google::protobuf::uint32 SceneAvatarInfo::talent_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SceneAvatarInfo.talent_id_list)
  return talent_id_list_.Get(index);
}
void SceneAvatarInfo::set_talent_id_list(int index, ::google::protobuf::uint32 value) {
  talent_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.SceneAvatarInfo.talent_id_list)
}
void SceneAvatarInfo::add_talent_id_list(::google::protobuf::uint32 value) {
  talent_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.SceneAvatarInfo.talent_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SceneAvatarInfo::talent_id_list() const {
  // @@protoc_insertion_point(field_list:proto.SceneAvatarInfo.talent_id_list)
  return talent_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SceneAvatarInfo::mutable_talent_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SceneAvatarInfo.talent_id_list)
  return &talent_id_list_;
}

// .proto.SceneWeaponInfo weapon = 8;
bool SceneAvatarInfo::has_weapon() const {
  return this != internal_default_instance() && weapon_ != NULL;
}
void SceneAvatarInfo::clear_weapon() {
  if (GetArenaNoVirtual() == NULL && weapon_ != NULL) delete weapon_;
  weapon_ = NULL;
}
const ::proto::SceneWeaponInfo& SceneAvatarInfo::weapon() const {
  const ::proto::SceneWeaponInfo* p = weapon_;
  // @@protoc_insertion_point(field_get:proto.SceneAvatarInfo.weapon)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::SceneWeaponInfo*>(
      &::proto::_SceneWeaponInfo_default_instance_);
}
::proto::SceneWeaponInfo* SceneAvatarInfo::mutable_weapon() {
  
  if (weapon_ == NULL) {
    weapon_ = new ::proto::SceneWeaponInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneAvatarInfo.weapon)
  return weapon_;
}
::proto::SceneWeaponInfo* SceneAvatarInfo::release_weapon() {
  // @@protoc_insertion_point(field_release:proto.SceneAvatarInfo.weapon)
  
  ::proto::SceneWeaponInfo* temp = weapon_;
  weapon_ = NULL;
  return temp;
}
void SceneAvatarInfo::set_allocated_weapon(::proto::SceneWeaponInfo* weapon) {
  delete weapon_;
  weapon_ = weapon;
  if (weapon) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneAvatarInfo.weapon)
}

// repeated .proto.SceneReliquaryInfo reliquary_list = 9;
int SceneAvatarInfo::reliquary_list_size() const {
  return reliquary_list_.size();
}
void SceneAvatarInfo::clear_reliquary_list() {
  reliquary_list_.Clear();
}
const ::proto::SceneReliquaryInfo& SceneAvatarInfo::reliquary_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SceneAvatarInfo.reliquary_list)
  return reliquary_list_.Get(index);
}
::proto::SceneReliquaryInfo* SceneAvatarInfo::mutable_reliquary_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.SceneAvatarInfo.reliquary_list)
  return reliquary_list_.Mutable(index);
}
::proto::SceneReliquaryInfo* SceneAvatarInfo::add_reliquary_list() {
  // @@protoc_insertion_point(field_add:proto.SceneAvatarInfo.reliquary_list)
  return reliquary_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::SceneReliquaryInfo >*
SceneAvatarInfo::mutable_reliquary_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SceneAvatarInfo.reliquary_list)
  return &reliquary_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::SceneReliquaryInfo >&
SceneAvatarInfo::reliquary_list() const {
  // @@protoc_insertion_point(field_list:proto.SceneAvatarInfo.reliquary_list)
  return reliquary_list_;
}

// uint32 core_proud_skill_level = 11;
void SceneAvatarInfo::clear_core_proud_skill_level() {
  core_proud_skill_level_ = 0u;
}
::google::protobuf::uint32 SceneAvatarInfo::core_proud_skill_level() const {
  // @@protoc_insertion_point(field_get:proto.SceneAvatarInfo.core_proud_skill_level)
  return core_proud_skill_level_;
}
void SceneAvatarInfo::set_core_proud_skill_level(::google::protobuf::uint32 value) {
  
  core_proud_skill_level_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneAvatarInfo.core_proud_skill_level)
}

// repeated uint32 inherent_proud_skill_list = 12;
int SceneAvatarInfo::inherent_proud_skill_list_size() const {
  return inherent_proud_skill_list_.size();
}
void SceneAvatarInfo::clear_inherent_proud_skill_list() {
  inherent_proud_skill_list_.Clear();
}
::google::protobuf::uint32 SceneAvatarInfo::inherent_proud_skill_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SceneAvatarInfo.inherent_proud_skill_list)
  return inherent_proud_skill_list_.Get(index);
}
void SceneAvatarInfo::set_inherent_proud_skill_list(int index, ::google::protobuf::uint32 value) {
  inherent_proud_skill_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.SceneAvatarInfo.inherent_proud_skill_list)
}
void SceneAvatarInfo::add_inherent_proud_skill_list(::google::protobuf::uint32 value) {
  inherent_proud_skill_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.SceneAvatarInfo.inherent_proud_skill_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SceneAvatarInfo::inherent_proud_skill_list() const {
  // @@protoc_insertion_point(field_list:proto.SceneAvatarInfo.inherent_proud_skill_list)
  return inherent_proud_skill_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SceneAvatarInfo::mutable_inherent_proud_skill_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SceneAvatarInfo.inherent_proud_skill_list)
  return &inherent_proud_skill_list_;
}

// map<uint32, uint32> skill_level_map = 13;
int SceneAvatarInfo::skill_level_map_size() const {
  return skill_level_map_.size();
}
void SceneAvatarInfo::clear_skill_level_map() {
  skill_level_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
SceneAvatarInfo::skill_level_map() const {
  // @@protoc_insertion_point(field_map:proto.SceneAvatarInfo.skill_level_map)
  return skill_level_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
SceneAvatarInfo::mutable_skill_level_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.SceneAvatarInfo.skill_level_map)
  return skill_level_map_.MutableMap();
}

// map<uint32, uint32> proud_skill_extra_level_map = 14;
int SceneAvatarInfo::proud_skill_extra_level_map_size() const {
  return proud_skill_extra_level_map_.size();
}
void SceneAvatarInfo::clear_proud_skill_extra_level_map() {
  proud_skill_extra_level_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
SceneAvatarInfo::proud_skill_extra_level_map() const {
  // @@protoc_insertion_point(field_map:proto.SceneAvatarInfo.proud_skill_extra_level_map)
  return proud_skill_extra_level_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
SceneAvatarInfo::mutable_proud_skill_extra_level_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.SceneAvatarInfo.proud_skill_extra_level_map)
  return proud_skill_extra_level_map_.MutableMap();
}

// repeated .proto.ServerBuff server_buff_list = 15;
int SceneAvatarInfo::server_buff_list_size() const {
  return server_buff_list_.size();
}
void SceneAvatarInfo::clear_server_buff_list() {
  server_buff_list_.Clear();
}
const ::proto::ServerBuff& SceneAvatarInfo::server_buff_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SceneAvatarInfo.server_buff_list)
  return server_buff_list_.Get(index);
}
::proto::ServerBuff* SceneAvatarInfo::mutable_server_buff_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.SceneAvatarInfo.server_buff_list)
  return server_buff_list_.Mutable(index);
}
::proto::ServerBuff* SceneAvatarInfo::add_server_buff_list() {
  // @@protoc_insertion_point(field_add:proto.SceneAvatarInfo.server_buff_list)
  return server_buff_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ServerBuff >*
SceneAvatarInfo::mutable_server_buff_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SceneAvatarInfo.server_buff_list)
  return &server_buff_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ServerBuff >&
SceneAvatarInfo::server_buff_list() const {
  // @@protoc_insertion_point(field_list:proto.SceneAvatarInfo.server_buff_list)
  return server_buff_list_;
}

// repeated uint32 team_resonance_list = 16;
int SceneAvatarInfo::team_resonance_list_size() const {
  return team_resonance_list_.size();
}
void SceneAvatarInfo::clear_team_resonance_list() {
  team_resonance_list_.Clear();
}
::google::protobuf::uint32 SceneAvatarInfo::team_resonance_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SceneAvatarInfo.team_resonance_list)
  return team_resonance_list_.Get(index);
}
void SceneAvatarInfo::set_team_resonance_list(int index, ::google::protobuf::uint32 value) {
  team_resonance_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.SceneAvatarInfo.team_resonance_list)
}
void SceneAvatarInfo::add_team_resonance_list(::google::protobuf::uint32 value) {
  team_resonance_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.SceneAvatarInfo.team_resonance_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SceneAvatarInfo::team_resonance_list() const {
  // @@protoc_insertion_point(field_list:proto.SceneAvatarInfo.team_resonance_list)
  return team_resonance_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SceneAvatarInfo::mutable_team_resonance_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SceneAvatarInfo.team_resonance_list)
  return &team_resonance_list_;
}

// uint32 wearing_flycloak_id = 17;
void SceneAvatarInfo::clear_wearing_flycloak_id() {
  wearing_flycloak_id_ = 0u;
}
::google::protobuf::uint32 SceneAvatarInfo::wearing_flycloak_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneAvatarInfo.wearing_flycloak_id)
  return wearing_flycloak_id_;
}
void SceneAvatarInfo::set_wearing_flycloak_id(::google::protobuf::uint32 value) {
  
  wearing_flycloak_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneAvatarInfo.wearing_flycloak_id)
}

// uint32 born_time = 18;
void SceneAvatarInfo::clear_born_time() {
  born_time_ = 0u;
}
::google::protobuf::uint32 SceneAvatarInfo::born_time() const {
  // @@protoc_insertion_point(field_get:proto.SceneAvatarInfo.born_time)
  return born_time_;
}
void SceneAvatarInfo::set_born_time(::google::protobuf::uint32 value) {
  
  born_time_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneAvatarInfo.born_time)
}

// uint32 costume_id = 19;
void SceneAvatarInfo::clear_costume_id() {
  costume_id_ = 0u;
}
::google::protobuf::uint32 SceneAvatarInfo::costume_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneAvatarInfo.costume_id)
  return costume_id_;
}
void SceneAvatarInfo::set_costume_id(::google::protobuf::uint32 value) {
  
  costume_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneAvatarInfo.costume_id)
}

// .proto.CurVehicleInfo cur_vehicle_info = 20;
bool SceneAvatarInfo::has_cur_vehicle_info() const {
  return this != internal_default_instance() && cur_vehicle_info_ != NULL;
}
void SceneAvatarInfo::clear_cur_vehicle_info() {
  if (GetArenaNoVirtual() == NULL && cur_vehicle_info_ != NULL) delete cur_vehicle_info_;
  cur_vehicle_info_ = NULL;
}
const ::proto::CurVehicleInfo& SceneAvatarInfo::cur_vehicle_info() const {
  const ::proto::CurVehicleInfo* p = cur_vehicle_info_;
  // @@protoc_insertion_point(field_get:proto.SceneAvatarInfo.cur_vehicle_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::CurVehicleInfo*>(
      &::proto::_CurVehicleInfo_default_instance_);
}
::proto::CurVehicleInfo* SceneAvatarInfo::mutable_cur_vehicle_info() {
  
  if (cur_vehicle_info_ == NULL) {
    cur_vehicle_info_ = new ::proto::CurVehicleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneAvatarInfo.cur_vehicle_info)
  return cur_vehicle_info_;
}
::proto::CurVehicleInfo* SceneAvatarInfo::release_cur_vehicle_info() {
  // @@protoc_insertion_point(field_release:proto.SceneAvatarInfo.cur_vehicle_info)
  
  ::proto::CurVehicleInfo* temp = cur_vehicle_info_;
  cur_vehicle_info_ = NULL;
  return temp;
}
void SceneAvatarInfo::set_allocated_cur_vehicle_info(::proto::CurVehicleInfo* cur_vehicle_info) {
  delete cur_vehicle_info_;
  cur_vehicle_info_ = cur_vehicle_info;
  if (cur_vehicle_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneAvatarInfo.cur_vehicle_info)
}

// .proto.AvatarExcelInfo excel_info = 21;
bool SceneAvatarInfo::has_excel_info() const {
  return this != internal_default_instance() && excel_info_ != NULL;
}
void SceneAvatarInfo::clear_excel_info() {
  if (GetArenaNoVirtual() == NULL && excel_info_ != NULL) delete excel_info_;
  excel_info_ = NULL;
}
const ::proto::AvatarExcelInfo& SceneAvatarInfo::excel_info() const {
  const ::proto::AvatarExcelInfo* p = excel_info_;
  // @@protoc_insertion_point(field_get:proto.SceneAvatarInfo.excel_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::AvatarExcelInfo*>(
      &::proto::_AvatarExcelInfo_default_instance_);
}
::proto::AvatarExcelInfo* SceneAvatarInfo::mutable_excel_info() {
  
  if (excel_info_ == NULL) {
    excel_info_ = new ::proto::AvatarExcelInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneAvatarInfo.excel_info)
  return excel_info_;
}
::proto::AvatarExcelInfo* SceneAvatarInfo::release_excel_info() {
  // @@protoc_insertion_point(field_release:proto.SceneAvatarInfo.excel_info)
  
  ::proto::AvatarExcelInfo* temp = excel_info_;
  excel_info_ = NULL;
  return temp;
}
void SceneAvatarInfo::set_allocated_excel_info(::proto::AvatarExcelInfo* excel_info) {
  delete excel_info_;
  excel_info_ = excel_info;
  if (excel_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneAvatarInfo.excel_info)
}

// uint32 anim_hash = 22;
void SceneAvatarInfo::clear_anim_hash() {
  anim_hash_ = 0u;
}
::google::protobuf::uint32 SceneAvatarInfo::anim_hash() const {
  // @@protoc_insertion_point(field_get:proto.SceneAvatarInfo.anim_hash)
  return anim_hash_;
}
void SceneAvatarInfo::set_anim_hash(::google::protobuf::uint32 value) {
  
  anim_hash_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneAvatarInfo.anim_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneFishInfo::kFishIdFieldNumber;
const int SceneFishInfo::kFishPoolEntityIdFieldNumber;
const int SceneFishInfo::kFishPoolPosFieldNumber;
const int SceneFishInfo::kFishPoolGadgetIdFieldNumber;
const int SceneFishInfo::kLastShockTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneFishInfo::SceneFishInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneFishInfo)
}
SceneFishInfo::SceneFishInfo(const SceneFishInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fish_pool_pos()) {
    fish_pool_pos_ = new ::proto::Vector(*from.fish_pool_pos_);
  } else {
    fish_pool_pos_ = NULL;
  }
  ::memcpy(&fish_id_, &from.fish_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_shock_time_) -
    reinterpret_cast<char*>(&fish_id_)) + sizeof(last_shock_time_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneFishInfo)
}

void SceneFishInfo::SharedCtor() {
  ::memset(&fish_pool_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_shock_time_) -
      reinterpret_cast<char*>(&fish_pool_pos_)) + sizeof(last_shock_time_));
  _cached_size_ = 0;
}

SceneFishInfo::~SceneFishInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneFishInfo)
  SharedDtor();
}

void SceneFishInfo::SharedDtor() {
  if (this != internal_default_instance()) delete fish_pool_pos_;
}

void SceneFishInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneFishInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneFishInfo& SceneFishInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneFishInfo* SceneFishInfo::New(::google::protobuf::Arena* arena) const {
  SceneFishInfo* n = new SceneFishInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneFishInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneFishInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && fish_pool_pos_ != NULL) {
    delete fish_pool_pos_;
  }
  fish_pool_pos_ = NULL;
  ::memset(&fish_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_shock_time_) -
      reinterpret_cast<char*>(&fish_id_)) + sizeof(last_shock_time_));
  _internal_metadata_.Clear();
}

bool SceneFishInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneFishInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 fish_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fish_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fish_pool_entity_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fish_pool_entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector fish_pool_pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fish_pool_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fish_pool_gadget_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fish_pool_gadget_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 last_shock_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_shock_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneFishInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneFishInfo)
  return false;
#undef DO_
}

void SceneFishInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneFishInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fish_id = 1;
  if (this->fish_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fish_id(), output);
  }

  // uint32 fish_pool_entity_id = 2;
  if (this->fish_pool_entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fish_pool_entity_id(), output);
  }

  // .proto.Vector fish_pool_pos = 3;
  if (this->has_fish_pool_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->fish_pool_pos_, output);
  }

  // uint32 fish_pool_gadget_id = 4;
  if (this->fish_pool_gadget_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fish_pool_gadget_id(), output);
  }

  // uint32 last_shock_time = 5;
  if (this->last_shock_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_shock_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneFishInfo)
}

::google::protobuf::uint8* SceneFishInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneFishInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fish_id = 1;
  if (this->fish_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fish_id(), target);
  }

  // uint32 fish_pool_entity_id = 2;
  if (this->fish_pool_entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fish_pool_entity_id(), target);
  }

  // .proto.Vector fish_pool_pos = 3;
  if (this->has_fish_pool_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->fish_pool_pos_, deterministic, target);
  }

  // uint32 fish_pool_gadget_id = 4;
  if (this->fish_pool_gadget_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fish_pool_gadget_id(), target);
  }

  // uint32 last_shock_time = 5;
  if (this->last_shock_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_shock_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneFishInfo)
  return target;
}

size_t SceneFishInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneFishInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.Vector fish_pool_pos = 3;
  if (this->has_fish_pool_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fish_pool_pos_);
  }

  // uint32 fish_id = 1;
  if (this->fish_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fish_id());
  }

  // uint32 fish_pool_entity_id = 2;
  if (this->fish_pool_entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fish_pool_entity_id());
  }

  // uint32 fish_pool_gadget_id = 4;
  if (this->fish_pool_gadget_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fish_pool_gadget_id());
  }

  // uint32 last_shock_time = 5;
  if (this->last_shock_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->last_shock_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneFishInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneFishInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneFishInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneFishInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneFishInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneFishInfo)
    MergeFrom(*source);
  }
}

void SceneFishInfo::MergeFrom(const SceneFishInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneFishInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fish_pool_pos()) {
    mutable_fish_pool_pos()->::proto::Vector::MergeFrom(from.fish_pool_pos());
  }
  if (from.fish_id() != 0) {
    set_fish_id(from.fish_id());
  }
  if (from.fish_pool_entity_id() != 0) {
    set_fish_pool_entity_id(from.fish_pool_entity_id());
  }
  if (from.fish_pool_gadget_id() != 0) {
    set_fish_pool_gadget_id(from.fish_pool_gadget_id());
  }
  if (from.last_shock_time() != 0) {
    set_last_shock_time(from.last_shock_time());
  }
}

void SceneFishInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneFishInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneFishInfo::CopyFrom(const SceneFishInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneFishInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneFishInfo::IsInitialized() const {
  return true;
}

void SceneFishInfo::Swap(SceneFishInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneFishInfo::InternalSwap(SceneFishInfo* other) {
  using std::swap;
  swap(fish_pool_pos_, other->fish_pool_pos_);
  swap(fish_id_, other->fish_id_);
  swap(fish_pool_entity_id_, other->fish_pool_entity_id_);
  swap(fish_pool_gadget_id_, other->fish_pool_gadget_id_);
  swap(last_shock_time_, other->last_shock_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneFishInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneFishInfo

// uint32 fish_id = 1;
void SceneFishInfo::clear_fish_id() {
  fish_id_ = 0u;
}
::google::protobuf::uint32 SceneFishInfo::fish_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneFishInfo.fish_id)
  return fish_id_;
}
void SceneFishInfo::set_fish_id(::google::protobuf::uint32 value) {
  
  fish_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneFishInfo.fish_id)
}

// uint32 fish_pool_entity_id = 2;
void SceneFishInfo::clear_fish_pool_entity_id() {
  fish_pool_entity_id_ = 0u;
}
::google::protobuf::uint32 SceneFishInfo::fish_pool_entity_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneFishInfo.fish_pool_entity_id)
  return fish_pool_entity_id_;
}
void SceneFishInfo::set_fish_pool_entity_id(::google::protobuf::uint32 value) {
  
  fish_pool_entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneFishInfo.fish_pool_entity_id)
}

// .proto.Vector fish_pool_pos = 3;
bool SceneFishInfo::has_fish_pool_pos() const {
  return this != internal_default_instance() && fish_pool_pos_ != NULL;
}
void SceneFishInfo::clear_fish_pool_pos() {
  if (GetArenaNoVirtual() == NULL && fish_pool_pos_ != NULL) delete fish_pool_pos_;
  fish_pool_pos_ = NULL;
}
const ::proto::Vector& SceneFishInfo::fish_pool_pos() const {
  const ::proto::Vector* p = fish_pool_pos_;
  // @@protoc_insertion_point(field_get:proto.SceneFishInfo.fish_pool_pos)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* SceneFishInfo::mutable_fish_pool_pos() {
  
  if (fish_pool_pos_ == NULL) {
    fish_pool_pos_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneFishInfo.fish_pool_pos)
  return fish_pool_pos_;
}
::proto::Vector* SceneFishInfo::release_fish_pool_pos() {
  // @@protoc_insertion_point(field_release:proto.SceneFishInfo.fish_pool_pos)
  
  ::proto::Vector* temp = fish_pool_pos_;
  fish_pool_pos_ = NULL;
  return temp;
}
void SceneFishInfo::set_allocated_fish_pool_pos(::proto::Vector* fish_pool_pos) {
  delete fish_pool_pos_;
  fish_pool_pos_ = fish_pool_pos;
  if (fish_pool_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneFishInfo.fish_pool_pos)
}

// uint32 fish_pool_gadget_id = 4;
void SceneFishInfo::clear_fish_pool_gadget_id() {
  fish_pool_gadget_id_ = 0u;
}
::google::protobuf::uint32 SceneFishInfo::fish_pool_gadget_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneFishInfo.fish_pool_gadget_id)
  return fish_pool_gadget_id_;
}
void SceneFishInfo::set_fish_pool_gadget_id(::google::protobuf::uint32 value) {
  
  fish_pool_gadget_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneFishInfo.fish_pool_gadget_id)
}

// uint32 last_shock_time = 5;
void SceneFishInfo::clear_last_shock_time() {
  last_shock_time_ = 0u;
}
::google::protobuf::uint32 SceneFishInfo::last_shock_time() const {
  // @@protoc_insertion_point(field_get:proto.SceneFishInfo.last_shock_time)
  return last_shock_time_;
}
void SceneFishInfo::set_last_shock_time(::google::protobuf::uint32 value) {
  
  last_shock_time_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneFishInfo.last_shock_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FishtankFishInfo::kFishDistanceFromWaterFieldNumber;
const int FishtankFishInfo::kFishScaleFieldNumber;
const int FishtankFishInfo::kInitialRotationYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FishtankFishInfo::FishtankFishInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FishtankFishInfo)
}
FishtankFishInfo::FishtankFishInfo(const FishtankFishInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fish_distance_from_water_, &from.fish_distance_from_water_,
    static_cast<size_t>(reinterpret_cast<char*>(&initial_rotation_y_) -
    reinterpret_cast<char*>(&fish_distance_from_water_)) + sizeof(initial_rotation_y_));
  // @@protoc_insertion_point(copy_constructor:proto.FishtankFishInfo)
}

void FishtankFishInfo::SharedCtor() {
  ::memset(&fish_distance_from_water_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&initial_rotation_y_) -
      reinterpret_cast<char*>(&fish_distance_from_water_)) + sizeof(initial_rotation_y_));
  _cached_size_ = 0;
}

FishtankFishInfo::~FishtankFishInfo() {
  // @@protoc_insertion_point(destructor:proto.FishtankFishInfo)
  SharedDtor();
}

void FishtankFishInfo::SharedDtor() {
}

void FishtankFishInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishtankFishInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FishtankFishInfo& FishtankFishInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

FishtankFishInfo* FishtankFishInfo::New(::google::protobuf::Arena* arena) const {
  FishtankFishInfo* n = new FishtankFishInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FishtankFishInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FishtankFishInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fish_distance_from_water_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&initial_rotation_y_) -
      reinterpret_cast<char*>(&fish_distance_from_water_)) + sizeof(initial_rotation_y_));
  _internal_metadata_.Clear();
}

bool FishtankFishInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FishtankFishInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float fish_distance_from_water = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fish_distance_from_water_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fish_scale = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fish_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float initial_rotation_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &initial_rotation_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FishtankFishInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FishtankFishInfo)
  return false;
#undef DO_
}

void FishtankFishInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FishtankFishInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float fish_distance_from_water = 1;
  if (this->fish_distance_from_water() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->fish_distance_from_water(), output);
  }

  // float fish_scale = 2;
  if (this->fish_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fish_scale(), output);
  }

  // float initial_rotation_y = 3;
  if (this->initial_rotation_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->initial_rotation_y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.FishtankFishInfo)
}

::google::protobuf::uint8* FishtankFishInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.FishtankFishInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float fish_distance_from_water = 1;
  if (this->fish_distance_from_water() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->fish_distance_from_water(), target);
  }

  // float fish_scale = 2;
  if (this->fish_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fish_scale(), target);
  }

  // float initial_rotation_y = 3;
  if (this->initial_rotation_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->initial_rotation_y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FishtankFishInfo)
  return target;
}

size_t FishtankFishInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FishtankFishInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float fish_distance_from_water = 1;
  if (this->fish_distance_from_water() != 0) {
    total_size += 1 + 4;
  }

  // float fish_scale = 2;
  if (this->fish_scale() != 0) {
    total_size += 1 + 4;
  }

  // float initial_rotation_y = 3;
  if (this->initial_rotation_y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishtankFishInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FishtankFishInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FishtankFishInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FishtankFishInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FishtankFishInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FishtankFishInfo)
    MergeFrom(*source);
  }
}

void FishtankFishInfo::MergeFrom(const FishtankFishInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FishtankFishInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fish_distance_from_water() != 0) {
    set_fish_distance_from_water(from.fish_distance_from_water());
  }
  if (from.fish_scale() != 0) {
    set_fish_scale(from.fish_scale());
  }
  if (from.initial_rotation_y() != 0) {
    set_initial_rotation_y(from.initial_rotation_y());
  }
}

void FishtankFishInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FishtankFishInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishtankFishInfo::CopyFrom(const FishtankFishInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FishtankFishInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishtankFishInfo::IsInitialized() const {
  return true;
}

void FishtankFishInfo::Swap(FishtankFishInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FishtankFishInfo::InternalSwap(FishtankFishInfo* other) {
  using std::swap;
  swap(fish_distance_from_water_, other->fish_distance_from_water_);
  swap(fish_scale_, other->fish_scale_);
  swap(initial_rotation_y_, other->initial_rotation_y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FishtankFishInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FishtankFishInfo

// float fish_distance_from_water = 1;
void FishtankFishInfo::clear_fish_distance_from_water() {
  fish_distance_from_water_ = 0;
}
float FishtankFishInfo::fish_distance_from_water() const {
  // @@protoc_insertion_point(field_get:proto.FishtankFishInfo.fish_distance_from_water)
  return fish_distance_from_water_;
}
void FishtankFishInfo::set_fish_distance_from_water(float value) {
  
  fish_distance_from_water_ = value;
  // @@protoc_insertion_point(field_set:proto.FishtankFishInfo.fish_distance_from_water)
}

// float fish_scale = 2;
void FishtankFishInfo::clear_fish_scale() {
  fish_scale_ = 0;
}
float FishtankFishInfo::fish_scale() const {
  // @@protoc_insertion_point(field_get:proto.FishtankFishInfo.fish_scale)
  return fish_scale_;
}
void FishtankFishInfo::set_fish_scale(float value) {
  
  fish_scale_ = value;
  // @@protoc_insertion_point(field_set:proto.FishtankFishInfo.fish_scale)
}

// float initial_rotation_y = 3;
void FishtankFishInfo::clear_initial_rotation_y() {
  initial_rotation_y_ = 0;
}
float FishtankFishInfo::initial_rotation_y() const {
  // @@protoc_insertion_point(field_get:proto.FishtankFishInfo.initial_rotation_y)
  return initial_rotation_y_;
}
void FishtankFishInfo::set_initial_rotation_y(float value) {
  
  initial_rotation_y_ = value;
  // @@protoc_insertion_point(field_set:proto.FishtankFishInfo.initial_rotation_y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

SceneMonsterInfo::SceneMonsterInfo_SummonTagMapEntry::SceneMonsterInfo_SummonTagMapEntry() {}
SceneMonsterInfo::SceneMonsterInfo_SummonTagMapEntry::SceneMonsterInfo_SummonTagMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata SceneMonsterInfo::SceneMonsterInfo_SummonTagMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[67];
}
void SceneMonsterInfo::SceneMonsterInfo_SummonTagMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void SceneMonsterInfo::SceneMonsterInfo_SummonTagMapEntry::MergeFrom(const SceneMonsterInfo_SummonTagMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneMonsterInfo::kMonsterIdFieldNumber;
const int SceneMonsterInfo::kGroupIdFieldNumber;
const int SceneMonsterInfo::kConfigIdFieldNumber;
const int SceneMonsterInfo::kWeaponListFieldNumber;
const int SceneMonsterInfo::kAuthorityPeerIdFieldNumber;
const int SceneMonsterInfo::kAffixListFieldNumber;
const int SceneMonsterInfo::kIsEliteFieldNumber;
const int SceneMonsterInfo::kOwnerEntityIdFieldNumber;
const int SceneMonsterInfo::kSummonedTagFieldNumber;
const int SceneMonsterInfo::kSummonTagMapFieldNumber;
const int SceneMonsterInfo::kPoseIdFieldNumber;
const int SceneMonsterInfo::kBornTypeFieldNumber;
const int SceneMonsterInfo::kBlockIdFieldNumber;
const int SceneMonsterInfo::kMarkFlagFieldNumber;
const int SceneMonsterInfo::kTitleIdFieldNumber;
const int SceneMonsterInfo::kSpecialNameIdFieldNumber;
const int SceneMonsterInfo::kAttackTargetIdFieldNumber;
const int SceneMonsterInfo::kMonsterRouteFieldNumber;
const int SceneMonsterInfo::kAiConfigIdFieldNumber;
const int SceneMonsterInfo::kLevelRouteIdFieldNumber;
const int SceneMonsterInfo::kInitPoseIdFieldNumber;
const int SceneMonsterInfo::kIsLightFieldNumber;
const int SceneMonsterInfo::kKillNumFieldNumber;
const int SceneMonsterInfo::kFishInfoFieldNumber;
const int SceneMonsterInfo::kFishtankFishInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneMonsterInfo::SceneMonsterInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneMonsterInfo)
}
SceneMonsterInfo::SceneMonsterInfo(const SceneMonsterInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      weapon_list_(from.weapon_list_),
      affix_list_(from.affix_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  summon_tag_map_.MergeFrom(from.summon_tag_map_);
  if (from.has_monster_route()) {
    monster_route_ = new ::proto::MonsterRoute(*from.monster_route_);
  } else {
    monster_route_ = NULL;
  }
  ::memcpy(&monster_id_, &from.monster_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&kill_num_) -
    reinterpret_cast<char*>(&monster_id_)) + sizeof(kill_num_));
  clear_has_content();
  switch (from.content_case()) {
    case kFishInfo: {
      mutable_fish_info()->::proto::SceneFishInfo::MergeFrom(from.fish_info());
      break;
    }
    case kFishtankFishInfo: {
      mutable_fishtank_fish_info()->::proto::FishtankFishInfo::MergeFrom(from.fishtank_fish_info());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.SceneMonsterInfo)
}

void SceneMonsterInfo::SharedCtor() {
  ::memset(&monster_route_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kill_num_) -
      reinterpret_cast<char*>(&monster_route_)) + sizeof(kill_num_));
  clear_has_content();
  _cached_size_ = 0;
}

SceneMonsterInfo::~SceneMonsterInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneMonsterInfo)
  SharedDtor();
}

void SceneMonsterInfo::SharedDtor() {
  if (this != internal_default_instance()) delete monster_route_;
  if (has_content()) {
    clear_content();
  }
}

void SceneMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneMonsterInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneMonsterInfo& SceneMonsterInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneMonsterInfo* SceneMonsterInfo::New(::google::protobuf::Arena* arena) const {
  SceneMonsterInfo* n = new SceneMonsterInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneMonsterInfo::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:proto.SceneMonsterInfo)
  switch (content_case()) {
    case kFishInfo: {
      delete content_.fish_info_;
      break;
    }
    case kFishtankFishInfo: {
      delete content_.fishtank_fish_info_;
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void SceneMonsterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneMonsterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weapon_list_.Clear();
  affix_list_.Clear();
  summon_tag_map_.Clear();
  if (GetArenaNoVirtual() == NULL && monster_route_ != NULL) {
    delete monster_route_;
  }
  monster_route_ = NULL;
  ::memset(&monster_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kill_num_) -
      reinterpret_cast<char*>(&monster_id_)) + sizeof(kill_num_));
  clear_content();
  _internal_metadata_.Clear();
}

bool SceneMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneMonsterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 monster_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 group_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 config_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.SceneWeaponInfo weapon_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weapon_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 authority_peer_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &authority_peer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 affix_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_affix_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50u, input, this->mutable_affix_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_elite = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_elite_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 owner_entity_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 summoned_tag = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &summoned_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> summon_tag_map = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          SceneMonsterInfo_SummonTagMapEntry::Parser< ::google::protobuf::internal::MapField<
              SceneMonsterInfo_SummonTagMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&summon_tag_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pose_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pose_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MonsterBornType born_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_born_type(static_cast< ::proto::MonsterBornType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 block_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mark_flag = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mark_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 title_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 special_name_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &special_name_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 attack_target_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_target_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MonsterRoute monster_route = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monster_route()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ai_config_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ai_config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level_route_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_route_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 init_pose_id = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &init_pose_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_light = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 kill_num = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneFishInfo fish_info = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fish_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.FishtankFishInfo fishtank_fish_info = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 410 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fishtank_fish_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneMonsterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneMonsterInfo)
  return false;
#undef DO_
}

void SceneMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneMonsterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 monster_id = 1;
  if (this->monster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monster_id(), output);
  }

  // uint32 group_id = 2;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // uint32 config_id = 3;
  if (this->config_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->config_id(), output);
  }

  // repeated .proto.SceneWeaponInfo weapon_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->weapon_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->weapon_list(static_cast<int>(i)), output);
  }

  // uint32 authority_peer_id = 5;
  if (this->authority_peer_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->authority_peer_id(), output);
  }

  // repeated uint32 affix_list = 6;
  if (this->affix_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _affix_list_cached_byte_size_));
  }
  for (int i = 0, n = this->affix_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->affix_list(i), output);
  }

  // bool is_elite = 7;
  if (this->is_elite() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_elite(), output);
  }

  // uint32 owner_entity_id = 8;
  if (this->owner_entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->owner_entity_id(), output);
  }

  // uint32 summoned_tag = 9;
  if (this->summoned_tag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->summoned_tag(), output);
  }

  // map<uint32, uint32> summon_tag_map = 10;
  if (!this->summon_tag_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->summon_tag_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->summon_tag_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->summon_tag_map().begin();
          it != this->summon_tag_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneMonsterInfo_SummonTagMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(summon_tag_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneMonsterInfo_SummonTagMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->summon_tag_map().begin();
          it != this->summon_tag_map().end(); ++it) {
        entry.reset(summon_tag_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
      }
    }
  }

  // uint32 pose_id = 11;
  if (this->pose_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->pose_id(), output);
  }

  // .proto.MonsterBornType born_type = 12;
  if (this->born_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->born_type(), output);
  }

  // uint32 block_id = 13;
  if (this->block_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->block_id(), output);
  }

  // uint32 mark_flag = 14;
  if (this->mark_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->mark_flag(), output);
  }

  // uint32 title_id = 15;
  if (this->title_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->title_id(), output);
  }

  // uint32 special_name_id = 16;
  if (this->special_name_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->special_name_id(), output);
  }

  // uint32 attack_target_id = 17;
  if (this->attack_target_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->attack_target_id(), output);
  }

  // .proto.MonsterRoute monster_route = 18;
  if (this->has_monster_route()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->monster_route_, output);
  }

  // uint32 ai_config_id = 19;
  if (this->ai_config_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->ai_config_id(), output);
  }

  // uint32 level_route_id = 20;
  if (this->level_route_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->level_route_id(), output);
  }

  // uint32 init_pose_id = 21;
  if (this->init_pose_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->init_pose_id(), output);
  }

  // bool is_light = 22;
  if (this->is_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->is_light(), output);
  }

  // uint32 kill_num = 23;
  if (this->kill_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->kill_num(), output);
  }

  // .proto.SceneFishInfo fish_info = 50;
  if (has_fish_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *content_.fish_info_, output);
  }

  // .proto.FishtankFishInfo fishtank_fish_info = 51;
  if (has_fishtank_fish_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, *content_.fishtank_fish_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneMonsterInfo)
}

::google::protobuf::uint8* SceneMonsterInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneMonsterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 monster_id = 1;
  if (this->monster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monster_id(), target);
  }

  // uint32 group_id = 2;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group_id(), target);
  }

  // uint32 config_id = 3;
  if (this->config_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->config_id(), target);
  }

  // repeated .proto.SceneWeaponInfo weapon_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->weapon_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->weapon_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 authority_peer_id = 5;
  if (this->authority_peer_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->authority_peer_id(), target);
  }

  // repeated uint32 affix_list = 6;
  if (this->affix_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _affix_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->affix_list_, target);
  }

  // bool is_elite = 7;
  if (this->is_elite() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_elite(), target);
  }

  // uint32 owner_entity_id = 8;
  if (this->owner_entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->owner_entity_id(), target);
  }

  // uint32 summoned_tag = 9;
  if (this->summoned_tag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->summoned_tag(), target);
  }

  // map<uint32, uint32> summon_tag_map = 10;
  if (!this->summon_tag_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->summon_tag_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->summon_tag_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->summon_tag_map().begin();
          it != this->summon_tag_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneMonsterInfo_SummonTagMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(summon_tag_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneMonsterInfo_SummonTagMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->summon_tag_map().begin();
          it != this->summon_tag_map().end(); ++it) {
        entry.reset(summon_tag_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
      }
    }
  }

  // uint32 pose_id = 11;
  if (this->pose_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->pose_id(), target);
  }

  // .proto.MonsterBornType born_type = 12;
  if (this->born_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->born_type(), target);
  }

  // uint32 block_id = 13;
  if (this->block_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->block_id(), target);
  }

  // uint32 mark_flag = 14;
  if (this->mark_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->mark_flag(), target);
  }

  // uint32 title_id = 15;
  if (this->title_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->title_id(), target);
  }

  // uint32 special_name_id = 16;
  if (this->special_name_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->special_name_id(), target);
  }

  // uint32 attack_target_id = 17;
  if (this->attack_target_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->attack_target_id(), target);
  }

  // .proto.MonsterRoute monster_route = 18;
  if (this->has_monster_route()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->monster_route_, deterministic, target);
  }

  // uint32 ai_config_id = 19;
  if (this->ai_config_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->ai_config_id(), target);
  }

  // uint32 level_route_id = 20;
  if (this->level_route_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->level_route_id(), target);
  }

  // uint32 init_pose_id = 21;
  if (this->init_pose_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->init_pose_id(), target);
  }

  // bool is_light = 22;
  if (this->is_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->is_light(), target);
  }

  // uint32 kill_num = 23;
  if (this->kill_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->kill_num(), target);
  }

  // .proto.SceneFishInfo fish_info = 50;
  if (has_fish_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, *content_.fish_info_, deterministic, target);
  }

  // .proto.FishtankFishInfo fishtank_fish_info = 51;
  if (has_fishtank_fish_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        51, *content_.fishtank_fish_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneMonsterInfo)
  return target;
}

size_t SceneMonsterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneMonsterInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.SceneWeaponInfo weapon_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->weapon_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weapon_list(static_cast<int>(i)));
    }
  }

  // repeated uint32 affix_list = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->affix_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _affix_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<uint32, uint32> summon_tag_map = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->summon_tag_map_size());
  {
    ::google::protobuf::scoped_ptr<SceneMonsterInfo_SummonTagMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->summon_tag_map().begin();
        it != this->summon_tag_map().end(); ++it) {
      entry.reset(summon_tag_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .proto.MonsterRoute monster_route = 18;
  if (this->has_monster_route()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->monster_route_);
  }

  // uint32 monster_id = 1;
  if (this->monster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->monster_id());
  }

  // uint32 group_id = 2;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  // uint32 config_id = 3;
  if (this->config_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->config_id());
  }

  // uint32 authority_peer_id = 5;
  if (this->authority_peer_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->authority_peer_id());
  }

  // uint32 owner_entity_id = 8;
  if (this->owner_entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner_entity_id());
  }

  // uint32 summoned_tag = 9;
  if (this->summoned_tag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->summoned_tag());
  }

  // uint32 pose_id = 11;
  if (this->pose_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pose_id());
  }

  // .proto.MonsterBornType born_type = 12;
  if (this->born_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->born_type());
  }

  // uint32 block_id = 13;
  if (this->block_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->block_id());
  }

  // uint32 mark_flag = 14;
  if (this->mark_flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mark_flag());
  }

  // bool is_elite = 7;
  if (this->is_elite() != 0) {
    total_size += 1 + 1;
  }

  // bool is_light = 22;
  if (this->is_light() != 0) {
    total_size += 2 + 1;
  }

  // uint32 title_id = 15;
  if (this->title_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->title_id());
  }

  // uint32 special_name_id = 16;
  if (this->special_name_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->special_name_id());
  }

  // uint32 attack_target_id = 17;
  if (this->attack_target_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->attack_target_id());
  }

  // uint32 ai_config_id = 19;
  if (this->ai_config_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ai_config_id());
  }

  // uint32 level_route_id = 20;
  if (this->level_route_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level_route_id());
  }

  // uint32 init_pose_id = 21;
  if (this->init_pose_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->init_pose_id());
  }

  // uint32 kill_num = 23;
  if (this->kill_num() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kill_num());
  }

  switch (content_case()) {
    // .proto.SceneFishInfo fish_info = 50;
    case kFishInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.fish_info_);
      break;
    }
    // .proto.FishtankFishInfo fishtank_fish_info = 51;
    case kFishtankFishInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.fishtank_fish_info_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneMonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneMonsterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneMonsterInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneMonsterInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneMonsterInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneMonsterInfo)
    MergeFrom(*source);
  }
}

void SceneMonsterInfo::MergeFrom(const SceneMonsterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneMonsterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weapon_list_.MergeFrom(from.weapon_list_);
  affix_list_.MergeFrom(from.affix_list_);
  summon_tag_map_.MergeFrom(from.summon_tag_map_);
  if (from.has_monster_route()) {
    mutable_monster_route()->::proto::MonsterRoute::MergeFrom(from.monster_route());
  }
  if (from.monster_id() != 0) {
    set_monster_id(from.monster_id());
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.config_id() != 0) {
    set_config_id(from.config_id());
  }
  if (from.authority_peer_id() != 0) {
    set_authority_peer_id(from.authority_peer_id());
  }
  if (from.owner_entity_id() != 0) {
    set_owner_entity_id(from.owner_entity_id());
  }
  if (from.summoned_tag() != 0) {
    set_summoned_tag(from.summoned_tag());
  }
  if (from.pose_id() != 0) {
    set_pose_id(from.pose_id());
  }
  if (from.born_type() != 0) {
    set_born_type(from.born_type());
  }
  if (from.block_id() != 0) {
    set_block_id(from.block_id());
  }
  if (from.mark_flag() != 0) {
    set_mark_flag(from.mark_flag());
  }
  if (from.is_elite() != 0) {
    set_is_elite(from.is_elite());
  }
  if (from.is_light() != 0) {
    set_is_light(from.is_light());
  }
  if (from.title_id() != 0) {
    set_title_id(from.title_id());
  }
  if (from.special_name_id() != 0) {
    set_special_name_id(from.special_name_id());
  }
  if (from.attack_target_id() != 0) {
    set_attack_target_id(from.attack_target_id());
  }
  if (from.ai_config_id() != 0) {
    set_ai_config_id(from.ai_config_id());
  }
  if (from.level_route_id() != 0) {
    set_level_route_id(from.level_route_id());
  }
  if (from.init_pose_id() != 0) {
    set_init_pose_id(from.init_pose_id());
  }
  if (from.kill_num() != 0) {
    set_kill_num(from.kill_num());
  }
  switch (from.content_case()) {
    case kFishInfo: {
      mutable_fish_info()->::proto::SceneFishInfo::MergeFrom(from.fish_info());
      break;
    }
    case kFishtankFishInfo: {
      mutable_fishtank_fish_info()->::proto::FishtankFishInfo::MergeFrom(from.fishtank_fish_info());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void SceneMonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneMonsterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneMonsterInfo::CopyFrom(const SceneMonsterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneMonsterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneMonsterInfo::IsInitialized() const {
  return true;
}

void SceneMonsterInfo::Swap(SceneMonsterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneMonsterInfo::InternalSwap(SceneMonsterInfo* other) {
  using std::swap;
  weapon_list_.InternalSwap(&other->weapon_list_);
  affix_list_.InternalSwap(&other->affix_list_);
  summon_tag_map_.Swap(&other->summon_tag_map_);
  swap(monster_route_, other->monster_route_);
  swap(monster_id_, other->monster_id_);
  swap(group_id_, other->group_id_);
  swap(config_id_, other->config_id_);
  swap(authority_peer_id_, other->authority_peer_id_);
  swap(owner_entity_id_, other->owner_entity_id_);
  swap(summoned_tag_, other->summoned_tag_);
  swap(pose_id_, other->pose_id_);
  swap(born_type_, other->born_type_);
  swap(block_id_, other->block_id_);
  swap(mark_flag_, other->mark_flag_);
  swap(is_elite_, other->is_elite_);
  swap(is_light_, other->is_light_);
  swap(title_id_, other->title_id_);
  swap(special_name_id_, other->special_name_id_);
  swap(attack_target_id_, other->attack_target_id_);
  swap(ai_config_id_, other->ai_config_id_);
  swap(level_route_id_, other->level_route_id_);
  swap(init_pose_id_, other->init_pose_id_);
  swap(kill_num_, other->kill_num_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneMonsterInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneMonsterInfo

// uint32 monster_id = 1;
void SceneMonsterInfo::clear_monster_id() {
  monster_id_ = 0u;
}
::google::protobuf::uint32 SceneMonsterInfo::monster_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.monster_id)
  return monster_id_;
}
void SceneMonsterInfo::set_monster_id(::google::protobuf::uint32 value) {
  
  monster_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneMonsterInfo.monster_id)
}

// uint32 group_id = 2;
void SceneMonsterInfo::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 SceneMonsterInfo::group_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.group_id)
  return group_id_;
}
void SceneMonsterInfo::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneMonsterInfo.group_id)
}

// uint32 config_id = 3;
void SceneMonsterInfo::clear_config_id() {
  config_id_ = 0u;
}
::google::protobuf::uint32 SceneMonsterInfo::config_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.config_id)
  return config_id_;
}
void SceneMonsterInfo::set_config_id(::google::protobuf::uint32 value) {
  
  config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneMonsterInfo.config_id)
}

// repeated .proto.SceneWeaponInfo weapon_list = 4;
int SceneMonsterInfo::weapon_list_size() const {
  return weapon_list_.size();
}
void SceneMonsterInfo::clear_weapon_list() {
  weapon_list_.Clear();
}
const ::proto::SceneWeaponInfo& SceneMonsterInfo::weapon_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.weapon_list)
  return weapon_list_.Get(index);
}
::proto::SceneWeaponInfo* SceneMonsterInfo::mutable_weapon_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.SceneMonsterInfo.weapon_list)
  return weapon_list_.Mutable(index);
}
::proto::SceneWeaponInfo* SceneMonsterInfo::add_weapon_list() {
  // @@protoc_insertion_point(field_add:proto.SceneMonsterInfo.weapon_list)
  return weapon_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::SceneWeaponInfo >*
SceneMonsterInfo::mutable_weapon_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SceneMonsterInfo.weapon_list)
  return &weapon_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::SceneWeaponInfo >&
SceneMonsterInfo::weapon_list() const {
  // @@protoc_insertion_point(field_list:proto.SceneMonsterInfo.weapon_list)
  return weapon_list_;
}

// uint32 authority_peer_id = 5;
void SceneMonsterInfo::clear_authority_peer_id() {
  authority_peer_id_ = 0u;
}
::google::protobuf::uint32 SceneMonsterInfo::authority_peer_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.authority_peer_id)
  return authority_peer_id_;
}
void SceneMonsterInfo::set_authority_peer_id(::google::protobuf::uint32 value) {
  
  authority_peer_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneMonsterInfo.authority_peer_id)
}

// repeated uint32 affix_list = 6;
int SceneMonsterInfo::affix_list_size() const {
  return affix_list_.size();
}
void SceneMonsterInfo::clear_affix_list() {
  affix_list_.Clear();
}
::google::protobuf::uint32 SceneMonsterInfo::affix_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.affix_list)
  return affix_list_.Get(index);
}
void SceneMonsterInfo::set_affix_list(int index, ::google::protobuf::uint32 value) {
  affix_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.SceneMonsterInfo.affix_list)
}
void SceneMonsterInfo::add_affix_list(::google::protobuf::uint32 value) {
  affix_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.SceneMonsterInfo.affix_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SceneMonsterInfo::affix_list() const {
  // @@protoc_insertion_point(field_list:proto.SceneMonsterInfo.affix_list)
  return affix_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SceneMonsterInfo::mutable_affix_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SceneMonsterInfo.affix_list)
  return &affix_list_;
}

// bool is_elite = 7;
void SceneMonsterInfo::clear_is_elite() {
  is_elite_ = false;
}
bool SceneMonsterInfo::is_elite() const {
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.is_elite)
  return is_elite_;
}
void SceneMonsterInfo::set_is_elite(bool value) {
  
  is_elite_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneMonsterInfo.is_elite)
}

// uint32 owner_entity_id = 8;
void SceneMonsterInfo::clear_owner_entity_id() {
  owner_entity_id_ = 0u;
}
::google::protobuf::uint32 SceneMonsterInfo::owner_entity_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.owner_entity_id)
  return owner_entity_id_;
}
void SceneMonsterInfo::set_owner_entity_id(::google::protobuf::uint32 value) {
  
  owner_entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneMonsterInfo.owner_entity_id)
}

// uint32 summoned_tag = 9;
void SceneMonsterInfo::clear_summoned_tag() {
  summoned_tag_ = 0u;
}
::google::protobuf::uint32 SceneMonsterInfo::summoned_tag() const {
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.summoned_tag)
  return summoned_tag_;
}
void SceneMonsterInfo::set_summoned_tag(::google::protobuf::uint32 value) {
  
  summoned_tag_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneMonsterInfo.summoned_tag)
}

// map<uint32, uint32> summon_tag_map = 10;
int SceneMonsterInfo::summon_tag_map_size() const {
  return summon_tag_map_.size();
}
void SceneMonsterInfo::clear_summon_tag_map() {
  summon_tag_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
SceneMonsterInfo::summon_tag_map() const {
  // @@protoc_insertion_point(field_map:proto.SceneMonsterInfo.summon_tag_map)
  return summon_tag_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
SceneMonsterInfo::mutable_summon_tag_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.SceneMonsterInfo.summon_tag_map)
  return summon_tag_map_.MutableMap();
}

// uint32 pose_id = 11;
void SceneMonsterInfo::clear_pose_id() {
  pose_id_ = 0u;
}
::google::protobuf::uint32 SceneMonsterInfo::pose_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.pose_id)
  return pose_id_;
}
void SceneMonsterInfo::set_pose_id(::google::protobuf::uint32 value) {
  
  pose_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneMonsterInfo.pose_id)
}

// .proto.MonsterBornType born_type = 12;
void SceneMonsterInfo::clear_born_type() {
  born_type_ = 0;
}
::proto::MonsterBornType SceneMonsterInfo::born_type() const {
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.born_type)
  return static_cast< ::proto::MonsterBornType >(born_type_);
}
void SceneMonsterInfo::set_born_type(::proto::MonsterBornType value) {
  
  born_type_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneMonsterInfo.born_type)
}

// uint32 block_id = 13;
void SceneMonsterInfo::clear_block_id() {
  block_id_ = 0u;
}
::google::protobuf::uint32 SceneMonsterInfo::block_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.block_id)
  return block_id_;
}
void SceneMonsterInfo::set_block_id(::google::protobuf::uint32 value) {
  
  block_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneMonsterInfo.block_id)
}

// uint32 mark_flag = 14;
void SceneMonsterInfo::clear_mark_flag() {
  mark_flag_ = 0u;
}
::google::protobuf::uint32 SceneMonsterInfo::mark_flag() const {
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.mark_flag)
  return mark_flag_;
}
void SceneMonsterInfo::set_mark_flag(::google::protobuf::uint32 value) {
  
  mark_flag_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneMonsterInfo.mark_flag)
}

// uint32 title_id = 15;
void SceneMonsterInfo::clear_title_id() {
  title_id_ = 0u;
}
::google::protobuf::uint32 SceneMonsterInfo::title_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.title_id)
  return title_id_;
}
void SceneMonsterInfo::set_title_id(::google::protobuf::uint32 value) {
  
  title_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneMonsterInfo.title_id)
}

// uint32 special_name_id = 16;
void SceneMonsterInfo::clear_special_name_id() {
  special_name_id_ = 0u;
}
::google::protobuf::uint32 SceneMonsterInfo::special_name_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.special_name_id)
  return special_name_id_;
}
void SceneMonsterInfo::set_special_name_id(::google::protobuf::uint32 value) {
  
  special_name_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneMonsterInfo.special_name_id)
}

// uint32 attack_target_id = 17;
void SceneMonsterInfo::clear_attack_target_id() {
  attack_target_id_ = 0u;
}
::google::protobuf::uint32 SceneMonsterInfo::attack_target_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.attack_target_id)
  return attack_target_id_;
}
void SceneMonsterInfo::set_attack_target_id(::google::protobuf::uint32 value) {
  
  attack_target_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneMonsterInfo.attack_target_id)
}

// .proto.MonsterRoute monster_route = 18;
bool SceneMonsterInfo::has_monster_route() const {
  return this != internal_default_instance() && monster_route_ != NULL;
}
void SceneMonsterInfo::clear_monster_route() {
  if (GetArenaNoVirtual() == NULL && monster_route_ != NULL) delete monster_route_;
  monster_route_ = NULL;
}
const ::proto::MonsterRoute& SceneMonsterInfo::monster_route() const {
  const ::proto::MonsterRoute* p = monster_route_;
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.monster_route)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::MonsterRoute*>(
      &::proto::_MonsterRoute_default_instance_);
}
::proto::MonsterRoute* SceneMonsterInfo::mutable_monster_route() {
  
  if (monster_route_ == NULL) {
    monster_route_ = new ::proto::MonsterRoute;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneMonsterInfo.monster_route)
  return monster_route_;
}
::proto::MonsterRoute* SceneMonsterInfo::release_monster_route() {
  // @@protoc_insertion_point(field_release:proto.SceneMonsterInfo.monster_route)
  
  ::proto::MonsterRoute* temp = monster_route_;
  monster_route_ = NULL;
  return temp;
}
void SceneMonsterInfo::set_allocated_monster_route(::proto::MonsterRoute* monster_route) {
  delete monster_route_;
  monster_route_ = monster_route;
  if (monster_route) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneMonsterInfo.monster_route)
}

// uint32 ai_config_id = 19;
void SceneMonsterInfo::clear_ai_config_id() {
  ai_config_id_ = 0u;
}
::google::protobuf::uint32 SceneMonsterInfo::ai_config_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.ai_config_id)
  return ai_config_id_;
}
void SceneMonsterInfo::set_ai_config_id(::google::protobuf::uint32 value) {
  
  ai_config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneMonsterInfo.ai_config_id)
}

// uint32 level_route_id = 20;
void SceneMonsterInfo::clear_level_route_id() {
  level_route_id_ = 0u;
}
::google::protobuf::uint32 SceneMonsterInfo::level_route_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.level_route_id)
  return level_route_id_;
}
void SceneMonsterInfo::set_level_route_id(::google::protobuf::uint32 value) {
  
  level_route_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneMonsterInfo.level_route_id)
}

// uint32 init_pose_id = 21;
void SceneMonsterInfo::clear_init_pose_id() {
  init_pose_id_ = 0u;
}
::google::protobuf::uint32 SceneMonsterInfo::init_pose_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.init_pose_id)
  return init_pose_id_;
}
void SceneMonsterInfo::set_init_pose_id(::google::protobuf::uint32 value) {
  
  init_pose_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneMonsterInfo.init_pose_id)
}

// bool is_light = 22;
void SceneMonsterInfo::clear_is_light() {
  is_light_ = false;
}
bool SceneMonsterInfo::is_light() const {
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.is_light)
  return is_light_;
}
void SceneMonsterInfo::set_is_light(bool value) {
  
  is_light_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneMonsterInfo.is_light)
}

// uint32 kill_num = 23;
void SceneMonsterInfo::clear_kill_num() {
  kill_num_ = 0u;
}
::google::protobuf::uint32 SceneMonsterInfo::kill_num() const {
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.kill_num)
  return kill_num_;
}
void SceneMonsterInfo::set_kill_num(::google::protobuf::uint32 value) {
  
  kill_num_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneMonsterInfo.kill_num)
}

// .proto.SceneFishInfo fish_info = 50;
bool SceneMonsterInfo::has_fish_info() const {
  return content_case() == kFishInfo;
}
void SceneMonsterInfo::set_has_fish_info() {
  _oneof_case_[0] = kFishInfo;
}
void SceneMonsterInfo::clear_fish_info() {
  if (has_fish_info()) {
    delete content_.fish_info_;
    clear_has_content();
  }
}
 const ::proto::SceneFishInfo& SceneMonsterInfo::fish_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.fish_info)
  return has_fish_info()
      ? *content_.fish_info_
      : ::proto::SceneFishInfo::default_instance();
}
::proto::SceneFishInfo* SceneMonsterInfo::mutable_fish_info() {
  if (!has_fish_info()) {
    clear_content();
    set_has_fish_info();
    content_.fish_info_ = new ::proto::SceneFishInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneMonsterInfo.fish_info)
  return content_.fish_info_;
}
::proto::SceneFishInfo* SceneMonsterInfo::release_fish_info() {
  // @@protoc_insertion_point(field_release:proto.SceneMonsterInfo.fish_info)
  if (has_fish_info()) {
    clear_has_content();
    ::proto::SceneFishInfo* temp = content_.fish_info_;
    content_.fish_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneMonsterInfo::set_allocated_fish_info(::proto::SceneFishInfo* fish_info) {
  clear_content();
  if (fish_info) {
    set_has_fish_info();
    content_.fish_info_ = fish_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneMonsterInfo.fish_info)
}

// .proto.FishtankFishInfo fishtank_fish_info = 51;
bool SceneMonsterInfo::has_fishtank_fish_info() const {
  return content_case() == kFishtankFishInfo;
}
void SceneMonsterInfo::set_has_fishtank_fish_info() {
  _oneof_case_[0] = kFishtankFishInfo;
}
void SceneMonsterInfo::clear_fishtank_fish_info() {
  if (has_fishtank_fish_info()) {
    delete content_.fishtank_fish_info_;
    clear_has_content();
  }
}
 const ::proto::FishtankFishInfo& SceneMonsterInfo::fishtank_fish_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneMonsterInfo.fishtank_fish_info)
  return has_fishtank_fish_info()
      ? *content_.fishtank_fish_info_
      : ::proto::FishtankFishInfo::default_instance();
}
::proto::FishtankFishInfo* SceneMonsterInfo::mutable_fishtank_fish_info() {
  if (!has_fishtank_fish_info()) {
    clear_content();
    set_has_fishtank_fish_info();
    content_.fishtank_fish_info_ = new ::proto::FishtankFishInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneMonsterInfo.fishtank_fish_info)
  return content_.fishtank_fish_info_;
}
::proto::FishtankFishInfo* SceneMonsterInfo::release_fishtank_fish_info() {
  // @@protoc_insertion_point(field_release:proto.SceneMonsterInfo.fishtank_fish_info)
  if (has_fishtank_fish_info()) {
    clear_has_content();
    ::proto::FishtankFishInfo* temp = content_.fishtank_fish_info_;
    content_.fishtank_fish_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneMonsterInfo::set_allocated_fishtank_fish_info(::proto::FishtankFishInfo* fishtank_fish_info) {
  clear_content();
  if (fishtank_fish_info) {
    set_has_fishtank_fish_info();
    content_.fishtank_fish_info_ = fishtank_fish_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneMonsterInfo.fishtank_fish_info)
}

bool SceneMonsterInfo::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
void SceneMonsterInfo::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
SceneMonsterInfo::ContentCase SceneMonsterInfo::content_case() const {
  return SceneMonsterInfo::ContentCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneNpcInfo::kNpcIdFieldNumber;
const int SceneNpcInfo::kRoomIdFieldNumber;
const int SceneNpcInfo::kParentQuestIdFieldNumber;
const int SceneNpcInfo::kBlockIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneNpcInfo::SceneNpcInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneNpcInfo)
}
SceneNpcInfo::SceneNpcInfo(const SceneNpcInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&npc_id_, &from.npc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_id_) -
    reinterpret_cast<char*>(&npc_id_)) + sizeof(block_id_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneNpcInfo)
}

void SceneNpcInfo::SharedCtor() {
  ::memset(&npc_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_id_) -
      reinterpret_cast<char*>(&npc_id_)) + sizeof(block_id_));
  _cached_size_ = 0;
}

SceneNpcInfo::~SceneNpcInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneNpcInfo)
  SharedDtor();
}

void SceneNpcInfo::SharedDtor() {
}

void SceneNpcInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneNpcInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneNpcInfo& SceneNpcInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneNpcInfo* SceneNpcInfo::New(::google::protobuf::Arena* arena) const {
  SceneNpcInfo* n = new SceneNpcInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneNpcInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneNpcInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&npc_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_id_) -
      reinterpret_cast<char*>(&npc_id_)) + sizeof(block_id_));
  _internal_metadata_.Clear();
}

bool SceneNpcInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneNpcInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 npc_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 parent_quest_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_quest_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 block_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneNpcInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneNpcInfo)
  return false;
#undef DO_
}

void SceneNpcInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneNpcInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 npc_id = 1;
  if (this->npc_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npc_id(), output);
  }

  // uint32 room_id = 2;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_id(), output);
  }

  // uint32 parent_quest_id = 3;
  if (this->parent_quest_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->parent_quest_id(), output);
  }

  // uint32 block_id = 4;
  if (this->block_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->block_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneNpcInfo)
}

::google::protobuf::uint8* SceneNpcInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneNpcInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 npc_id = 1;
  if (this->npc_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npc_id(), target);
  }

  // uint32 room_id = 2;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->room_id(), target);
  }

  // uint32 parent_quest_id = 3;
  if (this->parent_quest_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->parent_quest_id(), target);
  }

  // uint32 block_id = 4;
  if (this->block_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->block_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneNpcInfo)
  return target;
}

size_t SceneNpcInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneNpcInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 npc_id = 1;
  if (this->npc_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->npc_id());
  }

  // uint32 room_id = 2;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->room_id());
  }

  // uint32 parent_quest_id = 3;
  if (this->parent_quest_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->parent_quest_id());
  }

  // uint32 block_id = 4;
  if (this->block_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->block_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneNpcInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneNpcInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneNpcInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneNpcInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneNpcInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneNpcInfo)
    MergeFrom(*source);
  }
}

void SceneNpcInfo::MergeFrom(const SceneNpcInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneNpcInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.npc_id() != 0) {
    set_npc_id(from.npc_id());
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.parent_quest_id() != 0) {
    set_parent_quest_id(from.parent_quest_id());
  }
  if (from.block_id() != 0) {
    set_block_id(from.block_id());
  }
}

void SceneNpcInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneNpcInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneNpcInfo::CopyFrom(const SceneNpcInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneNpcInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneNpcInfo::IsInitialized() const {
  return true;
}

void SceneNpcInfo::Swap(SceneNpcInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneNpcInfo::InternalSwap(SceneNpcInfo* other) {
  using std::swap;
  swap(npc_id_, other->npc_id_);
  swap(room_id_, other->room_id_);
  swap(parent_quest_id_, other->parent_quest_id_);
  swap(block_id_, other->block_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneNpcInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneNpcInfo

// uint32 npc_id = 1;
void SceneNpcInfo::clear_npc_id() {
  npc_id_ = 0u;
}
::google::protobuf::uint32 SceneNpcInfo::npc_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneNpcInfo.npc_id)
  return npc_id_;
}
void SceneNpcInfo::set_npc_id(::google::protobuf::uint32 value) {
  
  npc_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneNpcInfo.npc_id)
}

// uint32 room_id = 2;
void SceneNpcInfo::clear_room_id() {
  room_id_ = 0u;
}
::google::protobuf::uint32 SceneNpcInfo::room_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneNpcInfo.room_id)
  return room_id_;
}
void SceneNpcInfo::set_room_id(::google::protobuf::uint32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneNpcInfo.room_id)
}

// uint32 parent_quest_id = 3;
void SceneNpcInfo::clear_parent_quest_id() {
  parent_quest_id_ = 0u;
}
::google::protobuf::uint32 SceneNpcInfo::parent_quest_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneNpcInfo.parent_quest_id)
  return parent_quest_id_;
}
void SceneNpcInfo::set_parent_quest_id(::google::protobuf::uint32 value) {
  
  parent_quest_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneNpcInfo.parent_quest_id)
}

// uint32 block_id = 4;
void SceneNpcInfo::clear_block_id() {
  block_id_ = 0u;
}
::google::protobuf::uint32 SceneNpcInfo::block_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneNpcInfo.block_id)
  return block_id_;
}
void SceneNpcInfo::set_block_id(::google::protobuf::uint32 value) {
  
  block_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneNpcInfo.block_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorktopInfo::kOptionListFieldNumber;
const int WorktopInfo::kIsGuestCanOperateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorktopInfo::WorktopInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.WorktopInfo)
}
WorktopInfo::WorktopInfo(const WorktopInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      option_list_(from.option_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_guest_can_operate_ = from.is_guest_can_operate_;
  // @@protoc_insertion_point(copy_constructor:proto.WorktopInfo)
}

void WorktopInfo::SharedCtor() {
  is_guest_can_operate_ = false;
  _cached_size_ = 0;
}

WorktopInfo::~WorktopInfo() {
  // @@protoc_insertion_point(destructor:proto.WorktopInfo)
  SharedDtor();
}

void WorktopInfo::SharedDtor() {
}

void WorktopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorktopInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WorktopInfo& WorktopInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

WorktopInfo* WorktopInfo::New(::google::protobuf::Arena* arena) const {
  WorktopInfo* n = new WorktopInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorktopInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.WorktopInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  option_list_.Clear();
  is_guest_can_operate_ = false;
  _internal_metadata_.Clear();
}

bool WorktopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.WorktopInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 option_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_option_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_option_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_guest_can_operate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_guest_can_operate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.WorktopInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.WorktopInfo)
  return false;
#undef DO_
}

void WorktopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.WorktopInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 option_list = 1;
  if (this->option_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _option_list_cached_byte_size_));
  }
  for (int i = 0, n = this->option_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->option_list(i), output);
  }

  // bool is_guest_can_operate = 2;
  if (this->is_guest_can_operate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_guest_can_operate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.WorktopInfo)
}

::google::protobuf::uint8* WorktopInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.WorktopInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 option_list = 1;
  if (this->option_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _option_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->option_list_, target);
  }

  // bool is_guest_can_operate = 2;
  if (this->is_guest_can_operate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_guest_can_operate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.WorktopInfo)
  return target;
}

size_t WorktopInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.WorktopInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 option_list = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->option_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _option_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bool is_guest_can_operate = 2;
  if (this->is_guest_can_operate() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorktopInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.WorktopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WorktopInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorktopInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.WorktopInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.WorktopInfo)
    MergeFrom(*source);
  }
}

void WorktopInfo::MergeFrom(const WorktopInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.WorktopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  option_list_.MergeFrom(from.option_list_);
  if (from.is_guest_can_operate() != 0) {
    set_is_guest_can_operate(from.is_guest_can_operate());
  }
}

void WorktopInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.WorktopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorktopInfo::CopyFrom(const WorktopInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.WorktopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorktopInfo::IsInitialized() const {
  return true;
}

void WorktopInfo::Swap(WorktopInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorktopInfo::InternalSwap(WorktopInfo* other) {
  using std::swap;
  option_list_.InternalSwap(&other->option_list_);
  swap(is_guest_can_operate_, other->is_guest_can_operate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorktopInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorktopInfo

// repeated uint32 option_list = 1;
int WorktopInfo::option_list_size() const {
  return option_list_.size();
}
void WorktopInfo::clear_option_list() {
  option_list_.Clear();
}
::google::protobuf::uint32 WorktopInfo::option_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.WorktopInfo.option_list)
  return option_list_.Get(index);
}
void WorktopInfo::set_option_list(int index, ::google::protobuf::uint32 value) {
  option_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.WorktopInfo.option_list)
}
void WorktopInfo::add_option_list(::google::protobuf::uint32 value) {
  option_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.WorktopInfo.option_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
WorktopInfo::option_list() const {
  // @@protoc_insertion_point(field_list:proto.WorktopInfo.option_list)
  return option_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
WorktopInfo::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.WorktopInfo.option_list)
  return &option_list_;
}

// bool is_guest_can_operate = 2;
void WorktopInfo::clear_is_guest_can_operate() {
  is_guest_can_operate_ = false;
}
bool WorktopInfo::is_guest_can_operate() const {
  // @@protoc_insertion_point(field_get:proto.WorktopInfo.is_guest_can_operate)
  return is_guest_can_operate_;
}
void WorktopInfo::set_is_guest_can_operate(bool value) {
  
  is_guest_can_operate_ = value;
  // @@protoc_insertion_point(field_set:proto.WorktopInfo.is_guest_can_operate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MathQuaternion::kXFieldNumber;
const int MathQuaternion::kYFieldNumber;
const int MathQuaternion::kZFieldNumber;
const int MathQuaternion::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MathQuaternion::MathQuaternion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MathQuaternion)
}
MathQuaternion::MathQuaternion(const MathQuaternion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:proto.MathQuaternion)
}

void MathQuaternion::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
  _cached_size_ = 0;
}

MathQuaternion::~MathQuaternion() {
  // @@protoc_insertion_point(destructor:proto.MathQuaternion)
  SharedDtor();
}

void MathQuaternion::SharedDtor() {
}

void MathQuaternion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MathQuaternion::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MathQuaternion& MathQuaternion::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

MathQuaternion* MathQuaternion::New(::google::protobuf::Arena* arena) const {
  MathQuaternion* n = new MathQuaternion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MathQuaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MathQuaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
  _internal_metadata_.Clear();
}

bool MathQuaternion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MathQuaternion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float w = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MathQuaternion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MathQuaternion)
  return false;
#undef DO_
}

void MathQuaternion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MathQuaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // float w = 4;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->w(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MathQuaternion)
}

::google::protobuf::uint8* MathQuaternion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MathQuaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // float w = 4;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->w(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MathQuaternion)
  return target;
}

size_t MathQuaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MathQuaternion)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // float w = 4;
  if (this->w() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MathQuaternion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MathQuaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const MathQuaternion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MathQuaternion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MathQuaternion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MathQuaternion)
    MergeFrom(*source);
  }
}

void MathQuaternion::MergeFrom(const MathQuaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MathQuaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.w() != 0) {
    set_w(from.w());
  }
}

void MathQuaternion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MathQuaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MathQuaternion::CopyFrom(const MathQuaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MathQuaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MathQuaternion::IsInitialized() const {
  return true;
}

void MathQuaternion::Swap(MathQuaternion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MathQuaternion::InternalSwap(MathQuaternion* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(w_, other->w_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MathQuaternion::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MathQuaternion

// float x = 1;
void MathQuaternion::clear_x() {
  x_ = 0;
}
float MathQuaternion::x() const {
  // @@protoc_insertion_point(field_get:proto.MathQuaternion.x)
  return x_;
}
void MathQuaternion::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.MathQuaternion.x)
}

// float y = 2;
void MathQuaternion::clear_y() {
  y_ = 0;
}
float MathQuaternion::y() const {
  // @@protoc_insertion_point(field_get:proto.MathQuaternion.y)
  return y_;
}
void MathQuaternion::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.MathQuaternion.y)
}

// float z = 3;
void MathQuaternion::clear_z() {
  z_ = 0;
}
float MathQuaternion::z() const {
  // @@protoc_insertion_point(field_get:proto.MathQuaternion.z)
  return z_;
}
void MathQuaternion::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:proto.MathQuaternion.z)
}

// float w = 4;
void MathQuaternion::clear_w() {
  w_ = 0;
}
float MathQuaternion::w() const {
  // @@protoc_insertion_point(field_get:proto.MathQuaternion.w)
  return w_;
}
void MathQuaternion::set_w(float value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:proto.MathQuaternion.w)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlatformInfo::kRouteIdFieldNumber;
const int PlatformInfo::kStartIndexFieldNumber;
const int PlatformInfo::kStartRouteTimeFieldNumber;
const int PlatformInfo::kStartSceneTimeFieldNumber;
const int PlatformInfo::kStartPosFieldNumber;
const int PlatformInfo::kIsStartedFieldNumber;
const int PlatformInfo::kStartRotFieldNumber;
const int PlatformInfo::kStopSceneTimeFieldNumber;
const int PlatformInfo::kPosOffsetFieldNumber;
const int PlatformInfo::kRotOffsetFieldNumber;
const int PlatformInfo::kMovingPlatformTypeFieldNumber;
const int PlatformInfo::kIsActiveFieldNumber;
const int PlatformInfo::kRouteFieldNumber;
const int PlatformInfo::kPointIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlatformInfo::PlatformInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PlatformInfo)
}
PlatformInfo::PlatformInfo(const PlatformInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start_pos()) {
    start_pos_ = new ::proto::Vector(*from.start_pos_);
  } else {
    start_pos_ = NULL;
  }
  if (from.has_start_rot()) {
    start_rot_ = new ::proto::MathQuaternion(*from.start_rot_);
  } else {
    start_rot_ = NULL;
  }
  if (from.has_pos_offset()) {
    pos_offset_ = new ::proto::Vector(*from.pos_offset_);
  } else {
    pos_offset_ = NULL;
  }
  if (from.has_rot_offset()) {
    rot_offset_ = new ::proto::MathQuaternion(*from.rot_offset_);
  } else {
    rot_offset_ = NULL;
  }
  if (from.has_route()) {
    route_ = new ::proto::Route(*from.route_);
  } else {
    route_ = NULL;
  }
  ::memcpy(&route_id_, &from.route_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&point_id_) -
    reinterpret_cast<char*>(&route_id_)) + sizeof(point_id_));
  // @@protoc_insertion_point(copy_constructor:proto.PlatformInfo)
}

void PlatformInfo::SharedCtor() {
  ::memset(&start_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_id_) -
      reinterpret_cast<char*>(&start_pos_)) + sizeof(point_id_));
  _cached_size_ = 0;
}

PlatformInfo::~PlatformInfo() {
  // @@protoc_insertion_point(destructor:proto.PlatformInfo)
  SharedDtor();
}

void PlatformInfo::SharedDtor() {
  if (this != internal_default_instance()) delete start_pos_;
  if (this != internal_default_instance()) delete start_rot_;
  if (this != internal_default_instance()) delete pos_offset_;
  if (this != internal_default_instance()) delete rot_offset_;
  if (this != internal_default_instance()) delete route_;
}

void PlatformInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlatformInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlatformInfo& PlatformInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlatformInfo* PlatformInfo::New(::google::protobuf::Arena* arena) const {
  PlatformInfo* n = new PlatformInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlatformInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PlatformInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && start_pos_ != NULL) {
    delete start_pos_;
  }
  start_pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && start_rot_ != NULL) {
    delete start_rot_;
  }
  start_rot_ = NULL;
  if (GetArenaNoVirtual() == NULL && pos_offset_ != NULL) {
    delete pos_offset_;
  }
  pos_offset_ = NULL;
  if (GetArenaNoVirtual() == NULL && rot_offset_ != NULL) {
    delete rot_offset_;
  }
  rot_offset_ = NULL;
  if (GetArenaNoVirtual() == NULL && route_ != NULL) {
    delete route_;
  }
  route_ = NULL;
  ::memset(&route_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_id_) -
      reinterpret_cast<char*>(&route_id_)) + sizeof(point_id_));
  _internal_metadata_.Clear();
}

bool PlatformInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PlatformInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 route_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &route_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 start_route_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_route_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 start_scene_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_scene_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector start_pos = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_started = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_started_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MathQuaternion start_rot = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_rot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 stop_scene_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stop_scene_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector pos_offset = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MathQuaternion rot_offset = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rot_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MovingPlatformType moving_platform_type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_moving_platform_type(static_cast< ::proto::MovingPlatformType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_active = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Route route = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 point_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PlatformInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PlatformInfo)
  return false;
#undef DO_
}

void PlatformInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PlatformInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 route_id = 1;
  if (this->route_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->route_id(), output);
  }

  // int32 start_index = 2;
  if (this->start_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_index(), output);
  }

  // uint32 start_route_time = 3;
  if (this->start_route_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start_route_time(), output);
  }

  // uint32 start_scene_time = 4;
  if (this->start_scene_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_scene_time(), output);
  }

  // .proto.Vector start_pos = 7;
  if (this->has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->start_pos_, output);
  }

  // bool is_started = 8;
  if (this->is_started() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_started(), output);
  }

  // .proto.MathQuaternion start_rot = 9;
  if (this->has_start_rot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->start_rot_, output);
  }

  // uint32 stop_scene_time = 10;
  if (this->stop_scene_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->stop_scene_time(), output);
  }

  // .proto.Vector pos_offset = 11;
  if (this->has_pos_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->pos_offset_, output);
  }

  // .proto.MathQuaternion rot_offset = 12;
  if (this->has_rot_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->rot_offset_, output);
  }

  // .proto.MovingPlatformType moving_platform_type = 13;
  if (this->moving_platform_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->moving_platform_type(), output);
  }

  // bool is_active = 14;
  if (this->is_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_active(), output);
  }

  // .proto.Route route = 15;
  if (this->has_route()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->route_, output);
  }

  // uint32 point_id = 16;
  if (this->point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->point_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PlatformInfo)
}

::google::protobuf::uint8* PlatformInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PlatformInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 route_id = 1;
  if (this->route_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->route_id(), target);
  }

  // int32 start_index = 2;
  if (this->start_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start_index(), target);
  }

  // uint32 start_route_time = 3;
  if (this->start_route_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->start_route_time(), target);
  }

  // uint32 start_scene_time = 4;
  if (this->start_scene_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_scene_time(), target);
  }

  // .proto.Vector start_pos = 7;
  if (this->has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->start_pos_, deterministic, target);
  }

  // bool is_started = 8;
  if (this->is_started() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_started(), target);
  }

  // .proto.MathQuaternion start_rot = 9;
  if (this->has_start_rot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->start_rot_, deterministic, target);
  }

  // uint32 stop_scene_time = 10;
  if (this->stop_scene_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->stop_scene_time(), target);
  }

  // .proto.Vector pos_offset = 11;
  if (this->has_pos_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->pos_offset_, deterministic, target);
  }

  // .proto.MathQuaternion rot_offset = 12;
  if (this->has_rot_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->rot_offset_, deterministic, target);
  }

  // .proto.MovingPlatformType moving_platform_type = 13;
  if (this->moving_platform_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->moving_platform_type(), target);
  }

  // bool is_active = 14;
  if (this->is_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_active(), target);
  }

  // .proto.Route route = 15;
  if (this->has_route()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->route_, deterministic, target);
  }

  // uint32 point_id = 16;
  if (this->point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->point_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PlatformInfo)
  return target;
}

size_t PlatformInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PlatformInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.Vector start_pos = 7;
  if (this->has_start_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_pos_);
  }

  // .proto.MathQuaternion start_rot = 9;
  if (this->has_start_rot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_rot_);
  }

  // .proto.Vector pos_offset = 11;
  if (this->has_pos_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_offset_);
  }

  // .proto.MathQuaternion rot_offset = 12;
  if (this->has_rot_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rot_offset_);
  }

  // .proto.Route route = 15;
  if (this->has_route()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->route_);
  }

  // uint32 route_id = 1;
  if (this->route_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->route_id());
  }

  // int32 start_index = 2;
  if (this->start_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start_index());
  }

  // uint32 start_route_time = 3;
  if (this->start_route_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start_route_time());
  }

  // uint32 start_scene_time = 4;
  if (this->start_scene_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start_scene_time());
  }

  // uint32 stop_scene_time = 10;
  if (this->stop_scene_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stop_scene_time());
  }

  // bool is_started = 8;
  if (this->is_started() != 0) {
    total_size += 1 + 1;
  }

  // bool is_active = 14;
  if (this->is_active() != 0) {
    total_size += 1 + 1;
  }

  // .proto.MovingPlatformType moving_platform_type = 13;
  if (this->moving_platform_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->moving_platform_type());
  }

  // uint32 point_id = 16;
  if (this->point_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlatformInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PlatformInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlatformInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlatformInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PlatformInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PlatformInfo)
    MergeFrom(*source);
  }
}

void PlatformInfo::MergeFrom(const PlatformInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PlatformInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start_pos()) {
    mutable_start_pos()->::proto::Vector::MergeFrom(from.start_pos());
  }
  if (from.has_start_rot()) {
    mutable_start_rot()->::proto::MathQuaternion::MergeFrom(from.start_rot());
  }
  if (from.has_pos_offset()) {
    mutable_pos_offset()->::proto::Vector::MergeFrom(from.pos_offset());
  }
  if (from.has_rot_offset()) {
    mutable_rot_offset()->::proto::MathQuaternion::MergeFrom(from.rot_offset());
  }
  if (from.has_route()) {
    mutable_route()->::proto::Route::MergeFrom(from.route());
  }
  if (from.route_id() != 0) {
    set_route_id(from.route_id());
  }
  if (from.start_index() != 0) {
    set_start_index(from.start_index());
  }
  if (from.start_route_time() != 0) {
    set_start_route_time(from.start_route_time());
  }
  if (from.start_scene_time() != 0) {
    set_start_scene_time(from.start_scene_time());
  }
  if (from.stop_scene_time() != 0) {
    set_stop_scene_time(from.stop_scene_time());
  }
  if (from.is_started() != 0) {
    set_is_started(from.is_started());
  }
  if (from.is_active() != 0) {
    set_is_active(from.is_active());
  }
  if (from.moving_platform_type() != 0) {
    set_moving_platform_type(from.moving_platform_type());
  }
  if (from.point_id() != 0) {
    set_point_id(from.point_id());
  }
}

void PlatformInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PlatformInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlatformInfo::CopyFrom(const PlatformInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PlatformInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlatformInfo::IsInitialized() const {
  return true;
}

void PlatformInfo::Swap(PlatformInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlatformInfo::InternalSwap(PlatformInfo* other) {
  using std::swap;
  swap(start_pos_, other->start_pos_);
  swap(start_rot_, other->start_rot_);
  swap(pos_offset_, other->pos_offset_);
  swap(rot_offset_, other->rot_offset_);
  swap(route_, other->route_);
  swap(route_id_, other->route_id_);
  swap(start_index_, other->start_index_);
  swap(start_route_time_, other->start_route_time_);
  swap(start_scene_time_, other->start_scene_time_);
  swap(stop_scene_time_, other->stop_scene_time_);
  swap(is_started_, other->is_started_);
  swap(is_active_, other->is_active_);
  swap(moving_platform_type_, other->moving_platform_type_);
  swap(point_id_, other->point_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlatformInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlatformInfo

// uint32 route_id = 1;
void PlatformInfo::clear_route_id() {
  route_id_ = 0u;
}
::google::protobuf::uint32 PlatformInfo::route_id() const {
  // @@protoc_insertion_point(field_get:proto.PlatformInfo.route_id)
  return route_id_;
}
void PlatformInfo::set_route_id(::google::protobuf::uint32 value) {
  
  route_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlatformInfo.route_id)
}

// int32 start_index = 2;
void PlatformInfo::clear_start_index() {
  start_index_ = 0;
}
::google::protobuf::int32 PlatformInfo::start_index() const {
  // @@protoc_insertion_point(field_get:proto.PlatformInfo.start_index)
  return start_index_;
}
void PlatformInfo::set_start_index(::google::protobuf::int32 value) {
  
  start_index_ = value;
  // @@protoc_insertion_point(field_set:proto.PlatformInfo.start_index)
}

// uint32 start_route_time = 3;
void PlatformInfo::clear_start_route_time() {
  start_route_time_ = 0u;
}
::google::protobuf::uint32 PlatformInfo::start_route_time() const {
  // @@protoc_insertion_point(field_get:proto.PlatformInfo.start_route_time)
  return start_route_time_;
}
void PlatformInfo::set_start_route_time(::google::protobuf::uint32 value) {
  
  start_route_time_ = value;
  // @@protoc_insertion_point(field_set:proto.PlatformInfo.start_route_time)
}

// uint32 start_scene_time = 4;
void PlatformInfo::clear_start_scene_time() {
  start_scene_time_ = 0u;
}
::google::protobuf::uint32 PlatformInfo::start_scene_time() const {
  // @@protoc_insertion_point(field_get:proto.PlatformInfo.start_scene_time)
  return start_scene_time_;
}
void PlatformInfo::set_start_scene_time(::google::protobuf::uint32 value) {
  
  start_scene_time_ = value;
  // @@protoc_insertion_point(field_set:proto.PlatformInfo.start_scene_time)
}

// .proto.Vector start_pos = 7;
bool PlatformInfo::has_start_pos() const {
  return this != internal_default_instance() && start_pos_ != NULL;
}
void PlatformInfo::clear_start_pos() {
  if (GetArenaNoVirtual() == NULL && start_pos_ != NULL) delete start_pos_;
  start_pos_ = NULL;
}
const ::proto::Vector& PlatformInfo::start_pos() const {
  const ::proto::Vector* p = start_pos_;
  // @@protoc_insertion_point(field_get:proto.PlatformInfo.start_pos)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* PlatformInfo::mutable_start_pos() {
  
  if (start_pos_ == NULL) {
    start_pos_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.PlatformInfo.start_pos)
  return start_pos_;
}
::proto::Vector* PlatformInfo::release_start_pos() {
  // @@protoc_insertion_point(field_release:proto.PlatformInfo.start_pos)
  
  ::proto::Vector* temp = start_pos_;
  start_pos_ = NULL;
  return temp;
}
void PlatformInfo::set_allocated_start_pos(::proto::Vector* start_pos) {
  delete start_pos_;
  start_pos_ = start_pos;
  if (start_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.PlatformInfo.start_pos)
}

// bool is_started = 8;
void PlatformInfo::clear_is_started() {
  is_started_ = false;
}
bool PlatformInfo::is_started() const {
  // @@protoc_insertion_point(field_get:proto.PlatformInfo.is_started)
  return is_started_;
}
void PlatformInfo::set_is_started(bool value) {
  
  is_started_ = value;
  // @@protoc_insertion_point(field_set:proto.PlatformInfo.is_started)
}

// .proto.MathQuaternion start_rot = 9;
bool PlatformInfo::has_start_rot() const {
  return this != internal_default_instance() && start_rot_ != NULL;
}
void PlatformInfo::clear_start_rot() {
  if (GetArenaNoVirtual() == NULL && start_rot_ != NULL) delete start_rot_;
  start_rot_ = NULL;
}
const ::proto::MathQuaternion& PlatformInfo::start_rot() const {
  const ::proto::MathQuaternion* p = start_rot_;
  // @@protoc_insertion_point(field_get:proto.PlatformInfo.start_rot)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::MathQuaternion*>(
      &::proto::_MathQuaternion_default_instance_);
}
::proto::MathQuaternion* PlatformInfo::mutable_start_rot() {
  
  if (start_rot_ == NULL) {
    start_rot_ = new ::proto::MathQuaternion;
  }
  // @@protoc_insertion_point(field_mutable:proto.PlatformInfo.start_rot)
  return start_rot_;
}
::proto::MathQuaternion* PlatformInfo::release_start_rot() {
  // @@protoc_insertion_point(field_release:proto.PlatformInfo.start_rot)
  
  ::proto::MathQuaternion* temp = start_rot_;
  start_rot_ = NULL;
  return temp;
}
void PlatformInfo::set_allocated_start_rot(::proto::MathQuaternion* start_rot) {
  delete start_rot_;
  start_rot_ = start_rot;
  if (start_rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.PlatformInfo.start_rot)
}

// uint32 stop_scene_time = 10;
void PlatformInfo::clear_stop_scene_time() {
  stop_scene_time_ = 0u;
}
::google::protobuf::uint32 PlatformInfo::stop_scene_time() const {
  // @@protoc_insertion_point(field_get:proto.PlatformInfo.stop_scene_time)
  return stop_scene_time_;
}
void PlatformInfo::set_stop_scene_time(::google::protobuf::uint32 value) {
  
  stop_scene_time_ = value;
  // @@protoc_insertion_point(field_set:proto.PlatformInfo.stop_scene_time)
}

// .proto.Vector pos_offset = 11;
bool PlatformInfo::has_pos_offset() const {
  return this != internal_default_instance() && pos_offset_ != NULL;
}
void PlatformInfo::clear_pos_offset() {
  if (GetArenaNoVirtual() == NULL && pos_offset_ != NULL) delete pos_offset_;
  pos_offset_ = NULL;
}
const ::proto::Vector& PlatformInfo::pos_offset() const {
  const ::proto::Vector* p = pos_offset_;
  // @@protoc_insertion_point(field_get:proto.PlatformInfo.pos_offset)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* PlatformInfo::mutable_pos_offset() {
  
  if (pos_offset_ == NULL) {
    pos_offset_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.PlatformInfo.pos_offset)
  return pos_offset_;
}
::proto::Vector* PlatformInfo::release_pos_offset() {
  // @@protoc_insertion_point(field_release:proto.PlatformInfo.pos_offset)
  
  ::proto::Vector* temp = pos_offset_;
  pos_offset_ = NULL;
  return temp;
}
void PlatformInfo::set_allocated_pos_offset(::proto::Vector* pos_offset) {
  delete pos_offset_;
  pos_offset_ = pos_offset;
  if (pos_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.PlatformInfo.pos_offset)
}

// .proto.MathQuaternion rot_offset = 12;
bool PlatformInfo::has_rot_offset() const {
  return this != internal_default_instance() && rot_offset_ != NULL;
}
void PlatformInfo::clear_rot_offset() {
  if (GetArenaNoVirtual() == NULL && rot_offset_ != NULL) delete rot_offset_;
  rot_offset_ = NULL;
}
const ::proto::MathQuaternion& PlatformInfo::rot_offset() const {
  const ::proto::MathQuaternion* p = rot_offset_;
  // @@protoc_insertion_point(field_get:proto.PlatformInfo.rot_offset)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::MathQuaternion*>(
      &::proto::_MathQuaternion_default_instance_);
}
::proto::MathQuaternion* PlatformInfo::mutable_rot_offset() {
  
  if (rot_offset_ == NULL) {
    rot_offset_ = new ::proto::MathQuaternion;
  }
  // @@protoc_insertion_point(field_mutable:proto.PlatformInfo.rot_offset)
  return rot_offset_;
}
::proto::MathQuaternion* PlatformInfo::release_rot_offset() {
  // @@protoc_insertion_point(field_release:proto.PlatformInfo.rot_offset)
  
  ::proto::MathQuaternion* temp = rot_offset_;
  rot_offset_ = NULL;
  return temp;
}
void PlatformInfo::set_allocated_rot_offset(::proto::MathQuaternion* rot_offset) {
  delete rot_offset_;
  rot_offset_ = rot_offset;
  if (rot_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.PlatformInfo.rot_offset)
}

// .proto.MovingPlatformType moving_platform_type = 13;
void PlatformInfo::clear_moving_platform_type() {
  moving_platform_type_ = 0;
}
::proto::MovingPlatformType PlatformInfo::moving_platform_type() const {
  // @@protoc_insertion_point(field_get:proto.PlatformInfo.moving_platform_type)
  return static_cast< ::proto::MovingPlatformType >(moving_platform_type_);
}
void PlatformInfo::set_moving_platform_type(::proto::MovingPlatformType value) {
  
  moving_platform_type_ = value;
  // @@protoc_insertion_point(field_set:proto.PlatformInfo.moving_platform_type)
}

// bool is_active = 14;
void PlatformInfo::clear_is_active() {
  is_active_ = false;
}
bool PlatformInfo::is_active() const {
  // @@protoc_insertion_point(field_get:proto.PlatformInfo.is_active)
  return is_active_;
}
void PlatformInfo::set_is_active(bool value) {
  
  is_active_ = value;
  // @@protoc_insertion_point(field_set:proto.PlatformInfo.is_active)
}

// .proto.Route route = 15;
bool PlatformInfo::has_route() const {
  return this != internal_default_instance() && route_ != NULL;
}
void PlatformInfo::clear_route() {
  if (GetArenaNoVirtual() == NULL && route_ != NULL) delete route_;
  route_ = NULL;
}
const ::proto::Route& PlatformInfo::route() const {
  const ::proto::Route* p = route_;
  // @@protoc_insertion_point(field_get:proto.PlatformInfo.route)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Route*>(
      &::proto::_Route_default_instance_);
}
::proto::Route* PlatformInfo::mutable_route() {
  
  if (route_ == NULL) {
    route_ = new ::proto::Route;
  }
  // @@protoc_insertion_point(field_mutable:proto.PlatformInfo.route)
  return route_;
}
::proto::Route* PlatformInfo::release_route() {
  // @@protoc_insertion_point(field_release:proto.PlatformInfo.route)
  
  ::proto::Route* temp = route_;
  route_ = NULL;
  return temp;
}
void PlatformInfo::set_allocated_route(::proto::Route* route) {
  delete route_;
  route_ = route;
  if (route) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.PlatformInfo.route)
}

// uint32 point_id = 16;
void PlatformInfo::clear_point_id() {
  point_id_ = 0u;
}
::google::protobuf::uint32 PlatformInfo::point_id() const {
  // @@protoc_insertion_point(field_get:proto.PlatformInfo.point_id)
  return point_id_;
}
void PlatformInfo::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlatformInfo.point_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoutePoint::kPositionFieldNumber;
const int RoutePoint::kArriveRangeFieldNumber;
const int RoutePoint::kHasReachEventFieldNumber;
const int RoutePoint::kVelocityFieldNumber;
const int RoutePoint::kTimeFieldNumber;
const int RoutePoint::kRotationFieldNumber;
const int RoutePoint::kRotationSpeedFieldNumber;
const int RoutePoint::kAxisSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoutePoint::RoutePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RoutePoint)
}
RoutePoint::RoutePoint(const RoutePoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::proto::Vector(*from.position_);
  } else {
    position_ = NULL;
  }
  ::memcpy(&arrive_range_, &from.arrive_range_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_reach_event_) -
    reinterpret_cast<char*>(&arrive_range_)) + sizeof(has_reach_event_));
  clear_has_move_params();
  switch (from.move_params_case()) {
    case kVelocity: {
      set_velocity(from.velocity());
      break;
    }
    case kTime: {
      set_time(from.time());
      break;
    }
    case MOVE_PARAMS_NOT_SET: {
      break;
    }
  }
  clear_has_rotate_params();
  switch (from.rotate_params_case()) {
    case kRotation: {
      mutable_rotation()->::proto::Vector::MergeFrom(from.rotation());
      break;
    }
    case kRotationSpeed: {
      mutable_rotation_speed()->::proto::MathQuaternion::MergeFrom(from.rotation_speed());
      break;
    }
    case kAxisSpeed: {
      mutable_axis_speed()->::proto::MathQuaternion::MergeFrom(from.axis_speed());
      break;
    }
    case ROTATE_PARAMS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.RoutePoint)
}

void RoutePoint::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_reach_event_) -
      reinterpret_cast<char*>(&position_)) + sizeof(has_reach_event_));
  clear_has_move_params();
  clear_has_rotate_params();
  _cached_size_ = 0;
}

RoutePoint::~RoutePoint() {
  // @@protoc_insertion_point(destructor:proto.RoutePoint)
  SharedDtor();
}

void RoutePoint::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (has_move_params()) {
    clear_move_params();
  }
  if (has_rotate_params()) {
    clear_rotate_params();
  }
}

void RoutePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoutePoint::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoutePoint& RoutePoint::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoutePoint* RoutePoint::New(::google::protobuf::Arena* arena) const {
  RoutePoint* n = new RoutePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoutePoint::clear_move_params() {
// @@protoc_insertion_point(one_of_clear_start:proto.RoutePoint)
  switch (move_params_case()) {
    case kVelocity: {
      // No need to clear
      break;
    }
    case kTime: {
      // No need to clear
      break;
    }
    case MOVE_PARAMS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MOVE_PARAMS_NOT_SET;
}

void RoutePoint::clear_rotate_params() {
// @@protoc_insertion_point(one_of_clear_start:proto.RoutePoint)
  switch (rotate_params_case()) {
    case kRotation: {
      delete rotate_params_.rotation_;
      break;
    }
    case kRotationSpeed: {
      delete rotate_params_.rotation_speed_;
      break;
    }
    case kAxisSpeed: {
      delete rotate_params_.axis_speed_;
      break;
    }
    case ROTATE_PARAMS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = ROTATE_PARAMS_NOT_SET;
}


void RoutePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RoutePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  ::memset(&arrive_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_reach_event_) -
      reinterpret_cast<char*>(&arrive_range_)) + sizeof(has_reach_event_));
  clear_move_params();
  clear_rotate_params();
  _internal_metadata_.Clear();
}

bool RoutePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.RoutePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.Vector position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float arrive_range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &arrive_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_reach_event = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_reach_event_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float velocity = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          clear_move_params();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &move_params_.velocity_)));
          set_has_velocity();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          clear_move_params();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &move_params_.time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector rotation = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MathQuaternion rotation_speed = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MathQuaternion axis_speed = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_axis_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.RoutePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.RoutePoint)
  return false;
#undef DO_
}

void RoutePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.RoutePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Vector position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // float arrive_range = 2;
  if (this->arrive_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->arrive_range(), output);
  }

  // bool has_reach_event = 3;
  if (this->has_reach_event() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_reach_event(), output);
  }

  // float velocity = 11;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->velocity(), output);
  }

  // float time = 12;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->time(), output);
  }

  // .proto.Vector rotation = 21;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *rotate_params_.rotation_, output);
  }

  // .proto.MathQuaternion rotation_speed = 22;
  if (has_rotation_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *rotate_params_.rotation_speed_, output);
  }

  // .proto.MathQuaternion axis_speed = 23;
  if (has_axis_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *rotate_params_.axis_speed_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.RoutePoint)
}

::google::protobuf::uint8* RoutePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.RoutePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Vector position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->position_, deterministic, target);
  }

  // float arrive_range = 2;
  if (this->arrive_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->arrive_range(), target);
  }

  // bool has_reach_event = 3;
  if (this->has_reach_event() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->has_reach_event(), target);
  }

  // float velocity = 11;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->velocity(), target);
  }

  // float time = 12;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->time(), target);
  }

  // .proto.Vector rotation = 21;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *rotate_params_.rotation_, deterministic, target);
  }

  // .proto.MathQuaternion rotation_speed = 22;
  if (has_rotation_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *rotate_params_.rotation_speed_, deterministic, target);
  }

  // .proto.MathQuaternion axis_speed = 23;
  if (has_axis_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *rotate_params_.axis_speed_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RoutePoint)
  return target;
}

size_t RoutePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RoutePoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.Vector position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // float arrive_range = 2;
  if (this->arrive_range() != 0) {
    total_size += 1 + 4;
  }

  // bool has_reach_event = 3;
  if (this->has_reach_event() != 0) {
    total_size += 1 + 1;
  }

  switch (move_params_case()) {
    // float velocity = 11;
    case kVelocity: {
      total_size += 1 + 4;
      break;
    }
    // float time = 12;
    case kTime: {
      total_size += 1 + 4;
      break;
    }
    case MOVE_PARAMS_NOT_SET: {
      break;
    }
  }
  switch (rotate_params_case()) {
    // .proto.Vector rotation = 21;
    case kRotation: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *rotate_params_.rotation_);
      break;
    }
    // .proto.MathQuaternion rotation_speed = 22;
    case kRotationSpeed: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *rotate_params_.rotation_speed_);
      break;
    }
    // .proto.MathQuaternion axis_speed = 23;
    case kAxisSpeed: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *rotate_params_.axis_speed_);
      break;
    }
    case ROTATE_PARAMS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoutePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.RoutePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutePoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoutePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.RoutePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.RoutePoint)
    MergeFrom(*source);
  }
}

void RoutePoint::MergeFrom(const RoutePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RoutePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::proto::Vector::MergeFrom(from.position());
  }
  if (from.arrive_range() != 0) {
    set_arrive_range(from.arrive_range());
  }
  if (from.has_reach_event() != 0) {
    set_has_reach_event(from.has_reach_event());
  }
  switch (from.move_params_case()) {
    case kVelocity: {
      set_velocity(from.velocity());
      break;
    }
    case kTime: {
      set_time(from.time());
      break;
    }
    case MOVE_PARAMS_NOT_SET: {
      break;
    }
  }
  switch (from.rotate_params_case()) {
    case kRotation: {
      mutable_rotation()->::proto::Vector::MergeFrom(from.rotation());
      break;
    }
    case kRotationSpeed: {
      mutable_rotation_speed()->::proto::MathQuaternion::MergeFrom(from.rotation_speed());
      break;
    }
    case kAxisSpeed: {
      mutable_axis_speed()->::proto::MathQuaternion::MergeFrom(from.axis_speed());
      break;
    }
    case ROTATE_PARAMS_NOT_SET: {
      break;
    }
  }
}

void RoutePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.RoutePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutePoint::CopyFrom(const RoutePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RoutePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutePoint::IsInitialized() const {
  return true;
}

void RoutePoint::Swap(RoutePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoutePoint::InternalSwap(RoutePoint* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(arrive_range_, other->arrive_range_);
  swap(has_reach_event_, other->has_reach_event_);
  swap(move_params_, other->move_params_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(rotate_params_, other->rotate_params_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoutePoint::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoutePoint

// .proto.Vector position = 1;
bool RoutePoint::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
void RoutePoint::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::proto::Vector& RoutePoint::position() const {
  const ::proto::Vector* p = position_;
  // @@protoc_insertion_point(field_get:proto.RoutePoint.position)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* RoutePoint::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.RoutePoint.position)
  return position_;
}
::proto::Vector* RoutePoint::release_position() {
  // @@protoc_insertion_point(field_release:proto.RoutePoint.position)
  
  ::proto::Vector* temp = position_;
  position_ = NULL;
  return temp;
}
void RoutePoint::set_allocated_position(::proto::Vector* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RoutePoint.position)
}

// float arrive_range = 2;
void RoutePoint::clear_arrive_range() {
  arrive_range_ = 0;
}
float RoutePoint::arrive_range() const {
  // @@protoc_insertion_point(field_get:proto.RoutePoint.arrive_range)
  return arrive_range_;
}
void RoutePoint::set_arrive_range(float value) {
  
  arrive_range_ = value;
  // @@protoc_insertion_point(field_set:proto.RoutePoint.arrive_range)
}

// bool has_reach_event = 3;
void RoutePoint::clear_has_reach_event() {
  has_reach_event_ = false;
}
bool RoutePoint::has_reach_event() const {
  // @@protoc_insertion_point(field_get:proto.RoutePoint.has_reach_event)
  return has_reach_event_;
}
void RoutePoint::set_has_reach_event(bool value) {
  
  has_reach_event_ = value;
  // @@protoc_insertion_point(field_set:proto.RoutePoint.has_reach_event)
}

// float velocity = 11;
bool RoutePoint::has_velocity() const {
  return move_params_case() == kVelocity;
}
void RoutePoint::set_has_velocity() {
  _oneof_case_[0] = kVelocity;
}
void RoutePoint::clear_velocity() {
  if (has_velocity()) {
    move_params_.velocity_ = 0;
    clear_has_move_params();
  }
}
float RoutePoint::velocity() const {
  // @@protoc_insertion_point(field_get:proto.RoutePoint.velocity)
  if (has_velocity()) {
    return move_params_.velocity_;
  }
  return 0;
}
void RoutePoint::set_velocity(float value) {
  if (!has_velocity()) {
    clear_move_params();
    set_has_velocity();
  }
  move_params_.velocity_ = value;
  // @@protoc_insertion_point(field_set:proto.RoutePoint.velocity)
}

// float time = 12;
bool RoutePoint::has_time() const {
  return move_params_case() == kTime;
}
void RoutePoint::set_has_time() {
  _oneof_case_[0] = kTime;
}
void RoutePoint::clear_time() {
  if (has_time()) {
    move_params_.time_ = 0;
    clear_has_move_params();
  }
}
float RoutePoint::time() const {
  // @@protoc_insertion_point(field_get:proto.RoutePoint.time)
  if (has_time()) {
    return move_params_.time_;
  }
  return 0;
}
void RoutePoint::set_time(float value) {
  if (!has_time()) {
    clear_move_params();
    set_has_time();
  }
  move_params_.time_ = value;
  // @@protoc_insertion_point(field_set:proto.RoutePoint.time)
}

// .proto.Vector rotation = 21;
bool RoutePoint::has_rotation() const {
  return rotate_params_case() == kRotation;
}
void RoutePoint::set_has_rotation() {
  _oneof_case_[1] = kRotation;
}
void RoutePoint::clear_rotation() {
  if (has_rotation()) {
    delete rotate_params_.rotation_;
    clear_has_rotate_params();
  }
}
 const ::proto::Vector& RoutePoint::rotation() const {
  // @@protoc_insertion_point(field_get:proto.RoutePoint.rotation)
  return has_rotation()
      ? *rotate_params_.rotation_
      : ::proto::Vector::default_instance();
}
::proto::Vector* RoutePoint::mutable_rotation() {
  if (!has_rotation()) {
    clear_rotate_params();
    set_has_rotation();
    rotate_params_.rotation_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.RoutePoint.rotation)
  return rotate_params_.rotation_;
}
::proto::Vector* RoutePoint::release_rotation() {
  // @@protoc_insertion_point(field_release:proto.RoutePoint.rotation)
  if (has_rotation()) {
    clear_has_rotate_params();
    ::proto::Vector* temp = rotate_params_.rotation_;
    rotate_params_.rotation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RoutePoint::set_allocated_rotation(::proto::Vector* rotation) {
  clear_rotate_params();
  if (rotation) {
    set_has_rotation();
    rotate_params_.rotation_ = rotation;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RoutePoint.rotation)
}

// .proto.MathQuaternion rotation_speed = 22;
bool RoutePoint::has_rotation_speed() const {
  return rotate_params_case() == kRotationSpeed;
}
void RoutePoint::set_has_rotation_speed() {
  _oneof_case_[1] = kRotationSpeed;
}
void RoutePoint::clear_rotation_speed() {
  if (has_rotation_speed()) {
    delete rotate_params_.rotation_speed_;
    clear_has_rotate_params();
  }
}
 const ::proto::MathQuaternion& RoutePoint::rotation_speed() const {
  // @@protoc_insertion_point(field_get:proto.RoutePoint.rotation_speed)
  return has_rotation_speed()
      ? *rotate_params_.rotation_speed_
      : ::proto::MathQuaternion::default_instance();
}
::proto::MathQuaternion* RoutePoint::mutable_rotation_speed() {
  if (!has_rotation_speed()) {
    clear_rotate_params();
    set_has_rotation_speed();
    rotate_params_.rotation_speed_ = new ::proto::MathQuaternion;
  }
  // @@protoc_insertion_point(field_mutable:proto.RoutePoint.rotation_speed)
  return rotate_params_.rotation_speed_;
}
::proto::MathQuaternion* RoutePoint::release_rotation_speed() {
  // @@protoc_insertion_point(field_release:proto.RoutePoint.rotation_speed)
  if (has_rotation_speed()) {
    clear_has_rotate_params();
    ::proto::MathQuaternion* temp = rotate_params_.rotation_speed_;
    rotate_params_.rotation_speed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RoutePoint::set_allocated_rotation_speed(::proto::MathQuaternion* rotation_speed) {
  clear_rotate_params();
  if (rotation_speed) {
    set_has_rotation_speed();
    rotate_params_.rotation_speed_ = rotation_speed;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RoutePoint.rotation_speed)
}

// .proto.MathQuaternion axis_speed = 23;
bool RoutePoint::has_axis_speed() const {
  return rotate_params_case() == kAxisSpeed;
}
void RoutePoint::set_has_axis_speed() {
  _oneof_case_[1] = kAxisSpeed;
}
void RoutePoint::clear_axis_speed() {
  if (has_axis_speed()) {
    delete rotate_params_.axis_speed_;
    clear_has_rotate_params();
  }
}
 const ::proto::MathQuaternion& RoutePoint::axis_speed() const {
  // @@protoc_insertion_point(field_get:proto.RoutePoint.axis_speed)
  return has_axis_speed()
      ? *rotate_params_.axis_speed_
      : ::proto::MathQuaternion::default_instance();
}
::proto::MathQuaternion* RoutePoint::mutable_axis_speed() {
  if (!has_axis_speed()) {
    clear_rotate_params();
    set_has_axis_speed();
    rotate_params_.axis_speed_ = new ::proto::MathQuaternion;
  }
  // @@protoc_insertion_point(field_mutable:proto.RoutePoint.axis_speed)
  return rotate_params_.axis_speed_;
}
::proto::MathQuaternion* RoutePoint::release_axis_speed() {
  // @@protoc_insertion_point(field_release:proto.RoutePoint.axis_speed)
  if (has_axis_speed()) {
    clear_has_rotate_params();
    ::proto::MathQuaternion* temp = rotate_params_.axis_speed_;
    rotate_params_.axis_speed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RoutePoint::set_allocated_axis_speed(::proto::MathQuaternion* axis_speed) {
  clear_rotate_params();
  if (axis_speed) {
    set_has_axis_speed();
    rotate_params_.axis_speed_ = axis_speed;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RoutePoint.axis_speed)
}

bool RoutePoint::has_move_params() const {
  return move_params_case() != MOVE_PARAMS_NOT_SET;
}
void RoutePoint::clear_has_move_params() {
  _oneof_case_[0] = MOVE_PARAMS_NOT_SET;
}
bool RoutePoint::has_rotate_params() const {
  return rotate_params_case() != ROTATE_PARAMS_NOT_SET;
}
void RoutePoint::clear_has_rotate_params() {
  _oneof_case_[1] = ROTATE_PARAMS_NOT_SET;
}
RoutePoint::MoveParamsCase RoutePoint::move_params_case() const {
  return RoutePoint::MoveParamsCase(_oneof_case_[0]);
}
RoutePoint::RotateParamsCase RoutePoint::rotate_params_case() const {
  return RoutePoint::RotateParamsCase(_oneof_case_[1]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Route::kRoutePointsFieldNumber;
const int Route::kRouteTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Route::Route()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Route)
}
Route::Route(const Route& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      route_points_(from.route_points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  route_type_ = from.route_type_;
  // @@protoc_insertion_point(copy_constructor:proto.Route)
}

void Route::SharedCtor() {
  route_type_ = 0u;
  _cached_size_ = 0;
}

Route::~Route() {
  // @@protoc_insertion_point(destructor:proto.Route)
  SharedDtor();
}

void Route::SharedDtor() {
}

void Route::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Route::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Route& Route::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

Route* Route::New(::google::protobuf::Arena* arena) const {
  Route* n = new Route;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Route::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Route)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_points_.Clear();
  route_type_ = 0u;
  _internal_metadata_.Clear();
}

bool Route::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Route)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.RoutePoint route_points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_route_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 route_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &route_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Route)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Route)
  return false;
#undef DO_
}

void Route::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Route)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.RoutePoint route_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->route_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->route_points(static_cast<int>(i)), output);
  }

  // uint32 route_type = 2;
  if (this->route_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->route_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Route)
}

::google::protobuf::uint8* Route::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Route)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.RoutePoint route_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->route_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->route_points(static_cast<int>(i)), deterministic, target);
  }

  // uint32 route_type = 2;
  if (this->route_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->route_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Route)
  return target;
}

size_t Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Route)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.RoutePoint route_points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->route_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->route_points(static_cast<int>(i)));
    }
  }

  // uint32 route_type = 2;
  if (this->route_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->route_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Route::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Route)
  GOOGLE_DCHECK_NE(&from, this);
  const Route* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Route>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Route)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Route)
    MergeFrom(*source);
  }
}

void Route::MergeFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Route)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  route_points_.MergeFrom(from.route_points_);
  if (from.route_type() != 0) {
    set_route_type(from.route_type());
  }
}

void Route::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Route::CopyFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Route::IsInitialized() const {
  return true;
}

void Route::Swap(Route* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Route::InternalSwap(Route* other) {
  using std::swap;
  route_points_.InternalSwap(&other->route_points_);
  swap(route_type_, other->route_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Route::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Route

// repeated .proto.RoutePoint route_points = 1;
int Route::route_points_size() const {
  return route_points_.size();
}
void Route::clear_route_points() {
  route_points_.Clear();
}
const ::proto::RoutePoint& Route::route_points(int index) const {
  // @@protoc_insertion_point(field_get:proto.Route.route_points)
  return route_points_.Get(index);
}
::proto::RoutePoint* Route::mutable_route_points(int index) {
  // @@protoc_insertion_point(field_mutable:proto.Route.route_points)
  return route_points_.Mutable(index);
}
::proto::RoutePoint* Route::add_route_points() {
  // @@protoc_insertion_point(field_add:proto.Route.route_points)
  return route_points_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::RoutePoint >*
Route::mutable_route_points() {
  // @@protoc_insertion_point(field_mutable_list:proto.Route.route_points)
  return &route_points_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::RoutePoint >&
Route::route_points() const {
  // @@protoc_insertion_point(field_list:proto.Route.route_points)
  return route_points_;
}

// uint32 route_type = 2;
void Route::clear_route_type() {
  route_type_ = 0u;
}
::google::protobuf::uint32 Route::route_type() const {
  // @@protoc_insertion_point(field_get:proto.Route.route_type)
  return route_type_;
}
void Route::set_route_type(::google::protobuf::uint32 value) {
  
  route_type_ = value;
  // @@protoc_insertion_point(field_set:proto.Route.route_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MonsterRoute::kRoutePointsFieldNumber;
const int MonsterRoute::kSpeedLevelFieldNumber;
const int MonsterRoute::kRouteTypeFieldNumber;
const int MonsterRoute::kArriveRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MonsterRoute::MonsterRoute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MonsterRoute)
}
MonsterRoute::MonsterRoute(const MonsterRoute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      route_points_(from.route_points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_level_, &from.speed_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&arrive_range_) -
    reinterpret_cast<char*>(&speed_level_)) + sizeof(arrive_range_));
  // @@protoc_insertion_point(copy_constructor:proto.MonsterRoute)
}

void MonsterRoute::SharedCtor() {
  ::memset(&speed_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&arrive_range_) -
      reinterpret_cast<char*>(&speed_level_)) + sizeof(arrive_range_));
  _cached_size_ = 0;
}

MonsterRoute::~MonsterRoute() {
  // @@protoc_insertion_point(destructor:proto.MonsterRoute)
  SharedDtor();
}

void MonsterRoute::SharedDtor() {
}

void MonsterRoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterRoute::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MonsterRoute& MonsterRoute::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

MonsterRoute* MonsterRoute::New(::google::protobuf::Arena* arena) const {
  MonsterRoute* n = new MonsterRoute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MonsterRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MonsterRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_points_.Clear();
  ::memset(&speed_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&arrive_range_) -
      reinterpret_cast<char*>(&speed_level_)) + sizeof(arrive_range_));
  _internal_metadata_.Clear();
}

bool MonsterRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MonsterRoute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.RoutePoint route_points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_route_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 speed_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 route_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &route_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float arrive_range = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &arrive_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MonsterRoute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MonsterRoute)
  return false;
#undef DO_
}

void MonsterRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MonsterRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.RoutePoint route_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->route_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->route_points(static_cast<int>(i)), output);
  }

  // uint32 speed_level = 2;
  if (this->speed_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->speed_level(), output);
  }

  // uint32 route_type = 3;
  if (this->route_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->route_type(), output);
  }

  // float arrive_range = 4;
  if (this->arrive_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->arrive_range(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MonsterRoute)
}

::google::protobuf::uint8* MonsterRoute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MonsterRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.RoutePoint route_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->route_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->route_points(static_cast<int>(i)), deterministic, target);
  }

  // uint32 speed_level = 2;
  if (this->speed_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->speed_level(), target);
  }

  // uint32 route_type = 3;
  if (this->route_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->route_type(), target);
  }

  // float arrive_range = 4;
  if (this->arrive_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->arrive_range(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MonsterRoute)
  return target;
}

size_t MonsterRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MonsterRoute)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.RoutePoint route_points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->route_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->route_points(static_cast<int>(i)));
    }
  }

  // uint32 speed_level = 2;
  if (this->speed_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->speed_level());
  }

  // uint32 route_type = 3;
  if (this->route_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->route_type());
  }

  // float arrive_range = 4;
  if (this->arrive_range() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterRoute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MonsterRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const MonsterRoute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MonsterRoute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MonsterRoute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MonsterRoute)
    MergeFrom(*source);
  }
}

void MonsterRoute::MergeFrom(const MonsterRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MonsterRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  route_points_.MergeFrom(from.route_points_);
  if (from.speed_level() != 0) {
    set_speed_level(from.speed_level());
  }
  if (from.route_type() != 0) {
    set_route_type(from.route_type());
  }
  if (from.arrive_range() != 0) {
    set_arrive_range(from.arrive_range());
  }
}

void MonsterRoute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MonsterRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterRoute::CopyFrom(const MonsterRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MonsterRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterRoute::IsInitialized() const {
  return true;
}

void MonsterRoute::Swap(MonsterRoute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MonsterRoute::InternalSwap(MonsterRoute* other) {
  using std::swap;
  route_points_.InternalSwap(&other->route_points_);
  swap(speed_level_, other->speed_level_);
  swap(route_type_, other->route_type_);
  swap(arrive_range_, other->arrive_range_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MonsterRoute::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MonsterRoute

// repeated .proto.RoutePoint route_points = 1;
int MonsterRoute::route_points_size() const {
  return route_points_.size();
}
void MonsterRoute::clear_route_points() {
  route_points_.Clear();
}
const ::proto::RoutePoint& MonsterRoute::route_points(int index) const {
  // @@protoc_insertion_point(field_get:proto.MonsterRoute.route_points)
  return route_points_.Get(index);
}
::proto::RoutePoint* MonsterRoute::mutable_route_points(int index) {
  // @@protoc_insertion_point(field_mutable:proto.MonsterRoute.route_points)
  return route_points_.Mutable(index);
}
::proto::RoutePoint* MonsterRoute::add_route_points() {
  // @@protoc_insertion_point(field_add:proto.MonsterRoute.route_points)
  return route_points_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::RoutePoint >*
MonsterRoute::mutable_route_points() {
  // @@protoc_insertion_point(field_mutable_list:proto.MonsterRoute.route_points)
  return &route_points_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::RoutePoint >&
MonsterRoute::route_points() const {
  // @@protoc_insertion_point(field_list:proto.MonsterRoute.route_points)
  return route_points_;
}

// uint32 speed_level = 2;
void MonsterRoute::clear_speed_level() {
  speed_level_ = 0u;
}
::google::protobuf::uint32 MonsterRoute::speed_level() const {
  // @@protoc_insertion_point(field_get:proto.MonsterRoute.speed_level)
  return speed_level_;
}
void MonsterRoute::set_speed_level(::google::protobuf::uint32 value) {
  
  speed_level_ = value;
  // @@protoc_insertion_point(field_set:proto.MonsterRoute.speed_level)
}

// uint32 route_type = 3;
void MonsterRoute::clear_route_type() {
  route_type_ = 0u;
}
::google::protobuf::uint32 MonsterRoute::route_type() const {
  // @@protoc_insertion_point(field_get:proto.MonsterRoute.route_type)
  return route_type_;
}
void MonsterRoute::set_route_type(::google::protobuf::uint32 value) {
  
  route_type_ = value;
  // @@protoc_insertion_point(field_set:proto.MonsterRoute.route_type)
}

// float arrive_range = 4;
void MonsterRoute::clear_arrive_range() {
  arrive_range_ = 0;
}
float MonsterRoute::arrive_range() const {
  // @@protoc_insertion_point(field_get:proto.MonsterRoute.arrive_range)
  return arrive_range_;
}
void MonsterRoute::set_arrive_range(float value) {
  
  arrive_range_ = value;
  // @@protoc_insertion_point(field_set:proto.MonsterRoute.arrive_range)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeatherInfo::kWeatherAreaIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeatherInfo::WeatherInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.WeatherInfo)
}
WeatherInfo::WeatherInfo(const WeatherInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weather_area_id_ = from.weather_area_id_;
  // @@protoc_insertion_point(copy_constructor:proto.WeatherInfo)
}

void WeatherInfo::SharedCtor() {
  weather_area_id_ = 0u;
  _cached_size_ = 0;
}

WeatherInfo::~WeatherInfo() {
  // @@protoc_insertion_point(destructor:proto.WeatherInfo)
  SharedDtor();
}

void WeatherInfo::SharedDtor() {
}

void WeatherInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeatherInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeatherInfo& WeatherInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeatherInfo* WeatherInfo::New(::google::protobuf::Arena* arena) const {
  WeatherInfo* n = new WeatherInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeatherInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.WeatherInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weather_area_id_ = 0u;
  _internal_metadata_.Clear();
}

bool WeatherInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.WeatherInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 weather_area_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weather_area_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.WeatherInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.WeatherInfo)
  return false;
#undef DO_
}

void WeatherInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.WeatherInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 weather_area_id = 1;
  if (this->weather_area_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->weather_area_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.WeatherInfo)
}

::google::protobuf::uint8* WeatherInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.WeatherInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 weather_area_id = 1;
  if (this->weather_area_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->weather_area_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.WeatherInfo)
  return target;
}

size_t WeatherInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.WeatherInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 weather_area_id = 1;
  if (this->weather_area_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->weather_area_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeatherInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.WeatherInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WeatherInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeatherInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.WeatherInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.WeatherInfo)
    MergeFrom(*source);
  }
}

void WeatherInfo::MergeFrom(const WeatherInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.WeatherInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.weather_area_id() != 0) {
    set_weather_area_id(from.weather_area_id());
  }
}

void WeatherInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.WeatherInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeatherInfo::CopyFrom(const WeatherInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.WeatherInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherInfo::IsInitialized() const {
  return true;
}

void WeatherInfo::Swap(WeatherInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeatherInfo::InternalSwap(WeatherInfo* other) {
  using std::swap;
  swap(weather_area_id_, other->weather_area_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeatherInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeatherInfo

// uint32 weather_area_id = 1;
void WeatherInfo::clear_weather_area_id() {
  weather_area_id_ = 0u;
}
::google::protobuf::uint32 WeatherInfo::weather_area_id() const {
  // @@protoc_insertion_point(field_get:proto.WeatherInfo.weather_area_id)
  return weather_area_id_;
}
void WeatherInfo::set_weather_area_id(::google::protobuf::uint32 value) {
  
  weather_area_id_ = value;
  // @@protoc_insertion_point(field_set:proto.WeatherInfo.weather_area_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientGadgetInfo::kCampIdFieldNumber;
const int ClientGadgetInfo::kCampTypeFieldNumber;
const int ClientGadgetInfo::kGuidFieldNumber;
const int ClientGadgetInfo::kOwnerEntityIdFieldNumber;
const int ClientGadgetInfo::kTargetEntityIdFieldNumber;
const int ClientGadgetInfo::kAsyncLoadFieldNumber;
const int ClientGadgetInfo::kIsPeerIdFromPlayerFieldNumber;
const int ClientGadgetInfo::kTargetEntityIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientGadgetInfo::ClientGadgetInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ClientGadgetInfo)
}
ClientGadgetInfo::ClientGadgetInfo(const ClientGadgetInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      target_entity_id_list_(from.target_entity_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&camp_id_, &from.camp_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_peer_id_from_player_) -
    reinterpret_cast<char*>(&camp_id_)) + sizeof(is_peer_id_from_player_));
  // @@protoc_insertion_point(copy_constructor:proto.ClientGadgetInfo)
}

void ClientGadgetInfo::SharedCtor() {
  ::memset(&camp_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_peer_id_from_player_) -
      reinterpret_cast<char*>(&camp_id_)) + sizeof(is_peer_id_from_player_));
  _cached_size_ = 0;
}

ClientGadgetInfo::~ClientGadgetInfo() {
  // @@protoc_insertion_point(destructor:proto.ClientGadgetInfo)
  SharedDtor();
}

void ClientGadgetInfo::SharedDtor() {
}

void ClientGadgetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientGadgetInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientGadgetInfo& ClientGadgetInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientGadgetInfo* ClientGadgetInfo::New(::google::protobuf::Arena* arena) const {
  ClientGadgetInfo* n = new ClientGadgetInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientGadgetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ClientGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_entity_id_list_.Clear();
  ::memset(&camp_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_peer_id_from_player_) -
      reinterpret_cast<char*>(&camp_id_)) + sizeof(is_peer_id_from_player_));
  _internal_metadata_.Clear();
}

bool ClientGadgetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ClientGadgetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 camp_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camp_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 camp_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camp_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 guid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 owner_entity_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_entity_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool async_load = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &async_load_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_peer_id_from_player = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_peer_id_from_player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 target_entity_id_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_target_entity_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66u, input, this->mutable_target_entity_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ClientGadgetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ClientGadgetInfo)
  return false;
#undef DO_
}

void ClientGadgetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ClientGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 camp_id = 1;
  if (this->camp_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->camp_id(), output);
  }

  // uint32 camp_type = 2;
  if (this->camp_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->camp_type(), output);
  }

  // uint64 guid = 3;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guid(), output);
  }

  // uint32 owner_entity_id = 4;
  if (this->owner_entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->owner_entity_id(), output);
  }

  // uint32 target_entity_id = 5;
  if (this->target_entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->target_entity_id(), output);
  }

  // bool async_load = 6;
  if (this->async_load() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->async_load(), output);
  }

  // bool is_peer_id_from_player = 7;
  if (this->is_peer_id_from_player() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_peer_id_from_player(), output);
  }

  // repeated uint32 target_entity_id_list = 8;
  if (this->target_entity_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _target_entity_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->target_entity_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->target_entity_id_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ClientGadgetInfo)
}

::google::protobuf::uint8* ClientGadgetInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ClientGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 camp_id = 1;
  if (this->camp_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->camp_id(), target);
  }

  // uint32 camp_type = 2;
  if (this->camp_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->camp_type(), target);
  }

  // uint64 guid = 3;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guid(), target);
  }

  // uint32 owner_entity_id = 4;
  if (this->owner_entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->owner_entity_id(), target);
  }

  // uint32 target_entity_id = 5;
  if (this->target_entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->target_entity_id(), target);
  }

  // bool async_load = 6;
  if (this->async_load() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->async_load(), target);
  }

  // bool is_peer_id_from_player = 7;
  if (this->is_peer_id_from_player() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_peer_id_from_player(), target);
  }

  // repeated uint32 target_entity_id_list = 8;
  if (this->target_entity_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _target_entity_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->target_entity_id_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ClientGadgetInfo)
  return target;
}

size_t ClientGadgetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ClientGadgetInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 target_entity_id_list = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->target_entity_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _target_entity_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 camp_id = 1;
  if (this->camp_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->camp_id());
  }

  // uint32 camp_type = 2;
  if (this->camp_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->camp_type());
  }

  // uint64 guid = 3;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // uint32 owner_entity_id = 4;
  if (this->owner_entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner_entity_id());
  }

  // uint32 target_entity_id = 5;
  if (this->target_entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_entity_id());
  }

  // bool async_load = 6;
  if (this->async_load() != 0) {
    total_size += 1 + 1;
  }

  // bool is_peer_id_from_player = 7;
  if (this->is_peer_id_from_player() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientGadgetInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ClientGadgetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientGadgetInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientGadgetInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ClientGadgetInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ClientGadgetInfo)
    MergeFrom(*source);
  }
}

void ClientGadgetInfo::MergeFrom(const ClientGadgetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ClientGadgetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_entity_id_list_.MergeFrom(from.target_entity_id_list_);
  if (from.camp_id() != 0) {
    set_camp_id(from.camp_id());
  }
  if (from.camp_type() != 0) {
    set_camp_type(from.camp_type());
  }
  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.owner_entity_id() != 0) {
    set_owner_entity_id(from.owner_entity_id());
  }
  if (from.target_entity_id() != 0) {
    set_target_entity_id(from.target_entity_id());
  }
  if (from.async_load() != 0) {
    set_async_load(from.async_load());
  }
  if (from.is_peer_id_from_player() != 0) {
    set_is_peer_id_from_player(from.is_peer_id_from_player());
  }
}

void ClientGadgetInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ClientGadgetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientGadgetInfo::CopyFrom(const ClientGadgetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ClientGadgetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientGadgetInfo::IsInitialized() const {
  return true;
}

void ClientGadgetInfo::Swap(ClientGadgetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientGadgetInfo::InternalSwap(ClientGadgetInfo* other) {
  using std::swap;
  target_entity_id_list_.InternalSwap(&other->target_entity_id_list_);
  swap(camp_id_, other->camp_id_);
  swap(camp_type_, other->camp_type_);
  swap(guid_, other->guid_);
  swap(owner_entity_id_, other->owner_entity_id_);
  swap(target_entity_id_, other->target_entity_id_);
  swap(async_load_, other->async_load_);
  swap(is_peer_id_from_player_, other->is_peer_id_from_player_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientGadgetInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientGadgetInfo

// uint32 camp_id = 1;
void ClientGadgetInfo::clear_camp_id() {
  camp_id_ = 0u;
}
::google::protobuf::uint32 ClientGadgetInfo::camp_id() const {
  // @@protoc_insertion_point(field_get:proto.ClientGadgetInfo.camp_id)
  return camp_id_;
}
void ClientGadgetInfo::set_camp_id(::google::protobuf::uint32 value) {
  
  camp_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ClientGadgetInfo.camp_id)
}

// uint32 camp_type = 2;
void ClientGadgetInfo::clear_camp_type() {
  camp_type_ = 0u;
}
::google::protobuf::uint32 ClientGadgetInfo::camp_type() const {
  // @@protoc_insertion_point(field_get:proto.ClientGadgetInfo.camp_type)
  return camp_type_;
}
void ClientGadgetInfo::set_camp_type(::google::protobuf::uint32 value) {
  
  camp_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ClientGadgetInfo.camp_type)
}

// uint64 guid = 3;
void ClientGadgetInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ClientGadgetInfo::guid() const {
  // @@protoc_insertion_point(field_get:proto.ClientGadgetInfo.guid)
  return guid_;
}
void ClientGadgetInfo::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:proto.ClientGadgetInfo.guid)
}

// uint32 owner_entity_id = 4;
void ClientGadgetInfo::clear_owner_entity_id() {
  owner_entity_id_ = 0u;
}
::google::protobuf::uint32 ClientGadgetInfo::owner_entity_id() const {
  // @@protoc_insertion_point(field_get:proto.ClientGadgetInfo.owner_entity_id)
  return owner_entity_id_;
}
void ClientGadgetInfo::set_owner_entity_id(::google::protobuf::uint32 value) {
  
  owner_entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ClientGadgetInfo.owner_entity_id)
}

// uint32 target_entity_id = 5;
void ClientGadgetInfo::clear_target_entity_id() {
  target_entity_id_ = 0u;
}
::google::protobuf::uint32 ClientGadgetInfo::target_entity_id() const {
  // @@protoc_insertion_point(field_get:proto.ClientGadgetInfo.target_entity_id)
  return target_entity_id_;
}
void ClientGadgetInfo::set_target_entity_id(::google::protobuf::uint32 value) {
  
  target_entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ClientGadgetInfo.target_entity_id)
}

// bool async_load = 6;
void ClientGadgetInfo::clear_async_load() {
  async_load_ = false;
}
bool ClientGadgetInfo::async_load() const {
  // @@protoc_insertion_point(field_get:proto.ClientGadgetInfo.async_load)
  return async_load_;
}
void ClientGadgetInfo::set_async_load(bool value) {
  
  async_load_ = value;
  // @@protoc_insertion_point(field_set:proto.ClientGadgetInfo.async_load)
}

// bool is_peer_id_from_player = 7;
void ClientGadgetInfo::clear_is_peer_id_from_player() {
  is_peer_id_from_player_ = false;
}
bool ClientGadgetInfo::is_peer_id_from_player() const {
  // @@protoc_insertion_point(field_get:proto.ClientGadgetInfo.is_peer_id_from_player)
  return is_peer_id_from_player_;
}
void ClientGadgetInfo::set_is_peer_id_from_player(bool value) {
  
  is_peer_id_from_player_ = value;
  // @@protoc_insertion_point(field_set:proto.ClientGadgetInfo.is_peer_id_from_player)
}

// repeated uint32 target_entity_id_list = 8;
int ClientGadgetInfo::target_entity_id_list_size() const {
  return target_entity_id_list_.size();
}
void ClientGadgetInfo::clear_target_entity_id_list() {
  target_entity_id_list_.Clear();
}
::google::protobuf::uint32 ClientGadgetInfo::target_entity_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ClientGadgetInfo.target_entity_id_list)
  return target_entity_id_list_.Get(index);
}
void ClientGadgetInfo::set_target_entity_id_list(int index, ::google::protobuf::uint32 value) {
  target_entity_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ClientGadgetInfo.target_entity_id_list)
}
void ClientGadgetInfo::add_target_entity_id_list(::google::protobuf::uint32 value) {
  target_entity_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ClientGadgetInfo.target_entity_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ClientGadgetInfo::target_entity_id_list() const {
  // @@protoc_insertion_point(field_list:proto.ClientGadgetInfo.target_entity_id_list)
  return target_entity_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ClientGadgetInfo::mutable_target_entity_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ClientGadgetInfo.target_entity_id_list)
  return &target_entity_id_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbilityGadgetInfo::kCampIdFieldNumber;
const int AbilityGadgetInfo::kCampTargetTypeFieldNumber;
const int AbilityGadgetInfo::kTargetEntityIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbilityGadgetInfo::AbilityGadgetInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AbilityGadgetInfo)
}
AbilityGadgetInfo::AbilityGadgetInfo(const AbilityGadgetInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&camp_id_, &from.camp_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_entity_id_) -
    reinterpret_cast<char*>(&camp_id_)) + sizeof(target_entity_id_));
  // @@protoc_insertion_point(copy_constructor:proto.AbilityGadgetInfo)
}

void AbilityGadgetInfo::SharedCtor() {
  ::memset(&camp_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_entity_id_) -
      reinterpret_cast<char*>(&camp_id_)) + sizeof(target_entity_id_));
  _cached_size_ = 0;
}

AbilityGadgetInfo::~AbilityGadgetInfo() {
  // @@protoc_insertion_point(destructor:proto.AbilityGadgetInfo)
  SharedDtor();
}

void AbilityGadgetInfo::SharedDtor() {
}

void AbilityGadgetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbilityGadgetInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AbilityGadgetInfo& AbilityGadgetInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

AbilityGadgetInfo* AbilityGadgetInfo::New(::google::protobuf::Arena* arena) const {
  AbilityGadgetInfo* n = new AbilityGadgetInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AbilityGadgetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AbilityGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&camp_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_entity_id_) -
      reinterpret_cast<char*>(&camp_id_)) + sizeof(target_entity_id_));
  _internal_metadata_.Clear();
}

bool AbilityGadgetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AbilityGadgetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 camp_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camp_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 camp_target_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camp_target_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_entity_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AbilityGadgetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AbilityGadgetInfo)
  return false;
#undef DO_
}

void AbilityGadgetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AbilityGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 camp_id = 1;
  if (this->camp_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->camp_id(), output);
  }

  // uint32 camp_target_type = 2;
  if (this->camp_target_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->camp_target_type(), output);
  }

  // uint32 target_entity_id = 3;
  if (this->target_entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_entity_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AbilityGadgetInfo)
}

::google::protobuf::uint8* AbilityGadgetInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AbilityGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 camp_id = 1;
  if (this->camp_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->camp_id(), target);
  }

  // uint32 camp_target_type = 2;
  if (this->camp_target_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->camp_target_type(), target);
  }

  // uint32 target_entity_id = 3;
  if (this->target_entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_entity_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AbilityGadgetInfo)
  return target;
}

size_t AbilityGadgetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AbilityGadgetInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 camp_id = 1;
  if (this->camp_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->camp_id());
  }

  // uint32 camp_target_type = 2;
  if (this->camp_target_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->camp_target_type());
  }

  // uint32 target_entity_id = 3;
  if (this->target_entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_entity_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbilityGadgetInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AbilityGadgetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AbilityGadgetInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AbilityGadgetInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AbilityGadgetInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AbilityGadgetInfo)
    MergeFrom(*source);
  }
}

void AbilityGadgetInfo::MergeFrom(const AbilityGadgetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AbilityGadgetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.camp_id() != 0) {
    set_camp_id(from.camp_id());
  }
  if (from.camp_target_type() != 0) {
    set_camp_target_type(from.camp_target_type());
  }
  if (from.target_entity_id() != 0) {
    set_target_entity_id(from.target_entity_id());
  }
}

void AbilityGadgetInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AbilityGadgetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbilityGadgetInfo::CopyFrom(const AbilityGadgetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AbilityGadgetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbilityGadgetInfo::IsInitialized() const {
  return true;
}

void AbilityGadgetInfo::Swap(AbilityGadgetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbilityGadgetInfo::InternalSwap(AbilityGadgetInfo* other) {
  using std::swap;
  swap(camp_id_, other->camp_id_);
  swap(camp_target_type_, other->camp_target_type_);
  swap(target_entity_id_, other->target_entity_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AbilityGadgetInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AbilityGadgetInfo

// uint32 camp_id = 1;
void AbilityGadgetInfo::clear_camp_id() {
  camp_id_ = 0u;
}
::google::protobuf::uint32 AbilityGadgetInfo::camp_id() const {
  // @@protoc_insertion_point(field_get:proto.AbilityGadgetInfo.camp_id)
  return camp_id_;
}
void AbilityGadgetInfo::set_camp_id(::google::protobuf::uint32 value) {
  
  camp_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityGadgetInfo.camp_id)
}

// uint32 camp_target_type = 2;
void AbilityGadgetInfo::clear_camp_target_type() {
  camp_target_type_ = 0u;
}
::google::protobuf::uint32 AbilityGadgetInfo::camp_target_type() const {
  // @@protoc_insertion_point(field_get:proto.AbilityGadgetInfo.camp_target_type)
  return camp_target_type_;
}
void AbilityGadgetInfo::set_camp_target_type(::google::protobuf::uint32 value) {
  
  camp_target_type_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityGadgetInfo.camp_target_type)
}

// uint32 target_entity_id = 3;
void AbilityGadgetInfo::clear_target_entity_id() {
  target_entity_id_ = 0u;
}
::google::protobuf::uint32 AbilityGadgetInfo::target_entity_id() const {
  // @@protoc_insertion_point(field_get:proto.AbilityGadgetInfo.target_entity_id)
  return target_entity_id_;
}
void AbilityGadgetInfo::set_target_entity_id(::google::protobuf::uint32 value) {
  
  target_entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AbilityGadgetInfo.target_entity_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GatherGadgetInfo::kItemIdFieldNumber;
const int GatherGadgetInfo::kIsForbidGuestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GatherGadgetInfo::GatherGadgetInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GatherGadgetInfo)
}
GatherGadgetInfo::GatherGadgetInfo(const GatherGadgetInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_forbid_guest_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(is_forbid_guest_));
  // @@protoc_insertion_point(copy_constructor:proto.GatherGadgetInfo)
}

void GatherGadgetInfo::SharedCtor() {
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_forbid_guest_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(is_forbid_guest_));
  _cached_size_ = 0;
}

GatherGadgetInfo::~GatherGadgetInfo() {
  // @@protoc_insertion_point(destructor:proto.GatherGadgetInfo)
  SharedDtor();
}

void GatherGadgetInfo::SharedDtor() {
}

void GatherGadgetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GatherGadgetInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GatherGadgetInfo& GatherGadgetInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

GatherGadgetInfo* GatherGadgetInfo::New(::google::protobuf::Arena* arena) const {
  GatherGadgetInfo* n = new GatherGadgetInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GatherGadgetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GatherGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_forbid_guest_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(is_forbid_guest_));
  _internal_metadata_.Clear();
}

bool GatherGadgetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GatherGadgetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_forbid_guest = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_forbid_guest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GatherGadgetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GatherGadgetInfo)
  return false;
#undef DO_
}

void GatherGadgetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GatherGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // bool is_forbid_guest = 2;
  if (this->is_forbid_guest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_forbid_guest(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GatherGadgetInfo)
}

::google::protobuf::uint8* GatherGadgetInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GatherGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // bool is_forbid_guest = 2;
  if (this->is_forbid_guest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_forbid_guest(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GatherGadgetInfo)
  return target;
}

size_t GatherGadgetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GatherGadgetInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_id());
  }

  // bool is_forbid_guest = 2;
  if (this->is_forbid_guest() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GatherGadgetInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GatherGadgetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GatherGadgetInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GatherGadgetInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GatherGadgetInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GatherGadgetInfo)
    MergeFrom(*source);
  }
}

void GatherGadgetInfo::MergeFrom(const GatherGadgetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GatherGadgetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.item_id() != 0) {
    set_item_id(from.item_id());
  }
  if (from.is_forbid_guest() != 0) {
    set_is_forbid_guest(from.is_forbid_guest());
  }
}

void GatherGadgetInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GatherGadgetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatherGadgetInfo::CopyFrom(const GatherGadgetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GatherGadgetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatherGadgetInfo::IsInitialized() const {
  return true;
}

void GatherGadgetInfo::Swap(GatherGadgetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GatherGadgetInfo::InternalSwap(GatherGadgetInfo* other) {
  using std::swap;
  swap(item_id_, other->item_id_);
  swap(is_forbid_guest_, other->is_forbid_guest_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GatherGadgetInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GatherGadgetInfo

// uint32 item_id = 1;
void GatherGadgetInfo::clear_item_id() {
  item_id_ = 0u;
}
::google::protobuf::uint32 GatherGadgetInfo::item_id() const {
  // @@protoc_insertion_point(field_get:proto.GatherGadgetInfo.item_id)
  return item_id_;
}
void GatherGadgetInfo::set_item_id(::google::protobuf::uint32 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GatherGadgetInfo.item_id)
}

// bool is_forbid_guest = 2;
void GatherGadgetInfo::clear_is_forbid_guest() {
  is_forbid_guest_ = false;
}
bool GatherGadgetInfo::is_forbid_guest() const {
  // @@protoc_insertion_point(field_get:proto.GatherGadgetInfo.is_forbid_guest)
  return is_forbid_guest_;
}
void GatherGadgetInfo::set_is_forbid_guest(bool value) {
  
  is_forbid_guest_ = value;
  // @@protoc_insertion_point(field_set:proto.GatherGadgetInfo.is_forbid_guest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatueGadgetInfo::kOpenedStatueUidListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatueGadgetInfo::StatueGadgetInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.StatueGadgetInfo)
}
StatueGadgetInfo::StatueGadgetInfo(const StatueGadgetInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      opened_statue_uid_list_(from.opened_statue_uid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.StatueGadgetInfo)
}

void StatueGadgetInfo::SharedCtor() {
  _cached_size_ = 0;
}

StatueGadgetInfo::~StatueGadgetInfo() {
  // @@protoc_insertion_point(destructor:proto.StatueGadgetInfo)
  SharedDtor();
}

void StatueGadgetInfo::SharedDtor() {
}

void StatueGadgetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatueGadgetInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatueGadgetInfo& StatueGadgetInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

StatueGadgetInfo* StatueGadgetInfo::New(::google::protobuf::Arena* arena) const {
  StatueGadgetInfo* n = new StatueGadgetInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatueGadgetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.StatueGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opened_statue_uid_list_.Clear();
  _internal_metadata_.Clear();
}

bool StatueGadgetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.StatueGadgetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 opened_statue_uid_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_opened_statue_uid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_opened_statue_uid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.StatueGadgetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.StatueGadgetInfo)
  return false;
#undef DO_
}

void StatueGadgetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.StatueGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 opened_statue_uid_list = 1;
  if (this->opened_statue_uid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _opened_statue_uid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->opened_statue_uid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->opened_statue_uid_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.StatueGadgetInfo)
}

::google::protobuf::uint8* StatueGadgetInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.StatueGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 opened_statue_uid_list = 1;
  if (this->opened_statue_uid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _opened_statue_uid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->opened_statue_uid_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.StatueGadgetInfo)
  return target;
}

size_t StatueGadgetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.StatueGadgetInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 opened_statue_uid_list = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->opened_statue_uid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _opened_statue_uid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatueGadgetInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.StatueGadgetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StatueGadgetInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatueGadgetInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.StatueGadgetInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.StatueGadgetInfo)
    MergeFrom(*source);
  }
}

void StatueGadgetInfo::MergeFrom(const StatueGadgetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.StatueGadgetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  opened_statue_uid_list_.MergeFrom(from.opened_statue_uid_list_);
}

void StatueGadgetInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.StatueGadgetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatueGadgetInfo::CopyFrom(const StatueGadgetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.StatueGadgetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatueGadgetInfo::IsInitialized() const {
  return true;
}

void StatueGadgetInfo::Swap(StatueGadgetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatueGadgetInfo::InternalSwap(StatueGadgetInfo* other) {
  using std::swap;
  opened_statue_uid_list_.InternalSwap(&other->opened_statue_uid_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatueGadgetInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatueGadgetInfo

// repeated uint32 opened_statue_uid_list = 1;
int StatueGadgetInfo::opened_statue_uid_list_size() const {
  return opened_statue_uid_list_.size();
}
void StatueGadgetInfo::clear_opened_statue_uid_list() {
  opened_statue_uid_list_.Clear();
}
::google::protobuf::uint32 StatueGadgetInfo::opened_statue_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.StatueGadgetInfo.opened_statue_uid_list)
  return opened_statue_uid_list_.Get(index);
}
void StatueGadgetInfo::set_opened_statue_uid_list(int index, ::google::protobuf::uint32 value) {
  opened_statue_uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.StatueGadgetInfo.opened_statue_uid_list)
}
void StatueGadgetInfo::add_opened_statue_uid_list(::google::protobuf::uint32 value) {
  opened_statue_uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.StatueGadgetInfo.opened_statue_uid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
StatueGadgetInfo::opened_statue_uid_list() const {
  // @@protoc_insertion_point(field_list:proto.StatueGadgetInfo.opened_statue_uid_list)
  return opened_statue_uid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
StatueGadgetInfo::mutable_opened_statue_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.StatueGadgetInfo.opened_statue_uid_list)
  return &opened_statue_uid_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeeklyBossResinDiscountInfo::kDiscountNumFieldNumber;
const int WeeklyBossResinDiscountInfo::kDiscountNumLimitFieldNumber;
const int WeeklyBossResinDiscountInfo::kResinCostFieldNumber;
const int WeeklyBossResinDiscountInfo::kOriginalResinCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeeklyBossResinDiscountInfo::WeeklyBossResinDiscountInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.WeeklyBossResinDiscountInfo)
}
WeeklyBossResinDiscountInfo::WeeklyBossResinDiscountInfo(const WeeklyBossResinDiscountInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&discount_num_, &from.discount_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&original_resin_cost_) -
    reinterpret_cast<char*>(&discount_num_)) + sizeof(original_resin_cost_));
  // @@protoc_insertion_point(copy_constructor:proto.WeeklyBossResinDiscountInfo)
}

void WeeklyBossResinDiscountInfo::SharedCtor() {
  ::memset(&discount_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&original_resin_cost_) -
      reinterpret_cast<char*>(&discount_num_)) + sizeof(original_resin_cost_));
  _cached_size_ = 0;
}

WeeklyBossResinDiscountInfo::~WeeklyBossResinDiscountInfo() {
  // @@protoc_insertion_point(destructor:proto.WeeklyBossResinDiscountInfo)
  SharedDtor();
}

void WeeklyBossResinDiscountInfo::SharedDtor() {
}

void WeeklyBossResinDiscountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeeklyBossResinDiscountInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeeklyBossResinDiscountInfo& WeeklyBossResinDiscountInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeeklyBossResinDiscountInfo* WeeklyBossResinDiscountInfo::New(::google::protobuf::Arena* arena) const {
  WeeklyBossResinDiscountInfo* n = new WeeklyBossResinDiscountInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeeklyBossResinDiscountInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.WeeklyBossResinDiscountInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&discount_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&original_resin_cost_) -
      reinterpret_cast<char*>(&discount_num_)) + sizeof(original_resin_cost_));
  _internal_metadata_.Clear();
}

bool WeeklyBossResinDiscountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.WeeklyBossResinDiscountInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 discount_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &discount_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 discount_num_limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &discount_num_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 resin_cost = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resin_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 original_resin_cost = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &original_resin_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.WeeklyBossResinDiscountInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.WeeklyBossResinDiscountInfo)
  return false;
#undef DO_
}

void WeeklyBossResinDiscountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.WeeklyBossResinDiscountInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 discount_num = 1;
  if (this->discount_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->discount_num(), output);
  }

  // uint32 discount_num_limit = 2;
  if (this->discount_num_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->discount_num_limit(), output);
  }

  // uint32 resin_cost = 3;
  if (this->resin_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->resin_cost(), output);
  }

  // uint32 original_resin_cost = 4;
  if (this->original_resin_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->original_resin_cost(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.WeeklyBossResinDiscountInfo)
}

::google::protobuf::uint8* WeeklyBossResinDiscountInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.WeeklyBossResinDiscountInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 discount_num = 1;
  if (this->discount_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->discount_num(), target);
  }

  // uint32 discount_num_limit = 2;
  if (this->discount_num_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->discount_num_limit(), target);
  }

  // uint32 resin_cost = 3;
  if (this->resin_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->resin_cost(), target);
  }

  // uint32 original_resin_cost = 4;
  if (this->original_resin_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->original_resin_cost(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.WeeklyBossResinDiscountInfo)
  return target;
}

size_t WeeklyBossResinDiscountInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.WeeklyBossResinDiscountInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 discount_num = 1;
  if (this->discount_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->discount_num());
  }

  // uint32 discount_num_limit = 2;
  if (this->discount_num_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->discount_num_limit());
  }

  // uint32 resin_cost = 3;
  if (this->resin_cost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resin_cost());
  }

  // uint32 original_resin_cost = 4;
  if (this->original_resin_cost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->original_resin_cost());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeeklyBossResinDiscountInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.WeeklyBossResinDiscountInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WeeklyBossResinDiscountInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeeklyBossResinDiscountInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.WeeklyBossResinDiscountInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.WeeklyBossResinDiscountInfo)
    MergeFrom(*source);
  }
}

void WeeklyBossResinDiscountInfo::MergeFrom(const WeeklyBossResinDiscountInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.WeeklyBossResinDiscountInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.discount_num() != 0) {
    set_discount_num(from.discount_num());
  }
  if (from.discount_num_limit() != 0) {
    set_discount_num_limit(from.discount_num_limit());
  }
  if (from.resin_cost() != 0) {
    set_resin_cost(from.resin_cost());
  }
  if (from.original_resin_cost() != 0) {
    set_original_resin_cost(from.original_resin_cost());
  }
}

void WeeklyBossResinDiscountInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.WeeklyBossResinDiscountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeeklyBossResinDiscountInfo::CopyFrom(const WeeklyBossResinDiscountInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.WeeklyBossResinDiscountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeeklyBossResinDiscountInfo::IsInitialized() const {
  return true;
}

void WeeklyBossResinDiscountInfo::Swap(WeeklyBossResinDiscountInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeeklyBossResinDiscountInfo::InternalSwap(WeeklyBossResinDiscountInfo* other) {
  using std::swap;
  swap(discount_num_, other->discount_num_);
  swap(discount_num_limit_, other->discount_num_limit_);
  swap(resin_cost_, other->resin_cost_);
  swap(original_resin_cost_, other->original_resin_cost_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeeklyBossResinDiscountInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeeklyBossResinDiscountInfo

// uint32 discount_num = 1;
void WeeklyBossResinDiscountInfo::clear_discount_num() {
  discount_num_ = 0u;
}
::google::protobuf::uint32 WeeklyBossResinDiscountInfo::discount_num() const {
  // @@protoc_insertion_point(field_get:proto.WeeklyBossResinDiscountInfo.discount_num)
  return discount_num_;
}
void WeeklyBossResinDiscountInfo::set_discount_num(::google::protobuf::uint32 value) {
  
  discount_num_ = value;
  // @@protoc_insertion_point(field_set:proto.WeeklyBossResinDiscountInfo.discount_num)
}

// uint32 discount_num_limit = 2;
void WeeklyBossResinDiscountInfo::clear_discount_num_limit() {
  discount_num_limit_ = 0u;
}
::google::protobuf::uint32 WeeklyBossResinDiscountInfo::discount_num_limit() const {
  // @@protoc_insertion_point(field_get:proto.WeeklyBossResinDiscountInfo.discount_num_limit)
  return discount_num_limit_;
}
void WeeklyBossResinDiscountInfo::set_discount_num_limit(::google::protobuf::uint32 value) {
  
  discount_num_limit_ = value;
  // @@protoc_insertion_point(field_set:proto.WeeklyBossResinDiscountInfo.discount_num_limit)
}

// uint32 resin_cost = 3;
void WeeklyBossResinDiscountInfo::clear_resin_cost() {
  resin_cost_ = 0u;
}
::google::protobuf::uint32 WeeklyBossResinDiscountInfo::resin_cost() const {
  // @@protoc_insertion_point(field_get:proto.WeeklyBossResinDiscountInfo.resin_cost)
  return resin_cost_;
}
void WeeklyBossResinDiscountInfo::set_resin_cost(::google::protobuf::uint32 value) {
  
  resin_cost_ = value;
  // @@protoc_insertion_point(field_set:proto.WeeklyBossResinDiscountInfo.resin_cost)
}

// uint32 original_resin_cost = 4;
void WeeklyBossResinDiscountInfo::clear_original_resin_cost() {
  original_resin_cost_ = 0u;
}
::google::protobuf::uint32 WeeklyBossResinDiscountInfo::original_resin_cost() const {
  // @@protoc_insertion_point(field_get:proto.WeeklyBossResinDiscountInfo.original_resin_cost)
  return original_resin_cost_;
}
void WeeklyBossResinDiscountInfo::set_original_resin_cost(::google::protobuf::uint32 value) {
  
  original_resin_cost_ = value;
  // @@protoc_insertion_point(field_set:proto.WeeklyBossResinDiscountInfo.original_resin_cost)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

BossChestInfo::BossChestInfo_UidDiscountMapEntry::BossChestInfo_UidDiscountMapEntry() {}
BossChestInfo::BossChestInfo_UidDiscountMapEntry::BossChestInfo_UidDiscountMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata BossChestInfo::BossChestInfo_UidDiscountMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[82];
}
void BossChestInfo::BossChestInfo_UidDiscountMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void BossChestInfo::BossChestInfo_UidDiscountMapEntry::MergeFrom(const BossChestInfo_UidDiscountMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BossChestInfo::kMonsterConfigIdFieldNumber;
const int BossChestInfo::kResinFieldNumber;
const int BossChestInfo::kRemainUidListFieldNumber;
const int BossChestInfo::kQualifyUidListFieldNumber;
const int BossChestInfo::kUidDiscountMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BossChestInfo::BossChestInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BossChestInfo)
}
BossChestInfo::BossChestInfo(const BossChestInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      remain_uid_list_(from.remain_uid_list_),
      qualify_uid_list_(from.qualify_uid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_discount_map_.MergeFrom(from.uid_discount_map_);
  ::memcpy(&monster_config_id_, &from.monster_config_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&resin_) -
    reinterpret_cast<char*>(&monster_config_id_)) + sizeof(resin_));
  // @@protoc_insertion_point(copy_constructor:proto.BossChestInfo)
}

void BossChestInfo::SharedCtor() {
  ::memset(&monster_config_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resin_) -
      reinterpret_cast<char*>(&monster_config_id_)) + sizeof(resin_));
  _cached_size_ = 0;
}

BossChestInfo::~BossChestInfo() {
  // @@protoc_insertion_point(destructor:proto.BossChestInfo)
  SharedDtor();
}

void BossChestInfo::SharedDtor() {
}

void BossChestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossChestInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BossChestInfo& BossChestInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

BossChestInfo* BossChestInfo::New(::google::protobuf::Arena* arena) const {
  BossChestInfo* n = new BossChestInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BossChestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BossChestInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remain_uid_list_.Clear();
  qualify_uid_list_.Clear();
  uid_discount_map_.Clear();
  ::memset(&monster_config_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resin_) -
      reinterpret_cast<char*>(&monster_config_id_)) + sizeof(resin_));
  _internal_metadata_.Clear();
}

bool BossChestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BossChestInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 monster_config_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 resin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 remain_uid_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_remain_uid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_remain_uid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 qualify_uid_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_qualify_uid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_qualify_uid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .proto.WeeklyBossResinDiscountInfo> uid_discount_map = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          BossChestInfo_UidDiscountMapEntry::Parser< ::google::protobuf::internal::MapField<
              BossChestInfo_UidDiscountMapEntry,
              ::google::protobuf::uint32, ::proto::WeeklyBossResinDiscountInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::WeeklyBossResinDiscountInfo > > parser(&uid_discount_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BossChestInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BossChestInfo)
  return false;
#undef DO_
}

void BossChestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BossChestInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 monster_config_id = 1;
  if (this->monster_config_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monster_config_id(), output);
  }

  // uint32 resin = 2;
  if (this->resin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resin(), output);
  }

  // repeated uint32 remain_uid_list = 3;
  if (this->remain_uid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _remain_uid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->remain_uid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->remain_uid_list(i), output);
  }

  // repeated uint32 qualify_uid_list = 4;
  if (this->qualify_uid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _qualify_uid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->qualify_uid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->qualify_uid_list(i), output);
  }

  // map<uint32, .proto.WeeklyBossResinDiscountInfo> uid_discount_map = 5;
  if (!this->uid_discount_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::WeeklyBossResinDiscountInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->uid_discount_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->uid_discount_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::WeeklyBossResinDiscountInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::WeeklyBossResinDiscountInfo >::const_iterator
          it = this->uid_discount_map().begin();
          it != this->uid_discount_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<BossChestInfo_UidDiscountMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(uid_discount_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<BossChestInfo_UidDiscountMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::WeeklyBossResinDiscountInfo >::const_iterator
          it = this->uid_discount_map().begin();
          it != this->uid_discount_map().end(); ++it) {
        entry.reset(uid_discount_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BossChestInfo)
}

::google::protobuf::uint8* BossChestInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BossChestInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 monster_config_id = 1;
  if (this->monster_config_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monster_config_id(), target);
  }

  // uint32 resin = 2;
  if (this->resin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resin(), target);
  }

  // repeated uint32 remain_uid_list = 3;
  if (this->remain_uid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _remain_uid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->remain_uid_list_, target);
  }

  // repeated uint32 qualify_uid_list = 4;
  if (this->qualify_uid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _qualify_uid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->qualify_uid_list_, target);
  }

  // map<uint32, .proto.WeeklyBossResinDiscountInfo> uid_discount_map = 5;
  if (!this->uid_discount_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::WeeklyBossResinDiscountInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->uid_discount_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->uid_discount_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::WeeklyBossResinDiscountInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::WeeklyBossResinDiscountInfo >::const_iterator
          it = this->uid_discount_map().begin();
          it != this->uid_discount_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<BossChestInfo_UidDiscountMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(uid_discount_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<BossChestInfo_UidDiscountMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::WeeklyBossResinDiscountInfo >::const_iterator
          it = this->uid_discount_map().begin();
          it != this->uid_discount_map().end(); ++it) {
        entry.reset(uid_discount_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BossChestInfo)
  return target;
}

size_t BossChestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BossChestInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 remain_uid_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->remain_uid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _remain_uid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 qualify_uid_list = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->qualify_uid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _qualify_uid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<uint32, .proto.WeeklyBossResinDiscountInfo> uid_discount_map = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->uid_discount_map_size());
  {
    ::google::protobuf::scoped_ptr<BossChestInfo_UidDiscountMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::WeeklyBossResinDiscountInfo >::const_iterator
        it = this->uid_discount_map().begin();
        it != this->uid_discount_map().end(); ++it) {
      entry.reset(uid_discount_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 monster_config_id = 1;
  if (this->monster_config_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->monster_config_id());
  }

  // uint32 resin = 2;
  if (this->resin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossChestInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BossChestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BossChestInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BossChestInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BossChestInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BossChestInfo)
    MergeFrom(*source);
  }
}

void BossChestInfo::MergeFrom(const BossChestInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BossChestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remain_uid_list_.MergeFrom(from.remain_uid_list_);
  qualify_uid_list_.MergeFrom(from.qualify_uid_list_);
  uid_discount_map_.MergeFrom(from.uid_discount_map_);
  if (from.monster_config_id() != 0) {
    set_monster_config_id(from.monster_config_id());
  }
  if (from.resin() != 0) {
    set_resin(from.resin());
  }
}

void BossChestInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BossChestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossChestInfo::CopyFrom(const BossChestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BossChestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossChestInfo::IsInitialized() const {
  return true;
}

void BossChestInfo::Swap(BossChestInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BossChestInfo::InternalSwap(BossChestInfo* other) {
  using std::swap;
  remain_uid_list_.InternalSwap(&other->remain_uid_list_);
  qualify_uid_list_.InternalSwap(&other->qualify_uid_list_);
  uid_discount_map_.Swap(&other->uid_discount_map_);
  swap(monster_config_id_, other->monster_config_id_);
  swap(resin_, other->resin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BossChestInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BossChestInfo

// uint32 monster_config_id = 1;
void BossChestInfo::clear_monster_config_id() {
  monster_config_id_ = 0u;
}
::google::protobuf::uint32 BossChestInfo::monster_config_id() const {
  // @@protoc_insertion_point(field_get:proto.BossChestInfo.monster_config_id)
  return monster_config_id_;
}
void BossChestInfo::set_monster_config_id(::google::protobuf::uint32 value) {
  
  monster_config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BossChestInfo.monster_config_id)
}

// uint32 resin = 2;
void BossChestInfo::clear_resin() {
  resin_ = 0u;
}
::google::protobuf::uint32 BossChestInfo::resin() const {
  // @@protoc_insertion_point(field_get:proto.BossChestInfo.resin)
  return resin_;
}
void BossChestInfo::set_resin(::google::protobuf::uint32 value) {
  
  resin_ = value;
  // @@protoc_insertion_point(field_set:proto.BossChestInfo.resin)
}

// repeated uint32 remain_uid_list = 3;
int BossChestInfo::remain_uid_list_size() const {
  return remain_uid_list_.size();
}
void BossChestInfo::clear_remain_uid_list() {
  remain_uid_list_.Clear();
}
::google::protobuf::uint32 BossChestInfo::remain_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BossChestInfo.remain_uid_list)
  return remain_uid_list_.Get(index);
}
void BossChestInfo::set_remain_uid_list(int index, ::google::protobuf::uint32 value) {
  remain_uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BossChestInfo.remain_uid_list)
}
void BossChestInfo::add_remain_uid_list(::google::protobuf::uint32 value) {
  remain_uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BossChestInfo.remain_uid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BossChestInfo::remain_uid_list() const {
  // @@protoc_insertion_point(field_list:proto.BossChestInfo.remain_uid_list)
  return remain_uid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BossChestInfo::mutable_remain_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BossChestInfo.remain_uid_list)
  return &remain_uid_list_;
}

// repeated uint32 qualify_uid_list = 4;
int BossChestInfo::qualify_uid_list_size() const {
  return qualify_uid_list_.size();
}
void BossChestInfo::clear_qualify_uid_list() {
  qualify_uid_list_.Clear();
}
::google::protobuf::uint32 BossChestInfo::qualify_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BossChestInfo.qualify_uid_list)
  return qualify_uid_list_.Get(index);
}
void BossChestInfo::set_qualify_uid_list(int index, ::google::protobuf::uint32 value) {
  qualify_uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BossChestInfo.qualify_uid_list)
}
void BossChestInfo::add_qualify_uid_list(::google::protobuf::uint32 value) {
  qualify_uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BossChestInfo.qualify_uid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BossChestInfo::qualify_uid_list() const {
  // @@protoc_insertion_point(field_list:proto.BossChestInfo.qualify_uid_list)
  return qualify_uid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BossChestInfo::mutable_qualify_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BossChestInfo.qualify_uid_list)
  return &qualify_uid_list_;
}

// map<uint32, .proto.WeeklyBossResinDiscountInfo> uid_discount_map = 5;
int BossChestInfo::uid_discount_map_size() const {
  return uid_discount_map_.size();
}
void BossChestInfo::clear_uid_discount_map() {
  uid_discount_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::WeeklyBossResinDiscountInfo >&
BossChestInfo::uid_discount_map() const {
  // @@protoc_insertion_point(field_map:proto.BossChestInfo.uid_discount_map)
  return uid_discount_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::WeeklyBossResinDiscountInfo >*
BossChestInfo::mutable_uid_discount_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.BossChestInfo.uid_discount_map)
  return uid_discount_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlossomChestInfo::kResinFieldNumber;
const int BlossomChestInfo::kQualifyUidListFieldNumber;
const int BlossomChestInfo::kRemainUidListFieldNumber;
const int BlossomChestInfo::kDeadTimeFieldNumber;
const int BlossomChestInfo::kBlossomRefreshTypeFieldNumber;
const int BlossomChestInfo::kRefreshIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlossomChestInfo::BlossomChestInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BlossomChestInfo)
}
BlossomChestInfo::BlossomChestInfo(const BlossomChestInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      qualify_uid_list_(from.qualify_uid_list_),
      remain_uid_list_(from.remain_uid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&resin_, &from.resin_,
    static_cast<size_t>(reinterpret_cast<char*>(&refresh_id_) -
    reinterpret_cast<char*>(&resin_)) + sizeof(refresh_id_));
  // @@protoc_insertion_point(copy_constructor:proto.BlossomChestInfo)
}

void BlossomChestInfo::SharedCtor() {
  ::memset(&resin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_id_) -
      reinterpret_cast<char*>(&resin_)) + sizeof(refresh_id_));
  _cached_size_ = 0;
}

BlossomChestInfo::~BlossomChestInfo() {
  // @@protoc_insertion_point(destructor:proto.BlossomChestInfo)
  SharedDtor();
}

void BlossomChestInfo::SharedDtor() {
}

void BlossomChestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlossomChestInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlossomChestInfo& BlossomChestInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlossomChestInfo* BlossomChestInfo::New(::google::protobuf::Arena* arena) const {
  BlossomChestInfo* n = new BlossomChestInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlossomChestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BlossomChestInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qualify_uid_list_.Clear();
  remain_uid_list_.Clear();
  ::memset(&resin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_id_) -
      reinterpret_cast<char*>(&resin_)) + sizeof(refresh_id_));
  _internal_metadata_.Clear();
}

bool BlossomChestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BlossomChestInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 resin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 qualify_uid_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_qualify_uid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_qualify_uid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 remain_uid_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_remain_uid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_remain_uid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dead_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 blossom_refresh_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blossom_refresh_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 refresh_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refresh_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BlossomChestInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BlossomChestInfo)
  return false;
#undef DO_
}

void BlossomChestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BlossomChestInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 resin = 1;
  if (this->resin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->resin(), output);
  }

  // repeated uint32 qualify_uid_list = 2;
  if (this->qualify_uid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _qualify_uid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->qualify_uid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->qualify_uid_list(i), output);
  }

  // repeated uint32 remain_uid_list = 3;
  if (this->remain_uid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _remain_uid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->remain_uid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->remain_uid_list(i), output);
  }

  // uint32 dead_time = 4;
  if (this->dead_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dead_time(), output);
  }

  // uint32 blossom_refresh_type = 5;
  if (this->blossom_refresh_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->blossom_refresh_type(), output);
  }

  // uint32 refresh_id = 6;
  if (this->refresh_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->refresh_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BlossomChestInfo)
}

::google::protobuf::uint8* BlossomChestInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BlossomChestInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 resin = 1;
  if (this->resin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->resin(), target);
  }

  // repeated uint32 qualify_uid_list = 2;
  if (this->qualify_uid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _qualify_uid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->qualify_uid_list_, target);
  }

  // repeated uint32 remain_uid_list = 3;
  if (this->remain_uid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _remain_uid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->remain_uid_list_, target);
  }

  // uint32 dead_time = 4;
  if (this->dead_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dead_time(), target);
  }

  // uint32 blossom_refresh_type = 5;
  if (this->blossom_refresh_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->blossom_refresh_type(), target);
  }

  // uint32 refresh_id = 6;
  if (this->refresh_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->refresh_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BlossomChestInfo)
  return target;
}

size_t BlossomChestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BlossomChestInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 qualify_uid_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->qualify_uid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _qualify_uid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 remain_uid_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->remain_uid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _remain_uid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 resin = 1;
  if (this->resin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resin());
  }

  // uint32 dead_time = 4;
  if (this->dead_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dead_time());
  }

  // uint32 blossom_refresh_type = 5;
  if (this->blossom_refresh_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->blossom_refresh_type());
  }

  // uint32 refresh_id = 6;
  if (this->refresh_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->refresh_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlossomChestInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BlossomChestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BlossomChestInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlossomChestInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BlossomChestInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BlossomChestInfo)
    MergeFrom(*source);
  }
}

void BlossomChestInfo::MergeFrom(const BlossomChestInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BlossomChestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  qualify_uid_list_.MergeFrom(from.qualify_uid_list_);
  remain_uid_list_.MergeFrom(from.remain_uid_list_);
  if (from.resin() != 0) {
    set_resin(from.resin());
  }
  if (from.dead_time() != 0) {
    set_dead_time(from.dead_time());
  }
  if (from.blossom_refresh_type() != 0) {
    set_blossom_refresh_type(from.blossom_refresh_type());
  }
  if (from.refresh_id() != 0) {
    set_refresh_id(from.refresh_id());
  }
}

void BlossomChestInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BlossomChestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlossomChestInfo::CopyFrom(const BlossomChestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BlossomChestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlossomChestInfo::IsInitialized() const {
  return true;
}

void BlossomChestInfo::Swap(BlossomChestInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlossomChestInfo::InternalSwap(BlossomChestInfo* other) {
  using std::swap;
  qualify_uid_list_.InternalSwap(&other->qualify_uid_list_);
  remain_uid_list_.InternalSwap(&other->remain_uid_list_);
  swap(resin_, other->resin_);
  swap(dead_time_, other->dead_time_);
  swap(blossom_refresh_type_, other->blossom_refresh_type_);
  swap(refresh_id_, other->refresh_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlossomChestInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlossomChestInfo

// uint32 resin = 1;
void BlossomChestInfo::clear_resin() {
  resin_ = 0u;
}
::google::protobuf::uint32 BlossomChestInfo::resin() const {
  // @@protoc_insertion_point(field_get:proto.BlossomChestInfo.resin)
  return resin_;
}
void BlossomChestInfo::set_resin(::google::protobuf::uint32 value) {
  
  resin_ = value;
  // @@protoc_insertion_point(field_set:proto.BlossomChestInfo.resin)
}

// repeated uint32 qualify_uid_list = 2;
int BlossomChestInfo::qualify_uid_list_size() const {
  return qualify_uid_list_.size();
}
void BlossomChestInfo::clear_qualify_uid_list() {
  qualify_uid_list_.Clear();
}
::google::protobuf::uint32 BlossomChestInfo::qualify_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BlossomChestInfo.qualify_uid_list)
  return qualify_uid_list_.Get(index);
}
void BlossomChestInfo::set_qualify_uid_list(int index, ::google::protobuf::uint32 value) {
  qualify_uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BlossomChestInfo.qualify_uid_list)
}
void BlossomChestInfo::add_qualify_uid_list(::google::protobuf::uint32 value) {
  qualify_uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BlossomChestInfo.qualify_uid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlossomChestInfo::qualify_uid_list() const {
  // @@protoc_insertion_point(field_list:proto.BlossomChestInfo.qualify_uid_list)
  return qualify_uid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlossomChestInfo::mutable_qualify_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BlossomChestInfo.qualify_uid_list)
  return &qualify_uid_list_;
}

// repeated uint32 remain_uid_list = 3;
int BlossomChestInfo::remain_uid_list_size() const {
  return remain_uid_list_.size();
}
void BlossomChestInfo::clear_remain_uid_list() {
  remain_uid_list_.Clear();
}
::google::protobuf::uint32 BlossomChestInfo::remain_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BlossomChestInfo.remain_uid_list)
  return remain_uid_list_.Get(index);
}
void BlossomChestInfo::set_remain_uid_list(int index, ::google::protobuf::uint32 value) {
  remain_uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BlossomChestInfo.remain_uid_list)
}
void BlossomChestInfo::add_remain_uid_list(::google::protobuf::uint32 value) {
  remain_uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BlossomChestInfo.remain_uid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlossomChestInfo::remain_uid_list() const {
  // @@protoc_insertion_point(field_list:proto.BlossomChestInfo.remain_uid_list)
  return remain_uid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlossomChestInfo::mutable_remain_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BlossomChestInfo.remain_uid_list)
  return &remain_uid_list_;
}

// uint32 dead_time = 4;
void BlossomChestInfo::clear_dead_time() {
  dead_time_ = 0u;
}
::google::protobuf::uint32 BlossomChestInfo::dead_time() const {
  // @@protoc_insertion_point(field_get:proto.BlossomChestInfo.dead_time)
  return dead_time_;
}
void BlossomChestInfo::set_dead_time(::google::protobuf::uint32 value) {
  
  dead_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BlossomChestInfo.dead_time)
}

// uint32 blossom_refresh_type = 5;
void BlossomChestInfo::clear_blossom_refresh_type() {
  blossom_refresh_type_ = 0u;
}
::google::protobuf::uint32 BlossomChestInfo::blossom_refresh_type() const {
  // @@protoc_insertion_point(field_get:proto.BlossomChestInfo.blossom_refresh_type)
  return blossom_refresh_type_;
}
void BlossomChestInfo::set_blossom_refresh_type(::google::protobuf::uint32 value) {
  
  blossom_refresh_type_ = value;
  // @@protoc_insertion_point(field_set:proto.BlossomChestInfo.blossom_refresh_type)
}

// uint32 refresh_id = 6;
void BlossomChestInfo::clear_refresh_id() {
  refresh_id_ = 0u;
}
::google::protobuf::uint32 BlossomChestInfo::refresh_id() const {
  // @@protoc_insertion_point(field_get:proto.BlossomChestInfo.refresh_id)
  return refresh_id_;
}
void BlossomChestInfo::set_refresh_id(::google::protobuf::uint32 value) {
  
  refresh_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BlossomChestInfo.refresh_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GadgetCrucibleInfo::kMpPlayIdFieldNumber;
const int GadgetCrucibleInfo::kPrepareEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GadgetCrucibleInfo::GadgetCrucibleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GadgetCrucibleInfo)
}
GadgetCrucibleInfo::GadgetCrucibleInfo(const GadgetCrucibleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mp_play_id_, &from.mp_play_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&prepare_end_time_) -
    reinterpret_cast<char*>(&mp_play_id_)) + sizeof(prepare_end_time_));
  // @@protoc_insertion_point(copy_constructor:proto.GadgetCrucibleInfo)
}

void GadgetCrucibleInfo::SharedCtor() {
  ::memset(&mp_play_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prepare_end_time_) -
      reinterpret_cast<char*>(&mp_play_id_)) + sizeof(prepare_end_time_));
  _cached_size_ = 0;
}

GadgetCrucibleInfo::~GadgetCrucibleInfo() {
  // @@protoc_insertion_point(destructor:proto.GadgetCrucibleInfo)
  SharedDtor();
}

void GadgetCrucibleInfo::SharedDtor() {
}

void GadgetCrucibleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GadgetCrucibleInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GadgetCrucibleInfo& GadgetCrucibleInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

GadgetCrucibleInfo* GadgetCrucibleInfo::New(::google::protobuf::Arena* arena) const {
  GadgetCrucibleInfo* n = new GadgetCrucibleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GadgetCrucibleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GadgetCrucibleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mp_play_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prepare_end_time_) -
      reinterpret_cast<char*>(&mp_play_id_)) + sizeof(prepare_end_time_));
  _internal_metadata_.Clear();
}

bool GadgetCrucibleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GadgetCrucibleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 mp_play_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp_play_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 prepare_end_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prepare_end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GadgetCrucibleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GadgetCrucibleInfo)
  return false;
#undef DO_
}

void GadgetCrucibleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GadgetCrucibleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mp_play_id = 1;
  if (this->mp_play_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mp_play_id(), output);
  }

  // uint32 prepare_end_time = 2;
  if (this->prepare_end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prepare_end_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GadgetCrucibleInfo)
}

::google::protobuf::uint8* GadgetCrucibleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GadgetCrucibleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mp_play_id = 1;
  if (this->mp_play_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mp_play_id(), target);
  }

  // uint32 prepare_end_time = 2;
  if (this->prepare_end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prepare_end_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GadgetCrucibleInfo)
  return target;
}

size_t GadgetCrucibleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GadgetCrucibleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 mp_play_id = 1;
  if (this->mp_play_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mp_play_id());
  }

  // uint32 prepare_end_time = 2;
  if (this->prepare_end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prepare_end_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GadgetCrucibleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GadgetCrucibleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GadgetCrucibleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GadgetCrucibleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GadgetCrucibleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GadgetCrucibleInfo)
    MergeFrom(*source);
  }
}

void GadgetCrucibleInfo::MergeFrom(const GadgetCrucibleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GadgetCrucibleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mp_play_id() != 0) {
    set_mp_play_id(from.mp_play_id());
  }
  if (from.prepare_end_time() != 0) {
    set_prepare_end_time(from.prepare_end_time());
  }
}

void GadgetCrucibleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GadgetCrucibleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GadgetCrucibleInfo::CopyFrom(const GadgetCrucibleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GadgetCrucibleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GadgetCrucibleInfo::IsInitialized() const {
  return true;
}

void GadgetCrucibleInfo::Swap(GadgetCrucibleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GadgetCrucibleInfo::InternalSwap(GadgetCrucibleInfo* other) {
  using std::swap;
  swap(mp_play_id_, other->mp_play_id_);
  swap(prepare_end_time_, other->prepare_end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GadgetCrucibleInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GadgetCrucibleInfo

// uint32 mp_play_id = 1;
void GadgetCrucibleInfo::clear_mp_play_id() {
  mp_play_id_ = 0u;
}
::google::protobuf::uint32 GadgetCrucibleInfo::mp_play_id() const {
  // @@protoc_insertion_point(field_get:proto.GadgetCrucibleInfo.mp_play_id)
  return mp_play_id_;
}
void GadgetCrucibleInfo::set_mp_play_id(::google::protobuf::uint32 value) {
  
  mp_play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GadgetCrucibleInfo.mp_play_id)
}

// uint32 prepare_end_time = 2;
void GadgetCrucibleInfo::clear_prepare_end_time() {
  prepare_end_time_ = 0u;
}
::google::protobuf::uint32 GadgetCrucibleInfo::prepare_end_time() const {
  // @@protoc_insertion_point(field_get:proto.GadgetCrucibleInfo.prepare_end_time)
  return prepare_end_time_;
}
void GadgetCrucibleInfo::set_prepare_end_time(::google::protobuf::uint32 value) {
  
  prepare_end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GadgetCrucibleInfo.prepare_end_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GadgetPlayInfo::kPlayTypeFieldNumber;
const int GadgetPlayInfo::kDurationFieldNumber;
const int GadgetPlayInfo::kProgressStageListFieldNumber;
const int GadgetPlayInfo::kStartCdFieldNumber;
const int GadgetPlayInfo::kStartTimeFieldNumber;
const int GadgetPlayInfo::kProgressFieldNumber;
const int GadgetPlayInfo::kCrucibleInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GadgetPlayInfo::GadgetPlayInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GadgetPlayInfo)
}
GadgetPlayInfo::GadgetPlayInfo(const GadgetPlayInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      progress_stage_list_(from.progress_stage_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&play_type_, &from.play_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&progress_) -
    reinterpret_cast<char*>(&play_type_)) + sizeof(progress_));
  clear_has_play_info();
  switch (from.play_info_case()) {
    case kCrucibleInfo: {
      mutable_crucible_info()->::proto::GadgetCrucibleInfo::MergeFrom(from.crucible_info());
      break;
    }
    case PLAY_INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.GadgetPlayInfo)
}

void GadgetPlayInfo::SharedCtor() {
  ::memset(&play_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_) -
      reinterpret_cast<char*>(&play_type_)) + sizeof(progress_));
  clear_has_play_info();
  _cached_size_ = 0;
}

GadgetPlayInfo::~GadgetPlayInfo() {
  // @@protoc_insertion_point(destructor:proto.GadgetPlayInfo)
  SharedDtor();
}

void GadgetPlayInfo::SharedDtor() {
  if (has_play_info()) {
    clear_play_info();
  }
}

void GadgetPlayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GadgetPlayInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GadgetPlayInfo& GadgetPlayInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

GadgetPlayInfo* GadgetPlayInfo::New(::google::protobuf::Arena* arena) const {
  GadgetPlayInfo* n = new GadgetPlayInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GadgetPlayInfo::clear_play_info() {
// @@protoc_insertion_point(one_of_clear_start:proto.GadgetPlayInfo)
  switch (play_info_case()) {
    case kCrucibleInfo: {
      delete play_info_.crucible_info_;
      break;
    }
    case PLAY_INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PLAY_INFO_NOT_SET;
}


void GadgetPlayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GadgetPlayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  progress_stage_list_.Clear();
  ::memset(&play_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_) -
      reinterpret_cast<char*>(&play_type_)) + sizeof(progress_));
  clear_play_info();
  _internal_metadata_.Clear();
}

bool GadgetPlayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GadgetPlayInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 play_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 progress_stage_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_progress_stage_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_progress_stage_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 start_cd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_cd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 start_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 progress = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GadgetCrucibleInfo crucible_info = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crucible_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GadgetPlayInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GadgetPlayInfo)
  return false;
#undef DO_
}

void GadgetPlayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GadgetPlayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_type = 1;
  if (this->play_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->play_type(), output);
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duration(), output);
  }

  // repeated uint32 progress_stage_list = 3;
  if (this->progress_stage_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _progress_stage_list_cached_byte_size_));
  }
  for (int i = 0, n = this->progress_stage_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->progress_stage_list(i), output);
  }

  // uint32 start_cd = 4;
  if (this->start_cd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_cd(), output);
  }

  // uint32 start_time = 5;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->start_time(), output);
  }

  // uint32 progress = 6;
  if (this->progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->progress(), output);
  }

  // .proto.GadgetCrucibleInfo crucible_info = 21;
  if (has_crucible_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *play_info_.crucible_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GadgetPlayInfo)
}

::google::protobuf::uint8* GadgetPlayInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GadgetPlayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_type = 1;
  if (this->play_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->play_type(), target);
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duration(), target);
  }

  // repeated uint32 progress_stage_list = 3;
  if (this->progress_stage_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _progress_stage_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->progress_stage_list_, target);
  }

  // uint32 start_cd = 4;
  if (this->start_cd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_cd(), target);
  }

  // uint32 start_time = 5;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->start_time(), target);
  }

  // uint32 progress = 6;
  if (this->progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->progress(), target);
  }

  // .proto.GadgetCrucibleInfo crucible_info = 21;
  if (has_crucible_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *play_info_.crucible_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GadgetPlayInfo)
  return target;
}

size_t GadgetPlayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GadgetPlayInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 progress_stage_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->progress_stage_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _progress_stage_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 play_type = 1;
  if (this->play_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_type());
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  // uint32 start_cd = 4;
  if (this->start_cd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start_cd());
  }

  // uint32 start_time = 5;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start_time());
  }

  // uint32 progress = 6;
  if (this->progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->progress());
  }

  switch (play_info_case()) {
    // .proto.GadgetCrucibleInfo crucible_info = 21;
    case kCrucibleInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *play_info_.crucible_info_);
      break;
    }
    case PLAY_INFO_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GadgetPlayInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GadgetPlayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GadgetPlayInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GadgetPlayInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GadgetPlayInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GadgetPlayInfo)
    MergeFrom(*source);
  }
}

void GadgetPlayInfo::MergeFrom(const GadgetPlayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GadgetPlayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  progress_stage_list_.MergeFrom(from.progress_stage_list_);
  if (from.play_type() != 0) {
    set_play_type(from.play_type());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.start_cd() != 0) {
    set_start_cd(from.start_cd());
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.progress() != 0) {
    set_progress(from.progress());
  }
  switch (from.play_info_case()) {
    case kCrucibleInfo: {
      mutable_crucible_info()->::proto::GadgetCrucibleInfo::MergeFrom(from.crucible_info());
      break;
    }
    case PLAY_INFO_NOT_SET: {
      break;
    }
  }
}

void GadgetPlayInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GadgetPlayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GadgetPlayInfo::CopyFrom(const GadgetPlayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GadgetPlayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GadgetPlayInfo::IsInitialized() const {
  return true;
}

void GadgetPlayInfo::Swap(GadgetPlayInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GadgetPlayInfo::InternalSwap(GadgetPlayInfo* other) {
  using std::swap;
  progress_stage_list_.InternalSwap(&other->progress_stage_list_);
  swap(play_type_, other->play_type_);
  swap(duration_, other->duration_);
  swap(start_cd_, other->start_cd_);
  swap(start_time_, other->start_time_);
  swap(progress_, other->progress_);
  swap(play_info_, other->play_info_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GadgetPlayInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GadgetPlayInfo

// uint32 play_type = 1;
void GadgetPlayInfo::clear_play_type() {
  play_type_ = 0u;
}
::google::protobuf::uint32 GadgetPlayInfo::play_type() const {
  // @@protoc_insertion_point(field_get:proto.GadgetPlayInfo.play_type)
  return play_type_;
}
void GadgetPlayInfo::set_play_type(::google::protobuf::uint32 value) {
  
  play_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GadgetPlayInfo.play_type)
}

// uint32 duration = 2;
void GadgetPlayInfo::clear_duration() {
  duration_ = 0u;
}
::google::protobuf::uint32 GadgetPlayInfo::duration() const {
  // @@protoc_insertion_point(field_get:proto.GadgetPlayInfo.duration)
  return duration_;
}
void GadgetPlayInfo::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.GadgetPlayInfo.duration)
}

// repeated uint32 progress_stage_list = 3;
int GadgetPlayInfo::progress_stage_list_size() const {
  return progress_stage_list_.size();
}
void GadgetPlayInfo::clear_progress_stage_list() {
  progress_stage_list_.Clear();
}
::google::protobuf::uint32 GadgetPlayInfo::progress_stage_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GadgetPlayInfo.progress_stage_list)
  return progress_stage_list_.Get(index);
}
void GadgetPlayInfo::set_progress_stage_list(int index, ::google::protobuf::uint32 value) {
  progress_stage_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GadgetPlayInfo.progress_stage_list)
}
void GadgetPlayInfo::add_progress_stage_list(::google::protobuf::uint32 value) {
  progress_stage_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GadgetPlayInfo.progress_stage_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GadgetPlayInfo::progress_stage_list() const {
  // @@protoc_insertion_point(field_list:proto.GadgetPlayInfo.progress_stage_list)
  return progress_stage_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GadgetPlayInfo::mutable_progress_stage_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GadgetPlayInfo.progress_stage_list)
  return &progress_stage_list_;
}

// uint32 start_cd = 4;
void GadgetPlayInfo::clear_start_cd() {
  start_cd_ = 0u;
}
::google::protobuf::uint32 GadgetPlayInfo::start_cd() const {
  // @@protoc_insertion_point(field_get:proto.GadgetPlayInfo.start_cd)
  return start_cd_;
}
void GadgetPlayInfo::set_start_cd(::google::protobuf::uint32 value) {
  
  start_cd_ = value;
  // @@protoc_insertion_point(field_set:proto.GadgetPlayInfo.start_cd)
}

// uint32 start_time = 5;
void GadgetPlayInfo::clear_start_time() {
  start_time_ = 0u;
}
::google::protobuf::uint32 GadgetPlayInfo::start_time() const {
  // @@protoc_insertion_point(field_get:proto.GadgetPlayInfo.start_time)
  return start_time_;
}
void GadgetPlayInfo::set_start_time(::google::protobuf::uint32 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GadgetPlayInfo.start_time)
}

// uint32 progress = 6;
void GadgetPlayInfo::clear_progress() {
  progress_ = 0u;
}
::google::protobuf::uint32 GadgetPlayInfo::progress() const {
  // @@protoc_insertion_point(field_get:proto.GadgetPlayInfo.progress)
  return progress_;
}
void GadgetPlayInfo::set_progress(::google::protobuf::uint32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:proto.GadgetPlayInfo.progress)
}

// .proto.GadgetCrucibleInfo crucible_info = 21;
bool GadgetPlayInfo::has_crucible_info() const {
  return play_info_case() == kCrucibleInfo;
}
void GadgetPlayInfo::set_has_crucible_info() {
  _oneof_case_[0] = kCrucibleInfo;
}
void GadgetPlayInfo::clear_crucible_info() {
  if (has_crucible_info()) {
    delete play_info_.crucible_info_;
    clear_has_play_info();
  }
}
 const ::proto::GadgetCrucibleInfo& GadgetPlayInfo::crucible_info() const {
  // @@protoc_insertion_point(field_get:proto.GadgetPlayInfo.crucible_info)
  return has_crucible_info()
      ? *play_info_.crucible_info_
      : ::proto::GadgetCrucibleInfo::default_instance();
}
::proto::GadgetCrucibleInfo* GadgetPlayInfo::mutable_crucible_info() {
  if (!has_crucible_info()) {
    clear_play_info();
    set_has_crucible_info();
    play_info_.crucible_info_ = new ::proto::GadgetCrucibleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.GadgetPlayInfo.crucible_info)
  return play_info_.crucible_info_;
}
::proto::GadgetCrucibleInfo* GadgetPlayInfo::release_crucible_info() {
  // @@protoc_insertion_point(field_release:proto.GadgetPlayInfo.crucible_info)
  if (has_crucible_info()) {
    clear_has_play_info();
    ::proto::GadgetCrucibleInfo* temp = play_info_.crucible_info_;
    play_info_.crucible_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GadgetPlayInfo::set_allocated_crucible_info(::proto::GadgetCrucibleInfo* crucible_info) {
  clear_play_info();
  if (crucible_info) {
    set_has_crucible_info();
    play_info_.crucible_info_ = crucible_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GadgetPlayInfo.crucible_info)
}

bool GadgetPlayInfo::has_play_info() const {
  return play_info_case() != PLAY_INFO_NOT_SET;
}
void GadgetPlayInfo::clear_has_play_info() {
  _oneof_case_[0] = PLAY_INFO_NOT_SET;
}
GadgetPlayInfo::PlayInfoCase GadgetPlayInfo::play_info_case() const {
  return GadgetPlayInfo::PlayInfoCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MpPlayRewardInfo::kResinFieldNumber;
const int MpPlayRewardInfo::kRemainUidListFieldNumber;
const int MpPlayRewardInfo::kQualifyUidListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MpPlayRewardInfo::MpPlayRewardInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MpPlayRewardInfo)
}
MpPlayRewardInfo::MpPlayRewardInfo(const MpPlayRewardInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      remain_uid_list_(from.remain_uid_list_),
      qualify_uid_list_(from.qualify_uid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resin_ = from.resin_;
  // @@protoc_insertion_point(copy_constructor:proto.MpPlayRewardInfo)
}

void MpPlayRewardInfo::SharedCtor() {
  resin_ = 0u;
  _cached_size_ = 0;
}

MpPlayRewardInfo::~MpPlayRewardInfo() {
  // @@protoc_insertion_point(destructor:proto.MpPlayRewardInfo)
  SharedDtor();
}

void MpPlayRewardInfo::SharedDtor() {
}

void MpPlayRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MpPlayRewardInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MpPlayRewardInfo& MpPlayRewardInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

MpPlayRewardInfo* MpPlayRewardInfo::New(::google::protobuf::Arena* arena) const {
  MpPlayRewardInfo* n = new MpPlayRewardInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MpPlayRewardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MpPlayRewardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remain_uid_list_.Clear();
  qualify_uid_list_.Clear();
  resin_ = 0u;
  _internal_metadata_.Clear();
}

bool MpPlayRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MpPlayRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 resin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 remain_uid_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_remain_uid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_remain_uid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 qualify_uid_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_qualify_uid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_qualify_uid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MpPlayRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MpPlayRewardInfo)
  return false;
#undef DO_
}

void MpPlayRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MpPlayRewardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 resin = 1;
  if (this->resin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->resin(), output);
  }

  // repeated uint32 remain_uid_list = 2;
  if (this->remain_uid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _remain_uid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->remain_uid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->remain_uid_list(i), output);
  }

  // repeated uint32 qualify_uid_list = 3;
  if (this->qualify_uid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _qualify_uid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->qualify_uid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->qualify_uid_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MpPlayRewardInfo)
}

::google::protobuf::uint8* MpPlayRewardInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MpPlayRewardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 resin = 1;
  if (this->resin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->resin(), target);
  }

  // repeated uint32 remain_uid_list = 2;
  if (this->remain_uid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _remain_uid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->remain_uid_list_, target);
  }

  // repeated uint32 qualify_uid_list = 3;
  if (this->qualify_uid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _qualify_uid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->qualify_uid_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MpPlayRewardInfo)
  return target;
}

size_t MpPlayRewardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MpPlayRewardInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 remain_uid_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->remain_uid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _remain_uid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 qualify_uid_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->qualify_uid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _qualify_uid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 resin = 1;
  if (this->resin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MpPlayRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MpPlayRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MpPlayRewardInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MpPlayRewardInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MpPlayRewardInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MpPlayRewardInfo)
    MergeFrom(*source);
  }
}

void MpPlayRewardInfo::MergeFrom(const MpPlayRewardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MpPlayRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remain_uid_list_.MergeFrom(from.remain_uid_list_);
  qualify_uid_list_.MergeFrom(from.qualify_uid_list_);
  if (from.resin() != 0) {
    set_resin(from.resin());
  }
}

void MpPlayRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MpPlayRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpPlayRewardInfo::CopyFrom(const MpPlayRewardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MpPlayRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpPlayRewardInfo::IsInitialized() const {
  return true;
}

void MpPlayRewardInfo::Swap(MpPlayRewardInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MpPlayRewardInfo::InternalSwap(MpPlayRewardInfo* other) {
  using std::swap;
  remain_uid_list_.InternalSwap(&other->remain_uid_list_);
  qualify_uid_list_.InternalSwap(&other->qualify_uid_list_);
  swap(resin_, other->resin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MpPlayRewardInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MpPlayRewardInfo

// uint32 resin = 1;
void MpPlayRewardInfo::clear_resin() {
  resin_ = 0u;
}
::google::protobuf::uint32 MpPlayRewardInfo::resin() const {
  // @@protoc_insertion_point(field_get:proto.MpPlayRewardInfo.resin)
  return resin_;
}
void MpPlayRewardInfo::set_resin(::google::protobuf::uint32 value) {
  
  resin_ = value;
  // @@protoc_insertion_point(field_set:proto.MpPlayRewardInfo.resin)
}

// repeated uint32 remain_uid_list = 2;
int MpPlayRewardInfo::remain_uid_list_size() const {
  return remain_uid_list_.size();
}
void MpPlayRewardInfo::clear_remain_uid_list() {
  remain_uid_list_.Clear();
}
::google::protobuf::uint32 MpPlayRewardInfo::remain_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.MpPlayRewardInfo.remain_uid_list)
  return remain_uid_list_.Get(index);
}
void MpPlayRewardInfo::set_remain_uid_list(int index, ::google::protobuf::uint32 value) {
  remain_uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.MpPlayRewardInfo.remain_uid_list)
}
void MpPlayRewardInfo::add_remain_uid_list(::google::protobuf::uint32 value) {
  remain_uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.MpPlayRewardInfo.remain_uid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MpPlayRewardInfo::remain_uid_list() const {
  // @@protoc_insertion_point(field_list:proto.MpPlayRewardInfo.remain_uid_list)
  return remain_uid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MpPlayRewardInfo::mutable_remain_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.MpPlayRewardInfo.remain_uid_list)
  return &remain_uid_list_;
}

// repeated uint32 qualify_uid_list = 3;
int MpPlayRewardInfo::qualify_uid_list_size() const {
  return qualify_uid_list_.size();
}
void MpPlayRewardInfo::clear_qualify_uid_list() {
  qualify_uid_list_.Clear();
}
::google::protobuf::uint32 MpPlayRewardInfo::qualify_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.MpPlayRewardInfo.qualify_uid_list)
  return qualify_uid_list_.Get(index);
}
void MpPlayRewardInfo::set_qualify_uid_list(int index, ::google::protobuf::uint32 value) {
  qualify_uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.MpPlayRewardInfo.qualify_uid_list)
}
void MpPlayRewardInfo::add_qualify_uid_list(::google::protobuf::uint32 value) {
  qualify_uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.MpPlayRewardInfo.qualify_uid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MpPlayRewardInfo::qualify_uid_list() const {
  // @@protoc_insertion_point(field_list:proto.MpPlayRewardInfo.qualify_uid_list)
  return qualify_uid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MpPlayRewardInfo::mutable_qualify_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.MpPlayRewardInfo.qualify_uid_list)
  return &qualify_uid_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GadgetGeneralRewardInfo::kResinFieldNumber;
const int GadgetGeneralRewardInfo::kDeadTimeFieldNumber;
const int GadgetGeneralRewardInfo::kRemainUidListFieldNumber;
const int GadgetGeneralRewardInfo::kQualifyUidListFieldNumber;
const int GadgetGeneralRewardInfo::kItemParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GadgetGeneralRewardInfo::GadgetGeneralRewardInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GadgetGeneralRewardInfo)
}
GadgetGeneralRewardInfo::GadgetGeneralRewardInfo(const GadgetGeneralRewardInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      remain_uid_list_(from.remain_uid_list_),
      qualify_uid_list_(from.qualify_uid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_item_param()) {
    item_param_ = new ::proto::ItemParam(*from.item_param_);
  } else {
    item_param_ = NULL;
  }
  ::memcpy(&resin_, &from.resin_,
    static_cast<size_t>(reinterpret_cast<char*>(&dead_time_) -
    reinterpret_cast<char*>(&resin_)) + sizeof(dead_time_));
  // @@protoc_insertion_point(copy_constructor:proto.GadgetGeneralRewardInfo)
}

void GadgetGeneralRewardInfo::SharedCtor() {
  ::memset(&item_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dead_time_) -
      reinterpret_cast<char*>(&item_param_)) + sizeof(dead_time_));
  _cached_size_ = 0;
}

GadgetGeneralRewardInfo::~GadgetGeneralRewardInfo() {
  // @@protoc_insertion_point(destructor:proto.GadgetGeneralRewardInfo)
  SharedDtor();
}

void GadgetGeneralRewardInfo::SharedDtor() {
  if (this != internal_default_instance()) delete item_param_;
}

void GadgetGeneralRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GadgetGeneralRewardInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GadgetGeneralRewardInfo& GadgetGeneralRewardInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

GadgetGeneralRewardInfo* GadgetGeneralRewardInfo::New(::google::protobuf::Arena* arena) const {
  GadgetGeneralRewardInfo* n = new GadgetGeneralRewardInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GadgetGeneralRewardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GadgetGeneralRewardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remain_uid_list_.Clear();
  qualify_uid_list_.Clear();
  if (GetArenaNoVirtual() == NULL && item_param_ != NULL) {
    delete item_param_;
  }
  item_param_ = NULL;
  ::memset(&resin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dead_time_) -
      reinterpret_cast<char*>(&resin_)) + sizeof(dead_time_));
  _internal_metadata_.Clear();
}

bool GadgetGeneralRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GadgetGeneralRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 resin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dead_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 remain_uid_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_remain_uid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_remain_uid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 qualify_uid_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_qualify_uid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_qualify_uid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ItemParam item_param = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GadgetGeneralRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GadgetGeneralRewardInfo)
  return false;
#undef DO_
}

void GadgetGeneralRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GadgetGeneralRewardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 resin = 1;
  if (this->resin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->resin(), output);
  }

  // uint32 dead_time = 2;
  if (this->dead_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dead_time(), output);
  }

  // repeated uint32 remain_uid_list = 3;
  if (this->remain_uid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _remain_uid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->remain_uid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->remain_uid_list(i), output);
  }

  // repeated uint32 qualify_uid_list = 4;
  if (this->qualify_uid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _qualify_uid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->qualify_uid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->qualify_uid_list(i), output);
  }

  // .proto.ItemParam item_param = 5;
  if (this->has_item_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->item_param_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GadgetGeneralRewardInfo)
}

::google::protobuf::uint8* GadgetGeneralRewardInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GadgetGeneralRewardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 resin = 1;
  if (this->resin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->resin(), target);
  }

  // uint32 dead_time = 2;
  if (this->dead_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dead_time(), target);
  }

  // repeated uint32 remain_uid_list = 3;
  if (this->remain_uid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _remain_uid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->remain_uid_list_, target);
  }

  // repeated uint32 qualify_uid_list = 4;
  if (this->qualify_uid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _qualify_uid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->qualify_uid_list_, target);
  }

  // .proto.ItemParam item_param = 5;
  if (this->has_item_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->item_param_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GadgetGeneralRewardInfo)
  return target;
}

size_t GadgetGeneralRewardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GadgetGeneralRewardInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 remain_uid_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->remain_uid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _remain_uid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 qualify_uid_list = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->qualify_uid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _qualify_uid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .proto.ItemParam item_param = 5;
  if (this->has_item_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->item_param_);
  }

  // uint32 resin = 1;
  if (this->resin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resin());
  }

  // uint32 dead_time = 2;
  if (this->dead_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dead_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GadgetGeneralRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GadgetGeneralRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GadgetGeneralRewardInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GadgetGeneralRewardInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GadgetGeneralRewardInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GadgetGeneralRewardInfo)
    MergeFrom(*source);
  }
}

void GadgetGeneralRewardInfo::MergeFrom(const GadgetGeneralRewardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GadgetGeneralRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remain_uid_list_.MergeFrom(from.remain_uid_list_);
  qualify_uid_list_.MergeFrom(from.qualify_uid_list_);
  if (from.has_item_param()) {
    mutable_item_param()->::proto::ItemParam::MergeFrom(from.item_param());
  }
  if (from.resin() != 0) {
    set_resin(from.resin());
  }
  if (from.dead_time() != 0) {
    set_dead_time(from.dead_time());
  }
}

void GadgetGeneralRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GadgetGeneralRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GadgetGeneralRewardInfo::CopyFrom(const GadgetGeneralRewardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GadgetGeneralRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GadgetGeneralRewardInfo::IsInitialized() const {
  return true;
}

void GadgetGeneralRewardInfo::Swap(GadgetGeneralRewardInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GadgetGeneralRewardInfo::InternalSwap(GadgetGeneralRewardInfo* other) {
  using std::swap;
  remain_uid_list_.InternalSwap(&other->remain_uid_list_);
  qualify_uid_list_.InternalSwap(&other->qualify_uid_list_);
  swap(item_param_, other->item_param_);
  swap(resin_, other->resin_);
  swap(dead_time_, other->dead_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GadgetGeneralRewardInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GadgetGeneralRewardInfo

// uint32 resin = 1;
void GadgetGeneralRewardInfo::clear_resin() {
  resin_ = 0u;
}
::google::protobuf::uint32 GadgetGeneralRewardInfo::resin() const {
  // @@protoc_insertion_point(field_get:proto.GadgetGeneralRewardInfo.resin)
  return resin_;
}
void GadgetGeneralRewardInfo::set_resin(::google::protobuf::uint32 value) {
  
  resin_ = value;
  // @@protoc_insertion_point(field_set:proto.GadgetGeneralRewardInfo.resin)
}

// uint32 dead_time = 2;
void GadgetGeneralRewardInfo::clear_dead_time() {
  dead_time_ = 0u;
}
::google::protobuf::uint32 GadgetGeneralRewardInfo::dead_time() const {
  // @@protoc_insertion_point(field_get:proto.GadgetGeneralRewardInfo.dead_time)
  return dead_time_;
}
void GadgetGeneralRewardInfo::set_dead_time(::google::protobuf::uint32 value) {
  
  dead_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GadgetGeneralRewardInfo.dead_time)
}

// repeated uint32 remain_uid_list = 3;
int GadgetGeneralRewardInfo::remain_uid_list_size() const {
  return remain_uid_list_.size();
}
void GadgetGeneralRewardInfo::clear_remain_uid_list() {
  remain_uid_list_.Clear();
}
::google::protobuf::uint32 GadgetGeneralRewardInfo::remain_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GadgetGeneralRewardInfo.remain_uid_list)
  return remain_uid_list_.Get(index);
}
void GadgetGeneralRewardInfo::set_remain_uid_list(int index, ::google::protobuf::uint32 value) {
  remain_uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GadgetGeneralRewardInfo.remain_uid_list)
}
void GadgetGeneralRewardInfo::add_remain_uid_list(::google::protobuf::uint32 value) {
  remain_uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GadgetGeneralRewardInfo.remain_uid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GadgetGeneralRewardInfo::remain_uid_list() const {
  // @@protoc_insertion_point(field_list:proto.GadgetGeneralRewardInfo.remain_uid_list)
  return remain_uid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GadgetGeneralRewardInfo::mutable_remain_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GadgetGeneralRewardInfo.remain_uid_list)
  return &remain_uid_list_;
}

// repeated uint32 qualify_uid_list = 4;
int GadgetGeneralRewardInfo::qualify_uid_list_size() const {
  return qualify_uid_list_.size();
}
void GadgetGeneralRewardInfo::clear_qualify_uid_list() {
  qualify_uid_list_.Clear();
}
::google::protobuf::uint32 GadgetGeneralRewardInfo::qualify_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GadgetGeneralRewardInfo.qualify_uid_list)
  return qualify_uid_list_.Get(index);
}
void GadgetGeneralRewardInfo::set_qualify_uid_list(int index, ::google::protobuf::uint32 value) {
  qualify_uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GadgetGeneralRewardInfo.qualify_uid_list)
}
void GadgetGeneralRewardInfo::add_qualify_uid_list(::google::protobuf::uint32 value) {
  qualify_uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GadgetGeneralRewardInfo.qualify_uid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GadgetGeneralRewardInfo::qualify_uid_list() const {
  // @@protoc_insertion_point(field_list:proto.GadgetGeneralRewardInfo.qualify_uid_list)
  return qualify_uid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GadgetGeneralRewardInfo::mutable_qualify_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GadgetGeneralRewardInfo.qualify_uid_list)
  return &qualify_uid_list_;
}

// .proto.ItemParam item_param = 5;
bool GadgetGeneralRewardInfo::has_item_param() const {
  return this != internal_default_instance() && item_param_ != NULL;
}
void GadgetGeneralRewardInfo::clear_item_param() {
  if (GetArenaNoVirtual() == NULL && item_param_ != NULL) delete item_param_;
  item_param_ = NULL;
}
const ::proto::ItemParam& GadgetGeneralRewardInfo::item_param() const {
  const ::proto::ItemParam* p = item_param_;
  // @@protoc_insertion_point(field_get:proto.GadgetGeneralRewardInfo.item_param)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ItemParam*>(
      &::proto::_ItemParam_default_instance_);
}
::proto::ItemParam* GadgetGeneralRewardInfo::mutable_item_param() {
  
  if (item_param_ == NULL) {
    item_param_ = new ::proto::ItemParam;
  }
  // @@protoc_insertion_point(field_mutable:proto.GadgetGeneralRewardInfo.item_param)
  return item_param_;
}
::proto::ItemParam* GadgetGeneralRewardInfo::release_item_param() {
  // @@protoc_insertion_point(field_release:proto.GadgetGeneralRewardInfo.item_param)
  
  ::proto::ItemParam* temp = item_param_;
  item_param_ = NULL;
  return temp;
}
void GadgetGeneralRewardInfo::set_allocated_item_param(::proto::ItemParam* item_param) {
  delete item_param_;
  item_param_ = item_param;
  if (item_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GadgetGeneralRewardInfo.item_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OfferingInfo::kOfferingIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OfferingInfo::OfferingInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.OfferingInfo)
}
OfferingInfo::OfferingInfo(const OfferingInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  offering_id_ = from.offering_id_;
  // @@protoc_insertion_point(copy_constructor:proto.OfferingInfo)
}

void OfferingInfo::SharedCtor() {
  offering_id_ = 0u;
  _cached_size_ = 0;
}

OfferingInfo::~OfferingInfo() {
  // @@protoc_insertion_point(destructor:proto.OfferingInfo)
  SharedDtor();
}

void OfferingInfo::SharedDtor() {
}

void OfferingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfferingInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OfferingInfo& OfferingInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

OfferingInfo* OfferingInfo::New(::google::protobuf::Arena* arena) const {
  OfferingInfo* n = new OfferingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OfferingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.OfferingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  offering_id_ = 0u;
  _internal_metadata_.Clear();
}

bool OfferingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.OfferingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 offering_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offering_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.OfferingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.OfferingInfo)
  return false;
#undef DO_
}

void OfferingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.OfferingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 offering_id = 1;
  if (this->offering_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offering_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.OfferingInfo)
}

::google::protobuf::uint8* OfferingInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.OfferingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 offering_id = 1;
  if (this->offering_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offering_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.OfferingInfo)
  return target;
}

size_t OfferingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.OfferingInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 offering_id = 1;
  if (this->offering_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offering_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferingInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.OfferingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OfferingInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OfferingInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.OfferingInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.OfferingInfo)
    MergeFrom(*source);
  }
}

void OfferingInfo::MergeFrom(const OfferingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.OfferingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offering_id() != 0) {
    set_offering_id(from.offering_id());
  }
}

void OfferingInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.OfferingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfferingInfo::CopyFrom(const OfferingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.OfferingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferingInfo::IsInitialized() const {
  return true;
}

void OfferingInfo::Swap(OfferingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OfferingInfo::InternalSwap(OfferingInfo* other) {
  using std::swap;
  swap(offering_id_, other->offering_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OfferingInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OfferingInfo

// uint32 offering_id = 1;
void OfferingInfo::clear_offering_id() {
  offering_id_ = 0u;
}
::google::protobuf::uint32 OfferingInfo::offering_id() const {
  // @@protoc_insertion_point(field_get:proto.OfferingInfo.offering_id)
  return offering_id_;
}
void OfferingInfo::set_offering_id(::google::protobuf::uint32 value) {
  
  offering_id_ = value;
  // @@protoc_insertion_point(field_set:proto.OfferingInfo.offering_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuildingInfo::kBuildingIdFieldNumber;
const int BuildingInfo::kPointConfigIdFieldNumber;
const int BuildingInfo::kCostFieldNumber;
const int BuildingInfo::kRefundFieldNumber;
const int BuildingInfo::kOwnerUidFieldNumber;
const int BuildingInfo::kCurrentNumFieldNumber;
const int BuildingInfo::kMaxNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuildingInfo::BuildingInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BuildingInfo)
}
BuildingInfo::BuildingInfo(const BuildingInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&building_id_, &from.building_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_num_) -
    reinterpret_cast<char*>(&building_id_)) + sizeof(max_num_));
  // @@protoc_insertion_point(copy_constructor:proto.BuildingInfo)
}

void BuildingInfo::SharedCtor() {
  ::memset(&building_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_num_) -
      reinterpret_cast<char*>(&building_id_)) + sizeof(max_num_));
  _cached_size_ = 0;
}

BuildingInfo::~BuildingInfo() {
  // @@protoc_insertion_point(destructor:proto.BuildingInfo)
  SharedDtor();
}

void BuildingInfo::SharedDtor() {
}

void BuildingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BuildingInfo& BuildingInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

BuildingInfo* BuildingInfo::New(::google::protobuf::Arena* arena) const {
  BuildingInfo* n = new BuildingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BuildingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BuildingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&building_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_num_) -
      reinterpret_cast<char*>(&building_id_)) + sizeof(max_num_));
  _internal_metadata_.Clear();
}

bool BuildingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BuildingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 building_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &building_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 point_config_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cost = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 refund = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refund_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 owner_uid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 current_num = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_num = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BuildingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BuildingInfo)
  return false;
#undef DO_
}

void BuildingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BuildingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 building_id = 1;
  if (this->building_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->building_id(), output);
  }

  // uint32 point_config_id = 2;
  if (this->point_config_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->point_config_id(), output);
  }

  // uint32 cost = 3;
  if (this->cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cost(), output);
  }

  // uint32 refund = 5;
  if (this->refund() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->refund(), output);
  }

  // uint32 owner_uid = 6;
  if (this->owner_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->owner_uid(), output);
  }

  // uint32 current_num = 7;
  if (this->current_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->current_num(), output);
  }

  // uint32 max_num = 8;
  if (this->max_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->max_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BuildingInfo)
}

::google::protobuf::uint8* BuildingInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BuildingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 building_id = 1;
  if (this->building_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->building_id(), target);
  }

  // uint32 point_config_id = 2;
  if (this->point_config_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->point_config_id(), target);
  }

  // uint32 cost = 3;
  if (this->cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cost(), target);
  }

  // uint32 refund = 5;
  if (this->refund() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->refund(), target);
  }

  // uint32 owner_uid = 6;
  if (this->owner_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->owner_uid(), target);
  }

  // uint32 current_num = 7;
  if (this->current_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->current_num(), target);
  }

  // uint32 max_num = 8;
  if (this->max_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->max_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BuildingInfo)
  return target;
}

size_t BuildingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BuildingInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 building_id = 1;
  if (this->building_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->building_id());
  }

  // uint32 point_config_id = 2;
  if (this->point_config_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_config_id());
  }

  // uint32 cost = 3;
  if (this->cost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cost());
  }

  // uint32 refund = 5;
  if (this->refund() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->refund());
  }

  // uint32 owner_uid = 6;
  if (this->owner_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner_uid());
  }

  // uint32 current_num = 7;
  if (this->current_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->current_num());
  }

  // uint32 max_num = 8;
  if (this->max_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BuildingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildingInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BuildingInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BuildingInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BuildingInfo)
    MergeFrom(*source);
  }
}

void BuildingInfo::MergeFrom(const BuildingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BuildingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.building_id() != 0) {
    set_building_id(from.building_id());
  }
  if (from.point_config_id() != 0) {
    set_point_config_id(from.point_config_id());
  }
  if (from.cost() != 0) {
    set_cost(from.cost());
  }
  if (from.refund() != 0) {
    set_refund(from.refund());
  }
  if (from.owner_uid() != 0) {
    set_owner_uid(from.owner_uid());
  }
  if (from.current_num() != 0) {
    set_current_num(from.current_num());
  }
  if (from.max_num() != 0) {
    set_max_num(from.max_num());
  }
}

void BuildingInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BuildingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingInfo::CopyFrom(const BuildingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BuildingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingInfo::IsInitialized() const {
  return true;
}

void BuildingInfo::Swap(BuildingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BuildingInfo::InternalSwap(BuildingInfo* other) {
  using std::swap;
  swap(building_id_, other->building_id_);
  swap(point_config_id_, other->point_config_id_);
  swap(cost_, other->cost_);
  swap(refund_, other->refund_);
  swap(owner_uid_, other->owner_uid_);
  swap(current_num_, other->current_num_);
  swap(max_num_, other->max_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BuildingInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BuildingInfo

// uint32 building_id = 1;
void BuildingInfo::clear_building_id() {
  building_id_ = 0u;
}
::google::protobuf::uint32 BuildingInfo::building_id() const {
  // @@protoc_insertion_point(field_get:proto.BuildingInfo.building_id)
  return building_id_;
}
void BuildingInfo::set_building_id(::google::protobuf::uint32 value) {
  
  building_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BuildingInfo.building_id)
}

// uint32 point_config_id = 2;
void BuildingInfo::clear_point_config_id() {
  point_config_id_ = 0u;
}
::google::protobuf::uint32 BuildingInfo::point_config_id() const {
  // @@protoc_insertion_point(field_get:proto.BuildingInfo.point_config_id)
  return point_config_id_;
}
void BuildingInfo::set_point_config_id(::google::protobuf::uint32 value) {
  
  point_config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BuildingInfo.point_config_id)
}

// uint32 cost = 3;
void BuildingInfo::clear_cost() {
  cost_ = 0u;
}
::google::protobuf::uint32 BuildingInfo::cost() const {
  // @@protoc_insertion_point(field_get:proto.BuildingInfo.cost)
  return cost_;
}
void BuildingInfo::set_cost(::google::protobuf::uint32 value) {
  
  cost_ = value;
  // @@protoc_insertion_point(field_set:proto.BuildingInfo.cost)
}

// uint32 refund = 5;
void BuildingInfo::clear_refund() {
  refund_ = 0u;
}
::google::protobuf::uint32 BuildingInfo::refund() const {
  // @@protoc_insertion_point(field_get:proto.BuildingInfo.refund)
  return refund_;
}
void BuildingInfo::set_refund(::google::protobuf::uint32 value) {
  
  refund_ = value;
  // @@protoc_insertion_point(field_set:proto.BuildingInfo.refund)
}

// uint32 owner_uid = 6;
void BuildingInfo::clear_owner_uid() {
  owner_uid_ = 0u;
}
::google::protobuf::uint32 BuildingInfo::owner_uid() const {
  // @@protoc_insertion_point(field_get:proto.BuildingInfo.owner_uid)
  return owner_uid_;
}
void BuildingInfo::set_owner_uid(::google::protobuf::uint32 value) {
  
  owner_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.BuildingInfo.owner_uid)
}

// uint32 current_num = 7;
void BuildingInfo::clear_current_num() {
  current_num_ = 0u;
}
::google::protobuf::uint32 BuildingInfo::current_num() const {
  // @@protoc_insertion_point(field_get:proto.BuildingInfo.current_num)
  return current_num_;
}
void BuildingInfo::set_current_num(::google::protobuf::uint32 value) {
  
  current_num_ = value;
  // @@protoc_insertion_point(field_set:proto.BuildingInfo.current_num)
}

// uint32 max_num = 8;
void BuildingInfo::clear_max_num() {
  max_num_ = 0u;
}
::google::protobuf::uint32 BuildingInfo::max_num() const {
  // @@protoc_insertion_point(field_get:proto.BuildingInfo.max_num)
  return max_num_;
}
void BuildingInfo::set_max_num(::google::protobuf::uint32 value) {
  
  max_num_ = value;
  // @@protoc_insertion_point(field_set:proto.BuildingInfo.max_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FoundationInfo::kStatusFieldNumber;
const int FoundationInfo::kUidListFieldNumber;
const int FoundationInfo::kCurrentBuildingIdFieldNumber;
const int FoundationInfo::kLockedByUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FoundationInfo::FoundationInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FoundationInfo)
}
FoundationInfo::FoundationInfo(const FoundationInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      uid_list_(from.uid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&locked_by_uid_) -
    reinterpret_cast<char*>(&status_)) + sizeof(locked_by_uid_));
  // @@protoc_insertion_point(copy_constructor:proto.FoundationInfo)
}

void FoundationInfo::SharedCtor() {
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locked_by_uid_) -
      reinterpret_cast<char*>(&status_)) + sizeof(locked_by_uid_));
  _cached_size_ = 0;
}

FoundationInfo::~FoundationInfo() {
  // @@protoc_insertion_point(destructor:proto.FoundationInfo)
  SharedDtor();
}

void FoundationInfo::SharedDtor() {
}

void FoundationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FoundationInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FoundationInfo& FoundationInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

FoundationInfo* FoundationInfo::New(::google::protobuf::Arena* arena) const {
  FoundationInfo* n = new FoundationInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FoundationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FoundationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_list_.Clear();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locked_by_uid_) -
      reinterpret_cast<char*>(&status_)) + sizeof(locked_by_uid_));
  _internal_metadata_.Clear();
}

bool FoundationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FoundationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.FoundationStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::proto::FoundationStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 uid_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_uid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 current_building_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_building_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 locked_by_uid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &locked_by_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FoundationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FoundationInfo)
  return false;
#undef DO_
}

void FoundationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FoundationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.FoundationStatus status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated uint32 uid_list = 2;
  if (this->uid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _uid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->uid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->uid_list(i), output);
  }

  // uint32 current_building_id = 3;
  if (this->current_building_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->current_building_id(), output);
  }

  // uint32 locked_by_uid = 4;
  if (this->locked_by_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->locked_by_uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.FoundationInfo)
}

::google::protobuf::uint8* FoundationInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.FoundationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.FoundationStatus status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated uint32 uid_list = 2;
  if (this->uid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _uid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->uid_list_, target);
  }

  // uint32 current_building_id = 3;
  if (this->current_building_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->current_building_id(), target);
  }

  // uint32 locked_by_uid = 4;
  if (this->locked_by_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->locked_by_uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FoundationInfo)
  return target;
}

size_t FoundationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FoundationInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 uid_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->uid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _uid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .proto.FoundationStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // uint32 current_building_id = 3;
  if (this->current_building_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->current_building_id());
  }

  // uint32 locked_by_uid = 4;
  if (this->locked_by_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->locked_by_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FoundationInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FoundationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FoundationInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FoundationInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FoundationInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FoundationInfo)
    MergeFrom(*source);
  }
}

void FoundationInfo::MergeFrom(const FoundationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FoundationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uid_list_.MergeFrom(from.uid_list_);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.current_building_id() != 0) {
    set_current_building_id(from.current_building_id());
  }
  if (from.locked_by_uid() != 0) {
    set_locked_by_uid(from.locked_by_uid());
  }
}

void FoundationInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FoundationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FoundationInfo::CopyFrom(const FoundationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FoundationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FoundationInfo::IsInitialized() const {
  return true;
}

void FoundationInfo::Swap(FoundationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FoundationInfo::InternalSwap(FoundationInfo* other) {
  using std::swap;
  uid_list_.InternalSwap(&other->uid_list_);
  swap(status_, other->status_);
  swap(current_building_id_, other->current_building_id_);
  swap(locked_by_uid_, other->locked_by_uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FoundationInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FoundationInfo

// .proto.FoundationStatus status = 1;
void FoundationInfo::clear_status() {
  status_ = 0;
}
::proto::FoundationStatus FoundationInfo::status() const {
  // @@protoc_insertion_point(field_get:proto.FoundationInfo.status)
  return static_cast< ::proto::FoundationStatus >(status_);
}
void FoundationInfo::set_status(::proto::FoundationStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.FoundationInfo.status)
}

// repeated uint32 uid_list = 2;
int FoundationInfo::uid_list_size() const {
  return uid_list_.size();
}
void FoundationInfo::clear_uid_list() {
  uid_list_.Clear();
}
::google::protobuf::uint32 FoundationInfo::uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.FoundationInfo.uid_list)
  return uid_list_.Get(index);
}
void FoundationInfo::set_uid_list(int index, ::google::protobuf::uint32 value) {
  uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.FoundationInfo.uid_list)
}
void FoundationInfo::add_uid_list(::google::protobuf::uint32 value) {
  uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.FoundationInfo.uid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FoundationInfo::uid_list() const {
  // @@protoc_insertion_point(field_list:proto.FoundationInfo.uid_list)
  return uid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FoundationInfo::mutable_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.FoundationInfo.uid_list)
  return &uid_list_;
}

// uint32 current_building_id = 3;
void FoundationInfo::clear_current_building_id() {
  current_building_id_ = 0u;
}
::google::protobuf::uint32 FoundationInfo::current_building_id() const {
  // @@protoc_insertion_point(field_get:proto.FoundationInfo.current_building_id)
  return current_building_id_;
}
void FoundationInfo::set_current_building_id(::google::protobuf::uint32 value) {
  
  current_building_id_ = value;
  // @@protoc_insertion_point(field_set:proto.FoundationInfo.current_building_id)
}

// uint32 locked_by_uid = 4;
void FoundationInfo::clear_locked_by_uid() {
  locked_by_uid_ = 0u;
}
::google::protobuf::uint32 FoundationInfo::locked_by_uid() const {
  // @@protoc_insertion_point(field_get:proto.FoundationInfo.locked_by_uid)
  return locked_by_uid_;
}
void FoundationInfo::set_locked_by_uid(::google::protobuf::uint32 value) {
  
  locked_by_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.FoundationInfo.locked_by_uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleMember::kUidFieldNumber;
const int VehicleMember::kAvatarGuidFieldNumber;
const int VehicleMember::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleMember::VehicleMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.VehicleMember)
}
VehicleMember::VehicleMember(const VehicleMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&avatar_guid_, &from.avatar_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
    reinterpret_cast<char*>(&avatar_guid_)) + sizeof(pos_));
  // @@protoc_insertion_point(copy_constructor:proto.VehicleMember)
}

void VehicleMember::SharedCtor() {
  ::memset(&avatar_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&avatar_guid_)) + sizeof(pos_));
  _cached_size_ = 0;
}

VehicleMember::~VehicleMember() {
  // @@protoc_insertion_point(destructor:proto.VehicleMember)
  SharedDtor();
}

void VehicleMember::SharedDtor() {
}

void VehicleMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleMember::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleMember& VehicleMember::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleMember* VehicleMember::New(::google::protobuf::Arena* arena) const {
  VehicleMember* n = new VehicleMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleMember::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.VehicleMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&avatar_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&avatar_guid_)) + sizeof(pos_));
  _internal_metadata_.Clear();
}

bool VehicleMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.VehicleMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 avatar_guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &avatar_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.VehicleMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.VehicleMember)
  return false;
#undef DO_
}

void VehicleMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.VehicleMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // uint64 avatar_guid = 2;
  if (this->avatar_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->avatar_guid(), output);
  }

  // uint32 pos = 3;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.VehicleMember)
}

::google::protobuf::uint8* VehicleMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.VehicleMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // uint64 avatar_guid = 2;
  if (this->avatar_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->avatar_guid(), target);
  }

  // uint32 pos = 3;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.VehicleMember)
  return target;
}

size_t VehicleMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.VehicleMember)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 avatar_guid = 2;
  if (this->avatar_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->avatar_guid());
  }

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // uint32 pos = 3;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.VehicleMember)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.VehicleMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.VehicleMember)
    MergeFrom(*source);
  }
}

void VehicleMember::MergeFrom(const VehicleMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.VehicleMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatar_guid() != 0) {
    set_avatar_guid(from.avatar_guid());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
}

void VehicleMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.VehicleMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleMember::CopyFrom(const VehicleMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.VehicleMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleMember::IsInitialized() const {
  return true;
}

void VehicleMember::Swap(VehicleMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleMember::InternalSwap(VehicleMember* other) {
  using std::swap;
  swap(avatar_guid_, other->avatar_guid_);
  swap(uid_, other->uid_);
  swap(pos_, other->pos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleMember::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleMember

// uint32 uid = 1;
void VehicleMember::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 VehicleMember::uid() const {
  // @@protoc_insertion_point(field_get:proto.VehicleMember.uid)
  return uid_;
}
void VehicleMember::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.VehicleMember.uid)
}

// uint64 avatar_guid = 2;
void VehicleMember::clear_avatar_guid() {
  avatar_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 VehicleMember::avatar_guid() const {
  // @@protoc_insertion_point(field_get:proto.VehicleMember.avatar_guid)
  return avatar_guid_;
}
void VehicleMember::set_avatar_guid(::google::protobuf::uint64 value) {
  
  avatar_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.VehicleMember.avatar_guid)
}

// uint32 pos = 3;
void VehicleMember::clear_pos() {
  pos_ = 0u;
}
::google::protobuf::uint32 VehicleMember::pos() const {
  // @@protoc_insertion_point(field_get:proto.VehicleMember.pos)
  return pos_;
}
void VehicleMember::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:proto.VehicleMember.pos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleInfo::kMemberListFieldNumber;
const int VehicleInfo::kOwnerUidFieldNumber;
const int VehicleInfo::kCurStaminaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleInfo::VehicleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.VehicleInfo)
}
VehicleInfo::VehicleInfo(const VehicleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      member_list_(from.member_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&owner_uid_, &from.owner_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_stamina_) -
    reinterpret_cast<char*>(&owner_uid_)) + sizeof(cur_stamina_));
  // @@protoc_insertion_point(copy_constructor:proto.VehicleInfo)
}

void VehicleInfo::SharedCtor() {
  ::memset(&owner_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_stamina_) -
      reinterpret_cast<char*>(&owner_uid_)) + sizeof(cur_stamina_));
  _cached_size_ = 0;
}

VehicleInfo::~VehicleInfo() {
  // @@protoc_insertion_point(destructor:proto.VehicleInfo)
  SharedDtor();
}

void VehicleInfo::SharedDtor() {
}

void VehicleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleInfo& VehicleInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleInfo* VehicleInfo::New(::google::protobuf::Arena* arena) const {
  VehicleInfo* n = new VehicleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.VehicleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_list_.Clear();
  ::memset(&owner_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_stamina_) -
      reinterpret_cast<char*>(&owner_uid_)) + sizeof(cur_stamina_));
  _internal_metadata_.Clear();
}

bool VehicleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.VehicleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.VehicleMember member_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 owner_uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cur_stamina = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_stamina_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.VehicleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.VehicleInfo)
  return false;
#undef DO_
}

void VehicleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.VehicleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.VehicleMember member_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->member_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member_list(static_cast<int>(i)), output);
  }

  // uint32 owner_uid = 2;
  if (this->owner_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_uid(), output);
  }

  // float cur_stamina = 3;
  if (this->cur_stamina() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cur_stamina(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.VehicleInfo)
}

::google::protobuf::uint8* VehicleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.VehicleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.VehicleMember member_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->member_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->member_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 owner_uid = 2;
  if (this->owner_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_uid(), target);
  }

  // float cur_stamina = 3;
  if (this->cur_stamina() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cur_stamina(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.VehicleInfo)
  return target;
}

size_t VehicleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.VehicleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.VehicleMember member_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->member_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_list(static_cast<int>(i)));
    }
  }

  // uint32 owner_uid = 2;
  if (this->owner_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner_uid());
  }

  // float cur_stamina = 3;
  if (this->cur_stamina() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.VehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.VehicleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.VehicleInfo)
    MergeFrom(*source);
  }
}

void VehicleInfo::MergeFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.VehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_list_.MergeFrom(from.member_list_);
  if (from.owner_uid() != 0) {
    set_owner_uid(from.owner_uid());
  }
  if (from.cur_stamina() != 0) {
    set_cur_stamina(from.cur_stamina());
  }
}

void VehicleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.VehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleInfo::CopyFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.VehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleInfo::IsInitialized() const {
  return true;
}

void VehicleInfo::Swap(VehicleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleInfo::InternalSwap(VehicleInfo* other) {
  using std::swap;
  member_list_.InternalSwap(&other->member_list_);
  swap(owner_uid_, other->owner_uid_);
  swap(cur_stamina_, other->cur_stamina_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleInfo

// repeated .proto.VehicleMember member_list = 1;
int VehicleInfo::member_list_size() const {
  return member_list_.size();
}
void VehicleInfo::clear_member_list() {
  member_list_.Clear();
}
const ::proto::VehicleMember& VehicleInfo::member_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.VehicleInfo.member_list)
  return member_list_.Get(index);
}
::proto::VehicleMember* VehicleInfo::mutable_member_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.VehicleInfo.member_list)
  return member_list_.Mutable(index);
}
::proto::VehicleMember* VehicleInfo::add_member_list() {
  // @@protoc_insertion_point(field_add:proto.VehicleInfo.member_list)
  return member_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::VehicleMember >*
VehicleInfo::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.VehicleInfo.member_list)
  return &member_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::VehicleMember >&
VehicleInfo::member_list() const {
  // @@protoc_insertion_point(field_list:proto.VehicleInfo.member_list)
  return member_list_;
}

// uint32 owner_uid = 2;
void VehicleInfo::clear_owner_uid() {
  owner_uid_ = 0u;
}
::google::protobuf::uint32 VehicleInfo::owner_uid() const {
  // @@protoc_insertion_point(field_get:proto.VehicleInfo.owner_uid)
  return owner_uid_;
}
void VehicleInfo::set_owner_uid(::google::protobuf::uint32 value) {
  
  owner_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.VehicleInfo.owner_uid)
}

// float cur_stamina = 3;
void VehicleInfo::clear_cur_stamina() {
  cur_stamina_ = 0;
}
float VehicleInfo::cur_stamina() const {
  // @@protoc_insertion_point(field_get:proto.VehicleInfo.cur_stamina)
  return cur_stamina_;
}
void VehicleInfo::set_cur_stamina(float value) {
  
  cur_stamina_ = value;
  // @@protoc_insertion_point(field_set:proto.VehicleInfo.cur_stamina)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EchoShellInfo::kShellIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EchoShellInfo::EchoShellInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.EchoShellInfo)
}
EchoShellInfo::EchoShellInfo(const EchoShellInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shell_id_ = from.shell_id_;
  // @@protoc_insertion_point(copy_constructor:proto.EchoShellInfo)
}

void EchoShellInfo::SharedCtor() {
  shell_id_ = 0u;
  _cached_size_ = 0;
}

EchoShellInfo::~EchoShellInfo() {
  // @@protoc_insertion_point(destructor:proto.EchoShellInfo)
  SharedDtor();
}

void EchoShellInfo::SharedDtor() {
}

void EchoShellInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EchoShellInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EchoShellInfo& EchoShellInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

EchoShellInfo* EchoShellInfo::New(::google::protobuf::Arena* arena) const {
  EchoShellInfo* n = new EchoShellInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EchoShellInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EchoShellInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shell_id_ = 0u;
  _internal_metadata_.Clear();
}

bool EchoShellInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.EchoShellInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 shell_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.EchoShellInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.EchoShellInfo)
  return false;
#undef DO_
}

void EchoShellInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.EchoShellInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 shell_id = 1;
  if (this->shell_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shell_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.EchoShellInfo)
}

::google::protobuf::uint8* EchoShellInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.EchoShellInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 shell_id = 1;
  if (this->shell_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shell_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EchoShellInfo)
  return target;
}

size_t EchoShellInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EchoShellInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 shell_id = 1;
  if (this->shell_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shell_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EchoShellInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.EchoShellInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EchoShellInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EchoShellInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.EchoShellInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.EchoShellInfo)
    MergeFrom(*source);
  }
}

void EchoShellInfo::MergeFrom(const EchoShellInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.EchoShellInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shell_id() != 0) {
    set_shell_id(from.shell_id());
  }
}

void EchoShellInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.EchoShellInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoShellInfo::CopyFrom(const EchoShellInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EchoShellInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoShellInfo::IsInitialized() const {
  return true;
}

void EchoShellInfo::Swap(EchoShellInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EchoShellInfo::InternalSwap(EchoShellInfo* other) {
  using std::swap;
  swap(shell_id_, other->shell_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EchoShellInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EchoShellInfo

// uint32 shell_id = 1;
void EchoShellInfo::clear_shell_id() {
  shell_id_ = 0u;
}
::google::protobuf::uint32 EchoShellInfo::shell_id() const {
  // @@protoc_insertion_point(field_get:proto.EchoShellInfo.shell_id)
  return shell_id_;
}
void EchoShellInfo::set_shell_id(::google::protobuf::uint32 value) {
  
  shell_id_ = value;
  // @@protoc_insertion_point(field_set:proto.EchoShellInfo.shell_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScreenInfo::kLiveIdFieldNumber;
const int ScreenInfo::kProjectorEntityIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScreenInfo::ScreenInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ScreenInfo)
}
ScreenInfo::ScreenInfo(const ScreenInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&live_id_, &from.live_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&projector_entity_id_) -
    reinterpret_cast<char*>(&live_id_)) + sizeof(projector_entity_id_));
  // @@protoc_insertion_point(copy_constructor:proto.ScreenInfo)
}

void ScreenInfo::SharedCtor() {
  ::memset(&live_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&projector_entity_id_) -
      reinterpret_cast<char*>(&live_id_)) + sizeof(projector_entity_id_));
  _cached_size_ = 0;
}

ScreenInfo::~ScreenInfo() {
  // @@protoc_insertion_point(destructor:proto.ScreenInfo)
  SharedDtor();
}

void ScreenInfo::SharedDtor() {
}

void ScreenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScreenInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScreenInfo& ScreenInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScreenInfo* ScreenInfo::New(::google::protobuf::Arena* arena) const {
  ScreenInfo* n = new ScreenInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScreenInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScreenInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&live_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&projector_entity_id_) -
      reinterpret_cast<char*>(&live_id_)) + sizeof(projector_entity_id_));
  _internal_metadata_.Clear();
}

bool ScreenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ScreenInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 live_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &live_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 projector_entity_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &projector_entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ScreenInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ScreenInfo)
  return false;
#undef DO_
}

void ScreenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ScreenInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 live_id = 1;
  if (this->live_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->live_id(), output);
  }

  // uint32 projector_entity_id = 2;
  if (this->projector_entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->projector_entity_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ScreenInfo)
}

::google::protobuf::uint8* ScreenInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScreenInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 live_id = 1;
  if (this->live_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->live_id(), target);
  }

  // uint32 projector_entity_id = 2;
  if (this->projector_entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->projector_entity_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScreenInfo)
  return target;
}

size_t ScreenInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScreenInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 live_id = 1;
  if (this->live_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->live_id());
  }

  // uint32 projector_entity_id = 2;
  if (this->projector_entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->projector_entity_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScreenInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ScreenInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ScreenInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScreenInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ScreenInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ScreenInfo)
    MergeFrom(*source);
  }
}

void ScreenInfo::MergeFrom(const ScreenInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ScreenInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.live_id() != 0) {
    set_live_id(from.live_id());
  }
  if (from.projector_entity_id() != 0) {
    set_projector_entity_id(from.projector_entity_id());
  }
}

void ScreenInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ScreenInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScreenInfo::CopyFrom(const ScreenInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScreenInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenInfo::IsInitialized() const {
  return true;
}

void ScreenInfo::Swap(ScreenInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScreenInfo::InternalSwap(ScreenInfo* other) {
  using std::swap;
  swap(live_id_, other->live_id_);
  swap(projector_entity_id_, other->projector_entity_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScreenInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScreenInfo

// uint32 live_id = 1;
void ScreenInfo::clear_live_id() {
  live_id_ = 0u;
}
::google::protobuf::uint32 ScreenInfo::live_id() const {
  // @@protoc_insertion_point(field_get:proto.ScreenInfo.live_id)
  return live_id_;
}
void ScreenInfo::set_live_id(::google::protobuf::uint32 value) {
  
  live_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScreenInfo.live_id)
}

// uint32 projector_entity_id = 2;
void ScreenInfo::clear_projector_entity_id() {
  projector_entity_id_ = 0u;
}
::google::protobuf::uint32 ScreenInfo::projector_entity_id() const {
  // @@protoc_insertion_point(field_get:proto.ScreenInfo.projector_entity_id)
  return projector_entity_id_;
}
void ScreenInfo::set_projector_entity_id(::google::protobuf::uint32 value) {
  
  projector_entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScreenInfo.projector_entity_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FishPoolInfo::kPoolIdFieldNumber;
const int FishPoolInfo::kFishAreaListFieldNumber;
const int FishPoolInfo::kTodayFishNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FishPoolInfo::FishPoolInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FishPoolInfo)
}
FishPoolInfo::FishPoolInfo(const FishPoolInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fish_area_list_(from.fish_area_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pool_id_, &from.pool_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&today_fish_num_) -
    reinterpret_cast<char*>(&pool_id_)) + sizeof(today_fish_num_));
  // @@protoc_insertion_point(copy_constructor:proto.FishPoolInfo)
}

void FishPoolInfo::SharedCtor() {
  ::memset(&pool_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&today_fish_num_) -
      reinterpret_cast<char*>(&pool_id_)) + sizeof(today_fish_num_));
  _cached_size_ = 0;
}

FishPoolInfo::~FishPoolInfo() {
  // @@protoc_insertion_point(destructor:proto.FishPoolInfo)
  SharedDtor();
}

void FishPoolInfo::SharedDtor() {
}

void FishPoolInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishPoolInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FishPoolInfo& FishPoolInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

FishPoolInfo* FishPoolInfo::New(::google::protobuf::Arena* arena) const {
  FishPoolInfo* n = new FishPoolInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FishPoolInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FishPoolInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fish_area_list_.Clear();
  ::memset(&pool_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&today_fish_num_) -
      reinterpret_cast<char*>(&pool_id_)) + sizeof(today_fish_num_));
  _internal_metadata_.Clear();
}

bool FishPoolInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FishPoolInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 pool_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pool_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 fish_area_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fish_area_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_fish_area_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 today_fish_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_fish_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FishPoolInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FishPoolInfo)
  return false;
#undef DO_
}

void FishPoolInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FishPoolInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pool_id = 1;
  if (this->pool_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pool_id(), output);
  }

  // repeated uint32 fish_area_list = 2;
  if (this->fish_area_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _fish_area_list_cached_byte_size_));
  }
  for (int i = 0, n = this->fish_area_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->fish_area_list(i), output);
  }

  // uint32 today_fish_num = 3;
  if (this->today_fish_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->today_fish_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.FishPoolInfo)
}

::google::protobuf::uint8* FishPoolInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.FishPoolInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pool_id = 1;
  if (this->pool_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pool_id(), target);
  }

  // repeated uint32 fish_area_list = 2;
  if (this->fish_area_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _fish_area_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->fish_area_list_, target);
  }

  // uint32 today_fish_num = 3;
  if (this->today_fish_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->today_fish_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FishPoolInfo)
  return target;
}

size_t FishPoolInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FishPoolInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 fish_area_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->fish_area_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fish_area_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 pool_id = 1;
  if (this->pool_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pool_id());
  }

  // uint32 today_fish_num = 3;
  if (this->today_fish_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->today_fish_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishPoolInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FishPoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FishPoolInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FishPoolInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FishPoolInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FishPoolInfo)
    MergeFrom(*source);
  }
}

void FishPoolInfo::MergeFrom(const FishPoolInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FishPoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fish_area_list_.MergeFrom(from.fish_area_list_);
  if (from.pool_id() != 0) {
    set_pool_id(from.pool_id());
  }
  if (from.today_fish_num() != 0) {
    set_today_fish_num(from.today_fish_num());
  }
}

void FishPoolInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FishPoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishPoolInfo::CopyFrom(const FishPoolInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FishPoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishPoolInfo::IsInitialized() const {
  return true;
}

void FishPoolInfo::Swap(FishPoolInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FishPoolInfo::InternalSwap(FishPoolInfo* other) {
  using std::swap;
  fish_area_list_.InternalSwap(&other->fish_area_list_);
  swap(pool_id_, other->pool_id_);
  swap(today_fish_num_, other->today_fish_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FishPoolInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FishPoolInfo

// uint32 pool_id = 1;
void FishPoolInfo::clear_pool_id() {
  pool_id_ = 0u;
}
::google::protobuf::uint32 FishPoolInfo::pool_id() const {
  // @@protoc_insertion_point(field_get:proto.FishPoolInfo.pool_id)
  return pool_id_;
}
void FishPoolInfo::set_pool_id(::google::protobuf::uint32 value) {
  
  pool_id_ = value;
  // @@protoc_insertion_point(field_set:proto.FishPoolInfo.pool_id)
}

// repeated uint32 fish_area_list = 2;
int FishPoolInfo::fish_area_list_size() const {
  return fish_area_list_.size();
}
void FishPoolInfo::clear_fish_area_list() {
  fish_area_list_.Clear();
}
::google::protobuf::uint32 FishPoolInfo::fish_area_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.FishPoolInfo.fish_area_list)
  return fish_area_list_.Get(index);
}
void FishPoolInfo::set_fish_area_list(int index, ::google::protobuf::uint32 value) {
  fish_area_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.FishPoolInfo.fish_area_list)
}
void FishPoolInfo::add_fish_area_list(::google::protobuf::uint32 value) {
  fish_area_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.FishPoolInfo.fish_area_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FishPoolInfo::fish_area_list() const {
  // @@protoc_insertion_point(field_list:proto.FishPoolInfo.fish_area_list)
  return fish_area_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FishPoolInfo::mutable_fish_area_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.FishPoolInfo.fish_area_list)
  return &fish_area_list_;
}

// uint32 today_fish_num = 3;
void FishPoolInfo::clear_today_fish_num() {
  today_fish_num_ = 0u;
}
::google::protobuf::uint32 FishPoolInfo::today_fish_num() const {
  // @@protoc_insertion_point(field_get:proto.FishPoolInfo.today_fish_num)
  return today_fish_num_;
}
void FishPoolInfo::set_today_fish_num(::google::protobuf::uint32 value) {
  
  today_fish_num_ = value;
  // @@protoc_insertion_point(field_set:proto.FishPoolInfo.today_fish_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomCommonNodeInfo::kParentIndexFieldNumber;
const int CustomCommonNodeInfo::kConfigIdFieldNumber;
const int CustomCommonNodeInfo::kSlotIdentifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomCommonNodeInfo::CustomCommonNodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CustomCommonNodeInfo)
}
CustomCommonNodeInfo::CustomCommonNodeInfo(const CustomCommonNodeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slot_identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.slot_identifier().size() > 0) {
    slot_identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slot_identifier_);
  }
  ::memcpy(&parent_index_, &from.parent_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&config_id_) -
    reinterpret_cast<char*>(&parent_index_)) + sizeof(config_id_));
  // @@protoc_insertion_point(copy_constructor:proto.CustomCommonNodeInfo)
}

void CustomCommonNodeInfo::SharedCtor() {
  slot_identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&parent_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_id_) -
      reinterpret_cast<char*>(&parent_index_)) + sizeof(config_id_));
  _cached_size_ = 0;
}

CustomCommonNodeInfo::~CustomCommonNodeInfo() {
  // @@protoc_insertion_point(destructor:proto.CustomCommonNodeInfo)
  SharedDtor();
}

void CustomCommonNodeInfo::SharedDtor() {
  slot_identifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CustomCommonNodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomCommonNodeInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomCommonNodeInfo& CustomCommonNodeInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

CustomCommonNodeInfo* CustomCommonNodeInfo::New(::google::protobuf::Arena* arena) const {
  CustomCommonNodeInfo* n = new CustomCommonNodeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CustomCommonNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CustomCommonNodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slot_identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&parent_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_id_) -
      reinterpret_cast<char*>(&parent_index_)) + sizeof(config_id_));
  _internal_metadata_.Clear();
}

bool CustomCommonNodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CustomCommonNodeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 parent_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 config_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string slot_identifier = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slot_identifier()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->slot_identifier().data(), static_cast<int>(this->slot_identifier().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.CustomCommonNodeInfo.slot_identifier"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CustomCommonNodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CustomCommonNodeInfo)
  return false;
#undef DO_
}

void CustomCommonNodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CustomCommonNodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 parent_index = 1;
  if (this->parent_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->parent_index(), output);
  }

  // uint32 config_id = 2;
  if (this->config_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->config_id(), output);
  }

  // string slot_identifier = 3;
  if (this->slot_identifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->slot_identifier().data(), static_cast<int>(this->slot_identifier().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.CustomCommonNodeInfo.slot_identifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->slot_identifier(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CustomCommonNodeInfo)
}

::google::protobuf::uint8* CustomCommonNodeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CustomCommonNodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 parent_index = 1;
  if (this->parent_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->parent_index(), target);
  }

  // uint32 config_id = 2;
  if (this->config_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->config_id(), target);
  }

  // string slot_identifier = 3;
  if (this->slot_identifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->slot_identifier().data(), static_cast<int>(this->slot_identifier().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.CustomCommonNodeInfo.slot_identifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->slot_identifier(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CustomCommonNodeInfo)
  return target;
}

size_t CustomCommonNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CustomCommonNodeInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string slot_identifier = 3;
  if (this->slot_identifier().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->slot_identifier());
  }

  // int32 parent_index = 1;
  if (this->parent_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->parent_index());
  }

  // uint32 config_id = 2;
  if (this->config_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->config_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomCommonNodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CustomCommonNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomCommonNodeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomCommonNodeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CustomCommonNodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CustomCommonNodeInfo)
    MergeFrom(*source);
  }
}

void CustomCommonNodeInfo::MergeFrom(const CustomCommonNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CustomCommonNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.slot_identifier().size() > 0) {

    slot_identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slot_identifier_);
  }
  if (from.parent_index() != 0) {
    set_parent_index(from.parent_index());
  }
  if (from.config_id() != 0) {
    set_config_id(from.config_id());
  }
}

void CustomCommonNodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CustomCommonNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomCommonNodeInfo::CopyFrom(const CustomCommonNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CustomCommonNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomCommonNodeInfo::IsInitialized() const {
  return true;
}

void CustomCommonNodeInfo::Swap(CustomCommonNodeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomCommonNodeInfo::InternalSwap(CustomCommonNodeInfo* other) {
  using std::swap;
  slot_identifier_.Swap(&other->slot_identifier_);
  swap(parent_index_, other->parent_index_);
  swap(config_id_, other->config_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CustomCommonNodeInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CustomCommonNodeInfo

// int32 parent_index = 1;
void CustomCommonNodeInfo::clear_parent_index() {
  parent_index_ = 0;
}
::google::protobuf::int32 CustomCommonNodeInfo::parent_index() const {
  // @@protoc_insertion_point(field_get:proto.CustomCommonNodeInfo.parent_index)
  return parent_index_;
}
void CustomCommonNodeInfo::set_parent_index(::google::protobuf::int32 value) {
  
  parent_index_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomCommonNodeInfo.parent_index)
}

// uint32 config_id = 2;
void CustomCommonNodeInfo::clear_config_id() {
  config_id_ = 0u;
}
::google::protobuf::uint32 CustomCommonNodeInfo::config_id() const {
  // @@protoc_insertion_point(field_get:proto.CustomCommonNodeInfo.config_id)
  return config_id_;
}
void CustomCommonNodeInfo::set_config_id(::google::protobuf::uint32 value) {
  
  config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomCommonNodeInfo.config_id)
}

// string slot_identifier = 3;
void CustomCommonNodeInfo::clear_slot_identifier() {
  slot_identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CustomCommonNodeInfo::slot_identifier() const {
  // @@protoc_insertion_point(field_get:proto.CustomCommonNodeInfo.slot_identifier)
  return slot_identifier_.GetNoArena();
}
void CustomCommonNodeInfo::set_slot_identifier(const ::std::string& value) {
  
  slot_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.CustomCommonNodeInfo.slot_identifier)
}
#if LANG_CXX11
void CustomCommonNodeInfo::set_slot_identifier(::std::string&& value) {
  
  slot_identifier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.CustomCommonNodeInfo.slot_identifier)
}
#endif
void CustomCommonNodeInfo::set_slot_identifier(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  slot_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.CustomCommonNodeInfo.slot_identifier)
}
void CustomCommonNodeInfo::set_slot_identifier(const char* value, size_t size) {
  
  slot_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.CustomCommonNodeInfo.slot_identifier)
}
::std::string* CustomCommonNodeInfo::mutable_slot_identifier() {
  
  // @@protoc_insertion_point(field_mutable:proto.CustomCommonNodeInfo.slot_identifier)
  return slot_identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CustomCommonNodeInfo::release_slot_identifier() {
  // @@protoc_insertion_point(field_release:proto.CustomCommonNodeInfo.slot_identifier)
  
  return slot_identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CustomCommonNodeInfo::set_allocated_slot_identifier(::std::string* slot_identifier) {
  if (slot_identifier != NULL) {
    
  } else {
    
  }
  slot_identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slot_identifier);
  // @@protoc_insertion_point(field_set_allocated:proto.CustomCommonNodeInfo.slot_identifier)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomGadgetTreeInfo::kNodeListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomGadgetTreeInfo::CustomGadgetTreeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CustomGadgetTreeInfo)
}
CustomGadgetTreeInfo::CustomGadgetTreeInfo(const CustomGadgetTreeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      node_list_(from.node_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.CustomGadgetTreeInfo)
}

void CustomGadgetTreeInfo::SharedCtor() {
  _cached_size_ = 0;
}

CustomGadgetTreeInfo::~CustomGadgetTreeInfo() {
  // @@protoc_insertion_point(destructor:proto.CustomGadgetTreeInfo)
  SharedDtor();
}

void CustomGadgetTreeInfo::SharedDtor() {
}

void CustomGadgetTreeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomGadgetTreeInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomGadgetTreeInfo& CustomGadgetTreeInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

CustomGadgetTreeInfo* CustomGadgetTreeInfo::New(::google::protobuf::Arena* arena) const {
  CustomGadgetTreeInfo* n = new CustomGadgetTreeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CustomGadgetTreeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CustomGadgetTreeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_list_.Clear();
  _internal_metadata_.Clear();
}

bool CustomGadgetTreeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CustomGadgetTreeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.CustomCommonNodeInfo node_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CustomGadgetTreeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CustomGadgetTreeInfo)
  return false;
#undef DO_
}

void CustomGadgetTreeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CustomGadgetTreeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.CustomCommonNodeInfo node_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CustomGadgetTreeInfo)
}

::google::protobuf::uint8* CustomGadgetTreeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CustomGadgetTreeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.CustomCommonNodeInfo node_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->node_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CustomGadgetTreeInfo)
  return target;
}

size_t CustomGadgetTreeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CustomGadgetTreeInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.CustomCommonNodeInfo node_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->node_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomGadgetTreeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CustomGadgetTreeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomGadgetTreeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomGadgetTreeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CustomGadgetTreeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CustomGadgetTreeInfo)
    MergeFrom(*source);
  }
}

void CustomGadgetTreeInfo::MergeFrom(const CustomGadgetTreeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CustomGadgetTreeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_list_.MergeFrom(from.node_list_);
}

void CustomGadgetTreeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CustomGadgetTreeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomGadgetTreeInfo::CopyFrom(const CustomGadgetTreeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CustomGadgetTreeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomGadgetTreeInfo::IsInitialized() const {
  return true;
}

void CustomGadgetTreeInfo::Swap(CustomGadgetTreeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomGadgetTreeInfo::InternalSwap(CustomGadgetTreeInfo* other) {
  using std::swap;
  node_list_.InternalSwap(&other->node_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CustomGadgetTreeInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CustomGadgetTreeInfo

// repeated .proto.CustomCommonNodeInfo node_list = 1;
int CustomGadgetTreeInfo::node_list_size() const {
  return node_list_.size();
}
void CustomGadgetTreeInfo::clear_node_list() {
  node_list_.Clear();
}
const ::proto::CustomCommonNodeInfo& CustomGadgetTreeInfo::node_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.CustomGadgetTreeInfo.node_list)
  return node_list_.Get(index);
}
::proto::CustomCommonNodeInfo* CustomGadgetTreeInfo::mutable_node_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CustomGadgetTreeInfo.node_list)
  return node_list_.Mutable(index);
}
::proto::CustomCommonNodeInfo* CustomGadgetTreeInfo::add_node_list() {
  // @@protoc_insertion_point(field_add:proto.CustomGadgetTreeInfo.node_list)
  return node_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::CustomCommonNodeInfo >*
CustomGadgetTreeInfo::mutable_node_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.CustomGadgetTreeInfo.node_list)
  return &node_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::CustomCommonNodeInfo >&
CustomGadgetTreeInfo::node_list() const {
  // @@protoc_insertion_point(field_list:proto.CustomGadgetTreeInfo.node_list)
  return node_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoguelikeGadgetInfo::kCellConfigIdFieldNumber;
const int RoguelikeGadgetInfo::kCellTypeFieldNumber;
const int RoguelikeGadgetInfo::kCellStateFieldNumber;
const int RoguelikeGadgetInfo::kCellIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoguelikeGadgetInfo::RoguelikeGadgetInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RoguelikeGadgetInfo)
}
RoguelikeGadgetInfo::RoguelikeGadgetInfo(const RoguelikeGadgetInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cell_config_id_, &from.cell_config_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cell_id_) -
    reinterpret_cast<char*>(&cell_config_id_)) + sizeof(cell_id_));
  // @@protoc_insertion_point(copy_constructor:proto.RoguelikeGadgetInfo)
}

void RoguelikeGadgetInfo::SharedCtor() {
  ::memset(&cell_config_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cell_id_) -
      reinterpret_cast<char*>(&cell_config_id_)) + sizeof(cell_id_));
  _cached_size_ = 0;
}

RoguelikeGadgetInfo::~RoguelikeGadgetInfo() {
  // @@protoc_insertion_point(destructor:proto.RoguelikeGadgetInfo)
  SharedDtor();
}

void RoguelikeGadgetInfo::SharedDtor() {
}

void RoguelikeGadgetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoguelikeGadgetInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoguelikeGadgetInfo& RoguelikeGadgetInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoguelikeGadgetInfo* RoguelikeGadgetInfo::New(::google::protobuf::Arena* arena) const {
  RoguelikeGadgetInfo* n = new RoguelikeGadgetInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoguelikeGadgetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RoguelikeGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cell_config_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cell_id_) -
      reinterpret_cast<char*>(&cell_config_id_)) + sizeof(cell_id_));
  _internal_metadata_.Clear();
}

bool RoguelikeGadgetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.RoguelikeGadgetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 cell_config_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cell_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cell_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cell_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.RoguelikeGadgetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.RoguelikeGadgetInfo)
  return false;
#undef DO_
}

void RoguelikeGadgetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.RoguelikeGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cell_config_id = 1;
  if (this->cell_config_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cell_config_id(), output);
  }

  // uint32 cell_type = 2;
  if (this->cell_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cell_type(), output);
  }

  // uint32 cell_state = 3;
  if (this->cell_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cell_state(), output);
  }

  // uint32 cell_id = 4;
  if (this->cell_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cell_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.RoguelikeGadgetInfo)
}

::google::protobuf::uint8* RoguelikeGadgetInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.RoguelikeGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cell_config_id = 1;
  if (this->cell_config_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cell_config_id(), target);
  }

  // uint32 cell_type = 2;
  if (this->cell_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cell_type(), target);
  }

  // uint32 cell_state = 3;
  if (this->cell_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cell_state(), target);
  }

  // uint32 cell_id = 4;
  if (this->cell_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cell_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RoguelikeGadgetInfo)
  return target;
}

size_t RoguelikeGadgetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RoguelikeGadgetInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 cell_config_id = 1;
  if (this->cell_config_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cell_config_id());
  }

  // uint32 cell_type = 2;
  if (this->cell_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cell_type());
  }

  // uint32 cell_state = 3;
  if (this->cell_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cell_state());
  }

  // uint32 cell_id = 4;
  if (this->cell_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cell_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoguelikeGadgetInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.RoguelikeGadgetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoguelikeGadgetInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoguelikeGadgetInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.RoguelikeGadgetInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.RoguelikeGadgetInfo)
    MergeFrom(*source);
  }
}

void RoguelikeGadgetInfo::MergeFrom(const RoguelikeGadgetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RoguelikeGadgetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cell_config_id() != 0) {
    set_cell_config_id(from.cell_config_id());
  }
  if (from.cell_type() != 0) {
    set_cell_type(from.cell_type());
  }
  if (from.cell_state() != 0) {
    set_cell_state(from.cell_state());
  }
  if (from.cell_id() != 0) {
    set_cell_id(from.cell_id());
  }
}

void RoguelikeGadgetInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.RoguelikeGadgetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoguelikeGadgetInfo::CopyFrom(const RoguelikeGadgetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RoguelikeGadgetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoguelikeGadgetInfo::IsInitialized() const {
  return true;
}

void RoguelikeGadgetInfo::Swap(RoguelikeGadgetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoguelikeGadgetInfo::InternalSwap(RoguelikeGadgetInfo* other) {
  using std::swap;
  swap(cell_config_id_, other->cell_config_id_);
  swap(cell_type_, other->cell_type_);
  swap(cell_state_, other->cell_state_);
  swap(cell_id_, other->cell_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoguelikeGadgetInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoguelikeGadgetInfo

// uint32 cell_config_id = 1;
void RoguelikeGadgetInfo::clear_cell_config_id() {
  cell_config_id_ = 0u;
}
::google::protobuf::uint32 RoguelikeGadgetInfo::cell_config_id() const {
  // @@protoc_insertion_point(field_get:proto.RoguelikeGadgetInfo.cell_config_id)
  return cell_config_id_;
}
void RoguelikeGadgetInfo::set_cell_config_id(::google::protobuf::uint32 value) {
  
  cell_config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.RoguelikeGadgetInfo.cell_config_id)
}

// uint32 cell_type = 2;
void RoguelikeGadgetInfo::clear_cell_type() {
  cell_type_ = 0u;
}
::google::protobuf::uint32 RoguelikeGadgetInfo::cell_type() const {
  // @@protoc_insertion_point(field_get:proto.RoguelikeGadgetInfo.cell_type)
  return cell_type_;
}
void RoguelikeGadgetInfo::set_cell_type(::google::protobuf::uint32 value) {
  
  cell_type_ = value;
  // @@protoc_insertion_point(field_set:proto.RoguelikeGadgetInfo.cell_type)
}

// uint32 cell_state = 3;
void RoguelikeGadgetInfo::clear_cell_state() {
  cell_state_ = 0u;
}
::google::protobuf::uint32 RoguelikeGadgetInfo::cell_state() const {
  // @@protoc_insertion_point(field_get:proto.RoguelikeGadgetInfo.cell_state)
  return cell_state_;
}
void RoguelikeGadgetInfo::set_cell_state(::google::protobuf::uint32 value) {
  
  cell_state_ = value;
  // @@protoc_insertion_point(field_set:proto.RoguelikeGadgetInfo.cell_state)
}

// uint32 cell_id = 4;
void RoguelikeGadgetInfo::clear_cell_id() {
  cell_id_ = 0u;
}
::google::protobuf::uint32 RoguelikeGadgetInfo::cell_id() const {
  // @@protoc_insertion_point(field_get:proto.RoguelikeGadgetInfo.cell_id)
  return cell_id_;
}
void RoguelikeGadgetInfo::set_cell_id(::google::protobuf::uint32 value) {
  
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:proto.RoguelikeGadgetInfo.cell_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NightCrowGadgetInfo::kArgumentListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NightCrowGadgetInfo::NightCrowGadgetInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.NightCrowGadgetInfo)
}
NightCrowGadgetInfo::NightCrowGadgetInfo(const NightCrowGadgetInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      argument_list_(from.argument_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.NightCrowGadgetInfo)
}

void NightCrowGadgetInfo::SharedCtor() {
  _cached_size_ = 0;
}

NightCrowGadgetInfo::~NightCrowGadgetInfo() {
  // @@protoc_insertion_point(destructor:proto.NightCrowGadgetInfo)
  SharedDtor();
}

void NightCrowGadgetInfo::SharedDtor() {
}

void NightCrowGadgetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NightCrowGadgetInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NightCrowGadgetInfo& NightCrowGadgetInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

NightCrowGadgetInfo* NightCrowGadgetInfo::New(::google::protobuf::Arena* arena) const {
  NightCrowGadgetInfo* n = new NightCrowGadgetInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NightCrowGadgetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.NightCrowGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  argument_list_.Clear();
  _internal_metadata_.Clear();
}

bool NightCrowGadgetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.NightCrowGadgetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 argument_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_argument_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_argument_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.NightCrowGadgetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.NightCrowGadgetInfo)
  return false;
#undef DO_
}

void NightCrowGadgetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.NightCrowGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 argument_list = 1;
  if (this->argument_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _argument_list_cached_byte_size_));
  }
  for (int i = 0, n = this->argument_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->argument_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.NightCrowGadgetInfo)
}

::google::protobuf::uint8* NightCrowGadgetInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.NightCrowGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 argument_list = 1;
  if (this->argument_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _argument_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->argument_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.NightCrowGadgetInfo)
  return target;
}

size_t NightCrowGadgetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.NightCrowGadgetInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 argument_list = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->argument_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _argument_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NightCrowGadgetInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.NightCrowGadgetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NightCrowGadgetInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NightCrowGadgetInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.NightCrowGadgetInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.NightCrowGadgetInfo)
    MergeFrom(*source);
  }
}

void NightCrowGadgetInfo::MergeFrom(const NightCrowGadgetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.NightCrowGadgetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  argument_list_.MergeFrom(from.argument_list_);
}

void NightCrowGadgetInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.NightCrowGadgetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NightCrowGadgetInfo::CopyFrom(const NightCrowGadgetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.NightCrowGadgetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NightCrowGadgetInfo::IsInitialized() const {
  return true;
}

void NightCrowGadgetInfo::Swap(NightCrowGadgetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NightCrowGadgetInfo::InternalSwap(NightCrowGadgetInfo* other) {
  using std::swap;
  argument_list_.InternalSwap(&other->argument_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NightCrowGadgetInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NightCrowGadgetInfo

// repeated uint32 argument_list = 1;
int NightCrowGadgetInfo::argument_list_size() const {
  return argument_list_.size();
}
void NightCrowGadgetInfo::clear_argument_list() {
  argument_list_.Clear();
}
::google::protobuf::uint32 NightCrowGadgetInfo::argument_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.NightCrowGadgetInfo.argument_list)
  return argument_list_.Get(index);
}
void NightCrowGadgetInfo::set_argument_list(int index, ::google::protobuf::uint32 value) {
  argument_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.NightCrowGadgetInfo.argument_list)
}
void NightCrowGadgetInfo::add_argument_list(::google::protobuf::uint32 value) {
  argument_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.NightCrowGadgetInfo.argument_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NightCrowGadgetInfo::argument_list() const {
  // @@protoc_insertion_point(field_list:proto.NightCrowGadgetInfo.argument_list)
  return argument_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NightCrowGadgetInfo::mutable_argument_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.NightCrowGadgetInfo.argument_list)
  return &argument_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeshretObeliskGadgetInfo::kArgumentListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeshretObeliskGadgetInfo::DeshretObeliskGadgetInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DeshretObeliskGadgetInfo)
}
DeshretObeliskGadgetInfo::DeshretObeliskGadgetInfo(const DeshretObeliskGadgetInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      argument_list_(from.argument_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.DeshretObeliskGadgetInfo)
}

void DeshretObeliskGadgetInfo::SharedCtor() {
  _cached_size_ = 0;
}

DeshretObeliskGadgetInfo::~DeshretObeliskGadgetInfo() {
  // @@protoc_insertion_point(destructor:proto.DeshretObeliskGadgetInfo)
  SharedDtor();
}

void DeshretObeliskGadgetInfo::SharedDtor() {
}

void DeshretObeliskGadgetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeshretObeliskGadgetInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeshretObeliskGadgetInfo& DeshretObeliskGadgetInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeshretObeliskGadgetInfo* DeshretObeliskGadgetInfo::New(::google::protobuf::Arena* arena) const {
  DeshretObeliskGadgetInfo* n = new DeshretObeliskGadgetInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeshretObeliskGadgetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DeshretObeliskGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  argument_list_.Clear();
  _internal_metadata_.Clear();
}

bool DeshretObeliskGadgetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DeshretObeliskGadgetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 argument_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_argument_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_argument_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DeshretObeliskGadgetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DeshretObeliskGadgetInfo)
  return false;
#undef DO_
}

void DeshretObeliskGadgetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DeshretObeliskGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 argument_list = 1;
  if (this->argument_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _argument_list_cached_byte_size_));
  }
  for (int i = 0, n = this->argument_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->argument_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DeshretObeliskGadgetInfo)
}

::google::protobuf::uint8* DeshretObeliskGadgetInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DeshretObeliskGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 argument_list = 1;
  if (this->argument_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _argument_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->argument_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DeshretObeliskGadgetInfo)
  return target;
}

size_t DeshretObeliskGadgetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DeshretObeliskGadgetInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 argument_list = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->argument_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _argument_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeshretObeliskGadgetInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DeshretObeliskGadgetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeshretObeliskGadgetInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeshretObeliskGadgetInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DeshretObeliskGadgetInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DeshretObeliskGadgetInfo)
    MergeFrom(*source);
  }
}

void DeshretObeliskGadgetInfo::MergeFrom(const DeshretObeliskGadgetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DeshretObeliskGadgetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  argument_list_.MergeFrom(from.argument_list_);
}

void DeshretObeliskGadgetInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DeshretObeliskGadgetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeshretObeliskGadgetInfo::CopyFrom(const DeshretObeliskGadgetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DeshretObeliskGadgetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeshretObeliskGadgetInfo::IsInitialized() const {
  return true;
}

void DeshretObeliskGadgetInfo::Swap(DeshretObeliskGadgetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeshretObeliskGadgetInfo::InternalSwap(DeshretObeliskGadgetInfo* other) {
  using std::swap;
  argument_list_.InternalSwap(&other->argument_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeshretObeliskGadgetInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeshretObeliskGadgetInfo

// repeated uint32 argument_list = 1;
int DeshretObeliskGadgetInfo::argument_list_size() const {
  return argument_list_.size();
}
void DeshretObeliskGadgetInfo::clear_argument_list() {
  argument_list_.Clear();
}
::google::protobuf::uint32 DeshretObeliskGadgetInfo::argument_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DeshretObeliskGadgetInfo.argument_list)
  return argument_list_.Get(index);
}
void DeshretObeliskGadgetInfo::set_argument_list(int index, ::google::protobuf::uint32 value) {
  argument_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.DeshretObeliskGadgetInfo.argument_list)
}
void DeshretObeliskGadgetInfo::add_argument_list(::google::protobuf::uint32 value) {
  argument_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.DeshretObeliskGadgetInfo.argument_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DeshretObeliskGadgetInfo::argument_list() const {
  // @@protoc_insertion_point(field_list:proto.DeshretObeliskGadgetInfo.argument_list)
  return argument_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DeshretObeliskGadgetInfo::mutable_argument_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DeshretObeliskGadgetInfo.argument_list)
  return &argument_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoinCollectOperatorInfo::kLevelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoinCollectOperatorInfo::CoinCollectOperatorInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CoinCollectOperatorInfo)
}
CoinCollectOperatorInfo::CoinCollectOperatorInfo(const CoinCollectOperatorInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_id_ = from.level_id_;
  // @@protoc_insertion_point(copy_constructor:proto.CoinCollectOperatorInfo)
}

void CoinCollectOperatorInfo::SharedCtor() {
  level_id_ = 0u;
  _cached_size_ = 0;
}

CoinCollectOperatorInfo::~CoinCollectOperatorInfo() {
  // @@protoc_insertion_point(destructor:proto.CoinCollectOperatorInfo)
  SharedDtor();
}

void CoinCollectOperatorInfo::SharedDtor() {
}

void CoinCollectOperatorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoinCollectOperatorInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CoinCollectOperatorInfo& CoinCollectOperatorInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

CoinCollectOperatorInfo* CoinCollectOperatorInfo::New(::google::protobuf::Arena* arena) const {
  CoinCollectOperatorInfo* n = new CoinCollectOperatorInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CoinCollectOperatorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CoinCollectOperatorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_id_ = 0u;
  _internal_metadata_.Clear();
}

bool CoinCollectOperatorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CoinCollectOperatorInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 level_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CoinCollectOperatorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CoinCollectOperatorInfo)
  return false;
#undef DO_
}

void CoinCollectOperatorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CoinCollectOperatorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level_id = 1;
  if (this->level_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CoinCollectOperatorInfo)
}

::google::protobuf::uint8* CoinCollectOperatorInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CoinCollectOperatorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level_id = 1;
  if (this->level_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CoinCollectOperatorInfo)
  return target;
}

size_t CoinCollectOperatorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CoinCollectOperatorInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 level_id = 1;
  if (this->level_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoinCollectOperatorInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CoinCollectOperatorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CoinCollectOperatorInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CoinCollectOperatorInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CoinCollectOperatorInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CoinCollectOperatorInfo)
    MergeFrom(*source);
  }
}

void CoinCollectOperatorInfo::MergeFrom(const CoinCollectOperatorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CoinCollectOperatorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level_id() != 0) {
    set_level_id(from.level_id());
  }
}

void CoinCollectOperatorInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CoinCollectOperatorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoinCollectOperatorInfo::CopyFrom(const CoinCollectOperatorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CoinCollectOperatorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoinCollectOperatorInfo::IsInitialized() const {
  return true;
}

void CoinCollectOperatorInfo::Swap(CoinCollectOperatorInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoinCollectOperatorInfo::InternalSwap(CoinCollectOperatorInfo* other) {
  using std::swap;
  swap(level_id_, other->level_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CoinCollectOperatorInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CoinCollectOperatorInfo

// uint32 level_id = 1;
void CoinCollectOperatorInfo::clear_level_id() {
  level_id_ = 0u;
}
::google::protobuf::uint32 CoinCollectOperatorInfo::level_id() const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectOperatorInfo.level_id)
  return level_id_;
}
void CoinCollectOperatorInfo::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CoinCollectOperatorInfo.level_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGadgetInfo::kGadgetIdFieldNumber;
const int SceneGadgetInfo::kGroupIdFieldNumber;
const int SceneGadgetInfo::kConfigIdFieldNumber;
const int SceneGadgetInfo::kOwnerEntityIdFieldNumber;
const int SceneGadgetInfo::kBornTypeFieldNumber;
const int SceneGadgetInfo::kGadgetStateFieldNumber;
const int SceneGadgetInfo::kGadgetTypeFieldNumber;
const int SceneGadgetInfo::kIsShowCutsceneFieldNumber;
const int SceneGadgetInfo::kAuthorityPeerIdFieldNumber;
const int SceneGadgetInfo::kIsEnableInteractFieldNumber;
const int SceneGadgetInfo::kInteractIdFieldNumber;
const int SceneGadgetInfo::kMarkFlagFieldNumber;
const int SceneGadgetInfo::kPropOwnerEntityIdFieldNumber;
const int SceneGadgetInfo::kPlatformFieldNumber;
const int SceneGadgetInfo::kInteractUidListFieldNumber;
const int SceneGadgetInfo::kDraftIdFieldNumber;
const int SceneGadgetInfo::kGadgetTalkStateFieldNumber;
const int SceneGadgetInfo::kPlayInfoFieldNumber;
const int SceneGadgetInfo::kTrifleItemFieldNumber;
const int SceneGadgetInfo::kGatherGadgetFieldNumber;
const int SceneGadgetInfo::kWorktopFieldNumber;
const int SceneGadgetInfo::kClientGadgetFieldNumber;
const int SceneGadgetInfo::kWeatherFieldNumber;
const int SceneGadgetInfo::kAbilityGadgetFieldNumber;
const int SceneGadgetInfo::kStatueGadgetFieldNumber;
const int SceneGadgetInfo::kBossChestFieldNumber;
const int SceneGadgetInfo::kBlossomChestFieldNumber;
const int SceneGadgetInfo::kMpPlayRewardFieldNumber;
const int SceneGadgetInfo::kGeneralRewardFieldNumber;
const int SceneGadgetInfo::kOfferingInfoFieldNumber;
const int SceneGadgetInfo::kFoundationInfoFieldNumber;
const int SceneGadgetInfo::kVehicleInfoFieldNumber;
const int SceneGadgetInfo::kShellInfoFieldNumber;
const int SceneGadgetInfo::kScreenInfoFieldNumber;
const int SceneGadgetInfo::kFishPoolInfoFieldNumber;
const int SceneGadgetInfo::kCustomGadgetTreeInfoFieldNumber;
const int SceneGadgetInfo::kRoguelikeGadgetInfoFieldNumber;
const int SceneGadgetInfo::kNightCrowGadgetInfoFieldNumber;
const int SceneGadgetInfo::kDeshretObeliskGadgetInfoFieldNumber;
const int SceneGadgetInfo::kCoinCollectOperatorInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGadgetInfo::SceneGadgetInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGadgetInfo)
}
SceneGadgetInfo::SceneGadgetInfo(const SceneGadgetInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      interact_uid_list_(from.interact_uid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_platform()) {
    platform_ = new ::proto::PlatformInfo(*from.platform_);
  } else {
    platform_ = NULL;
  }
  if (from.has_play_info()) {
    play_info_ = new ::proto::GadgetPlayInfo(*from.play_info_);
  } else {
    play_info_ = NULL;
  }
  ::memcpy(&gadget_id_, &from.gadget_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gadget_talk_state_) -
    reinterpret_cast<char*>(&gadget_id_)) + sizeof(gadget_talk_state_));
  clear_has_content();
  switch (from.content_case()) {
    case kTrifleItem: {
      mutable_trifle_item()->::proto::Item::MergeFrom(from.trifle_item());
      break;
    }
    case kGatherGadget: {
      mutable_gather_gadget()->::proto::GatherGadgetInfo::MergeFrom(from.gather_gadget());
      break;
    }
    case kWorktop: {
      mutable_worktop()->::proto::WorktopInfo::MergeFrom(from.worktop());
      break;
    }
    case kClientGadget: {
      mutable_client_gadget()->::proto::ClientGadgetInfo::MergeFrom(from.client_gadget());
      break;
    }
    case kWeather: {
      mutable_weather()->::proto::WeatherInfo::MergeFrom(from.weather());
      break;
    }
    case kAbilityGadget: {
      mutable_ability_gadget()->::proto::AbilityGadgetInfo::MergeFrom(from.ability_gadget());
      break;
    }
    case kStatueGadget: {
      mutable_statue_gadget()->::proto::StatueGadgetInfo::MergeFrom(from.statue_gadget());
      break;
    }
    case kBossChest: {
      mutable_boss_chest()->::proto::BossChestInfo::MergeFrom(from.boss_chest());
      break;
    }
    case kBlossomChest: {
      mutable_blossom_chest()->::proto::BlossomChestInfo::MergeFrom(from.blossom_chest());
      break;
    }
    case kMpPlayReward: {
      mutable_mp_play_reward()->::proto::MpPlayRewardInfo::MergeFrom(from.mp_play_reward());
      break;
    }
    case kGeneralReward: {
      mutable_general_reward()->::proto::GadgetGeneralRewardInfo::MergeFrom(from.general_reward());
      break;
    }
    case kOfferingInfo: {
      mutable_offering_info()->::proto::OfferingInfo::MergeFrom(from.offering_info());
      break;
    }
    case kFoundationInfo: {
      mutable_foundation_info()->::proto::FoundationInfo::MergeFrom(from.foundation_info());
      break;
    }
    case kVehicleInfo: {
      mutable_vehicle_info()->::proto::VehicleInfo::MergeFrom(from.vehicle_info());
      break;
    }
    case kShellInfo: {
      mutable_shell_info()->::proto::EchoShellInfo::MergeFrom(from.shell_info());
      break;
    }
    case kScreenInfo: {
      mutable_screen_info()->::proto::ScreenInfo::MergeFrom(from.screen_info());
      break;
    }
    case kFishPoolInfo: {
      mutable_fish_pool_info()->::proto::FishPoolInfo::MergeFrom(from.fish_pool_info());
      break;
    }
    case kCustomGadgetTreeInfo: {
      mutable_custom_gadget_tree_info()->::proto::CustomGadgetTreeInfo::MergeFrom(from.custom_gadget_tree_info());
      break;
    }
    case kRoguelikeGadgetInfo: {
      mutable_roguelike_gadget_info()->::proto::RoguelikeGadgetInfo::MergeFrom(from.roguelike_gadget_info());
      break;
    }
    case kNightCrowGadgetInfo: {
      mutable_night_crow_gadget_info()->::proto::NightCrowGadgetInfo::MergeFrom(from.night_crow_gadget_info());
      break;
    }
    case kDeshretObeliskGadgetInfo: {
      mutable_deshret_obelisk_gadget_info()->::proto::DeshretObeliskGadgetInfo::MergeFrom(from.deshret_obelisk_gadget_info());
      break;
    }
    case kCoinCollectOperatorInfo: {
      mutable_coin_collect_operator_info()->::proto::CoinCollectOperatorInfo::MergeFrom(from.coin_collect_operator_info());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.SceneGadgetInfo)
}

void SceneGadgetInfo::SharedCtor() {
  ::memset(&platform_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gadget_talk_state_) -
      reinterpret_cast<char*>(&platform_)) + sizeof(gadget_talk_state_));
  clear_has_content();
  _cached_size_ = 0;
}

SceneGadgetInfo::~SceneGadgetInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGadgetInfo)
  SharedDtor();
}

void SceneGadgetInfo::SharedDtor() {
  if (this != internal_default_instance()) delete platform_;
  if (this != internal_default_instance()) delete play_info_;
  if (has_content()) {
    clear_content();
  }
}

void SceneGadgetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGadgetInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGadgetInfo& SceneGadgetInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGadgetInfo* SceneGadgetInfo::New(::google::protobuf::Arena* arena) const {
  SceneGadgetInfo* n = new SceneGadgetInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGadgetInfo::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:proto.SceneGadgetInfo)
  switch (content_case()) {
    case kTrifleItem: {
      delete content_.trifle_item_;
      break;
    }
    case kGatherGadget: {
      delete content_.gather_gadget_;
      break;
    }
    case kWorktop: {
      delete content_.worktop_;
      break;
    }
    case kClientGadget: {
      delete content_.client_gadget_;
      break;
    }
    case kWeather: {
      delete content_.weather_;
      break;
    }
    case kAbilityGadget: {
      delete content_.ability_gadget_;
      break;
    }
    case kStatueGadget: {
      delete content_.statue_gadget_;
      break;
    }
    case kBossChest: {
      delete content_.boss_chest_;
      break;
    }
    case kBlossomChest: {
      delete content_.blossom_chest_;
      break;
    }
    case kMpPlayReward: {
      delete content_.mp_play_reward_;
      break;
    }
    case kGeneralReward: {
      delete content_.general_reward_;
      break;
    }
    case kOfferingInfo: {
      delete content_.offering_info_;
      break;
    }
    case kFoundationInfo: {
      delete content_.foundation_info_;
      break;
    }
    case kVehicleInfo: {
      delete content_.vehicle_info_;
      break;
    }
    case kShellInfo: {
      delete content_.shell_info_;
      break;
    }
    case kScreenInfo: {
      delete content_.screen_info_;
      break;
    }
    case kFishPoolInfo: {
      delete content_.fish_pool_info_;
      break;
    }
    case kCustomGadgetTreeInfo: {
      delete content_.custom_gadget_tree_info_;
      break;
    }
    case kRoguelikeGadgetInfo: {
      delete content_.roguelike_gadget_info_;
      break;
    }
    case kNightCrowGadgetInfo: {
      delete content_.night_crow_gadget_info_;
      break;
    }
    case kDeshretObeliskGadgetInfo: {
      delete content_.deshret_obelisk_gadget_info_;
      break;
    }
    case kCoinCollectOperatorInfo: {
      delete content_.coin_collect_operator_info_;
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void SceneGadgetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interact_uid_list_.Clear();
  if (GetArenaNoVirtual() == NULL && platform_ != NULL) {
    delete platform_;
  }
  platform_ = NULL;
  if (GetArenaNoVirtual() == NULL && play_info_ != NULL) {
    delete play_info_;
  }
  play_info_ = NULL;
  ::memset(&gadget_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gadget_talk_state_) -
      reinterpret_cast<char*>(&gadget_id_)) + sizeof(gadget_talk_state_));
  clear_content();
  _internal_metadata_.Clear();
}

bool SceneGadgetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGadgetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 gadget_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gadget_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 group_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 config_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 owner_entity_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GadgetBornType born_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_born_type(static_cast< ::proto::GadgetBornType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gadget_state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gadget_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gadget_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gadget_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_show_cutscene = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_show_cutscene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 authority_peer_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &authority_peer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_enable_interact = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_enable_interact_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 interact_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interact_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Item trifle_item = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trifle_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GatherGadgetInfo gather_gadget = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gather_gadget()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.WorktopInfo worktop = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worktop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ClientGadgetInfo client_gadget = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_gadget()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.WeatherInfo weather = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weather()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AbilityGadgetInfo ability_gadget = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ability_gadget()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.StatueGadgetInfo statue_gadget = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statue_gadget()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.BossChestInfo boss_chest = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boss_chest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mark_flag = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mark_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 prop_owner_entity_id = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prop_owner_entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.PlatformInfo platform = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_platform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 interact_uid_list = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_interact_uid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 194u, input, this->mutable_interact_uid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 draft_id = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &draft_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gadget_talk_state = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gadget_talk_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.BlossomChestInfo blossom_chest = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 330 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blossom_chest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MpPlayRewardInfo mp_play_reward = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mp_play_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GadgetGeneralRewardInfo general_reward = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 346 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_general_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.OfferingInfo offering_info = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 354 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offering_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.FoundationInfo foundation_info = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 362 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_foundation_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.VehicleInfo vehicle_info = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 370 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.EchoShellInfo shell_info = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 378 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shell_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ScreenInfo screen_info = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 386 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_screen_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.FishPoolInfo fish_pool_info = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 474 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fish_pool_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.CustomGadgetTreeInfo custom_gadget_tree_info = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_custom_gadget_tree_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.RoguelikeGadgetInfo roguelike_gadget_info = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 490 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roguelike_gadget_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.NightCrowGadgetInfo night_crow_gadget_info = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 498 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_night_crow_gadget_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.DeshretObeliskGadgetInfo deshret_obelisk_gadget_info = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 506 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deshret_obelisk_gadget_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.CoinCollectOperatorInfo coin_collect_operator_info = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 514 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coin_collect_operator_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GadgetPlayInfo play_info = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_play_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGadgetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGadgetInfo)
  return false;
#undef DO_
}

void SceneGadgetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gadget_id = 1;
  if (this->gadget_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gadget_id(), output);
  }

  // uint32 group_id = 2;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // uint32 config_id = 3;
  if (this->config_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->config_id(), output);
  }

  // uint32 owner_entity_id = 4;
  if (this->owner_entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->owner_entity_id(), output);
  }

  // .proto.GadgetBornType born_type = 5;
  if (this->born_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->born_type(), output);
  }

  // uint32 gadget_state = 6;
  if (this->gadget_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gadget_state(), output);
  }

  // uint32 gadget_type = 7;
  if (this->gadget_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gadget_type(), output);
  }

  // bool is_show_cutscene = 8;
  if (this->is_show_cutscene() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_show_cutscene(), output);
  }

  // uint32 authority_peer_id = 9;
  if (this->authority_peer_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->authority_peer_id(), output);
  }

  // bool is_enable_interact = 10;
  if (this->is_enable_interact() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_enable_interact(), output);
  }

  // uint32 interact_id = 11;
  if (this->interact_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->interact_id(), output);
  }

  // .proto.Item trifle_item = 12;
  if (has_trifle_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *content_.trifle_item_, output);
  }

  // .proto.GatherGadgetInfo gather_gadget = 13;
  if (has_gather_gadget()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *content_.gather_gadget_, output);
  }

  // .proto.WorktopInfo worktop = 14;
  if (has_worktop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *content_.worktop_, output);
  }

  // .proto.ClientGadgetInfo client_gadget = 15;
  if (has_client_gadget()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *content_.client_gadget_, output);
  }

  // .proto.WeatherInfo weather = 17;
  if (has_weather()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *content_.weather_, output);
  }

  // .proto.AbilityGadgetInfo ability_gadget = 18;
  if (has_ability_gadget()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *content_.ability_gadget_, output);
  }

  // .proto.StatueGadgetInfo statue_gadget = 19;
  if (has_statue_gadget()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *content_.statue_gadget_, output);
  }

  // .proto.BossChestInfo boss_chest = 20;
  if (has_boss_chest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *content_.boss_chest_, output);
  }

  // uint32 mark_flag = 21;
  if (this->mark_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->mark_flag(), output);
  }

  // uint32 prop_owner_entity_id = 22;
  if (this->prop_owner_entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->prop_owner_entity_id(), output);
  }

  // .proto.PlatformInfo platform = 23;
  if (this->has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->platform_, output);
  }

  // repeated uint32 interact_uid_list = 24;
  if (this->interact_uid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(24, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _interact_uid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->interact_uid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->interact_uid_list(i), output);
  }

  // uint32 draft_id = 25;
  if (this->draft_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->draft_id(), output);
  }

  // uint32 gadget_talk_state = 26;
  if (this->gadget_talk_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->gadget_talk_state(), output);
  }

  // .proto.BlossomChestInfo blossom_chest = 41;
  if (has_blossom_chest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, *content_.blossom_chest_, output);
  }

  // .proto.MpPlayRewardInfo mp_play_reward = 42;
  if (has_mp_play_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, *content_.mp_play_reward_, output);
  }

  // .proto.GadgetGeneralRewardInfo general_reward = 43;
  if (has_general_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, *content_.general_reward_, output);
  }

  // .proto.OfferingInfo offering_info = 44;
  if (has_offering_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, *content_.offering_info_, output);
  }

  // .proto.FoundationInfo foundation_info = 45;
  if (has_foundation_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, *content_.foundation_info_, output);
  }

  // .proto.VehicleInfo vehicle_info = 46;
  if (has_vehicle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, *content_.vehicle_info_, output);
  }

  // .proto.EchoShellInfo shell_info = 47;
  if (has_shell_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, *content_.shell_info_, output);
  }

  // .proto.ScreenInfo screen_info = 48;
  if (has_screen_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, *content_.screen_info_, output);
  }

  // .proto.FishPoolInfo fish_pool_info = 59;
  if (has_fish_pool_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, *content_.fish_pool_info_, output);
  }

  // .proto.CustomGadgetTreeInfo custom_gadget_tree_info = 60;
  if (has_custom_gadget_tree_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, *content_.custom_gadget_tree_info_, output);
  }

  // .proto.RoguelikeGadgetInfo roguelike_gadget_info = 61;
  if (has_roguelike_gadget_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, *content_.roguelike_gadget_info_, output);
  }

  // .proto.NightCrowGadgetInfo night_crow_gadget_info = 62;
  if (has_night_crow_gadget_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, *content_.night_crow_gadget_info_, output);
  }

  // .proto.DeshretObeliskGadgetInfo deshret_obelisk_gadget_info = 63;
  if (has_deshret_obelisk_gadget_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, *content_.deshret_obelisk_gadget_info_, output);
  }

  // .proto.CoinCollectOperatorInfo coin_collect_operator_info = 64;
  if (has_coin_collect_operator_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, *content_.coin_collect_operator_info_, output);
  }

  // .proto.GadgetPlayInfo play_info = 100;
  if (this->has_play_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *this->play_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGadgetInfo)
}

::google::protobuf::uint8* SceneGadgetInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gadget_id = 1;
  if (this->gadget_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gadget_id(), target);
  }

  // uint32 group_id = 2;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group_id(), target);
  }

  // uint32 config_id = 3;
  if (this->config_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->config_id(), target);
  }

  // uint32 owner_entity_id = 4;
  if (this->owner_entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->owner_entity_id(), target);
  }

  // .proto.GadgetBornType born_type = 5;
  if (this->born_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->born_type(), target);
  }

  // uint32 gadget_state = 6;
  if (this->gadget_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gadget_state(), target);
  }

  // uint32 gadget_type = 7;
  if (this->gadget_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gadget_type(), target);
  }

  // bool is_show_cutscene = 8;
  if (this->is_show_cutscene() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_show_cutscene(), target);
  }

  // uint32 authority_peer_id = 9;
  if (this->authority_peer_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->authority_peer_id(), target);
  }

  // bool is_enable_interact = 10;
  if (this->is_enable_interact() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_enable_interact(), target);
  }

  // uint32 interact_id = 11;
  if (this->interact_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->interact_id(), target);
  }

  // .proto.Item trifle_item = 12;
  if (has_trifle_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *content_.trifle_item_, deterministic, target);
  }

  // .proto.GatherGadgetInfo gather_gadget = 13;
  if (has_gather_gadget()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *content_.gather_gadget_, deterministic, target);
  }

  // .proto.WorktopInfo worktop = 14;
  if (has_worktop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *content_.worktop_, deterministic, target);
  }

  // .proto.ClientGadgetInfo client_gadget = 15;
  if (has_client_gadget()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *content_.client_gadget_, deterministic, target);
  }

  // .proto.WeatherInfo weather = 17;
  if (has_weather()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *content_.weather_, deterministic, target);
  }

  // .proto.AbilityGadgetInfo ability_gadget = 18;
  if (has_ability_gadget()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *content_.ability_gadget_, deterministic, target);
  }

  // .proto.StatueGadgetInfo statue_gadget = 19;
  if (has_statue_gadget()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *content_.statue_gadget_, deterministic, target);
  }

  // .proto.BossChestInfo boss_chest = 20;
  if (has_boss_chest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *content_.boss_chest_, deterministic, target);
  }

  // uint32 mark_flag = 21;
  if (this->mark_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->mark_flag(), target);
  }

  // uint32 prop_owner_entity_id = 22;
  if (this->prop_owner_entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->prop_owner_entity_id(), target);
  }

  // .proto.PlatformInfo platform = 23;
  if (this->has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->platform_, deterministic, target);
  }

  // repeated uint32 interact_uid_list = 24;
  if (this->interact_uid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      24,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _interact_uid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->interact_uid_list_, target);
  }

  // uint32 draft_id = 25;
  if (this->draft_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->draft_id(), target);
  }

  // uint32 gadget_talk_state = 26;
  if (this->gadget_talk_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->gadget_talk_state(), target);
  }

  // .proto.BlossomChestInfo blossom_chest = 41;
  if (has_blossom_chest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        41, *content_.blossom_chest_, deterministic, target);
  }

  // .proto.MpPlayRewardInfo mp_play_reward = 42;
  if (has_mp_play_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        42, *content_.mp_play_reward_, deterministic, target);
  }

  // .proto.GadgetGeneralRewardInfo general_reward = 43;
  if (has_general_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        43, *content_.general_reward_, deterministic, target);
  }

  // .proto.OfferingInfo offering_info = 44;
  if (has_offering_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        44, *content_.offering_info_, deterministic, target);
  }

  // .proto.FoundationInfo foundation_info = 45;
  if (has_foundation_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        45, *content_.foundation_info_, deterministic, target);
  }

  // .proto.VehicleInfo vehicle_info = 46;
  if (has_vehicle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        46, *content_.vehicle_info_, deterministic, target);
  }

  // .proto.EchoShellInfo shell_info = 47;
  if (has_shell_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        47, *content_.shell_info_, deterministic, target);
  }

  // .proto.ScreenInfo screen_info = 48;
  if (has_screen_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        48, *content_.screen_info_, deterministic, target);
  }

  // .proto.FishPoolInfo fish_pool_info = 59;
  if (has_fish_pool_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        59, *content_.fish_pool_info_, deterministic, target);
  }

  // .proto.CustomGadgetTreeInfo custom_gadget_tree_info = 60;
  if (has_custom_gadget_tree_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        60, *content_.custom_gadget_tree_info_, deterministic, target);
  }

  // .proto.RoguelikeGadgetInfo roguelike_gadget_info = 61;
  if (has_roguelike_gadget_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        61, *content_.roguelike_gadget_info_, deterministic, target);
  }

  // .proto.NightCrowGadgetInfo night_crow_gadget_info = 62;
  if (has_night_crow_gadget_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        62, *content_.night_crow_gadget_info_, deterministic, target);
  }

  // .proto.DeshretObeliskGadgetInfo deshret_obelisk_gadget_info = 63;
  if (has_deshret_obelisk_gadget_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        63, *content_.deshret_obelisk_gadget_info_, deterministic, target);
  }

  // .proto.CoinCollectOperatorInfo coin_collect_operator_info = 64;
  if (has_coin_collect_operator_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        64, *content_.coin_collect_operator_info_, deterministic, target);
  }

  // .proto.GadgetPlayInfo play_info = 100;
  if (this->has_play_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, *this->play_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGadgetInfo)
  return target;
}

size_t SceneGadgetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGadgetInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 interact_uid_list = 24;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->interact_uid_list_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _interact_uid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .proto.PlatformInfo platform = 23;
  if (this->has_platform()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->platform_);
  }

  // .proto.GadgetPlayInfo play_info = 100;
  if (this->has_play_info()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->play_info_);
  }

  // uint32 gadget_id = 1;
  if (this->gadget_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gadget_id());
  }

  // uint32 group_id = 2;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  // uint32 config_id = 3;
  if (this->config_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->config_id());
  }

  // uint32 owner_entity_id = 4;
  if (this->owner_entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner_entity_id());
  }

  // .proto.GadgetBornType born_type = 5;
  if (this->born_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->born_type());
  }

  // uint32 gadget_state = 6;
  if (this->gadget_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gadget_state());
  }

  // uint32 gadget_type = 7;
  if (this->gadget_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gadget_type());
  }

  // uint32 authority_peer_id = 9;
  if (this->authority_peer_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->authority_peer_id());
  }

  // bool is_show_cutscene = 8;
  if (this->is_show_cutscene() != 0) {
    total_size += 1 + 1;
  }

  // bool is_enable_interact = 10;
  if (this->is_enable_interact() != 0) {
    total_size += 1 + 1;
  }

  // uint32 interact_id = 11;
  if (this->interact_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->interact_id());
  }

  // uint32 mark_flag = 21;
  if (this->mark_flag() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mark_flag());
  }

  // uint32 prop_owner_entity_id = 22;
  if (this->prop_owner_entity_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prop_owner_entity_id());
  }

  // uint32 draft_id = 25;
  if (this->draft_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->draft_id());
  }

  // uint32 gadget_talk_state = 26;
  if (this->gadget_talk_state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gadget_talk_state());
  }

  switch (content_case()) {
    // .proto.Item trifle_item = 12;
    case kTrifleItem: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.trifle_item_);
      break;
    }
    // .proto.GatherGadgetInfo gather_gadget = 13;
    case kGatherGadget: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.gather_gadget_);
      break;
    }
    // .proto.WorktopInfo worktop = 14;
    case kWorktop: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.worktop_);
      break;
    }
    // .proto.ClientGadgetInfo client_gadget = 15;
    case kClientGadget: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.client_gadget_);
      break;
    }
    // .proto.WeatherInfo weather = 17;
    case kWeather: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.weather_);
      break;
    }
    // .proto.AbilityGadgetInfo ability_gadget = 18;
    case kAbilityGadget: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.ability_gadget_);
      break;
    }
    // .proto.StatueGadgetInfo statue_gadget = 19;
    case kStatueGadget: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.statue_gadget_);
      break;
    }
    // .proto.BossChestInfo boss_chest = 20;
    case kBossChest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.boss_chest_);
      break;
    }
    // .proto.BlossomChestInfo blossom_chest = 41;
    case kBlossomChest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.blossom_chest_);
      break;
    }
    // .proto.MpPlayRewardInfo mp_play_reward = 42;
    case kMpPlayReward: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.mp_play_reward_);
      break;
    }
    // .proto.GadgetGeneralRewardInfo general_reward = 43;
    case kGeneralReward: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.general_reward_);
      break;
    }
    // .proto.OfferingInfo offering_info = 44;
    case kOfferingInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.offering_info_);
      break;
    }
    // .proto.FoundationInfo foundation_info = 45;
    case kFoundationInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.foundation_info_);
      break;
    }
    // .proto.VehicleInfo vehicle_info = 46;
    case kVehicleInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.vehicle_info_);
      break;
    }
    // .proto.EchoShellInfo shell_info = 47;
    case kShellInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.shell_info_);
      break;
    }
    // .proto.ScreenInfo screen_info = 48;
    case kScreenInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.screen_info_);
      break;
    }
    // .proto.FishPoolInfo fish_pool_info = 59;
    case kFishPoolInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.fish_pool_info_);
      break;
    }
    // .proto.CustomGadgetTreeInfo custom_gadget_tree_info = 60;
    case kCustomGadgetTreeInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.custom_gadget_tree_info_);
      break;
    }
    // .proto.RoguelikeGadgetInfo roguelike_gadget_info = 61;
    case kRoguelikeGadgetInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.roguelike_gadget_info_);
      break;
    }
    // .proto.NightCrowGadgetInfo night_crow_gadget_info = 62;
    case kNightCrowGadgetInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.night_crow_gadget_info_);
      break;
    }
    // .proto.DeshretObeliskGadgetInfo deshret_obelisk_gadget_info = 63;
    case kDeshretObeliskGadgetInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.deshret_obelisk_gadget_info_);
      break;
    }
    // .proto.CoinCollectOperatorInfo coin_collect_operator_info = 64;
    case kCoinCollectOperatorInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.coin_collect_operator_info_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGadgetInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGadgetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGadgetInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGadgetInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGadgetInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGadgetInfo)
    MergeFrom(*source);
  }
}

void SceneGadgetInfo::MergeFrom(const SceneGadgetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGadgetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  interact_uid_list_.MergeFrom(from.interact_uid_list_);
  if (from.has_platform()) {
    mutable_platform()->::proto::PlatformInfo::MergeFrom(from.platform());
  }
  if (from.has_play_info()) {
    mutable_play_info()->::proto::GadgetPlayInfo::MergeFrom(from.play_info());
  }
  if (from.gadget_id() != 0) {
    set_gadget_id(from.gadget_id());
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.config_id() != 0) {
    set_config_id(from.config_id());
  }
  if (from.owner_entity_id() != 0) {
    set_owner_entity_id(from.owner_entity_id());
  }
  if (from.born_type() != 0) {
    set_born_type(from.born_type());
  }
  if (from.gadget_state() != 0) {
    set_gadget_state(from.gadget_state());
  }
  if (from.gadget_type() != 0) {
    set_gadget_type(from.gadget_type());
  }
  if (from.authority_peer_id() != 0) {
    set_authority_peer_id(from.authority_peer_id());
  }
  if (from.is_show_cutscene() != 0) {
    set_is_show_cutscene(from.is_show_cutscene());
  }
  if (from.is_enable_interact() != 0) {
    set_is_enable_interact(from.is_enable_interact());
  }
  if (from.interact_id() != 0) {
    set_interact_id(from.interact_id());
  }
  if (from.mark_flag() != 0) {
    set_mark_flag(from.mark_flag());
  }
  if (from.prop_owner_entity_id() != 0) {
    set_prop_owner_entity_id(from.prop_owner_entity_id());
  }
  if (from.draft_id() != 0) {
    set_draft_id(from.draft_id());
  }
  if (from.gadget_talk_state() != 0) {
    set_gadget_talk_state(from.gadget_talk_state());
  }
  switch (from.content_case()) {
    case kTrifleItem: {
      mutable_trifle_item()->::proto::Item::MergeFrom(from.trifle_item());
      break;
    }
    case kGatherGadget: {
      mutable_gather_gadget()->::proto::GatherGadgetInfo::MergeFrom(from.gather_gadget());
      break;
    }
    case kWorktop: {
      mutable_worktop()->::proto::WorktopInfo::MergeFrom(from.worktop());
      break;
    }
    case kClientGadget: {
      mutable_client_gadget()->::proto::ClientGadgetInfo::MergeFrom(from.client_gadget());
      break;
    }
    case kWeather: {
      mutable_weather()->::proto::WeatherInfo::MergeFrom(from.weather());
      break;
    }
    case kAbilityGadget: {
      mutable_ability_gadget()->::proto::AbilityGadgetInfo::MergeFrom(from.ability_gadget());
      break;
    }
    case kStatueGadget: {
      mutable_statue_gadget()->::proto::StatueGadgetInfo::MergeFrom(from.statue_gadget());
      break;
    }
    case kBossChest: {
      mutable_boss_chest()->::proto::BossChestInfo::MergeFrom(from.boss_chest());
      break;
    }
    case kBlossomChest: {
      mutable_blossom_chest()->::proto::BlossomChestInfo::MergeFrom(from.blossom_chest());
      break;
    }
    case kMpPlayReward: {
      mutable_mp_play_reward()->::proto::MpPlayRewardInfo::MergeFrom(from.mp_play_reward());
      break;
    }
    case kGeneralReward: {
      mutable_general_reward()->::proto::GadgetGeneralRewardInfo::MergeFrom(from.general_reward());
      break;
    }
    case kOfferingInfo: {
      mutable_offering_info()->::proto::OfferingInfo::MergeFrom(from.offering_info());
      break;
    }
    case kFoundationInfo: {
      mutable_foundation_info()->::proto::FoundationInfo::MergeFrom(from.foundation_info());
      break;
    }
    case kVehicleInfo: {
      mutable_vehicle_info()->::proto::VehicleInfo::MergeFrom(from.vehicle_info());
      break;
    }
    case kShellInfo: {
      mutable_shell_info()->::proto::EchoShellInfo::MergeFrom(from.shell_info());
      break;
    }
    case kScreenInfo: {
      mutable_screen_info()->::proto::ScreenInfo::MergeFrom(from.screen_info());
      break;
    }
    case kFishPoolInfo: {
      mutable_fish_pool_info()->::proto::FishPoolInfo::MergeFrom(from.fish_pool_info());
      break;
    }
    case kCustomGadgetTreeInfo: {
      mutable_custom_gadget_tree_info()->::proto::CustomGadgetTreeInfo::MergeFrom(from.custom_gadget_tree_info());
      break;
    }
    case kRoguelikeGadgetInfo: {
      mutable_roguelike_gadget_info()->::proto::RoguelikeGadgetInfo::MergeFrom(from.roguelike_gadget_info());
      break;
    }
    case kNightCrowGadgetInfo: {
      mutable_night_crow_gadget_info()->::proto::NightCrowGadgetInfo::MergeFrom(from.night_crow_gadget_info());
      break;
    }
    case kDeshretObeliskGadgetInfo: {
      mutable_deshret_obelisk_gadget_info()->::proto::DeshretObeliskGadgetInfo::MergeFrom(from.deshret_obelisk_gadget_info());
      break;
    }
    case kCoinCollectOperatorInfo: {
      mutable_coin_collect_operator_info()->::proto::CoinCollectOperatorInfo::MergeFrom(from.coin_collect_operator_info());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void SceneGadgetInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGadgetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGadgetInfo::CopyFrom(const SceneGadgetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGadgetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGadgetInfo::IsInitialized() const {
  return true;
}

void SceneGadgetInfo::Swap(SceneGadgetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGadgetInfo::InternalSwap(SceneGadgetInfo* other) {
  using std::swap;
  interact_uid_list_.InternalSwap(&other->interact_uid_list_);
  swap(platform_, other->platform_);
  swap(play_info_, other->play_info_);
  swap(gadget_id_, other->gadget_id_);
  swap(group_id_, other->group_id_);
  swap(config_id_, other->config_id_);
  swap(owner_entity_id_, other->owner_entity_id_);
  swap(born_type_, other->born_type_);
  swap(gadget_state_, other->gadget_state_);
  swap(gadget_type_, other->gadget_type_);
  swap(authority_peer_id_, other->authority_peer_id_);
  swap(is_show_cutscene_, other->is_show_cutscene_);
  swap(is_enable_interact_, other->is_enable_interact_);
  swap(interact_id_, other->interact_id_);
  swap(mark_flag_, other->mark_flag_);
  swap(prop_owner_entity_id_, other->prop_owner_entity_id_);
  swap(draft_id_, other->draft_id_);
  swap(gadget_talk_state_, other->gadget_talk_state_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGadgetInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGadgetInfo

// uint32 gadget_id = 1;
void SceneGadgetInfo::clear_gadget_id() {
  gadget_id_ = 0u;
}
::google::protobuf::uint32 SceneGadgetInfo::gadget_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.gadget_id)
  return gadget_id_;
}
void SceneGadgetInfo::set_gadget_id(::google::protobuf::uint32 value) {
  
  gadget_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGadgetInfo.gadget_id)
}

// uint32 group_id = 2;
void SceneGadgetInfo::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 SceneGadgetInfo::group_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.group_id)
  return group_id_;
}
void SceneGadgetInfo::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGadgetInfo.group_id)
}

// uint32 config_id = 3;
void SceneGadgetInfo::clear_config_id() {
  config_id_ = 0u;
}
::google::protobuf::uint32 SceneGadgetInfo::config_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.config_id)
  return config_id_;
}
void SceneGadgetInfo::set_config_id(::google::protobuf::uint32 value) {
  
  config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGadgetInfo.config_id)
}

// uint32 owner_entity_id = 4;
void SceneGadgetInfo::clear_owner_entity_id() {
  owner_entity_id_ = 0u;
}
::google::protobuf::uint32 SceneGadgetInfo::owner_entity_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.owner_entity_id)
  return owner_entity_id_;
}
void SceneGadgetInfo::set_owner_entity_id(::google::protobuf::uint32 value) {
  
  owner_entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGadgetInfo.owner_entity_id)
}

// .proto.GadgetBornType born_type = 5;
void SceneGadgetInfo::clear_born_type() {
  born_type_ = 0;
}
::proto::GadgetBornType SceneGadgetInfo::born_type() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.born_type)
  return static_cast< ::proto::GadgetBornType >(born_type_);
}
void SceneGadgetInfo::set_born_type(::proto::GadgetBornType value) {
  
  born_type_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGadgetInfo.born_type)
}

// uint32 gadget_state = 6;
void SceneGadgetInfo::clear_gadget_state() {
  gadget_state_ = 0u;
}
::google::protobuf::uint32 SceneGadgetInfo::gadget_state() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.gadget_state)
  return gadget_state_;
}
void SceneGadgetInfo::set_gadget_state(::google::protobuf::uint32 value) {
  
  gadget_state_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGadgetInfo.gadget_state)
}

// uint32 gadget_type = 7;
void SceneGadgetInfo::clear_gadget_type() {
  gadget_type_ = 0u;
}
::google::protobuf::uint32 SceneGadgetInfo::gadget_type() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.gadget_type)
  return gadget_type_;
}
void SceneGadgetInfo::set_gadget_type(::google::protobuf::uint32 value) {
  
  gadget_type_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGadgetInfo.gadget_type)
}

// bool is_show_cutscene = 8;
void SceneGadgetInfo::clear_is_show_cutscene() {
  is_show_cutscene_ = false;
}
bool SceneGadgetInfo::is_show_cutscene() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.is_show_cutscene)
  return is_show_cutscene_;
}
void SceneGadgetInfo::set_is_show_cutscene(bool value) {
  
  is_show_cutscene_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGadgetInfo.is_show_cutscene)
}

// uint32 authority_peer_id = 9;
void SceneGadgetInfo::clear_authority_peer_id() {
  authority_peer_id_ = 0u;
}
::google::protobuf::uint32 SceneGadgetInfo::authority_peer_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.authority_peer_id)
  return authority_peer_id_;
}
void SceneGadgetInfo::set_authority_peer_id(::google::protobuf::uint32 value) {
  
  authority_peer_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGadgetInfo.authority_peer_id)
}

// bool is_enable_interact = 10;
void SceneGadgetInfo::clear_is_enable_interact() {
  is_enable_interact_ = false;
}
bool SceneGadgetInfo::is_enable_interact() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.is_enable_interact)
  return is_enable_interact_;
}
void SceneGadgetInfo::set_is_enable_interact(bool value) {
  
  is_enable_interact_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGadgetInfo.is_enable_interact)
}

// uint32 interact_id = 11;
void SceneGadgetInfo::clear_interact_id() {
  interact_id_ = 0u;
}
::google::protobuf::uint32 SceneGadgetInfo::interact_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.interact_id)
  return interact_id_;
}
void SceneGadgetInfo::set_interact_id(::google::protobuf::uint32 value) {
  
  interact_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGadgetInfo.interact_id)
}

// uint32 mark_flag = 21;
void SceneGadgetInfo::clear_mark_flag() {
  mark_flag_ = 0u;
}
::google::protobuf::uint32 SceneGadgetInfo::mark_flag() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.mark_flag)
  return mark_flag_;
}
void SceneGadgetInfo::set_mark_flag(::google::protobuf::uint32 value) {
  
  mark_flag_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGadgetInfo.mark_flag)
}

// uint32 prop_owner_entity_id = 22;
void SceneGadgetInfo::clear_prop_owner_entity_id() {
  prop_owner_entity_id_ = 0u;
}
::google::protobuf::uint32 SceneGadgetInfo::prop_owner_entity_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.prop_owner_entity_id)
  return prop_owner_entity_id_;
}
void SceneGadgetInfo::set_prop_owner_entity_id(::google::protobuf::uint32 value) {
  
  prop_owner_entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGadgetInfo.prop_owner_entity_id)
}

// .proto.PlatformInfo platform = 23;
bool SceneGadgetInfo::has_platform() const {
  return this != internal_default_instance() && platform_ != NULL;
}
void SceneGadgetInfo::clear_platform() {
  if (GetArenaNoVirtual() == NULL && platform_ != NULL) delete platform_;
  platform_ = NULL;
}
const ::proto::PlatformInfo& SceneGadgetInfo::platform() const {
  const ::proto::PlatformInfo* p = platform_;
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.platform)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::PlatformInfo*>(
      &::proto::_PlatformInfo_default_instance_);
}
::proto::PlatformInfo* SceneGadgetInfo::mutable_platform() {
  
  if (platform_ == NULL) {
    platform_ = new ::proto::PlatformInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.platform)
  return platform_;
}
::proto::PlatformInfo* SceneGadgetInfo::release_platform() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.platform)
  
  ::proto::PlatformInfo* temp = platform_;
  platform_ = NULL;
  return temp;
}
void SceneGadgetInfo::set_allocated_platform(::proto::PlatformInfo* platform) {
  delete platform_;
  platform_ = platform;
  if (platform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.platform)
}

// repeated uint32 interact_uid_list = 24;
int SceneGadgetInfo::interact_uid_list_size() const {
  return interact_uid_list_.size();
}
void SceneGadgetInfo::clear_interact_uid_list() {
  interact_uid_list_.Clear();
}
::google::protobuf::uint32 SceneGadgetInfo::interact_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.interact_uid_list)
  return interact_uid_list_.Get(index);
}
void SceneGadgetInfo::set_interact_uid_list(int index, ::google::protobuf::uint32 value) {
  interact_uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.SceneGadgetInfo.interact_uid_list)
}
void SceneGadgetInfo::add_interact_uid_list(::google::protobuf::uint32 value) {
  interact_uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.SceneGadgetInfo.interact_uid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SceneGadgetInfo::interact_uid_list() const {
  // @@protoc_insertion_point(field_list:proto.SceneGadgetInfo.interact_uid_list)
  return interact_uid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SceneGadgetInfo::mutable_interact_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SceneGadgetInfo.interact_uid_list)
  return &interact_uid_list_;
}

// uint32 draft_id = 25;
void SceneGadgetInfo::clear_draft_id() {
  draft_id_ = 0u;
}
::google::protobuf::uint32 SceneGadgetInfo::draft_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.draft_id)
  return draft_id_;
}
void SceneGadgetInfo::set_draft_id(::google::protobuf::uint32 value) {
  
  draft_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGadgetInfo.draft_id)
}

// uint32 gadget_talk_state = 26;
void SceneGadgetInfo::clear_gadget_talk_state() {
  gadget_talk_state_ = 0u;
}
::google::protobuf::uint32 SceneGadgetInfo::gadget_talk_state() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.gadget_talk_state)
  return gadget_talk_state_;
}
void SceneGadgetInfo::set_gadget_talk_state(::google::protobuf::uint32 value) {
  
  gadget_talk_state_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGadgetInfo.gadget_talk_state)
}

// .proto.GadgetPlayInfo play_info = 100;
bool SceneGadgetInfo::has_play_info() const {
  return this != internal_default_instance() && play_info_ != NULL;
}
void SceneGadgetInfo::clear_play_info() {
  if (GetArenaNoVirtual() == NULL && play_info_ != NULL) delete play_info_;
  play_info_ = NULL;
}
const ::proto::GadgetPlayInfo& SceneGadgetInfo::play_info() const {
  const ::proto::GadgetPlayInfo* p = play_info_;
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.play_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GadgetPlayInfo*>(
      &::proto::_GadgetPlayInfo_default_instance_);
}
::proto::GadgetPlayInfo* SceneGadgetInfo::mutable_play_info() {
  
  if (play_info_ == NULL) {
    play_info_ = new ::proto::GadgetPlayInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.play_info)
  return play_info_;
}
::proto::GadgetPlayInfo* SceneGadgetInfo::release_play_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.play_info)
  
  ::proto::GadgetPlayInfo* temp = play_info_;
  play_info_ = NULL;
  return temp;
}
void SceneGadgetInfo::set_allocated_play_info(::proto::GadgetPlayInfo* play_info) {
  delete play_info_;
  play_info_ = play_info;
  if (play_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.play_info)
}

// .proto.Item trifle_item = 12;
bool SceneGadgetInfo::has_trifle_item() const {
  return content_case() == kTrifleItem;
}
void SceneGadgetInfo::set_has_trifle_item() {
  _oneof_case_[0] = kTrifleItem;
}
void SceneGadgetInfo::clear_trifle_item() {
  if (has_trifle_item()) {
    delete content_.trifle_item_;
    clear_has_content();
  }
}
 const ::proto::Item& SceneGadgetInfo::trifle_item() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.trifle_item)
  return has_trifle_item()
      ? *content_.trifle_item_
      : ::proto::Item::default_instance();
}
::proto::Item* SceneGadgetInfo::mutable_trifle_item() {
  if (!has_trifle_item()) {
    clear_content();
    set_has_trifle_item();
    content_.trifle_item_ = new ::proto::Item;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.trifle_item)
  return content_.trifle_item_;
}
::proto::Item* SceneGadgetInfo::release_trifle_item() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.trifle_item)
  if (has_trifle_item()) {
    clear_has_content();
    ::proto::Item* temp = content_.trifle_item_;
    content_.trifle_item_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGadgetInfo::set_allocated_trifle_item(::proto::Item* trifle_item) {
  clear_content();
  if (trifle_item) {
    set_has_trifle_item();
    content_.trifle_item_ = trifle_item;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.trifle_item)
}

// .proto.GatherGadgetInfo gather_gadget = 13;
bool SceneGadgetInfo::has_gather_gadget() const {
  return content_case() == kGatherGadget;
}
void SceneGadgetInfo::set_has_gather_gadget() {
  _oneof_case_[0] = kGatherGadget;
}
void SceneGadgetInfo::clear_gather_gadget() {
  if (has_gather_gadget()) {
    delete content_.gather_gadget_;
    clear_has_content();
  }
}
 const ::proto::GatherGadgetInfo& SceneGadgetInfo::gather_gadget() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.gather_gadget)
  return has_gather_gadget()
      ? *content_.gather_gadget_
      : ::proto::GatherGadgetInfo::default_instance();
}
::proto::GatherGadgetInfo* SceneGadgetInfo::mutable_gather_gadget() {
  if (!has_gather_gadget()) {
    clear_content();
    set_has_gather_gadget();
    content_.gather_gadget_ = new ::proto::GatherGadgetInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.gather_gadget)
  return content_.gather_gadget_;
}
::proto::GatherGadgetInfo* SceneGadgetInfo::release_gather_gadget() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.gather_gadget)
  if (has_gather_gadget()) {
    clear_has_content();
    ::proto::GatherGadgetInfo* temp = content_.gather_gadget_;
    content_.gather_gadget_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGadgetInfo::set_allocated_gather_gadget(::proto::GatherGadgetInfo* gather_gadget) {
  clear_content();
  if (gather_gadget) {
    set_has_gather_gadget();
    content_.gather_gadget_ = gather_gadget;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.gather_gadget)
}

// .proto.WorktopInfo worktop = 14;
bool SceneGadgetInfo::has_worktop() const {
  return content_case() == kWorktop;
}
void SceneGadgetInfo::set_has_worktop() {
  _oneof_case_[0] = kWorktop;
}
void SceneGadgetInfo::clear_worktop() {
  if (has_worktop()) {
    delete content_.worktop_;
    clear_has_content();
  }
}
 const ::proto::WorktopInfo& SceneGadgetInfo::worktop() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.worktop)
  return has_worktop()
      ? *content_.worktop_
      : ::proto::WorktopInfo::default_instance();
}
::proto::WorktopInfo* SceneGadgetInfo::mutable_worktop() {
  if (!has_worktop()) {
    clear_content();
    set_has_worktop();
    content_.worktop_ = new ::proto::WorktopInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.worktop)
  return content_.worktop_;
}
::proto::WorktopInfo* SceneGadgetInfo::release_worktop() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.worktop)
  if (has_worktop()) {
    clear_has_content();
    ::proto::WorktopInfo* temp = content_.worktop_;
    content_.worktop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGadgetInfo::set_allocated_worktop(::proto::WorktopInfo* worktop) {
  clear_content();
  if (worktop) {
    set_has_worktop();
    content_.worktop_ = worktop;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.worktop)
}

// .proto.ClientGadgetInfo client_gadget = 15;
bool SceneGadgetInfo::has_client_gadget() const {
  return content_case() == kClientGadget;
}
void SceneGadgetInfo::set_has_client_gadget() {
  _oneof_case_[0] = kClientGadget;
}
void SceneGadgetInfo::clear_client_gadget() {
  if (has_client_gadget()) {
    delete content_.client_gadget_;
    clear_has_content();
  }
}
 const ::proto::ClientGadgetInfo& SceneGadgetInfo::client_gadget() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.client_gadget)
  return has_client_gadget()
      ? *content_.client_gadget_
      : ::proto::ClientGadgetInfo::default_instance();
}
::proto::ClientGadgetInfo* SceneGadgetInfo::mutable_client_gadget() {
  if (!has_client_gadget()) {
    clear_content();
    set_has_client_gadget();
    content_.client_gadget_ = new ::proto::ClientGadgetInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.client_gadget)
  return content_.client_gadget_;
}
::proto::ClientGadgetInfo* SceneGadgetInfo::release_client_gadget() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.client_gadget)
  if (has_client_gadget()) {
    clear_has_content();
    ::proto::ClientGadgetInfo* temp = content_.client_gadget_;
    content_.client_gadget_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGadgetInfo::set_allocated_client_gadget(::proto::ClientGadgetInfo* client_gadget) {
  clear_content();
  if (client_gadget) {
    set_has_client_gadget();
    content_.client_gadget_ = client_gadget;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.client_gadget)
}

// .proto.WeatherInfo weather = 17;
bool SceneGadgetInfo::has_weather() const {
  return content_case() == kWeather;
}
void SceneGadgetInfo::set_has_weather() {
  _oneof_case_[0] = kWeather;
}
void SceneGadgetInfo::clear_weather() {
  if (has_weather()) {
    delete content_.weather_;
    clear_has_content();
  }
}
 const ::proto::WeatherInfo& SceneGadgetInfo::weather() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.weather)
  return has_weather()
      ? *content_.weather_
      : ::proto::WeatherInfo::default_instance();
}
::proto::WeatherInfo* SceneGadgetInfo::mutable_weather() {
  if (!has_weather()) {
    clear_content();
    set_has_weather();
    content_.weather_ = new ::proto::WeatherInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.weather)
  return content_.weather_;
}
::proto::WeatherInfo* SceneGadgetInfo::release_weather() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.weather)
  if (has_weather()) {
    clear_has_content();
    ::proto::WeatherInfo* temp = content_.weather_;
    content_.weather_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGadgetInfo::set_allocated_weather(::proto::WeatherInfo* weather) {
  clear_content();
  if (weather) {
    set_has_weather();
    content_.weather_ = weather;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.weather)
}

// .proto.AbilityGadgetInfo ability_gadget = 18;
bool SceneGadgetInfo::has_ability_gadget() const {
  return content_case() == kAbilityGadget;
}
void SceneGadgetInfo::set_has_ability_gadget() {
  _oneof_case_[0] = kAbilityGadget;
}
void SceneGadgetInfo::clear_ability_gadget() {
  if (has_ability_gadget()) {
    delete content_.ability_gadget_;
    clear_has_content();
  }
}
 const ::proto::AbilityGadgetInfo& SceneGadgetInfo::ability_gadget() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.ability_gadget)
  return has_ability_gadget()
      ? *content_.ability_gadget_
      : ::proto::AbilityGadgetInfo::default_instance();
}
::proto::AbilityGadgetInfo* SceneGadgetInfo::mutable_ability_gadget() {
  if (!has_ability_gadget()) {
    clear_content();
    set_has_ability_gadget();
    content_.ability_gadget_ = new ::proto::AbilityGadgetInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.ability_gadget)
  return content_.ability_gadget_;
}
::proto::AbilityGadgetInfo* SceneGadgetInfo::release_ability_gadget() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.ability_gadget)
  if (has_ability_gadget()) {
    clear_has_content();
    ::proto::AbilityGadgetInfo* temp = content_.ability_gadget_;
    content_.ability_gadget_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGadgetInfo::set_allocated_ability_gadget(::proto::AbilityGadgetInfo* ability_gadget) {
  clear_content();
  if (ability_gadget) {
    set_has_ability_gadget();
    content_.ability_gadget_ = ability_gadget;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.ability_gadget)
}

// .proto.StatueGadgetInfo statue_gadget = 19;
bool SceneGadgetInfo::has_statue_gadget() const {
  return content_case() == kStatueGadget;
}
void SceneGadgetInfo::set_has_statue_gadget() {
  _oneof_case_[0] = kStatueGadget;
}
void SceneGadgetInfo::clear_statue_gadget() {
  if (has_statue_gadget()) {
    delete content_.statue_gadget_;
    clear_has_content();
  }
}
 const ::proto::StatueGadgetInfo& SceneGadgetInfo::statue_gadget() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.statue_gadget)
  return has_statue_gadget()
      ? *content_.statue_gadget_
      : ::proto::StatueGadgetInfo::default_instance();
}
::proto::StatueGadgetInfo* SceneGadgetInfo::mutable_statue_gadget() {
  if (!has_statue_gadget()) {
    clear_content();
    set_has_statue_gadget();
    content_.statue_gadget_ = new ::proto::StatueGadgetInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.statue_gadget)
  return content_.statue_gadget_;
}
::proto::StatueGadgetInfo* SceneGadgetInfo::release_statue_gadget() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.statue_gadget)
  if (has_statue_gadget()) {
    clear_has_content();
    ::proto::StatueGadgetInfo* temp = content_.statue_gadget_;
    content_.statue_gadget_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGadgetInfo::set_allocated_statue_gadget(::proto::StatueGadgetInfo* statue_gadget) {
  clear_content();
  if (statue_gadget) {
    set_has_statue_gadget();
    content_.statue_gadget_ = statue_gadget;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.statue_gadget)
}

// .proto.BossChestInfo boss_chest = 20;
bool SceneGadgetInfo::has_boss_chest() const {
  return content_case() == kBossChest;
}
void SceneGadgetInfo::set_has_boss_chest() {
  _oneof_case_[0] = kBossChest;
}
void SceneGadgetInfo::clear_boss_chest() {
  if (has_boss_chest()) {
    delete content_.boss_chest_;
    clear_has_content();
  }
}
 const ::proto::BossChestInfo& SceneGadgetInfo::boss_chest() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.boss_chest)
  return has_boss_chest()
      ? *content_.boss_chest_
      : ::proto::BossChestInfo::default_instance();
}
::proto::BossChestInfo* SceneGadgetInfo::mutable_boss_chest() {
  if (!has_boss_chest()) {
    clear_content();
    set_has_boss_chest();
    content_.boss_chest_ = new ::proto::BossChestInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.boss_chest)
  return content_.boss_chest_;
}
::proto::BossChestInfo* SceneGadgetInfo::release_boss_chest() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.boss_chest)
  if (has_boss_chest()) {
    clear_has_content();
    ::proto::BossChestInfo* temp = content_.boss_chest_;
    content_.boss_chest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGadgetInfo::set_allocated_boss_chest(::proto::BossChestInfo* boss_chest) {
  clear_content();
  if (boss_chest) {
    set_has_boss_chest();
    content_.boss_chest_ = boss_chest;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.boss_chest)
}

// .proto.BlossomChestInfo blossom_chest = 41;
bool SceneGadgetInfo::has_blossom_chest() const {
  return content_case() == kBlossomChest;
}
void SceneGadgetInfo::set_has_blossom_chest() {
  _oneof_case_[0] = kBlossomChest;
}
void SceneGadgetInfo::clear_blossom_chest() {
  if (has_blossom_chest()) {
    delete content_.blossom_chest_;
    clear_has_content();
  }
}
 const ::proto::BlossomChestInfo& SceneGadgetInfo::blossom_chest() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.blossom_chest)
  return has_blossom_chest()
      ? *content_.blossom_chest_
      : ::proto::BlossomChestInfo::default_instance();
}
::proto::BlossomChestInfo* SceneGadgetInfo::mutable_blossom_chest() {
  if (!has_blossom_chest()) {
    clear_content();
    set_has_blossom_chest();
    content_.blossom_chest_ = new ::proto::BlossomChestInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.blossom_chest)
  return content_.blossom_chest_;
}
::proto::BlossomChestInfo* SceneGadgetInfo::release_blossom_chest() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.blossom_chest)
  if (has_blossom_chest()) {
    clear_has_content();
    ::proto::BlossomChestInfo* temp = content_.blossom_chest_;
    content_.blossom_chest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGadgetInfo::set_allocated_blossom_chest(::proto::BlossomChestInfo* blossom_chest) {
  clear_content();
  if (blossom_chest) {
    set_has_blossom_chest();
    content_.blossom_chest_ = blossom_chest;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.blossom_chest)
}

// .proto.MpPlayRewardInfo mp_play_reward = 42;
bool SceneGadgetInfo::has_mp_play_reward() const {
  return content_case() == kMpPlayReward;
}
void SceneGadgetInfo::set_has_mp_play_reward() {
  _oneof_case_[0] = kMpPlayReward;
}
void SceneGadgetInfo::clear_mp_play_reward() {
  if (has_mp_play_reward()) {
    delete content_.mp_play_reward_;
    clear_has_content();
  }
}
 const ::proto::MpPlayRewardInfo& SceneGadgetInfo::mp_play_reward() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.mp_play_reward)
  return has_mp_play_reward()
      ? *content_.mp_play_reward_
      : ::proto::MpPlayRewardInfo::default_instance();
}
::proto::MpPlayRewardInfo* SceneGadgetInfo::mutable_mp_play_reward() {
  if (!has_mp_play_reward()) {
    clear_content();
    set_has_mp_play_reward();
    content_.mp_play_reward_ = new ::proto::MpPlayRewardInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.mp_play_reward)
  return content_.mp_play_reward_;
}
::proto::MpPlayRewardInfo* SceneGadgetInfo::release_mp_play_reward() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.mp_play_reward)
  if (has_mp_play_reward()) {
    clear_has_content();
    ::proto::MpPlayRewardInfo* temp = content_.mp_play_reward_;
    content_.mp_play_reward_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGadgetInfo::set_allocated_mp_play_reward(::proto::MpPlayRewardInfo* mp_play_reward) {
  clear_content();
  if (mp_play_reward) {
    set_has_mp_play_reward();
    content_.mp_play_reward_ = mp_play_reward;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.mp_play_reward)
}

// .proto.GadgetGeneralRewardInfo general_reward = 43;
bool SceneGadgetInfo::has_general_reward() const {
  return content_case() == kGeneralReward;
}
void SceneGadgetInfo::set_has_general_reward() {
  _oneof_case_[0] = kGeneralReward;
}
void SceneGadgetInfo::clear_general_reward() {
  if (has_general_reward()) {
    delete content_.general_reward_;
    clear_has_content();
  }
}
 const ::proto::GadgetGeneralRewardInfo& SceneGadgetInfo::general_reward() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.general_reward)
  return has_general_reward()
      ? *content_.general_reward_
      : ::proto::GadgetGeneralRewardInfo::default_instance();
}
::proto::GadgetGeneralRewardInfo* SceneGadgetInfo::mutable_general_reward() {
  if (!has_general_reward()) {
    clear_content();
    set_has_general_reward();
    content_.general_reward_ = new ::proto::GadgetGeneralRewardInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.general_reward)
  return content_.general_reward_;
}
::proto::GadgetGeneralRewardInfo* SceneGadgetInfo::release_general_reward() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.general_reward)
  if (has_general_reward()) {
    clear_has_content();
    ::proto::GadgetGeneralRewardInfo* temp = content_.general_reward_;
    content_.general_reward_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGadgetInfo::set_allocated_general_reward(::proto::GadgetGeneralRewardInfo* general_reward) {
  clear_content();
  if (general_reward) {
    set_has_general_reward();
    content_.general_reward_ = general_reward;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.general_reward)
}

// .proto.OfferingInfo offering_info = 44;
bool SceneGadgetInfo::has_offering_info() const {
  return content_case() == kOfferingInfo;
}
void SceneGadgetInfo::set_has_offering_info() {
  _oneof_case_[0] = kOfferingInfo;
}
void SceneGadgetInfo::clear_offering_info() {
  if (has_offering_info()) {
    delete content_.offering_info_;
    clear_has_content();
  }
}
 const ::proto::OfferingInfo& SceneGadgetInfo::offering_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.offering_info)
  return has_offering_info()
      ? *content_.offering_info_
      : ::proto::OfferingInfo::default_instance();
}
::proto::OfferingInfo* SceneGadgetInfo::mutable_offering_info() {
  if (!has_offering_info()) {
    clear_content();
    set_has_offering_info();
    content_.offering_info_ = new ::proto::OfferingInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.offering_info)
  return content_.offering_info_;
}
::proto::OfferingInfo* SceneGadgetInfo::release_offering_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.offering_info)
  if (has_offering_info()) {
    clear_has_content();
    ::proto::OfferingInfo* temp = content_.offering_info_;
    content_.offering_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGadgetInfo::set_allocated_offering_info(::proto::OfferingInfo* offering_info) {
  clear_content();
  if (offering_info) {
    set_has_offering_info();
    content_.offering_info_ = offering_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.offering_info)
}

// .proto.FoundationInfo foundation_info = 45;
bool SceneGadgetInfo::has_foundation_info() const {
  return content_case() == kFoundationInfo;
}
void SceneGadgetInfo::set_has_foundation_info() {
  _oneof_case_[0] = kFoundationInfo;
}
void SceneGadgetInfo::clear_foundation_info() {
  if (has_foundation_info()) {
    delete content_.foundation_info_;
    clear_has_content();
  }
}
 const ::proto::FoundationInfo& SceneGadgetInfo::foundation_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.foundation_info)
  return has_foundation_info()
      ? *content_.foundation_info_
      : ::proto::FoundationInfo::default_instance();
}
::proto::FoundationInfo* SceneGadgetInfo::mutable_foundation_info() {
  if (!has_foundation_info()) {
    clear_content();
    set_has_foundation_info();
    content_.foundation_info_ = new ::proto::FoundationInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.foundation_info)
  return content_.foundation_info_;
}
::proto::FoundationInfo* SceneGadgetInfo::release_foundation_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.foundation_info)
  if (has_foundation_info()) {
    clear_has_content();
    ::proto::FoundationInfo* temp = content_.foundation_info_;
    content_.foundation_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGadgetInfo::set_allocated_foundation_info(::proto::FoundationInfo* foundation_info) {
  clear_content();
  if (foundation_info) {
    set_has_foundation_info();
    content_.foundation_info_ = foundation_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.foundation_info)
}

// .proto.VehicleInfo vehicle_info = 46;
bool SceneGadgetInfo::has_vehicle_info() const {
  return content_case() == kVehicleInfo;
}
void SceneGadgetInfo::set_has_vehicle_info() {
  _oneof_case_[0] = kVehicleInfo;
}
void SceneGadgetInfo::clear_vehicle_info() {
  if (has_vehicle_info()) {
    delete content_.vehicle_info_;
    clear_has_content();
  }
}
 const ::proto::VehicleInfo& SceneGadgetInfo::vehicle_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.vehicle_info)
  return has_vehicle_info()
      ? *content_.vehicle_info_
      : ::proto::VehicleInfo::default_instance();
}
::proto::VehicleInfo* SceneGadgetInfo::mutable_vehicle_info() {
  if (!has_vehicle_info()) {
    clear_content();
    set_has_vehicle_info();
    content_.vehicle_info_ = new ::proto::VehicleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.vehicle_info)
  return content_.vehicle_info_;
}
::proto::VehicleInfo* SceneGadgetInfo::release_vehicle_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.vehicle_info)
  if (has_vehicle_info()) {
    clear_has_content();
    ::proto::VehicleInfo* temp = content_.vehicle_info_;
    content_.vehicle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGadgetInfo::set_allocated_vehicle_info(::proto::VehicleInfo* vehicle_info) {
  clear_content();
  if (vehicle_info) {
    set_has_vehicle_info();
    content_.vehicle_info_ = vehicle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.vehicle_info)
}

// .proto.EchoShellInfo shell_info = 47;
bool SceneGadgetInfo::has_shell_info() const {
  return content_case() == kShellInfo;
}
void SceneGadgetInfo::set_has_shell_info() {
  _oneof_case_[0] = kShellInfo;
}
void SceneGadgetInfo::clear_shell_info() {
  if (has_shell_info()) {
    delete content_.shell_info_;
    clear_has_content();
  }
}
 const ::proto::EchoShellInfo& SceneGadgetInfo::shell_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.shell_info)
  return has_shell_info()
      ? *content_.shell_info_
      : ::proto::EchoShellInfo::default_instance();
}
::proto::EchoShellInfo* SceneGadgetInfo::mutable_shell_info() {
  if (!has_shell_info()) {
    clear_content();
    set_has_shell_info();
    content_.shell_info_ = new ::proto::EchoShellInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.shell_info)
  return content_.shell_info_;
}
::proto::EchoShellInfo* SceneGadgetInfo::release_shell_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.shell_info)
  if (has_shell_info()) {
    clear_has_content();
    ::proto::EchoShellInfo* temp = content_.shell_info_;
    content_.shell_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGadgetInfo::set_allocated_shell_info(::proto::EchoShellInfo* shell_info) {
  clear_content();
  if (shell_info) {
    set_has_shell_info();
    content_.shell_info_ = shell_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.shell_info)
}

// .proto.ScreenInfo screen_info = 48;
bool SceneGadgetInfo::has_screen_info() const {
  return content_case() == kScreenInfo;
}
void SceneGadgetInfo::set_has_screen_info() {
  _oneof_case_[0] = kScreenInfo;
}
void SceneGadgetInfo::clear_screen_info() {
  if (has_screen_info()) {
    delete content_.screen_info_;
    clear_has_content();
  }
}
 const ::proto::ScreenInfo& SceneGadgetInfo::screen_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.screen_info)
  return has_screen_info()
      ? *content_.screen_info_
      : ::proto::ScreenInfo::default_instance();
}
::proto::ScreenInfo* SceneGadgetInfo::mutable_screen_info() {
  if (!has_screen_info()) {
    clear_content();
    set_has_screen_info();
    content_.screen_info_ = new ::proto::ScreenInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.screen_info)
  return content_.screen_info_;
}
::proto::ScreenInfo* SceneGadgetInfo::release_screen_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.screen_info)
  if (has_screen_info()) {
    clear_has_content();
    ::proto::ScreenInfo* temp = content_.screen_info_;
    content_.screen_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGadgetInfo::set_allocated_screen_info(::proto::ScreenInfo* screen_info) {
  clear_content();
  if (screen_info) {
    set_has_screen_info();
    content_.screen_info_ = screen_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.screen_info)
}

// .proto.FishPoolInfo fish_pool_info = 59;
bool SceneGadgetInfo::has_fish_pool_info() const {
  return content_case() == kFishPoolInfo;
}
void SceneGadgetInfo::set_has_fish_pool_info() {
  _oneof_case_[0] = kFishPoolInfo;
}
void SceneGadgetInfo::clear_fish_pool_info() {
  if (has_fish_pool_info()) {
    delete content_.fish_pool_info_;
    clear_has_content();
  }
}
 const ::proto::FishPoolInfo& SceneGadgetInfo::fish_pool_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.fish_pool_info)
  return has_fish_pool_info()
      ? *content_.fish_pool_info_
      : ::proto::FishPoolInfo::default_instance();
}
::proto::FishPoolInfo* SceneGadgetInfo::mutable_fish_pool_info() {
  if (!has_fish_pool_info()) {
    clear_content();
    set_has_fish_pool_info();
    content_.fish_pool_info_ = new ::proto::FishPoolInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.fish_pool_info)
  return content_.fish_pool_info_;
}
::proto::FishPoolInfo* SceneGadgetInfo::release_fish_pool_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.fish_pool_info)
  if (has_fish_pool_info()) {
    clear_has_content();
    ::proto::FishPoolInfo* temp = content_.fish_pool_info_;
    content_.fish_pool_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGadgetInfo::set_allocated_fish_pool_info(::proto::FishPoolInfo* fish_pool_info) {
  clear_content();
  if (fish_pool_info) {
    set_has_fish_pool_info();
    content_.fish_pool_info_ = fish_pool_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.fish_pool_info)
}

// .proto.CustomGadgetTreeInfo custom_gadget_tree_info = 60;
bool SceneGadgetInfo::has_custom_gadget_tree_info() const {
  return content_case() == kCustomGadgetTreeInfo;
}
void SceneGadgetInfo::set_has_custom_gadget_tree_info() {
  _oneof_case_[0] = kCustomGadgetTreeInfo;
}
void SceneGadgetInfo::clear_custom_gadget_tree_info() {
  if (has_custom_gadget_tree_info()) {
    delete content_.custom_gadget_tree_info_;
    clear_has_content();
  }
}
 const ::proto::CustomGadgetTreeInfo& SceneGadgetInfo::custom_gadget_tree_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.custom_gadget_tree_info)
  return has_custom_gadget_tree_info()
      ? *content_.custom_gadget_tree_info_
      : ::proto::CustomGadgetTreeInfo::default_instance();
}
::proto::CustomGadgetTreeInfo* SceneGadgetInfo::mutable_custom_gadget_tree_info() {
  if (!has_custom_gadget_tree_info()) {
    clear_content();
    set_has_custom_gadget_tree_info();
    content_.custom_gadget_tree_info_ = new ::proto::CustomGadgetTreeInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.custom_gadget_tree_info)
  return content_.custom_gadget_tree_info_;
}
::proto::CustomGadgetTreeInfo* SceneGadgetInfo::release_custom_gadget_tree_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.custom_gadget_tree_info)
  if (has_custom_gadget_tree_info()) {
    clear_has_content();
    ::proto::CustomGadgetTreeInfo* temp = content_.custom_gadget_tree_info_;
    content_.custom_gadget_tree_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGadgetInfo::set_allocated_custom_gadget_tree_info(::proto::CustomGadgetTreeInfo* custom_gadget_tree_info) {
  clear_content();
  if (custom_gadget_tree_info) {
    set_has_custom_gadget_tree_info();
    content_.custom_gadget_tree_info_ = custom_gadget_tree_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.custom_gadget_tree_info)
}

// .proto.RoguelikeGadgetInfo roguelike_gadget_info = 61;
bool SceneGadgetInfo::has_roguelike_gadget_info() const {
  return content_case() == kRoguelikeGadgetInfo;
}
void SceneGadgetInfo::set_has_roguelike_gadget_info() {
  _oneof_case_[0] = kRoguelikeGadgetInfo;
}
void SceneGadgetInfo::clear_roguelike_gadget_info() {
  if (has_roguelike_gadget_info()) {
    delete content_.roguelike_gadget_info_;
    clear_has_content();
  }
}
 const ::proto::RoguelikeGadgetInfo& SceneGadgetInfo::roguelike_gadget_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.roguelike_gadget_info)
  return has_roguelike_gadget_info()
      ? *content_.roguelike_gadget_info_
      : ::proto::RoguelikeGadgetInfo::default_instance();
}
::proto::RoguelikeGadgetInfo* SceneGadgetInfo::mutable_roguelike_gadget_info() {
  if (!has_roguelike_gadget_info()) {
    clear_content();
    set_has_roguelike_gadget_info();
    content_.roguelike_gadget_info_ = new ::proto::RoguelikeGadgetInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.roguelike_gadget_info)
  return content_.roguelike_gadget_info_;
}
::proto::RoguelikeGadgetInfo* SceneGadgetInfo::release_roguelike_gadget_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.roguelike_gadget_info)
  if (has_roguelike_gadget_info()) {
    clear_has_content();
    ::proto::RoguelikeGadgetInfo* temp = content_.roguelike_gadget_info_;
    content_.roguelike_gadget_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGadgetInfo::set_allocated_roguelike_gadget_info(::proto::RoguelikeGadgetInfo* roguelike_gadget_info) {
  clear_content();
  if (roguelike_gadget_info) {
    set_has_roguelike_gadget_info();
    content_.roguelike_gadget_info_ = roguelike_gadget_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.roguelike_gadget_info)
}

// .proto.NightCrowGadgetInfo night_crow_gadget_info = 62;
bool SceneGadgetInfo::has_night_crow_gadget_info() const {
  return content_case() == kNightCrowGadgetInfo;
}
void SceneGadgetInfo::set_has_night_crow_gadget_info() {
  _oneof_case_[0] = kNightCrowGadgetInfo;
}
void SceneGadgetInfo::clear_night_crow_gadget_info() {
  if (has_night_crow_gadget_info()) {
    delete content_.night_crow_gadget_info_;
    clear_has_content();
  }
}
 const ::proto::NightCrowGadgetInfo& SceneGadgetInfo::night_crow_gadget_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.night_crow_gadget_info)
  return has_night_crow_gadget_info()
      ? *content_.night_crow_gadget_info_
      : ::proto::NightCrowGadgetInfo::default_instance();
}
::proto::NightCrowGadgetInfo* SceneGadgetInfo::mutable_night_crow_gadget_info() {
  if (!has_night_crow_gadget_info()) {
    clear_content();
    set_has_night_crow_gadget_info();
    content_.night_crow_gadget_info_ = new ::proto::NightCrowGadgetInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.night_crow_gadget_info)
  return content_.night_crow_gadget_info_;
}
::proto::NightCrowGadgetInfo* SceneGadgetInfo::release_night_crow_gadget_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.night_crow_gadget_info)
  if (has_night_crow_gadget_info()) {
    clear_has_content();
    ::proto::NightCrowGadgetInfo* temp = content_.night_crow_gadget_info_;
    content_.night_crow_gadget_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGadgetInfo::set_allocated_night_crow_gadget_info(::proto::NightCrowGadgetInfo* night_crow_gadget_info) {
  clear_content();
  if (night_crow_gadget_info) {
    set_has_night_crow_gadget_info();
    content_.night_crow_gadget_info_ = night_crow_gadget_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.night_crow_gadget_info)
}

// .proto.DeshretObeliskGadgetInfo deshret_obelisk_gadget_info = 63;
bool SceneGadgetInfo::has_deshret_obelisk_gadget_info() const {
  return content_case() == kDeshretObeliskGadgetInfo;
}
void SceneGadgetInfo::set_has_deshret_obelisk_gadget_info() {
  _oneof_case_[0] = kDeshretObeliskGadgetInfo;
}
void SceneGadgetInfo::clear_deshret_obelisk_gadget_info() {
  if (has_deshret_obelisk_gadget_info()) {
    delete content_.deshret_obelisk_gadget_info_;
    clear_has_content();
  }
}
 const ::proto::DeshretObeliskGadgetInfo& SceneGadgetInfo::deshret_obelisk_gadget_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.deshret_obelisk_gadget_info)
  return has_deshret_obelisk_gadget_info()
      ? *content_.deshret_obelisk_gadget_info_
      : ::proto::DeshretObeliskGadgetInfo::default_instance();
}
::proto::DeshretObeliskGadgetInfo* SceneGadgetInfo::mutable_deshret_obelisk_gadget_info() {
  if (!has_deshret_obelisk_gadget_info()) {
    clear_content();
    set_has_deshret_obelisk_gadget_info();
    content_.deshret_obelisk_gadget_info_ = new ::proto::DeshretObeliskGadgetInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.deshret_obelisk_gadget_info)
  return content_.deshret_obelisk_gadget_info_;
}
::proto::DeshretObeliskGadgetInfo* SceneGadgetInfo::release_deshret_obelisk_gadget_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.deshret_obelisk_gadget_info)
  if (has_deshret_obelisk_gadget_info()) {
    clear_has_content();
    ::proto::DeshretObeliskGadgetInfo* temp = content_.deshret_obelisk_gadget_info_;
    content_.deshret_obelisk_gadget_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGadgetInfo::set_allocated_deshret_obelisk_gadget_info(::proto::DeshretObeliskGadgetInfo* deshret_obelisk_gadget_info) {
  clear_content();
  if (deshret_obelisk_gadget_info) {
    set_has_deshret_obelisk_gadget_info();
    content_.deshret_obelisk_gadget_info_ = deshret_obelisk_gadget_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.deshret_obelisk_gadget_info)
}

// .proto.CoinCollectOperatorInfo coin_collect_operator_info = 64;
bool SceneGadgetInfo::has_coin_collect_operator_info() const {
  return content_case() == kCoinCollectOperatorInfo;
}
void SceneGadgetInfo::set_has_coin_collect_operator_info() {
  _oneof_case_[0] = kCoinCollectOperatorInfo;
}
void SceneGadgetInfo::clear_coin_collect_operator_info() {
  if (has_coin_collect_operator_info()) {
    delete content_.coin_collect_operator_info_;
    clear_has_content();
  }
}
 const ::proto::CoinCollectOperatorInfo& SceneGadgetInfo::coin_collect_operator_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGadgetInfo.coin_collect_operator_info)
  return has_coin_collect_operator_info()
      ? *content_.coin_collect_operator_info_
      : ::proto::CoinCollectOperatorInfo::default_instance();
}
::proto::CoinCollectOperatorInfo* SceneGadgetInfo::mutable_coin_collect_operator_info() {
  if (!has_coin_collect_operator_info()) {
    clear_content();
    set_has_coin_collect_operator_info();
    content_.coin_collect_operator_info_ = new ::proto::CoinCollectOperatorInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGadgetInfo.coin_collect_operator_info)
  return content_.coin_collect_operator_info_;
}
::proto::CoinCollectOperatorInfo* SceneGadgetInfo::release_coin_collect_operator_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGadgetInfo.coin_collect_operator_info)
  if (has_coin_collect_operator_info()) {
    clear_has_content();
    ::proto::CoinCollectOperatorInfo* temp = content_.coin_collect_operator_info_;
    content_.coin_collect_operator_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGadgetInfo::set_allocated_coin_collect_operator_info(::proto::CoinCollectOperatorInfo* coin_collect_operator_info) {
  clear_content();
  if (coin_collect_operator_info) {
    set_has_coin_collect_operator_info();
    content_.coin_collect_operator_info_ = coin_collect_operator_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGadgetInfo.coin_collect_operator_info)
}

bool SceneGadgetInfo::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
void SceneGadgetInfo::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
SceneGadgetInfo::ContentCase SceneGadgetInfo::content_case() const {
  return SceneGadgetInfo::ContentCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnimatorParameterValueInfo::kParaTypeFieldNumber;
const int AnimatorParameterValueInfo::kIntValFieldNumber;
const int AnimatorParameterValueInfo::kFloatValFieldNumber;
const int AnimatorParameterValueInfo::kBoolValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnimatorParameterValueInfo::AnimatorParameterValueInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AnimatorParameterValueInfo)
}
AnimatorParameterValueInfo::AnimatorParameterValueInfo(const AnimatorParameterValueInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  para_type_ = from.para_type_;
  clear_has_paraVal();
  switch (from.paraVal_case()) {
    case kIntVal: {
      set_int_val(from.int_val());
      break;
    }
    case kFloatVal: {
      set_float_val(from.float_val());
      break;
    }
    case kBoolVal: {
      set_bool_val(from.bool_val());
      break;
    }
    case PARAVAL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.AnimatorParameterValueInfo)
}

void AnimatorParameterValueInfo::SharedCtor() {
  para_type_ = 0u;
  clear_has_paraVal();
  _cached_size_ = 0;
}

AnimatorParameterValueInfo::~AnimatorParameterValueInfo() {
  // @@protoc_insertion_point(destructor:proto.AnimatorParameterValueInfo)
  SharedDtor();
}

void AnimatorParameterValueInfo::SharedDtor() {
  if (has_paraVal()) {
    clear_paraVal();
  }
}

void AnimatorParameterValueInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnimatorParameterValueInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnimatorParameterValueInfo& AnimatorParameterValueInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnimatorParameterValueInfo* AnimatorParameterValueInfo::New(::google::protobuf::Arena* arena) const {
  AnimatorParameterValueInfo* n = new AnimatorParameterValueInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnimatorParameterValueInfo::clear_paraVal() {
// @@protoc_insertion_point(one_of_clear_start:proto.AnimatorParameterValueInfo)
  switch (paraVal_case()) {
    case kIntVal: {
      // No need to clear
      break;
    }
    case kFloatVal: {
      // No need to clear
      break;
    }
    case kBoolVal: {
      // No need to clear
      break;
    }
    case PARAVAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAVAL_NOT_SET;
}


void AnimatorParameterValueInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AnimatorParameterValueInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  para_type_ = 0u;
  clear_paraVal();
  _internal_metadata_.Clear();
}

bool AnimatorParameterValueInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AnimatorParameterValueInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 para_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &para_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 int_val = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_paraVal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paraVal_.int_val_)));
          set_has_int_val();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float float_val = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          clear_paraVal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &paraVal_.float_val_)));
          set_has_float_val();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bool_val = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          clear_paraVal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paraVal_.bool_val_)));
          set_has_bool_val();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AnimatorParameterValueInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AnimatorParameterValueInfo)
  return false;
#undef DO_
}

void AnimatorParameterValueInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AnimatorParameterValueInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 para_type = 1;
  if (this->para_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->para_type(), output);
  }

  // int32 int_val = 2;
  if (has_int_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->int_val(), output);
  }

  // float float_val = 3;
  if (has_float_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->float_val(), output);
  }

  // bool bool_val = 4;
  if (has_bool_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bool_val(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AnimatorParameterValueInfo)
}

::google::protobuf::uint8* AnimatorParameterValueInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AnimatorParameterValueInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 para_type = 1;
  if (this->para_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->para_type(), target);
  }

  // int32 int_val = 2;
  if (has_int_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->int_val(), target);
  }

  // float float_val = 3;
  if (has_float_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->float_val(), target);
  }

  // bool bool_val = 4;
  if (has_bool_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bool_val(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AnimatorParameterValueInfo)
  return target;
}

size_t AnimatorParameterValueInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AnimatorParameterValueInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 para_type = 1;
  if (this->para_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->para_type());
  }

  switch (paraVal_case()) {
    // int32 int_val = 2;
    case kIntVal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_val());
      break;
    }
    // float float_val = 3;
    case kFloatVal: {
      total_size += 1 + 4;
      break;
    }
    // bool bool_val = 4;
    case kBoolVal: {
      total_size += 1 + 1;
      break;
    }
    case PARAVAL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnimatorParameterValueInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AnimatorParameterValueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AnimatorParameterValueInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnimatorParameterValueInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AnimatorParameterValueInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AnimatorParameterValueInfo)
    MergeFrom(*source);
  }
}

void AnimatorParameterValueInfo::MergeFrom(const AnimatorParameterValueInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AnimatorParameterValueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.para_type() != 0) {
    set_para_type(from.para_type());
  }
  switch (from.paraVal_case()) {
    case kIntVal: {
      set_int_val(from.int_val());
      break;
    }
    case kFloatVal: {
      set_float_val(from.float_val());
      break;
    }
    case kBoolVal: {
      set_bool_val(from.bool_val());
      break;
    }
    case PARAVAL_NOT_SET: {
      break;
    }
  }
}

void AnimatorParameterValueInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AnimatorParameterValueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimatorParameterValueInfo::CopyFrom(const AnimatorParameterValueInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AnimatorParameterValueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimatorParameterValueInfo::IsInitialized() const {
  return true;
}

void AnimatorParameterValueInfo::Swap(AnimatorParameterValueInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnimatorParameterValueInfo::InternalSwap(AnimatorParameterValueInfo* other) {
  using std::swap;
  swap(para_type_, other->para_type_);
  swap(paraVal_, other->paraVal_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnimatorParameterValueInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnimatorParameterValueInfo

// uint32 para_type = 1;
void AnimatorParameterValueInfo::clear_para_type() {
  para_type_ = 0u;
}
::google::protobuf::uint32 AnimatorParameterValueInfo::para_type() const {
  // @@protoc_insertion_point(field_get:proto.AnimatorParameterValueInfo.para_type)
  return para_type_;
}
void AnimatorParameterValueInfo::set_para_type(::google::protobuf::uint32 value) {
  
  para_type_ = value;
  // @@protoc_insertion_point(field_set:proto.AnimatorParameterValueInfo.para_type)
}

// int32 int_val = 2;
bool AnimatorParameterValueInfo::has_int_val() const {
  return paraVal_case() == kIntVal;
}
void AnimatorParameterValueInfo::set_has_int_val() {
  _oneof_case_[0] = kIntVal;
}
void AnimatorParameterValueInfo::clear_int_val() {
  if (has_int_val()) {
    paraVal_.int_val_ = 0;
    clear_has_paraVal();
  }
}
::google::protobuf::int32 AnimatorParameterValueInfo::int_val() const {
  // @@protoc_insertion_point(field_get:proto.AnimatorParameterValueInfo.int_val)
  if (has_int_val()) {
    return paraVal_.int_val_;
  }
  return 0;
}
void AnimatorParameterValueInfo::set_int_val(::google::protobuf::int32 value) {
  if (!has_int_val()) {
    clear_paraVal();
    set_has_int_val();
  }
  paraVal_.int_val_ = value;
  // @@protoc_insertion_point(field_set:proto.AnimatorParameterValueInfo.int_val)
}

// float float_val = 3;
bool AnimatorParameterValueInfo::has_float_val() const {
  return paraVal_case() == kFloatVal;
}
void AnimatorParameterValueInfo::set_has_float_val() {
  _oneof_case_[0] = kFloatVal;
}
void AnimatorParameterValueInfo::clear_float_val() {
  if (has_float_val()) {
    paraVal_.float_val_ = 0;
    clear_has_paraVal();
  }
}
float AnimatorParameterValueInfo::float_val() const {
  // @@protoc_insertion_point(field_get:proto.AnimatorParameterValueInfo.float_val)
  if (has_float_val()) {
    return paraVal_.float_val_;
  }
  return 0;
}
void AnimatorParameterValueInfo::set_float_val(float value) {
  if (!has_float_val()) {
    clear_paraVal();
    set_has_float_val();
  }
  paraVal_.float_val_ = value;
  // @@protoc_insertion_point(field_set:proto.AnimatorParameterValueInfo.float_val)
}

// bool bool_val = 4;
bool AnimatorParameterValueInfo::has_bool_val() const {
  return paraVal_case() == kBoolVal;
}
void AnimatorParameterValueInfo::set_has_bool_val() {
  _oneof_case_[0] = kBoolVal;
}
void AnimatorParameterValueInfo::clear_bool_val() {
  if (has_bool_val()) {
    paraVal_.bool_val_ = false;
    clear_has_paraVal();
  }
}
bool AnimatorParameterValueInfo::bool_val() const {
  // @@protoc_insertion_point(field_get:proto.AnimatorParameterValueInfo.bool_val)
  if (has_bool_val()) {
    return paraVal_.bool_val_;
  }
  return false;
}
void AnimatorParameterValueInfo::set_bool_val(bool value) {
  if (!has_bool_val()) {
    clear_paraVal();
    set_has_bool_val();
  }
  paraVal_.bool_val_ = value;
  // @@protoc_insertion_point(field_set:proto.AnimatorParameterValueInfo.bool_val)
}

bool AnimatorParameterValueInfo::has_paraVal() const {
  return paraVal_case() != PARAVAL_NOT_SET;
}
void AnimatorParameterValueInfo::clear_has_paraVal() {
  _oneof_case_[0] = PARAVAL_NOT_SET;
}
AnimatorParameterValueInfo::ParaValCase AnimatorParameterValueInfo::paraVal_case() const {
  return AnimatorParameterValueInfo::ParaValCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServantInfo::kMasterEntityIdFieldNumber;
const int ServantInfo::kBornSlotIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServantInfo::ServantInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServantInfo)
}
ServantInfo::ServantInfo(const ServantInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&master_entity_id_, &from.master_entity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&born_slot_index_) -
    reinterpret_cast<char*>(&master_entity_id_)) + sizeof(born_slot_index_));
  // @@protoc_insertion_point(copy_constructor:proto.ServantInfo)
}

void ServantInfo::SharedCtor() {
  ::memset(&master_entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&born_slot_index_) -
      reinterpret_cast<char*>(&master_entity_id_)) + sizeof(born_slot_index_));
  _cached_size_ = 0;
}

ServantInfo::~ServantInfo() {
  // @@protoc_insertion_point(destructor:proto.ServantInfo)
  SharedDtor();
}

void ServantInfo::SharedDtor() {
}

void ServantInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServantInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServantInfo& ServantInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServantInfo* ServantInfo::New(::google::protobuf::Arena* arena) const {
  ServantInfo* n = new ServantInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServantInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServantInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&master_entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&born_slot_index_) -
      reinterpret_cast<char*>(&master_entity_id_)) + sizeof(born_slot_index_));
  _internal_metadata_.Clear();
}

bool ServantInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServantInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 master_entity_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &master_entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 born_slot_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &born_slot_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServantInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServantInfo)
  return false;
#undef DO_
}

void ServantInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServantInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 master_entity_id = 1;
  if (this->master_entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->master_entity_id(), output);
  }

  // uint32 born_slot_index = 2;
  if (this->born_slot_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->born_slot_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServantInfo)
}

::google::protobuf::uint8* ServantInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServantInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 master_entity_id = 1;
  if (this->master_entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->master_entity_id(), target);
  }

  // uint32 born_slot_index = 2;
  if (this->born_slot_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->born_slot_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServantInfo)
  return target;
}

size_t ServantInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServantInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 master_entity_id = 1;
  if (this->master_entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->master_entity_id());
  }

  // uint32 born_slot_index = 2;
  if (this->born_slot_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->born_slot_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServantInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServantInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServantInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServantInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServantInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServantInfo)
    MergeFrom(*source);
  }
}

void ServantInfo::MergeFrom(const ServantInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServantInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.master_entity_id() != 0) {
    set_master_entity_id(from.master_entity_id());
  }
  if (from.born_slot_index() != 0) {
    set_born_slot_index(from.born_slot_index());
  }
}

void ServantInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServantInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServantInfo::CopyFrom(const ServantInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServantInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServantInfo::IsInitialized() const {
  return true;
}

void ServantInfo::Swap(ServantInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServantInfo::InternalSwap(ServantInfo* other) {
  using std::swap;
  swap(master_entity_id_, other->master_entity_id_);
  swap(born_slot_index_, other->born_slot_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServantInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServantInfo

// uint32 master_entity_id = 1;
void ServantInfo::clear_master_entity_id() {
  master_entity_id_ = 0u;
}
::google::protobuf::uint32 ServantInfo::master_entity_id() const {
  // @@protoc_insertion_point(field_get:proto.ServantInfo.master_entity_id)
  return master_entity_id_;
}
void ServantInfo::set_master_entity_id(::google::protobuf::uint32 value) {
  
  master_entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServantInfo.master_entity_id)
}

// uint32 born_slot_index = 2;
void ServantInfo::clear_born_slot_index() {
  born_slot_index_ = 0u;
}
::google::protobuf::uint32 ServantInfo::born_slot_index() const {
  // @@protoc_insertion_point(field_get:proto.ServantInfo.born_slot_index)
  return born_slot_index_;
}
void ServantInfo::set_born_slot_index(::google::protobuf::uint32 value) {
  
  born_slot_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ServantInfo.born_slot_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

SceneEntityAiInfo::SceneEntityAiInfo_SkillCdMapEntry::SceneEntityAiInfo_SkillCdMapEntry() {}
SceneEntityAiInfo::SceneEntityAiInfo_SkillCdMapEntry::SceneEntityAiInfo_SkillCdMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata SceneEntityAiInfo::SceneEntityAiInfo_SkillCdMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[106];
}
void SceneEntityAiInfo::SceneEntityAiInfo_SkillCdMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void SceneEntityAiInfo::SceneEntityAiInfo_SkillCdMapEntry::MergeFrom(const SceneEntityAiInfo_SkillCdMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

SceneEntityAiInfo::SceneEntityAiInfo_AiThreatMapEntry::SceneEntityAiInfo_AiThreatMapEntry() {}
SceneEntityAiInfo::SceneEntityAiInfo_AiThreatMapEntry::SceneEntityAiInfo_AiThreatMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata SceneEntityAiInfo::SceneEntityAiInfo_AiThreatMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[107];
}
void SceneEntityAiInfo::SceneEntityAiInfo_AiThreatMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void SceneEntityAiInfo::SceneEntityAiInfo_AiThreatMapEntry::MergeFrom(const SceneEntityAiInfo_AiThreatMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

SceneEntityAiInfo::SceneEntityAiInfo_SkillGroupCdMapEntry::SceneEntityAiInfo_SkillGroupCdMapEntry() {}
SceneEntityAiInfo::SceneEntityAiInfo_SkillGroupCdMapEntry::SceneEntityAiInfo_SkillGroupCdMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata SceneEntityAiInfo::SceneEntityAiInfo_SkillGroupCdMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[108];
}
void SceneEntityAiInfo::SceneEntityAiInfo_SkillGroupCdMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void SceneEntityAiInfo::SceneEntityAiInfo_SkillGroupCdMapEntry::MergeFrom(const SceneEntityAiInfo_SkillGroupCdMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneEntityAiInfo::kIsAiOpenFieldNumber;
const int SceneEntityAiInfo::kBornPosFieldNumber;
const int SceneEntityAiInfo::kSkillCdMapFieldNumber;
const int SceneEntityAiInfo::kServantInfoFieldNumber;
const int SceneEntityAiInfo::kAiThreatMapFieldNumber;
const int SceneEntityAiInfo::kSkillGroupCdMapFieldNumber;
const int SceneEntityAiInfo::kCurTacticFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneEntityAiInfo::SceneEntityAiInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneEntityAiInfo)
}
SceneEntityAiInfo::SceneEntityAiInfo(const SceneEntityAiInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  skill_cd_map_.MergeFrom(from.skill_cd_map_);
  ai_threat_map_.MergeFrom(from.ai_threat_map_);
  skill_group_cd_map_.MergeFrom(from.skill_group_cd_map_);
  if (from.has_born_pos()) {
    born_pos_ = new ::proto::Vector(*from.born_pos_);
  } else {
    born_pos_ = NULL;
  }
  if (from.has_servant_info()) {
    servant_info_ = new ::proto::ServantInfo(*from.servant_info_);
  } else {
    servant_info_ = NULL;
  }
  ::memcpy(&is_ai_open_, &from.is_ai_open_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_tactic_) -
    reinterpret_cast<char*>(&is_ai_open_)) + sizeof(cur_tactic_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneEntityAiInfo)
}

void SceneEntityAiInfo::SharedCtor() {
  ::memset(&born_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_tactic_) -
      reinterpret_cast<char*>(&born_pos_)) + sizeof(cur_tactic_));
  _cached_size_ = 0;
}

SceneEntityAiInfo::~SceneEntityAiInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneEntityAiInfo)
  SharedDtor();
}

void SceneEntityAiInfo::SharedDtor() {
  if (this != internal_default_instance()) delete born_pos_;
  if (this != internal_default_instance()) delete servant_info_;
}

void SceneEntityAiInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneEntityAiInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneEntityAiInfo& SceneEntityAiInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneEntityAiInfo* SceneEntityAiInfo::New(::google::protobuf::Arena* arena) const {
  SceneEntityAiInfo* n = new SceneEntityAiInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneEntityAiInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneEntityAiInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skill_cd_map_.Clear();
  ai_threat_map_.Clear();
  skill_group_cd_map_.Clear();
  if (GetArenaNoVirtual() == NULL && born_pos_ != NULL) {
    delete born_pos_;
  }
  born_pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && servant_info_ != NULL) {
    delete servant_info_;
  }
  servant_info_ = NULL;
  ::memset(&is_ai_open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_tactic_) -
      reinterpret_cast<char*>(&is_ai_open_)) + sizeof(cur_tactic_));
  _internal_metadata_.Clear();
}

bool SceneEntityAiInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneEntityAiInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_ai_open = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ai_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector born_pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_born_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> skill_cd_map = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          SceneEntityAiInfo_SkillCdMapEntry::Parser< ::google::protobuf::internal::MapField<
              SceneEntityAiInfo_SkillCdMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&skill_cd_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ServantInfo servant_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_servant_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> ai_threat_map = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          SceneEntityAiInfo_AiThreatMapEntry::Parser< ::google::protobuf::internal::MapField<
              SceneEntityAiInfo_AiThreatMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&ai_threat_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> skill_group_cd_map = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          SceneEntityAiInfo_SkillGroupCdMapEntry::Parser< ::google::protobuf::internal::MapField<
              SceneEntityAiInfo_SkillGroupCdMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&skill_group_cd_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_tactic = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_tactic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneEntityAiInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneEntityAiInfo)
  return false;
#undef DO_
}

void SceneEntityAiInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneEntityAiInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_ai_open = 1;
  if (this->is_ai_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_ai_open(), output);
  }

  // .proto.Vector born_pos = 2;
  if (this->has_born_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->born_pos_, output);
  }

  // map<uint32, uint32> skill_cd_map = 3;
  if (!this->skill_cd_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->skill_cd_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->skill_cd_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->skill_cd_map().begin();
          it != this->skill_cd_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneEntityAiInfo_SkillCdMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(skill_cd_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneEntityAiInfo_SkillCdMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->skill_cd_map().begin();
          it != this->skill_cd_map().end(); ++it) {
        entry.reset(skill_cd_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  // .proto.ServantInfo servant_info = 4;
  if (this->has_servant_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->servant_info_, output);
  }

  // map<uint32, uint32> ai_threat_map = 5;
  if (!this->ai_threat_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->ai_threat_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ai_threat_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->ai_threat_map().begin();
          it != this->ai_threat_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneEntityAiInfo_AiThreatMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ai_threat_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneEntityAiInfo_AiThreatMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->ai_threat_map().begin();
          it != this->ai_threat_map().end(); ++it) {
        entry.reset(ai_threat_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
      }
    }
  }

  // map<uint32, uint32> skill_group_cd_map = 6;
  if (!this->skill_group_cd_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->skill_group_cd_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->skill_group_cd_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->skill_group_cd_map().begin();
          it != this->skill_group_cd_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneEntityAiInfo_SkillGroupCdMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(skill_group_cd_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneEntityAiInfo_SkillGroupCdMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->skill_group_cd_map().begin();
          it != this->skill_group_cd_map().end(); ++it) {
        entry.reset(skill_group_cd_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
      }
    }
  }

  // uint32 cur_tactic = 7;
  if (this->cur_tactic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cur_tactic(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneEntityAiInfo)
}

::google::protobuf::uint8* SceneEntityAiInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneEntityAiInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_ai_open = 1;
  if (this->is_ai_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_ai_open(), target);
  }

  // .proto.Vector born_pos = 2;
  if (this->has_born_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->born_pos_, deterministic, target);
  }

  // map<uint32, uint32> skill_cd_map = 3;
  if (!this->skill_cd_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->skill_cd_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->skill_cd_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->skill_cd_map().begin();
          it != this->skill_cd_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneEntityAiInfo_SkillCdMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(skill_cd_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneEntityAiInfo_SkillCdMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->skill_cd_map().begin();
          it != this->skill_cd_map().end(); ++it) {
        entry.reset(skill_cd_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  // .proto.ServantInfo servant_info = 4;
  if (this->has_servant_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->servant_info_, deterministic, target);
  }

  // map<uint32, uint32> ai_threat_map = 5;
  if (!this->ai_threat_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->ai_threat_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ai_threat_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->ai_threat_map().begin();
          it != this->ai_threat_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneEntityAiInfo_AiThreatMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ai_threat_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneEntityAiInfo_AiThreatMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->ai_threat_map().begin();
          it != this->ai_threat_map().end(); ++it) {
        entry.reset(ai_threat_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
      }
    }
  }

  // map<uint32, uint32> skill_group_cd_map = 6;
  if (!this->skill_group_cd_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->skill_group_cd_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->skill_group_cd_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->skill_group_cd_map().begin();
          it != this->skill_group_cd_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneEntityAiInfo_SkillGroupCdMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(skill_group_cd_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneEntityAiInfo_SkillGroupCdMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->skill_group_cd_map().begin();
          it != this->skill_group_cd_map().end(); ++it) {
        entry.reset(skill_group_cd_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
      }
    }
  }

  // uint32 cur_tactic = 7;
  if (this->cur_tactic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cur_tactic(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneEntityAiInfo)
  return target;
}

size_t SceneEntityAiInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneEntityAiInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, uint32> skill_cd_map = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->skill_cd_map_size());
  {
    ::google::protobuf::scoped_ptr<SceneEntityAiInfo_SkillCdMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->skill_cd_map().begin();
        it != this->skill_cd_map().end(); ++it) {
      entry.reset(skill_cd_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint32, uint32> ai_threat_map = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ai_threat_map_size());
  {
    ::google::protobuf::scoped_ptr<SceneEntityAiInfo_AiThreatMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->ai_threat_map().begin();
        it != this->ai_threat_map().end(); ++it) {
      entry.reset(ai_threat_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint32, uint32> skill_group_cd_map = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->skill_group_cd_map_size());
  {
    ::google::protobuf::scoped_ptr<SceneEntityAiInfo_SkillGroupCdMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->skill_group_cd_map().begin();
        it != this->skill_group_cd_map().end(); ++it) {
      entry.reset(skill_group_cd_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .proto.Vector born_pos = 2;
  if (this->has_born_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->born_pos_);
  }

  // .proto.ServantInfo servant_info = 4;
  if (this->has_servant_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->servant_info_);
  }

  // bool is_ai_open = 1;
  if (this->is_ai_open() != 0) {
    total_size += 1 + 1;
  }

  // uint32 cur_tactic = 7;
  if (this->cur_tactic() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_tactic());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneEntityAiInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneEntityAiInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneEntityAiInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneEntityAiInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneEntityAiInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneEntityAiInfo)
    MergeFrom(*source);
  }
}

void SceneEntityAiInfo::MergeFrom(const SceneEntityAiInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneEntityAiInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skill_cd_map_.MergeFrom(from.skill_cd_map_);
  ai_threat_map_.MergeFrom(from.ai_threat_map_);
  skill_group_cd_map_.MergeFrom(from.skill_group_cd_map_);
  if (from.has_born_pos()) {
    mutable_born_pos()->::proto::Vector::MergeFrom(from.born_pos());
  }
  if (from.has_servant_info()) {
    mutable_servant_info()->::proto::ServantInfo::MergeFrom(from.servant_info());
  }
  if (from.is_ai_open() != 0) {
    set_is_ai_open(from.is_ai_open());
  }
  if (from.cur_tactic() != 0) {
    set_cur_tactic(from.cur_tactic());
  }
}

void SceneEntityAiInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneEntityAiInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneEntityAiInfo::CopyFrom(const SceneEntityAiInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneEntityAiInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEntityAiInfo::IsInitialized() const {
  return true;
}

void SceneEntityAiInfo::Swap(SceneEntityAiInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneEntityAiInfo::InternalSwap(SceneEntityAiInfo* other) {
  using std::swap;
  skill_cd_map_.Swap(&other->skill_cd_map_);
  ai_threat_map_.Swap(&other->ai_threat_map_);
  skill_group_cd_map_.Swap(&other->skill_group_cd_map_);
  swap(born_pos_, other->born_pos_);
  swap(servant_info_, other->servant_info_);
  swap(is_ai_open_, other->is_ai_open_);
  swap(cur_tactic_, other->cur_tactic_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneEntityAiInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneEntityAiInfo

// bool is_ai_open = 1;
void SceneEntityAiInfo::clear_is_ai_open() {
  is_ai_open_ = false;
}
bool SceneEntityAiInfo::is_ai_open() const {
  // @@protoc_insertion_point(field_get:proto.SceneEntityAiInfo.is_ai_open)
  return is_ai_open_;
}
void SceneEntityAiInfo::set_is_ai_open(bool value) {
  
  is_ai_open_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneEntityAiInfo.is_ai_open)
}

// .proto.Vector born_pos = 2;
bool SceneEntityAiInfo::has_born_pos() const {
  return this != internal_default_instance() && born_pos_ != NULL;
}
void SceneEntityAiInfo::clear_born_pos() {
  if (GetArenaNoVirtual() == NULL && born_pos_ != NULL) delete born_pos_;
  born_pos_ = NULL;
}
const ::proto::Vector& SceneEntityAiInfo::born_pos() const {
  const ::proto::Vector* p = born_pos_;
  // @@protoc_insertion_point(field_get:proto.SceneEntityAiInfo.born_pos)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* SceneEntityAiInfo::mutable_born_pos() {
  
  if (born_pos_ == NULL) {
    born_pos_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneEntityAiInfo.born_pos)
  return born_pos_;
}
::proto::Vector* SceneEntityAiInfo::release_born_pos() {
  // @@protoc_insertion_point(field_release:proto.SceneEntityAiInfo.born_pos)
  
  ::proto::Vector* temp = born_pos_;
  born_pos_ = NULL;
  return temp;
}
void SceneEntityAiInfo::set_allocated_born_pos(::proto::Vector* born_pos) {
  delete born_pos_;
  born_pos_ = born_pos;
  if (born_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneEntityAiInfo.born_pos)
}

// map<uint32, uint32> skill_cd_map = 3;
int SceneEntityAiInfo::skill_cd_map_size() const {
  return skill_cd_map_.size();
}
void SceneEntityAiInfo::clear_skill_cd_map() {
  skill_cd_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
SceneEntityAiInfo::skill_cd_map() const {
  // @@protoc_insertion_point(field_map:proto.SceneEntityAiInfo.skill_cd_map)
  return skill_cd_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
SceneEntityAiInfo::mutable_skill_cd_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.SceneEntityAiInfo.skill_cd_map)
  return skill_cd_map_.MutableMap();
}

// .proto.ServantInfo servant_info = 4;
bool SceneEntityAiInfo::has_servant_info() const {
  return this != internal_default_instance() && servant_info_ != NULL;
}
void SceneEntityAiInfo::clear_servant_info() {
  if (GetArenaNoVirtual() == NULL && servant_info_ != NULL) delete servant_info_;
  servant_info_ = NULL;
}
const ::proto::ServantInfo& SceneEntityAiInfo::servant_info() const {
  const ::proto::ServantInfo* p = servant_info_;
  // @@protoc_insertion_point(field_get:proto.SceneEntityAiInfo.servant_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ServantInfo*>(
      &::proto::_ServantInfo_default_instance_);
}
::proto::ServantInfo* SceneEntityAiInfo::mutable_servant_info() {
  
  if (servant_info_ == NULL) {
    servant_info_ = new ::proto::ServantInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneEntityAiInfo.servant_info)
  return servant_info_;
}
::proto::ServantInfo* SceneEntityAiInfo::release_servant_info() {
  // @@protoc_insertion_point(field_release:proto.SceneEntityAiInfo.servant_info)
  
  ::proto::ServantInfo* temp = servant_info_;
  servant_info_ = NULL;
  return temp;
}
void SceneEntityAiInfo::set_allocated_servant_info(::proto::ServantInfo* servant_info) {
  delete servant_info_;
  servant_info_ = servant_info;
  if (servant_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneEntityAiInfo.servant_info)
}

// map<uint32, uint32> ai_threat_map = 5;
int SceneEntityAiInfo::ai_threat_map_size() const {
  return ai_threat_map_.size();
}
void SceneEntityAiInfo::clear_ai_threat_map() {
  ai_threat_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
SceneEntityAiInfo::ai_threat_map() const {
  // @@protoc_insertion_point(field_map:proto.SceneEntityAiInfo.ai_threat_map)
  return ai_threat_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
SceneEntityAiInfo::mutable_ai_threat_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.SceneEntityAiInfo.ai_threat_map)
  return ai_threat_map_.MutableMap();
}

// map<uint32, uint32> skill_group_cd_map = 6;
int SceneEntityAiInfo::skill_group_cd_map_size() const {
  return skill_group_cd_map_.size();
}
void SceneEntityAiInfo::clear_skill_group_cd_map() {
  skill_group_cd_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
SceneEntityAiInfo::skill_group_cd_map() const {
  // @@protoc_insertion_point(field_map:proto.SceneEntityAiInfo.skill_group_cd_map)
  return skill_group_cd_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
SceneEntityAiInfo::mutable_skill_group_cd_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.SceneEntityAiInfo.skill_group_cd_map)
  return skill_group_cd_map_.MutableMap();
}

// uint32 cur_tactic = 7;
void SceneEntityAiInfo::clear_cur_tactic() {
  cur_tactic_ = 0u;
}
::google::protobuf::uint32 SceneEntityAiInfo::cur_tactic() const {
  // @@protoc_insertion_point(field_get:proto.SceneEntityAiInfo.cur_tactic)
  return cur_tactic_;
}
void SceneEntityAiInfo::set_cur_tactic(::google::protobuf::uint32 value) {
  
  cur_tactic_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneEntityAiInfo.cur_tactic)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

EntityRendererChangedInfo::EntityRendererChangedInfo_ChangedRenderersEntry::EntityRendererChangedInfo_ChangedRenderersEntry() {}
EntityRendererChangedInfo::EntityRendererChangedInfo_ChangedRenderersEntry::EntityRendererChangedInfo_ChangedRenderersEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata EntityRendererChangedInfo::EntityRendererChangedInfo_ChangedRenderersEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[110];
}
void EntityRendererChangedInfo::EntityRendererChangedInfo_ChangedRenderersEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void EntityRendererChangedInfo::EntityRendererChangedInfo_ChangedRenderersEntry::MergeFrom(const EntityRendererChangedInfo_ChangedRenderersEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityRendererChangedInfo::kChangedRenderersFieldNumber;
const int EntityRendererChangedInfo::kVisibilityCountFieldNumber;
const int EntityRendererChangedInfo::kIsCachedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityRendererChangedInfo::EntityRendererChangedInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.EntityRendererChangedInfo)
}
EntityRendererChangedInfo::EntityRendererChangedInfo(const EntityRendererChangedInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  changed_renderers_.MergeFrom(from.changed_renderers_);
  ::memcpy(&visibility_count_, &from.visibility_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_cached_) -
    reinterpret_cast<char*>(&visibility_count_)) + sizeof(is_cached_));
  // @@protoc_insertion_point(copy_constructor:proto.EntityRendererChangedInfo)
}

void EntityRendererChangedInfo::SharedCtor() {
  ::memset(&visibility_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_cached_) -
      reinterpret_cast<char*>(&visibility_count_)) + sizeof(is_cached_));
  _cached_size_ = 0;
}

EntityRendererChangedInfo::~EntityRendererChangedInfo() {
  // @@protoc_insertion_point(destructor:proto.EntityRendererChangedInfo)
  SharedDtor();
}

void EntityRendererChangedInfo::SharedDtor() {
}

void EntityRendererChangedInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityRendererChangedInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityRendererChangedInfo& EntityRendererChangedInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

EntityRendererChangedInfo* EntityRendererChangedInfo::New(::google::protobuf::Arena* arena) const {
  EntityRendererChangedInfo* n = new EntityRendererChangedInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityRendererChangedInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EntityRendererChangedInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  changed_renderers_.Clear();
  ::memset(&visibility_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_cached_) -
      reinterpret_cast<char*>(&visibility_count_)) + sizeof(is_cached_));
  _internal_metadata_.Clear();
}

bool EntityRendererChangedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.EntityRendererChangedInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, uint32> changed_renderers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          EntityRendererChangedInfo_ChangedRenderersEntry::Parser< ::google::protobuf::internal::MapField<
              EntityRendererChangedInfo_ChangedRenderersEntry,
              ::std::string, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 > > parser(&changed_renderers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.EntityRendererChangedInfo.ChangedRenderersEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 visibility_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visibility_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_cached = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_cached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.EntityRendererChangedInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.EntityRendererChangedInfo)
  return false;
#undef DO_
}

void EntityRendererChangedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.EntityRendererChangedInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, uint32> changed_renderers = 1;
  if (!this->changed_renderers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "proto.EntityRendererChangedInfo.ChangedRenderersEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->changed_renderers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->changed_renderers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_iterator
          it = this->changed_renderers().begin();
          it != this->changed_renderers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<EntityRendererChangedInfo_ChangedRenderersEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(changed_renderers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<EntityRendererChangedInfo_ChangedRenderersEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_iterator
          it = this->changed_renderers().begin();
          it != this->changed_renderers().end(); ++it) {
        entry.reset(changed_renderers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // uint32 visibility_count = 2;
  if (this->visibility_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->visibility_count(), output);
  }

  // bool is_cached = 3;
  if (this->is_cached() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_cached(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.EntityRendererChangedInfo)
}

::google::protobuf::uint8* EntityRendererChangedInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.EntityRendererChangedInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, uint32> changed_renderers = 1;
  if (!this->changed_renderers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "proto.EntityRendererChangedInfo.ChangedRenderersEntry.key");
      }
    };

    if (deterministic &&
        this->changed_renderers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->changed_renderers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_iterator
          it = this->changed_renderers().begin();
          it != this->changed_renderers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<EntityRendererChangedInfo_ChangedRenderersEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(changed_renderers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<EntityRendererChangedInfo_ChangedRenderersEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_iterator
          it = this->changed_renderers().begin();
          it != this->changed_renderers().end(); ++it) {
        entry.reset(changed_renderers_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // uint32 visibility_count = 2;
  if (this->visibility_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->visibility_count(), target);
  }

  // bool is_cached = 3;
  if (this->is_cached() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_cached(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EntityRendererChangedInfo)
  return target;
}

size_t EntityRendererChangedInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EntityRendererChangedInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, uint32> changed_renderers = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->changed_renderers_size());
  {
    ::google::protobuf::scoped_ptr<EntityRendererChangedInfo_ChangedRenderersEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_iterator
        it = this->changed_renderers().begin();
        it != this->changed_renderers().end(); ++it) {
      entry.reset(changed_renderers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 visibility_count = 2;
  if (this->visibility_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->visibility_count());
  }

  // bool is_cached = 3;
  if (this->is_cached() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityRendererChangedInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.EntityRendererChangedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityRendererChangedInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityRendererChangedInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.EntityRendererChangedInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.EntityRendererChangedInfo)
    MergeFrom(*source);
  }
}

void EntityRendererChangedInfo::MergeFrom(const EntityRendererChangedInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.EntityRendererChangedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  changed_renderers_.MergeFrom(from.changed_renderers_);
  if (from.visibility_count() != 0) {
    set_visibility_count(from.visibility_count());
  }
  if (from.is_cached() != 0) {
    set_is_cached(from.is_cached());
  }
}

void EntityRendererChangedInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.EntityRendererChangedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityRendererChangedInfo::CopyFrom(const EntityRendererChangedInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EntityRendererChangedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityRendererChangedInfo::IsInitialized() const {
  return true;
}

void EntityRendererChangedInfo::Swap(EntityRendererChangedInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityRendererChangedInfo::InternalSwap(EntityRendererChangedInfo* other) {
  using std::swap;
  changed_renderers_.Swap(&other->changed_renderers_);
  swap(visibility_count_, other->visibility_count_);
  swap(is_cached_, other->is_cached_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityRendererChangedInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EntityRendererChangedInfo

// map<string, uint32> changed_renderers = 1;
int EntityRendererChangedInfo::changed_renderers_size() const {
  return changed_renderers_.size();
}
void EntityRendererChangedInfo::clear_changed_renderers() {
  changed_renderers_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >&
EntityRendererChangedInfo::changed_renderers() const {
  // @@protoc_insertion_point(field_map:proto.EntityRendererChangedInfo.changed_renderers)
  return changed_renderers_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >*
EntityRendererChangedInfo::mutable_changed_renderers() {
  // @@protoc_insertion_point(field_mutable_map:proto.EntityRendererChangedInfo.changed_renderers)
  return changed_renderers_.MutableMap();
}

// uint32 visibility_count = 2;
void EntityRendererChangedInfo::clear_visibility_count() {
  visibility_count_ = 0u;
}
::google::protobuf::uint32 EntityRendererChangedInfo::visibility_count() const {
  // @@protoc_insertion_point(field_get:proto.EntityRendererChangedInfo.visibility_count)
  return visibility_count_;
}
void EntityRendererChangedInfo::set_visibility_count(::google::protobuf::uint32 value) {
  
  visibility_count_ = value;
  // @@protoc_insertion_point(field_set:proto.EntityRendererChangedInfo.visibility_count)
}

// bool is_cached = 3;
void EntityRendererChangedInfo::clear_is_cached() {
  is_cached_ = false;
}
bool EntityRendererChangedInfo::is_cached() const {
  // @@protoc_insertion_point(field_get:proto.EntityRendererChangedInfo.is_cached)
  return is_cached_;
}
void EntityRendererChangedInfo::set_is_cached(bool value) {
  
  is_cached_ = value;
  // @@protoc_insertion_point(field_set:proto.EntityRendererChangedInfo.is_cached)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropPair::kTypeFieldNumber;
const int PropPair::kPropValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropPair::PropPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PropPair)
}
PropPair::PropPair(const PropPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_prop_value()) {
    prop_value_ = new ::proto::PropValue(*from.prop_value_);
  } else {
    prop_value_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:proto.PropPair)
}

void PropPair::SharedCtor() {
  ::memset(&prop_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&prop_value_)) + sizeof(type_));
  _cached_size_ = 0;
}

PropPair::~PropPair() {
  // @@protoc_insertion_point(destructor:proto.PropPair)
  SharedDtor();
}

void PropPair::SharedDtor() {
  if (this != internal_default_instance()) delete prop_value_;
}

void PropPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropPair::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PropPair& PropPair::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

PropPair* PropPair::New(::google::protobuf::Arena* arena) const {
  PropPair* n = new PropPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropPair::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PropPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && prop_value_ != NULL) {
    delete prop_value_;
  }
  prop_value_ = NULL;
  type_ = 0u;
  _internal_metadata_.Clear();
}

bool PropPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PropPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.PropValue prop_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prop_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PropPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PropPair)
  return false;
#undef DO_
}

void PropPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PropPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // .proto.PropValue prop_value = 2;
  if (this->has_prop_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->prop_value_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PropPair)
}

::google::protobuf::uint8* PropPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PropPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // .proto.PropValue prop_value = 2;
  if (this->has_prop_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->prop_value_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PropPair)
  return target;
}

size_t PropPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PropPair)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.PropValue prop_value = 2;
  if (this->has_prop_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->prop_value_);
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PropPair)
  GOOGLE_DCHECK_NE(&from, this);
  const PropPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PropPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PropPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PropPair)
    MergeFrom(*source);
  }
}

void PropPair::MergeFrom(const PropPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PropPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_prop_value()) {
    mutable_prop_value()->::proto::PropValue::MergeFrom(from.prop_value());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void PropPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PropPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropPair::CopyFrom(const PropPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PropPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropPair::IsInitialized() const {
  return true;
}

void PropPair::Swap(PropPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropPair::InternalSwap(PropPair* other) {
  using std::swap;
  swap(prop_value_, other->prop_value_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PropPair::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PropPair

// uint32 type = 1;
void PropPair::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 PropPair::type() const {
  // @@protoc_insertion_point(field_get:proto.PropPair.type)
  return type_;
}
void PropPair::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.PropPair.type)
}

// .proto.PropValue prop_value = 2;
bool PropPair::has_prop_value() const {
  return this != internal_default_instance() && prop_value_ != NULL;
}
void PropPair::clear_prop_value() {
  if (GetArenaNoVirtual() == NULL && prop_value_ != NULL) delete prop_value_;
  prop_value_ = NULL;
}
const ::proto::PropValue& PropPair::prop_value() const {
  const ::proto::PropValue* p = prop_value_;
  // @@protoc_insertion_point(field_get:proto.PropPair.prop_value)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::PropValue*>(
      &::proto::_PropValue_default_instance_);
}
::proto::PropValue* PropPair::mutable_prop_value() {
  
  if (prop_value_ == NULL) {
    prop_value_ = new ::proto::PropValue;
  }
  // @@protoc_insertion_point(field_mutable:proto.PropPair.prop_value)
  return prop_value_;
}
::proto::PropValue* PropPair::release_prop_value() {
  // @@protoc_insertion_point(field_release:proto.PropPair.prop_value)
  
  ::proto::PropValue* temp = prop_value_;
  prop_value_ = NULL;
  return temp;
}
void PropPair::set_allocated_prop_value(::proto::PropValue* prop_value) {
  delete prop_value_;
  prop_value_ = prop_value;
  if (prop_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.PropPair.prop_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightPropPair::kPropTypeFieldNumber;
const int FightPropPair::kPropValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightPropPair::FightPropPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FightPropPair)
}
FightPropPair::FightPropPair(const FightPropPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&prop_type_, &from.prop_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&prop_value_) -
    reinterpret_cast<char*>(&prop_type_)) + sizeof(prop_value_));
  // @@protoc_insertion_point(copy_constructor:proto.FightPropPair)
}

void FightPropPair::SharedCtor() {
  ::memset(&prop_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prop_value_) -
      reinterpret_cast<char*>(&prop_type_)) + sizeof(prop_value_));
  _cached_size_ = 0;
}

FightPropPair::~FightPropPair() {
  // @@protoc_insertion_point(destructor:proto.FightPropPair)
  SharedDtor();
}

void FightPropPair::SharedDtor() {
}

void FightPropPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightPropPair::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightPropPair& FightPropPair::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightPropPair* FightPropPair::New(::google::protobuf::Arena* arena) const {
  FightPropPair* n = new FightPropPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightPropPair::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FightPropPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&prop_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prop_value_) -
      reinterpret_cast<char*>(&prop_type_)) + sizeof(prop_value_));
  _internal_metadata_.Clear();
}

bool FightPropPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FightPropPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 prop_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prop_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float prop_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prop_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FightPropPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FightPropPair)
  return false;
#undef DO_
}

void FightPropPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FightPropPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 prop_type = 1;
  if (this->prop_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prop_type(), output);
  }

  // float prop_value = 2;
  if (this->prop_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->prop_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.FightPropPair)
}

::google::protobuf::uint8* FightPropPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.FightPropPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 prop_type = 1;
  if (this->prop_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prop_type(), target);
  }

  // float prop_value = 2;
  if (this->prop_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->prop_value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FightPropPair)
  return target;
}

size_t FightPropPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FightPropPair)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 prop_type = 1;
  if (this->prop_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prop_type());
  }

  // float prop_value = 2;
  if (this->prop_value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightPropPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FightPropPair)
  GOOGLE_DCHECK_NE(&from, this);
  const FightPropPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightPropPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FightPropPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FightPropPair)
    MergeFrom(*source);
  }
}

void FightPropPair::MergeFrom(const FightPropPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FightPropPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prop_type() != 0) {
    set_prop_type(from.prop_type());
  }
  if (from.prop_value() != 0) {
    set_prop_value(from.prop_value());
  }
}

void FightPropPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FightPropPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightPropPair::CopyFrom(const FightPropPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FightPropPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightPropPair::IsInitialized() const {
  return true;
}

void FightPropPair::Swap(FightPropPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightPropPair::InternalSwap(FightPropPair* other) {
  using std::swap;
  swap(prop_type_, other->prop_type_);
  swap(prop_value_, other->prop_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightPropPair::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightPropPair

// uint32 prop_type = 1;
void FightPropPair::clear_prop_type() {
  prop_type_ = 0u;
}
::google::protobuf::uint32 FightPropPair::prop_type() const {
  // @@protoc_insertion_point(field_get:proto.FightPropPair.prop_type)
  return prop_type_;
}
void FightPropPair::set_prop_type(::google::protobuf::uint32 value) {
  
  prop_type_ = value;
  // @@protoc_insertion_point(field_set:proto.FightPropPair.prop_type)
}

// float prop_value = 2;
void FightPropPair::clear_prop_value() {
  prop_value_ = 0;
}
float FightPropPair::prop_value() const {
  // @@protoc_insertion_point(field_get:proto.FightPropPair.prop_value)
  return prop_value_;
}
void FightPropPair::set_prop_value(float value) {
  
  prop_value_ = value;
  // @@protoc_insertion_point(field_set:proto.FightPropPair.prop_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnimatorParameterValueInfoPair::kNameIdFieldNumber;
const int AnimatorParameterValueInfoPair::kAnimatorParaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnimatorParameterValueInfoPair::AnimatorParameterValueInfoPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AnimatorParameterValueInfoPair)
}
AnimatorParameterValueInfoPair::AnimatorParameterValueInfoPair(const AnimatorParameterValueInfoPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_animator_para()) {
    animator_para_ = new ::proto::AnimatorParameterValueInfo(*from.animator_para_);
  } else {
    animator_para_ = NULL;
  }
  name_id_ = from.name_id_;
  // @@protoc_insertion_point(copy_constructor:proto.AnimatorParameterValueInfoPair)
}

void AnimatorParameterValueInfoPair::SharedCtor() {
  ::memset(&animator_para_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&name_id_) -
      reinterpret_cast<char*>(&animator_para_)) + sizeof(name_id_));
  _cached_size_ = 0;
}

AnimatorParameterValueInfoPair::~AnimatorParameterValueInfoPair() {
  // @@protoc_insertion_point(destructor:proto.AnimatorParameterValueInfoPair)
  SharedDtor();
}

void AnimatorParameterValueInfoPair::SharedDtor() {
  if (this != internal_default_instance()) delete animator_para_;
}

void AnimatorParameterValueInfoPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnimatorParameterValueInfoPair::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnimatorParameterValueInfoPair& AnimatorParameterValueInfoPair::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnimatorParameterValueInfoPair* AnimatorParameterValueInfoPair::New(::google::protobuf::Arena* arena) const {
  AnimatorParameterValueInfoPair* n = new AnimatorParameterValueInfoPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnimatorParameterValueInfoPair::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AnimatorParameterValueInfoPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && animator_para_ != NULL) {
    delete animator_para_;
  }
  animator_para_ = NULL;
  name_id_ = 0;
  _internal_metadata_.Clear();
}

bool AnimatorParameterValueInfoPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AnimatorParameterValueInfoPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 name_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AnimatorParameterValueInfo animator_para = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_animator_para()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AnimatorParameterValueInfoPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AnimatorParameterValueInfoPair)
  return false;
#undef DO_
}

void AnimatorParameterValueInfoPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AnimatorParameterValueInfoPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 name_id = 1;
  if (this->name_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->name_id(), output);
  }

  // .proto.AnimatorParameterValueInfo animator_para = 2;
  if (this->has_animator_para()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->animator_para_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AnimatorParameterValueInfoPair)
}

::google::protobuf::uint8* AnimatorParameterValueInfoPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AnimatorParameterValueInfoPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 name_id = 1;
  if (this->name_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->name_id(), target);
  }

  // .proto.AnimatorParameterValueInfo animator_para = 2;
  if (this->has_animator_para()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->animator_para_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AnimatorParameterValueInfoPair)
  return target;
}

size_t AnimatorParameterValueInfoPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AnimatorParameterValueInfoPair)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.AnimatorParameterValueInfo animator_para = 2;
  if (this->has_animator_para()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->animator_para_);
  }

  // int32 name_id = 1;
  if (this->name_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->name_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnimatorParameterValueInfoPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AnimatorParameterValueInfoPair)
  GOOGLE_DCHECK_NE(&from, this);
  const AnimatorParameterValueInfoPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnimatorParameterValueInfoPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AnimatorParameterValueInfoPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AnimatorParameterValueInfoPair)
    MergeFrom(*source);
  }
}

void AnimatorParameterValueInfoPair::MergeFrom(const AnimatorParameterValueInfoPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AnimatorParameterValueInfoPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_animator_para()) {
    mutable_animator_para()->::proto::AnimatorParameterValueInfo::MergeFrom(from.animator_para());
  }
  if (from.name_id() != 0) {
    set_name_id(from.name_id());
  }
}

void AnimatorParameterValueInfoPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AnimatorParameterValueInfoPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimatorParameterValueInfoPair::CopyFrom(const AnimatorParameterValueInfoPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AnimatorParameterValueInfoPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimatorParameterValueInfoPair::IsInitialized() const {
  return true;
}

void AnimatorParameterValueInfoPair::Swap(AnimatorParameterValueInfoPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnimatorParameterValueInfoPair::InternalSwap(AnimatorParameterValueInfoPair* other) {
  using std::swap;
  swap(animator_para_, other->animator_para_);
  swap(name_id_, other->name_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnimatorParameterValueInfoPair::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnimatorParameterValueInfoPair

// int32 name_id = 1;
void AnimatorParameterValueInfoPair::clear_name_id() {
  name_id_ = 0;
}
::google::protobuf::int32 AnimatorParameterValueInfoPair::name_id() const {
  // @@protoc_insertion_point(field_get:proto.AnimatorParameterValueInfoPair.name_id)
  return name_id_;
}
void AnimatorParameterValueInfoPair::set_name_id(::google::protobuf::int32 value) {
  
  name_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AnimatorParameterValueInfoPair.name_id)
}

// .proto.AnimatorParameterValueInfo animator_para = 2;
bool AnimatorParameterValueInfoPair::has_animator_para() const {
  return this != internal_default_instance() && animator_para_ != NULL;
}
void AnimatorParameterValueInfoPair::clear_animator_para() {
  if (GetArenaNoVirtual() == NULL && animator_para_ != NULL) delete animator_para_;
  animator_para_ = NULL;
}
const ::proto::AnimatorParameterValueInfo& AnimatorParameterValueInfoPair::animator_para() const {
  const ::proto::AnimatorParameterValueInfo* p = animator_para_;
  // @@protoc_insertion_point(field_get:proto.AnimatorParameterValueInfoPair.animator_para)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::AnimatorParameterValueInfo*>(
      &::proto::_AnimatorParameterValueInfo_default_instance_);
}
::proto::AnimatorParameterValueInfo* AnimatorParameterValueInfoPair::mutable_animator_para() {
  
  if (animator_para_ == NULL) {
    animator_para_ = new ::proto::AnimatorParameterValueInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.AnimatorParameterValueInfoPair.animator_para)
  return animator_para_;
}
::proto::AnimatorParameterValueInfo* AnimatorParameterValueInfoPair::release_animator_para() {
  // @@protoc_insertion_point(field_release:proto.AnimatorParameterValueInfoPair.animator_para)
  
  ::proto::AnimatorParameterValueInfo* temp = animator_para_;
  animator_para_ = NULL;
  return temp;
}
void AnimatorParameterValueInfoPair::set_allocated_animator_para(::proto::AnimatorParameterValueInfo* animator_para) {
  delete animator_para_;
  animator_para_ = animator_para;
  if (animator_para) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AnimatorParameterValueInfoPair.animator_para)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityEnvironmentInfo::kJsonClimateTypeFieldNumber;
const int EntityEnvironmentInfo::kClimateAreaIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityEnvironmentInfo::EntityEnvironmentInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.EntityEnvironmentInfo)
}
EntityEnvironmentInfo::EntityEnvironmentInfo(const EntityEnvironmentInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&json_climate_type_, &from.json_climate_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&climate_area_id_) -
    reinterpret_cast<char*>(&json_climate_type_)) + sizeof(climate_area_id_));
  // @@protoc_insertion_point(copy_constructor:proto.EntityEnvironmentInfo)
}

void EntityEnvironmentInfo::SharedCtor() {
  ::memset(&json_climate_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&climate_area_id_) -
      reinterpret_cast<char*>(&json_climate_type_)) + sizeof(climate_area_id_));
  _cached_size_ = 0;
}

EntityEnvironmentInfo::~EntityEnvironmentInfo() {
  // @@protoc_insertion_point(destructor:proto.EntityEnvironmentInfo)
  SharedDtor();
}

void EntityEnvironmentInfo::SharedDtor() {
}

void EntityEnvironmentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityEnvironmentInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityEnvironmentInfo& EntityEnvironmentInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

EntityEnvironmentInfo* EntityEnvironmentInfo::New(::google::protobuf::Arena* arena) const {
  EntityEnvironmentInfo* n = new EntityEnvironmentInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityEnvironmentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EntityEnvironmentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&json_climate_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&climate_area_id_) -
      reinterpret_cast<char*>(&json_climate_type_)) + sizeof(climate_area_id_));
  _internal_metadata_.Clear();
}

bool EntityEnvironmentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.EntityEnvironmentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 json_climate_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &json_climate_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 climate_area_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &climate_area_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.EntityEnvironmentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.EntityEnvironmentInfo)
  return false;
#undef DO_
}

void EntityEnvironmentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.EntityEnvironmentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 json_climate_type = 1;
  if (this->json_climate_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->json_climate_type(), output);
  }

  // uint32 climate_area_id = 2;
  if (this->climate_area_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->climate_area_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.EntityEnvironmentInfo)
}

::google::protobuf::uint8* EntityEnvironmentInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.EntityEnvironmentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 json_climate_type = 1;
  if (this->json_climate_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->json_climate_type(), target);
  }

  // uint32 climate_area_id = 2;
  if (this->climate_area_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->climate_area_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EntityEnvironmentInfo)
  return target;
}

size_t EntityEnvironmentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EntityEnvironmentInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 json_climate_type = 1;
  if (this->json_climate_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->json_climate_type());
  }

  // uint32 climate_area_id = 2;
  if (this->climate_area_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->climate_area_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityEnvironmentInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.EntityEnvironmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityEnvironmentInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityEnvironmentInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.EntityEnvironmentInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.EntityEnvironmentInfo)
    MergeFrom(*source);
  }
}

void EntityEnvironmentInfo::MergeFrom(const EntityEnvironmentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.EntityEnvironmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.json_climate_type() != 0) {
    set_json_climate_type(from.json_climate_type());
  }
  if (from.climate_area_id() != 0) {
    set_climate_area_id(from.climate_area_id());
  }
}

void EntityEnvironmentInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.EntityEnvironmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityEnvironmentInfo::CopyFrom(const EntityEnvironmentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EntityEnvironmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityEnvironmentInfo::IsInitialized() const {
  return true;
}

void EntityEnvironmentInfo::Swap(EntityEnvironmentInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityEnvironmentInfo::InternalSwap(EntityEnvironmentInfo* other) {
  using std::swap;
  swap(json_climate_type_, other->json_climate_type_);
  swap(climate_area_id_, other->climate_area_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityEnvironmentInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EntityEnvironmentInfo

// uint32 json_climate_type = 1;
void EntityEnvironmentInfo::clear_json_climate_type() {
  json_climate_type_ = 0u;
}
::google::protobuf::uint32 EntityEnvironmentInfo::json_climate_type() const {
  // @@protoc_insertion_point(field_get:proto.EntityEnvironmentInfo.json_climate_type)
  return json_climate_type_;
}
void EntityEnvironmentInfo::set_json_climate_type(::google::protobuf::uint32 value) {
  
  json_climate_type_ = value;
  // @@protoc_insertion_point(field_set:proto.EntityEnvironmentInfo.json_climate_type)
}

// uint32 climate_area_id = 2;
void EntityEnvironmentInfo::clear_climate_area_id() {
  climate_area_id_ = 0u;
}
::google::protobuf::uint32 EntityEnvironmentInfo::climate_area_id() const {
  // @@protoc_insertion_point(field_get:proto.EntityEnvironmentInfo.climate_area_id)
  return climate_area_id_;
}
void EntityEnvironmentInfo::set_climate_area_id(::google::protobuf::uint32 value) {
  
  climate_area_id_ = value;
  // @@protoc_insertion_point(field_set:proto.EntityEnvironmentInfo.climate_area_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityClientExtraInfo::kSkillAnchorPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityClientExtraInfo::EntityClientExtraInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.EntityClientExtraInfo)
}
EntityClientExtraInfo::EntityClientExtraInfo(const EntityClientExtraInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_skill_anchor_position()) {
    skill_anchor_position_ = new ::proto::Vector(*from.skill_anchor_position_);
  } else {
    skill_anchor_position_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.EntityClientExtraInfo)
}

void EntityClientExtraInfo::SharedCtor() {
  skill_anchor_position_ = NULL;
  _cached_size_ = 0;
}

EntityClientExtraInfo::~EntityClientExtraInfo() {
  // @@protoc_insertion_point(destructor:proto.EntityClientExtraInfo)
  SharedDtor();
}

void EntityClientExtraInfo::SharedDtor() {
  if (this != internal_default_instance()) delete skill_anchor_position_;
}

void EntityClientExtraInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityClientExtraInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityClientExtraInfo& EntityClientExtraInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

EntityClientExtraInfo* EntityClientExtraInfo::New(::google::protobuf::Arena* arena) const {
  EntityClientExtraInfo* n = new EntityClientExtraInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityClientExtraInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EntityClientExtraInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && skill_anchor_position_ != NULL) {
    delete skill_anchor_position_;
  }
  skill_anchor_position_ = NULL;
  _internal_metadata_.Clear();
}

bool EntityClientExtraInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.EntityClientExtraInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.Vector skill_anchor_position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_anchor_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.EntityClientExtraInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.EntityClientExtraInfo)
  return false;
#undef DO_
}

void EntityClientExtraInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.EntityClientExtraInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Vector skill_anchor_position = 1;
  if (this->has_skill_anchor_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->skill_anchor_position_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.EntityClientExtraInfo)
}

::google::protobuf::uint8* EntityClientExtraInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.EntityClientExtraInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Vector skill_anchor_position = 1;
  if (this->has_skill_anchor_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->skill_anchor_position_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EntityClientExtraInfo)
  return target;
}

size_t EntityClientExtraInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EntityClientExtraInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.Vector skill_anchor_position = 1;
  if (this->has_skill_anchor_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->skill_anchor_position_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityClientExtraInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.EntityClientExtraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityClientExtraInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityClientExtraInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.EntityClientExtraInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.EntityClientExtraInfo)
    MergeFrom(*source);
  }
}

void EntityClientExtraInfo::MergeFrom(const EntityClientExtraInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.EntityClientExtraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_skill_anchor_position()) {
    mutable_skill_anchor_position()->::proto::Vector::MergeFrom(from.skill_anchor_position());
  }
}

void EntityClientExtraInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.EntityClientExtraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityClientExtraInfo::CopyFrom(const EntityClientExtraInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EntityClientExtraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityClientExtraInfo::IsInitialized() const {
  return true;
}

void EntityClientExtraInfo::Swap(EntityClientExtraInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityClientExtraInfo::InternalSwap(EntityClientExtraInfo* other) {
  using std::swap;
  swap(skill_anchor_position_, other->skill_anchor_position_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityClientExtraInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EntityClientExtraInfo

// .proto.Vector skill_anchor_position = 1;
bool EntityClientExtraInfo::has_skill_anchor_position() const {
  return this != internal_default_instance() && skill_anchor_position_ != NULL;
}
void EntityClientExtraInfo::clear_skill_anchor_position() {
  if (GetArenaNoVirtual() == NULL && skill_anchor_position_ != NULL) delete skill_anchor_position_;
  skill_anchor_position_ = NULL;
}
const ::proto::Vector& EntityClientExtraInfo::skill_anchor_position() const {
  const ::proto::Vector* p = skill_anchor_position_;
  // @@protoc_insertion_point(field_get:proto.EntityClientExtraInfo.skill_anchor_position)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* EntityClientExtraInfo::mutable_skill_anchor_position() {
  
  if (skill_anchor_position_ == NULL) {
    skill_anchor_position_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.EntityClientExtraInfo.skill_anchor_position)
  return skill_anchor_position_;
}
::proto::Vector* EntityClientExtraInfo::release_skill_anchor_position() {
  // @@protoc_insertion_point(field_release:proto.EntityClientExtraInfo.skill_anchor_position)
  
  ::proto::Vector* temp = skill_anchor_position_;
  skill_anchor_position_ = NULL;
  return temp;
}
void EntityClientExtraInfo::set_allocated_skill_anchor_position(::proto::Vector* skill_anchor_position) {
  delete skill_anchor_position_;
  skill_anchor_position_ = skill_anchor_position;
  if (skill_anchor_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.EntityClientExtraInfo.skill_anchor_position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityAuthorityInfo::kAbilityInfoFieldNumber;
const int EntityAuthorityInfo::kRendererChangedInfoFieldNumber;
const int EntityAuthorityInfo::kAiInfoFieldNumber;
const int EntityAuthorityInfo::kBornPosFieldNumber;
const int EntityAuthorityInfo::kPoseParaListFieldNumber;
const int EntityAuthorityInfo::kClientExtraInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityAuthorityInfo::EntityAuthorityInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.EntityAuthorityInfo)
}
EntityAuthorityInfo::EntityAuthorityInfo(const EntityAuthorityInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pose_para_list_(from.pose_para_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ability_info()) {
    ability_info_ = new ::proto::AbilitySyncStateInfo(*from.ability_info_);
  } else {
    ability_info_ = NULL;
  }
  if (from.has_renderer_changed_info()) {
    renderer_changed_info_ = new ::proto::EntityRendererChangedInfo(*from.renderer_changed_info_);
  } else {
    renderer_changed_info_ = NULL;
  }
  if (from.has_ai_info()) {
    ai_info_ = new ::proto::SceneEntityAiInfo(*from.ai_info_);
  } else {
    ai_info_ = NULL;
  }
  if (from.has_born_pos()) {
    born_pos_ = new ::proto::Vector(*from.born_pos_);
  } else {
    born_pos_ = NULL;
  }
  if (from.has_client_extra_info()) {
    client_extra_info_ = new ::proto::EntityClientExtraInfo(*from.client_extra_info_);
  } else {
    client_extra_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.EntityAuthorityInfo)
}

void EntityAuthorityInfo::SharedCtor() {
  ::memset(&ability_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_extra_info_) -
      reinterpret_cast<char*>(&ability_info_)) + sizeof(client_extra_info_));
  _cached_size_ = 0;
}

EntityAuthorityInfo::~EntityAuthorityInfo() {
  // @@protoc_insertion_point(destructor:proto.EntityAuthorityInfo)
  SharedDtor();
}

void EntityAuthorityInfo::SharedDtor() {
  if (this != internal_default_instance()) delete ability_info_;
  if (this != internal_default_instance()) delete renderer_changed_info_;
  if (this != internal_default_instance()) delete ai_info_;
  if (this != internal_default_instance()) delete born_pos_;
  if (this != internal_default_instance()) delete client_extra_info_;
}

void EntityAuthorityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityAuthorityInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityAuthorityInfo& EntityAuthorityInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

EntityAuthorityInfo* EntityAuthorityInfo::New(::google::protobuf::Arena* arena) const {
  EntityAuthorityInfo* n = new EntityAuthorityInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityAuthorityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EntityAuthorityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pose_para_list_.Clear();
  if (GetArenaNoVirtual() == NULL && ability_info_ != NULL) {
    delete ability_info_;
  }
  ability_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && renderer_changed_info_ != NULL) {
    delete renderer_changed_info_;
  }
  renderer_changed_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && ai_info_ != NULL) {
    delete ai_info_;
  }
  ai_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && born_pos_ != NULL) {
    delete born_pos_;
  }
  born_pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && client_extra_info_ != NULL) {
    delete client_extra_info_;
  }
  client_extra_info_ = NULL;
  _internal_metadata_.Clear();
}

bool EntityAuthorityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.EntityAuthorityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.AbilitySyncStateInfo ability_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ability_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.EntityRendererChangedInfo renderer_changed_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_renderer_changed_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneEntityAiInfo ai_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ai_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector born_pos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_born_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.AnimatorParameterValueInfoPair pose_para_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pose_para_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.EntityClientExtraInfo client_extra_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_extra_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.EntityAuthorityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.EntityAuthorityInfo)
  return false;
#undef DO_
}

void EntityAuthorityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.EntityAuthorityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.AbilitySyncStateInfo ability_info = 1;
  if (this->has_ability_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ability_info_, output);
  }

  // .proto.EntityRendererChangedInfo renderer_changed_info = 2;
  if (this->has_renderer_changed_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->renderer_changed_info_, output);
  }

  // .proto.SceneEntityAiInfo ai_info = 3;
  if (this->has_ai_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ai_info_, output);
  }

  // .proto.Vector born_pos = 4;
  if (this->has_born_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->born_pos_, output);
  }

  // repeated .proto.AnimatorParameterValueInfoPair pose_para_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pose_para_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pose_para_list(static_cast<int>(i)), output);
  }

  // .proto.EntityClientExtraInfo client_extra_info = 6;
  if (this->has_client_extra_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->client_extra_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.EntityAuthorityInfo)
}

::google::protobuf::uint8* EntityAuthorityInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.EntityAuthorityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.AbilitySyncStateInfo ability_info = 1;
  if (this->has_ability_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ability_info_, deterministic, target);
  }

  // .proto.EntityRendererChangedInfo renderer_changed_info = 2;
  if (this->has_renderer_changed_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->renderer_changed_info_, deterministic, target);
  }

  // .proto.SceneEntityAiInfo ai_info = 3;
  if (this->has_ai_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->ai_info_, deterministic, target);
  }

  // .proto.Vector born_pos = 4;
  if (this->has_born_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->born_pos_, deterministic, target);
  }

  // repeated .proto.AnimatorParameterValueInfoPair pose_para_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pose_para_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->pose_para_list(static_cast<int>(i)), deterministic, target);
  }

  // .proto.EntityClientExtraInfo client_extra_info = 6;
  if (this->has_client_extra_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->client_extra_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EntityAuthorityInfo)
  return target;
}

size_t EntityAuthorityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EntityAuthorityInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.AnimatorParameterValueInfoPair pose_para_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->pose_para_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose_para_list(static_cast<int>(i)));
    }
  }

  // .proto.AbilitySyncStateInfo ability_info = 1;
  if (this->has_ability_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ability_info_);
  }

  // .proto.EntityRendererChangedInfo renderer_changed_info = 2;
  if (this->has_renderer_changed_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->renderer_changed_info_);
  }

  // .proto.SceneEntityAiInfo ai_info = 3;
  if (this->has_ai_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ai_info_);
  }

  // .proto.Vector born_pos = 4;
  if (this->has_born_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->born_pos_);
  }

  // .proto.EntityClientExtraInfo client_extra_info = 6;
  if (this->has_client_extra_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->client_extra_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityAuthorityInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.EntityAuthorityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityAuthorityInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityAuthorityInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.EntityAuthorityInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.EntityAuthorityInfo)
    MergeFrom(*source);
  }
}

void EntityAuthorityInfo::MergeFrom(const EntityAuthorityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.EntityAuthorityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pose_para_list_.MergeFrom(from.pose_para_list_);
  if (from.has_ability_info()) {
    mutable_ability_info()->::proto::AbilitySyncStateInfo::MergeFrom(from.ability_info());
  }
  if (from.has_renderer_changed_info()) {
    mutable_renderer_changed_info()->::proto::EntityRendererChangedInfo::MergeFrom(from.renderer_changed_info());
  }
  if (from.has_ai_info()) {
    mutable_ai_info()->::proto::SceneEntityAiInfo::MergeFrom(from.ai_info());
  }
  if (from.has_born_pos()) {
    mutable_born_pos()->::proto::Vector::MergeFrom(from.born_pos());
  }
  if (from.has_client_extra_info()) {
    mutable_client_extra_info()->::proto::EntityClientExtraInfo::MergeFrom(from.client_extra_info());
  }
}

void EntityAuthorityInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.EntityAuthorityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityAuthorityInfo::CopyFrom(const EntityAuthorityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EntityAuthorityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityAuthorityInfo::IsInitialized() const {
  return true;
}

void EntityAuthorityInfo::Swap(EntityAuthorityInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityAuthorityInfo::InternalSwap(EntityAuthorityInfo* other) {
  using std::swap;
  pose_para_list_.InternalSwap(&other->pose_para_list_);
  swap(ability_info_, other->ability_info_);
  swap(renderer_changed_info_, other->renderer_changed_info_);
  swap(ai_info_, other->ai_info_);
  swap(born_pos_, other->born_pos_);
  swap(client_extra_info_, other->client_extra_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityAuthorityInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EntityAuthorityInfo

// .proto.AbilitySyncStateInfo ability_info = 1;
bool EntityAuthorityInfo::has_ability_info() const {
  return this != internal_default_instance() && ability_info_ != NULL;
}
void EntityAuthorityInfo::clear_ability_info() {
  if (GetArenaNoVirtual() == NULL && ability_info_ != NULL) delete ability_info_;
  ability_info_ = NULL;
}
const ::proto::AbilitySyncStateInfo& EntityAuthorityInfo::ability_info() const {
  const ::proto::AbilitySyncStateInfo* p = ability_info_;
  // @@protoc_insertion_point(field_get:proto.EntityAuthorityInfo.ability_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::AbilitySyncStateInfo*>(
      &::proto::_AbilitySyncStateInfo_default_instance_);
}
::proto::AbilitySyncStateInfo* EntityAuthorityInfo::mutable_ability_info() {
  
  if (ability_info_ == NULL) {
    ability_info_ = new ::proto::AbilitySyncStateInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.EntityAuthorityInfo.ability_info)
  return ability_info_;
}
::proto::AbilitySyncStateInfo* EntityAuthorityInfo::release_ability_info() {
  // @@protoc_insertion_point(field_release:proto.EntityAuthorityInfo.ability_info)
  
  ::proto::AbilitySyncStateInfo* temp = ability_info_;
  ability_info_ = NULL;
  return temp;
}
void EntityAuthorityInfo::set_allocated_ability_info(::proto::AbilitySyncStateInfo* ability_info) {
  delete ability_info_;
  ability_info_ = ability_info;
  if (ability_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.EntityAuthorityInfo.ability_info)
}

// .proto.EntityRendererChangedInfo renderer_changed_info = 2;
bool EntityAuthorityInfo::has_renderer_changed_info() const {
  return this != internal_default_instance() && renderer_changed_info_ != NULL;
}
void EntityAuthorityInfo::clear_renderer_changed_info() {
  if (GetArenaNoVirtual() == NULL && renderer_changed_info_ != NULL) delete renderer_changed_info_;
  renderer_changed_info_ = NULL;
}
const ::proto::EntityRendererChangedInfo& EntityAuthorityInfo::renderer_changed_info() const {
  const ::proto::EntityRendererChangedInfo* p = renderer_changed_info_;
  // @@protoc_insertion_point(field_get:proto.EntityAuthorityInfo.renderer_changed_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::EntityRendererChangedInfo*>(
      &::proto::_EntityRendererChangedInfo_default_instance_);
}
::proto::EntityRendererChangedInfo* EntityAuthorityInfo::mutable_renderer_changed_info() {
  
  if (renderer_changed_info_ == NULL) {
    renderer_changed_info_ = new ::proto::EntityRendererChangedInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.EntityAuthorityInfo.renderer_changed_info)
  return renderer_changed_info_;
}
::proto::EntityRendererChangedInfo* EntityAuthorityInfo::release_renderer_changed_info() {
  // @@protoc_insertion_point(field_release:proto.EntityAuthorityInfo.renderer_changed_info)
  
  ::proto::EntityRendererChangedInfo* temp = renderer_changed_info_;
  renderer_changed_info_ = NULL;
  return temp;
}
void EntityAuthorityInfo::set_allocated_renderer_changed_info(::proto::EntityRendererChangedInfo* renderer_changed_info) {
  delete renderer_changed_info_;
  renderer_changed_info_ = renderer_changed_info;
  if (renderer_changed_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.EntityAuthorityInfo.renderer_changed_info)
}

// .proto.SceneEntityAiInfo ai_info = 3;
bool EntityAuthorityInfo::has_ai_info() const {
  return this != internal_default_instance() && ai_info_ != NULL;
}
void EntityAuthorityInfo::clear_ai_info() {
  if (GetArenaNoVirtual() == NULL && ai_info_ != NULL) delete ai_info_;
  ai_info_ = NULL;
}
const ::proto::SceneEntityAiInfo& EntityAuthorityInfo::ai_info() const {
  const ::proto::SceneEntityAiInfo* p = ai_info_;
  // @@protoc_insertion_point(field_get:proto.EntityAuthorityInfo.ai_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::SceneEntityAiInfo*>(
      &::proto::_SceneEntityAiInfo_default_instance_);
}
::proto::SceneEntityAiInfo* EntityAuthorityInfo::mutable_ai_info() {
  
  if (ai_info_ == NULL) {
    ai_info_ = new ::proto::SceneEntityAiInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.EntityAuthorityInfo.ai_info)
  return ai_info_;
}
::proto::SceneEntityAiInfo* EntityAuthorityInfo::release_ai_info() {
  // @@protoc_insertion_point(field_release:proto.EntityAuthorityInfo.ai_info)
  
  ::proto::SceneEntityAiInfo* temp = ai_info_;
  ai_info_ = NULL;
  return temp;
}
void EntityAuthorityInfo::set_allocated_ai_info(::proto::SceneEntityAiInfo* ai_info) {
  delete ai_info_;
  ai_info_ = ai_info;
  if (ai_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.EntityAuthorityInfo.ai_info)
}

// .proto.Vector born_pos = 4;
bool EntityAuthorityInfo::has_born_pos() const {
  return this != internal_default_instance() && born_pos_ != NULL;
}
void EntityAuthorityInfo::clear_born_pos() {
  if (GetArenaNoVirtual() == NULL && born_pos_ != NULL) delete born_pos_;
  born_pos_ = NULL;
}
const ::proto::Vector& EntityAuthorityInfo::born_pos() const {
  const ::proto::Vector* p = born_pos_;
  // @@protoc_insertion_point(field_get:proto.EntityAuthorityInfo.born_pos)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* EntityAuthorityInfo::mutable_born_pos() {
  
  if (born_pos_ == NULL) {
    born_pos_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.EntityAuthorityInfo.born_pos)
  return born_pos_;
}
::proto::Vector* EntityAuthorityInfo::release_born_pos() {
  // @@protoc_insertion_point(field_release:proto.EntityAuthorityInfo.born_pos)
  
  ::proto::Vector* temp = born_pos_;
  born_pos_ = NULL;
  return temp;
}
void EntityAuthorityInfo::set_allocated_born_pos(::proto::Vector* born_pos) {
  delete born_pos_;
  born_pos_ = born_pos;
  if (born_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.EntityAuthorityInfo.born_pos)
}

// repeated .proto.AnimatorParameterValueInfoPair pose_para_list = 5;
int EntityAuthorityInfo::pose_para_list_size() const {
  return pose_para_list_.size();
}
void EntityAuthorityInfo::clear_pose_para_list() {
  pose_para_list_.Clear();
}
const ::proto::AnimatorParameterValueInfoPair& EntityAuthorityInfo::pose_para_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.EntityAuthorityInfo.pose_para_list)
  return pose_para_list_.Get(index);
}
::proto::AnimatorParameterValueInfoPair* EntityAuthorityInfo::mutable_pose_para_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.EntityAuthorityInfo.pose_para_list)
  return pose_para_list_.Mutable(index);
}
::proto::AnimatorParameterValueInfoPair* EntityAuthorityInfo::add_pose_para_list() {
  // @@protoc_insertion_point(field_add:proto.EntityAuthorityInfo.pose_para_list)
  return pose_para_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::AnimatorParameterValueInfoPair >*
EntityAuthorityInfo::mutable_pose_para_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.EntityAuthorityInfo.pose_para_list)
  return &pose_para_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::AnimatorParameterValueInfoPair >&
EntityAuthorityInfo::pose_para_list() const {
  // @@protoc_insertion_point(field_list:proto.EntityAuthorityInfo.pose_para_list)
  return pose_para_list_;
}

// .proto.EntityClientExtraInfo client_extra_info = 6;
bool EntityAuthorityInfo::has_client_extra_info() const {
  return this != internal_default_instance() && client_extra_info_ != NULL;
}
void EntityAuthorityInfo::clear_client_extra_info() {
  if (GetArenaNoVirtual() == NULL && client_extra_info_ != NULL) delete client_extra_info_;
  client_extra_info_ = NULL;
}
const ::proto::EntityClientExtraInfo& EntityAuthorityInfo::client_extra_info() const {
  const ::proto::EntityClientExtraInfo* p = client_extra_info_;
  // @@protoc_insertion_point(field_get:proto.EntityAuthorityInfo.client_extra_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::EntityClientExtraInfo*>(
      &::proto::_EntityClientExtraInfo_default_instance_);
}
::proto::EntityClientExtraInfo* EntityAuthorityInfo::mutable_client_extra_info() {
  
  if (client_extra_info_ == NULL) {
    client_extra_info_ = new ::proto::EntityClientExtraInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.EntityAuthorityInfo.client_extra_info)
  return client_extra_info_;
}
::proto::EntityClientExtraInfo* EntityAuthorityInfo::release_client_extra_info() {
  // @@protoc_insertion_point(field_release:proto.EntityAuthorityInfo.client_extra_info)
  
  ::proto::EntityClientExtraInfo* temp = client_extra_info_;
  client_extra_info_ = NULL;
  return temp;
}
void EntityAuthorityInfo::set_allocated_client_extra_info(::proto::EntityClientExtraInfo* client_extra_info) {
  delete client_extra_info_;
  client_extra_info_ = client_extra_info;
  if (client_extra_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.EntityAuthorityInfo.client_extra_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneEntityInfo::kEntityTypeFieldNumber;
const int SceneEntityInfo::kEntityIdFieldNumber;
const int SceneEntityInfo::kNameFieldNumber;
const int SceneEntityInfo::kMotionInfoFieldNumber;
const int SceneEntityInfo::kPropListFieldNumber;
const int SceneEntityInfo::kFightPropListFieldNumber;
const int SceneEntityInfo::kLifeStateFieldNumber;
const int SceneEntityInfo::kAnimatorParaListFieldNumber;
const int SceneEntityInfo::kLastMoveSceneTimeMsFieldNumber;
const int SceneEntityInfo::kLastMoveReliableSeqFieldNumber;
const int SceneEntityInfo::kEntityClientDataFieldNumber;
const int SceneEntityInfo::kEntityEnvironmentInfoListFieldNumber;
const int SceneEntityInfo::kEntityAuthorityInfoFieldNumber;
const int SceneEntityInfo::kTagListFieldNumber;
const int SceneEntityInfo::kServerBuffListFieldNumber;
const int SceneEntityInfo::kAvatarFieldNumber;
const int SceneEntityInfo::kMonsterFieldNumber;
const int SceneEntityInfo::kNpcFieldNumber;
const int SceneEntityInfo::kGadgetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneEntityInfo::SceneEntityInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneEntityInfo)
}
SceneEntityInfo::SceneEntityInfo(const SceneEntityInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      prop_list_(from.prop_list_),
      fight_prop_list_(from.fight_prop_list_),
      animator_para_list_(from.animator_para_list_),
      entity_environment_info_list_(from.entity_environment_info_list_),
      tag_list_(from.tag_list_),
      server_buff_list_(from.server_buff_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_motion_info()) {
    motion_info_ = new ::proto::MotionInfo(*from.motion_info_);
  } else {
    motion_info_ = NULL;
  }
  if (from.has_entity_client_data()) {
    entity_client_data_ = new ::proto::EntityClientData(*from.entity_client_data_);
  } else {
    entity_client_data_ = NULL;
  }
  if (from.has_entity_authority_info()) {
    entity_authority_info_ = new ::proto::EntityAuthorityInfo(*from.entity_authority_info_);
  } else {
    entity_authority_info_ = NULL;
  }
  ::memcpy(&entity_type_, &from.entity_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_move_reliable_seq_) -
    reinterpret_cast<char*>(&entity_type_)) + sizeof(last_move_reliable_seq_));
  clear_has_entity();
  switch (from.entity_case()) {
    case kAvatar: {
      mutable_avatar()->::proto::SceneAvatarInfo::MergeFrom(from.avatar());
      break;
    }
    case kMonster: {
      mutable_monster()->::proto::SceneMonsterInfo::MergeFrom(from.monster());
      break;
    }
    case kNpc: {
      mutable_npc()->::proto::SceneNpcInfo::MergeFrom(from.npc());
      break;
    }
    case kGadget: {
      mutable_gadget()->::proto::SceneGadgetInfo::MergeFrom(from.gadget());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.SceneEntityInfo)
}

void SceneEntityInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&motion_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_move_reliable_seq_) -
      reinterpret_cast<char*>(&motion_info_)) + sizeof(last_move_reliable_seq_));
  clear_has_entity();
  _cached_size_ = 0;
}

SceneEntityInfo::~SceneEntityInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneEntityInfo)
  SharedDtor();
}

void SceneEntityInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete motion_info_;
  if (this != internal_default_instance()) delete entity_client_data_;
  if (this != internal_default_instance()) delete entity_authority_info_;
  if (has_entity()) {
    clear_entity();
  }
}

void SceneEntityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneEntityInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneEntityInfo& SceneEntityInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneEntityInfo* SceneEntityInfo::New(::google::protobuf::Arena* arena) const {
  SceneEntityInfo* n = new SceneEntityInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneEntityInfo::clear_entity() {
// @@protoc_insertion_point(one_of_clear_start:proto.SceneEntityInfo)
  switch (entity_case()) {
    case kAvatar: {
      delete entity_.avatar_;
      break;
    }
    case kMonster: {
      delete entity_.monster_;
      break;
    }
    case kNpc: {
      delete entity_.npc_;
      break;
    }
    case kGadget: {
      delete entity_.gadget_;
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTITY_NOT_SET;
}


void SceneEntityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneEntityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prop_list_.Clear();
  fight_prop_list_.Clear();
  animator_para_list_.Clear();
  entity_environment_info_list_.Clear();
  tag_list_.Clear();
  server_buff_list_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && motion_info_ != NULL) {
    delete motion_info_;
  }
  motion_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && entity_client_data_ != NULL) {
    delete entity_client_data_;
  }
  entity_client_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && entity_authority_info_ != NULL) {
    delete entity_authority_info_;
  }
  entity_authority_info_ = NULL;
  ::memset(&entity_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_move_reliable_seq_) -
      reinterpret_cast<char*>(&entity_type_)) + sizeof(last_move_reliable_seq_));
  clear_entity();
  _internal_metadata_.Clear();
}

bool SceneEntityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneEntityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.ProtEntityType entity_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entity_type(static_cast< ::proto::ProtEntityType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 entity_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.SceneEntityInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MotionInfo motion_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motion_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.PropPair prop_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prop_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.FightPropPair fight_prop_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fight_prop_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 life_state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &life_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.AnimatorParameterValueInfoPair animator_para_list = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animator_para_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneAvatarInfo avatar = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneMonsterInfo monster = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monster()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneNpcInfo npc = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_npc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGadgetInfo gadget = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gadget()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 last_move_scene_time_ms = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_move_scene_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 last_move_reliable_seq = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_move_reliable_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.EntityClientData entity_client_data = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity_client_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.EntityEnvironmentInfo entity_environment_info_list = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entity_environment_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.EntityAuthorityInfo entity_authority_info = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity_authority_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tag_list = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tag_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag_list(this->tag_list_size() - 1).data(),
            static_cast<int>(this->tag_list(this->tag_list_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.SceneEntityInfo.tag_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ServerBuff server_buff_list = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_buff_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneEntityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneEntityInfo)
  return false;
#undef DO_
}

void SceneEntityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneEntityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ProtEntityType entity_type = 1;
  if (this->entity_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->entity_type(), output);
  }

  // uint32 entity_id = 2;
  if (this->entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->entity_id(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.SceneEntityInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // .proto.MotionInfo motion_info = 4;
  if (this->has_motion_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->motion_info_, output);
  }

  // repeated .proto.PropPair prop_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prop_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->prop_list(static_cast<int>(i)), output);
  }

  // repeated .proto.FightPropPair fight_prop_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fight_prop_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fight_prop_list(static_cast<int>(i)), output);
  }

  // uint32 life_state = 7;
  if (this->life_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->life_state(), output);
  }

  // repeated .proto.AnimatorParameterValueInfoPair animator_para_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->animator_para_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->animator_para_list(static_cast<int>(i)), output);
  }

  // .proto.SceneAvatarInfo avatar = 10;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *entity_.avatar_, output);
  }

  // .proto.SceneMonsterInfo monster = 11;
  if (has_monster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *entity_.monster_, output);
  }

  // .proto.SceneNpcInfo npc = 12;
  if (has_npc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *entity_.npc_, output);
  }

  // .proto.SceneGadgetInfo gadget = 13;
  if (has_gadget()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *entity_.gadget_, output);
  }

  // uint32 last_move_scene_time_ms = 17;
  if (this->last_move_scene_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->last_move_scene_time_ms(), output);
  }

  // uint32 last_move_reliable_seq = 18;
  if (this->last_move_reliable_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->last_move_reliable_seq(), output);
  }

  // .proto.EntityClientData entity_client_data = 19;
  if (this->has_entity_client_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->entity_client_data_, output);
  }

  // repeated .proto.EntityEnvironmentInfo entity_environment_info_list = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entity_environment_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->entity_environment_info_list(static_cast<int>(i)), output);
  }

  // .proto.EntityAuthorityInfo entity_authority_info = 21;
  if (this->has_entity_authority_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->entity_authority_info_, output);
  }

  // repeated string tag_list = 22;
  for (int i = 0, n = this->tag_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag_list(i).data(), static_cast<int>(this->tag_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.SceneEntityInfo.tag_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->tag_list(i), output);
  }

  // repeated .proto.ServerBuff server_buff_list = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->server_buff_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->server_buff_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneEntityInfo)
}

::google::protobuf::uint8* SceneEntityInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneEntityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ProtEntityType entity_type = 1;
  if (this->entity_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->entity_type(), target);
  }

  // uint32 entity_id = 2;
  if (this->entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->entity_id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.SceneEntityInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // .proto.MotionInfo motion_info = 4;
  if (this->has_motion_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->motion_info_, deterministic, target);
  }

  // repeated .proto.PropPair prop_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prop_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->prop_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.FightPropPair fight_prop_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fight_prop_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->fight_prop_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 life_state = 7;
  if (this->life_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->life_state(), target);
  }

  // repeated .proto.AnimatorParameterValueInfoPair animator_para_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->animator_para_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->animator_para_list(static_cast<int>(i)), deterministic, target);
  }

  // .proto.SceneAvatarInfo avatar = 10;
  if (has_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *entity_.avatar_, deterministic, target);
  }

  // .proto.SceneMonsterInfo monster = 11;
  if (has_monster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *entity_.monster_, deterministic, target);
  }

  // .proto.SceneNpcInfo npc = 12;
  if (has_npc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *entity_.npc_, deterministic, target);
  }

  // .proto.SceneGadgetInfo gadget = 13;
  if (has_gadget()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *entity_.gadget_, deterministic, target);
  }

  // uint32 last_move_scene_time_ms = 17;
  if (this->last_move_scene_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->last_move_scene_time_ms(), target);
  }

  // uint32 last_move_reliable_seq = 18;
  if (this->last_move_reliable_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->last_move_reliable_seq(), target);
  }

  // .proto.EntityClientData entity_client_data = 19;
  if (this->has_entity_client_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->entity_client_data_, deterministic, target);
  }

  // repeated .proto.EntityEnvironmentInfo entity_environment_info_list = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entity_environment_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, this->entity_environment_info_list(static_cast<int>(i)), deterministic, target);
  }

  // .proto.EntityAuthorityInfo entity_authority_info = 21;
  if (this->has_entity_authority_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->entity_authority_info_, deterministic, target);
  }

  // repeated string tag_list = 22;
  for (int i = 0, n = this->tag_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag_list(i).data(), static_cast<int>(this->tag_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.SceneEntityInfo.tag_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(22, this->tag_list(i), target);
  }

  // repeated .proto.ServerBuff server_buff_list = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->server_buff_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, this->server_buff_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneEntityInfo)
  return target;
}

size_t SceneEntityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneEntityInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.PropPair prop_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->prop_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prop_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.FightPropPair fight_prop_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->fight_prop_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fight_prop_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.AnimatorParameterValueInfoPair animator_para_list = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->animator_para_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->animator_para_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.EntityEnvironmentInfo entity_environment_info_list = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->entity_environment_info_list_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entity_environment_info_list(static_cast<int>(i)));
    }
  }

  // repeated string tag_list = 22;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->tag_list_size());
  for (int i = 0, n = this->tag_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tag_list(i));
  }

  // repeated .proto.ServerBuff server_buff_list = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->server_buff_list_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_buff_list(static_cast<int>(i)));
    }
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .proto.MotionInfo motion_info = 4;
  if (this->has_motion_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->motion_info_);
  }

  // .proto.EntityClientData entity_client_data = 19;
  if (this->has_entity_client_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->entity_client_data_);
  }

  // .proto.EntityAuthorityInfo entity_authority_info = 21;
  if (this->has_entity_authority_info()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->entity_authority_info_);
  }

  // .proto.ProtEntityType entity_type = 1;
  if (this->entity_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entity_type());
  }

  // uint32 entity_id = 2;
  if (this->entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->entity_id());
  }

  // uint32 life_state = 7;
  if (this->life_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->life_state());
  }

  // uint32 last_move_scene_time_ms = 17;
  if (this->last_move_scene_time_ms() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->last_move_scene_time_ms());
  }

  // uint32 last_move_reliable_seq = 18;
  if (this->last_move_reliable_seq() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->last_move_reliable_seq());
  }

  switch (entity_case()) {
    // .proto.SceneAvatarInfo avatar = 10;
    case kAvatar: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *entity_.avatar_);
      break;
    }
    // .proto.SceneMonsterInfo monster = 11;
    case kMonster: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *entity_.monster_);
      break;
    }
    // .proto.SceneNpcInfo npc = 12;
    case kNpc: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *entity_.npc_);
      break;
    }
    // .proto.SceneGadgetInfo gadget = 13;
    case kGadget: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *entity_.gadget_);
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneEntityInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneEntityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneEntityInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneEntityInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneEntityInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneEntityInfo)
    MergeFrom(*source);
  }
}

void SceneEntityInfo::MergeFrom(const SceneEntityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneEntityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prop_list_.MergeFrom(from.prop_list_);
  fight_prop_list_.MergeFrom(from.fight_prop_list_);
  animator_para_list_.MergeFrom(from.animator_para_list_);
  entity_environment_info_list_.MergeFrom(from.entity_environment_info_list_);
  tag_list_.MergeFrom(from.tag_list_);
  server_buff_list_.MergeFrom(from.server_buff_list_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_motion_info()) {
    mutable_motion_info()->::proto::MotionInfo::MergeFrom(from.motion_info());
  }
  if (from.has_entity_client_data()) {
    mutable_entity_client_data()->::proto::EntityClientData::MergeFrom(from.entity_client_data());
  }
  if (from.has_entity_authority_info()) {
    mutable_entity_authority_info()->::proto::EntityAuthorityInfo::MergeFrom(from.entity_authority_info());
  }
  if (from.entity_type() != 0) {
    set_entity_type(from.entity_type());
  }
  if (from.entity_id() != 0) {
    set_entity_id(from.entity_id());
  }
  if (from.life_state() != 0) {
    set_life_state(from.life_state());
  }
  if (from.last_move_scene_time_ms() != 0) {
    set_last_move_scene_time_ms(from.last_move_scene_time_ms());
  }
  if (from.last_move_reliable_seq() != 0) {
    set_last_move_reliable_seq(from.last_move_reliable_seq());
  }
  switch (from.entity_case()) {
    case kAvatar: {
      mutable_avatar()->::proto::SceneAvatarInfo::MergeFrom(from.avatar());
      break;
    }
    case kMonster: {
      mutable_monster()->::proto::SceneMonsterInfo::MergeFrom(from.monster());
      break;
    }
    case kNpc: {
      mutable_npc()->::proto::SceneNpcInfo::MergeFrom(from.npc());
      break;
    }
    case kGadget: {
      mutable_gadget()->::proto::SceneGadgetInfo::MergeFrom(from.gadget());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
}

void SceneEntityInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneEntityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneEntityInfo::CopyFrom(const SceneEntityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneEntityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEntityInfo::IsInitialized() const {
  return true;
}

void SceneEntityInfo::Swap(SceneEntityInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneEntityInfo::InternalSwap(SceneEntityInfo* other) {
  using std::swap;
  prop_list_.InternalSwap(&other->prop_list_);
  fight_prop_list_.InternalSwap(&other->fight_prop_list_);
  animator_para_list_.InternalSwap(&other->animator_para_list_);
  entity_environment_info_list_.InternalSwap(&other->entity_environment_info_list_);
  tag_list_.InternalSwap(&other->tag_list_);
  server_buff_list_.InternalSwap(&other->server_buff_list_);
  name_.Swap(&other->name_);
  swap(motion_info_, other->motion_info_);
  swap(entity_client_data_, other->entity_client_data_);
  swap(entity_authority_info_, other->entity_authority_info_);
  swap(entity_type_, other->entity_type_);
  swap(entity_id_, other->entity_id_);
  swap(life_state_, other->life_state_);
  swap(last_move_scene_time_ms_, other->last_move_scene_time_ms_);
  swap(last_move_reliable_seq_, other->last_move_reliable_seq_);
  swap(entity_, other->entity_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneEntityInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneEntityInfo

// .proto.ProtEntityType entity_type = 1;
void SceneEntityInfo::clear_entity_type() {
  entity_type_ = 0;
}
::proto::ProtEntityType SceneEntityInfo::entity_type() const {
  // @@protoc_insertion_point(field_get:proto.SceneEntityInfo.entity_type)
  return static_cast< ::proto::ProtEntityType >(entity_type_);
}
void SceneEntityInfo::set_entity_type(::proto::ProtEntityType value) {
  
  entity_type_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneEntityInfo.entity_type)
}

// uint32 entity_id = 2;
void SceneEntityInfo::clear_entity_id() {
  entity_id_ = 0u;
}
::google::protobuf::uint32 SceneEntityInfo::entity_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneEntityInfo.entity_id)
  return entity_id_;
}
void SceneEntityInfo::set_entity_id(::google::protobuf::uint32 value) {
  
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneEntityInfo.entity_id)
}

// string name = 3;
void SceneEntityInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SceneEntityInfo::name() const {
  // @@protoc_insertion_point(field_get:proto.SceneEntityInfo.name)
  return name_.GetNoArena();
}
void SceneEntityInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SceneEntityInfo.name)
}
#if LANG_CXX11
void SceneEntityInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneEntityInfo.name)
}
#endif
void SceneEntityInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SceneEntityInfo.name)
}
void SceneEntityInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SceneEntityInfo.name)
}
::std::string* SceneEntityInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.SceneEntityInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SceneEntityInfo::release_name() {
  // @@protoc_insertion_point(field_release:proto.SceneEntityInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SceneEntityInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.SceneEntityInfo.name)
}

// .proto.MotionInfo motion_info = 4;
bool SceneEntityInfo::has_motion_info() const {
  return this != internal_default_instance() && motion_info_ != NULL;
}
void SceneEntityInfo::clear_motion_info() {
  if (GetArenaNoVirtual() == NULL && motion_info_ != NULL) delete motion_info_;
  motion_info_ = NULL;
}
const ::proto::MotionInfo& SceneEntityInfo::motion_info() const {
  const ::proto::MotionInfo* p = motion_info_;
  // @@protoc_insertion_point(field_get:proto.SceneEntityInfo.motion_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::MotionInfo*>(
      &::proto::_MotionInfo_default_instance_);
}
::proto::MotionInfo* SceneEntityInfo::mutable_motion_info() {
  
  if (motion_info_ == NULL) {
    motion_info_ = new ::proto::MotionInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneEntityInfo.motion_info)
  return motion_info_;
}
::proto::MotionInfo* SceneEntityInfo::release_motion_info() {
  // @@protoc_insertion_point(field_release:proto.SceneEntityInfo.motion_info)
  
  ::proto::MotionInfo* temp = motion_info_;
  motion_info_ = NULL;
  return temp;
}
void SceneEntityInfo::set_allocated_motion_info(::proto::MotionInfo* motion_info) {
  delete motion_info_;
  motion_info_ = motion_info;
  if (motion_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneEntityInfo.motion_info)
}

// repeated .proto.PropPair prop_list = 5;
int SceneEntityInfo::prop_list_size() const {
  return prop_list_.size();
}
void SceneEntityInfo::clear_prop_list() {
  prop_list_.Clear();
}
const ::proto::PropPair& SceneEntityInfo::prop_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SceneEntityInfo.prop_list)
  return prop_list_.Get(index);
}
::proto::PropPair* SceneEntityInfo::mutable_prop_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.SceneEntityInfo.prop_list)
  return prop_list_.Mutable(index);
}
::proto::PropPair* SceneEntityInfo::add_prop_list() {
  // @@protoc_insertion_point(field_add:proto.SceneEntityInfo.prop_list)
  return prop_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::PropPair >*
SceneEntityInfo::mutable_prop_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SceneEntityInfo.prop_list)
  return &prop_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::PropPair >&
SceneEntityInfo::prop_list() const {
  // @@protoc_insertion_point(field_list:proto.SceneEntityInfo.prop_list)
  return prop_list_;
}

// repeated .proto.FightPropPair fight_prop_list = 6;
int SceneEntityInfo::fight_prop_list_size() const {
  return fight_prop_list_.size();
}
void SceneEntityInfo::clear_fight_prop_list() {
  fight_prop_list_.Clear();
}
const ::proto::FightPropPair& SceneEntityInfo::fight_prop_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SceneEntityInfo.fight_prop_list)
  return fight_prop_list_.Get(index);
}
::proto::FightPropPair* SceneEntityInfo::mutable_fight_prop_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.SceneEntityInfo.fight_prop_list)
  return fight_prop_list_.Mutable(index);
}
::proto::FightPropPair* SceneEntityInfo::add_fight_prop_list() {
  // @@protoc_insertion_point(field_add:proto.SceneEntityInfo.fight_prop_list)
  return fight_prop_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::FightPropPair >*
SceneEntityInfo::mutable_fight_prop_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SceneEntityInfo.fight_prop_list)
  return &fight_prop_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::FightPropPair >&
SceneEntityInfo::fight_prop_list() const {
  // @@protoc_insertion_point(field_list:proto.SceneEntityInfo.fight_prop_list)
  return fight_prop_list_;
}

// uint32 life_state = 7;
void SceneEntityInfo::clear_life_state() {
  life_state_ = 0u;
}
::google::protobuf::uint32 SceneEntityInfo::life_state() const {
  // @@protoc_insertion_point(field_get:proto.SceneEntityInfo.life_state)
  return life_state_;
}
void SceneEntityInfo::set_life_state(::google::protobuf::uint32 value) {
  
  life_state_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneEntityInfo.life_state)
}

// repeated .proto.AnimatorParameterValueInfoPair animator_para_list = 9;
int SceneEntityInfo::animator_para_list_size() const {
  return animator_para_list_.size();
}
void SceneEntityInfo::clear_animator_para_list() {
  animator_para_list_.Clear();
}
const ::proto::AnimatorParameterValueInfoPair& SceneEntityInfo::animator_para_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SceneEntityInfo.animator_para_list)
  return animator_para_list_.Get(index);
}
::proto::AnimatorParameterValueInfoPair* SceneEntityInfo::mutable_animator_para_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.SceneEntityInfo.animator_para_list)
  return animator_para_list_.Mutable(index);
}
::proto::AnimatorParameterValueInfoPair* SceneEntityInfo::add_animator_para_list() {
  // @@protoc_insertion_point(field_add:proto.SceneEntityInfo.animator_para_list)
  return animator_para_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::AnimatorParameterValueInfoPair >*
SceneEntityInfo::mutable_animator_para_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SceneEntityInfo.animator_para_list)
  return &animator_para_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::AnimatorParameterValueInfoPair >&
SceneEntityInfo::animator_para_list() const {
  // @@protoc_insertion_point(field_list:proto.SceneEntityInfo.animator_para_list)
  return animator_para_list_;
}

// uint32 last_move_scene_time_ms = 17;
void SceneEntityInfo::clear_last_move_scene_time_ms() {
  last_move_scene_time_ms_ = 0u;
}
::google::protobuf::uint32 SceneEntityInfo::last_move_scene_time_ms() const {
  // @@protoc_insertion_point(field_get:proto.SceneEntityInfo.last_move_scene_time_ms)
  return last_move_scene_time_ms_;
}
void SceneEntityInfo::set_last_move_scene_time_ms(::google::protobuf::uint32 value) {
  
  last_move_scene_time_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneEntityInfo.last_move_scene_time_ms)
}

// uint32 last_move_reliable_seq = 18;
void SceneEntityInfo::clear_last_move_reliable_seq() {
  last_move_reliable_seq_ = 0u;
}
::google::protobuf::uint32 SceneEntityInfo::last_move_reliable_seq() const {
  // @@protoc_insertion_point(field_get:proto.SceneEntityInfo.last_move_reliable_seq)
  return last_move_reliable_seq_;
}
void SceneEntityInfo::set_last_move_reliable_seq(::google::protobuf::uint32 value) {
  
  last_move_reliable_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneEntityInfo.last_move_reliable_seq)
}

// .proto.EntityClientData entity_client_data = 19;
bool SceneEntityInfo::has_entity_client_data() const {
  return this != internal_default_instance() && entity_client_data_ != NULL;
}
void SceneEntityInfo::clear_entity_client_data() {
  if (GetArenaNoVirtual() == NULL && entity_client_data_ != NULL) delete entity_client_data_;
  entity_client_data_ = NULL;
}
const ::proto::EntityClientData& SceneEntityInfo::entity_client_data() const {
  const ::proto::EntityClientData* p = entity_client_data_;
  // @@protoc_insertion_point(field_get:proto.SceneEntityInfo.entity_client_data)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::EntityClientData*>(
      &::proto::_EntityClientData_default_instance_);
}
::proto::EntityClientData* SceneEntityInfo::mutable_entity_client_data() {
  
  if (entity_client_data_ == NULL) {
    entity_client_data_ = new ::proto::EntityClientData;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneEntityInfo.entity_client_data)
  return entity_client_data_;
}
::proto::EntityClientData* SceneEntityInfo::release_entity_client_data() {
  // @@protoc_insertion_point(field_release:proto.SceneEntityInfo.entity_client_data)
  
  ::proto::EntityClientData* temp = entity_client_data_;
  entity_client_data_ = NULL;
  return temp;
}
void SceneEntityInfo::set_allocated_entity_client_data(::proto::EntityClientData* entity_client_data) {
  delete entity_client_data_;
  entity_client_data_ = entity_client_data;
  if (entity_client_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneEntityInfo.entity_client_data)
}

// repeated .proto.EntityEnvironmentInfo entity_environment_info_list = 20;
int SceneEntityInfo::entity_environment_info_list_size() const {
  return entity_environment_info_list_.size();
}
void SceneEntityInfo::clear_entity_environment_info_list() {
  entity_environment_info_list_.Clear();
}
const ::proto::EntityEnvironmentInfo& SceneEntityInfo::entity_environment_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SceneEntityInfo.entity_environment_info_list)
  return entity_environment_info_list_.Get(index);
}
::proto::EntityEnvironmentInfo* SceneEntityInfo::mutable_entity_environment_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.SceneEntityInfo.entity_environment_info_list)
  return entity_environment_info_list_.Mutable(index);
}
::proto::EntityEnvironmentInfo* SceneEntityInfo::add_entity_environment_info_list() {
  // @@protoc_insertion_point(field_add:proto.SceneEntityInfo.entity_environment_info_list)
  return entity_environment_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::EntityEnvironmentInfo >*
SceneEntityInfo::mutable_entity_environment_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SceneEntityInfo.entity_environment_info_list)
  return &entity_environment_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::EntityEnvironmentInfo >&
SceneEntityInfo::entity_environment_info_list() const {
  // @@protoc_insertion_point(field_list:proto.SceneEntityInfo.entity_environment_info_list)
  return entity_environment_info_list_;
}

// .proto.EntityAuthorityInfo entity_authority_info = 21;
bool SceneEntityInfo::has_entity_authority_info() const {
  return this != internal_default_instance() && entity_authority_info_ != NULL;
}
void SceneEntityInfo::clear_entity_authority_info() {
  if (GetArenaNoVirtual() == NULL && entity_authority_info_ != NULL) delete entity_authority_info_;
  entity_authority_info_ = NULL;
}
const ::proto::EntityAuthorityInfo& SceneEntityInfo::entity_authority_info() const {
  const ::proto::EntityAuthorityInfo* p = entity_authority_info_;
  // @@protoc_insertion_point(field_get:proto.SceneEntityInfo.entity_authority_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::EntityAuthorityInfo*>(
      &::proto::_EntityAuthorityInfo_default_instance_);
}
::proto::EntityAuthorityInfo* SceneEntityInfo::mutable_entity_authority_info() {
  
  if (entity_authority_info_ == NULL) {
    entity_authority_info_ = new ::proto::EntityAuthorityInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneEntityInfo.entity_authority_info)
  return entity_authority_info_;
}
::proto::EntityAuthorityInfo* SceneEntityInfo::release_entity_authority_info() {
  // @@protoc_insertion_point(field_release:proto.SceneEntityInfo.entity_authority_info)
  
  ::proto::EntityAuthorityInfo* temp = entity_authority_info_;
  entity_authority_info_ = NULL;
  return temp;
}
void SceneEntityInfo::set_allocated_entity_authority_info(::proto::EntityAuthorityInfo* entity_authority_info) {
  delete entity_authority_info_;
  entity_authority_info_ = entity_authority_info;
  if (entity_authority_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneEntityInfo.entity_authority_info)
}

// repeated string tag_list = 22;
int SceneEntityInfo::tag_list_size() const {
  return tag_list_.size();
}
void SceneEntityInfo::clear_tag_list() {
  tag_list_.Clear();
}
const ::std::string& SceneEntityInfo::tag_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SceneEntityInfo.tag_list)
  return tag_list_.Get(index);
}
::std::string* SceneEntityInfo::mutable_tag_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.SceneEntityInfo.tag_list)
  return tag_list_.Mutable(index);
}
void SceneEntityInfo::set_tag_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.SceneEntityInfo.tag_list)
  tag_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SceneEntityInfo::set_tag_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.SceneEntityInfo.tag_list)
  tag_list_.Mutable(index)->assign(std::move(value));
}
#endif
void SceneEntityInfo::set_tag_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tag_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.SceneEntityInfo.tag_list)
}
void SceneEntityInfo::set_tag_list(int index, const char* value, size_t size) {
  tag_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.SceneEntityInfo.tag_list)
}
::std::string* SceneEntityInfo::add_tag_list() {
  // @@protoc_insertion_point(field_add_mutable:proto.SceneEntityInfo.tag_list)
  return tag_list_.Add();
}
void SceneEntityInfo::add_tag_list(const ::std::string& value) {
  tag_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.SceneEntityInfo.tag_list)
}
#if LANG_CXX11
void SceneEntityInfo::add_tag_list(::std::string&& value) {
  tag_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.SceneEntityInfo.tag_list)
}
#endif
void SceneEntityInfo::add_tag_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tag_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.SceneEntityInfo.tag_list)
}
void SceneEntityInfo::add_tag_list(const char* value, size_t size) {
  tag_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.SceneEntityInfo.tag_list)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SceneEntityInfo::tag_list() const {
  // @@protoc_insertion_point(field_list:proto.SceneEntityInfo.tag_list)
  return tag_list_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SceneEntityInfo::mutable_tag_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SceneEntityInfo.tag_list)
  return &tag_list_;
}

// repeated .proto.ServerBuff server_buff_list = 23;
int SceneEntityInfo::server_buff_list_size() const {
  return server_buff_list_.size();
}
void SceneEntityInfo::clear_server_buff_list() {
  server_buff_list_.Clear();
}
const ::proto::ServerBuff& SceneEntityInfo::server_buff_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SceneEntityInfo.server_buff_list)
  return server_buff_list_.Get(index);
}
::proto::ServerBuff* SceneEntityInfo::mutable_server_buff_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.SceneEntityInfo.server_buff_list)
  return server_buff_list_.Mutable(index);
}
::proto::ServerBuff* SceneEntityInfo::add_server_buff_list() {
  // @@protoc_insertion_point(field_add:proto.SceneEntityInfo.server_buff_list)
  return server_buff_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ServerBuff >*
SceneEntityInfo::mutable_server_buff_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SceneEntityInfo.server_buff_list)
  return &server_buff_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ServerBuff >&
SceneEntityInfo::server_buff_list() const {
  // @@protoc_insertion_point(field_list:proto.SceneEntityInfo.server_buff_list)
  return server_buff_list_;
}

// .proto.SceneAvatarInfo avatar = 10;
bool SceneEntityInfo::has_avatar() const {
  return entity_case() == kAvatar;
}
void SceneEntityInfo::set_has_avatar() {
  _oneof_case_[0] = kAvatar;
}
void SceneEntityInfo::clear_avatar() {
  if (has_avatar()) {
    delete entity_.avatar_;
    clear_has_entity();
  }
}
 const ::proto::SceneAvatarInfo& SceneEntityInfo::avatar() const {
  // @@protoc_insertion_point(field_get:proto.SceneEntityInfo.avatar)
  return has_avatar()
      ? *entity_.avatar_
      : ::proto::SceneAvatarInfo::default_instance();
}
::proto::SceneAvatarInfo* SceneEntityInfo::mutable_avatar() {
  if (!has_avatar()) {
    clear_entity();
    set_has_avatar();
    entity_.avatar_ = new ::proto::SceneAvatarInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneEntityInfo.avatar)
  return entity_.avatar_;
}
::proto::SceneAvatarInfo* SceneEntityInfo::release_avatar() {
  // @@protoc_insertion_point(field_release:proto.SceneEntityInfo.avatar)
  if (has_avatar()) {
    clear_has_entity();
    ::proto::SceneAvatarInfo* temp = entity_.avatar_;
    entity_.avatar_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneEntityInfo::set_allocated_avatar(::proto::SceneAvatarInfo* avatar) {
  clear_entity();
  if (avatar) {
    set_has_avatar();
    entity_.avatar_ = avatar;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneEntityInfo.avatar)
}

// .proto.SceneMonsterInfo monster = 11;
bool SceneEntityInfo::has_monster() const {
  return entity_case() == kMonster;
}
void SceneEntityInfo::set_has_monster() {
  _oneof_case_[0] = kMonster;
}
void SceneEntityInfo::clear_monster() {
  if (has_monster()) {
    delete entity_.monster_;
    clear_has_entity();
  }
}
 const ::proto::SceneMonsterInfo& SceneEntityInfo::monster() const {
  // @@protoc_insertion_point(field_get:proto.SceneEntityInfo.monster)
  return has_monster()
      ? *entity_.monster_
      : ::proto::SceneMonsterInfo::default_instance();
}
::proto::SceneMonsterInfo* SceneEntityInfo::mutable_monster() {
  if (!has_monster()) {
    clear_entity();
    set_has_monster();
    entity_.monster_ = new ::proto::SceneMonsterInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneEntityInfo.monster)
  return entity_.monster_;
}
::proto::SceneMonsterInfo* SceneEntityInfo::release_monster() {
  // @@protoc_insertion_point(field_release:proto.SceneEntityInfo.monster)
  if (has_monster()) {
    clear_has_entity();
    ::proto::SceneMonsterInfo* temp = entity_.monster_;
    entity_.monster_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneEntityInfo::set_allocated_monster(::proto::SceneMonsterInfo* monster) {
  clear_entity();
  if (monster) {
    set_has_monster();
    entity_.monster_ = monster;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneEntityInfo.monster)
}

// .proto.SceneNpcInfo npc = 12;
bool SceneEntityInfo::has_npc() const {
  return entity_case() == kNpc;
}
void SceneEntityInfo::set_has_npc() {
  _oneof_case_[0] = kNpc;
}
void SceneEntityInfo::clear_npc() {
  if (has_npc()) {
    delete entity_.npc_;
    clear_has_entity();
  }
}
 const ::proto::SceneNpcInfo& SceneEntityInfo::npc() const {
  // @@protoc_insertion_point(field_get:proto.SceneEntityInfo.npc)
  return has_npc()
      ? *entity_.npc_
      : ::proto::SceneNpcInfo::default_instance();
}
::proto::SceneNpcInfo* SceneEntityInfo::mutable_npc() {
  if (!has_npc()) {
    clear_entity();
    set_has_npc();
    entity_.npc_ = new ::proto::SceneNpcInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneEntityInfo.npc)
  return entity_.npc_;
}
::proto::SceneNpcInfo* SceneEntityInfo::release_npc() {
  // @@protoc_insertion_point(field_release:proto.SceneEntityInfo.npc)
  if (has_npc()) {
    clear_has_entity();
    ::proto::SceneNpcInfo* temp = entity_.npc_;
    entity_.npc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneEntityInfo::set_allocated_npc(::proto::SceneNpcInfo* npc) {
  clear_entity();
  if (npc) {
    set_has_npc();
    entity_.npc_ = npc;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneEntityInfo.npc)
}

// .proto.SceneGadgetInfo gadget = 13;
bool SceneEntityInfo::has_gadget() const {
  return entity_case() == kGadget;
}
void SceneEntityInfo::set_has_gadget() {
  _oneof_case_[0] = kGadget;
}
void SceneEntityInfo::clear_gadget() {
  if (has_gadget()) {
    delete entity_.gadget_;
    clear_has_entity();
  }
}
 const ::proto::SceneGadgetInfo& SceneEntityInfo::gadget() const {
  // @@protoc_insertion_point(field_get:proto.SceneEntityInfo.gadget)
  return has_gadget()
      ? *entity_.gadget_
      : ::proto::SceneGadgetInfo::default_instance();
}
::proto::SceneGadgetInfo* SceneEntityInfo::mutable_gadget() {
  if (!has_gadget()) {
    clear_entity();
    set_has_gadget();
    entity_.gadget_ = new ::proto::SceneGadgetInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneEntityInfo.gadget)
  return entity_.gadget_;
}
::proto::SceneGadgetInfo* SceneEntityInfo::release_gadget() {
  // @@protoc_insertion_point(field_release:proto.SceneEntityInfo.gadget)
  if (has_gadget()) {
    clear_has_entity();
    ::proto::SceneGadgetInfo* temp = entity_.gadget_;
    entity_.gadget_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneEntityInfo::set_allocated_gadget(::proto::SceneGadgetInfo* gadget) {
  clear_entity();
  if (gadget) {
    set_has_gadget();
    entity_.gadget_ = gadget;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneEntityInfo.gadget)
}

bool SceneEntityInfo::has_entity() const {
  return entity_case() != ENTITY_NOT_SET;
}
void SceneEntityInfo::clear_has_entity() {
  _oneof_case_[0] = ENTITY_NOT_SET;
}
SceneEntityInfo::EntityCase SceneEntityInfo::entity_case() const {
  return SceneEntityInfo::EntityCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateGadgetInfo_Chest::kChestDropIdFieldNumber;
const int CreateGadgetInfo_Chest::kIsShowCutsceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateGadgetInfo_Chest::CreateGadgetInfo_Chest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CreateGadgetInfo.Chest)
}
CreateGadgetInfo_Chest::CreateGadgetInfo_Chest(const CreateGadgetInfo_Chest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chest_drop_id_, &from.chest_drop_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_show_cutscene_) -
    reinterpret_cast<char*>(&chest_drop_id_)) + sizeof(is_show_cutscene_));
  // @@protoc_insertion_point(copy_constructor:proto.CreateGadgetInfo.Chest)
}

void CreateGadgetInfo_Chest::SharedCtor() {
  ::memset(&chest_drop_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_show_cutscene_) -
      reinterpret_cast<char*>(&chest_drop_id_)) + sizeof(is_show_cutscene_));
  _cached_size_ = 0;
}

CreateGadgetInfo_Chest::~CreateGadgetInfo_Chest() {
  // @@protoc_insertion_point(destructor:proto.CreateGadgetInfo.Chest)
  SharedDtor();
}

void CreateGadgetInfo_Chest::SharedDtor() {
}

void CreateGadgetInfo_Chest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGadgetInfo_Chest::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateGadgetInfo_Chest& CreateGadgetInfo_Chest::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateGadgetInfo_Chest* CreateGadgetInfo_Chest::New(::google::protobuf::Arena* arena) const {
  CreateGadgetInfo_Chest* n = new CreateGadgetInfo_Chest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateGadgetInfo_Chest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CreateGadgetInfo.Chest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chest_drop_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_show_cutscene_) -
      reinterpret_cast<char*>(&chest_drop_id_)) + sizeof(is_show_cutscene_));
  _internal_metadata_.Clear();
}

bool CreateGadgetInfo_Chest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CreateGadgetInfo.Chest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 chest_drop_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chest_drop_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_show_cutscene = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_show_cutscene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CreateGadgetInfo.Chest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CreateGadgetInfo.Chest)
  return false;
#undef DO_
}

void CreateGadgetInfo_Chest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CreateGadgetInfo.Chest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 chest_drop_id = 1;
  if (this->chest_drop_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chest_drop_id(), output);
  }

  // bool is_show_cutscene = 2;
  if (this->is_show_cutscene() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_show_cutscene(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CreateGadgetInfo.Chest)
}

::google::protobuf::uint8* CreateGadgetInfo_Chest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CreateGadgetInfo.Chest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 chest_drop_id = 1;
  if (this->chest_drop_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chest_drop_id(), target);
  }

  // bool is_show_cutscene = 2;
  if (this->is_show_cutscene() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_show_cutscene(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CreateGadgetInfo.Chest)
  return target;
}

size_t CreateGadgetInfo_Chest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CreateGadgetInfo.Chest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 chest_drop_id = 1;
  if (this->chest_drop_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chest_drop_id());
  }

  // bool is_show_cutscene = 2;
  if (this->is_show_cutscene() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGadgetInfo_Chest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CreateGadgetInfo.Chest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateGadgetInfo_Chest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateGadgetInfo_Chest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CreateGadgetInfo.Chest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CreateGadgetInfo.Chest)
    MergeFrom(*source);
  }
}

void CreateGadgetInfo_Chest::MergeFrom(const CreateGadgetInfo_Chest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CreateGadgetInfo.Chest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chest_drop_id() != 0) {
    set_chest_drop_id(from.chest_drop_id());
  }
  if (from.is_show_cutscene() != 0) {
    set_is_show_cutscene(from.is_show_cutscene());
  }
}

void CreateGadgetInfo_Chest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CreateGadgetInfo.Chest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGadgetInfo_Chest::CopyFrom(const CreateGadgetInfo_Chest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CreateGadgetInfo.Chest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGadgetInfo_Chest::IsInitialized() const {
  return true;
}

void CreateGadgetInfo_Chest::Swap(CreateGadgetInfo_Chest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateGadgetInfo_Chest::InternalSwap(CreateGadgetInfo_Chest* other) {
  using std::swap;
  swap(chest_drop_id_, other->chest_drop_id_);
  swap(is_show_cutscene_, other->is_show_cutscene_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateGadgetInfo_Chest::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateGadgetInfo_Chest

// uint32 chest_drop_id = 1;
void CreateGadgetInfo_Chest::clear_chest_drop_id() {
  chest_drop_id_ = 0u;
}
::google::protobuf::uint32 CreateGadgetInfo_Chest::chest_drop_id() const {
  // @@protoc_insertion_point(field_get:proto.CreateGadgetInfo.Chest.chest_drop_id)
  return chest_drop_id_;
}
void CreateGadgetInfo_Chest::set_chest_drop_id(::google::protobuf::uint32 value) {
  
  chest_drop_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CreateGadgetInfo.Chest.chest_drop_id)
}

// bool is_show_cutscene = 2;
void CreateGadgetInfo_Chest::clear_is_show_cutscene() {
  is_show_cutscene_ = false;
}
bool CreateGadgetInfo_Chest::is_show_cutscene() const {
  // @@protoc_insertion_point(field_get:proto.CreateGadgetInfo.Chest.is_show_cutscene)
  return is_show_cutscene_;
}
void CreateGadgetInfo_Chest::set_is_show_cutscene(bool value) {
  
  is_show_cutscene_ = value;
  // @@protoc_insertion_point(field_set:proto.CreateGadgetInfo.Chest.is_show_cutscene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateGadgetInfo::kBornTypeFieldNumber;
const int CreateGadgetInfo::kChestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateGadgetInfo::CreateGadgetInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CreateGadgetInfo)
}
CreateGadgetInfo::CreateGadgetInfo(const CreateGadgetInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_chest()) {
    chest_ = new ::proto::CreateGadgetInfo_Chest(*from.chest_);
  } else {
    chest_ = NULL;
  }
  born_type_ = from.born_type_;
  // @@protoc_insertion_point(copy_constructor:proto.CreateGadgetInfo)
}

void CreateGadgetInfo::SharedCtor() {
  ::memset(&chest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&born_type_) -
      reinterpret_cast<char*>(&chest_)) + sizeof(born_type_));
  _cached_size_ = 0;
}

CreateGadgetInfo::~CreateGadgetInfo() {
  // @@protoc_insertion_point(destructor:proto.CreateGadgetInfo)
  SharedDtor();
}

void CreateGadgetInfo::SharedDtor() {
  if (this != internal_default_instance()) delete chest_;
}

void CreateGadgetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGadgetInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateGadgetInfo& CreateGadgetInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateGadgetInfo* CreateGadgetInfo::New(::google::protobuf::Arena* arena) const {
  CreateGadgetInfo* n = new CreateGadgetInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateGadgetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CreateGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && chest_ != NULL) {
    delete chest_;
  }
  chest_ = NULL;
  born_type_ = 0;
  _internal_metadata_.Clear();
}

bool CreateGadgetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CreateGadgetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GadgetBornType born_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_born_type(static_cast< ::proto::GadgetBornType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.CreateGadgetInfo.Chest chest = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CreateGadgetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CreateGadgetInfo)
  return false;
#undef DO_
}

void CreateGadgetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CreateGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GadgetBornType born_type = 1;
  if (this->born_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->born_type(), output);
  }

  // .proto.CreateGadgetInfo.Chest chest = 2;
  if (this->has_chest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->chest_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CreateGadgetInfo)
}

::google::protobuf::uint8* CreateGadgetInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CreateGadgetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GadgetBornType born_type = 1;
  if (this->born_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->born_type(), target);
  }

  // .proto.CreateGadgetInfo.Chest chest = 2;
  if (this->has_chest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->chest_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CreateGadgetInfo)
  return target;
}

size_t CreateGadgetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CreateGadgetInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.CreateGadgetInfo.Chest chest = 2;
  if (this->has_chest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chest_);
  }

  // .proto.GadgetBornType born_type = 1;
  if (this->born_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->born_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGadgetInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CreateGadgetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateGadgetInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateGadgetInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CreateGadgetInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CreateGadgetInfo)
    MergeFrom(*source);
  }
}

void CreateGadgetInfo::MergeFrom(const CreateGadgetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CreateGadgetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chest()) {
    mutable_chest()->::proto::CreateGadgetInfo_Chest::MergeFrom(from.chest());
  }
  if (from.born_type() != 0) {
    set_born_type(from.born_type());
  }
}

void CreateGadgetInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CreateGadgetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGadgetInfo::CopyFrom(const CreateGadgetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CreateGadgetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGadgetInfo::IsInitialized() const {
  return true;
}

void CreateGadgetInfo::Swap(CreateGadgetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateGadgetInfo::InternalSwap(CreateGadgetInfo* other) {
  using std::swap;
  swap(chest_, other->chest_);
  swap(born_type_, other->born_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateGadgetInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateGadgetInfo

// .proto.GadgetBornType born_type = 1;
void CreateGadgetInfo::clear_born_type() {
  born_type_ = 0;
}
::proto::GadgetBornType CreateGadgetInfo::born_type() const {
  // @@protoc_insertion_point(field_get:proto.CreateGadgetInfo.born_type)
  return static_cast< ::proto::GadgetBornType >(born_type_);
}
void CreateGadgetInfo::set_born_type(::proto::GadgetBornType value) {
  
  born_type_ = value;
  // @@protoc_insertion_point(field_set:proto.CreateGadgetInfo.born_type)
}

// .proto.CreateGadgetInfo.Chest chest = 2;
bool CreateGadgetInfo::has_chest() const {
  return this != internal_default_instance() && chest_ != NULL;
}
void CreateGadgetInfo::clear_chest() {
  if (GetArenaNoVirtual() == NULL && chest_ != NULL) delete chest_;
  chest_ = NULL;
}
const ::proto::CreateGadgetInfo_Chest& CreateGadgetInfo::chest() const {
  const ::proto::CreateGadgetInfo_Chest* p = chest_;
  // @@protoc_insertion_point(field_get:proto.CreateGadgetInfo.chest)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::CreateGadgetInfo_Chest*>(
      &::proto::_CreateGadgetInfo_Chest_default_instance_);
}
::proto::CreateGadgetInfo_Chest* CreateGadgetInfo::mutable_chest() {
  
  if (chest_ == NULL) {
    chest_ = new ::proto::CreateGadgetInfo_Chest;
  }
  // @@protoc_insertion_point(field_mutable:proto.CreateGadgetInfo.chest)
  return chest_;
}
::proto::CreateGadgetInfo_Chest* CreateGadgetInfo::release_chest() {
  // @@protoc_insertion_point(field_release:proto.CreateGadgetInfo.chest)
  
  ::proto::CreateGadgetInfo_Chest* temp = chest_;
  chest_ = NULL;
  return temp;
}
void CreateGadgetInfo::set_allocated_chest(::proto::CreateGadgetInfo_Chest* chest) {
  delete chest_;
  chest_ = chest;
  if (chest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CreateGadgetInfo.chest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateEntityInfo::kLevelFieldNumber;
const int CreateEntityInfo::kPosFieldNumber;
const int CreateEntityInfo::kRotFieldNumber;
const int CreateEntityInfo::kSceneIdFieldNumber;
const int CreateEntityInfo::kRoomIdFieldNumber;
const int CreateEntityInfo::kClientUniqueIdFieldNumber;
const int CreateEntityInfo::kMonsterIdFieldNumber;
const int CreateEntityInfo::kNpcIdFieldNumber;
const int CreateEntityInfo::kGadgetIdFieldNumber;
const int CreateEntityInfo::kItemIdFieldNumber;
const int CreateEntityInfo::kGadgetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateEntityInfo::CreateEntityInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CreateEntityInfo)
}
CreateEntityInfo::CreateEntityInfo(const CreateEntityInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::proto::Vector(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_rot()) {
    rot_ = new ::proto::Vector(*from.rot_);
  } else {
    rot_ = NULL;
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_unique_id_) -
    reinterpret_cast<char*>(&level_)) + sizeof(client_unique_id_));
  clear_has_entity();
  switch (from.entity_case()) {
    case kMonsterId: {
      set_monster_id(from.monster_id());
      break;
    }
    case kNpcId: {
      set_npc_id(from.npc_id());
      break;
    }
    case kGadgetId: {
      set_gadget_id(from.gadget_id());
      break;
    }
    case kItemId: {
      set_item_id(from.item_id());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  clear_has_entity_create_info();
  switch (from.entity_create_info_case()) {
    case kGadget: {
      mutable_gadget()->::proto::CreateGadgetInfo::MergeFrom(from.gadget());
      break;
    }
    case ENTITY_CREATE_INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.CreateEntityInfo)
}

void CreateEntityInfo::SharedCtor() {
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_unique_id_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(client_unique_id_));
  clear_has_entity();
  clear_has_entity_create_info();
  _cached_size_ = 0;
}

CreateEntityInfo::~CreateEntityInfo() {
  // @@protoc_insertion_point(destructor:proto.CreateEntityInfo)
  SharedDtor();
}

void CreateEntityInfo::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete rot_;
  if (has_entity()) {
    clear_entity();
  }
  if (has_entity_create_info()) {
    clear_entity_create_info();
  }
}

void CreateEntityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateEntityInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateEntityInfo& CreateEntityInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateEntityInfo* CreateEntityInfo::New(::google::protobuf::Arena* arena) const {
  CreateEntityInfo* n = new CreateEntityInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateEntityInfo::clear_entity() {
// @@protoc_insertion_point(one_of_clear_start:proto.CreateEntityInfo)
  switch (entity_case()) {
    case kMonsterId: {
      // No need to clear
      break;
    }
    case kNpcId: {
      // No need to clear
      break;
    }
    case kGadgetId: {
      // No need to clear
      break;
    }
    case kItemId: {
      // No need to clear
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTITY_NOT_SET;
}

void CreateEntityInfo::clear_entity_create_info() {
// @@protoc_insertion_point(one_of_clear_start:proto.CreateEntityInfo)
  switch (entity_create_info_case()) {
    case kGadget: {
      delete entity_create_info_.gadget_;
      break;
    }
    case ENTITY_CREATE_INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = ENTITY_CREATE_INFO_NOT_SET;
}


void CreateEntityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CreateEntityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && rot_ != NULL) {
    delete rot_;
  }
  rot_ = NULL;
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_unique_id_) -
      reinterpret_cast<char*>(&level_)) + sizeof(client_unique_id_));
  clear_entity();
  clear_entity_create_info();
  _internal_metadata_.Clear();
}

bool CreateEntityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CreateEntityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 monster_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_entity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_.monster_id_)));
          set_has_monster_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 npc_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_entity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_.npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gadget_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_entity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_.gadget_id_)));
          set_has_gadget_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 item_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          clear_entity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_.item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector pos = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector rot = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 scene_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 room_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 client_unique_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_unique_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.CreateGadgetInfo gadget = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gadget()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CreateEntityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CreateEntityInfo)
  return false;
#undef DO_
}

void CreateEntityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CreateEntityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 monster_id = 1;
  if (has_monster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monster_id(), output);
  }

  // uint32 npc_id = 2;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npc_id(), output);
  }

  // uint32 gadget_id = 3;
  if (has_gadget_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gadget_id(), output);
  }

  // uint32 item_id = 4;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->item_id(), output);
  }

  // uint32 level = 5;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // .proto.Vector pos = 6;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->pos_, output);
  }

  // .proto.Vector rot = 7;
  if (this->has_rot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->rot_, output);
  }

  // uint32 scene_id = 10;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->scene_id(), output);
  }

  // uint32 room_id = 11;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->room_id(), output);
  }

  // uint32 client_unique_id = 12;
  if (this->client_unique_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->client_unique_id(), output);
  }

  // .proto.CreateGadgetInfo gadget = 13;
  if (has_gadget()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *entity_create_info_.gadget_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CreateEntityInfo)
}

::google::protobuf::uint8* CreateEntityInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CreateEntityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 monster_id = 1;
  if (has_monster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monster_id(), target);
  }

  // uint32 npc_id = 2;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npc_id(), target);
  }

  // uint32 gadget_id = 3;
  if (has_gadget_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gadget_id(), target);
  }

  // uint32 item_id = 4;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->item_id(), target);
  }

  // uint32 level = 5;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // .proto.Vector pos = 6;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->pos_, deterministic, target);
  }

  // .proto.Vector rot = 7;
  if (this->has_rot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->rot_, deterministic, target);
  }

  // uint32 scene_id = 10;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->scene_id(), target);
  }

  // uint32 room_id = 11;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->room_id(), target);
  }

  // uint32 client_unique_id = 12;
  if (this->client_unique_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->client_unique_id(), target);
  }

  // .proto.CreateGadgetInfo gadget = 13;
  if (has_gadget()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *entity_create_info_.gadget_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CreateEntityInfo)
  return target;
}

size_t CreateEntityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CreateEntityInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.Vector pos = 6;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  // .proto.Vector rot = 7;
  if (this->has_rot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rot_);
  }

  // uint32 level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // uint32 scene_id = 10;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  // uint32 room_id = 11;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->room_id());
  }

  // uint32 client_unique_id = 12;
  if (this->client_unique_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->client_unique_id());
  }

  switch (entity_case()) {
    // uint32 monster_id = 1;
    case kMonsterId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_id());
      break;
    }
    // uint32 npc_id = 2;
    case kNpcId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npc_id());
      break;
    }
    // uint32 gadget_id = 3;
    case kGadgetId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gadget_id());
      break;
    }
    // uint32 item_id = 4;
    case kItemId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  switch (entity_create_info_case()) {
    // .proto.CreateGadgetInfo gadget = 13;
    case kGadget: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *entity_create_info_.gadget_);
      break;
    }
    case ENTITY_CREATE_INFO_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateEntityInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CreateEntityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateEntityInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateEntityInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CreateEntityInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CreateEntityInfo)
    MergeFrom(*source);
  }
}

void CreateEntityInfo::MergeFrom(const CreateEntityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CreateEntityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    mutable_pos()->::proto::Vector::MergeFrom(from.pos());
  }
  if (from.has_rot()) {
    mutable_rot()->::proto::Vector::MergeFrom(from.rot());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.client_unique_id() != 0) {
    set_client_unique_id(from.client_unique_id());
  }
  switch (from.entity_case()) {
    case kMonsterId: {
      set_monster_id(from.monster_id());
      break;
    }
    case kNpcId: {
      set_npc_id(from.npc_id());
      break;
    }
    case kGadgetId: {
      set_gadget_id(from.gadget_id());
      break;
    }
    case kItemId: {
      set_item_id(from.item_id());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  switch (from.entity_create_info_case()) {
    case kGadget: {
      mutable_gadget()->::proto::CreateGadgetInfo::MergeFrom(from.gadget());
      break;
    }
    case ENTITY_CREATE_INFO_NOT_SET: {
      break;
    }
  }
}

void CreateEntityInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CreateEntityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateEntityInfo::CopyFrom(const CreateEntityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CreateEntityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEntityInfo::IsInitialized() const {
  return true;
}

void CreateEntityInfo::Swap(CreateEntityInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateEntityInfo::InternalSwap(CreateEntityInfo* other) {
  using std::swap;
  swap(pos_, other->pos_);
  swap(rot_, other->rot_);
  swap(level_, other->level_);
  swap(scene_id_, other->scene_id_);
  swap(room_id_, other->room_id_);
  swap(client_unique_id_, other->client_unique_id_);
  swap(entity_, other->entity_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(entity_create_info_, other->entity_create_info_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateEntityInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateEntityInfo

// uint32 level = 5;
void CreateEntityInfo::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 CreateEntityInfo::level() const {
  // @@protoc_insertion_point(field_get:proto.CreateEntityInfo.level)
  return level_;
}
void CreateEntityInfo::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.CreateEntityInfo.level)
}

// .proto.Vector pos = 6;
bool CreateEntityInfo::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
void CreateEntityInfo::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
const ::proto::Vector& CreateEntityInfo::pos() const {
  const ::proto::Vector* p = pos_;
  // @@protoc_insertion_point(field_get:proto.CreateEntityInfo.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* CreateEntityInfo::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.CreateEntityInfo.pos)
  return pos_;
}
::proto::Vector* CreateEntityInfo::release_pos() {
  // @@protoc_insertion_point(field_release:proto.CreateEntityInfo.pos)
  
  ::proto::Vector* temp = pos_;
  pos_ = NULL;
  return temp;
}
void CreateEntityInfo::set_allocated_pos(::proto::Vector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CreateEntityInfo.pos)
}

// .proto.Vector rot = 7;
bool CreateEntityInfo::has_rot() const {
  return this != internal_default_instance() && rot_ != NULL;
}
void CreateEntityInfo::clear_rot() {
  if (GetArenaNoVirtual() == NULL && rot_ != NULL) delete rot_;
  rot_ = NULL;
}
const ::proto::Vector& CreateEntityInfo::rot() const {
  const ::proto::Vector* p = rot_;
  // @@protoc_insertion_point(field_get:proto.CreateEntityInfo.rot)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* CreateEntityInfo::mutable_rot() {
  
  if (rot_ == NULL) {
    rot_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.CreateEntityInfo.rot)
  return rot_;
}
::proto::Vector* CreateEntityInfo::release_rot() {
  // @@protoc_insertion_point(field_release:proto.CreateEntityInfo.rot)
  
  ::proto::Vector* temp = rot_;
  rot_ = NULL;
  return temp;
}
void CreateEntityInfo::set_allocated_rot(::proto::Vector* rot) {
  delete rot_;
  rot_ = rot;
  if (rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CreateEntityInfo.rot)
}

// uint32 scene_id = 10;
void CreateEntityInfo::clear_scene_id() {
  scene_id_ = 0u;
}
::google::protobuf::uint32 CreateEntityInfo::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.CreateEntityInfo.scene_id)
  return scene_id_;
}
void CreateEntityInfo::set_scene_id(::google::protobuf::uint32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CreateEntityInfo.scene_id)
}

// uint32 room_id = 11;
void CreateEntityInfo::clear_room_id() {
  room_id_ = 0u;
}
::google::protobuf::uint32 CreateEntityInfo::room_id() const {
  // @@protoc_insertion_point(field_get:proto.CreateEntityInfo.room_id)
  return room_id_;
}
void CreateEntityInfo::set_room_id(::google::protobuf::uint32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CreateEntityInfo.room_id)
}

// uint32 client_unique_id = 12;
void CreateEntityInfo::clear_client_unique_id() {
  client_unique_id_ = 0u;
}
::google::protobuf::uint32 CreateEntityInfo::client_unique_id() const {
  // @@protoc_insertion_point(field_get:proto.CreateEntityInfo.client_unique_id)
  return client_unique_id_;
}
void CreateEntityInfo::set_client_unique_id(::google::protobuf::uint32 value) {
  
  client_unique_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CreateEntityInfo.client_unique_id)
}

// uint32 monster_id = 1;
bool CreateEntityInfo::has_monster_id() const {
  return entity_case() == kMonsterId;
}
void CreateEntityInfo::set_has_monster_id() {
  _oneof_case_[0] = kMonsterId;
}
void CreateEntityInfo::clear_monster_id() {
  if (has_monster_id()) {
    entity_.monster_id_ = 0u;
    clear_has_entity();
  }
}
::google::protobuf::uint32 CreateEntityInfo::monster_id() const {
  // @@protoc_insertion_point(field_get:proto.CreateEntityInfo.monster_id)
  if (has_monster_id()) {
    return entity_.monster_id_;
  }
  return 0u;
}
void CreateEntityInfo::set_monster_id(::google::protobuf::uint32 value) {
  if (!has_monster_id()) {
    clear_entity();
    set_has_monster_id();
  }
  entity_.monster_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CreateEntityInfo.monster_id)
}

// uint32 npc_id = 2;
bool CreateEntityInfo::has_npc_id() const {
  return entity_case() == kNpcId;
}
void CreateEntityInfo::set_has_npc_id() {
  _oneof_case_[0] = kNpcId;
}
void CreateEntityInfo::clear_npc_id() {
  if (has_npc_id()) {
    entity_.npc_id_ = 0u;
    clear_has_entity();
  }
}
::google::protobuf::uint32 CreateEntityInfo::npc_id() const {
  // @@protoc_insertion_point(field_get:proto.CreateEntityInfo.npc_id)
  if (has_npc_id()) {
    return entity_.npc_id_;
  }
  return 0u;
}
void CreateEntityInfo::set_npc_id(::google::protobuf::uint32 value) {
  if (!has_npc_id()) {
    clear_entity();
    set_has_npc_id();
  }
  entity_.npc_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CreateEntityInfo.npc_id)
}

// uint32 gadget_id = 3;
bool CreateEntityInfo::has_gadget_id() const {
  return entity_case() == kGadgetId;
}
void CreateEntityInfo::set_has_gadget_id() {
  _oneof_case_[0] = kGadgetId;
}
void CreateEntityInfo::clear_gadget_id() {
  if (has_gadget_id()) {
    entity_.gadget_id_ = 0u;
    clear_has_entity();
  }
}
::google::protobuf::uint32 CreateEntityInfo::gadget_id() const {
  // @@protoc_insertion_point(field_get:proto.CreateEntityInfo.gadget_id)
  if (has_gadget_id()) {
    return entity_.gadget_id_;
  }
  return 0u;
}
void CreateEntityInfo::set_gadget_id(::google::protobuf::uint32 value) {
  if (!has_gadget_id()) {
    clear_entity();
    set_has_gadget_id();
  }
  entity_.gadget_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CreateEntityInfo.gadget_id)
}

// uint32 item_id = 4;
bool CreateEntityInfo::has_item_id() const {
  return entity_case() == kItemId;
}
void CreateEntityInfo::set_has_item_id() {
  _oneof_case_[0] = kItemId;
}
void CreateEntityInfo::clear_item_id() {
  if (has_item_id()) {
    entity_.item_id_ = 0u;
    clear_has_entity();
  }
}
::google::protobuf::uint32 CreateEntityInfo::item_id() const {
  // @@protoc_insertion_point(field_get:proto.CreateEntityInfo.item_id)
  if (has_item_id()) {
    return entity_.item_id_;
  }
  return 0u;
}
void CreateEntityInfo::set_item_id(::google::protobuf::uint32 value) {
  if (!has_item_id()) {
    clear_entity();
    set_has_item_id();
  }
  entity_.item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CreateEntityInfo.item_id)
}

// .proto.CreateGadgetInfo gadget = 13;
bool CreateEntityInfo::has_gadget() const {
  return entity_create_info_case() == kGadget;
}
void CreateEntityInfo::set_has_gadget() {
  _oneof_case_[1] = kGadget;
}
void CreateEntityInfo::clear_gadget() {
  if (has_gadget()) {
    delete entity_create_info_.gadget_;
    clear_has_entity_create_info();
  }
}
 const ::proto::CreateGadgetInfo& CreateEntityInfo::gadget() const {
  // @@protoc_insertion_point(field_get:proto.CreateEntityInfo.gadget)
  return has_gadget()
      ? *entity_create_info_.gadget_
      : ::proto::CreateGadgetInfo::default_instance();
}
::proto::CreateGadgetInfo* CreateEntityInfo::mutable_gadget() {
  if (!has_gadget()) {
    clear_entity_create_info();
    set_has_gadget();
    entity_create_info_.gadget_ = new ::proto::CreateGadgetInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.CreateEntityInfo.gadget)
  return entity_create_info_.gadget_;
}
::proto::CreateGadgetInfo* CreateEntityInfo::release_gadget() {
  // @@protoc_insertion_point(field_release:proto.CreateEntityInfo.gadget)
  if (has_gadget()) {
    clear_has_entity_create_info();
    ::proto::CreateGadgetInfo* temp = entity_create_info_.gadget_;
    entity_create_info_.gadget_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CreateEntityInfo::set_allocated_gadget(::proto::CreateGadgetInfo* gadget) {
  clear_entity_create_info();
  if (gadget) {
    set_has_gadget();
    entity_create_info_.gadget_ = gadget;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CreateEntityInfo.gadget)
}

bool CreateEntityInfo::has_entity() const {
  return entity_case() != ENTITY_NOT_SET;
}
void CreateEntityInfo::clear_has_entity() {
  _oneof_case_[0] = ENTITY_NOT_SET;
}
bool CreateEntityInfo::has_entity_create_info() const {
  return entity_create_info_case() != ENTITY_CREATE_INFO_NOT_SET;
}
void CreateEntityInfo::clear_has_entity_create_info() {
  _oneof_case_[1] = ENTITY_CREATE_INFO_NOT_SET;
}
CreateEntityInfo::EntityCase CreateEntityInfo::entity_case() const {
  return CreateEntityInfo::EntityCase(_oneof_case_[0]);
}
CreateEntityInfo::EntityCreateInfoCase CreateEntityInfo::entity_create_info_case() const {
  return CreateEntityInfo::EntityCreateInfoCase(_oneof_case_[1]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrialAvatarGrantRecord::kGrantReasonFieldNumber;
const int TrialAvatarGrantRecord::kFromParentQuestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrialAvatarGrantRecord::TrialAvatarGrantRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TrialAvatarGrantRecord)
}
TrialAvatarGrantRecord::TrialAvatarGrantRecord(const TrialAvatarGrantRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&grant_reason_, &from.grant_reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&from_parent_quest_id_) -
    reinterpret_cast<char*>(&grant_reason_)) + sizeof(from_parent_quest_id_));
  // @@protoc_insertion_point(copy_constructor:proto.TrialAvatarGrantRecord)
}

void TrialAvatarGrantRecord::SharedCtor() {
  ::memset(&grant_reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_parent_quest_id_) -
      reinterpret_cast<char*>(&grant_reason_)) + sizeof(from_parent_quest_id_));
  _cached_size_ = 0;
}

TrialAvatarGrantRecord::~TrialAvatarGrantRecord() {
  // @@protoc_insertion_point(destructor:proto.TrialAvatarGrantRecord)
  SharedDtor();
}

void TrialAvatarGrantRecord::SharedDtor() {
}

void TrialAvatarGrantRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrialAvatarGrantRecord::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrialAvatarGrantRecord& TrialAvatarGrantRecord::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrialAvatarGrantRecord* TrialAvatarGrantRecord::New(::google::protobuf::Arena* arena) const {
  TrialAvatarGrantRecord* n = new TrialAvatarGrantRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrialAvatarGrantRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TrialAvatarGrantRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&grant_reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_parent_quest_id_) -
      reinterpret_cast<char*>(&grant_reason_)) + sizeof(from_parent_quest_id_));
  _internal_metadata_.Clear();
}

bool TrialAvatarGrantRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.TrialAvatarGrantRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 grant_reason = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grant_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 from_parent_quest_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_parent_quest_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.TrialAvatarGrantRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.TrialAvatarGrantRecord)
  return false;
#undef DO_
}

void TrialAvatarGrantRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.TrialAvatarGrantRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 grant_reason = 1;
  if (this->grant_reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grant_reason(), output);
  }

  // uint32 from_parent_quest_id = 2;
  if (this->from_parent_quest_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->from_parent_quest_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.TrialAvatarGrantRecord)
}

::google::protobuf::uint8* TrialAvatarGrantRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.TrialAvatarGrantRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 grant_reason = 1;
  if (this->grant_reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grant_reason(), target);
  }

  // uint32 from_parent_quest_id = 2;
  if (this->from_parent_quest_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->from_parent_quest_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TrialAvatarGrantRecord)
  return target;
}

size_t TrialAvatarGrantRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TrialAvatarGrantRecord)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 grant_reason = 1;
  if (this->grant_reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->grant_reason());
  }

  // uint32 from_parent_quest_id = 2;
  if (this->from_parent_quest_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_parent_quest_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrialAvatarGrantRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.TrialAvatarGrantRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const TrialAvatarGrantRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrialAvatarGrantRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.TrialAvatarGrantRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.TrialAvatarGrantRecord)
    MergeFrom(*source);
  }
}

void TrialAvatarGrantRecord::MergeFrom(const TrialAvatarGrantRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TrialAvatarGrantRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.grant_reason() != 0) {
    set_grant_reason(from.grant_reason());
  }
  if (from.from_parent_quest_id() != 0) {
    set_from_parent_quest_id(from.from_parent_quest_id());
  }
}

void TrialAvatarGrantRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.TrialAvatarGrantRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrialAvatarGrantRecord::CopyFrom(const TrialAvatarGrantRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TrialAvatarGrantRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrialAvatarGrantRecord::IsInitialized() const {
  return true;
}

void TrialAvatarGrantRecord::Swap(TrialAvatarGrantRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrialAvatarGrantRecord::InternalSwap(TrialAvatarGrantRecord* other) {
  using std::swap;
  swap(grant_reason_, other->grant_reason_);
  swap(from_parent_quest_id_, other->from_parent_quest_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrialAvatarGrantRecord::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrialAvatarGrantRecord

// uint32 grant_reason = 1;
void TrialAvatarGrantRecord::clear_grant_reason() {
  grant_reason_ = 0u;
}
::google::protobuf::uint32 TrialAvatarGrantRecord::grant_reason() const {
  // @@protoc_insertion_point(field_get:proto.TrialAvatarGrantRecord.grant_reason)
  return grant_reason_;
}
void TrialAvatarGrantRecord::set_grant_reason(::google::protobuf::uint32 value) {
  
  grant_reason_ = value;
  // @@protoc_insertion_point(field_set:proto.TrialAvatarGrantRecord.grant_reason)
}

// uint32 from_parent_quest_id = 2;
void TrialAvatarGrantRecord::clear_from_parent_quest_id() {
  from_parent_quest_id_ = 0u;
}
::google::protobuf::uint32 TrialAvatarGrantRecord::from_parent_quest_id() const {
  // @@protoc_insertion_point(field_get:proto.TrialAvatarGrantRecord.from_parent_quest_id)
  return from_parent_quest_id_;
}
void TrialAvatarGrantRecord::set_from_parent_quest_id(::google::protobuf::uint32 value) {
  
  from_parent_quest_id_ = value;
  // @@protoc_insertion_point(field_set:proto.TrialAvatarGrantRecord.from_parent_quest_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrialAvatarInfo::kTrialAvatarIdFieldNumber;
const int TrialAvatarInfo::kTrialEquipListFieldNumber;
const int TrialAvatarInfo::kGrantRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrialAvatarInfo::TrialAvatarInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TrialAvatarInfo)
}
TrialAvatarInfo::TrialAvatarInfo(const TrialAvatarInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      trial_equip_list_(from.trial_equip_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_grant_record()) {
    grant_record_ = new ::proto::TrialAvatarGrantRecord(*from.grant_record_);
  } else {
    grant_record_ = NULL;
  }
  trial_avatar_id_ = from.trial_avatar_id_;
  // @@protoc_insertion_point(copy_constructor:proto.TrialAvatarInfo)
}

void TrialAvatarInfo::SharedCtor() {
  ::memset(&grant_record_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trial_avatar_id_) -
      reinterpret_cast<char*>(&grant_record_)) + sizeof(trial_avatar_id_));
  _cached_size_ = 0;
}

TrialAvatarInfo::~TrialAvatarInfo() {
  // @@protoc_insertion_point(destructor:proto.TrialAvatarInfo)
  SharedDtor();
}

void TrialAvatarInfo::SharedDtor() {
  if (this != internal_default_instance()) delete grant_record_;
}

void TrialAvatarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrialAvatarInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrialAvatarInfo& TrialAvatarInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrialAvatarInfo* TrialAvatarInfo::New(::google::protobuf::Arena* arena) const {
  TrialAvatarInfo* n = new TrialAvatarInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrialAvatarInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TrialAvatarInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trial_equip_list_.Clear();
  if (GetArenaNoVirtual() == NULL && grant_record_ != NULL) {
    delete grant_record_;
  }
  grant_record_ = NULL;
  trial_avatar_id_ = 0u;
  _internal_metadata_.Clear();
}

bool TrialAvatarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.TrialAvatarInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 trial_avatar_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trial_avatar_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.Item trial_equip_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trial_equip_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.TrialAvatarGrantRecord grant_record = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grant_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.TrialAvatarInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.TrialAvatarInfo)
  return false;
#undef DO_
}

void TrialAvatarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.TrialAvatarInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 trial_avatar_id = 1;
  if (this->trial_avatar_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->trial_avatar_id(), output);
  }

  // repeated .proto.Item trial_equip_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trial_equip_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trial_equip_list(static_cast<int>(i)), output);
  }

  // .proto.TrialAvatarGrantRecord grant_record = 3;
  if (this->has_grant_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->grant_record_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.TrialAvatarInfo)
}

::google::protobuf::uint8* TrialAvatarInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.TrialAvatarInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 trial_avatar_id = 1;
  if (this->trial_avatar_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->trial_avatar_id(), target);
  }

  // repeated .proto.Item trial_equip_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trial_equip_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->trial_equip_list(static_cast<int>(i)), deterministic, target);
  }

  // .proto.TrialAvatarGrantRecord grant_record = 3;
  if (this->has_grant_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->grant_record_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TrialAvatarInfo)
  return target;
}

size_t TrialAvatarInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TrialAvatarInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.Item trial_equip_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->trial_equip_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trial_equip_list(static_cast<int>(i)));
    }
  }

  // .proto.TrialAvatarGrantRecord grant_record = 3;
  if (this->has_grant_record()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->grant_record_);
  }

  // uint32 trial_avatar_id = 1;
  if (this->trial_avatar_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->trial_avatar_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrialAvatarInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.TrialAvatarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TrialAvatarInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrialAvatarInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.TrialAvatarInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.TrialAvatarInfo)
    MergeFrom(*source);
  }
}

void TrialAvatarInfo::MergeFrom(const TrialAvatarInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TrialAvatarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trial_equip_list_.MergeFrom(from.trial_equip_list_);
  if (from.has_grant_record()) {
    mutable_grant_record()->::proto::TrialAvatarGrantRecord::MergeFrom(from.grant_record());
  }
  if (from.trial_avatar_id() != 0) {
    set_trial_avatar_id(from.trial_avatar_id());
  }
}

void TrialAvatarInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.TrialAvatarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrialAvatarInfo::CopyFrom(const TrialAvatarInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TrialAvatarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrialAvatarInfo::IsInitialized() const {
  return true;
}

void TrialAvatarInfo::Swap(TrialAvatarInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrialAvatarInfo::InternalSwap(TrialAvatarInfo* other) {
  using std::swap;
  trial_equip_list_.InternalSwap(&other->trial_equip_list_);
  swap(grant_record_, other->grant_record_);
  swap(trial_avatar_id_, other->trial_avatar_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrialAvatarInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrialAvatarInfo

// uint32 trial_avatar_id = 1;
void TrialAvatarInfo::clear_trial_avatar_id() {
  trial_avatar_id_ = 0u;
}
::google::protobuf::uint32 TrialAvatarInfo::trial_avatar_id() const {
  // @@protoc_insertion_point(field_get:proto.TrialAvatarInfo.trial_avatar_id)
  return trial_avatar_id_;
}
void TrialAvatarInfo::set_trial_avatar_id(::google::protobuf::uint32 value) {
  
  trial_avatar_id_ = value;
  // @@protoc_insertion_point(field_set:proto.TrialAvatarInfo.trial_avatar_id)
}

// repeated .proto.Item trial_equip_list = 2;
int TrialAvatarInfo::trial_equip_list_size() const {
  return trial_equip_list_.size();
}
void TrialAvatarInfo::clear_trial_equip_list() {
  trial_equip_list_.Clear();
}
const ::proto::Item& TrialAvatarInfo::trial_equip_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TrialAvatarInfo.trial_equip_list)
  return trial_equip_list_.Get(index);
}
::proto::Item* TrialAvatarInfo::mutable_trial_equip_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TrialAvatarInfo.trial_equip_list)
  return trial_equip_list_.Mutable(index);
}
::proto::Item* TrialAvatarInfo::add_trial_equip_list() {
  // @@protoc_insertion_point(field_add:proto.TrialAvatarInfo.trial_equip_list)
  return trial_equip_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::Item >*
TrialAvatarInfo::mutable_trial_equip_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TrialAvatarInfo.trial_equip_list)
  return &trial_equip_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::Item >&
TrialAvatarInfo::trial_equip_list() const {
  // @@protoc_insertion_point(field_list:proto.TrialAvatarInfo.trial_equip_list)
  return trial_equip_list_;
}

// .proto.TrialAvatarGrantRecord grant_record = 3;
bool TrialAvatarInfo::has_grant_record() const {
  return this != internal_default_instance() && grant_record_ != NULL;
}
void TrialAvatarInfo::clear_grant_record() {
  if (GetArenaNoVirtual() == NULL && grant_record_ != NULL) delete grant_record_;
  grant_record_ = NULL;
}
const ::proto::TrialAvatarGrantRecord& TrialAvatarInfo::grant_record() const {
  const ::proto::TrialAvatarGrantRecord* p = grant_record_;
  // @@protoc_insertion_point(field_get:proto.TrialAvatarInfo.grant_record)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::TrialAvatarGrantRecord*>(
      &::proto::_TrialAvatarGrantRecord_default_instance_);
}
::proto::TrialAvatarGrantRecord* TrialAvatarInfo::mutable_grant_record() {
  
  if (grant_record_ == NULL) {
    grant_record_ = new ::proto::TrialAvatarGrantRecord;
  }
  // @@protoc_insertion_point(field_mutable:proto.TrialAvatarInfo.grant_record)
  return grant_record_;
}
::proto::TrialAvatarGrantRecord* TrialAvatarInfo::release_grant_record() {
  // @@protoc_insertion_point(field_release:proto.TrialAvatarInfo.grant_record)
  
  ::proto::TrialAvatarGrantRecord* temp = grant_record_;
  grant_record_ = NULL;
  return temp;
}
void TrialAvatarInfo::set_allocated_grant_record(::proto::TrialAvatarGrantRecord* grant_record) {
  delete grant_record_;
  grant_record_ = grant_record;
  if (grant_record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.TrialAvatarInfo.grant_record)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarSkillInfo::kPassCdTimeFieldNumber;
const int AvatarSkillInfo::kFullCdTimeListFieldNumber;
const int AvatarSkillInfo::kMaxChargeCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarSkillInfo::AvatarSkillInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarSkillInfo)
}
AvatarSkillInfo::AvatarSkillInfo(const AvatarSkillInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      full_cd_time_list_(from.full_cd_time_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pass_cd_time_, &from.pass_cd_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_charge_count_) -
    reinterpret_cast<char*>(&pass_cd_time_)) + sizeof(max_charge_count_));
  // @@protoc_insertion_point(copy_constructor:proto.AvatarSkillInfo)
}

void AvatarSkillInfo::SharedCtor() {
  ::memset(&pass_cd_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_charge_count_) -
      reinterpret_cast<char*>(&pass_cd_time_)) + sizeof(max_charge_count_));
  _cached_size_ = 0;
}

AvatarSkillInfo::~AvatarSkillInfo() {
  // @@protoc_insertion_point(destructor:proto.AvatarSkillInfo)
  SharedDtor();
}

void AvatarSkillInfo::SharedDtor() {
}

void AvatarSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarSkillInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarSkillInfo& AvatarSkillInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarSkillInfo* AvatarSkillInfo::New(::google::protobuf::Arena* arena) const {
  AvatarSkillInfo* n = new AvatarSkillInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarSkillInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarSkillInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  full_cd_time_list_.Clear();
  ::memset(&pass_cd_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_charge_count_) -
      reinterpret_cast<char*>(&pass_cd_time_)) + sizeof(max_charge_count_));
  _internal_metadata_.Clear();
}

bool AvatarSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarSkillInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 pass_cd_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pass_cd_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 full_cd_time_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_full_cd_time_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_full_cd_time_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_charge_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_charge_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarSkillInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarSkillInfo)
  return false;
#undef DO_
}

void AvatarSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarSkillInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pass_cd_time = 1;
  if (this->pass_cd_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pass_cd_time(), output);
  }

  // repeated uint32 full_cd_time_list = 2;
  if (this->full_cd_time_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _full_cd_time_list_cached_byte_size_));
  }
  for (int i = 0, n = this->full_cd_time_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->full_cd_time_list(i), output);
  }

  // uint32 max_charge_count = 3;
  if (this->max_charge_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_charge_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarSkillInfo)
}

::google::protobuf::uint8* AvatarSkillInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarSkillInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pass_cd_time = 1;
  if (this->pass_cd_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pass_cd_time(), target);
  }

  // repeated uint32 full_cd_time_list = 2;
  if (this->full_cd_time_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _full_cd_time_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->full_cd_time_list_, target);
  }

  // uint32 max_charge_count = 3;
  if (this->max_charge_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_charge_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarSkillInfo)
  return target;
}

size_t AvatarSkillInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarSkillInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 full_cd_time_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->full_cd_time_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _full_cd_time_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 pass_cd_time = 1;
  if (this->pass_cd_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pass_cd_time());
  }

  // uint32 max_charge_count = 3;
  if (this->max_charge_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_charge_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarSkillInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarSkillInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarSkillInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarSkillInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarSkillInfo)
    MergeFrom(*source);
  }
}

void AvatarSkillInfo::MergeFrom(const AvatarSkillInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarSkillInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  full_cd_time_list_.MergeFrom(from.full_cd_time_list_);
  if (from.pass_cd_time() != 0) {
    set_pass_cd_time(from.pass_cd_time());
  }
  if (from.max_charge_count() != 0) {
    set_max_charge_count(from.max_charge_count());
  }
}

void AvatarSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarSkillInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarSkillInfo::CopyFrom(const AvatarSkillInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarSkillInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarSkillInfo::IsInitialized() const {
  return true;
}

void AvatarSkillInfo::Swap(AvatarSkillInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarSkillInfo::InternalSwap(AvatarSkillInfo* other) {
  using std::swap;
  full_cd_time_list_.InternalSwap(&other->full_cd_time_list_);
  swap(pass_cd_time_, other->pass_cd_time_);
  swap(max_charge_count_, other->max_charge_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarSkillInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarSkillInfo

// uint32 pass_cd_time = 1;
void AvatarSkillInfo::clear_pass_cd_time() {
  pass_cd_time_ = 0u;
}
::google::protobuf::uint32 AvatarSkillInfo::pass_cd_time() const {
  // @@protoc_insertion_point(field_get:proto.AvatarSkillInfo.pass_cd_time)
  return pass_cd_time_;
}
void AvatarSkillInfo::set_pass_cd_time(::google::protobuf::uint32 value) {
  
  pass_cd_time_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarSkillInfo.pass_cd_time)
}

// repeated uint32 full_cd_time_list = 2;
int AvatarSkillInfo::full_cd_time_list_size() const {
  return full_cd_time_list_.size();
}
void AvatarSkillInfo::clear_full_cd_time_list() {
  full_cd_time_list_.Clear();
}
::google::protobuf::uint32 AvatarSkillInfo::full_cd_time_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AvatarSkillInfo.full_cd_time_list)
  return full_cd_time_list_.Get(index);
}
void AvatarSkillInfo::set_full_cd_time_list(int index, ::google::protobuf::uint32 value) {
  full_cd_time_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.AvatarSkillInfo.full_cd_time_list)
}
void AvatarSkillInfo::add_full_cd_time_list(::google::protobuf::uint32 value) {
  full_cd_time_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.AvatarSkillInfo.full_cd_time_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AvatarSkillInfo::full_cd_time_list() const {
  // @@protoc_insertion_point(field_list:proto.AvatarSkillInfo.full_cd_time_list)
  return full_cd_time_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AvatarSkillInfo::mutable_full_cd_time_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AvatarSkillInfo.full_cd_time_list)
  return &full_cd_time_list_;
}

// uint32 max_charge_count = 3;
void AvatarSkillInfo::clear_max_charge_count() {
  max_charge_count_ = 0u;
}
::google::protobuf::uint32 AvatarSkillInfo::max_charge_count() const {
  // @@protoc_insertion_point(field_get:proto.AvatarSkillInfo.max_charge_count)
  return max_charge_count_;
}
void AvatarSkillInfo::set_max_charge_count(::google::protobuf::uint32 value) {
  
  max_charge_count_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarSkillInfo.max_charge_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetterData::kFetterIdFieldNumber;
const int FetterData::kFetterStateFieldNumber;
const int FetterData::kCondIndexListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FetterData::FetterData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FetterData)
}
FetterData::FetterData(const FetterData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cond_index_list_(from.cond_index_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fetter_id_, &from.fetter_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fetter_state_) -
    reinterpret_cast<char*>(&fetter_id_)) + sizeof(fetter_state_));
  // @@protoc_insertion_point(copy_constructor:proto.FetterData)
}

void FetterData::SharedCtor() {
  ::memset(&fetter_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fetter_state_) -
      reinterpret_cast<char*>(&fetter_id_)) + sizeof(fetter_state_));
  _cached_size_ = 0;
}

FetterData::~FetterData() {
  // @@protoc_insertion_point(destructor:proto.FetterData)
  SharedDtor();
}

void FetterData::SharedDtor() {
}

void FetterData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetterData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FetterData& FetterData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

FetterData* FetterData::New(::google::protobuf::Arena* arena) const {
  FetterData* n = new FetterData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FetterData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FetterData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cond_index_list_.Clear();
  ::memset(&fetter_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fetter_state_) -
      reinterpret_cast<char*>(&fetter_id_)) + sizeof(fetter_state_));
  _internal_metadata_.Clear();
}

bool FetterData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FetterData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 fetter_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fetter_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fetter_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fetter_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 cond_index_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cond_index_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_cond_index_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FetterData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FetterData)
  return false;
#undef DO_
}

void FetterData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FetterData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fetter_id = 1;
  if (this->fetter_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fetter_id(), output);
  }

  // uint32 fetter_state = 2;
  if (this->fetter_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fetter_state(), output);
  }

  // repeated uint32 cond_index_list = 3;
  if (this->cond_index_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _cond_index_list_cached_byte_size_));
  }
  for (int i = 0, n = this->cond_index_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->cond_index_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.FetterData)
}

::google::protobuf::uint8* FetterData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.FetterData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fetter_id = 1;
  if (this->fetter_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fetter_id(), target);
  }

  // uint32 fetter_state = 2;
  if (this->fetter_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fetter_state(), target);
  }

  // repeated uint32 cond_index_list = 3;
  if (this->cond_index_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _cond_index_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->cond_index_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FetterData)
  return target;
}

size_t FetterData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FetterData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 cond_index_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->cond_index_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cond_index_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 fetter_id = 1;
  if (this->fetter_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fetter_id());
  }

  // uint32 fetter_state = 2;
  if (this->fetter_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fetter_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetterData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FetterData)
  GOOGLE_DCHECK_NE(&from, this);
  const FetterData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FetterData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FetterData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FetterData)
    MergeFrom(*source);
  }
}

void FetterData::MergeFrom(const FetterData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FetterData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cond_index_list_.MergeFrom(from.cond_index_list_);
  if (from.fetter_id() != 0) {
    set_fetter_id(from.fetter_id());
  }
  if (from.fetter_state() != 0) {
    set_fetter_state(from.fetter_state());
  }
}

void FetterData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FetterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetterData::CopyFrom(const FetterData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FetterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetterData::IsInitialized() const {
  return true;
}

void FetterData::Swap(FetterData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FetterData::InternalSwap(FetterData* other) {
  using std::swap;
  cond_index_list_.InternalSwap(&other->cond_index_list_);
  swap(fetter_id_, other->fetter_id_);
  swap(fetter_state_, other->fetter_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FetterData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FetterData

// uint32 fetter_id = 1;
void FetterData::clear_fetter_id() {
  fetter_id_ = 0u;
}
::google::protobuf::uint32 FetterData::fetter_id() const {
  // @@protoc_insertion_point(field_get:proto.FetterData.fetter_id)
  return fetter_id_;
}
void FetterData::set_fetter_id(::google::protobuf::uint32 value) {
  
  fetter_id_ = value;
  // @@protoc_insertion_point(field_set:proto.FetterData.fetter_id)
}

// uint32 fetter_state = 2;
void FetterData::clear_fetter_state() {
  fetter_state_ = 0u;
}
::google::protobuf::uint32 FetterData::fetter_state() const {
  // @@protoc_insertion_point(field_get:proto.FetterData.fetter_state)
  return fetter_state_;
}
void FetterData::set_fetter_state(::google::protobuf::uint32 value) {
  
  fetter_state_ = value;
  // @@protoc_insertion_point(field_set:proto.FetterData.fetter_state)
}

// repeated uint32 cond_index_list = 3;
int FetterData::cond_index_list_size() const {
  return cond_index_list_.size();
}
void FetterData::clear_cond_index_list() {
  cond_index_list_.Clear();
}
::google::protobuf::uint32 FetterData::cond_index_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.FetterData.cond_index_list)
  return cond_index_list_.Get(index);
}
void FetterData::set_cond_index_list(int index, ::google::protobuf::uint32 value) {
  cond_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.FetterData.cond_index_list)
}
void FetterData::add_cond_index_list(::google::protobuf::uint32 value) {
  cond_index_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.FetterData.cond_index_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FetterData::cond_index_list() const {
  // @@protoc_insertion_point(field_list:proto.FetterData.cond_index_list)
  return cond_index_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FetterData::mutable_cond_index_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.FetterData.cond_index_list)
  return &cond_index_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarFetterInfo::kExpNumberFieldNumber;
const int AvatarFetterInfo::kExpLevelFieldNumber;
const int AvatarFetterInfo::kOpenIdListFieldNumber;
const int AvatarFetterInfo::kFinishIdListFieldNumber;
const int AvatarFetterInfo::kRewardedFetterLevelListFieldNumber;
const int AvatarFetterInfo::kFetterListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarFetterInfo::AvatarFetterInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarFetterInfo)
}
AvatarFetterInfo::AvatarFetterInfo(const AvatarFetterInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      open_id_list_(from.open_id_list_),
      finish_id_list_(from.finish_id_list_),
      rewarded_fetter_level_list_(from.rewarded_fetter_level_list_),
      fetter_list_(from.fetter_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&exp_number_, &from.exp_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&exp_level_) -
    reinterpret_cast<char*>(&exp_number_)) + sizeof(exp_level_));
  // @@protoc_insertion_point(copy_constructor:proto.AvatarFetterInfo)
}

void AvatarFetterInfo::SharedCtor() {
  ::memset(&exp_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_level_) -
      reinterpret_cast<char*>(&exp_number_)) + sizeof(exp_level_));
  _cached_size_ = 0;
}

AvatarFetterInfo::~AvatarFetterInfo() {
  // @@protoc_insertion_point(destructor:proto.AvatarFetterInfo)
  SharedDtor();
}

void AvatarFetterInfo::SharedDtor() {
}

void AvatarFetterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarFetterInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarFetterInfo& AvatarFetterInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarFetterInfo* AvatarFetterInfo::New(::google::protobuf::Arena* arena) const {
  AvatarFetterInfo* n = new AvatarFetterInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarFetterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarFetterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  open_id_list_.Clear();
  finish_id_list_.Clear();
  rewarded_fetter_level_list_.Clear();
  fetter_list_.Clear();
  ::memset(&exp_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_level_) -
      reinterpret_cast<char*>(&exp_number_)) + sizeof(exp_level_));
  _internal_metadata_.Clear();
}

bool AvatarFetterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarFetterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 exp_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 exp_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 open_id_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_open_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_open_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 finish_id_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_finish_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_finish_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 rewarded_fetter_level_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rewarded_fetter_level_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_rewarded_fetter_level_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.FetterData fetter_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fetter_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarFetterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarFetterInfo)
  return false;
#undef DO_
}

void AvatarFetterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarFetterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 exp_number = 1;
  if (this->exp_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exp_number(), output);
  }

  // uint32 exp_level = 2;
  if (this->exp_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp_level(), output);
  }

  // repeated uint32 open_id_list = 3;
  if (this->open_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _open_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->open_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->open_id_list(i), output);
  }

  // repeated uint32 finish_id_list = 4;
  if (this->finish_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _finish_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->finish_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->finish_id_list(i), output);
  }

  // repeated uint32 rewarded_fetter_level_list = 5;
  if (this->rewarded_fetter_level_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _rewarded_fetter_level_list_cached_byte_size_));
  }
  for (int i = 0, n = this->rewarded_fetter_level_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->rewarded_fetter_level_list(i), output);
  }

  // repeated .proto.FetterData fetter_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fetter_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fetter_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarFetterInfo)
}

::google::protobuf::uint8* AvatarFetterInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarFetterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 exp_number = 1;
  if (this->exp_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exp_number(), target);
  }

  // uint32 exp_level = 2;
  if (this->exp_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exp_level(), target);
  }

  // repeated uint32 open_id_list = 3;
  if (this->open_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _open_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->open_id_list_, target);
  }

  // repeated uint32 finish_id_list = 4;
  if (this->finish_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _finish_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->finish_id_list_, target);
  }

  // repeated uint32 rewarded_fetter_level_list = 5;
  if (this->rewarded_fetter_level_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _rewarded_fetter_level_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->rewarded_fetter_level_list_, target);
  }

  // repeated .proto.FetterData fetter_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fetter_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->fetter_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarFetterInfo)
  return target;
}

size_t AvatarFetterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarFetterInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 open_id_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->open_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _open_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 finish_id_list = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->finish_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _finish_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 rewarded_fetter_level_list = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->rewarded_fetter_level_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rewarded_fetter_level_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto.FetterData fetter_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->fetter_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetter_list(static_cast<int>(i)));
    }
  }

  // uint32 exp_number = 1;
  if (this->exp_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exp_number());
  }

  // uint32 exp_level = 2;
  if (this->exp_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exp_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarFetterInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarFetterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarFetterInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarFetterInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarFetterInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarFetterInfo)
    MergeFrom(*source);
  }
}

void AvatarFetterInfo::MergeFrom(const AvatarFetterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarFetterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  open_id_list_.MergeFrom(from.open_id_list_);
  finish_id_list_.MergeFrom(from.finish_id_list_);
  rewarded_fetter_level_list_.MergeFrom(from.rewarded_fetter_level_list_);
  fetter_list_.MergeFrom(from.fetter_list_);
  if (from.exp_number() != 0) {
    set_exp_number(from.exp_number());
  }
  if (from.exp_level() != 0) {
    set_exp_level(from.exp_level());
  }
}

void AvatarFetterInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarFetterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarFetterInfo::CopyFrom(const AvatarFetterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarFetterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarFetterInfo::IsInitialized() const {
  return true;
}

void AvatarFetterInfo::Swap(AvatarFetterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarFetterInfo::InternalSwap(AvatarFetterInfo* other) {
  using std::swap;
  open_id_list_.InternalSwap(&other->open_id_list_);
  finish_id_list_.InternalSwap(&other->finish_id_list_);
  rewarded_fetter_level_list_.InternalSwap(&other->rewarded_fetter_level_list_);
  fetter_list_.InternalSwap(&other->fetter_list_);
  swap(exp_number_, other->exp_number_);
  swap(exp_level_, other->exp_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarFetterInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarFetterInfo

// uint32 exp_number = 1;
void AvatarFetterInfo::clear_exp_number() {
  exp_number_ = 0u;
}
::google::protobuf::uint32 AvatarFetterInfo::exp_number() const {
  // @@protoc_insertion_point(field_get:proto.AvatarFetterInfo.exp_number)
  return exp_number_;
}
void AvatarFetterInfo::set_exp_number(::google::protobuf::uint32 value) {
  
  exp_number_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarFetterInfo.exp_number)
}

// uint32 exp_level = 2;
void AvatarFetterInfo::clear_exp_level() {
  exp_level_ = 0u;
}
::google::protobuf::uint32 AvatarFetterInfo::exp_level() const {
  // @@protoc_insertion_point(field_get:proto.AvatarFetterInfo.exp_level)
  return exp_level_;
}
void AvatarFetterInfo::set_exp_level(::google::protobuf::uint32 value) {
  
  exp_level_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarFetterInfo.exp_level)
}

// repeated uint32 open_id_list = 3;
int AvatarFetterInfo::open_id_list_size() const {
  return open_id_list_.size();
}
void AvatarFetterInfo::clear_open_id_list() {
  open_id_list_.Clear();
}
::google::protobuf::uint32 AvatarFetterInfo::open_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AvatarFetterInfo.open_id_list)
  return open_id_list_.Get(index);
}
void AvatarFetterInfo::set_open_id_list(int index, ::google::protobuf::uint32 value) {
  open_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.AvatarFetterInfo.open_id_list)
}
void AvatarFetterInfo::add_open_id_list(::google::protobuf::uint32 value) {
  open_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.AvatarFetterInfo.open_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AvatarFetterInfo::open_id_list() const {
  // @@protoc_insertion_point(field_list:proto.AvatarFetterInfo.open_id_list)
  return open_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AvatarFetterInfo::mutable_open_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AvatarFetterInfo.open_id_list)
  return &open_id_list_;
}

// repeated uint32 finish_id_list = 4;
int AvatarFetterInfo::finish_id_list_size() const {
  return finish_id_list_.size();
}
void AvatarFetterInfo::clear_finish_id_list() {
  finish_id_list_.Clear();
}
::google::protobuf::uint32 AvatarFetterInfo::finish_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AvatarFetterInfo.finish_id_list)
  return finish_id_list_.Get(index);
}
void AvatarFetterInfo::set_finish_id_list(int index, ::google::protobuf::uint32 value) {
  finish_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.AvatarFetterInfo.finish_id_list)
}
void AvatarFetterInfo::add_finish_id_list(::google::protobuf::uint32 value) {
  finish_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.AvatarFetterInfo.finish_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AvatarFetterInfo::finish_id_list() const {
  // @@protoc_insertion_point(field_list:proto.AvatarFetterInfo.finish_id_list)
  return finish_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AvatarFetterInfo::mutable_finish_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AvatarFetterInfo.finish_id_list)
  return &finish_id_list_;
}

// repeated uint32 rewarded_fetter_level_list = 5;
int AvatarFetterInfo::rewarded_fetter_level_list_size() const {
  return rewarded_fetter_level_list_.size();
}
void AvatarFetterInfo::clear_rewarded_fetter_level_list() {
  rewarded_fetter_level_list_.Clear();
}
::google::protobuf::uint32 AvatarFetterInfo::rewarded_fetter_level_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AvatarFetterInfo.rewarded_fetter_level_list)
  return rewarded_fetter_level_list_.Get(index);
}
void AvatarFetterInfo::set_rewarded_fetter_level_list(int index, ::google::protobuf::uint32 value) {
  rewarded_fetter_level_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.AvatarFetterInfo.rewarded_fetter_level_list)
}
void AvatarFetterInfo::add_rewarded_fetter_level_list(::google::protobuf::uint32 value) {
  rewarded_fetter_level_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.AvatarFetterInfo.rewarded_fetter_level_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AvatarFetterInfo::rewarded_fetter_level_list() const {
  // @@protoc_insertion_point(field_list:proto.AvatarFetterInfo.rewarded_fetter_level_list)
  return rewarded_fetter_level_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AvatarFetterInfo::mutable_rewarded_fetter_level_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AvatarFetterInfo.rewarded_fetter_level_list)
  return &rewarded_fetter_level_list_;
}

// repeated .proto.FetterData fetter_list = 6;
int AvatarFetterInfo::fetter_list_size() const {
  return fetter_list_.size();
}
void AvatarFetterInfo::clear_fetter_list() {
  fetter_list_.Clear();
}
const ::proto::FetterData& AvatarFetterInfo::fetter_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AvatarFetterInfo.fetter_list)
  return fetter_list_.Get(index);
}
::proto::FetterData* AvatarFetterInfo::mutable_fetter_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.AvatarFetterInfo.fetter_list)
  return fetter_list_.Mutable(index);
}
::proto::FetterData* AvatarFetterInfo::add_fetter_list() {
  // @@protoc_insertion_point(field_add:proto.AvatarFetterInfo.fetter_list)
  return fetter_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::FetterData >*
AvatarFetterInfo::mutable_fetter_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AvatarFetterInfo.fetter_list)
  return &fetter_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::FetterData >&
AvatarFetterInfo::fetter_list() const {
  // @@protoc_insertion_point(field_list:proto.AvatarFetterInfo.fetter_list)
  return fetter_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarExpeditionInfo::kStateFieldNumber;
const int AvatarExpeditionInfo::kExpIdFieldNumber;
const int AvatarExpeditionInfo::kHourTimeFieldNumber;
const int AvatarExpeditionInfo::kStartTimeFieldNumber;
const int AvatarExpeditionInfo::kShortenRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarExpeditionInfo::AvatarExpeditionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarExpeditionInfo)
}
AvatarExpeditionInfo::AvatarExpeditionInfo(const AvatarExpeditionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&shorten_ratio_) -
    reinterpret_cast<char*>(&state_)) + sizeof(shorten_ratio_));
  // @@protoc_insertion_point(copy_constructor:proto.AvatarExpeditionInfo)
}

void AvatarExpeditionInfo::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shorten_ratio_) -
      reinterpret_cast<char*>(&state_)) + sizeof(shorten_ratio_));
  _cached_size_ = 0;
}

AvatarExpeditionInfo::~AvatarExpeditionInfo() {
  // @@protoc_insertion_point(destructor:proto.AvatarExpeditionInfo)
  SharedDtor();
}

void AvatarExpeditionInfo::SharedDtor() {
}

void AvatarExpeditionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarExpeditionInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarExpeditionInfo& AvatarExpeditionInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarExpeditionInfo* AvatarExpeditionInfo::New(::google::protobuf::Arena* arena) const {
  AvatarExpeditionInfo* n = new AvatarExpeditionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarExpeditionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarExpeditionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shorten_ratio_) -
      reinterpret_cast<char*>(&state_)) + sizeof(shorten_ratio_));
  _internal_metadata_.Clear();
}

bool AvatarExpeditionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarExpeditionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.AvatarExpeditionState state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::proto::AvatarExpeditionState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 exp_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hour_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 start_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float shorten_ratio = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shorten_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarExpeditionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarExpeditionInfo)
  return false;
#undef DO_
}

void AvatarExpeditionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarExpeditionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.AvatarExpeditionState state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // uint32 exp_id = 2;
  if (this->exp_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp_id(), output);
  }

  // uint32 hour_time = 3;
  if (this->hour_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hour_time(), output);
  }

  // uint32 start_time = 4;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_time(), output);
  }

  // float shorten_ratio = 5;
  if (this->shorten_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->shorten_ratio(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarExpeditionInfo)
}

::google::protobuf::uint8* AvatarExpeditionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarExpeditionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.AvatarExpeditionState state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // uint32 exp_id = 2;
  if (this->exp_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exp_id(), target);
  }

  // uint32 hour_time = 3;
  if (this->hour_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hour_time(), target);
  }

  // uint32 start_time = 4;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_time(), target);
  }

  // float shorten_ratio = 5;
  if (this->shorten_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->shorten_ratio(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarExpeditionInfo)
  return target;
}

size_t AvatarExpeditionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarExpeditionInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.AvatarExpeditionState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // uint32 exp_id = 2;
  if (this->exp_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exp_id());
  }

  // uint32 hour_time = 3;
  if (this->hour_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hour_time());
  }

  // uint32 start_time = 4;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start_time());
  }

  // float shorten_ratio = 5;
  if (this->shorten_ratio() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarExpeditionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarExpeditionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarExpeditionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarExpeditionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarExpeditionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarExpeditionInfo)
    MergeFrom(*source);
  }
}

void AvatarExpeditionInfo::MergeFrom(const AvatarExpeditionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarExpeditionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.exp_id() != 0) {
    set_exp_id(from.exp_id());
  }
  if (from.hour_time() != 0) {
    set_hour_time(from.hour_time());
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.shorten_ratio() != 0) {
    set_shorten_ratio(from.shorten_ratio());
  }
}

void AvatarExpeditionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarExpeditionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarExpeditionInfo::CopyFrom(const AvatarExpeditionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarExpeditionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarExpeditionInfo::IsInitialized() const {
  return true;
}

void AvatarExpeditionInfo::Swap(AvatarExpeditionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarExpeditionInfo::InternalSwap(AvatarExpeditionInfo* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(exp_id_, other->exp_id_);
  swap(hour_time_, other->hour_time_);
  swap(start_time_, other->start_time_);
  swap(shorten_ratio_, other->shorten_ratio_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarExpeditionInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarExpeditionInfo

// .proto.AvatarExpeditionState state = 1;
void AvatarExpeditionInfo::clear_state() {
  state_ = 0;
}
::proto::AvatarExpeditionState AvatarExpeditionInfo::state() const {
  // @@protoc_insertion_point(field_get:proto.AvatarExpeditionInfo.state)
  return static_cast< ::proto::AvatarExpeditionState >(state_);
}
void AvatarExpeditionInfo::set_state(::proto::AvatarExpeditionState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarExpeditionInfo.state)
}

// uint32 exp_id = 2;
void AvatarExpeditionInfo::clear_exp_id() {
  exp_id_ = 0u;
}
::google::protobuf::uint32 AvatarExpeditionInfo::exp_id() const {
  // @@protoc_insertion_point(field_get:proto.AvatarExpeditionInfo.exp_id)
  return exp_id_;
}
void AvatarExpeditionInfo::set_exp_id(::google::protobuf::uint32 value) {
  
  exp_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarExpeditionInfo.exp_id)
}

// uint32 hour_time = 3;
void AvatarExpeditionInfo::clear_hour_time() {
  hour_time_ = 0u;
}
::google::protobuf::uint32 AvatarExpeditionInfo::hour_time() const {
  // @@protoc_insertion_point(field_get:proto.AvatarExpeditionInfo.hour_time)
  return hour_time_;
}
void AvatarExpeditionInfo::set_hour_time(::google::protobuf::uint32 value) {
  
  hour_time_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarExpeditionInfo.hour_time)
}

// uint32 start_time = 4;
void AvatarExpeditionInfo::clear_start_time() {
  start_time_ = 0u;
}
::google::protobuf::uint32 AvatarExpeditionInfo::start_time() const {
  // @@protoc_insertion_point(field_get:proto.AvatarExpeditionInfo.start_time)
  return start_time_;
}
void AvatarExpeditionInfo::set_start_time(::google::protobuf::uint32 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarExpeditionInfo.start_time)
}

// float shorten_ratio = 5;
void AvatarExpeditionInfo::clear_shorten_ratio() {
  shorten_ratio_ = 0;
}
float AvatarExpeditionInfo::shorten_ratio() const {
  // @@protoc_insertion_point(field_get:proto.AvatarExpeditionInfo.shorten_ratio)
  return shorten_ratio_;
}
void AvatarExpeditionInfo::set_shorten_ratio(float value) {
  
  shorten_ratio_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarExpeditionInfo.shorten_ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarEquipAffixInfo::kEquipAffixIdFieldNumber;
const int AvatarEquipAffixInfo::kLeftCdTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarEquipAffixInfo::AvatarEquipAffixInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarEquipAffixInfo)
}
AvatarEquipAffixInfo::AvatarEquipAffixInfo(const AvatarEquipAffixInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&equip_affix_id_, &from.equip_affix_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&left_cd_time_) -
    reinterpret_cast<char*>(&equip_affix_id_)) + sizeof(left_cd_time_));
  // @@protoc_insertion_point(copy_constructor:proto.AvatarEquipAffixInfo)
}

void AvatarEquipAffixInfo::SharedCtor() {
  ::memset(&equip_affix_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_cd_time_) -
      reinterpret_cast<char*>(&equip_affix_id_)) + sizeof(left_cd_time_));
  _cached_size_ = 0;
}

AvatarEquipAffixInfo::~AvatarEquipAffixInfo() {
  // @@protoc_insertion_point(destructor:proto.AvatarEquipAffixInfo)
  SharedDtor();
}

void AvatarEquipAffixInfo::SharedDtor() {
}

void AvatarEquipAffixInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarEquipAffixInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarEquipAffixInfo& AvatarEquipAffixInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarEquipAffixInfo* AvatarEquipAffixInfo::New(::google::protobuf::Arena* arena) const {
  AvatarEquipAffixInfo* n = new AvatarEquipAffixInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarEquipAffixInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarEquipAffixInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&equip_affix_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_cd_time_) -
      reinterpret_cast<char*>(&equip_affix_id_)) + sizeof(left_cd_time_));
  _internal_metadata_.Clear();
}

bool AvatarEquipAffixInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarEquipAffixInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 equip_affix_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_affix_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 left_cd_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_cd_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarEquipAffixInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarEquipAffixInfo)
  return false;
#undef DO_
}

void AvatarEquipAffixInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarEquipAffixInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 equip_affix_id = 1;
  if (this->equip_affix_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equip_affix_id(), output);
  }

  // uint32 left_cd_time = 2;
  if (this->left_cd_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->left_cd_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarEquipAffixInfo)
}

::google::protobuf::uint8* AvatarEquipAffixInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarEquipAffixInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 equip_affix_id = 1;
  if (this->equip_affix_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equip_affix_id(), target);
  }

  // uint32 left_cd_time = 2;
  if (this->left_cd_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->left_cd_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarEquipAffixInfo)
  return target;
}

size_t AvatarEquipAffixInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarEquipAffixInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 equip_affix_id = 1;
  if (this->equip_affix_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->equip_affix_id());
  }

  // uint32 left_cd_time = 2;
  if (this->left_cd_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->left_cd_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarEquipAffixInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarEquipAffixInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarEquipAffixInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarEquipAffixInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarEquipAffixInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarEquipAffixInfo)
    MergeFrom(*source);
  }
}

void AvatarEquipAffixInfo::MergeFrom(const AvatarEquipAffixInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarEquipAffixInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.equip_affix_id() != 0) {
    set_equip_affix_id(from.equip_affix_id());
  }
  if (from.left_cd_time() != 0) {
    set_left_cd_time(from.left_cd_time());
  }
}

void AvatarEquipAffixInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarEquipAffixInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarEquipAffixInfo::CopyFrom(const AvatarEquipAffixInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarEquipAffixInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarEquipAffixInfo::IsInitialized() const {
  return true;
}

void AvatarEquipAffixInfo::Swap(AvatarEquipAffixInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarEquipAffixInfo::InternalSwap(AvatarEquipAffixInfo* other) {
  using std::swap;
  swap(equip_affix_id_, other->equip_affix_id_);
  swap(left_cd_time_, other->left_cd_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarEquipAffixInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarEquipAffixInfo

// uint32 equip_affix_id = 1;
void AvatarEquipAffixInfo::clear_equip_affix_id() {
  equip_affix_id_ = 0u;
}
::google::protobuf::uint32 AvatarEquipAffixInfo::equip_affix_id() const {
  // @@protoc_insertion_point(field_get:proto.AvatarEquipAffixInfo.equip_affix_id)
  return equip_affix_id_;
}
void AvatarEquipAffixInfo::set_equip_affix_id(::google::protobuf::uint32 value) {
  
  equip_affix_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarEquipAffixInfo.equip_affix_id)
}

// uint32 left_cd_time = 2;
void AvatarEquipAffixInfo::clear_left_cd_time() {
  left_cd_time_ = 0u;
}
::google::protobuf::uint32 AvatarEquipAffixInfo::left_cd_time() const {
  // @@protoc_insertion_point(field_get:proto.AvatarEquipAffixInfo.left_cd_time)
  return left_cd_time_;
}
void AvatarEquipAffixInfo::set_left_cd_time(::google::protobuf::uint32 value) {
  
  left_cd_time_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarEquipAffixInfo.left_cd_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

AvatarInfo::AvatarInfo_PropMapEntry::AvatarInfo_PropMapEntry() {}
AvatarInfo::AvatarInfo_PropMapEntry::AvatarInfo_PropMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata AvatarInfo::AvatarInfo_PropMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[129];
}
void AvatarInfo::AvatarInfo_PropMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void AvatarInfo::AvatarInfo_PropMapEntry::MergeFrom(const AvatarInfo_PropMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

AvatarInfo::AvatarInfo_FightPropMapEntry::AvatarInfo_FightPropMapEntry() {}
AvatarInfo::AvatarInfo_FightPropMapEntry::AvatarInfo_FightPropMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata AvatarInfo::AvatarInfo_FightPropMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[130];
}
void AvatarInfo::AvatarInfo_FightPropMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void AvatarInfo::AvatarInfo_FightPropMapEntry::MergeFrom(const AvatarInfo_FightPropMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

AvatarInfo::AvatarInfo_SkillMapEntry::AvatarInfo_SkillMapEntry() {}
AvatarInfo::AvatarInfo_SkillMapEntry::AvatarInfo_SkillMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata AvatarInfo::AvatarInfo_SkillMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[131];
}
void AvatarInfo::AvatarInfo_SkillMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void AvatarInfo::AvatarInfo_SkillMapEntry::MergeFrom(const AvatarInfo_SkillMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

AvatarInfo::AvatarInfo_SkillLevelMapEntry::AvatarInfo_SkillLevelMapEntry() {}
AvatarInfo::AvatarInfo_SkillLevelMapEntry::AvatarInfo_SkillLevelMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata AvatarInfo::AvatarInfo_SkillLevelMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[132];
}
void AvatarInfo::AvatarInfo_SkillLevelMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void AvatarInfo::AvatarInfo_SkillLevelMapEntry::MergeFrom(const AvatarInfo_SkillLevelMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

AvatarInfo::AvatarInfo_ProudSkillExtraLevelMapEntry::AvatarInfo_ProudSkillExtraLevelMapEntry() {}
AvatarInfo::AvatarInfo_ProudSkillExtraLevelMapEntry::AvatarInfo_ProudSkillExtraLevelMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata AvatarInfo::AvatarInfo_ProudSkillExtraLevelMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[133];
}
void AvatarInfo::AvatarInfo_ProudSkillExtraLevelMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void AvatarInfo::AvatarInfo_ProudSkillExtraLevelMapEntry::MergeFrom(const AvatarInfo_ProudSkillExtraLevelMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarInfo::kAvatarIdFieldNumber;
const int AvatarInfo::kGuidFieldNumber;
const int AvatarInfo::kPropMapFieldNumber;
const int AvatarInfo::kLifeStateFieldNumber;
const int AvatarInfo::kEquipGuidListFieldNumber;
const int AvatarInfo::kTalentIdListFieldNumber;
const int AvatarInfo::kFightPropMapFieldNumber;
const int AvatarInfo::kTrialAvatarInfoFieldNumber;
const int AvatarInfo::kSkillMapFieldNumber;
const int AvatarInfo::kSkillDepotIdFieldNumber;
const int AvatarInfo::kFetterInfoFieldNumber;
const int AvatarInfo::kCoreProudSkillLevelFieldNumber;
const int AvatarInfo::kInherentProudSkillListFieldNumber;
const int AvatarInfo::kSkillLevelMapFieldNumber;
const int AvatarInfo::kExpeditionStateFieldNumber;
const int AvatarInfo::kProudSkillExtraLevelMapFieldNumber;
const int AvatarInfo::kIsFocusFieldNumber;
const int AvatarInfo::kAvatarTypeFieldNumber;
const int AvatarInfo::kTeamResonanceListFieldNumber;
const int AvatarInfo::kWearingFlycloakIdFieldNumber;
const int AvatarInfo::kEquipAffixListFieldNumber;
const int AvatarInfo::kBornTimeFieldNumber;
const int AvatarInfo::kPendingPromoteRewardListFieldNumber;
const int AvatarInfo::kCostumeIdFieldNumber;
const int AvatarInfo::kExcelInfoFieldNumber;
const int AvatarInfo::kAnimHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarInfo::AvatarInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarInfo)
}
AvatarInfo::AvatarInfo(const AvatarInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      equip_guid_list_(from.equip_guid_list_),
      talent_id_list_(from.talent_id_list_),
      inherent_proud_skill_list_(from.inherent_proud_skill_list_),
      team_resonance_list_(from.team_resonance_list_),
      equip_affix_list_(from.equip_affix_list_),
      pending_promote_reward_list_(from.pending_promote_reward_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prop_map_.MergeFrom(from.prop_map_);
  fight_prop_map_.MergeFrom(from.fight_prop_map_);
  skill_map_.MergeFrom(from.skill_map_);
  skill_level_map_.MergeFrom(from.skill_level_map_);
  proud_skill_extra_level_map_.MergeFrom(from.proud_skill_extra_level_map_);
  if (from.has_trial_avatar_info()) {
    trial_avatar_info_ = new ::proto::TrialAvatarInfo(*from.trial_avatar_info_);
  } else {
    trial_avatar_info_ = NULL;
  }
  if (from.has_fetter_info()) {
    fetter_info_ = new ::proto::AvatarFetterInfo(*from.fetter_info_);
  } else {
    fetter_info_ = NULL;
  }
  if (from.has_excel_info()) {
    excel_info_ = new ::proto::AvatarExcelInfo(*from.excel_info_);
  } else {
    excel_info_ = NULL;
  }
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&anim_hash_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(anim_hash_));
  // @@protoc_insertion_point(copy_constructor:proto.AvatarInfo)
}

void AvatarInfo::SharedCtor() {
  ::memset(&trial_avatar_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&anim_hash_) -
      reinterpret_cast<char*>(&trial_avatar_info_)) + sizeof(anim_hash_));
  _cached_size_ = 0;
}

AvatarInfo::~AvatarInfo() {
  // @@protoc_insertion_point(destructor:proto.AvatarInfo)
  SharedDtor();
}

void AvatarInfo::SharedDtor() {
  if (this != internal_default_instance()) delete trial_avatar_info_;
  if (this != internal_default_instance()) delete fetter_info_;
  if (this != internal_default_instance()) delete excel_info_;
}

void AvatarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarInfo& AvatarInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarInfo* AvatarInfo::New(::google::protobuf::Arena* arena) const {
  AvatarInfo* n = new AvatarInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prop_map_.Clear();
  equip_guid_list_.Clear();
  talent_id_list_.Clear();
  fight_prop_map_.Clear();
  skill_map_.Clear();
  inherent_proud_skill_list_.Clear();
  skill_level_map_.Clear();
  proud_skill_extra_level_map_.Clear();
  team_resonance_list_.Clear();
  equip_affix_list_.Clear();
  pending_promote_reward_list_.Clear();
  if (GetArenaNoVirtual() == NULL && trial_avatar_info_ != NULL) {
    delete trial_avatar_info_;
  }
  trial_avatar_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && fetter_info_ != NULL) {
    delete fetter_info_;
  }
  fetter_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && excel_info_ != NULL) {
    delete excel_info_;
  }
  excel_info_ = NULL;
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&anim_hash_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(anim_hash_));
  _internal_metadata_.Clear();
}

bool AvatarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 avatar_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .proto.PropValue> prop_map = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          AvatarInfo_PropMapEntry::Parser< ::google::protobuf::internal::MapField<
              AvatarInfo_PropMapEntry,
              ::google::protobuf::uint32, ::proto::PropValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue > > parser(&prop_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 life_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &life_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 equip_guid_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_equip_guid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 42u, input, this->mutable_equip_guid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 talent_id_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_talent_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50u, input, this->mutable_talent_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, float> fight_prop_map = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          AvatarInfo_FightPropMapEntry::Parser< ::google::protobuf::internal::MapField<
              AvatarInfo_FightPropMapEntry,
              ::google::protobuf::uint32, float,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, float > > parser(&fight_prop_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.TrialAvatarInfo trial_avatar_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trial_avatar_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .proto.AvatarSkillInfo> skill_map = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          AvatarInfo_SkillMapEntry::Parser< ::google::protobuf::internal::MapField<
              AvatarInfo_SkillMapEntry,
              ::google::protobuf::uint32, ::proto::AvatarSkillInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarSkillInfo > > parser(&skill_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 skill_depot_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_depot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AvatarFetterInfo fetter_info = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetter_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 core_proud_skill_level = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &core_proud_skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 inherent_proud_skill_list = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_inherent_proud_skill_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 114u, input, this->mutable_inherent_proud_skill_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> skill_level_map = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          AvatarInfo_SkillLevelMapEntry::Parser< ::google::protobuf::internal::MapField<
              AvatarInfo_SkillLevelMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&skill_level_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AvatarExpeditionState expedition_state = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_expedition_state(static_cast< ::proto::AvatarExpeditionState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> proud_skill_extra_level_map = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          AvatarInfo_ProudSkillExtraLevelMapEntry::Parser< ::google::protobuf::internal::MapField<
              AvatarInfo_ProudSkillExtraLevelMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&proud_skill_extra_level_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_focus = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_focus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 avatar_type = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 team_resonance_list = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_team_resonance_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 162u, input, this->mutable_team_resonance_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wearing_flycloak_id = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wearing_flycloak_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.AvatarEquipAffixInfo equip_affix_list = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_affix_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 born_time = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &born_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 pending_promote_reward_list = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pending_promote_reward_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 194u, input, this->mutable_pending_promote_reward_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 costume_id = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costume_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AvatarExcelInfo excel_info = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_excel_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 anim_hash = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &anim_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarInfo)
  return false;
#undef DO_
}

void AvatarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 avatar_id = 1;
  if (this->avatar_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->avatar_id(), output);
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // map<uint32, .proto.PropValue> prop_map = 3;
  if (!this->prop_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->prop_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->prop_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue >::const_iterator
          it = this->prop_map().begin();
          it != this->prop_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarInfo_PropMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(prop_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarInfo_PropMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue >::const_iterator
          it = this->prop_map().begin();
          it != this->prop_map().end(); ++it) {
        entry.reset(prop_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  // uint32 life_state = 4;
  if (this->life_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->life_state(), output);
  }

  // repeated uint64 equip_guid_list = 5;
  if (this->equip_guid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _equip_guid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->equip_guid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->equip_guid_list(i), output);
  }

  // repeated uint32 talent_id_list = 6;
  if (this->talent_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _talent_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->talent_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->talent_id_list(i), output);
  }

  // map<uint32, float> fight_prop_map = 7;
  if (!this->fight_prop_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, float >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->fight_prop_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->fight_prop_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
          it = this->fight_prop_map().begin();
          it != this->fight_prop_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarInfo_FightPropMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(fight_prop_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarInfo_FightPropMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
          it = this->fight_prop_map().begin();
          it != this->fight_prop_map().end(); ++it) {
        entry.reset(fight_prop_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
      }
    }
  }

  // .proto.TrialAvatarInfo trial_avatar_info = 9;
  if (this->has_trial_avatar_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->trial_avatar_info_, output);
  }

  // map<uint32, .proto.AvatarSkillInfo> skill_map = 10;
  if (!this->skill_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarSkillInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->skill_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->skill_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarSkillInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarSkillInfo >::const_iterator
          it = this->skill_map().begin();
          it != this->skill_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarInfo_SkillMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(skill_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarInfo_SkillMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarSkillInfo >::const_iterator
          it = this->skill_map().begin();
          it != this->skill_map().end(); ++it) {
        entry.reset(skill_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
      }
    }
  }

  // uint32 skill_depot_id = 11;
  if (this->skill_depot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->skill_depot_id(), output);
  }

  // .proto.AvatarFetterInfo fetter_info = 12;
  if (this->has_fetter_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->fetter_info_, output);
  }

  // uint32 core_proud_skill_level = 13;
  if (this->core_proud_skill_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->core_proud_skill_level(), output);
  }

  // repeated uint32 inherent_proud_skill_list = 14;
  if (this->inherent_proud_skill_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _inherent_proud_skill_list_cached_byte_size_));
  }
  for (int i = 0, n = this->inherent_proud_skill_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->inherent_proud_skill_list(i), output);
  }

  // map<uint32, uint32> skill_level_map = 15;
  if (!this->skill_level_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->skill_level_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->skill_level_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->skill_level_map().begin();
          it != this->skill_level_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarInfo_SkillLevelMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(skill_level_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarInfo_SkillLevelMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->skill_level_map().begin();
          it != this->skill_level_map().end(); ++it) {
        entry.reset(skill_level_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
      }
    }
  }

  // .proto.AvatarExpeditionState expedition_state = 16;
  if (this->expedition_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->expedition_state(), output);
  }

  // map<uint32, uint32> proud_skill_extra_level_map = 17;
  if (!this->proud_skill_extra_level_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->proud_skill_extra_level_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->proud_skill_extra_level_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->proud_skill_extra_level_map().begin();
          it != this->proud_skill_extra_level_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarInfo_ProudSkillExtraLevelMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(proud_skill_extra_level_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            17, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarInfo_ProudSkillExtraLevelMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->proud_skill_extra_level_map().begin();
          it != this->proud_skill_extra_level_map().end(); ++it) {
        entry.reset(proud_skill_extra_level_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            17, *entry, output);
      }
    }
  }

  // bool is_focus = 18;
  if (this->is_focus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_focus(), output);
  }

  // uint32 avatar_type = 19;
  if (this->avatar_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->avatar_type(), output);
  }

  // repeated uint32 team_resonance_list = 20;
  if (this->team_resonance_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(20, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _team_resonance_list_cached_byte_size_));
  }
  for (int i = 0, n = this->team_resonance_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->team_resonance_list(i), output);
  }

  // uint32 wearing_flycloak_id = 21;
  if (this->wearing_flycloak_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->wearing_flycloak_id(), output);
  }

  // repeated .proto.AvatarEquipAffixInfo equip_affix_list = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equip_affix_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->equip_affix_list(static_cast<int>(i)), output);
  }

  // uint32 born_time = 23;
  if (this->born_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->born_time(), output);
  }

  // repeated uint32 pending_promote_reward_list = 24;
  if (this->pending_promote_reward_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(24, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _pending_promote_reward_list_cached_byte_size_));
  }
  for (int i = 0, n = this->pending_promote_reward_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->pending_promote_reward_list(i), output);
  }

  // uint32 costume_id = 25;
  if (this->costume_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->costume_id(), output);
  }

  // .proto.AvatarExcelInfo excel_info = 26;
  if (this->has_excel_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->excel_info_, output);
  }

  // uint32 anim_hash = 27;
  if (this->anim_hash() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->anim_hash(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarInfo)
}

::google::protobuf::uint8* AvatarInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 avatar_id = 1;
  if (this->avatar_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->avatar_id(), target);
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // map<uint32, .proto.PropValue> prop_map = 3;
  if (!this->prop_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->prop_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->prop_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue >::const_iterator
          it = this->prop_map().begin();
          it != this->prop_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarInfo_PropMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(prop_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarInfo_PropMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue >::const_iterator
          it = this->prop_map().begin();
          it != this->prop_map().end(); ++it) {
        entry.reset(prop_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  // uint32 life_state = 4;
  if (this->life_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->life_state(), target);
  }

  // repeated uint64 equip_guid_list = 5;
  if (this->equip_guid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _equip_guid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->equip_guid_list_, target);
  }

  // repeated uint32 talent_id_list = 6;
  if (this->talent_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _talent_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->talent_id_list_, target);
  }

  // map<uint32, float> fight_prop_map = 7;
  if (!this->fight_prop_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, float >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->fight_prop_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->fight_prop_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
          it = this->fight_prop_map().begin();
          it != this->fight_prop_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarInfo_FightPropMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(fight_prop_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarInfo_FightPropMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
          it = this->fight_prop_map().begin();
          it != this->fight_prop_map().end(); ++it) {
        entry.reset(fight_prop_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
      }
    }
  }

  // .proto.TrialAvatarInfo trial_avatar_info = 9;
  if (this->has_trial_avatar_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->trial_avatar_info_, deterministic, target);
  }

  // map<uint32, .proto.AvatarSkillInfo> skill_map = 10;
  if (!this->skill_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarSkillInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->skill_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->skill_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarSkillInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarSkillInfo >::const_iterator
          it = this->skill_map().begin();
          it != this->skill_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarInfo_SkillMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(skill_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarInfo_SkillMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarSkillInfo >::const_iterator
          it = this->skill_map().begin();
          it != this->skill_map().end(); ++it) {
        entry.reset(skill_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
      }
    }
  }

  // uint32 skill_depot_id = 11;
  if (this->skill_depot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->skill_depot_id(), target);
  }

  // .proto.AvatarFetterInfo fetter_info = 12;
  if (this->has_fetter_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->fetter_info_, deterministic, target);
  }

  // uint32 core_proud_skill_level = 13;
  if (this->core_proud_skill_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->core_proud_skill_level(), target);
  }

  // repeated uint32 inherent_proud_skill_list = 14;
  if (this->inherent_proud_skill_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _inherent_proud_skill_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->inherent_proud_skill_list_, target);
  }

  // map<uint32, uint32> skill_level_map = 15;
  if (!this->skill_level_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->skill_level_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->skill_level_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->skill_level_map().begin();
          it != this->skill_level_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarInfo_SkillLevelMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(skill_level_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarInfo_SkillLevelMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->skill_level_map().begin();
          it != this->skill_level_map().end(); ++it) {
        entry.reset(skill_level_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
      }
    }
  }

  // .proto.AvatarExpeditionState expedition_state = 16;
  if (this->expedition_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->expedition_state(), target);
  }

  // map<uint32, uint32> proud_skill_extra_level_map = 17;
  if (!this->proud_skill_extra_level_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->proud_skill_extra_level_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->proud_skill_extra_level_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->proud_skill_extra_level_map().begin();
          it != this->proud_skill_extra_level_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarInfo_ProudSkillExtraLevelMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(proud_skill_extra_level_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       17, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarInfo_ProudSkillExtraLevelMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->proud_skill_extra_level_map().begin();
          it != this->proud_skill_extra_level_map().end(); ++it) {
        entry.reset(proud_skill_extra_level_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       17, *entry, deterministic, target);
;
      }
    }
  }

  // bool is_focus = 18;
  if (this->is_focus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_focus(), target);
  }

  // uint32 avatar_type = 19;
  if (this->avatar_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->avatar_type(), target);
  }

  // repeated uint32 team_resonance_list = 20;
  if (this->team_resonance_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      20,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _team_resonance_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->team_resonance_list_, target);
  }

  // uint32 wearing_flycloak_id = 21;
  if (this->wearing_flycloak_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->wearing_flycloak_id(), target);
  }

  // repeated .proto.AvatarEquipAffixInfo equip_affix_list = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equip_affix_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, this->equip_affix_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 born_time = 23;
  if (this->born_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->born_time(), target);
  }

  // repeated uint32 pending_promote_reward_list = 24;
  if (this->pending_promote_reward_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      24,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _pending_promote_reward_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->pending_promote_reward_list_, target);
  }

  // uint32 costume_id = 25;
  if (this->costume_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->costume_id(), target);
  }

  // .proto.AvatarExcelInfo excel_info = 26;
  if (this->has_excel_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->excel_info_, deterministic, target);
  }

  // uint32 anim_hash = 27;
  if (this->anim_hash() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->anim_hash(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarInfo)
  return target;
}

size_t AvatarInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, .proto.PropValue> prop_map = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->prop_map_size());
  {
    ::google::protobuf::scoped_ptr<AvatarInfo_PropMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue >::const_iterator
        it = this->prop_map().begin();
        it != this->prop_map().end(); ++it) {
      entry.reset(prop_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated uint64 equip_guid_list = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->equip_guid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _equip_guid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 talent_id_list = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->talent_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _talent_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<uint32, float> fight_prop_map = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fight_prop_map_size());
  {
    ::google::protobuf::scoped_ptr<AvatarInfo_FightPropMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
        it = this->fight_prop_map().begin();
        it != this->fight_prop_map().end(); ++it) {
      entry.reset(fight_prop_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint32, .proto.AvatarSkillInfo> skill_map = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->skill_map_size());
  {
    ::google::protobuf::scoped_ptr<AvatarInfo_SkillMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarSkillInfo >::const_iterator
        it = this->skill_map().begin();
        it != this->skill_map().end(); ++it) {
      entry.reset(skill_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated uint32 inherent_proud_skill_list = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->inherent_proud_skill_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _inherent_proud_skill_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<uint32, uint32> skill_level_map = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->skill_level_map_size());
  {
    ::google::protobuf::scoped_ptr<AvatarInfo_SkillLevelMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->skill_level_map().begin();
        it != this->skill_level_map().end(); ++it) {
      entry.reset(skill_level_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint32, uint32> proud_skill_extra_level_map = 17;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->proud_skill_extra_level_map_size());
  {
    ::google::protobuf::scoped_ptr<AvatarInfo_ProudSkillExtraLevelMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->proud_skill_extra_level_map().begin();
        it != this->proud_skill_extra_level_map().end(); ++it) {
      entry.reset(proud_skill_extra_level_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated uint32 team_resonance_list = 20;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->team_resonance_list_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _team_resonance_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto.AvatarEquipAffixInfo equip_affix_list = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->equip_affix_list_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip_affix_list(static_cast<int>(i)));
    }
  }

  // repeated uint32 pending_promote_reward_list = 24;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->pending_promote_reward_list_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pending_promote_reward_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .proto.TrialAvatarInfo trial_avatar_info = 9;
  if (this->has_trial_avatar_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trial_avatar_info_);
  }

  // .proto.AvatarFetterInfo fetter_info = 12;
  if (this->has_fetter_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fetter_info_);
  }

  // .proto.AvatarExcelInfo excel_info = 26;
  if (this->has_excel_info()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->excel_info_);
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // uint32 avatar_id = 1;
  if (this->avatar_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avatar_id());
  }

  // uint32 life_state = 4;
  if (this->life_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->life_state());
  }

  // uint32 skill_depot_id = 11;
  if (this->skill_depot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_depot_id());
  }

  // uint32 core_proud_skill_level = 13;
  if (this->core_proud_skill_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->core_proud_skill_level());
  }

  // .proto.AvatarExpeditionState expedition_state = 16;
  if (this->expedition_state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->expedition_state());
  }

  // bool is_focus = 18;
  if (this->is_focus() != 0) {
    total_size += 2 + 1;
  }

  // uint32 avatar_type = 19;
  if (this->avatar_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avatar_type());
  }

  // uint32 wearing_flycloak_id = 21;
  if (this->wearing_flycloak_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wearing_flycloak_id());
  }

  // uint32 born_time = 23;
  if (this->born_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->born_time());
  }

  // uint32 costume_id = 25;
  if (this->costume_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->costume_id());
  }

  // uint32 anim_hash = 27;
  if (this->anim_hash() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->anim_hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarInfo)
    MergeFrom(*source);
  }
}

void AvatarInfo::MergeFrom(const AvatarInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prop_map_.MergeFrom(from.prop_map_);
  equip_guid_list_.MergeFrom(from.equip_guid_list_);
  talent_id_list_.MergeFrom(from.talent_id_list_);
  fight_prop_map_.MergeFrom(from.fight_prop_map_);
  skill_map_.MergeFrom(from.skill_map_);
  inherent_proud_skill_list_.MergeFrom(from.inherent_proud_skill_list_);
  skill_level_map_.MergeFrom(from.skill_level_map_);
  proud_skill_extra_level_map_.MergeFrom(from.proud_skill_extra_level_map_);
  team_resonance_list_.MergeFrom(from.team_resonance_list_);
  equip_affix_list_.MergeFrom(from.equip_affix_list_);
  pending_promote_reward_list_.MergeFrom(from.pending_promote_reward_list_);
  if (from.has_trial_avatar_info()) {
    mutable_trial_avatar_info()->::proto::TrialAvatarInfo::MergeFrom(from.trial_avatar_info());
  }
  if (from.has_fetter_info()) {
    mutable_fetter_info()->::proto::AvatarFetterInfo::MergeFrom(from.fetter_info());
  }
  if (from.has_excel_info()) {
    mutable_excel_info()->::proto::AvatarExcelInfo::MergeFrom(from.excel_info());
  }
  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.avatar_id() != 0) {
    set_avatar_id(from.avatar_id());
  }
  if (from.life_state() != 0) {
    set_life_state(from.life_state());
  }
  if (from.skill_depot_id() != 0) {
    set_skill_depot_id(from.skill_depot_id());
  }
  if (from.core_proud_skill_level() != 0) {
    set_core_proud_skill_level(from.core_proud_skill_level());
  }
  if (from.expedition_state() != 0) {
    set_expedition_state(from.expedition_state());
  }
  if (from.is_focus() != 0) {
    set_is_focus(from.is_focus());
  }
  if (from.avatar_type() != 0) {
    set_avatar_type(from.avatar_type());
  }
  if (from.wearing_flycloak_id() != 0) {
    set_wearing_flycloak_id(from.wearing_flycloak_id());
  }
  if (from.born_time() != 0) {
    set_born_time(from.born_time());
  }
  if (from.costume_id() != 0) {
    set_costume_id(from.costume_id());
  }
  if (from.anim_hash() != 0) {
    set_anim_hash(from.anim_hash());
  }
}

void AvatarInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarInfo::CopyFrom(const AvatarInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarInfo::IsInitialized() const {
  return true;
}

void AvatarInfo::Swap(AvatarInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarInfo::InternalSwap(AvatarInfo* other) {
  using std::swap;
  prop_map_.Swap(&other->prop_map_);
  equip_guid_list_.InternalSwap(&other->equip_guid_list_);
  talent_id_list_.InternalSwap(&other->talent_id_list_);
  fight_prop_map_.Swap(&other->fight_prop_map_);
  skill_map_.Swap(&other->skill_map_);
  inherent_proud_skill_list_.InternalSwap(&other->inherent_proud_skill_list_);
  skill_level_map_.Swap(&other->skill_level_map_);
  proud_skill_extra_level_map_.Swap(&other->proud_skill_extra_level_map_);
  team_resonance_list_.InternalSwap(&other->team_resonance_list_);
  equip_affix_list_.InternalSwap(&other->equip_affix_list_);
  pending_promote_reward_list_.InternalSwap(&other->pending_promote_reward_list_);
  swap(trial_avatar_info_, other->trial_avatar_info_);
  swap(fetter_info_, other->fetter_info_);
  swap(excel_info_, other->excel_info_);
  swap(guid_, other->guid_);
  swap(avatar_id_, other->avatar_id_);
  swap(life_state_, other->life_state_);
  swap(skill_depot_id_, other->skill_depot_id_);
  swap(core_proud_skill_level_, other->core_proud_skill_level_);
  swap(expedition_state_, other->expedition_state_);
  swap(is_focus_, other->is_focus_);
  swap(avatar_type_, other->avatar_type_);
  swap(wearing_flycloak_id_, other->wearing_flycloak_id_);
  swap(born_time_, other->born_time_);
  swap(costume_id_, other->costume_id_);
  swap(anim_hash_, other->anim_hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarInfo

// uint32 avatar_id = 1;
void AvatarInfo::clear_avatar_id() {
  avatar_id_ = 0u;
}
::google::protobuf::uint32 AvatarInfo::avatar_id() const {
  // @@protoc_insertion_point(field_get:proto.AvatarInfo.avatar_id)
  return avatar_id_;
}
void AvatarInfo::set_avatar_id(::google::protobuf::uint32 value) {
  
  avatar_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarInfo.avatar_id)
}

// uint64 guid = 2;
void AvatarInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AvatarInfo::guid() const {
  // @@protoc_insertion_point(field_get:proto.AvatarInfo.guid)
  return guid_;
}
void AvatarInfo::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarInfo.guid)
}

// map<uint32, .proto.PropValue> prop_map = 3;
int AvatarInfo::prop_map_size() const {
  return prop_map_.size();
}
void AvatarInfo::clear_prop_map() {
  prop_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue >&
AvatarInfo::prop_map() const {
  // @@protoc_insertion_point(field_map:proto.AvatarInfo.prop_map)
  return prop_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue >*
AvatarInfo::mutable_prop_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.AvatarInfo.prop_map)
  return prop_map_.MutableMap();
}

// uint32 life_state = 4;
void AvatarInfo::clear_life_state() {
  life_state_ = 0u;
}
::google::protobuf::uint32 AvatarInfo::life_state() const {
  // @@protoc_insertion_point(field_get:proto.AvatarInfo.life_state)
  return life_state_;
}
void AvatarInfo::set_life_state(::google::protobuf::uint32 value) {
  
  life_state_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarInfo.life_state)
}

// repeated uint64 equip_guid_list = 5;
int AvatarInfo::equip_guid_list_size() const {
  return equip_guid_list_.size();
}
void AvatarInfo::clear_equip_guid_list() {
  equip_guid_list_.Clear();
}
::google::protobuf::uint64 AvatarInfo::equip_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AvatarInfo.equip_guid_list)
  return equip_guid_list_.Get(index);
}
void AvatarInfo::set_equip_guid_list(int index, ::google::protobuf::uint64 value) {
  equip_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.AvatarInfo.equip_guid_list)
}
void AvatarInfo::add_equip_guid_list(::google::protobuf::uint64 value) {
  equip_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.AvatarInfo.equip_guid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AvatarInfo::equip_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.AvatarInfo.equip_guid_list)
  return equip_guid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AvatarInfo::mutable_equip_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AvatarInfo.equip_guid_list)
  return &equip_guid_list_;
}

// repeated uint32 talent_id_list = 6;
int AvatarInfo::talent_id_list_size() const {
  return talent_id_list_.size();
}
void AvatarInfo::clear_talent_id_list() {
  talent_id_list_.Clear();
}
::google::protobuf::uint32 AvatarInfo::talent_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AvatarInfo.talent_id_list)
  return talent_id_list_.Get(index);
}
void AvatarInfo::set_talent_id_list(int index, ::google::protobuf::uint32 value) {
  talent_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.AvatarInfo.talent_id_list)
}
void AvatarInfo::add_talent_id_list(::google::protobuf::uint32 value) {
  talent_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.AvatarInfo.talent_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AvatarInfo::talent_id_list() const {
  // @@protoc_insertion_point(field_list:proto.AvatarInfo.talent_id_list)
  return talent_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AvatarInfo::mutable_talent_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AvatarInfo.talent_id_list)
  return &talent_id_list_;
}

// map<uint32, float> fight_prop_map = 7;
int AvatarInfo::fight_prop_map_size() const {
  return fight_prop_map_.size();
}
void AvatarInfo::clear_fight_prop_map() {
  fight_prop_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, float >&
AvatarInfo::fight_prop_map() const {
  // @@protoc_insertion_point(field_map:proto.AvatarInfo.fight_prop_map)
  return fight_prop_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, float >*
AvatarInfo::mutable_fight_prop_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.AvatarInfo.fight_prop_map)
  return fight_prop_map_.MutableMap();
}

// .proto.TrialAvatarInfo trial_avatar_info = 9;
bool AvatarInfo::has_trial_avatar_info() const {
  return this != internal_default_instance() && trial_avatar_info_ != NULL;
}
void AvatarInfo::clear_trial_avatar_info() {
  if (GetArenaNoVirtual() == NULL && trial_avatar_info_ != NULL) delete trial_avatar_info_;
  trial_avatar_info_ = NULL;
}
const ::proto::TrialAvatarInfo& AvatarInfo::trial_avatar_info() const {
  const ::proto::TrialAvatarInfo* p = trial_avatar_info_;
  // @@protoc_insertion_point(field_get:proto.AvatarInfo.trial_avatar_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::TrialAvatarInfo*>(
      &::proto::_TrialAvatarInfo_default_instance_);
}
::proto::TrialAvatarInfo* AvatarInfo::mutable_trial_avatar_info() {
  
  if (trial_avatar_info_ == NULL) {
    trial_avatar_info_ = new ::proto::TrialAvatarInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.AvatarInfo.trial_avatar_info)
  return trial_avatar_info_;
}
::proto::TrialAvatarInfo* AvatarInfo::release_trial_avatar_info() {
  // @@protoc_insertion_point(field_release:proto.AvatarInfo.trial_avatar_info)
  
  ::proto::TrialAvatarInfo* temp = trial_avatar_info_;
  trial_avatar_info_ = NULL;
  return temp;
}
void AvatarInfo::set_allocated_trial_avatar_info(::proto::TrialAvatarInfo* trial_avatar_info) {
  delete trial_avatar_info_;
  trial_avatar_info_ = trial_avatar_info;
  if (trial_avatar_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AvatarInfo.trial_avatar_info)
}

// map<uint32, .proto.AvatarSkillInfo> skill_map = 10;
int AvatarInfo::skill_map_size() const {
  return skill_map_.size();
}
void AvatarInfo::clear_skill_map() {
  skill_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarSkillInfo >&
AvatarInfo::skill_map() const {
  // @@protoc_insertion_point(field_map:proto.AvatarInfo.skill_map)
  return skill_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarSkillInfo >*
AvatarInfo::mutable_skill_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.AvatarInfo.skill_map)
  return skill_map_.MutableMap();
}

// uint32 skill_depot_id = 11;
void AvatarInfo::clear_skill_depot_id() {
  skill_depot_id_ = 0u;
}
::google::protobuf::uint32 AvatarInfo::skill_depot_id() const {
  // @@protoc_insertion_point(field_get:proto.AvatarInfo.skill_depot_id)
  return skill_depot_id_;
}
void AvatarInfo::set_skill_depot_id(::google::protobuf::uint32 value) {
  
  skill_depot_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarInfo.skill_depot_id)
}

// .proto.AvatarFetterInfo fetter_info = 12;
bool AvatarInfo::has_fetter_info() const {
  return this != internal_default_instance() && fetter_info_ != NULL;
}
void AvatarInfo::clear_fetter_info() {
  if (GetArenaNoVirtual() == NULL && fetter_info_ != NULL) delete fetter_info_;
  fetter_info_ = NULL;
}
const ::proto::AvatarFetterInfo& AvatarInfo::fetter_info() const {
  const ::proto::AvatarFetterInfo* p = fetter_info_;
  // @@protoc_insertion_point(field_get:proto.AvatarInfo.fetter_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::AvatarFetterInfo*>(
      &::proto::_AvatarFetterInfo_default_instance_);
}
::proto::AvatarFetterInfo* AvatarInfo::mutable_fetter_info() {
  
  if (fetter_info_ == NULL) {
    fetter_info_ = new ::proto::AvatarFetterInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.AvatarInfo.fetter_info)
  return fetter_info_;
}
::proto::AvatarFetterInfo* AvatarInfo::release_fetter_info() {
  // @@protoc_insertion_point(field_release:proto.AvatarInfo.fetter_info)
  
  ::proto::AvatarFetterInfo* temp = fetter_info_;
  fetter_info_ = NULL;
  return temp;
}
void AvatarInfo::set_allocated_fetter_info(::proto::AvatarFetterInfo* fetter_info) {
  delete fetter_info_;
  fetter_info_ = fetter_info;
  if (fetter_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AvatarInfo.fetter_info)
}

// uint32 core_proud_skill_level = 13;
void AvatarInfo::clear_core_proud_skill_level() {
  core_proud_skill_level_ = 0u;
}
::google::protobuf::uint32 AvatarInfo::core_proud_skill_level() const {
  // @@protoc_insertion_point(field_get:proto.AvatarInfo.core_proud_skill_level)
  return core_proud_skill_level_;
}
void AvatarInfo::set_core_proud_skill_level(::google::protobuf::uint32 value) {
  
  core_proud_skill_level_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarInfo.core_proud_skill_level)
}

// repeated uint32 inherent_proud_skill_list = 14;
int AvatarInfo::inherent_proud_skill_list_size() const {
  return inherent_proud_skill_list_.size();
}
void AvatarInfo::clear_inherent_proud_skill_list() {
  inherent_proud_skill_list_.Clear();
}
::google::protobuf::uint32 AvatarInfo::inherent_proud_skill_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AvatarInfo.inherent_proud_skill_list)
  return inherent_proud_skill_list_.Get(index);
}
void AvatarInfo::set_inherent_proud_skill_list(int index, ::google::protobuf::uint32 value) {
  inherent_proud_skill_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.AvatarInfo.inherent_proud_skill_list)
}
void AvatarInfo::add_inherent_proud_skill_list(::google::protobuf::uint32 value) {
  inherent_proud_skill_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.AvatarInfo.inherent_proud_skill_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AvatarInfo::inherent_proud_skill_list() const {
  // @@protoc_insertion_point(field_list:proto.AvatarInfo.inherent_proud_skill_list)
  return inherent_proud_skill_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AvatarInfo::mutable_inherent_proud_skill_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AvatarInfo.inherent_proud_skill_list)
  return &inherent_proud_skill_list_;
}

// map<uint32, uint32> skill_level_map = 15;
int AvatarInfo::skill_level_map_size() const {
  return skill_level_map_.size();
}
void AvatarInfo::clear_skill_level_map() {
  skill_level_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
AvatarInfo::skill_level_map() const {
  // @@protoc_insertion_point(field_map:proto.AvatarInfo.skill_level_map)
  return skill_level_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
AvatarInfo::mutable_skill_level_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.AvatarInfo.skill_level_map)
  return skill_level_map_.MutableMap();
}

// .proto.AvatarExpeditionState expedition_state = 16;
void AvatarInfo::clear_expedition_state() {
  expedition_state_ = 0;
}
::proto::AvatarExpeditionState AvatarInfo::expedition_state() const {
  // @@protoc_insertion_point(field_get:proto.AvatarInfo.expedition_state)
  return static_cast< ::proto::AvatarExpeditionState >(expedition_state_);
}
void AvatarInfo::set_expedition_state(::proto::AvatarExpeditionState value) {
  
  expedition_state_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarInfo.expedition_state)
}

// map<uint32, uint32> proud_skill_extra_level_map = 17;
int AvatarInfo::proud_skill_extra_level_map_size() const {
  return proud_skill_extra_level_map_.size();
}
void AvatarInfo::clear_proud_skill_extra_level_map() {
  proud_skill_extra_level_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
AvatarInfo::proud_skill_extra_level_map() const {
  // @@protoc_insertion_point(field_map:proto.AvatarInfo.proud_skill_extra_level_map)
  return proud_skill_extra_level_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
AvatarInfo::mutable_proud_skill_extra_level_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.AvatarInfo.proud_skill_extra_level_map)
  return proud_skill_extra_level_map_.MutableMap();
}

// bool is_focus = 18;
void AvatarInfo::clear_is_focus() {
  is_focus_ = false;
}
bool AvatarInfo::is_focus() const {
  // @@protoc_insertion_point(field_get:proto.AvatarInfo.is_focus)
  return is_focus_;
}
void AvatarInfo::set_is_focus(bool value) {
  
  is_focus_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarInfo.is_focus)
}

// uint32 avatar_type = 19;
void AvatarInfo::clear_avatar_type() {
  avatar_type_ = 0u;
}
::google::protobuf::uint32 AvatarInfo::avatar_type() const {
  // @@protoc_insertion_point(field_get:proto.AvatarInfo.avatar_type)
  return avatar_type_;
}
void AvatarInfo::set_avatar_type(::google::protobuf::uint32 value) {
  
  avatar_type_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarInfo.avatar_type)
}

// repeated uint32 team_resonance_list = 20;
int AvatarInfo::team_resonance_list_size() const {
  return team_resonance_list_.size();
}
void AvatarInfo::clear_team_resonance_list() {
  team_resonance_list_.Clear();
}
::google::protobuf::uint32 AvatarInfo::team_resonance_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AvatarInfo.team_resonance_list)
  return team_resonance_list_.Get(index);
}
void AvatarInfo::set_team_resonance_list(int index, ::google::protobuf::uint32 value) {
  team_resonance_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.AvatarInfo.team_resonance_list)
}
void AvatarInfo::add_team_resonance_list(::google::protobuf::uint32 value) {
  team_resonance_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.AvatarInfo.team_resonance_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AvatarInfo::team_resonance_list() const {
  // @@protoc_insertion_point(field_list:proto.AvatarInfo.team_resonance_list)
  return team_resonance_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AvatarInfo::mutable_team_resonance_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AvatarInfo.team_resonance_list)
  return &team_resonance_list_;
}

// uint32 wearing_flycloak_id = 21;
void AvatarInfo::clear_wearing_flycloak_id() {
  wearing_flycloak_id_ = 0u;
}
::google::protobuf::uint32 AvatarInfo::wearing_flycloak_id() const {
  // @@protoc_insertion_point(field_get:proto.AvatarInfo.wearing_flycloak_id)
  return wearing_flycloak_id_;
}
void AvatarInfo::set_wearing_flycloak_id(::google::protobuf::uint32 value) {
  
  wearing_flycloak_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarInfo.wearing_flycloak_id)
}

// repeated .proto.AvatarEquipAffixInfo equip_affix_list = 22;
int AvatarInfo::equip_affix_list_size() const {
  return equip_affix_list_.size();
}
void AvatarInfo::clear_equip_affix_list() {
  equip_affix_list_.Clear();
}
const ::proto::AvatarEquipAffixInfo& AvatarInfo::equip_affix_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AvatarInfo.equip_affix_list)
  return equip_affix_list_.Get(index);
}
::proto::AvatarEquipAffixInfo* AvatarInfo::mutable_equip_affix_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.AvatarInfo.equip_affix_list)
  return equip_affix_list_.Mutable(index);
}
::proto::AvatarEquipAffixInfo* AvatarInfo::add_equip_affix_list() {
  // @@protoc_insertion_point(field_add:proto.AvatarInfo.equip_affix_list)
  return equip_affix_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::AvatarEquipAffixInfo >*
AvatarInfo::mutable_equip_affix_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AvatarInfo.equip_affix_list)
  return &equip_affix_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::AvatarEquipAffixInfo >&
AvatarInfo::equip_affix_list() const {
  // @@protoc_insertion_point(field_list:proto.AvatarInfo.equip_affix_list)
  return equip_affix_list_;
}

// uint32 born_time = 23;
void AvatarInfo::clear_born_time() {
  born_time_ = 0u;
}
::google::protobuf::uint32 AvatarInfo::born_time() const {
  // @@protoc_insertion_point(field_get:proto.AvatarInfo.born_time)
  return born_time_;
}
void AvatarInfo::set_born_time(::google::protobuf::uint32 value) {
  
  born_time_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarInfo.born_time)
}

// repeated uint32 pending_promote_reward_list = 24;
int AvatarInfo::pending_promote_reward_list_size() const {
  return pending_promote_reward_list_.size();
}
void AvatarInfo::clear_pending_promote_reward_list() {
  pending_promote_reward_list_.Clear();
}
::google::protobuf::uint32 AvatarInfo::pending_promote_reward_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AvatarInfo.pending_promote_reward_list)
  return pending_promote_reward_list_.Get(index);
}
void AvatarInfo::set_pending_promote_reward_list(int index, ::google::protobuf::uint32 value) {
  pending_promote_reward_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.AvatarInfo.pending_promote_reward_list)
}
void AvatarInfo::add_pending_promote_reward_list(::google::protobuf::uint32 value) {
  pending_promote_reward_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.AvatarInfo.pending_promote_reward_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AvatarInfo::pending_promote_reward_list() const {
  // @@protoc_insertion_point(field_list:proto.AvatarInfo.pending_promote_reward_list)
  return pending_promote_reward_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AvatarInfo::mutable_pending_promote_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AvatarInfo.pending_promote_reward_list)
  return &pending_promote_reward_list_;
}

// uint32 costume_id = 25;
void AvatarInfo::clear_costume_id() {
  costume_id_ = 0u;
}
::google::protobuf::uint32 AvatarInfo::costume_id() const {
  // @@protoc_insertion_point(field_get:proto.AvatarInfo.costume_id)
  return costume_id_;
}
void AvatarInfo::set_costume_id(::google::protobuf::uint32 value) {
  
  costume_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarInfo.costume_id)
}

// .proto.AvatarExcelInfo excel_info = 26;
bool AvatarInfo::has_excel_info() const {
  return this != internal_default_instance() && excel_info_ != NULL;
}
void AvatarInfo::clear_excel_info() {
  if (GetArenaNoVirtual() == NULL && excel_info_ != NULL) delete excel_info_;
  excel_info_ = NULL;
}
const ::proto::AvatarExcelInfo& AvatarInfo::excel_info() const {
  const ::proto::AvatarExcelInfo* p = excel_info_;
  // @@protoc_insertion_point(field_get:proto.AvatarInfo.excel_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::AvatarExcelInfo*>(
      &::proto::_AvatarExcelInfo_default_instance_);
}
::proto::AvatarExcelInfo* AvatarInfo::mutable_excel_info() {
  
  if (excel_info_ == NULL) {
    excel_info_ = new ::proto::AvatarExcelInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.AvatarInfo.excel_info)
  return excel_info_;
}
::proto::AvatarExcelInfo* AvatarInfo::release_excel_info() {
  // @@protoc_insertion_point(field_release:proto.AvatarInfo.excel_info)
  
  ::proto::AvatarExcelInfo* temp = excel_info_;
  excel_info_ = NULL;
  return temp;
}
void AvatarInfo::set_allocated_excel_info(::proto::AvatarExcelInfo* excel_info) {
  delete excel_info_;
  excel_info_ = excel_info;
  if (excel_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AvatarInfo.excel_info)
}

// uint32 anim_hash = 27;
void AvatarInfo::clear_anim_hash() {
  anim_hash_ = 0u;
}
::google::protobuf::uint32 AvatarInfo::anim_hash() const {
  // @@protoc_insertion_point(field_get:proto.AvatarInfo.anim_hash)
  return anim_hash_;
}
void AvatarInfo::set_anim_hash(::google::protobuf::uint32 value) {
  
  anim_hash_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarInfo.anim_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShowEquip::kItemIdFieldNumber;
const int ShowEquip::kReliquaryFieldNumber;
const int ShowEquip::kWeaponFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShowEquip::ShowEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ShowEquip)
}
ShowEquip::ShowEquip(const ShowEquip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_id_ = from.item_id_;
  clear_has_detail();
  switch (from.detail_case()) {
    case kReliquary: {
      mutable_reliquary()->::proto::Reliquary::MergeFrom(from.reliquary());
      break;
    }
    case kWeapon: {
      mutable_weapon()->::proto::Weapon::MergeFrom(from.weapon());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.ShowEquip)
}

void ShowEquip::SharedCtor() {
  item_id_ = 0u;
  clear_has_detail();
  _cached_size_ = 0;
}

ShowEquip::~ShowEquip() {
  // @@protoc_insertion_point(destructor:proto.ShowEquip)
  SharedDtor();
}

void ShowEquip::SharedDtor() {
  if (has_detail()) {
    clear_detail();
  }
}

void ShowEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowEquip::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShowEquip& ShowEquip::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShowEquip* ShowEquip::New(::google::protobuf::Arena* arena) const {
  ShowEquip* n = new ShowEquip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShowEquip::clear_detail() {
// @@protoc_insertion_point(one_of_clear_start:proto.ShowEquip)
  switch (detail_case()) {
    case kReliquary: {
      delete detail_.reliquary_;
      break;
    }
    case kWeapon: {
      delete detail_.weapon_;
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DETAIL_NOT_SET;
}


void ShowEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ShowEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_id_ = 0u;
  clear_detail();
  _internal_metadata_.Clear();
}

bool ShowEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ShowEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Reliquary reliquary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reliquary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Weapon weapon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weapon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ShowEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ShowEquip)
  return false;
#undef DO_
}

void ShowEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ShowEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // .proto.Reliquary reliquary = 2;
  if (has_reliquary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *detail_.reliquary_, output);
  }

  // .proto.Weapon weapon = 3;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *detail_.weapon_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ShowEquip)
}

::google::protobuf::uint8* ShowEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ShowEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // .proto.Reliquary reliquary = 2;
  if (has_reliquary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *detail_.reliquary_, deterministic, target);
  }

  // .proto.Weapon weapon = 3;
  if (has_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *detail_.weapon_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ShowEquip)
  return target;
}

size_t ShowEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ShowEquip)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_id());
  }

  switch (detail_case()) {
    // .proto.Reliquary reliquary = 2;
    case kReliquary: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.reliquary_);
      break;
    }
    // .proto.Weapon weapon = 3;
    case kWeapon: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.weapon_);
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ShowEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowEquip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShowEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ShowEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ShowEquip)
    MergeFrom(*source);
  }
}

void ShowEquip::MergeFrom(const ShowEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ShowEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.item_id() != 0) {
    set_item_id(from.item_id());
  }
  switch (from.detail_case()) {
    case kReliquary: {
      mutable_reliquary()->::proto::Reliquary::MergeFrom(from.reliquary());
      break;
    }
    case kWeapon: {
      mutable_weapon()->::proto::Weapon::MergeFrom(from.weapon());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
}

void ShowEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ShowEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowEquip::CopyFrom(const ShowEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ShowEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowEquip::IsInitialized() const {
  return true;
}

void ShowEquip::Swap(ShowEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShowEquip::InternalSwap(ShowEquip* other) {
  using std::swap;
  swap(item_id_, other->item_id_);
  swap(detail_, other->detail_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShowEquip::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShowEquip

// uint32 item_id = 1;
void ShowEquip::clear_item_id() {
  item_id_ = 0u;
}
::google::protobuf::uint32 ShowEquip::item_id() const {
  // @@protoc_insertion_point(field_get:proto.ShowEquip.item_id)
  return item_id_;
}
void ShowEquip::set_item_id(::google::protobuf::uint32 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ShowEquip.item_id)
}

// .proto.Reliquary reliquary = 2;
bool ShowEquip::has_reliquary() const {
  return detail_case() == kReliquary;
}
void ShowEquip::set_has_reliquary() {
  _oneof_case_[0] = kReliquary;
}
void ShowEquip::clear_reliquary() {
  if (has_reliquary()) {
    delete detail_.reliquary_;
    clear_has_detail();
  }
}
 const ::proto::Reliquary& ShowEquip::reliquary() const {
  // @@protoc_insertion_point(field_get:proto.ShowEquip.reliquary)
  return has_reliquary()
      ? *detail_.reliquary_
      : ::proto::Reliquary::default_instance();
}
::proto::Reliquary* ShowEquip::mutable_reliquary() {
  if (!has_reliquary()) {
    clear_detail();
    set_has_reliquary();
    detail_.reliquary_ = new ::proto::Reliquary;
  }
  // @@protoc_insertion_point(field_mutable:proto.ShowEquip.reliquary)
  return detail_.reliquary_;
}
::proto::Reliquary* ShowEquip::release_reliquary() {
  // @@protoc_insertion_point(field_release:proto.ShowEquip.reliquary)
  if (has_reliquary()) {
    clear_has_detail();
    ::proto::Reliquary* temp = detail_.reliquary_;
    detail_.reliquary_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ShowEquip::set_allocated_reliquary(::proto::Reliquary* reliquary) {
  clear_detail();
  if (reliquary) {
    set_has_reliquary();
    detail_.reliquary_ = reliquary;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ShowEquip.reliquary)
}

// .proto.Weapon weapon = 3;
bool ShowEquip::has_weapon() const {
  return detail_case() == kWeapon;
}
void ShowEquip::set_has_weapon() {
  _oneof_case_[0] = kWeapon;
}
void ShowEquip::clear_weapon() {
  if (has_weapon()) {
    delete detail_.weapon_;
    clear_has_detail();
  }
}
 const ::proto::Weapon& ShowEquip::weapon() const {
  // @@protoc_insertion_point(field_get:proto.ShowEquip.weapon)
  return has_weapon()
      ? *detail_.weapon_
      : ::proto::Weapon::default_instance();
}
::proto::Weapon* ShowEquip::mutable_weapon() {
  if (!has_weapon()) {
    clear_detail();
    set_has_weapon();
    detail_.weapon_ = new ::proto::Weapon;
  }
  // @@protoc_insertion_point(field_mutable:proto.ShowEquip.weapon)
  return detail_.weapon_;
}
::proto::Weapon* ShowEquip::release_weapon() {
  // @@protoc_insertion_point(field_release:proto.ShowEquip.weapon)
  if (has_weapon()) {
    clear_has_detail();
    ::proto::Weapon* temp = detail_.weapon_;
    detail_.weapon_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ShowEquip::set_allocated_weapon(::proto::Weapon* weapon) {
  clear_detail();
  if (weapon) {
    set_has_weapon();
    detail_.weapon_ = weapon;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ShowEquip.weapon)
}

bool ShowEquip::has_detail() const {
  return detail_case() != DETAIL_NOT_SET;
}
void ShowEquip::clear_has_detail() {
  _oneof_case_[0] = DETAIL_NOT_SET;
}
ShowEquip::DetailCase ShowEquip::detail_case() const {
  return ShowEquip::DetailCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ShowAvatarInfo::ShowAvatarInfo_PropMapEntry::ShowAvatarInfo_PropMapEntry() {}
ShowAvatarInfo::ShowAvatarInfo_PropMapEntry::ShowAvatarInfo_PropMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ShowAvatarInfo::ShowAvatarInfo_PropMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[136];
}
void ShowAvatarInfo::ShowAvatarInfo_PropMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ShowAvatarInfo::ShowAvatarInfo_PropMapEntry::MergeFrom(const ShowAvatarInfo_PropMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ShowAvatarInfo::ShowAvatarInfo_FightPropMapEntry::ShowAvatarInfo_FightPropMapEntry() {}
ShowAvatarInfo::ShowAvatarInfo_FightPropMapEntry::ShowAvatarInfo_FightPropMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ShowAvatarInfo::ShowAvatarInfo_FightPropMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[137];
}
void ShowAvatarInfo::ShowAvatarInfo_FightPropMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ShowAvatarInfo::ShowAvatarInfo_FightPropMapEntry::MergeFrom(const ShowAvatarInfo_FightPropMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ShowAvatarInfo::ShowAvatarInfo_SkillLevelMapEntry::ShowAvatarInfo_SkillLevelMapEntry() {}
ShowAvatarInfo::ShowAvatarInfo_SkillLevelMapEntry::ShowAvatarInfo_SkillLevelMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ShowAvatarInfo::ShowAvatarInfo_SkillLevelMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[138];
}
void ShowAvatarInfo::ShowAvatarInfo_SkillLevelMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ShowAvatarInfo::ShowAvatarInfo_SkillLevelMapEntry::MergeFrom(const ShowAvatarInfo_SkillLevelMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ShowAvatarInfo::ShowAvatarInfo_ProudSkillExtraLevelMapEntry::ShowAvatarInfo_ProudSkillExtraLevelMapEntry() {}
ShowAvatarInfo::ShowAvatarInfo_ProudSkillExtraLevelMapEntry::ShowAvatarInfo_ProudSkillExtraLevelMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ShowAvatarInfo::ShowAvatarInfo_ProudSkillExtraLevelMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[139];
}
void ShowAvatarInfo::ShowAvatarInfo_ProudSkillExtraLevelMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ShowAvatarInfo::ShowAvatarInfo_ProudSkillExtraLevelMapEntry::MergeFrom(const ShowAvatarInfo_ProudSkillExtraLevelMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShowAvatarInfo::kAvatarIdFieldNumber;
const int ShowAvatarInfo::kPropMapFieldNumber;
const int ShowAvatarInfo::kTalentIdListFieldNumber;
const int ShowAvatarInfo::kFightPropMapFieldNumber;
const int ShowAvatarInfo::kSkillDepotIdFieldNumber;
const int ShowAvatarInfo::kCoreProudSkillLevelFieldNumber;
const int ShowAvatarInfo::kInherentProudSkillListFieldNumber;
const int ShowAvatarInfo::kSkillLevelMapFieldNumber;
const int ShowAvatarInfo::kProudSkillExtraLevelMapFieldNumber;
const int ShowAvatarInfo::kEquipListFieldNumber;
const int ShowAvatarInfo::kFetterInfoFieldNumber;
const int ShowAvatarInfo::kCostumeIdFieldNumber;
const int ShowAvatarInfo::kExcelInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShowAvatarInfo::ShowAvatarInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ShowAvatarInfo)
}
ShowAvatarInfo::ShowAvatarInfo(const ShowAvatarInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      talent_id_list_(from.talent_id_list_),
      inherent_proud_skill_list_(from.inherent_proud_skill_list_),
      equip_list_(from.equip_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prop_map_.MergeFrom(from.prop_map_);
  fight_prop_map_.MergeFrom(from.fight_prop_map_);
  skill_level_map_.MergeFrom(from.skill_level_map_);
  proud_skill_extra_level_map_.MergeFrom(from.proud_skill_extra_level_map_);
  if (from.has_fetter_info()) {
    fetter_info_ = new ::proto::AvatarFetterInfo(*from.fetter_info_);
  } else {
    fetter_info_ = NULL;
  }
  if (from.has_excel_info()) {
    excel_info_ = new ::proto::AvatarExcelInfo(*from.excel_info_);
  } else {
    excel_info_ = NULL;
  }
  ::memcpy(&avatar_id_, &from.avatar_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&costume_id_) -
    reinterpret_cast<char*>(&avatar_id_)) + sizeof(costume_id_));
  // @@protoc_insertion_point(copy_constructor:proto.ShowAvatarInfo)
}

void ShowAvatarInfo::SharedCtor() {
  ::memset(&fetter_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&costume_id_) -
      reinterpret_cast<char*>(&fetter_info_)) + sizeof(costume_id_));
  _cached_size_ = 0;
}

ShowAvatarInfo::~ShowAvatarInfo() {
  // @@protoc_insertion_point(destructor:proto.ShowAvatarInfo)
  SharedDtor();
}

void ShowAvatarInfo::SharedDtor() {
  if (this != internal_default_instance()) delete fetter_info_;
  if (this != internal_default_instance()) delete excel_info_;
}

void ShowAvatarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowAvatarInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShowAvatarInfo& ShowAvatarInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShowAvatarInfo* ShowAvatarInfo::New(::google::protobuf::Arena* arena) const {
  ShowAvatarInfo* n = new ShowAvatarInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShowAvatarInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ShowAvatarInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prop_map_.Clear();
  talent_id_list_.Clear();
  fight_prop_map_.Clear();
  inherent_proud_skill_list_.Clear();
  skill_level_map_.Clear();
  proud_skill_extra_level_map_.Clear();
  equip_list_.Clear();
  if (GetArenaNoVirtual() == NULL && fetter_info_ != NULL) {
    delete fetter_info_;
  }
  fetter_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && excel_info_ != NULL) {
    delete excel_info_;
  }
  excel_info_ = NULL;
  ::memset(&avatar_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&costume_id_) -
      reinterpret_cast<char*>(&avatar_id_)) + sizeof(costume_id_));
  _internal_metadata_.Clear();
}

bool ShowAvatarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ShowAvatarInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 avatar_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .proto.PropValue> prop_map = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          ShowAvatarInfo_PropMapEntry::Parser< ::google::protobuf::internal::MapField<
              ShowAvatarInfo_PropMapEntry,
              ::google::protobuf::uint32, ::proto::PropValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue > > parser(&prop_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 talent_id_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_talent_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_talent_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, float> fight_prop_map = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          ShowAvatarInfo_FightPropMapEntry::Parser< ::google::protobuf::internal::MapField<
              ShowAvatarInfo_FightPropMapEntry,
              ::google::protobuf::uint32, float,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, float > > parser(&fight_prop_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 skill_depot_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_depot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 core_proud_skill_level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &core_proud_skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 inherent_proud_skill_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_inherent_proud_skill_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58u, input, this->mutable_inherent_proud_skill_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> skill_level_map = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          ShowAvatarInfo_SkillLevelMapEntry::Parser< ::google::protobuf::internal::MapField<
              ShowAvatarInfo_SkillLevelMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&skill_level_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> proud_skill_extra_level_map = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          ShowAvatarInfo_ProudSkillExtraLevelMapEntry::Parser< ::google::protobuf::internal::MapField<
              ShowAvatarInfo_ProudSkillExtraLevelMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&proud_skill_extra_level_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ShowEquip equip_list = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AvatarFetterInfo fetter_info = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetter_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 costume_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costume_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AvatarExcelInfo excel_info = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_excel_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ShowAvatarInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ShowAvatarInfo)
  return false;
#undef DO_
}

void ShowAvatarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ShowAvatarInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 avatar_id = 1;
  if (this->avatar_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->avatar_id(), output);
  }

  // map<uint32, .proto.PropValue> prop_map = 2;
  if (!this->prop_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->prop_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->prop_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue >::const_iterator
          it = this->prop_map().begin();
          it != this->prop_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ShowAvatarInfo_PropMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(prop_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ShowAvatarInfo_PropMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue >::const_iterator
          it = this->prop_map().begin();
          it != this->prop_map().end(); ++it) {
        entry.reset(prop_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    }
  }

  // repeated uint32 talent_id_list = 3;
  if (this->talent_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _talent_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->talent_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->talent_id_list(i), output);
  }

  // map<uint32, float> fight_prop_map = 4;
  if (!this->fight_prop_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, float >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->fight_prop_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->fight_prop_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
          it = this->fight_prop_map().begin();
          it != this->fight_prop_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ShowAvatarInfo_FightPropMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(fight_prop_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ShowAvatarInfo_FightPropMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
          it = this->fight_prop_map().begin();
          it != this->fight_prop_map().end(); ++it) {
        entry.reset(fight_prop_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    }
  }

  // uint32 skill_depot_id = 5;
  if (this->skill_depot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->skill_depot_id(), output);
  }

  // uint32 core_proud_skill_level = 6;
  if (this->core_proud_skill_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->core_proud_skill_level(), output);
  }

  // repeated uint32 inherent_proud_skill_list = 7;
  if (this->inherent_proud_skill_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _inherent_proud_skill_list_cached_byte_size_));
  }
  for (int i = 0, n = this->inherent_proud_skill_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->inherent_proud_skill_list(i), output);
  }

  // map<uint32, uint32> skill_level_map = 8;
  if (!this->skill_level_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->skill_level_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->skill_level_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->skill_level_map().begin();
          it != this->skill_level_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ShowAvatarInfo_SkillLevelMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(skill_level_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ShowAvatarInfo_SkillLevelMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->skill_level_map().begin();
          it != this->skill_level_map().end(); ++it) {
        entry.reset(skill_level_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
      }
    }
  }

  // map<uint32, uint32> proud_skill_extra_level_map = 9;
  if (!this->proud_skill_extra_level_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->proud_skill_extra_level_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->proud_skill_extra_level_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->proud_skill_extra_level_map().begin();
          it != this->proud_skill_extra_level_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ShowAvatarInfo_ProudSkillExtraLevelMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(proud_skill_extra_level_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ShowAvatarInfo_ProudSkillExtraLevelMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->proud_skill_extra_level_map().begin();
          it != this->proud_skill_extra_level_map().end(); ++it) {
        entry.reset(proud_skill_extra_level_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
      }
    }
  }

  // repeated .proto.ShowEquip equip_list = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equip_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->equip_list(static_cast<int>(i)), output);
  }

  // .proto.AvatarFetterInfo fetter_info = 11;
  if (this->has_fetter_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->fetter_info_, output);
  }

  // uint32 costume_id = 12;
  if (this->costume_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->costume_id(), output);
  }

  // .proto.AvatarExcelInfo excel_info = 13;
  if (this->has_excel_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->excel_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ShowAvatarInfo)
}

::google::protobuf::uint8* ShowAvatarInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ShowAvatarInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 avatar_id = 1;
  if (this->avatar_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->avatar_id(), target);
  }

  // map<uint32, .proto.PropValue> prop_map = 2;
  if (!this->prop_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->prop_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->prop_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue >::const_iterator
          it = this->prop_map().begin();
          it != this->prop_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ShowAvatarInfo_PropMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(prop_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ShowAvatarInfo_PropMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue >::const_iterator
          it = this->prop_map().begin();
          it != this->prop_map().end(); ++it) {
        entry.reset(prop_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    }
  }

  // repeated uint32 talent_id_list = 3;
  if (this->talent_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _talent_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->talent_id_list_, target);
  }

  // map<uint32, float> fight_prop_map = 4;
  if (!this->fight_prop_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, float >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->fight_prop_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->fight_prop_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
          it = this->fight_prop_map().begin();
          it != this->fight_prop_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ShowAvatarInfo_FightPropMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(fight_prop_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ShowAvatarInfo_FightPropMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
          it = this->fight_prop_map().begin();
          it != this->fight_prop_map().end(); ++it) {
        entry.reset(fight_prop_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    }
  }

  // uint32 skill_depot_id = 5;
  if (this->skill_depot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->skill_depot_id(), target);
  }

  // uint32 core_proud_skill_level = 6;
  if (this->core_proud_skill_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->core_proud_skill_level(), target);
  }

  // repeated uint32 inherent_proud_skill_list = 7;
  if (this->inherent_proud_skill_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _inherent_proud_skill_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->inherent_proud_skill_list_, target);
  }

  // map<uint32, uint32> skill_level_map = 8;
  if (!this->skill_level_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->skill_level_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->skill_level_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->skill_level_map().begin();
          it != this->skill_level_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ShowAvatarInfo_SkillLevelMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(skill_level_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ShowAvatarInfo_SkillLevelMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->skill_level_map().begin();
          it != this->skill_level_map().end(); ++it) {
        entry.reset(skill_level_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
      }
    }
  }

  // map<uint32, uint32> proud_skill_extra_level_map = 9;
  if (!this->proud_skill_extra_level_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->proud_skill_extra_level_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->proud_skill_extra_level_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->proud_skill_extra_level_map().begin();
          it != this->proud_skill_extra_level_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ShowAvatarInfo_ProudSkillExtraLevelMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(proud_skill_extra_level_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ShowAvatarInfo_ProudSkillExtraLevelMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->proud_skill_extra_level_map().begin();
          it != this->proud_skill_extra_level_map().end(); ++it) {
        entry.reset(proud_skill_extra_level_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
      }
    }
  }

  // repeated .proto.ShowEquip equip_list = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equip_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->equip_list(static_cast<int>(i)), deterministic, target);
  }

  // .proto.AvatarFetterInfo fetter_info = 11;
  if (this->has_fetter_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->fetter_info_, deterministic, target);
  }

  // uint32 costume_id = 12;
  if (this->costume_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->costume_id(), target);
  }

  // .proto.AvatarExcelInfo excel_info = 13;
  if (this->has_excel_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->excel_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ShowAvatarInfo)
  return target;
}

size_t ShowAvatarInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ShowAvatarInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, .proto.PropValue> prop_map = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->prop_map_size());
  {
    ::google::protobuf::scoped_ptr<ShowAvatarInfo_PropMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue >::const_iterator
        it = this->prop_map().begin();
        it != this->prop_map().end(); ++it) {
      entry.reset(prop_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated uint32 talent_id_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->talent_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _talent_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<uint32, float> fight_prop_map = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fight_prop_map_size());
  {
    ::google::protobuf::scoped_ptr<ShowAvatarInfo_FightPropMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
        it = this->fight_prop_map().begin();
        it != this->fight_prop_map().end(); ++it) {
      entry.reset(fight_prop_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated uint32 inherent_proud_skill_list = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->inherent_proud_skill_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _inherent_proud_skill_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<uint32, uint32> skill_level_map = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->skill_level_map_size());
  {
    ::google::protobuf::scoped_ptr<ShowAvatarInfo_SkillLevelMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->skill_level_map().begin();
        it != this->skill_level_map().end(); ++it) {
      entry.reset(skill_level_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint32, uint32> proud_skill_extra_level_map = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->proud_skill_extra_level_map_size());
  {
    ::google::protobuf::scoped_ptr<ShowAvatarInfo_ProudSkillExtraLevelMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->proud_skill_extra_level_map().begin();
        it != this->proud_skill_extra_level_map().end(); ++it) {
      entry.reset(proud_skill_extra_level_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .proto.ShowEquip equip_list = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->equip_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip_list(static_cast<int>(i)));
    }
  }

  // .proto.AvatarFetterInfo fetter_info = 11;
  if (this->has_fetter_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fetter_info_);
  }

  // .proto.AvatarExcelInfo excel_info = 13;
  if (this->has_excel_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->excel_info_);
  }

  // uint32 avatar_id = 1;
  if (this->avatar_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avatar_id());
  }

  // uint32 skill_depot_id = 5;
  if (this->skill_depot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_depot_id());
  }

  // uint32 core_proud_skill_level = 6;
  if (this->core_proud_skill_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->core_proud_skill_level());
  }

  // uint32 costume_id = 12;
  if (this->costume_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->costume_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowAvatarInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ShowAvatarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowAvatarInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShowAvatarInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ShowAvatarInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ShowAvatarInfo)
    MergeFrom(*source);
  }
}

void ShowAvatarInfo::MergeFrom(const ShowAvatarInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ShowAvatarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prop_map_.MergeFrom(from.prop_map_);
  talent_id_list_.MergeFrom(from.talent_id_list_);
  fight_prop_map_.MergeFrom(from.fight_prop_map_);
  inherent_proud_skill_list_.MergeFrom(from.inherent_proud_skill_list_);
  skill_level_map_.MergeFrom(from.skill_level_map_);
  proud_skill_extra_level_map_.MergeFrom(from.proud_skill_extra_level_map_);
  equip_list_.MergeFrom(from.equip_list_);
  if (from.has_fetter_info()) {
    mutable_fetter_info()->::proto::AvatarFetterInfo::MergeFrom(from.fetter_info());
  }
  if (from.has_excel_info()) {
    mutable_excel_info()->::proto::AvatarExcelInfo::MergeFrom(from.excel_info());
  }
  if (from.avatar_id() != 0) {
    set_avatar_id(from.avatar_id());
  }
  if (from.skill_depot_id() != 0) {
    set_skill_depot_id(from.skill_depot_id());
  }
  if (from.core_proud_skill_level() != 0) {
    set_core_proud_skill_level(from.core_proud_skill_level());
  }
  if (from.costume_id() != 0) {
    set_costume_id(from.costume_id());
  }
}

void ShowAvatarInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ShowAvatarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowAvatarInfo::CopyFrom(const ShowAvatarInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ShowAvatarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowAvatarInfo::IsInitialized() const {
  return true;
}

void ShowAvatarInfo::Swap(ShowAvatarInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShowAvatarInfo::InternalSwap(ShowAvatarInfo* other) {
  using std::swap;
  prop_map_.Swap(&other->prop_map_);
  talent_id_list_.InternalSwap(&other->talent_id_list_);
  fight_prop_map_.Swap(&other->fight_prop_map_);
  inherent_proud_skill_list_.InternalSwap(&other->inherent_proud_skill_list_);
  skill_level_map_.Swap(&other->skill_level_map_);
  proud_skill_extra_level_map_.Swap(&other->proud_skill_extra_level_map_);
  equip_list_.InternalSwap(&other->equip_list_);
  swap(fetter_info_, other->fetter_info_);
  swap(excel_info_, other->excel_info_);
  swap(avatar_id_, other->avatar_id_);
  swap(skill_depot_id_, other->skill_depot_id_);
  swap(core_proud_skill_level_, other->core_proud_skill_level_);
  swap(costume_id_, other->costume_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShowAvatarInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShowAvatarInfo

// uint32 avatar_id = 1;
void ShowAvatarInfo::clear_avatar_id() {
  avatar_id_ = 0u;
}
::google::protobuf::uint32 ShowAvatarInfo::avatar_id() const {
  // @@protoc_insertion_point(field_get:proto.ShowAvatarInfo.avatar_id)
  return avatar_id_;
}
void ShowAvatarInfo::set_avatar_id(::google::protobuf::uint32 value) {
  
  avatar_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ShowAvatarInfo.avatar_id)
}

// map<uint32, .proto.PropValue> prop_map = 2;
int ShowAvatarInfo::prop_map_size() const {
  return prop_map_.size();
}
void ShowAvatarInfo::clear_prop_map() {
  prop_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue >&
ShowAvatarInfo::prop_map() const {
  // @@protoc_insertion_point(field_map:proto.ShowAvatarInfo.prop_map)
  return prop_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::PropValue >*
ShowAvatarInfo::mutable_prop_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.ShowAvatarInfo.prop_map)
  return prop_map_.MutableMap();
}

// repeated uint32 talent_id_list = 3;
int ShowAvatarInfo::talent_id_list_size() const {
  return talent_id_list_.size();
}
void ShowAvatarInfo::clear_talent_id_list() {
  talent_id_list_.Clear();
}
::google::protobuf::uint32 ShowAvatarInfo::talent_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ShowAvatarInfo.talent_id_list)
  return talent_id_list_.Get(index);
}
void ShowAvatarInfo::set_talent_id_list(int index, ::google::protobuf::uint32 value) {
  talent_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ShowAvatarInfo.talent_id_list)
}
void ShowAvatarInfo::add_talent_id_list(::google::protobuf::uint32 value) {
  talent_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ShowAvatarInfo.talent_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ShowAvatarInfo::talent_id_list() const {
  // @@protoc_insertion_point(field_list:proto.ShowAvatarInfo.talent_id_list)
  return talent_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ShowAvatarInfo::mutable_talent_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ShowAvatarInfo.talent_id_list)
  return &talent_id_list_;
}

// map<uint32, float> fight_prop_map = 4;
int ShowAvatarInfo::fight_prop_map_size() const {
  return fight_prop_map_.size();
}
void ShowAvatarInfo::clear_fight_prop_map() {
  fight_prop_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, float >&
ShowAvatarInfo::fight_prop_map() const {
  // @@protoc_insertion_point(field_map:proto.ShowAvatarInfo.fight_prop_map)
  return fight_prop_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, float >*
ShowAvatarInfo::mutable_fight_prop_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.ShowAvatarInfo.fight_prop_map)
  return fight_prop_map_.MutableMap();
}

// uint32 skill_depot_id = 5;
void ShowAvatarInfo::clear_skill_depot_id() {
  skill_depot_id_ = 0u;
}
::google::protobuf::uint32 ShowAvatarInfo::skill_depot_id() const {
  // @@protoc_insertion_point(field_get:proto.ShowAvatarInfo.skill_depot_id)
  return skill_depot_id_;
}
void ShowAvatarInfo::set_skill_depot_id(::google::protobuf::uint32 value) {
  
  skill_depot_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ShowAvatarInfo.skill_depot_id)
}

// uint32 core_proud_skill_level = 6;
void ShowAvatarInfo::clear_core_proud_skill_level() {
  core_proud_skill_level_ = 0u;
}
::google::protobuf::uint32 ShowAvatarInfo::core_proud_skill_level() const {
  // @@protoc_insertion_point(field_get:proto.ShowAvatarInfo.core_proud_skill_level)
  return core_proud_skill_level_;
}
void ShowAvatarInfo::set_core_proud_skill_level(::google::protobuf::uint32 value) {
  
  core_proud_skill_level_ = value;
  // @@protoc_insertion_point(field_set:proto.ShowAvatarInfo.core_proud_skill_level)
}

// repeated uint32 inherent_proud_skill_list = 7;
int ShowAvatarInfo::inherent_proud_skill_list_size() const {
  return inherent_proud_skill_list_.size();
}
void ShowAvatarInfo::clear_inherent_proud_skill_list() {
  inherent_proud_skill_list_.Clear();
}
::google::protobuf::uint32 ShowAvatarInfo::inherent_proud_skill_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ShowAvatarInfo.inherent_proud_skill_list)
  return inherent_proud_skill_list_.Get(index);
}
void ShowAvatarInfo::set_inherent_proud_skill_list(int index, ::google::protobuf::uint32 value) {
  inherent_proud_skill_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ShowAvatarInfo.inherent_proud_skill_list)
}
void ShowAvatarInfo::add_inherent_proud_skill_list(::google::protobuf::uint32 value) {
  inherent_proud_skill_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ShowAvatarInfo.inherent_proud_skill_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ShowAvatarInfo::inherent_proud_skill_list() const {
  // @@protoc_insertion_point(field_list:proto.ShowAvatarInfo.inherent_proud_skill_list)
  return inherent_proud_skill_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ShowAvatarInfo::mutable_inherent_proud_skill_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ShowAvatarInfo.inherent_proud_skill_list)
  return &inherent_proud_skill_list_;
}

// map<uint32, uint32> skill_level_map = 8;
int ShowAvatarInfo::skill_level_map_size() const {
  return skill_level_map_.size();
}
void ShowAvatarInfo::clear_skill_level_map() {
  skill_level_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
ShowAvatarInfo::skill_level_map() const {
  // @@protoc_insertion_point(field_map:proto.ShowAvatarInfo.skill_level_map)
  return skill_level_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
ShowAvatarInfo::mutable_skill_level_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.ShowAvatarInfo.skill_level_map)
  return skill_level_map_.MutableMap();
}

// map<uint32, uint32> proud_skill_extra_level_map = 9;
int ShowAvatarInfo::proud_skill_extra_level_map_size() const {
  return proud_skill_extra_level_map_.size();
}
void ShowAvatarInfo::clear_proud_skill_extra_level_map() {
  proud_skill_extra_level_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
ShowAvatarInfo::proud_skill_extra_level_map() const {
  // @@protoc_insertion_point(field_map:proto.ShowAvatarInfo.proud_skill_extra_level_map)
  return proud_skill_extra_level_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
ShowAvatarInfo::mutable_proud_skill_extra_level_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.ShowAvatarInfo.proud_skill_extra_level_map)
  return proud_skill_extra_level_map_.MutableMap();
}

// repeated .proto.ShowEquip equip_list = 10;
int ShowAvatarInfo::equip_list_size() const {
  return equip_list_.size();
}
void ShowAvatarInfo::clear_equip_list() {
  equip_list_.Clear();
}
const ::proto::ShowEquip& ShowAvatarInfo::equip_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ShowAvatarInfo.equip_list)
  return equip_list_.Get(index);
}
::proto::ShowEquip* ShowAvatarInfo::mutable_equip_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ShowAvatarInfo.equip_list)
  return equip_list_.Mutable(index);
}
::proto::ShowEquip* ShowAvatarInfo::add_equip_list() {
  // @@protoc_insertion_point(field_add:proto.ShowAvatarInfo.equip_list)
  return equip_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ShowEquip >*
ShowAvatarInfo::mutable_equip_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ShowAvatarInfo.equip_list)
  return &equip_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ShowEquip >&
ShowAvatarInfo::equip_list() const {
  // @@protoc_insertion_point(field_list:proto.ShowAvatarInfo.equip_list)
  return equip_list_;
}

// .proto.AvatarFetterInfo fetter_info = 11;
bool ShowAvatarInfo::has_fetter_info() const {
  return this != internal_default_instance() && fetter_info_ != NULL;
}
void ShowAvatarInfo::clear_fetter_info() {
  if (GetArenaNoVirtual() == NULL && fetter_info_ != NULL) delete fetter_info_;
  fetter_info_ = NULL;
}
const ::proto::AvatarFetterInfo& ShowAvatarInfo::fetter_info() const {
  const ::proto::AvatarFetterInfo* p = fetter_info_;
  // @@protoc_insertion_point(field_get:proto.ShowAvatarInfo.fetter_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::AvatarFetterInfo*>(
      &::proto::_AvatarFetterInfo_default_instance_);
}
::proto::AvatarFetterInfo* ShowAvatarInfo::mutable_fetter_info() {
  
  if (fetter_info_ == NULL) {
    fetter_info_ = new ::proto::AvatarFetterInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.ShowAvatarInfo.fetter_info)
  return fetter_info_;
}
::proto::AvatarFetterInfo* ShowAvatarInfo::release_fetter_info() {
  // @@protoc_insertion_point(field_release:proto.ShowAvatarInfo.fetter_info)
  
  ::proto::AvatarFetterInfo* temp = fetter_info_;
  fetter_info_ = NULL;
  return temp;
}
void ShowAvatarInfo::set_allocated_fetter_info(::proto::AvatarFetterInfo* fetter_info) {
  delete fetter_info_;
  fetter_info_ = fetter_info;
  if (fetter_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ShowAvatarInfo.fetter_info)
}

// uint32 costume_id = 12;
void ShowAvatarInfo::clear_costume_id() {
  costume_id_ = 0u;
}
::google::protobuf::uint32 ShowAvatarInfo::costume_id() const {
  // @@protoc_insertion_point(field_get:proto.ShowAvatarInfo.costume_id)
  return costume_id_;
}
void ShowAvatarInfo::set_costume_id(::google::protobuf::uint32 value) {
  
  costume_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ShowAvatarInfo.costume_id)
}

// .proto.AvatarExcelInfo excel_info = 13;
bool ShowAvatarInfo::has_excel_info() const {
  return this != internal_default_instance() && excel_info_ != NULL;
}
void ShowAvatarInfo::clear_excel_info() {
  if (GetArenaNoVirtual() == NULL && excel_info_ != NULL) delete excel_info_;
  excel_info_ = NULL;
}
const ::proto::AvatarExcelInfo& ShowAvatarInfo::excel_info() const {
  const ::proto::AvatarExcelInfo* p = excel_info_;
  // @@protoc_insertion_point(field_get:proto.ShowAvatarInfo.excel_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::AvatarExcelInfo*>(
      &::proto::_AvatarExcelInfo_default_instance_);
}
::proto::AvatarExcelInfo* ShowAvatarInfo::mutable_excel_info() {
  
  if (excel_info_ == NULL) {
    excel_info_ = new ::proto::AvatarExcelInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.ShowAvatarInfo.excel_info)
  return excel_info_;
}
::proto::AvatarExcelInfo* ShowAvatarInfo::release_excel_info() {
  // @@protoc_insertion_point(field_release:proto.ShowAvatarInfo.excel_info)
  
  ::proto::AvatarExcelInfo* temp = excel_info_;
  excel_info_ = NULL;
  return temp;
}
void ShowAvatarInfo::set_allocated_excel_info(::proto::AvatarExcelInfo* excel_info) {
  delete excel_info_;
  excel_info_ = excel_info;
  if (excel_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ShowAvatarInfo.excel_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Quest::Quest_LackedNpcMapEntry::Quest_LackedNpcMapEntry() {}
Quest::Quest_LackedNpcMapEntry::Quest_LackedNpcMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata Quest::Quest_LackedNpcMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[141];
}
void Quest::Quest_LackedNpcMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void Quest::Quest_LackedNpcMapEntry::MergeFrom(const Quest_LackedNpcMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Quest::Quest_LackedPlaceMapEntry::Quest_LackedPlaceMapEntry() {}
Quest::Quest_LackedPlaceMapEntry::Quest_LackedPlaceMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata Quest::Quest_LackedPlaceMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[142];
}
void Quest::Quest_LackedPlaceMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void Quest::Quest_LackedPlaceMapEntry::MergeFrom(const Quest_LackedPlaceMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quest::kQuestIdFieldNumber;
const int Quest::kStateFieldNumber;
const int Quest::kStartTimeFieldNumber;
const int Quest::kIsRandomFieldNumber;
const int Quest::kParentQuestIdFieldNumber;
const int Quest::kQuestConfigIdFieldNumber;
const int Quest::kStartGameTimeFieldNumber;
const int Quest::kAcceptTimeFieldNumber;
const int Quest::kLackedNpcListFieldNumber;
const int Quest::kFinishProgressListFieldNumber;
const int Quest::kFailProgressListFieldNumber;
const int Quest::kLackedNpcMapFieldNumber;
const int Quest::kLackedPlaceListFieldNumber;
const int Quest::kLackedPlaceMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quest::Quest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Quest)
}
Quest::Quest(const Quest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lacked_npc_list_(from.lacked_npc_list_),
      finish_progress_list_(from.finish_progress_list_),
      fail_progress_list_(from.fail_progress_list_),
      lacked_place_list_(from.lacked_place_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lacked_npc_map_.MergeFrom(from.lacked_npc_map_);
  lacked_place_map_.MergeFrom(from.lacked_place_map_);
  ::memcpy(&quest_id_, &from.quest_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&accept_time_) -
    reinterpret_cast<char*>(&quest_id_)) + sizeof(accept_time_));
  // @@protoc_insertion_point(copy_constructor:proto.Quest)
}

void Quest::SharedCtor() {
  ::memset(&quest_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accept_time_) -
      reinterpret_cast<char*>(&quest_id_)) + sizeof(accept_time_));
  _cached_size_ = 0;
}

Quest::~Quest() {
  // @@protoc_insertion_point(destructor:proto.Quest)
  SharedDtor();
}

void Quest::SharedDtor() {
}

void Quest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Quest& Quest::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

Quest* Quest::New(::google::protobuf::Arena* arena) const {
  Quest* n = new Quest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Quest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Quest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lacked_npc_list_.Clear();
  finish_progress_list_.Clear();
  fail_progress_list_.Clear();
  lacked_npc_map_.Clear();
  lacked_place_list_.Clear();
  lacked_place_map_.Clear();
  ::memset(&quest_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accept_time_) -
      reinterpret_cast<char*>(&quest_id_)) + sizeof(accept_time_));
  _internal_metadata_.Clear();
}

bool Quest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Quest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 quest_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 start_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_random = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_random_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 parent_quest_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_quest_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 quest_config_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 start_game_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 accept_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accept_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 lacked_npc_list = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_lacked_npc_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 82u, input, this->mutable_lacked_npc_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 finish_progress_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_finish_progress_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 90u, input, this->mutable_finish_progress_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 fail_progress_list = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fail_progress_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 98u, input, this->mutable_fail_progress_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> lacked_npc_map = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          Quest_LackedNpcMapEntry::Parser< ::google::protobuf::internal::MapField<
              Quest_LackedNpcMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&lacked_npc_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 lacked_place_list = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_lacked_place_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 114u, input, this->mutable_lacked_place_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> lacked_place_map = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          Quest_LackedPlaceMapEntry::Parser< ::google::protobuf::internal::MapField<
              Quest_LackedPlaceMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&lacked_place_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Quest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Quest)
  return false;
#undef DO_
}

void Quest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Quest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 quest_id = 1;
  if (this->quest_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->quest_id(), output);
  }

  // uint32 state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // uint32 start_time = 4;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_time(), output);
  }

  // bool is_random = 5;
  if (this->is_random() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_random(), output);
  }

  // uint32 parent_quest_id = 6;
  if (this->parent_quest_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->parent_quest_id(), output);
  }

  // uint32 quest_config_id = 7;
  if (this->quest_config_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->quest_config_id(), output);
  }

  // uint32 start_game_time = 8;
  if (this->start_game_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->start_game_time(), output);
  }

  // uint32 accept_time = 9;
  if (this->accept_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->accept_time(), output);
  }

  // repeated uint32 lacked_npc_list = 10;
  if (this->lacked_npc_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _lacked_npc_list_cached_byte_size_));
  }
  for (int i = 0, n = this->lacked_npc_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->lacked_npc_list(i), output);
  }

  // repeated uint32 finish_progress_list = 11;
  if (this->finish_progress_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _finish_progress_list_cached_byte_size_));
  }
  for (int i = 0, n = this->finish_progress_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->finish_progress_list(i), output);
  }

  // repeated uint32 fail_progress_list = 12;
  if (this->fail_progress_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _fail_progress_list_cached_byte_size_));
  }
  for (int i = 0, n = this->fail_progress_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->fail_progress_list(i), output);
  }

  // map<uint32, uint32> lacked_npc_map = 13;
  if (!this->lacked_npc_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->lacked_npc_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->lacked_npc_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->lacked_npc_map().begin();
          it != this->lacked_npc_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Quest_LackedNpcMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(lacked_npc_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<Quest_LackedNpcMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->lacked_npc_map().begin();
          it != this->lacked_npc_map().end(); ++it) {
        entry.reset(lacked_npc_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
      }
    }
  }

  // repeated uint32 lacked_place_list = 14;
  if (this->lacked_place_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _lacked_place_list_cached_byte_size_));
  }
  for (int i = 0, n = this->lacked_place_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->lacked_place_list(i), output);
  }

  // map<uint32, uint32> lacked_place_map = 15;
  if (!this->lacked_place_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->lacked_place_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->lacked_place_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->lacked_place_map().begin();
          it != this->lacked_place_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Quest_LackedPlaceMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(lacked_place_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<Quest_LackedPlaceMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->lacked_place_map().begin();
          it != this->lacked_place_map().end(); ++it) {
        entry.reset(lacked_place_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Quest)
}

::google::protobuf::uint8* Quest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Quest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 quest_id = 1;
  if (this->quest_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->quest_id(), target);
  }

  // uint32 state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // uint32 start_time = 4;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_time(), target);
  }

  // bool is_random = 5;
  if (this->is_random() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_random(), target);
  }

  // uint32 parent_quest_id = 6;
  if (this->parent_quest_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->parent_quest_id(), target);
  }

  // uint32 quest_config_id = 7;
  if (this->quest_config_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->quest_config_id(), target);
  }

  // uint32 start_game_time = 8;
  if (this->start_game_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->start_game_time(), target);
  }

  // uint32 accept_time = 9;
  if (this->accept_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->accept_time(), target);
  }

  // repeated uint32 lacked_npc_list = 10;
  if (this->lacked_npc_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _lacked_npc_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->lacked_npc_list_, target);
  }

  // repeated uint32 finish_progress_list = 11;
  if (this->finish_progress_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _finish_progress_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->finish_progress_list_, target);
  }

  // repeated uint32 fail_progress_list = 12;
  if (this->fail_progress_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _fail_progress_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->fail_progress_list_, target);
  }

  // map<uint32, uint32> lacked_npc_map = 13;
  if (!this->lacked_npc_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->lacked_npc_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->lacked_npc_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->lacked_npc_map().begin();
          it != this->lacked_npc_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Quest_LackedNpcMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(lacked_npc_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<Quest_LackedNpcMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->lacked_npc_map().begin();
          it != this->lacked_npc_map().end(); ++it) {
        entry.reset(lacked_npc_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
      }
    }
  }

  // repeated uint32 lacked_place_list = 14;
  if (this->lacked_place_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _lacked_place_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->lacked_place_list_, target);
  }

  // map<uint32, uint32> lacked_place_map = 15;
  if (!this->lacked_place_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->lacked_place_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->lacked_place_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->lacked_place_map().begin();
          it != this->lacked_place_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Quest_LackedPlaceMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(lacked_place_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<Quest_LackedPlaceMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->lacked_place_map().begin();
          it != this->lacked_place_map().end(); ++it) {
        entry.reset(lacked_place_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Quest)
  return target;
}

size_t Quest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Quest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 lacked_npc_list = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->lacked_npc_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _lacked_npc_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 finish_progress_list = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->finish_progress_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _finish_progress_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 fail_progress_list = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->fail_progress_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fail_progress_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<uint32, uint32> lacked_npc_map = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->lacked_npc_map_size());
  {
    ::google::protobuf::scoped_ptr<Quest_LackedNpcMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->lacked_npc_map().begin();
        it != this->lacked_npc_map().end(); ++it) {
      entry.reset(lacked_npc_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated uint32 lacked_place_list = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->lacked_place_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _lacked_place_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<uint32, uint32> lacked_place_map = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->lacked_place_map_size());
  {
    ::google::protobuf::scoped_ptr<Quest_LackedPlaceMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->lacked_place_map().begin();
        it != this->lacked_place_map().end(); ++it) {
      entry.reset(lacked_place_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 quest_id = 1;
  if (this->quest_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->quest_id());
  }

  // uint32 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  // uint32 start_time = 4;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start_time());
  }

  // bool is_random = 5;
  if (this->is_random() != 0) {
    total_size += 1 + 1;
  }

  // uint32 parent_quest_id = 6;
  if (this->parent_quest_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->parent_quest_id());
  }

  // uint32 quest_config_id = 7;
  if (this->quest_config_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->quest_config_id());
  }

  // uint32 start_game_time = 8;
  if (this->start_game_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start_game_time());
  }

  // uint32 accept_time = 9;
  if (this->accept_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accept_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Quest)
  GOOGLE_DCHECK_NE(&from, this);
  const Quest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Quest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Quest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Quest)
    MergeFrom(*source);
  }
}

void Quest::MergeFrom(const Quest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Quest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lacked_npc_list_.MergeFrom(from.lacked_npc_list_);
  finish_progress_list_.MergeFrom(from.finish_progress_list_);
  fail_progress_list_.MergeFrom(from.fail_progress_list_);
  lacked_npc_map_.MergeFrom(from.lacked_npc_map_);
  lacked_place_list_.MergeFrom(from.lacked_place_list_);
  lacked_place_map_.MergeFrom(from.lacked_place_map_);
  if (from.quest_id() != 0) {
    set_quest_id(from.quest_id());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.is_random() != 0) {
    set_is_random(from.is_random());
  }
  if (from.parent_quest_id() != 0) {
    set_parent_quest_id(from.parent_quest_id());
  }
  if (from.quest_config_id() != 0) {
    set_quest_config_id(from.quest_config_id());
  }
  if (from.start_game_time() != 0) {
    set_start_game_time(from.start_game_time());
  }
  if (from.accept_time() != 0) {
    set_accept_time(from.accept_time());
  }
}

void Quest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Quest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest::CopyFrom(const Quest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Quest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest::IsInitialized() const {
  return true;
}

void Quest::Swap(Quest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quest::InternalSwap(Quest* other) {
  using std::swap;
  lacked_npc_list_.InternalSwap(&other->lacked_npc_list_);
  finish_progress_list_.InternalSwap(&other->finish_progress_list_);
  fail_progress_list_.InternalSwap(&other->fail_progress_list_);
  lacked_npc_map_.Swap(&other->lacked_npc_map_);
  lacked_place_list_.InternalSwap(&other->lacked_place_list_);
  lacked_place_map_.Swap(&other->lacked_place_map_);
  swap(quest_id_, other->quest_id_);
  swap(state_, other->state_);
  swap(start_time_, other->start_time_);
  swap(is_random_, other->is_random_);
  swap(parent_quest_id_, other->parent_quest_id_);
  swap(quest_config_id_, other->quest_config_id_);
  swap(start_game_time_, other->start_game_time_);
  swap(accept_time_, other->accept_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Quest::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Quest

// uint32 quest_id = 1;
void Quest::clear_quest_id() {
  quest_id_ = 0u;
}
::google::protobuf::uint32 Quest::quest_id() const {
  // @@protoc_insertion_point(field_get:proto.Quest.quest_id)
  return quest_id_;
}
void Quest::set_quest_id(::google::protobuf::uint32 value) {
  
  quest_id_ = value;
  // @@protoc_insertion_point(field_set:proto.Quest.quest_id)
}

// uint32 state = 2;
void Quest::clear_state() {
  state_ = 0u;
}
::google::protobuf::uint32 Quest::state() const {
  // @@protoc_insertion_point(field_get:proto.Quest.state)
  return state_;
}
void Quest::set_state(::google::protobuf::uint32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.Quest.state)
}

// uint32 start_time = 4;
void Quest::clear_start_time() {
  start_time_ = 0u;
}
::google::protobuf::uint32 Quest::start_time() const {
  // @@protoc_insertion_point(field_get:proto.Quest.start_time)
  return start_time_;
}
void Quest::set_start_time(::google::protobuf::uint32 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.Quest.start_time)
}

// bool is_random = 5;
void Quest::clear_is_random() {
  is_random_ = false;
}
bool Quest::is_random() const {
  // @@protoc_insertion_point(field_get:proto.Quest.is_random)
  return is_random_;
}
void Quest::set_is_random(bool value) {
  
  is_random_ = value;
  // @@protoc_insertion_point(field_set:proto.Quest.is_random)
}

// uint32 parent_quest_id = 6;
void Quest::clear_parent_quest_id() {
  parent_quest_id_ = 0u;
}
::google::protobuf::uint32 Quest::parent_quest_id() const {
  // @@protoc_insertion_point(field_get:proto.Quest.parent_quest_id)
  return parent_quest_id_;
}
void Quest::set_parent_quest_id(::google::protobuf::uint32 value) {
  
  parent_quest_id_ = value;
  // @@protoc_insertion_point(field_set:proto.Quest.parent_quest_id)
}

// uint32 quest_config_id = 7;
void Quest::clear_quest_config_id() {
  quest_config_id_ = 0u;
}
::google::protobuf::uint32 Quest::quest_config_id() const {
  // @@protoc_insertion_point(field_get:proto.Quest.quest_config_id)
  return quest_config_id_;
}
void Quest::set_quest_config_id(::google::protobuf::uint32 value) {
  
  quest_config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.Quest.quest_config_id)
}

// uint32 start_game_time = 8;
void Quest::clear_start_game_time() {
  start_game_time_ = 0u;
}
::google::protobuf::uint32 Quest::start_game_time() const {
  // @@protoc_insertion_point(field_get:proto.Quest.start_game_time)
  return start_game_time_;
}
void Quest::set_start_game_time(::google::protobuf::uint32 value) {
  
  start_game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.Quest.start_game_time)
}

// uint32 accept_time = 9;
void Quest::clear_accept_time() {
  accept_time_ = 0u;
}
::google::protobuf::uint32 Quest::accept_time() const {
  // @@protoc_insertion_point(field_get:proto.Quest.accept_time)
  return accept_time_;
}
void Quest::set_accept_time(::google::protobuf::uint32 value) {
  
  accept_time_ = value;
  // @@protoc_insertion_point(field_set:proto.Quest.accept_time)
}

// repeated uint32 lacked_npc_list = 10;
int Quest::lacked_npc_list_size() const {
  return lacked_npc_list_.size();
}
void Quest::clear_lacked_npc_list() {
  lacked_npc_list_.Clear();
}
::google::protobuf::uint32 Quest::lacked_npc_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.Quest.lacked_npc_list)
  return lacked_npc_list_.Get(index);
}
void Quest::set_lacked_npc_list(int index, ::google::protobuf::uint32 value) {
  lacked_npc_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.Quest.lacked_npc_list)
}
void Quest::add_lacked_npc_list(::google::protobuf::uint32 value) {
  lacked_npc_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.Quest.lacked_npc_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Quest::lacked_npc_list() const {
  // @@protoc_insertion_point(field_list:proto.Quest.lacked_npc_list)
  return lacked_npc_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Quest::mutable_lacked_npc_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.Quest.lacked_npc_list)
  return &lacked_npc_list_;
}

// repeated uint32 finish_progress_list = 11;
int Quest::finish_progress_list_size() const {
  return finish_progress_list_.size();
}
void Quest::clear_finish_progress_list() {
  finish_progress_list_.Clear();
}
::google::protobuf::uint32 Quest::finish_progress_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.Quest.finish_progress_list)
  return finish_progress_list_.Get(index);
}
void Quest::set_finish_progress_list(int index, ::google::protobuf::uint32 value) {
  finish_progress_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.Quest.finish_progress_list)
}
void Quest::add_finish_progress_list(::google::protobuf::uint32 value) {
  finish_progress_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.Quest.finish_progress_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Quest::finish_progress_list() const {
  // @@protoc_insertion_point(field_list:proto.Quest.finish_progress_list)
  return finish_progress_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Quest::mutable_finish_progress_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.Quest.finish_progress_list)
  return &finish_progress_list_;
}

// repeated uint32 fail_progress_list = 12;
int Quest::fail_progress_list_size() const {
  return fail_progress_list_.size();
}
void Quest::clear_fail_progress_list() {
  fail_progress_list_.Clear();
}
::google::protobuf::uint32 Quest::fail_progress_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.Quest.fail_progress_list)
  return fail_progress_list_.Get(index);
}
void Quest::set_fail_progress_list(int index, ::google::protobuf::uint32 value) {
  fail_progress_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.Quest.fail_progress_list)
}
void Quest::add_fail_progress_list(::google::protobuf::uint32 value) {
  fail_progress_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.Quest.fail_progress_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Quest::fail_progress_list() const {
  // @@protoc_insertion_point(field_list:proto.Quest.fail_progress_list)
  return fail_progress_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Quest::mutable_fail_progress_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.Quest.fail_progress_list)
  return &fail_progress_list_;
}

// map<uint32, uint32> lacked_npc_map = 13;
int Quest::lacked_npc_map_size() const {
  return lacked_npc_map_.size();
}
void Quest::clear_lacked_npc_map() {
  lacked_npc_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
Quest::lacked_npc_map() const {
  // @@protoc_insertion_point(field_map:proto.Quest.lacked_npc_map)
  return lacked_npc_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
Quest::mutable_lacked_npc_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.Quest.lacked_npc_map)
  return lacked_npc_map_.MutableMap();
}

// repeated uint32 lacked_place_list = 14;
int Quest::lacked_place_list_size() const {
  return lacked_place_list_.size();
}
void Quest::clear_lacked_place_list() {
  lacked_place_list_.Clear();
}
::google::protobuf::uint32 Quest::lacked_place_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.Quest.lacked_place_list)
  return lacked_place_list_.Get(index);
}
void Quest::set_lacked_place_list(int index, ::google::protobuf::uint32 value) {
  lacked_place_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.Quest.lacked_place_list)
}
void Quest::add_lacked_place_list(::google::protobuf::uint32 value) {
  lacked_place_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.Quest.lacked_place_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Quest::lacked_place_list() const {
  // @@protoc_insertion_point(field_list:proto.Quest.lacked_place_list)
  return lacked_place_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Quest::mutable_lacked_place_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.Quest.lacked_place_list)
  return &lacked_place_list_;
}

// map<uint32, uint32> lacked_place_map = 15;
int Quest::lacked_place_map_size() const {
  return lacked_place_map_.size();
}
void Quest::clear_lacked_place_map() {
  lacked_place_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
Quest::lacked_place_map() const {
  // @@protoc_insertion_point(field_map:proto.Quest.lacked_place_map)
  return lacked_place_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
Quest::mutable_lacked_place_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.Quest.lacked_place_map)
  return lacked_place_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NpcPositionInfo::kNpcIdFieldNumber;
const int NpcPositionInfo::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NpcPositionInfo::NpcPositionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.NpcPositionInfo)
}
NpcPositionInfo::NpcPositionInfo(const NpcPositionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::proto::Vector(*from.pos_);
  } else {
    pos_ = NULL;
  }
  npc_id_ = from.npc_id_;
  // @@protoc_insertion_point(copy_constructor:proto.NpcPositionInfo)
}

void NpcPositionInfo::SharedCtor() {
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&npc_id_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(npc_id_));
  _cached_size_ = 0;
}

NpcPositionInfo::~NpcPositionInfo() {
  // @@protoc_insertion_point(destructor:proto.NpcPositionInfo)
  SharedDtor();
}

void NpcPositionInfo::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void NpcPositionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcPositionInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NpcPositionInfo& NpcPositionInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

NpcPositionInfo* NpcPositionInfo::New(::google::protobuf::Arena* arena) const {
  NpcPositionInfo* n = new NpcPositionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NpcPositionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.NpcPositionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
  npc_id_ = 0u;
  _internal_metadata_.Clear();
}

bool NpcPositionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.NpcPositionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 npc_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.NpcPositionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.NpcPositionInfo)
  return false;
#undef DO_
}

void NpcPositionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.NpcPositionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 npc_id = 1;
  if (this->npc_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npc_id(), output);
  }

  // .proto.Vector pos = 2;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pos_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.NpcPositionInfo)
}

::google::protobuf::uint8* NpcPositionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.NpcPositionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 npc_id = 1;
  if (this->npc_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npc_id(), target);
  }

  // .proto.Vector pos = 2;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pos_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.NpcPositionInfo)
  return target;
}

size_t NpcPositionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.NpcPositionInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.Vector pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  // uint32 npc_id = 1;
  if (this->npc_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->npc_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcPositionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.NpcPositionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NpcPositionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NpcPositionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.NpcPositionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.NpcPositionInfo)
    MergeFrom(*source);
  }
}

void NpcPositionInfo::MergeFrom(const NpcPositionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.NpcPositionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    mutable_pos()->::proto::Vector::MergeFrom(from.pos());
  }
  if (from.npc_id() != 0) {
    set_npc_id(from.npc_id());
  }
}

void NpcPositionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.NpcPositionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcPositionInfo::CopyFrom(const NpcPositionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.NpcPositionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcPositionInfo::IsInitialized() const {
  return true;
}

void NpcPositionInfo::Swap(NpcPositionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NpcPositionInfo::InternalSwap(NpcPositionInfo* other) {
  using std::swap;
  swap(pos_, other->pos_);
  swap(npc_id_, other->npc_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NpcPositionInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NpcPositionInfo

// uint32 npc_id = 1;
void NpcPositionInfo::clear_npc_id() {
  npc_id_ = 0u;
}
::google::protobuf::uint32 NpcPositionInfo::npc_id() const {
  // @@protoc_insertion_point(field_get:proto.NpcPositionInfo.npc_id)
  return npc_id_;
}
void NpcPositionInfo::set_npc_id(::google::protobuf::uint32 value) {
  
  npc_id_ = value;
  // @@protoc_insertion_point(field_set:proto.NpcPositionInfo.npc_id)
}

// .proto.Vector pos = 2;
bool NpcPositionInfo::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
void NpcPositionInfo::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
const ::proto::Vector& NpcPositionInfo::pos() const {
  const ::proto::Vector* p = pos_;
  // @@protoc_insertion_point(field_get:proto.NpcPositionInfo.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* NpcPositionInfo::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.NpcPositionInfo.pos)
  return pos_;
}
::proto::Vector* NpcPositionInfo::release_pos() {
  // @@protoc_insertion_point(field_release:proto.NpcPositionInfo.pos)
  
  ::proto::Vector* temp = pos_;
  pos_ = NULL;
  return temp;
}
void NpcPositionInfo::set_allocated_pos(::proto::Vector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.NpcPositionInfo.pos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MailTextContent::kTitleFieldNumber;
const int MailTextContent::kContentFieldNumber;
const int MailTextContent::kSenderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MailTextContent::MailTextContent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MailTextContent)
}
MailTextContent::MailTextContent(const MailTextContent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sender().size() > 0) {
    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.MailTextContent)
}

void MailTextContent::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MailTextContent::~MailTextContent() {
  // @@protoc_insertion_point(destructor:proto.MailTextContent)
  SharedDtor();
}

void MailTextContent::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MailTextContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailTextContent::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MailTextContent& MailTextContent::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

MailTextContent* MailTextContent::New(::google::protobuf::Arena* arena) const {
  MailTextContent* n = new MailTextContent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MailTextContent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MailTextContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool MailTextContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MailTextContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string title = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.MailTextContent.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.MailTextContent.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sender = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sender().data(), static_cast<int>(this->sender().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.MailTextContent.sender"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MailTextContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MailTextContent)
  return false;
#undef DO_
}

void MailTextContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MailTextContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.MailTextContent.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // string content = 2;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.MailTextContent.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // string sender = 3;
  if (this->sender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.MailTextContent.sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sender(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MailTextContent)
}

::google::protobuf::uint8* MailTextContent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MailTextContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.MailTextContent.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // string content = 2;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.MailTextContent.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // string sender = 3;
  if (this->sender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.MailTextContent.sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sender(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MailTextContent)
  return target;
}

size_t MailTextContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MailTextContent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string title = 1;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // string sender = 3;
  if (this->sender().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailTextContent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MailTextContent)
  GOOGLE_DCHECK_NE(&from, this);
  const MailTextContent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MailTextContent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MailTextContent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MailTextContent)
    MergeFrom(*source);
  }
}

void MailTextContent::MergeFrom(const MailTextContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MailTextContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.sender().size() > 0) {

    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
}

void MailTextContent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MailTextContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailTextContent::CopyFrom(const MailTextContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MailTextContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailTextContent::IsInitialized() const {
  return true;
}

void MailTextContent::Swap(MailTextContent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MailTextContent::InternalSwap(MailTextContent* other) {
  using std::swap;
  title_.Swap(&other->title_);
  content_.Swap(&other->content_);
  sender_.Swap(&other->sender_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MailTextContent::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MailTextContent

// string title = 1;
void MailTextContent::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MailTextContent::title() const {
  // @@protoc_insertion_point(field_get:proto.MailTextContent.title)
  return title_.GetNoArena();
}
void MailTextContent::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.MailTextContent.title)
}
#if LANG_CXX11
void MailTextContent::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.MailTextContent.title)
}
#endif
void MailTextContent::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.MailTextContent.title)
}
void MailTextContent::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.MailTextContent.title)
}
::std::string* MailTextContent::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:proto.MailTextContent.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MailTextContent::release_title() {
  // @@protoc_insertion_point(field_release:proto.MailTextContent.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MailTextContent::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.MailTextContent.title)
}

// string content = 2;
void MailTextContent::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MailTextContent::content() const {
  // @@protoc_insertion_point(field_get:proto.MailTextContent.content)
  return content_.GetNoArena();
}
void MailTextContent::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.MailTextContent.content)
}
#if LANG_CXX11
void MailTextContent::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.MailTextContent.content)
}
#endif
void MailTextContent::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.MailTextContent.content)
}
void MailTextContent::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.MailTextContent.content)
}
::std::string* MailTextContent::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:proto.MailTextContent.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MailTextContent::release_content() {
  // @@protoc_insertion_point(field_release:proto.MailTextContent.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MailTextContent::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:proto.MailTextContent.content)
}

// string sender = 3;
void MailTextContent::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MailTextContent::sender() const {
  // @@protoc_insertion_point(field_get:proto.MailTextContent.sender)
  return sender_.GetNoArena();
}
void MailTextContent::set_sender(const ::std::string& value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.MailTextContent.sender)
}
#if LANG_CXX11
void MailTextContent::set_sender(::std::string&& value) {
  
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.MailTextContent.sender)
}
#endif
void MailTextContent::set_sender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.MailTextContent.sender)
}
void MailTextContent::set_sender(const char* value, size_t size) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.MailTextContent.sender)
}
::std::string* MailTextContent::mutable_sender() {
  
  // @@protoc_insertion_point(field_mutable:proto.MailTextContent.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MailTextContent::release_sender() {
  // @@protoc_insertion_point(field_release:proto.MailTextContent.sender)
  
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MailTextContent::set_allocated_sender(::std::string* sender) {
  if (sender != NULL) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:proto.MailTextContent.sender)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MailItem::kEquipParamFieldNumber;
const int MailItem::kDeleteInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MailItem::MailItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MailItem)
}
MailItem::MailItem(const MailItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_equip_param()) {
    equip_param_ = new ::proto::EquipParam(*from.equip_param_);
  } else {
    equip_param_ = NULL;
  }
  if (from.has_delete_info()) {
    delete_info_ = new ::proto::MaterialDeleteInfo(*from.delete_info_);
  } else {
    delete_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.MailItem)
}

void MailItem::SharedCtor() {
  ::memset(&equip_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delete_info_) -
      reinterpret_cast<char*>(&equip_param_)) + sizeof(delete_info_));
  _cached_size_ = 0;
}

MailItem::~MailItem() {
  // @@protoc_insertion_point(destructor:proto.MailItem)
  SharedDtor();
}

void MailItem::SharedDtor() {
  if (this != internal_default_instance()) delete equip_param_;
  if (this != internal_default_instance()) delete delete_info_;
}

void MailItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailItem::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MailItem& MailItem::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

MailItem* MailItem::New(::google::protobuf::Arena* arena) const {
  MailItem* n = new MailItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MailItem::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MailItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && equip_param_ != NULL) {
    delete equip_param_;
  }
  equip_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && delete_info_ != NULL) {
    delete delete_info_;
  }
  delete_info_ = NULL;
  _internal_metadata_.Clear();
}

bool MailItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MailItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.EquipParam equip_param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MaterialDeleteInfo delete_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MailItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MailItem)
  return false;
#undef DO_
}

void MailItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MailItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.EquipParam equip_param = 1;
  if (this->has_equip_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->equip_param_, output);
  }

  // .proto.MaterialDeleteInfo delete_info = 2;
  if (this->has_delete_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->delete_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MailItem)
}

::google::protobuf::uint8* MailItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MailItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.EquipParam equip_param = 1;
  if (this->has_equip_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->equip_param_, deterministic, target);
  }

  // .proto.MaterialDeleteInfo delete_info = 2;
  if (this->has_delete_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->delete_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MailItem)
  return target;
}

size_t MailItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MailItem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.EquipParam equip_param = 1;
  if (this->has_equip_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equip_param_);
  }

  // .proto.MaterialDeleteInfo delete_info = 2;
  if (this->has_delete_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->delete_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MailItem)
  GOOGLE_DCHECK_NE(&from, this);
  const MailItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MailItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MailItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MailItem)
    MergeFrom(*source);
  }
}

void MailItem::MergeFrom(const MailItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MailItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_equip_param()) {
    mutable_equip_param()->::proto::EquipParam::MergeFrom(from.equip_param());
  }
  if (from.has_delete_info()) {
    mutable_delete_info()->::proto::MaterialDeleteInfo::MergeFrom(from.delete_info());
  }
}

void MailItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MailItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailItem::CopyFrom(const MailItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MailItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailItem::IsInitialized() const {
  return true;
}

void MailItem::Swap(MailItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MailItem::InternalSwap(MailItem* other) {
  using std::swap;
  swap(equip_param_, other->equip_param_);
  swap(delete_info_, other->delete_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MailItem::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MailItem

// .proto.EquipParam equip_param = 1;
bool MailItem::has_equip_param() const {
  return this != internal_default_instance() && equip_param_ != NULL;
}
void MailItem::clear_equip_param() {
  if (GetArenaNoVirtual() == NULL && equip_param_ != NULL) delete equip_param_;
  equip_param_ = NULL;
}
const ::proto::EquipParam& MailItem::equip_param() const {
  const ::proto::EquipParam* p = equip_param_;
  // @@protoc_insertion_point(field_get:proto.MailItem.equip_param)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::EquipParam*>(
      &::proto::_EquipParam_default_instance_);
}
::proto::EquipParam* MailItem::mutable_equip_param() {
  
  if (equip_param_ == NULL) {
    equip_param_ = new ::proto::EquipParam;
  }
  // @@protoc_insertion_point(field_mutable:proto.MailItem.equip_param)
  return equip_param_;
}
::proto::EquipParam* MailItem::release_equip_param() {
  // @@protoc_insertion_point(field_release:proto.MailItem.equip_param)
  
  ::proto::EquipParam* temp = equip_param_;
  equip_param_ = NULL;
  return temp;
}
void MailItem::set_allocated_equip_param(::proto::EquipParam* equip_param) {
  delete equip_param_;
  equip_param_ = equip_param;
  if (equip_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MailItem.equip_param)
}

// .proto.MaterialDeleteInfo delete_info = 2;
bool MailItem::has_delete_info() const {
  return this != internal_default_instance() && delete_info_ != NULL;
}
void MailItem::clear_delete_info() {
  if (GetArenaNoVirtual() == NULL && delete_info_ != NULL) delete delete_info_;
  delete_info_ = NULL;
}
const ::proto::MaterialDeleteInfo& MailItem::delete_info() const {
  const ::proto::MaterialDeleteInfo* p = delete_info_;
  // @@protoc_insertion_point(field_get:proto.MailItem.delete_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::MaterialDeleteInfo*>(
      &::proto::_MaterialDeleteInfo_default_instance_);
}
::proto::MaterialDeleteInfo* MailItem::mutable_delete_info() {
  
  if (delete_info_ == NULL) {
    delete_info_ = new ::proto::MaterialDeleteInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MailItem.delete_info)
  return delete_info_;
}
::proto::MaterialDeleteInfo* MailItem::release_delete_info() {
  // @@protoc_insertion_point(field_release:proto.MailItem.delete_info)
  
  ::proto::MaterialDeleteInfo* temp = delete_info_;
  delete_info_ = NULL;
  return temp;
}
void MailItem::set_allocated_delete_info(::proto::MaterialDeleteInfo* delete_info) {
  delete delete_info_;
  delete_info_ = delete_info;
  if (delete_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MailItem.delete_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MailData::kMailIdFieldNumber;
const int MailData::kMailTextContentFieldNumber;
const int MailData::kItemListFieldNumber;
const int MailData::kSendTimeFieldNumber;
const int MailData::kExpireTimeFieldNumber;
const int MailData::kImportanceFieldNumber;
const int MailData::kIsReadFieldNumber;
const int MailData::kIsAttachmentGotFieldNumber;
const int MailData::kConfigIdFieldNumber;
const int MailData::kArgumentListFieldNumber;
const int MailData::kCollectStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MailData::MailData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MailData)
}
MailData::MailData(const MailData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      item_list_(from.item_list_),
      argument_list_(from.argument_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mail_text_content()) {
    mail_text_content_ = new ::proto::MailTextContent(*from.mail_text_content_);
  } else {
    mail_text_content_ = NULL;
  }
  ::memcpy(&mail_id_, &from.mail_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&collect_state_) -
    reinterpret_cast<char*>(&mail_id_)) + sizeof(collect_state_));
  // @@protoc_insertion_point(copy_constructor:proto.MailData)
}

void MailData::SharedCtor() {
  ::memset(&mail_text_content_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collect_state_) -
      reinterpret_cast<char*>(&mail_text_content_)) + sizeof(collect_state_));
  _cached_size_ = 0;
}

MailData::~MailData() {
  // @@protoc_insertion_point(destructor:proto.MailData)
  SharedDtor();
}

void MailData::SharedDtor() {
  if (this != internal_default_instance()) delete mail_text_content_;
}

void MailData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MailData& MailData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

MailData* MailData::New(::google::protobuf::Arena* arena) const {
  MailData* n = new MailData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MailData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MailData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_list_.Clear();
  argument_list_.Clear();
  if (GetArenaNoVirtual() == NULL && mail_text_content_ != NULL) {
    delete mail_text_content_;
  }
  mail_text_content_ = NULL;
  ::memset(&mail_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collect_state_) -
      reinterpret_cast<char*>(&mail_id_)) + sizeof(collect_state_));
  _internal_metadata_.Clear();
}

bool MailData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MailData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 mail_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MailTextContent mail_text_content = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail_text_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.MailItem item_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 send_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 expire_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 importance = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &importance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_read = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_attachment_got = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attachment_got_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 config_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string argument_list = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_argument_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->argument_list(this->argument_list_size() - 1).data(),
            static_cast<int>(this->argument_list(this->argument_list_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.MailData.argument_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MailCollectState collect_state = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_collect_state(static_cast< ::proto::MailCollectState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MailData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MailData)
  return false;
#undef DO_
}

void MailData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MailData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mail_id = 1;
  if (this->mail_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mail_id(), output);
  }

  // .proto.MailTextContent mail_text_content = 4;
  if (this->has_mail_text_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->mail_text_content_, output);
  }

  // repeated .proto.MailItem item_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->item_list(static_cast<int>(i)), output);
  }

  // uint32 send_time = 8;
  if (this->send_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->send_time(), output);
  }

  // uint32 expire_time = 9;
  if (this->expire_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->expire_time(), output);
  }

  // uint32 importance = 10;
  if (this->importance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->importance(), output);
  }

  // bool is_read = 11;
  if (this->is_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_read(), output);
  }

  // bool is_attachment_got = 12;
  if (this->is_attachment_got() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_attachment_got(), output);
  }

  // uint32 config_id = 13;
  if (this->config_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->config_id(), output);
  }

  // repeated string argument_list = 14;
  for (int i = 0, n = this->argument_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->argument_list(i).data(), static_cast<int>(this->argument_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.MailData.argument_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->argument_list(i), output);
  }

  // .proto.MailCollectState collect_state = 15;
  if (this->collect_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->collect_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MailData)
}

::google::protobuf::uint8* MailData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MailData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mail_id = 1;
  if (this->mail_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mail_id(), target);
  }

  // .proto.MailTextContent mail_text_content = 4;
  if (this->has_mail_text_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->mail_text_content_, deterministic, target);
  }

  // repeated .proto.MailItem item_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->item_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 send_time = 8;
  if (this->send_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->send_time(), target);
  }

  // uint32 expire_time = 9;
  if (this->expire_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->expire_time(), target);
  }

  // uint32 importance = 10;
  if (this->importance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->importance(), target);
  }

  // bool is_read = 11;
  if (this->is_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_read(), target);
  }

  // bool is_attachment_got = 12;
  if (this->is_attachment_got() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_attachment_got(), target);
  }

  // uint32 config_id = 13;
  if (this->config_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->config_id(), target);
  }

  // repeated string argument_list = 14;
  for (int i = 0, n = this->argument_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->argument_list(i).data(), static_cast<int>(this->argument_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.MailData.argument_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->argument_list(i), target);
  }

  // .proto.MailCollectState collect_state = 15;
  if (this->collect_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->collect_state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MailData)
  return target;
}

size_t MailData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MailData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.MailItem item_list = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->item_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_list(static_cast<int>(i)));
    }
  }

  // repeated string argument_list = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->argument_list_size());
  for (int i = 0, n = this->argument_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->argument_list(i));
  }

  // .proto.MailTextContent mail_text_content = 4;
  if (this->has_mail_text_content()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mail_text_content_);
  }

  // uint32 mail_id = 1;
  if (this->mail_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mail_id());
  }

  // uint32 send_time = 8;
  if (this->send_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->send_time());
  }

  // uint32 expire_time = 9;
  if (this->expire_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->expire_time());
  }

  // uint32 importance = 10;
  if (this->importance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->importance());
  }

  // bool is_read = 11;
  if (this->is_read() != 0) {
    total_size += 1 + 1;
  }

  // bool is_attachment_got = 12;
  if (this->is_attachment_got() != 0) {
    total_size += 1 + 1;
  }

  // uint32 config_id = 13;
  if (this->config_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->config_id());
  }

  // .proto.MailCollectState collect_state = 15;
  if (this->collect_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->collect_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MailData)
  GOOGLE_DCHECK_NE(&from, this);
  const MailData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MailData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MailData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MailData)
    MergeFrom(*source);
  }
}

void MailData::MergeFrom(const MailData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MailData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_list_.MergeFrom(from.item_list_);
  argument_list_.MergeFrom(from.argument_list_);
  if (from.has_mail_text_content()) {
    mutable_mail_text_content()->::proto::MailTextContent::MergeFrom(from.mail_text_content());
  }
  if (from.mail_id() != 0) {
    set_mail_id(from.mail_id());
  }
  if (from.send_time() != 0) {
    set_send_time(from.send_time());
  }
  if (from.expire_time() != 0) {
    set_expire_time(from.expire_time());
  }
  if (from.importance() != 0) {
    set_importance(from.importance());
  }
  if (from.is_read() != 0) {
    set_is_read(from.is_read());
  }
  if (from.is_attachment_got() != 0) {
    set_is_attachment_got(from.is_attachment_got());
  }
  if (from.config_id() != 0) {
    set_config_id(from.config_id());
  }
  if (from.collect_state() != 0) {
    set_collect_state(from.collect_state());
  }
}

void MailData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MailData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailData::CopyFrom(const MailData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MailData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailData::IsInitialized() const {
  return true;
}

void MailData::Swap(MailData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MailData::InternalSwap(MailData* other) {
  using std::swap;
  item_list_.InternalSwap(&other->item_list_);
  argument_list_.InternalSwap(&other->argument_list_);
  swap(mail_text_content_, other->mail_text_content_);
  swap(mail_id_, other->mail_id_);
  swap(send_time_, other->send_time_);
  swap(expire_time_, other->expire_time_);
  swap(importance_, other->importance_);
  swap(is_read_, other->is_read_);
  swap(is_attachment_got_, other->is_attachment_got_);
  swap(config_id_, other->config_id_);
  swap(collect_state_, other->collect_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MailData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MailData

// uint32 mail_id = 1;
void MailData::clear_mail_id() {
  mail_id_ = 0u;
}
::google::protobuf::uint32 MailData::mail_id() const {
  // @@protoc_insertion_point(field_get:proto.MailData.mail_id)
  return mail_id_;
}
void MailData::set_mail_id(::google::protobuf::uint32 value) {
  
  mail_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MailData.mail_id)
}

// .proto.MailTextContent mail_text_content = 4;
bool MailData::has_mail_text_content() const {
  return this != internal_default_instance() && mail_text_content_ != NULL;
}
void MailData::clear_mail_text_content() {
  if (GetArenaNoVirtual() == NULL && mail_text_content_ != NULL) delete mail_text_content_;
  mail_text_content_ = NULL;
}
const ::proto::MailTextContent& MailData::mail_text_content() const {
  const ::proto::MailTextContent* p = mail_text_content_;
  // @@protoc_insertion_point(field_get:proto.MailData.mail_text_content)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::MailTextContent*>(
      &::proto::_MailTextContent_default_instance_);
}
::proto::MailTextContent* MailData::mutable_mail_text_content() {
  
  if (mail_text_content_ == NULL) {
    mail_text_content_ = new ::proto::MailTextContent;
  }
  // @@protoc_insertion_point(field_mutable:proto.MailData.mail_text_content)
  return mail_text_content_;
}
::proto::MailTextContent* MailData::release_mail_text_content() {
  // @@protoc_insertion_point(field_release:proto.MailData.mail_text_content)
  
  ::proto::MailTextContent* temp = mail_text_content_;
  mail_text_content_ = NULL;
  return temp;
}
void MailData::set_allocated_mail_text_content(::proto::MailTextContent* mail_text_content) {
  delete mail_text_content_;
  mail_text_content_ = mail_text_content;
  if (mail_text_content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MailData.mail_text_content)
}

// repeated .proto.MailItem item_list = 7;
int MailData::item_list_size() const {
  return item_list_.size();
}
void MailData::clear_item_list() {
  item_list_.Clear();
}
const ::proto::MailItem& MailData::item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.MailData.item_list)
  return item_list_.Get(index);
}
::proto::MailItem* MailData::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.MailData.item_list)
  return item_list_.Mutable(index);
}
::proto::MailItem* MailData::add_item_list() {
  // @@protoc_insertion_point(field_add:proto.MailData.item_list)
  return item_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::MailItem >*
MailData::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.MailData.item_list)
  return &item_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::MailItem >&
MailData::item_list() const {
  // @@protoc_insertion_point(field_list:proto.MailData.item_list)
  return item_list_;
}

// uint32 send_time = 8;
void MailData::clear_send_time() {
  send_time_ = 0u;
}
::google::protobuf::uint32 MailData::send_time() const {
  // @@protoc_insertion_point(field_get:proto.MailData.send_time)
  return send_time_;
}
void MailData::set_send_time(::google::protobuf::uint32 value) {
  
  send_time_ = value;
  // @@protoc_insertion_point(field_set:proto.MailData.send_time)
}

// uint32 expire_time = 9;
void MailData::clear_expire_time() {
  expire_time_ = 0u;
}
::google::protobuf::uint32 MailData::expire_time() const {
  // @@protoc_insertion_point(field_get:proto.MailData.expire_time)
  return expire_time_;
}
void MailData::set_expire_time(::google::protobuf::uint32 value) {
  
  expire_time_ = value;
  // @@protoc_insertion_point(field_set:proto.MailData.expire_time)
}

// uint32 importance = 10;
void MailData::clear_importance() {
  importance_ = 0u;
}
::google::protobuf::uint32 MailData::importance() const {
  // @@protoc_insertion_point(field_get:proto.MailData.importance)
  return importance_;
}
void MailData::set_importance(::google::protobuf::uint32 value) {
  
  importance_ = value;
  // @@protoc_insertion_point(field_set:proto.MailData.importance)
}

// bool is_read = 11;
void MailData::clear_is_read() {
  is_read_ = false;
}
bool MailData::is_read() const {
  // @@protoc_insertion_point(field_get:proto.MailData.is_read)
  return is_read_;
}
void MailData::set_is_read(bool value) {
  
  is_read_ = value;
  // @@protoc_insertion_point(field_set:proto.MailData.is_read)
}

// bool is_attachment_got = 12;
void MailData::clear_is_attachment_got() {
  is_attachment_got_ = false;
}
bool MailData::is_attachment_got() const {
  // @@protoc_insertion_point(field_get:proto.MailData.is_attachment_got)
  return is_attachment_got_;
}
void MailData::set_is_attachment_got(bool value) {
  
  is_attachment_got_ = value;
  // @@protoc_insertion_point(field_set:proto.MailData.is_attachment_got)
}

// uint32 config_id = 13;
void MailData::clear_config_id() {
  config_id_ = 0u;
}
::google::protobuf::uint32 MailData::config_id() const {
  // @@protoc_insertion_point(field_get:proto.MailData.config_id)
  return config_id_;
}
void MailData::set_config_id(::google::protobuf::uint32 value) {
  
  config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MailData.config_id)
}

// repeated string argument_list = 14;
int MailData::argument_list_size() const {
  return argument_list_.size();
}
void MailData::clear_argument_list() {
  argument_list_.Clear();
}
const ::std::string& MailData::argument_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.MailData.argument_list)
  return argument_list_.Get(index);
}
::std::string* MailData::mutable_argument_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.MailData.argument_list)
  return argument_list_.Mutable(index);
}
void MailData::set_argument_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.MailData.argument_list)
  argument_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void MailData::set_argument_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.MailData.argument_list)
  argument_list_.Mutable(index)->assign(std::move(value));
}
#endif
void MailData::set_argument_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  argument_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.MailData.argument_list)
}
void MailData::set_argument_list(int index, const char* value, size_t size) {
  argument_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.MailData.argument_list)
}
::std::string* MailData::add_argument_list() {
  // @@protoc_insertion_point(field_add_mutable:proto.MailData.argument_list)
  return argument_list_.Add();
}
void MailData::add_argument_list(const ::std::string& value) {
  argument_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.MailData.argument_list)
}
#if LANG_CXX11
void MailData::add_argument_list(::std::string&& value) {
  argument_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.MailData.argument_list)
}
#endif
void MailData::add_argument_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  argument_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.MailData.argument_list)
}
void MailData::add_argument_list(const char* value, size_t size) {
  argument_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.MailData.argument_list)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MailData::argument_list() const {
  // @@protoc_insertion_point(field_list:proto.MailData.argument_list)
  return argument_list_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MailData::mutable_argument_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.MailData.argument_list)
  return &argument_list_;
}

// .proto.MailCollectState collect_state = 15;
void MailData::clear_collect_state() {
  collect_state_ = 0;
}
::proto::MailCollectState MailData::collect_state() const {
  // @@protoc_insertion_point(field_get:proto.MailData.collect_state)
  return static_cast< ::proto::MailCollectState >(collect_state_);
}
void MailData::set_collect_state(::proto::MailCollectState value) {
  
  collect_state_ = value;
  // @@protoc_insertion_point(field_set:proto.MailData.collect_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnlinePlayerInfo::kUidFieldNumber;
const int OnlinePlayerInfo::kNicknameFieldNumber;
const int OnlinePlayerInfo::kPlayerLevelFieldNumber;
const int OnlinePlayerInfo::kAvatarIdFieldNumber;
const int OnlinePlayerInfo::kMpSettingTypeFieldNumber;
const int OnlinePlayerInfo::kCurPlayerNumInWorldFieldNumber;
const int OnlinePlayerInfo::kWorldLevelFieldNumber;
const int OnlinePlayerInfo::kOnlineIdFieldNumber;
const int OnlinePlayerInfo::kNameCardIdFieldNumber;
const int OnlinePlayerInfo::kBlacklistUidListFieldNumber;
const int OnlinePlayerInfo::kSignatureFieldNumber;
const int OnlinePlayerInfo::kProfilePictureFieldNumber;
const int OnlinePlayerInfo::kPsnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnlinePlayerInfo::OnlinePlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.OnlinePlayerInfo)
}
OnlinePlayerInfo::OnlinePlayerInfo(const OnlinePlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      blacklist_uid_list_(from.blacklist_uid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nickname().size() > 0) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.online_id().size() > 0) {
    online_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.online_id_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  psn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.psn_id().size() > 0) {
    psn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.psn_id_);
  }
  if (from.has_profile_picture()) {
    profile_picture_ = new ::proto::ProfilePicture(*from.profile_picture_);
  } else {
    profile_picture_ = NULL;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&name_card_id_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(name_card_id_));
  // @@protoc_insertion_point(copy_constructor:proto.OnlinePlayerInfo)
}

void OnlinePlayerInfo::SharedCtor() {
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  psn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&profile_picture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&name_card_id_) -
      reinterpret_cast<char*>(&profile_picture_)) + sizeof(name_card_id_));
  _cached_size_ = 0;
}

OnlinePlayerInfo::~OnlinePlayerInfo() {
  // @@protoc_insertion_point(destructor:proto.OnlinePlayerInfo)
  SharedDtor();
}

void OnlinePlayerInfo::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  online_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  psn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete profile_picture_;
}

void OnlinePlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlinePlayerInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OnlinePlayerInfo& OnlinePlayerInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

OnlinePlayerInfo* OnlinePlayerInfo::New(::google::protobuf::Arena* arena) const {
  OnlinePlayerInfo* n = new OnlinePlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OnlinePlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.OnlinePlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blacklist_uid_list_.Clear();
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  online_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  psn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && profile_picture_ != NULL) {
    delete profile_picture_;
  }
  profile_picture_ = NULL;
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&name_card_id_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(name_card_id_));
  _internal_metadata_.Clear();
}

bool OnlinePlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.OnlinePlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nickname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nickname().data(), static_cast<int>(this->nickname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.OnlinePlayerInfo.nickname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 player_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 avatar_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MpSettingType mp_setting_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mp_setting_type(static_cast< ::proto::MpSettingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_player_num_in_world = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_player_num_in_world_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 world_level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &world_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string online_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_online_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->online_id().data(), static_cast<int>(this->online_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.OnlinePlayerInfo.online_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 name_card_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 blacklist_uid_list = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_blacklist_uid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 82u, input, this->mutable_blacklist_uid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string signature = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), static_cast<int>(this->signature().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.OnlinePlayerInfo.signature"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ProfilePicture profile_picture = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profile_picture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string psn_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_psn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->psn_id().data(), static_cast<int>(this->psn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.OnlinePlayerInfo.psn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.OnlinePlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.OnlinePlayerInfo)
  return false;
#undef DO_
}

void OnlinePlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.OnlinePlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // string nickname = 2;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.OnlinePlayerInfo.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // uint32 player_level = 3;
  if (this->player_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_level(), output);
  }

  // uint32 avatar_id = 4;
  if (this->avatar_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->avatar_id(), output);
  }

  // .proto.MpSettingType mp_setting_type = 5;
  if (this->mp_setting_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->mp_setting_type(), output);
  }

  // uint32 cur_player_num_in_world = 6;
  if (this->cur_player_num_in_world() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cur_player_num_in_world(), output);
  }

  // uint32 world_level = 7;
  if (this->world_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->world_level(), output);
  }

  // string online_id = 8;
  if (this->online_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->online_id().data(), static_cast<int>(this->online_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.OnlinePlayerInfo.online_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->online_id(), output);
  }

  // uint32 name_card_id = 9;
  if (this->name_card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->name_card_id(), output);
  }

  // repeated uint32 blacklist_uid_list = 10;
  if (this->blacklist_uid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _blacklist_uid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->blacklist_uid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->blacklist_uid_list(i), output);
  }

  // string signature = 11;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), static_cast<int>(this->signature().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.OnlinePlayerInfo.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->signature(), output);
  }

  // .proto.ProfilePicture profile_picture = 12;
  if (this->has_profile_picture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->profile_picture_, output);
  }

  // string psn_id = 13;
  if (this->psn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->psn_id().data(), static_cast<int>(this->psn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.OnlinePlayerInfo.psn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->psn_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.OnlinePlayerInfo)
}

::google::protobuf::uint8* OnlinePlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.OnlinePlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // string nickname = 2;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.OnlinePlayerInfo.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // uint32 player_level = 3;
  if (this->player_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_level(), target);
  }

  // uint32 avatar_id = 4;
  if (this->avatar_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->avatar_id(), target);
  }

  // .proto.MpSettingType mp_setting_type = 5;
  if (this->mp_setting_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->mp_setting_type(), target);
  }

  // uint32 cur_player_num_in_world = 6;
  if (this->cur_player_num_in_world() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cur_player_num_in_world(), target);
  }

  // uint32 world_level = 7;
  if (this->world_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->world_level(), target);
  }

  // string online_id = 8;
  if (this->online_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->online_id().data(), static_cast<int>(this->online_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.OnlinePlayerInfo.online_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->online_id(), target);
  }

  // uint32 name_card_id = 9;
  if (this->name_card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->name_card_id(), target);
  }

  // repeated uint32 blacklist_uid_list = 10;
  if (this->blacklist_uid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _blacklist_uid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->blacklist_uid_list_, target);
  }

  // string signature = 11;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), static_cast<int>(this->signature().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.OnlinePlayerInfo.signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->signature(), target);
  }

  // .proto.ProfilePicture profile_picture = 12;
  if (this->has_profile_picture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->profile_picture_, deterministic, target);
  }

  // string psn_id = 13;
  if (this->psn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->psn_id().data(), static_cast<int>(this->psn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.OnlinePlayerInfo.psn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->psn_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.OnlinePlayerInfo)
  return target;
}

size_t OnlinePlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.OnlinePlayerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 blacklist_uid_list = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->blacklist_uid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _blacklist_uid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string nickname = 2;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  // string online_id = 8;
  if (this->online_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->online_id());
  }

  // string signature = 11;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  // string psn_id = 13;
  if (this->psn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->psn_id());
  }

  // .proto.ProfilePicture profile_picture = 12;
  if (this->has_profile_picture()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->profile_picture_);
  }

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // uint32 player_level = 3;
  if (this->player_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_level());
  }

  // uint32 avatar_id = 4;
  if (this->avatar_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avatar_id());
  }

  // .proto.MpSettingType mp_setting_type = 5;
  if (this->mp_setting_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp_setting_type());
  }

  // uint32 cur_player_num_in_world = 6;
  if (this->cur_player_num_in_world() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_player_num_in_world());
  }

  // uint32 world_level = 7;
  if (this->world_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->world_level());
  }

  // uint32 name_card_id = 9;
  if (this->name_card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->name_card_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlinePlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.OnlinePlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OnlinePlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OnlinePlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.OnlinePlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.OnlinePlayerInfo)
    MergeFrom(*source);
  }
}

void OnlinePlayerInfo::MergeFrom(const OnlinePlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.OnlinePlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blacklist_uid_list_.MergeFrom(from.blacklist_uid_list_);
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.online_id().size() > 0) {

    online_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.online_id_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.psn_id().size() > 0) {

    psn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.psn_id_);
  }
  if (from.has_profile_picture()) {
    mutable_profile_picture()->::proto::ProfilePicture::MergeFrom(from.profile_picture());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.player_level() != 0) {
    set_player_level(from.player_level());
  }
  if (from.avatar_id() != 0) {
    set_avatar_id(from.avatar_id());
  }
  if (from.mp_setting_type() != 0) {
    set_mp_setting_type(from.mp_setting_type());
  }
  if (from.cur_player_num_in_world() != 0) {
    set_cur_player_num_in_world(from.cur_player_num_in_world());
  }
  if (from.world_level() != 0) {
    set_world_level(from.world_level());
  }
  if (from.name_card_id() != 0) {
    set_name_card_id(from.name_card_id());
  }
}

void OnlinePlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.OnlinePlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlinePlayerInfo::CopyFrom(const OnlinePlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.OnlinePlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlinePlayerInfo::IsInitialized() const {
  return true;
}

void OnlinePlayerInfo::Swap(OnlinePlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnlinePlayerInfo::InternalSwap(OnlinePlayerInfo* other) {
  using std::swap;
  blacklist_uid_list_.InternalSwap(&other->blacklist_uid_list_);
  nickname_.Swap(&other->nickname_);
  online_id_.Swap(&other->online_id_);
  signature_.Swap(&other->signature_);
  psn_id_.Swap(&other->psn_id_);
  swap(profile_picture_, other->profile_picture_);
  swap(uid_, other->uid_);
  swap(player_level_, other->player_level_);
  swap(avatar_id_, other->avatar_id_);
  swap(mp_setting_type_, other->mp_setting_type_);
  swap(cur_player_num_in_world_, other->cur_player_num_in_world_);
  swap(world_level_, other->world_level_);
  swap(name_card_id_, other->name_card_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OnlinePlayerInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OnlinePlayerInfo

// uint32 uid = 1;
void OnlinePlayerInfo::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 OnlinePlayerInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.OnlinePlayerInfo.uid)
  return uid_;
}
void OnlinePlayerInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.OnlinePlayerInfo.uid)
}

// string nickname = 2;
void OnlinePlayerInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OnlinePlayerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:proto.OnlinePlayerInfo.nickname)
  return nickname_.GetNoArena();
}
void OnlinePlayerInfo::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.OnlinePlayerInfo.nickname)
}
#if LANG_CXX11
void OnlinePlayerInfo::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.OnlinePlayerInfo.nickname)
}
#endif
void OnlinePlayerInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.OnlinePlayerInfo.nickname)
}
void OnlinePlayerInfo::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.OnlinePlayerInfo.nickname)
}
::std::string* OnlinePlayerInfo::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:proto.OnlinePlayerInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OnlinePlayerInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:proto.OnlinePlayerInfo.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OnlinePlayerInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.OnlinePlayerInfo.nickname)
}

// uint32 player_level = 3;
void OnlinePlayerInfo::clear_player_level() {
  player_level_ = 0u;
}
::google::protobuf::uint32 OnlinePlayerInfo::player_level() const {
  // @@protoc_insertion_point(field_get:proto.OnlinePlayerInfo.player_level)
  return player_level_;
}
void OnlinePlayerInfo::set_player_level(::google::protobuf::uint32 value) {
  
  player_level_ = value;
  // @@protoc_insertion_point(field_set:proto.OnlinePlayerInfo.player_level)
}

// uint32 avatar_id = 4;
void OnlinePlayerInfo::clear_avatar_id() {
  avatar_id_ = 0u;
}
::google::protobuf::uint32 OnlinePlayerInfo::avatar_id() const {
  // @@protoc_insertion_point(field_get:proto.OnlinePlayerInfo.avatar_id)
  return avatar_id_;
}
void OnlinePlayerInfo::set_avatar_id(::google::protobuf::uint32 value) {
  
  avatar_id_ = value;
  // @@protoc_insertion_point(field_set:proto.OnlinePlayerInfo.avatar_id)
}

// .proto.MpSettingType mp_setting_type = 5;
void OnlinePlayerInfo::clear_mp_setting_type() {
  mp_setting_type_ = 0;
}
::proto::MpSettingType OnlinePlayerInfo::mp_setting_type() const {
  // @@protoc_insertion_point(field_get:proto.OnlinePlayerInfo.mp_setting_type)
  return static_cast< ::proto::MpSettingType >(mp_setting_type_);
}
void OnlinePlayerInfo::set_mp_setting_type(::proto::MpSettingType value) {
  
  mp_setting_type_ = value;
  // @@protoc_insertion_point(field_set:proto.OnlinePlayerInfo.mp_setting_type)
}

// uint32 cur_player_num_in_world = 6;
void OnlinePlayerInfo::clear_cur_player_num_in_world() {
  cur_player_num_in_world_ = 0u;
}
::google::protobuf::uint32 OnlinePlayerInfo::cur_player_num_in_world() const {
  // @@protoc_insertion_point(field_get:proto.OnlinePlayerInfo.cur_player_num_in_world)
  return cur_player_num_in_world_;
}
void OnlinePlayerInfo::set_cur_player_num_in_world(::google::protobuf::uint32 value) {
  
  cur_player_num_in_world_ = value;
  // @@protoc_insertion_point(field_set:proto.OnlinePlayerInfo.cur_player_num_in_world)
}

// uint32 world_level = 7;
void OnlinePlayerInfo::clear_world_level() {
  world_level_ = 0u;
}
::google::protobuf::uint32 OnlinePlayerInfo::world_level() const {
  // @@protoc_insertion_point(field_get:proto.OnlinePlayerInfo.world_level)
  return world_level_;
}
void OnlinePlayerInfo::set_world_level(::google::protobuf::uint32 value) {
  
  world_level_ = value;
  // @@protoc_insertion_point(field_set:proto.OnlinePlayerInfo.world_level)
}

// string online_id = 8;
void OnlinePlayerInfo::clear_online_id() {
  online_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OnlinePlayerInfo::online_id() const {
  // @@protoc_insertion_point(field_get:proto.OnlinePlayerInfo.online_id)
  return online_id_.GetNoArena();
}
void OnlinePlayerInfo::set_online_id(const ::std::string& value) {
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.OnlinePlayerInfo.online_id)
}
#if LANG_CXX11
void OnlinePlayerInfo::set_online_id(::std::string&& value) {
  
  online_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.OnlinePlayerInfo.online_id)
}
#endif
void OnlinePlayerInfo::set_online_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.OnlinePlayerInfo.online_id)
}
void OnlinePlayerInfo::set_online_id(const char* value, size_t size) {
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.OnlinePlayerInfo.online_id)
}
::std::string* OnlinePlayerInfo::mutable_online_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.OnlinePlayerInfo.online_id)
  return online_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OnlinePlayerInfo::release_online_id() {
  // @@protoc_insertion_point(field_release:proto.OnlinePlayerInfo.online_id)
  
  return online_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OnlinePlayerInfo::set_allocated_online_id(::std::string* online_id) {
  if (online_id != NULL) {
    
  } else {
    
  }
  online_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), online_id);
  // @@protoc_insertion_point(field_set_allocated:proto.OnlinePlayerInfo.online_id)
}

// uint32 name_card_id = 9;
void OnlinePlayerInfo::clear_name_card_id() {
  name_card_id_ = 0u;
}
::google::protobuf::uint32 OnlinePlayerInfo::name_card_id() const {
  // @@protoc_insertion_point(field_get:proto.OnlinePlayerInfo.name_card_id)
  return name_card_id_;
}
void OnlinePlayerInfo::set_name_card_id(::google::protobuf::uint32 value) {
  
  name_card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.OnlinePlayerInfo.name_card_id)
}

// repeated uint32 blacklist_uid_list = 10;
int OnlinePlayerInfo::blacklist_uid_list_size() const {
  return blacklist_uid_list_.size();
}
void OnlinePlayerInfo::clear_blacklist_uid_list() {
  blacklist_uid_list_.Clear();
}
::google::protobuf::uint32 OnlinePlayerInfo::blacklist_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.OnlinePlayerInfo.blacklist_uid_list)
  return blacklist_uid_list_.Get(index);
}
void OnlinePlayerInfo::set_blacklist_uid_list(int index, ::google::protobuf::uint32 value) {
  blacklist_uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.OnlinePlayerInfo.blacklist_uid_list)
}
void OnlinePlayerInfo::add_blacklist_uid_list(::google::protobuf::uint32 value) {
  blacklist_uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.OnlinePlayerInfo.blacklist_uid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
OnlinePlayerInfo::blacklist_uid_list() const {
  // @@protoc_insertion_point(field_list:proto.OnlinePlayerInfo.blacklist_uid_list)
  return blacklist_uid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
OnlinePlayerInfo::mutable_blacklist_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.OnlinePlayerInfo.blacklist_uid_list)
  return &blacklist_uid_list_;
}

// string signature = 11;
void OnlinePlayerInfo::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OnlinePlayerInfo::signature() const {
  // @@protoc_insertion_point(field_get:proto.OnlinePlayerInfo.signature)
  return signature_.GetNoArena();
}
void OnlinePlayerInfo::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.OnlinePlayerInfo.signature)
}
#if LANG_CXX11
void OnlinePlayerInfo::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.OnlinePlayerInfo.signature)
}
#endif
void OnlinePlayerInfo::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.OnlinePlayerInfo.signature)
}
void OnlinePlayerInfo::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.OnlinePlayerInfo.signature)
}
::std::string* OnlinePlayerInfo::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:proto.OnlinePlayerInfo.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OnlinePlayerInfo::release_signature() {
  // @@protoc_insertion_point(field_release:proto.OnlinePlayerInfo.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OnlinePlayerInfo::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:proto.OnlinePlayerInfo.signature)
}

// .proto.ProfilePicture profile_picture = 12;
bool OnlinePlayerInfo::has_profile_picture() const {
  return this != internal_default_instance() && profile_picture_ != NULL;
}
void OnlinePlayerInfo::clear_profile_picture() {
  if (GetArenaNoVirtual() == NULL && profile_picture_ != NULL) delete profile_picture_;
  profile_picture_ = NULL;
}
const ::proto::ProfilePicture& OnlinePlayerInfo::profile_picture() const {
  const ::proto::ProfilePicture* p = profile_picture_;
  // @@protoc_insertion_point(field_get:proto.OnlinePlayerInfo.profile_picture)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ProfilePicture*>(
      &::proto::_ProfilePicture_default_instance_);
}
::proto::ProfilePicture* OnlinePlayerInfo::mutable_profile_picture() {
  
  if (profile_picture_ == NULL) {
    profile_picture_ = new ::proto::ProfilePicture;
  }
  // @@protoc_insertion_point(field_mutable:proto.OnlinePlayerInfo.profile_picture)
  return profile_picture_;
}
::proto::ProfilePicture* OnlinePlayerInfo::release_profile_picture() {
  // @@protoc_insertion_point(field_release:proto.OnlinePlayerInfo.profile_picture)
  
  ::proto::ProfilePicture* temp = profile_picture_;
  profile_picture_ = NULL;
  return temp;
}
void OnlinePlayerInfo::set_allocated_profile_picture(::proto::ProfilePicture* profile_picture) {
  delete profile_picture_;
  profile_picture_ = profile_picture;
  if (profile_picture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.OnlinePlayerInfo.profile_picture)
}

// string psn_id = 13;
void OnlinePlayerInfo::clear_psn_id() {
  psn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OnlinePlayerInfo::psn_id() const {
  // @@protoc_insertion_point(field_get:proto.OnlinePlayerInfo.psn_id)
  return psn_id_.GetNoArena();
}
void OnlinePlayerInfo::set_psn_id(const ::std::string& value) {
  
  psn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.OnlinePlayerInfo.psn_id)
}
#if LANG_CXX11
void OnlinePlayerInfo::set_psn_id(::std::string&& value) {
  
  psn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.OnlinePlayerInfo.psn_id)
}
#endif
void OnlinePlayerInfo::set_psn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  psn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.OnlinePlayerInfo.psn_id)
}
void OnlinePlayerInfo::set_psn_id(const char* value, size_t size) {
  
  psn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.OnlinePlayerInfo.psn_id)
}
::std::string* OnlinePlayerInfo::mutable_psn_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.OnlinePlayerInfo.psn_id)
  return psn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OnlinePlayerInfo::release_psn_id() {
  // @@protoc_insertion_point(field_release:proto.OnlinePlayerInfo.psn_id)
  
  return psn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OnlinePlayerInfo::set_allocated_psn_id(::std::string* psn_id) {
  if (psn_id != NULL) {
    
  } else {
    
  }
  psn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), psn_id);
  // @@protoc_insertion_point(field_set_allocated:proto.OnlinePlayerInfo.psn_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Birthday::kMonthFieldNumber;
const int Birthday::kDayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Birthday::Birthday()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Birthday)
}
Birthday::Birthday(const Birthday& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&month_, &from.month_,
    static_cast<size_t>(reinterpret_cast<char*>(&day_) -
    reinterpret_cast<char*>(&month_)) + sizeof(day_));
  // @@protoc_insertion_point(copy_constructor:proto.Birthday)
}

void Birthday::SharedCtor() {
  ::memset(&month_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&day_) -
      reinterpret_cast<char*>(&month_)) + sizeof(day_));
  _cached_size_ = 0;
}

Birthday::~Birthday() {
  // @@protoc_insertion_point(destructor:proto.Birthday)
  SharedDtor();
}

void Birthday::SharedDtor() {
}

void Birthday::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Birthday::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Birthday& Birthday::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

Birthday* Birthday::New(::google::protobuf::Arena* arena) const {
  Birthday* n = new Birthday;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Birthday::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Birthday)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&month_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&day_) -
      reinterpret_cast<char*>(&month_)) + sizeof(day_));
  _internal_metadata_.Clear();
}

bool Birthday::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Birthday)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 month = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Birthday)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Birthday)
  return false;
#undef DO_
}

void Birthday::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Birthday)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 month = 1;
  if (this->month() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->month(), output);
  }

  // uint32 day = 2;
  if (this->day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->day(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Birthday)
}

::google::protobuf::uint8* Birthday::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Birthday)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 month = 1;
  if (this->month() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->month(), target);
  }

  // uint32 day = 2;
  if (this->day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->day(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Birthday)
  return target;
}

size_t Birthday::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Birthday)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 month = 1;
  if (this->month() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->month());
  }

  // uint32 day = 2;
  if (this->day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->day());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Birthday::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Birthday)
  GOOGLE_DCHECK_NE(&from, this);
  const Birthday* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Birthday>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Birthday)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Birthday)
    MergeFrom(*source);
  }
}

void Birthday::MergeFrom(const Birthday& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Birthday)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.month() != 0) {
    set_month(from.month());
  }
  if (from.day() != 0) {
    set_day(from.day());
  }
}

void Birthday::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Birthday)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Birthday::CopyFrom(const Birthday& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Birthday)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Birthday::IsInitialized() const {
  return true;
}

void Birthday::Swap(Birthday* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Birthday::InternalSwap(Birthday* other) {
  using std::swap;
  swap(month_, other->month_);
  swap(day_, other->day_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Birthday::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Birthday

// uint32 month = 1;
void Birthday::clear_month() {
  month_ = 0u;
}
::google::protobuf::uint32 Birthday::month() const {
  // @@protoc_insertion_point(field_get:proto.Birthday.month)
  return month_;
}
void Birthday::set_month(::google::protobuf::uint32 value) {
  
  month_ = value;
  // @@protoc_insertion_point(field_set:proto.Birthday.month)
}

// uint32 day = 2;
void Birthday::clear_day() {
  day_ = 0u;
}
::google::protobuf::uint32 Birthday::day() const {
  // @@protoc_insertion_point(field_get:proto.Birthday.day)
  return day_;
}
void Birthday::set_day(::google::protobuf::uint32 value) {
  
  day_ = value;
  // @@protoc_insertion_point(field_set:proto.Birthday.day)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapMarkPoint::kSceneIdFieldNumber;
const int MapMarkPoint::kNameFieldNumber;
const int MapMarkPoint::kPosFieldNumber;
const int MapMarkPoint::kPointTypeFieldNumber;
const int MapMarkPoint::kMonsterIdFieldNumber;
const int MapMarkPoint::kFromTypeFieldNumber;
const int MapMarkPoint::kQuestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapMarkPoint::MapMarkPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MapMarkPoint)
}
MapMarkPoint::MapMarkPoint(const MapMarkPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_pos()) {
    pos_ = new ::proto::Vector(*from.pos_);
  } else {
    pos_ = NULL;
  }
  ::memcpy(&scene_id_, &from.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&quest_id_) -
    reinterpret_cast<char*>(&scene_id_)) + sizeof(quest_id_));
  // @@protoc_insertion_point(copy_constructor:proto.MapMarkPoint)
}

void MapMarkPoint::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quest_id_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(quest_id_));
  _cached_size_ = 0;
}

MapMarkPoint::~MapMarkPoint() {
  // @@protoc_insertion_point(destructor:proto.MapMarkPoint)
  SharedDtor();
}

void MapMarkPoint::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
}

void MapMarkPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapMarkPoint::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapMarkPoint& MapMarkPoint::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

MapMarkPoint* MapMarkPoint::New(::google::protobuf::Arena* arena) const {
  MapMarkPoint* n = new MapMarkPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapMarkPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MapMarkPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
  ::memset(&scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quest_id_) -
      reinterpret_cast<char*>(&scene_id_)) + sizeof(quest_id_));
  _internal_metadata_.Clear();
}

bool MapMarkPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MapMarkPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 scene_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.MapMarkPoint.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MapMarkPointType point_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_point_type(static_cast< ::proto::MapMarkPointType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 monster_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MapMarkFromType from_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_from_type(static_cast< ::proto::MapMarkFromType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 quest_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MapMarkPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MapMarkPoint)
  return false;
#undef DO_
}

void MapMarkPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MapMarkPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 scene_id = 1;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scene_id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.MapMarkPoint.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .proto.Vector pos = 3;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pos_, output);
  }

  // .proto.MapMarkPointType point_type = 4;
  if (this->point_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->point_type(), output);
  }

  // uint32 monster_id = 5;
  if (this->monster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->monster_id(), output);
  }

  // .proto.MapMarkFromType from_type = 6;
  if (this->from_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->from_type(), output);
  }

  // uint32 quest_id = 7;
  if (this->quest_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->quest_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MapMarkPoint)
}

::google::protobuf::uint8* MapMarkPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MapMarkPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 scene_id = 1;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scene_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.MapMarkPoint.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .proto.Vector pos = 3;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pos_, deterministic, target);
  }

  // .proto.MapMarkPointType point_type = 4;
  if (this->point_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->point_type(), target);
  }

  // uint32 monster_id = 5;
  if (this->monster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->monster_id(), target);
  }

  // .proto.MapMarkFromType from_type = 6;
  if (this->from_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->from_type(), target);
  }

  // uint32 quest_id = 7;
  if (this->quest_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->quest_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MapMarkPoint)
  return target;
}

size_t MapMarkPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MapMarkPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .proto.Vector pos = 3;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  // uint32 scene_id = 1;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  // .proto.MapMarkPointType point_type = 4;
  if (this->point_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->point_type());
  }

  // uint32 monster_id = 5;
  if (this->monster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->monster_id());
  }

  // .proto.MapMarkFromType from_type = 6;
  if (this->from_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->from_type());
  }

  // uint32 quest_id = 7;
  if (this->quest_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->quest_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapMarkPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MapMarkPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const MapMarkPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapMarkPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MapMarkPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MapMarkPoint)
    MergeFrom(*source);
  }
}

void MapMarkPoint::MergeFrom(const MapMarkPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MapMarkPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_pos()) {
    mutable_pos()->::proto::Vector::MergeFrom(from.pos());
  }
  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
  if (from.point_type() != 0) {
    set_point_type(from.point_type());
  }
  if (from.monster_id() != 0) {
    set_monster_id(from.monster_id());
  }
  if (from.from_type() != 0) {
    set_from_type(from.from_type());
  }
  if (from.quest_id() != 0) {
    set_quest_id(from.quest_id());
  }
}

void MapMarkPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MapMarkPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapMarkPoint::CopyFrom(const MapMarkPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MapMarkPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapMarkPoint::IsInitialized() const {
  return true;
}

void MapMarkPoint::Swap(MapMarkPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapMarkPoint::InternalSwap(MapMarkPoint* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(pos_, other->pos_);
  swap(scene_id_, other->scene_id_);
  swap(point_type_, other->point_type_);
  swap(monster_id_, other->monster_id_);
  swap(from_type_, other->from_type_);
  swap(quest_id_, other->quest_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapMarkPoint::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapMarkPoint

// uint32 scene_id = 1;
void MapMarkPoint::clear_scene_id() {
  scene_id_ = 0u;
}
::google::protobuf::uint32 MapMarkPoint::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.MapMarkPoint.scene_id)
  return scene_id_;
}
void MapMarkPoint::set_scene_id(::google::protobuf::uint32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MapMarkPoint.scene_id)
}

// string name = 2;
void MapMarkPoint::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MapMarkPoint::name() const {
  // @@protoc_insertion_point(field_get:proto.MapMarkPoint.name)
  return name_.GetNoArena();
}
void MapMarkPoint::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.MapMarkPoint.name)
}
#if LANG_CXX11
void MapMarkPoint::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.MapMarkPoint.name)
}
#endif
void MapMarkPoint::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.MapMarkPoint.name)
}
void MapMarkPoint::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.MapMarkPoint.name)
}
::std::string* MapMarkPoint::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.MapMarkPoint.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MapMarkPoint::release_name() {
  // @@protoc_insertion_point(field_release:proto.MapMarkPoint.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MapMarkPoint::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.MapMarkPoint.name)
}

// .proto.Vector pos = 3;
bool MapMarkPoint::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
void MapMarkPoint::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
const ::proto::Vector& MapMarkPoint::pos() const {
  const ::proto::Vector* p = pos_;
  // @@protoc_insertion_point(field_get:proto.MapMarkPoint.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* MapMarkPoint::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.MapMarkPoint.pos)
  return pos_;
}
::proto::Vector* MapMarkPoint::release_pos() {
  // @@protoc_insertion_point(field_release:proto.MapMarkPoint.pos)
  
  ::proto::Vector* temp = pos_;
  pos_ = NULL;
  return temp;
}
void MapMarkPoint::set_allocated_pos(::proto::Vector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MapMarkPoint.pos)
}

// .proto.MapMarkPointType point_type = 4;
void MapMarkPoint::clear_point_type() {
  point_type_ = 0;
}
::proto::MapMarkPointType MapMarkPoint::point_type() const {
  // @@protoc_insertion_point(field_get:proto.MapMarkPoint.point_type)
  return static_cast< ::proto::MapMarkPointType >(point_type_);
}
void MapMarkPoint::set_point_type(::proto::MapMarkPointType value) {
  
  point_type_ = value;
  // @@protoc_insertion_point(field_set:proto.MapMarkPoint.point_type)
}

// uint32 monster_id = 5;
void MapMarkPoint::clear_monster_id() {
  monster_id_ = 0u;
}
::google::protobuf::uint32 MapMarkPoint::monster_id() const {
  // @@protoc_insertion_point(field_get:proto.MapMarkPoint.monster_id)
  return monster_id_;
}
void MapMarkPoint::set_monster_id(::google::protobuf::uint32 value) {
  
  monster_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MapMarkPoint.monster_id)
}

// .proto.MapMarkFromType from_type = 6;
void MapMarkPoint::clear_from_type() {
  from_type_ = 0;
}
::proto::MapMarkFromType MapMarkPoint::from_type() const {
  // @@protoc_insertion_point(field_get:proto.MapMarkPoint.from_type)
  return static_cast< ::proto::MapMarkFromType >(from_type_);
}
void MapMarkPoint::set_from_type(::proto::MapMarkFromType value) {
  
  from_type_ = value;
  // @@protoc_insertion_point(field_set:proto.MapMarkPoint.from_type)
}

// uint32 quest_id = 7;
void MapMarkPoint::clear_quest_id() {
  quest_id_ = 0u;
}
::google::protobuf::uint32 MapMarkPoint::quest_id() const {
  // @@protoc_insertion_point(field_get:proto.MapMarkPoint.quest_id)
  return quest_id_;
}
void MapMarkPoint::set_quest_id(::google::protobuf::uint32 value) {
  
  quest_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MapMarkPoint.quest_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MassiveWaterInfo::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MassiveWaterInfo::MassiveWaterInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MassiveWaterInfo)
}
MassiveWaterInfo::MassiveWaterInfo(const MassiveWaterInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:proto.MassiveWaterInfo)
}

void MassiveWaterInfo::SharedCtor() {
  id_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

MassiveWaterInfo::~MassiveWaterInfo() {
  // @@protoc_insertion_point(destructor:proto.MassiveWaterInfo)
  SharedDtor();
}

void MassiveWaterInfo::SharedDtor() {
}

void MassiveWaterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MassiveWaterInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MassiveWaterInfo& MassiveWaterInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

MassiveWaterInfo* MassiveWaterInfo::New(::google::protobuf::Arena* arena) const {
  MassiveWaterInfo* n = new MassiveWaterInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MassiveWaterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MassiveWaterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool MassiveWaterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MassiveWaterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MassiveWaterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MassiveWaterInfo)
  return false;
#undef DO_
}

void MassiveWaterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MassiveWaterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MassiveWaterInfo)
}

::google::protobuf::uint8* MassiveWaterInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MassiveWaterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MassiveWaterInfo)
  return target;
}

size_t MassiveWaterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MassiveWaterInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MassiveWaterInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MassiveWaterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MassiveWaterInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MassiveWaterInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MassiveWaterInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MassiveWaterInfo)
    MergeFrom(*source);
  }
}

void MassiveWaterInfo::MergeFrom(const MassiveWaterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MassiveWaterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void MassiveWaterInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MassiveWaterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MassiveWaterInfo::CopyFrom(const MassiveWaterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MassiveWaterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MassiveWaterInfo::IsInitialized() const {
  return true;
}

void MassiveWaterInfo::Swap(MassiveWaterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MassiveWaterInfo::InternalSwap(MassiveWaterInfo* other) {
  using std::swap;
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MassiveWaterInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MassiveWaterInfo

// int64 id = 1;
void MassiveWaterInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MassiveWaterInfo::id() const {
  // @@protoc_insertion_point(field_get:proto.MassiveWaterInfo.id)
  return id_;
}
void MassiveWaterInfo::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.MassiveWaterInfo.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MassiveGrassInfo::kIdFieldNumber;
const int MassiveGrassInfo::kCenterFieldNumber;
const int MassiveGrassInfo::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MassiveGrassInfo::MassiveGrassInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MassiveGrassInfo)
}
MassiveGrassInfo::MassiveGrassInfo(const MassiveGrassInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_center()) {
    center_ = new ::proto::Vector(*from.center_);
  } else {
    center_ = NULL;
  }
  if (from.has_size()) {
    size_ = new ::proto::Vector(*from.size_);
  } else {
    size_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:proto.MassiveGrassInfo)
}

void MassiveGrassInfo::SharedCtor() {
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&center_)) + sizeof(id_));
  _cached_size_ = 0;
}

MassiveGrassInfo::~MassiveGrassInfo() {
  // @@protoc_insertion_point(destructor:proto.MassiveGrassInfo)
  SharedDtor();
}

void MassiveGrassInfo::SharedDtor() {
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete size_;
}

void MassiveGrassInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MassiveGrassInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MassiveGrassInfo& MassiveGrassInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

MassiveGrassInfo* MassiveGrassInfo::New(::google::protobuf::Arena* arena) const {
  MassiveGrassInfo* n = new MassiveGrassInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MassiveGrassInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MassiveGrassInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && center_ != NULL) {
    delete center_;
  }
  center_ = NULL;
  if (GetArenaNoVirtual() == NULL && size_ != NULL) {
    delete size_;
  }
  size_ = NULL;
  id_ = 0u;
  _internal_metadata_.Clear();
}

bool MassiveGrassInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MassiveGrassInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector center = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MassiveGrassInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MassiveGrassInfo)
  return false;
#undef DO_
}

void MassiveGrassInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MassiveGrassInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // .proto.Vector center = 2;
  if (this->has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->center_, output);
  }

  // .proto.Vector size = 3;
  if (this->has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->size_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MassiveGrassInfo)
}

::google::protobuf::uint8* MassiveGrassInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MassiveGrassInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // .proto.Vector center = 2;
  if (this->has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->center_, deterministic, target);
  }

  // .proto.Vector size = 3;
  if (this->has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->size_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MassiveGrassInfo)
  return target;
}

size_t MassiveGrassInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MassiveGrassInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.Vector center = 2;
  if (this->has_center()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->center_);
  }

  // .proto.Vector size = 3;
  if (this->has_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->size_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MassiveGrassInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MassiveGrassInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MassiveGrassInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MassiveGrassInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MassiveGrassInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MassiveGrassInfo)
    MergeFrom(*source);
  }
}

void MassiveGrassInfo::MergeFrom(const MassiveGrassInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MassiveGrassInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center()) {
    mutable_center()->::proto::Vector::MergeFrom(from.center());
  }
  if (from.has_size()) {
    mutable_size()->::proto::Vector::MergeFrom(from.size());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void MassiveGrassInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MassiveGrassInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MassiveGrassInfo::CopyFrom(const MassiveGrassInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MassiveGrassInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MassiveGrassInfo::IsInitialized() const {
  return true;
}

void MassiveGrassInfo::Swap(MassiveGrassInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MassiveGrassInfo::InternalSwap(MassiveGrassInfo* other) {
  using std::swap;
  swap(center_, other->center_);
  swap(size_, other->size_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MassiveGrassInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MassiveGrassInfo

// uint32 id = 1;
void MassiveGrassInfo::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 MassiveGrassInfo::id() const {
  // @@protoc_insertion_point(field_get:proto.MassiveGrassInfo.id)
  return id_;
}
void MassiveGrassInfo::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.MassiveGrassInfo.id)
}

// .proto.Vector center = 2;
bool MassiveGrassInfo::has_center() const {
  return this != internal_default_instance() && center_ != NULL;
}
void MassiveGrassInfo::clear_center() {
  if (GetArenaNoVirtual() == NULL && center_ != NULL) delete center_;
  center_ = NULL;
}
const ::proto::Vector& MassiveGrassInfo::center() const {
  const ::proto::Vector* p = center_;
  // @@protoc_insertion_point(field_get:proto.MassiveGrassInfo.center)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* MassiveGrassInfo::mutable_center() {
  
  if (center_ == NULL) {
    center_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.MassiveGrassInfo.center)
  return center_;
}
::proto::Vector* MassiveGrassInfo::release_center() {
  // @@protoc_insertion_point(field_release:proto.MassiveGrassInfo.center)
  
  ::proto::Vector* temp = center_;
  center_ = NULL;
  return temp;
}
void MassiveGrassInfo::set_allocated_center(::proto::Vector* center) {
  delete center_;
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MassiveGrassInfo.center)
}

// .proto.Vector size = 3;
bool MassiveGrassInfo::has_size() const {
  return this != internal_default_instance() && size_ != NULL;
}
void MassiveGrassInfo::clear_size() {
  if (GetArenaNoVirtual() == NULL && size_ != NULL) delete size_;
  size_ = NULL;
}
const ::proto::Vector& MassiveGrassInfo::size() const {
  const ::proto::Vector* p = size_;
  // @@protoc_insertion_point(field_get:proto.MassiveGrassInfo.size)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* MassiveGrassInfo::mutable_size() {
  
  if (size_ == NULL) {
    size_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.MassiveGrassInfo.size)
  return size_;
}
::proto::Vector* MassiveGrassInfo::release_size() {
  // @@protoc_insertion_point(field_release:proto.MassiveGrassInfo.size)
  
  ::proto::Vector* temp = size_;
  size_ = NULL;
  return temp;
}
void MassiveGrassInfo::set_allocated_size(::proto::Vector* size) {
  delete size_;
  size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MassiveGrassInfo.size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MassiveBoxInfo::kIdFieldNumber;
const int MassiveBoxInfo::kConfigIdFieldNumber;
const int MassiveBoxInfo::kCenterFieldNumber;
const int MassiveBoxInfo::kExtentsFieldNumber;
const int MassiveBoxInfo::kUpFieldNumber;
const int MassiveBoxInfo::kForwardFieldNumber;
const int MassiveBoxInfo::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MassiveBoxInfo::MassiveBoxInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MassiveBoxInfo)
}
MassiveBoxInfo::MassiveBoxInfo(const MassiveBoxInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_center()) {
    center_ = new ::proto::Vector(*from.center_);
  } else {
    center_ = NULL;
  }
  if (from.has_extents()) {
    extents_ = new ::proto::Vector(*from.extents_);
  } else {
    extents_ = NULL;
  }
  if (from.has_up()) {
    up_ = new ::proto::Vector(*from.up_);
  } else {
    up_ = NULL;
  }
  if (from.has_forward()) {
    forward_ = new ::proto::Vector(*from.forward_);
  } else {
    forward_ = NULL;
  }
  if (from.has_right()) {
    right_ = new ::proto::Vector(*from.right_);
  } else {
    right_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&configid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(configid_));
  // @@protoc_insertion_point(copy_constructor:proto.MassiveBoxInfo)
}

void MassiveBoxInfo::SharedCtor() {
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&configid_) -
      reinterpret_cast<char*>(&center_)) + sizeof(configid_));
  _cached_size_ = 0;
}

MassiveBoxInfo::~MassiveBoxInfo() {
  // @@protoc_insertion_point(destructor:proto.MassiveBoxInfo)
  SharedDtor();
}

void MassiveBoxInfo::SharedDtor() {
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete extents_;
  if (this != internal_default_instance()) delete up_;
  if (this != internal_default_instance()) delete forward_;
  if (this != internal_default_instance()) delete right_;
}

void MassiveBoxInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MassiveBoxInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MassiveBoxInfo& MassiveBoxInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

MassiveBoxInfo* MassiveBoxInfo::New(::google::protobuf::Arena* arena) const {
  MassiveBoxInfo* n = new MassiveBoxInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MassiveBoxInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MassiveBoxInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && center_ != NULL) {
    delete center_;
  }
  center_ = NULL;
  if (GetArenaNoVirtual() == NULL && extents_ != NULL) {
    delete extents_;
  }
  extents_ = NULL;
  if (GetArenaNoVirtual() == NULL && up_ != NULL) {
    delete up_;
  }
  up_ = NULL;
  if (GetArenaNoVirtual() == NULL && forward_ != NULL) {
    delete forward_;
  }
  forward_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_ != NULL) {
    delete right_;
  }
  right_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&configid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(configid_));
  _internal_metadata_.Clear();
}

bool MassiveBoxInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MassiveBoxInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 configId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &configid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector center = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector extents = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector up = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_up()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector forward = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector right = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MassiveBoxInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MassiveBoxInfo)
  return false;
#undef DO_
}

void MassiveBoxInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MassiveBoxInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // uint32 configId = 2;
  if (this->configid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->configid(), output);
  }

  // .proto.Vector center = 3;
  if (this->has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->center_, output);
  }

  // .proto.Vector extents = 4;
  if (this->has_extents()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->extents_, output);
  }

  // .proto.Vector up = 5;
  if (this->has_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->up_, output);
  }

  // .proto.Vector forward = 6;
  if (this->has_forward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->forward_, output);
  }

  // .proto.Vector right = 7;
  if (this->has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->right_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MassiveBoxInfo)
}

::google::protobuf::uint8* MassiveBoxInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MassiveBoxInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // uint32 configId = 2;
  if (this->configid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->configid(), target);
  }

  // .proto.Vector center = 3;
  if (this->has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->center_, deterministic, target);
  }

  // .proto.Vector extents = 4;
  if (this->has_extents()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->extents_, deterministic, target);
  }

  // .proto.Vector up = 5;
  if (this->has_up()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->up_, deterministic, target);
  }

  // .proto.Vector forward = 6;
  if (this->has_forward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->forward_, deterministic, target);
  }

  // .proto.Vector right = 7;
  if (this->has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->right_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MassiveBoxInfo)
  return target;
}

size_t MassiveBoxInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MassiveBoxInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.Vector center = 3;
  if (this->has_center()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->center_);
  }

  // .proto.Vector extents = 4;
  if (this->has_extents()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extents_);
  }

  // .proto.Vector up = 5;
  if (this->has_up()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->up_);
  }

  // .proto.Vector forward = 6;
  if (this->has_forward()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->forward_);
  }

  // .proto.Vector right = 7;
  if (this->has_right()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->right_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // uint32 configId = 2;
  if (this->configid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->configid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MassiveBoxInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MassiveBoxInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MassiveBoxInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MassiveBoxInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MassiveBoxInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MassiveBoxInfo)
    MergeFrom(*source);
  }
}

void MassiveBoxInfo::MergeFrom(const MassiveBoxInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MassiveBoxInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center()) {
    mutable_center()->::proto::Vector::MergeFrom(from.center());
  }
  if (from.has_extents()) {
    mutable_extents()->::proto::Vector::MergeFrom(from.extents());
  }
  if (from.has_up()) {
    mutable_up()->::proto::Vector::MergeFrom(from.up());
  }
  if (from.has_forward()) {
    mutable_forward()->::proto::Vector::MergeFrom(from.forward());
  }
  if (from.has_right()) {
    mutable_right()->::proto::Vector::MergeFrom(from.right());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.configid() != 0) {
    set_configid(from.configid());
  }
}

void MassiveBoxInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MassiveBoxInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MassiveBoxInfo::CopyFrom(const MassiveBoxInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MassiveBoxInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MassiveBoxInfo::IsInitialized() const {
  return true;
}

void MassiveBoxInfo::Swap(MassiveBoxInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MassiveBoxInfo::InternalSwap(MassiveBoxInfo* other) {
  using std::swap;
  swap(center_, other->center_);
  swap(extents_, other->extents_);
  swap(up_, other->up_);
  swap(forward_, other->forward_);
  swap(right_, other->right_);
  swap(id_, other->id_);
  swap(configid_, other->configid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MassiveBoxInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MassiveBoxInfo

// int32 id = 1;
void MassiveBoxInfo::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 MassiveBoxInfo::id() const {
  // @@protoc_insertion_point(field_get:proto.MassiveBoxInfo.id)
  return id_;
}
void MassiveBoxInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.MassiveBoxInfo.id)
}

// uint32 configId = 2;
void MassiveBoxInfo::clear_configid() {
  configid_ = 0u;
}
::google::protobuf::uint32 MassiveBoxInfo::configid() const {
  // @@protoc_insertion_point(field_get:proto.MassiveBoxInfo.configId)
  return configid_;
}
void MassiveBoxInfo::set_configid(::google::protobuf::uint32 value) {
  
  configid_ = value;
  // @@protoc_insertion_point(field_set:proto.MassiveBoxInfo.configId)
}

// .proto.Vector center = 3;
bool MassiveBoxInfo::has_center() const {
  return this != internal_default_instance() && center_ != NULL;
}
void MassiveBoxInfo::clear_center() {
  if (GetArenaNoVirtual() == NULL && center_ != NULL) delete center_;
  center_ = NULL;
}
const ::proto::Vector& MassiveBoxInfo::center() const {
  const ::proto::Vector* p = center_;
  // @@protoc_insertion_point(field_get:proto.MassiveBoxInfo.center)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* MassiveBoxInfo::mutable_center() {
  
  if (center_ == NULL) {
    center_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.MassiveBoxInfo.center)
  return center_;
}
::proto::Vector* MassiveBoxInfo::release_center() {
  // @@protoc_insertion_point(field_release:proto.MassiveBoxInfo.center)
  
  ::proto::Vector* temp = center_;
  center_ = NULL;
  return temp;
}
void MassiveBoxInfo::set_allocated_center(::proto::Vector* center) {
  delete center_;
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MassiveBoxInfo.center)
}

// .proto.Vector extents = 4;
bool MassiveBoxInfo::has_extents() const {
  return this != internal_default_instance() && extents_ != NULL;
}
void MassiveBoxInfo::clear_extents() {
  if (GetArenaNoVirtual() == NULL && extents_ != NULL) delete extents_;
  extents_ = NULL;
}
const ::proto::Vector& MassiveBoxInfo::extents() const {
  const ::proto::Vector* p = extents_;
  // @@protoc_insertion_point(field_get:proto.MassiveBoxInfo.extents)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* MassiveBoxInfo::mutable_extents() {
  
  if (extents_ == NULL) {
    extents_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.MassiveBoxInfo.extents)
  return extents_;
}
::proto::Vector* MassiveBoxInfo::release_extents() {
  // @@protoc_insertion_point(field_release:proto.MassiveBoxInfo.extents)
  
  ::proto::Vector* temp = extents_;
  extents_ = NULL;
  return temp;
}
void MassiveBoxInfo::set_allocated_extents(::proto::Vector* extents) {
  delete extents_;
  extents_ = extents;
  if (extents) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MassiveBoxInfo.extents)
}

// .proto.Vector up = 5;
bool MassiveBoxInfo::has_up() const {
  return this != internal_default_instance() && up_ != NULL;
}
void MassiveBoxInfo::clear_up() {
  if (GetArenaNoVirtual() == NULL && up_ != NULL) delete up_;
  up_ = NULL;
}
const ::proto::Vector& MassiveBoxInfo::up() const {
  const ::proto::Vector* p = up_;
  // @@protoc_insertion_point(field_get:proto.MassiveBoxInfo.up)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* MassiveBoxInfo::mutable_up() {
  
  if (up_ == NULL) {
    up_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.MassiveBoxInfo.up)
  return up_;
}
::proto::Vector* MassiveBoxInfo::release_up() {
  // @@protoc_insertion_point(field_release:proto.MassiveBoxInfo.up)
  
  ::proto::Vector* temp = up_;
  up_ = NULL;
  return temp;
}
void MassiveBoxInfo::set_allocated_up(::proto::Vector* up) {
  delete up_;
  up_ = up;
  if (up) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MassiveBoxInfo.up)
}

// .proto.Vector forward = 6;
bool MassiveBoxInfo::has_forward() const {
  return this != internal_default_instance() && forward_ != NULL;
}
void MassiveBoxInfo::clear_forward() {
  if (GetArenaNoVirtual() == NULL && forward_ != NULL) delete forward_;
  forward_ = NULL;
}
const ::proto::Vector& MassiveBoxInfo::forward() const {
  const ::proto::Vector* p = forward_;
  // @@protoc_insertion_point(field_get:proto.MassiveBoxInfo.forward)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* MassiveBoxInfo::mutable_forward() {
  
  if (forward_ == NULL) {
    forward_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.MassiveBoxInfo.forward)
  return forward_;
}
::proto::Vector* MassiveBoxInfo::release_forward() {
  // @@protoc_insertion_point(field_release:proto.MassiveBoxInfo.forward)
  
  ::proto::Vector* temp = forward_;
  forward_ = NULL;
  return temp;
}
void MassiveBoxInfo::set_allocated_forward(::proto::Vector* forward) {
  delete forward_;
  forward_ = forward;
  if (forward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MassiveBoxInfo.forward)
}

// .proto.Vector right = 7;
bool MassiveBoxInfo::has_right() const {
  return this != internal_default_instance() && right_ != NULL;
}
void MassiveBoxInfo::clear_right() {
  if (GetArenaNoVirtual() == NULL && right_ != NULL) delete right_;
  right_ = NULL;
}
const ::proto::Vector& MassiveBoxInfo::right() const {
  const ::proto::Vector* p = right_;
  // @@protoc_insertion_point(field_get:proto.MassiveBoxInfo.right)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* MassiveBoxInfo::mutable_right() {
  
  if (right_ == NULL) {
    right_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.MassiveBoxInfo.right)
  return right_;
}
::proto::Vector* MassiveBoxInfo::release_right() {
  // @@protoc_insertion_point(field_release:proto.MassiveBoxInfo.right)
  
  ::proto::Vector* temp = right_;
  right_ = NULL;
  return temp;
}
void MassiveBoxInfo::set_allocated_right(::proto::Vector* right) {
  delete right_;
  right_ = right;
  if (right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MassiveBoxInfo.right)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientMassiveEntity::kEntityTypeFieldNumber;
const int ClientMassiveEntity::kConfigIdFieldNumber;
const int ClientMassiveEntity::kObjIdFieldNumber;
const int ClientMassiveEntity::kWaterInfoFieldNumber;
const int ClientMassiveEntity::kGrassInfoFieldNumber;
const int ClientMassiveEntity::kBoxInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientMassiveEntity::ClientMassiveEntity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ClientMassiveEntity)
}
ClientMassiveEntity::ClientMassiveEntity(const ClientMassiveEntity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&entity_type_, &from.entity_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&obj_id_) -
    reinterpret_cast<char*>(&entity_type_)) + sizeof(obj_id_));
  clear_has_entity_info();
  switch (from.entity_info_case()) {
    case kWaterInfo: {
      mutable_water_info()->::proto::MassiveWaterInfo::MergeFrom(from.water_info());
      break;
    }
    case kGrassInfo: {
      mutable_grass_info()->::proto::MassiveGrassInfo::MergeFrom(from.grass_info());
      break;
    }
    case kBoxInfo: {
      mutable_box_info()->::proto::MassiveBoxInfo::MergeFrom(from.box_info());
      break;
    }
    case ENTITY_INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.ClientMassiveEntity)
}

void ClientMassiveEntity::SharedCtor() {
  ::memset(&entity_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obj_id_) -
      reinterpret_cast<char*>(&entity_type_)) + sizeof(obj_id_));
  clear_has_entity_info();
  _cached_size_ = 0;
}

ClientMassiveEntity::~ClientMassiveEntity() {
  // @@protoc_insertion_point(destructor:proto.ClientMassiveEntity)
  SharedDtor();
}

void ClientMassiveEntity::SharedDtor() {
  if (has_entity_info()) {
    clear_entity_info();
  }
}

void ClientMassiveEntity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMassiveEntity::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientMassiveEntity& ClientMassiveEntity::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientMassiveEntity* ClientMassiveEntity::New(::google::protobuf::Arena* arena) const {
  ClientMassiveEntity* n = new ClientMassiveEntity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientMassiveEntity::clear_entity_info() {
// @@protoc_insertion_point(one_of_clear_start:proto.ClientMassiveEntity)
  switch (entity_info_case()) {
    case kWaterInfo: {
      delete entity_info_.water_info_;
      break;
    }
    case kGrassInfo: {
      delete entity_info_.grass_info_;
      break;
    }
    case kBoxInfo: {
      delete entity_info_.box_info_;
      break;
    }
    case ENTITY_INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTITY_INFO_NOT_SET;
}


void ClientMassiveEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ClientMassiveEntity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&entity_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obj_id_) -
      reinterpret_cast<char*>(&entity_type_)) + sizeof(obj_id_));
  clear_entity_info();
  _internal_metadata_.Clear();
}

bool ClientMassiveEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ClientMassiveEntity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 entity_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 config_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 obj_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &obj_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MassiveWaterInfo water_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_water_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MassiveGrassInfo grass_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grass_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MassiveBoxInfo box_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ClientMassiveEntity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ClientMassiveEntity)
  return false;
#undef DO_
}

void ClientMassiveEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ClientMassiveEntity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entity_type = 1;
  if (this->entity_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->entity_type(), output);
  }

  // uint32 config_id = 2;
  if (this->config_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->config_id(), output);
  }

  // int64 obj_id = 3;
  if (this->obj_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->obj_id(), output);
  }

  // .proto.MassiveWaterInfo water_info = 4;
  if (has_water_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *entity_info_.water_info_, output);
  }

  // .proto.MassiveGrassInfo grass_info = 5;
  if (has_grass_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *entity_info_.grass_info_, output);
  }

  // .proto.MassiveBoxInfo box_info = 6;
  if (has_box_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *entity_info_.box_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ClientMassiveEntity)
}

::google::protobuf::uint8* ClientMassiveEntity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ClientMassiveEntity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entity_type = 1;
  if (this->entity_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->entity_type(), target);
  }

  // uint32 config_id = 2;
  if (this->config_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->config_id(), target);
  }

  // int64 obj_id = 3;
  if (this->obj_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->obj_id(), target);
  }

  // .proto.MassiveWaterInfo water_info = 4;
  if (has_water_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *entity_info_.water_info_, deterministic, target);
  }

  // .proto.MassiveGrassInfo grass_info = 5;
  if (has_grass_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *entity_info_.grass_info_, deterministic, target);
  }

  // .proto.MassiveBoxInfo box_info = 6;
  if (has_box_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *entity_info_.box_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ClientMassiveEntity)
  return target;
}

size_t ClientMassiveEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ClientMassiveEntity)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 entity_type = 1;
  if (this->entity_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->entity_type());
  }

  // uint32 config_id = 2;
  if (this->config_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->config_id());
  }

  // int64 obj_id = 3;
  if (this->obj_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->obj_id());
  }

  switch (entity_info_case()) {
    // .proto.MassiveWaterInfo water_info = 4;
    case kWaterInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *entity_info_.water_info_);
      break;
    }
    // .proto.MassiveGrassInfo grass_info = 5;
    case kGrassInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *entity_info_.grass_info_);
      break;
    }
    // .proto.MassiveBoxInfo box_info = 6;
    case kBoxInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *entity_info_.box_info_);
      break;
    }
    case ENTITY_INFO_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMassiveEntity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ClientMassiveEntity)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientMassiveEntity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientMassiveEntity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ClientMassiveEntity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ClientMassiveEntity)
    MergeFrom(*source);
  }
}

void ClientMassiveEntity::MergeFrom(const ClientMassiveEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ClientMassiveEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity_type() != 0) {
    set_entity_type(from.entity_type());
  }
  if (from.config_id() != 0) {
    set_config_id(from.config_id());
  }
  if (from.obj_id() != 0) {
    set_obj_id(from.obj_id());
  }
  switch (from.entity_info_case()) {
    case kWaterInfo: {
      mutable_water_info()->::proto::MassiveWaterInfo::MergeFrom(from.water_info());
      break;
    }
    case kGrassInfo: {
      mutable_grass_info()->::proto::MassiveGrassInfo::MergeFrom(from.grass_info());
      break;
    }
    case kBoxInfo: {
      mutable_box_info()->::proto::MassiveBoxInfo::MergeFrom(from.box_info());
      break;
    }
    case ENTITY_INFO_NOT_SET: {
      break;
    }
  }
}

void ClientMassiveEntity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ClientMassiveEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMassiveEntity::CopyFrom(const ClientMassiveEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ClientMassiveEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMassiveEntity::IsInitialized() const {
  return true;
}

void ClientMassiveEntity::Swap(ClientMassiveEntity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientMassiveEntity::InternalSwap(ClientMassiveEntity* other) {
  using std::swap;
  swap(entity_type_, other->entity_type_);
  swap(config_id_, other->config_id_);
  swap(obj_id_, other->obj_id_);
  swap(entity_info_, other->entity_info_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientMassiveEntity::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientMassiveEntity

// uint32 entity_type = 1;
void ClientMassiveEntity::clear_entity_type() {
  entity_type_ = 0u;
}
::google::protobuf::uint32 ClientMassiveEntity::entity_type() const {
  // @@protoc_insertion_point(field_get:proto.ClientMassiveEntity.entity_type)
  return entity_type_;
}
void ClientMassiveEntity::set_entity_type(::google::protobuf::uint32 value) {
  
  entity_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ClientMassiveEntity.entity_type)
}

// uint32 config_id = 2;
void ClientMassiveEntity::clear_config_id() {
  config_id_ = 0u;
}
::google::protobuf::uint32 ClientMassiveEntity::config_id() const {
  // @@protoc_insertion_point(field_get:proto.ClientMassiveEntity.config_id)
  return config_id_;
}
void ClientMassiveEntity::set_config_id(::google::protobuf::uint32 value) {
  
  config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ClientMassiveEntity.config_id)
}

// int64 obj_id = 3;
void ClientMassiveEntity::clear_obj_id() {
  obj_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ClientMassiveEntity::obj_id() const {
  // @@protoc_insertion_point(field_get:proto.ClientMassiveEntity.obj_id)
  return obj_id_;
}
void ClientMassiveEntity::set_obj_id(::google::protobuf::int64 value) {
  
  obj_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ClientMassiveEntity.obj_id)
}

// .proto.MassiveWaterInfo water_info = 4;
bool ClientMassiveEntity::has_water_info() const {
  return entity_info_case() == kWaterInfo;
}
void ClientMassiveEntity::set_has_water_info() {
  _oneof_case_[0] = kWaterInfo;
}
void ClientMassiveEntity::clear_water_info() {
  if (has_water_info()) {
    delete entity_info_.water_info_;
    clear_has_entity_info();
  }
}
 const ::proto::MassiveWaterInfo& ClientMassiveEntity::water_info() const {
  // @@protoc_insertion_point(field_get:proto.ClientMassiveEntity.water_info)
  return has_water_info()
      ? *entity_info_.water_info_
      : ::proto::MassiveWaterInfo::default_instance();
}
::proto::MassiveWaterInfo* ClientMassiveEntity::mutable_water_info() {
  if (!has_water_info()) {
    clear_entity_info();
    set_has_water_info();
    entity_info_.water_info_ = new ::proto::MassiveWaterInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientMassiveEntity.water_info)
  return entity_info_.water_info_;
}
::proto::MassiveWaterInfo* ClientMassiveEntity::release_water_info() {
  // @@protoc_insertion_point(field_release:proto.ClientMassiveEntity.water_info)
  if (has_water_info()) {
    clear_has_entity_info();
    ::proto::MassiveWaterInfo* temp = entity_info_.water_info_;
    entity_info_.water_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClientMassiveEntity::set_allocated_water_info(::proto::MassiveWaterInfo* water_info) {
  clear_entity_info();
  if (water_info) {
    set_has_water_info();
    entity_info_.water_info_ = water_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientMassiveEntity.water_info)
}

// .proto.MassiveGrassInfo grass_info = 5;
bool ClientMassiveEntity::has_grass_info() const {
  return entity_info_case() == kGrassInfo;
}
void ClientMassiveEntity::set_has_grass_info() {
  _oneof_case_[0] = kGrassInfo;
}
void ClientMassiveEntity::clear_grass_info() {
  if (has_grass_info()) {
    delete entity_info_.grass_info_;
    clear_has_entity_info();
  }
}
 const ::proto::MassiveGrassInfo& ClientMassiveEntity::grass_info() const {
  // @@protoc_insertion_point(field_get:proto.ClientMassiveEntity.grass_info)
  return has_grass_info()
      ? *entity_info_.grass_info_
      : ::proto::MassiveGrassInfo::default_instance();
}
::proto::MassiveGrassInfo* ClientMassiveEntity::mutable_grass_info() {
  if (!has_grass_info()) {
    clear_entity_info();
    set_has_grass_info();
    entity_info_.grass_info_ = new ::proto::MassiveGrassInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientMassiveEntity.grass_info)
  return entity_info_.grass_info_;
}
::proto::MassiveGrassInfo* ClientMassiveEntity::release_grass_info() {
  // @@protoc_insertion_point(field_release:proto.ClientMassiveEntity.grass_info)
  if (has_grass_info()) {
    clear_has_entity_info();
    ::proto::MassiveGrassInfo* temp = entity_info_.grass_info_;
    entity_info_.grass_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClientMassiveEntity::set_allocated_grass_info(::proto::MassiveGrassInfo* grass_info) {
  clear_entity_info();
  if (grass_info) {
    set_has_grass_info();
    entity_info_.grass_info_ = grass_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientMassiveEntity.grass_info)
}

// .proto.MassiveBoxInfo box_info = 6;
bool ClientMassiveEntity::has_box_info() const {
  return entity_info_case() == kBoxInfo;
}
void ClientMassiveEntity::set_has_box_info() {
  _oneof_case_[0] = kBoxInfo;
}
void ClientMassiveEntity::clear_box_info() {
  if (has_box_info()) {
    delete entity_info_.box_info_;
    clear_has_entity_info();
  }
}
 const ::proto::MassiveBoxInfo& ClientMassiveEntity::box_info() const {
  // @@protoc_insertion_point(field_get:proto.ClientMassiveEntity.box_info)
  return has_box_info()
      ? *entity_info_.box_info_
      : ::proto::MassiveBoxInfo::default_instance();
}
::proto::MassiveBoxInfo* ClientMassiveEntity::mutable_box_info() {
  if (!has_box_info()) {
    clear_entity_info();
    set_has_box_info();
    entity_info_.box_info_ = new ::proto::MassiveBoxInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientMassiveEntity.box_info)
  return entity_info_.box_info_;
}
::proto::MassiveBoxInfo* ClientMassiveEntity::release_box_info() {
  // @@protoc_insertion_point(field_release:proto.ClientMassiveEntity.box_info)
  if (has_box_info()) {
    clear_has_entity_info();
    ::proto::MassiveBoxInfo* temp = entity_info_.box_info_;
    entity_info_.box_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClientMassiveEntity::set_allocated_box_info(::proto::MassiveBoxInfo* box_info) {
  clear_entity_info();
  if (box_info) {
    set_has_box_info();
    entity_info_.box_info_ = box_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientMassiveEntity.box_info)
}

bool ClientMassiveEntity::has_entity_info() const {
  return entity_info_case() != ENTITY_INFO_NOT_SET;
}
void ClientMassiveEntity::clear_has_entity_info() {
  _oneof_case_[0] = ENTITY_INFO_NOT_SET;
}
ClientMassiveEntity::EntityInfoCase ClientMassiveEntity::entity_info_case() const {
  return ClientMassiveEntity::EntityInfoCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShapeSphere::kCenterFieldNumber;
const int ShapeSphere::kRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShapeSphere::ShapeSphere()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ShapeSphere)
}
ShapeSphere::ShapeSphere(const ShapeSphere& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_center()) {
    center_ = new ::proto::Vector(*from.center_);
  } else {
    center_ = NULL;
  }
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:proto.ShapeSphere)
}

void ShapeSphere::SharedCtor() {
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&center_)) + sizeof(radius_));
  _cached_size_ = 0;
}

ShapeSphere::~ShapeSphere() {
  // @@protoc_insertion_point(destructor:proto.ShapeSphere)
  SharedDtor();
}

void ShapeSphere::SharedDtor() {
  if (this != internal_default_instance()) delete center_;
}

void ShapeSphere::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShapeSphere::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShapeSphere& ShapeSphere::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShapeSphere* ShapeSphere::New(::google::protobuf::Arena* arena) const {
  ShapeSphere* n = new ShapeSphere;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShapeSphere::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ShapeSphere)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && center_ != NULL) {
    delete center_;
  }
  center_ = NULL;
  radius_ = 0;
  _internal_metadata_.Clear();
}

bool ShapeSphere::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ShapeSphere)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.Vector center = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float radius = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ShapeSphere)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ShapeSphere)
  return false;
#undef DO_
}

void ShapeSphere::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ShapeSphere)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Vector center = 1;
  if (this->has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->center_, output);
  }

  // float radius = 2;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->radius(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ShapeSphere)
}

::google::protobuf::uint8* ShapeSphere::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ShapeSphere)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Vector center = 1;
  if (this->has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->center_, deterministic, target);
  }

  // float radius = 2;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->radius(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ShapeSphere)
  return target;
}

size_t ShapeSphere::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ShapeSphere)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.Vector center = 1;
  if (this->has_center()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->center_);
  }

  // float radius = 2;
  if (this->radius() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShapeSphere::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ShapeSphere)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeSphere* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShapeSphere>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ShapeSphere)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ShapeSphere)
    MergeFrom(*source);
  }
}

void ShapeSphere::MergeFrom(const ShapeSphere& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ShapeSphere)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center()) {
    mutable_center()->::proto::Vector::MergeFrom(from.center());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
}

void ShapeSphere::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ShapeSphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeSphere::CopyFrom(const ShapeSphere& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ShapeSphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeSphere::IsInitialized() const {
  return true;
}

void ShapeSphere::Swap(ShapeSphere* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShapeSphere::InternalSwap(ShapeSphere* other) {
  using std::swap;
  swap(center_, other->center_);
  swap(radius_, other->radius_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShapeSphere::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShapeSphere

// .proto.Vector center = 1;
bool ShapeSphere::has_center() const {
  return this != internal_default_instance() && center_ != NULL;
}
void ShapeSphere::clear_center() {
  if (GetArenaNoVirtual() == NULL && center_ != NULL) delete center_;
  center_ = NULL;
}
const ::proto::Vector& ShapeSphere::center() const {
  const ::proto::Vector* p = center_;
  // @@protoc_insertion_point(field_get:proto.ShapeSphere.center)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* ShapeSphere::mutable_center() {
  
  if (center_ == NULL) {
    center_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.ShapeSphere.center)
  return center_;
}
::proto::Vector* ShapeSphere::release_center() {
  // @@protoc_insertion_point(field_release:proto.ShapeSphere.center)
  
  ::proto::Vector* temp = center_;
  center_ = NULL;
  return temp;
}
void ShapeSphere::set_allocated_center(::proto::Vector* center) {
  delete center_;
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ShapeSphere.center)
}

// float radius = 2;
void ShapeSphere::clear_radius() {
  radius_ = 0;
}
float ShapeSphere::radius() const {
  // @@protoc_insertion_point(field_get:proto.ShapeSphere.radius)
  return radius_;
}
void ShapeSphere::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:proto.ShapeSphere.radius)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShapeBox::kCenterFieldNumber;
const int ShapeBox::kAxis0FieldNumber;
const int ShapeBox::kAxis1FieldNumber;
const int ShapeBox::kAxis2FieldNumber;
const int ShapeBox::kExtentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShapeBox::ShapeBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ShapeBox)
}
ShapeBox::ShapeBox(const ShapeBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_center()) {
    center_ = new ::proto::Vector(*from.center_);
  } else {
    center_ = NULL;
  }
  if (from.has_axis0()) {
    axis0_ = new ::proto::Vector(*from.axis0_);
  } else {
    axis0_ = NULL;
  }
  if (from.has_axis1()) {
    axis1_ = new ::proto::Vector(*from.axis1_);
  } else {
    axis1_ = NULL;
  }
  if (from.has_axis2()) {
    axis2_ = new ::proto::Vector(*from.axis2_);
  } else {
    axis2_ = NULL;
  }
  if (from.has_extents()) {
    extents_ = new ::proto::Vector(*from.extents_);
  } else {
    extents_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.ShapeBox)
}

void ShapeBox::SharedCtor() {
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extents_) -
      reinterpret_cast<char*>(&center_)) + sizeof(extents_));
  _cached_size_ = 0;
}

ShapeBox::~ShapeBox() {
  // @@protoc_insertion_point(destructor:proto.ShapeBox)
  SharedDtor();
}

void ShapeBox::SharedDtor() {
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete axis0_;
  if (this != internal_default_instance()) delete axis1_;
  if (this != internal_default_instance()) delete axis2_;
  if (this != internal_default_instance()) delete extents_;
}

void ShapeBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShapeBox::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShapeBox& ShapeBox::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShapeBox* ShapeBox::New(::google::protobuf::Arena* arena) const {
  ShapeBox* n = new ShapeBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShapeBox::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ShapeBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && center_ != NULL) {
    delete center_;
  }
  center_ = NULL;
  if (GetArenaNoVirtual() == NULL && axis0_ != NULL) {
    delete axis0_;
  }
  axis0_ = NULL;
  if (GetArenaNoVirtual() == NULL && axis1_ != NULL) {
    delete axis1_;
  }
  axis1_ = NULL;
  if (GetArenaNoVirtual() == NULL && axis2_ != NULL) {
    delete axis2_;
  }
  axis2_ = NULL;
  if (GetArenaNoVirtual() == NULL && extents_ != NULL) {
    delete extents_;
  }
  extents_ = NULL;
  _internal_metadata_.Clear();
}

bool ShapeBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ShapeBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.Vector center = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector axis0 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_axis0()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector axis1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_axis1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector axis2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_axis2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector extents = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ShapeBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ShapeBox)
  return false;
#undef DO_
}

void ShapeBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ShapeBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Vector center = 1;
  if (this->has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->center_, output);
  }

  // .proto.Vector axis0 = 2;
  if (this->has_axis0()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->axis0_, output);
  }

  // .proto.Vector axis1 = 3;
  if (this->has_axis1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->axis1_, output);
  }

  // .proto.Vector axis2 = 4;
  if (this->has_axis2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->axis2_, output);
  }

  // .proto.Vector extents = 5;
  if (this->has_extents()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->extents_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ShapeBox)
}

::google::protobuf::uint8* ShapeBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ShapeBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Vector center = 1;
  if (this->has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->center_, deterministic, target);
  }

  // .proto.Vector axis0 = 2;
  if (this->has_axis0()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->axis0_, deterministic, target);
  }

  // .proto.Vector axis1 = 3;
  if (this->has_axis1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->axis1_, deterministic, target);
  }

  // .proto.Vector axis2 = 4;
  if (this->has_axis2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->axis2_, deterministic, target);
  }

  // .proto.Vector extents = 5;
  if (this->has_extents()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->extents_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ShapeBox)
  return target;
}

size_t ShapeBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ShapeBox)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.Vector center = 1;
  if (this->has_center()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->center_);
  }

  // .proto.Vector axis0 = 2;
  if (this->has_axis0()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->axis0_);
  }

  // .proto.Vector axis1 = 3;
  if (this->has_axis1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->axis1_);
  }

  // .proto.Vector axis2 = 4;
  if (this->has_axis2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->axis2_);
  }

  // .proto.Vector extents = 5;
  if (this->has_extents()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extents_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShapeBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ShapeBox)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeBox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShapeBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ShapeBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ShapeBox)
    MergeFrom(*source);
  }
}

void ShapeBox::MergeFrom(const ShapeBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ShapeBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center()) {
    mutable_center()->::proto::Vector::MergeFrom(from.center());
  }
  if (from.has_axis0()) {
    mutable_axis0()->::proto::Vector::MergeFrom(from.axis0());
  }
  if (from.has_axis1()) {
    mutable_axis1()->::proto::Vector::MergeFrom(from.axis1());
  }
  if (from.has_axis2()) {
    mutable_axis2()->::proto::Vector::MergeFrom(from.axis2());
  }
  if (from.has_extents()) {
    mutable_extents()->::proto::Vector::MergeFrom(from.extents());
  }
}

void ShapeBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ShapeBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeBox::CopyFrom(const ShapeBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ShapeBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeBox::IsInitialized() const {
  return true;
}

void ShapeBox::Swap(ShapeBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShapeBox::InternalSwap(ShapeBox* other) {
  using std::swap;
  swap(center_, other->center_);
  swap(axis0_, other->axis0_);
  swap(axis1_, other->axis1_);
  swap(axis2_, other->axis2_);
  swap(extents_, other->extents_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShapeBox::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShapeBox

// .proto.Vector center = 1;
bool ShapeBox::has_center() const {
  return this != internal_default_instance() && center_ != NULL;
}
void ShapeBox::clear_center() {
  if (GetArenaNoVirtual() == NULL && center_ != NULL) delete center_;
  center_ = NULL;
}
const ::proto::Vector& ShapeBox::center() const {
  const ::proto::Vector* p = center_;
  // @@protoc_insertion_point(field_get:proto.ShapeBox.center)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* ShapeBox::mutable_center() {
  
  if (center_ == NULL) {
    center_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.ShapeBox.center)
  return center_;
}
::proto::Vector* ShapeBox::release_center() {
  // @@protoc_insertion_point(field_release:proto.ShapeBox.center)
  
  ::proto::Vector* temp = center_;
  center_ = NULL;
  return temp;
}
void ShapeBox::set_allocated_center(::proto::Vector* center) {
  delete center_;
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ShapeBox.center)
}

// .proto.Vector axis0 = 2;
bool ShapeBox::has_axis0() const {
  return this != internal_default_instance() && axis0_ != NULL;
}
void ShapeBox::clear_axis0() {
  if (GetArenaNoVirtual() == NULL && axis0_ != NULL) delete axis0_;
  axis0_ = NULL;
}
const ::proto::Vector& ShapeBox::axis0() const {
  const ::proto::Vector* p = axis0_;
  // @@protoc_insertion_point(field_get:proto.ShapeBox.axis0)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* ShapeBox::mutable_axis0() {
  
  if (axis0_ == NULL) {
    axis0_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.ShapeBox.axis0)
  return axis0_;
}
::proto::Vector* ShapeBox::release_axis0() {
  // @@protoc_insertion_point(field_release:proto.ShapeBox.axis0)
  
  ::proto::Vector* temp = axis0_;
  axis0_ = NULL;
  return temp;
}
void ShapeBox::set_allocated_axis0(::proto::Vector* axis0) {
  delete axis0_;
  axis0_ = axis0;
  if (axis0) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ShapeBox.axis0)
}

// .proto.Vector axis1 = 3;
bool ShapeBox::has_axis1() const {
  return this != internal_default_instance() && axis1_ != NULL;
}
void ShapeBox::clear_axis1() {
  if (GetArenaNoVirtual() == NULL && axis1_ != NULL) delete axis1_;
  axis1_ = NULL;
}
const ::proto::Vector& ShapeBox::axis1() const {
  const ::proto::Vector* p = axis1_;
  // @@protoc_insertion_point(field_get:proto.ShapeBox.axis1)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* ShapeBox::mutable_axis1() {
  
  if (axis1_ == NULL) {
    axis1_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.ShapeBox.axis1)
  return axis1_;
}
::proto::Vector* ShapeBox::release_axis1() {
  // @@protoc_insertion_point(field_release:proto.ShapeBox.axis1)
  
  ::proto::Vector* temp = axis1_;
  axis1_ = NULL;
  return temp;
}
void ShapeBox::set_allocated_axis1(::proto::Vector* axis1) {
  delete axis1_;
  axis1_ = axis1;
  if (axis1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ShapeBox.axis1)
}

// .proto.Vector axis2 = 4;
bool ShapeBox::has_axis2() const {
  return this != internal_default_instance() && axis2_ != NULL;
}
void ShapeBox::clear_axis2() {
  if (GetArenaNoVirtual() == NULL && axis2_ != NULL) delete axis2_;
  axis2_ = NULL;
}
const ::proto::Vector& ShapeBox::axis2() const {
  const ::proto::Vector* p = axis2_;
  // @@protoc_insertion_point(field_get:proto.ShapeBox.axis2)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* ShapeBox::mutable_axis2() {
  
  if (axis2_ == NULL) {
    axis2_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.ShapeBox.axis2)
  return axis2_;
}
::proto::Vector* ShapeBox::release_axis2() {
  // @@protoc_insertion_point(field_release:proto.ShapeBox.axis2)
  
  ::proto::Vector* temp = axis2_;
  axis2_ = NULL;
  return temp;
}
void ShapeBox::set_allocated_axis2(::proto::Vector* axis2) {
  delete axis2_;
  axis2_ = axis2;
  if (axis2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ShapeBox.axis2)
}

// .proto.Vector extents = 5;
bool ShapeBox::has_extents() const {
  return this != internal_default_instance() && extents_ != NULL;
}
void ShapeBox::clear_extents() {
  if (GetArenaNoVirtual() == NULL && extents_ != NULL) delete extents_;
  extents_ = NULL;
}
const ::proto::Vector& ShapeBox::extents() const {
  const ::proto::Vector* p = extents_;
  // @@protoc_insertion_point(field_get:proto.ShapeBox.extents)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* ShapeBox::mutable_extents() {
  
  if (extents_ == NULL) {
    extents_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.ShapeBox.extents)
  return extents_;
}
::proto::Vector* ShapeBox::release_extents() {
  // @@protoc_insertion_point(field_release:proto.ShapeBox.extents)
  
  ::proto::Vector* temp = extents_;
  extents_ = NULL;
  return temp;
}
void ShapeBox::set_allocated_extents(::proto::Vector* extents) {
  delete extents_;
  extents_ = extents;
  if (extents) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ShapeBox.extents)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerMassiveEntity::kEntityTypeFieldNumber;
const int ServerMassiveEntity::kConfigIdFieldNumber;
const int ServerMassiveEntity::kRuntimeIdFieldNumber;
const int ServerMassiveEntity::kAuthorityPeerIdFieldNumber;
const int ServerMassiveEntity::kObjIdFieldNumber;
const int ServerMassiveEntity::kWaterInfoFieldNumber;
const int ServerMassiveEntity::kGrassInfoFieldNumber;
const int ServerMassiveEntity::kBoxInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerMassiveEntity::ServerMassiveEntity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerMassiveEntity)
}
ServerMassiveEntity::ServerMassiveEntity(const ServerMassiveEntity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&entity_type_, &from.entity_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&obj_id_) -
    reinterpret_cast<char*>(&entity_type_)) + sizeof(obj_id_));
  clear_has_entity_info();
  switch (from.entity_info_case()) {
    case kWaterInfo: {
      mutable_water_info()->::proto::MassiveWaterInfo::MergeFrom(from.water_info());
      break;
    }
    case kGrassInfo: {
      mutable_grass_info()->::proto::MassiveGrassInfo::MergeFrom(from.grass_info());
      break;
    }
    case kBoxInfo: {
      mutable_box_info()->::proto::MassiveBoxInfo::MergeFrom(from.box_info());
      break;
    }
    case ENTITY_INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.ServerMassiveEntity)
}

void ServerMassiveEntity::SharedCtor() {
  ::memset(&entity_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obj_id_) -
      reinterpret_cast<char*>(&entity_type_)) + sizeof(obj_id_));
  clear_has_entity_info();
  _cached_size_ = 0;
}

ServerMassiveEntity::~ServerMassiveEntity() {
  // @@protoc_insertion_point(destructor:proto.ServerMassiveEntity)
  SharedDtor();
}

void ServerMassiveEntity::SharedDtor() {
  if (has_entity_info()) {
    clear_entity_info();
  }
}

void ServerMassiveEntity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerMassiveEntity::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerMassiveEntity& ServerMassiveEntity::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerMassiveEntity* ServerMassiveEntity::New(::google::protobuf::Arena* arena) const {
  ServerMassiveEntity* n = new ServerMassiveEntity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerMassiveEntity::clear_entity_info() {
// @@protoc_insertion_point(one_of_clear_start:proto.ServerMassiveEntity)
  switch (entity_info_case()) {
    case kWaterInfo: {
      delete entity_info_.water_info_;
      break;
    }
    case kGrassInfo: {
      delete entity_info_.grass_info_;
      break;
    }
    case kBoxInfo: {
      delete entity_info_.box_info_;
      break;
    }
    case ENTITY_INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTITY_INFO_NOT_SET;
}


void ServerMassiveEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerMassiveEntity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&entity_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obj_id_) -
      reinterpret_cast<char*>(&entity_type_)) + sizeof(obj_id_));
  clear_entity_info();
  _internal_metadata_.Clear();
}

bool ServerMassiveEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerMassiveEntity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 entity_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 config_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 runtime_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &runtime_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 authority_peer_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &authority_peer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 obj_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &obj_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MassiveWaterInfo water_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_water_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MassiveGrassInfo grass_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grass_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MassiveBoxInfo box_info = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerMassiveEntity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerMassiveEntity)
  return false;
#undef DO_
}

void ServerMassiveEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerMassiveEntity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entity_type = 1;
  if (this->entity_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->entity_type(), output);
  }

  // uint32 config_id = 2;
  if (this->config_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->config_id(), output);
  }

  // uint32 runtime_id = 3;
  if (this->runtime_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->runtime_id(), output);
  }

  // uint32 authority_peer_id = 4;
  if (this->authority_peer_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->authority_peer_id(), output);
  }

  // int64 obj_id = 5;
  if (this->obj_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->obj_id(), output);
  }

  // .proto.MassiveWaterInfo water_info = 6;
  if (has_water_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *entity_info_.water_info_, output);
  }

  // .proto.MassiveGrassInfo grass_info = 7;
  if (has_grass_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *entity_info_.grass_info_, output);
  }

  // .proto.MassiveBoxInfo box_info = 8;
  if (has_box_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *entity_info_.box_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerMassiveEntity)
}

::google::protobuf::uint8* ServerMassiveEntity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerMassiveEntity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entity_type = 1;
  if (this->entity_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->entity_type(), target);
  }

  // uint32 config_id = 2;
  if (this->config_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->config_id(), target);
  }

  // uint32 runtime_id = 3;
  if (this->runtime_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->runtime_id(), target);
  }

  // uint32 authority_peer_id = 4;
  if (this->authority_peer_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->authority_peer_id(), target);
  }

  // int64 obj_id = 5;
  if (this->obj_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->obj_id(), target);
  }

  // .proto.MassiveWaterInfo water_info = 6;
  if (has_water_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *entity_info_.water_info_, deterministic, target);
  }

  // .proto.MassiveGrassInfo grass_info = 7;
  if (has_grass_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *entity_info_.grass_info_, deterministic, target);
  }

  // .proto.MassiveBoxInfo box_info = 8;
  if (has_box_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *entity_info_.box_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerMassiveEntity)
  return target;
}

size_t ServerMassiveEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerMassiveEntity)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 entity_type = 1;
  if (this->entity_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->entity_type());
  }

  // uint32 config_id = 2;
  if (this->config_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->config_id());
  }

  // uint32 runtime_id = 3;
  if (this->runtime_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->runtime_id());
  }

  // uint32 authority_peer_id = 4;
  if (this->authority_peer_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->authority_peer_id());
  }

  // int64 obj_id = 5;
  if (this->obj_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->obj_id());
  }

  switch (entity_info_case()) {
    // .proto.MassiveWaterInfo water_info = 6;
    case kWaterInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *entity_info_.water_info_);
      break;
    }
    // .proto.MassiveGrassInfo grass_info = 7;
    case kGrassInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *entity_info_.grass_info_);
      break;
    }
    // .proto.MassiveBoxInfo box_info = 8;
    case kBoxInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *entity_info_.box_info_);
      break;
    }
    case ENTITY_INFO_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMassiveEntity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerMassiveEntity)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerMassiveEntity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerMassiveEntity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerMassiveEntity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerMassiveEntity)
    MergeFrom(*source);
  }
}

void ServerMassiveEntity::MergeFrom(const ServerMassiveEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerMassiveEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity_type() != 0) {
    set_entity_type(from.entity_type());
  }
  if (from.config_id() != 0) {
    set_config_id(from.config_id());
  }
  if (from.runtime_id() != 0) {
    set_runtime_id(from.runtime_id());
  }
  if (from.authority_peer_id() != 0) {
    set_authority_peer_id(from.authority_peer_id());
  }
  if (from.obj_id() != 0) {
    set_obj_id(from.obj_id());
  }
  switch (from.entity_info_case()) {
    case kWaterInfo: {
      mutable_water_info()->::proto::MassiveWaterInfo::MergeFrom(from.water_info());
      break;
    }
    case kGrassInfo: {
      mutable_grass_info()->::proto::MassiveGrassInfo::MergeFrom(from.grass_info());
      break;
    }
    case kBoxInfo: {
      mutable_box_info()->::proto::MassiveBoxInfo::MergeFrom(from.box_info());
      break;
    }
    case ENTITY_INFO_NOT_SET: {
      break;
    }
  }
}

void ServerMassiveEntity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerMassiveEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMassiveEntity::CopyFrom(const ServerMassiveEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerMassiveEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMassiveEntity::IsInitialized() const {
  return true;
}

void ServerMassiveEntity::Swap(ServerMassiveEntity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerMassiveEntity::InternalSwap(ServerMassiveEntity* other) {
  using std::swap;
  swap(entity_type_, other->entity_type_);
  swap(config_id_, other->config_id_);
  swap(runtime_id_, other->runtime_id_);
  swap(authority_peer_id_, other->authority_peer_id_);
  swap(obj_id_, other->obj_id_);
  swap(entity_info_, other->entity_info_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerMassiveEntity::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerMassiveEntity

// uint32 entity_type = 1;
void ServerMassiveEntity::clear_entity_type() {
  entity_type_ = 0u;
}
::google::protobuf::uint32 ServerMassiveEntity::entity_type() const {
  // @@protoc_insertion_point(field_get:proto.ServerMassiveEntity.entity_type)
  return entity_type_;
}
void ServerMassiveEntity::set_entity_type(::google::protobuf::uint32 value) {
  
  entity_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerMassiveEntity.entity_type)
}

// uint32 config_id = 2;
void ServerMassiveEntity::clear_config_id() {
  config_id_ = 0u;
}
::google::protobuf::uint32 ServerMassiveEntity::config_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerMassiveEntity.config_id)
  return config_id_;
}
void ServerMassiveEntity::set_config_id(::google::protobuf::uint32 value) {
  
  config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerMassiveEntity.config_id)
}

// uint32 runtime_id = 3;
void ServerMassiveEntity::clear_runtime_id() {
  runtime_id_ = 0u;
}
::google::protobuf::uint32 ServerMassiveEntity::runtime_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerMassiveEntity.runtime_id)
  return runtime_id_;
}
void ServerMassiveEntity::set_runtime_id(::google::protobuf::uint32 value) {
  
  runtime_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerMassiveEntity.runtime_id)
}

// uint32 authority_peer_id = 4;
void ServerMassiveEntity::clear_authority_peer_id() {
  authority_peer_id_ = 0u;
}
::google::protobuf::uint32 ServerMassiveEntity::authority_peer_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerMassiveEntity.authority_peer_id)
  return authority_peer_id_;
}
void ServerMassiveEntity::set_authority_peer_id(::google::protobuf::uint32 value) {
  
  authority_peer_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerMassiveEntity.authority_peer_id)
}

// int64 obj_id = 5;
void ServerMassiveEntity::clear_obj_id() {
  obj_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ServerMassiveEntity::obj_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerMassiveEntity.obj_id)
  return obj_id_;
}
void ServerMassiveEntity::set_obj_id(::google::protobuf::int64 value) {
  
  obj_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerMassiveEntity.obj_id)
}

// .proto.MassiveWaterInfo water_info = 6;
bool ServerMassiveEntity::has_water_info() const {
  return entity_info_case() == kWaterInfo;
}
void ServerMassiveEntity::set_has_water_info() {
  _oneof_case_[0] = kWaterInfo;
}
void ServerMassiveEntity::clear_water_info() {
  if (has_water_info()) {
    delete entity_info_.water_info_;
    clear_has_entity_info();
  }
}
 const ::proto::MassiveWaterInfo& ServerMassiveEntity::water_info() const {
  // @@protoc_insertion_point(field_get:proto.ServerMassiveEntity.water_info)
  return has_water_info()
      ? *entity_info_.water_info_
      : ::proto::MassiveWaterInfo::default_instance();
}
::proto::MassiveWaterInfo* ServerMassiveEntity::mutable_water_info() {
  if (!has_water_info()) {
    clear_entity_info();
    set_has_water_info();
    entity_info_.water_info_ = new ::proto::MassiveWaterInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerMassiveEntity.water_info)
  return entity_info_.water_info_;
}
::proto::MassiveWaterInfo* ServerMassiveEntity::release_water_info() {
  // @@protoc_insertion_point(field_release:proto.ServerMassiveEntity.water_info)
  if (has_water_info()) {
    clear_has_entity_info();
    ::proto::MassiveWaterInfo* temp = entity_info_.water_info_;
    entity_info_.water_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServerMassiveEntity::set_allocated_water_info(::proto::MassiveWaterInfo* water_info) {
  clear_entity_info();
  if (water_info) {
    set_has_water_info();
    entity_info_.water_info_ = water_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerMassiveEntity.water_info)
}

// .proto.MassiveGrassInfo grass_info = 7;
bool ServerMassiveEntity::has_grass_info() const {
  return entity_info_case() == kGrassInfo;
}
void ServerMassiveEntity::set_has_grass_info() {
  _oneof_case_[0] = kGrassInfo;
}
void ServerMassiveEntity::clear_grass_info() {
  if (has_grass_info()) {
    delete entity_info_.grass_info_;
    clear_has_entity_info();
  }
}
 const ::proto::MassiveGrassInfo& ServerMassiveEntity::grass_info() const {
  // @@protoc_insertion_point(field_get:proto.ServerMassiveEntity.grass_info)
  return has_grass_info()
      ? *entity_info_.grass_info_
      : ::proto::MassiveGrassInfo::default_instance();
}
::proto::MassiveGrassInfo* ServerMassiveEntity::mutable_grass_info() {
  if (!has_grass_info()) {
    clear_entity_info();
    set_has_grass_info();
    entity_info_.grass_info_ = new ::proto::MassiveGrassInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerMassiveEntity.grass_info)
  return entity_info_.grass_info_;
}
::proto::MassiveGrassInfo* ServerMassiveEntity::release_grass_info() {
  // @@protoc_insertion_point(field_release:proto.ServerMassiveEntity.grass_info)
  if (has_grass_info()) {
    clear_has_entity_info();
    ::proto::MassiveGrassInfo* temp = entity_info_.grass_info_;
    entity_info_.grass_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServerMassiveEntity::set_allocated_grass_info(::proto::MassiveGrassInfo* grass_info) {
  clear_entity_info();
  if (grass_info) {
    set_has_grass_info();
    entity_info_.grass_info_ = grass_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerMassiveEntity.grass_info)
}

// .proto.MassiveBoxInfo box_info = 8;
bool ServerMassiveEntity::has_box_info() const {
  return entity_info_case() == kBoxInfo;
}
void ServerMassiveEntity::set_has_box_info() {
  _oneof_case_[0] = kBoxInfo;
}
void ServerMassiveEntity::clear_box_info() {
  if (has_box_info()) {
    delete entity_info_.box_info_;
    clear_has_entity_info();
  }
}
 const ::proto::MassiveBoxInfo& ServerMassiveEntity::box_info() const {
  // @@protoc_insertion_point(field_get:proto.ServerMassiveEntity.box_info)
  return has_box_info()
      ? *entity_info_.box_info_
      : ::proto::MassiveBoxInfo::default_instance();
}
::proto::MassiveBoxInfo* ServerMassiveEntity::mutable_box_info() {
  if (!has_box_info()) {
    clear_entity_info();
    set_has_box_info();
    entity_info_.box_info_ = new ::proto::MassiveBoxInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerMassiveEntity.box_info)
  return entity_info_.box_info_;
}
::proto::MassiveBoxInfo* ServerMassiveEntity::release_box_info() {
  // @@protoc_insertion_point(field_release:proto.ServerMassiveEntity.box_info)
  if (has_box_info()) {
    clear_has_entity_info();
    ::proto::MassiveBoxInfo* temp = entity_info_.box_info_;
    entity_info_.box_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServerMassiveEntity::set_allocated_box_info(::proto::MassiveBoxInfo* box_info) {
  clear_entity_info();
  if (box_info) {
    set_has_box_info();
    entity_info_.box_info_ = box_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerMassiveEntity.box_info)
}

bool ServerMassiveEntity::has_entity_info() const {
  return entity_info_case() != ENTITY_INFO_NOT_SET;
}
void ServerMassiveEntity::clear_has_entity_info() {
  _oneof_case_[0] = ENTITY_INFO_NOT_SET;
}
ServerMassiveEntity::EntityInfoCase ServerMassiveEntity::entity_info_case() const {
  return ServerMassiveEntity::EntityInfoCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MassiveEntityState::kEntityTypeFieldNumber;
const int MassiveEntityState::kObjIdFieldNumber;
const int MassiveEntityState::kElementStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MassiveEntityState::MassiveEntityState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MassiveEntityState)
}
MassiveEntityState::MassiveEntityState(const MassiveEntityState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&obj_id_, &from.obj_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&element_state_) -
    reinterpret_cast<char*>(&obj_id_)) + sizeof(element_state_));
  // @@protoc_insertion_point(copy_constructor:proto.MassiveEntityState)
}

void MassiveEntityState::SharedCtor() {
  ::memset(&obj_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&element_state_) -
      reinterpret_cast<char*>(&obj_id_)) + sizeof(element_state_));
  _cached_size_ = 0;
}

MassiveEntityState::~MassiveEntityState() {
  // @@protoc_insertion_point(destructor:proto.MassiveEntityState)
  SharedDtor();
}

void MassiveEntityState::SharedDtor() {
}

void MassiveEntityState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MassiveEntityState::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MassiveEntityState& MassiveEntityState::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

MassiveEntityState* MassiveEntityState::New(::google::protobuf::Arena* arena) const {
  MassiveEntityState* n = new MassiveEntityState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MassiveEntityState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MassiveEntityState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&obj_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&element_state_) -
      reinterpret_cast<char*>(&obj_id_)) + sizeof(element_state_));
  _internal_metadata_.Clear();
}

bool MassiveEntityState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MassiveEntityState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 entity_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 obj_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &obj_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 element_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &element_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MassiveEntityState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MassiveEntityState)
  return false;
#undef DO_
}

void MassiveEntityState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MassiveEntityState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entity_type = 1;
  if (this->entity_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->entity_type(), output);
  }

  // int64 obj_id = 2;
  if (this->obj_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->obj_id(), output);
  }

  // uint32 element_state = 3;
  if (this->element_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->element_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MassiveEntityState)
}

::google::protobuf::uint8* MassiveEntityState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MassiveEntityState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entity_type = 1;
  if (this->entity_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->entity_type(), target);
  }

  // int64 obj_id = 2;
  if (this->obj_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->obj_id(), target);
  }

  // uint32 element_state = 3;
  if (this->element_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->element_state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MassiveEntityState)
  return target;
}

size_t MassiveEntityState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MassiveEntityState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 obj_id = 2;
  if (this->obj_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->obj_id());
  }

  // uint32 entity_type = 1;
  if (this->entity_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->entity_type());
  }

  // uint32 element_state = 3;
  if (this->element_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->element_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MassiveEntityState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MassiveEntityState)
  GOOGLE_DCHECK_NE(&from, this);
  const MassiveEntityState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MassiveEntityState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MassiveEntityState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MassiveEntityState)
    MergeFrom(*source);
  }
}

void MassiveEntityState::MergeFrom(const MassiveEntityState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MassiveEntityState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.obj_id() != 0) {
    set_obj_id(from.obj_id());
  }
  if (from.entity_type() != 0) {
    set_entity_type(from.entity_type());
  }
  if (from.element_state() != 0) {
    set_element_state(from.element_state());
  }
}

void MassiveEntityState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MassiveEntityState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MassiveEntityState::CopyFrom(const MassiveEntityState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MassiveEntityState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MassiveEntityState::IsInitialized() const {
  return true;
}

void MassiveEntityState::Swap(MassiveEntityState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MassiveEntityState::InternalSwap(MassiveEntityState* other) {
  using std::swap;
  swap(obj_id_, other->obj_id_);
  swap(entity_type_, other->entity_type_);
  swap(element_state_, other->element_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MassiveEntityState::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MassiveEntityState

// uint32 entity_type = 1;
void MassiveEntityState::clear_entity_type() {
  entity_type_ = 0u;
}
::google::protobuf::uint32 MassiveEntityState::entity_type() const {
  // @@protoc_insertion_point(field_get:proto.MassiveEntityState.entity_type)
  return entity_type_;
}
void MassiveEntityState::set_entity_type(::google::protobuf::uint32 value) {
  
  entity_type_ = value;
  // @@protoc_insertion_point(field_set:proto.MassiveEntityState.entity_type)
}

// int64 obj_id = 2;
void MassiveEntityState::clear_obj_id() {
  obj_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MassiveEntityState::obj_id() const {
  // @@protoc_insertion_point(field_get:proto.MassiveEntityState.obj_id)
  return obj_id_;
}
void MassiveEntityState::set_obj_id(::google::protobuf::int64 value) {
  
  obj_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MassiveEntityState.obj_id)
}

// uint32 element_state = 3;
void MassiveEntityState::clear_element_state() {
  element_state_ = 0u;
}
::google::protobuf::uint32 MassiveEntityState::element_state() const {
  // @@protoc_insertion_point(field_get:proto.MassiveEntityState.element_state)
  return element_state_;
}
void MassiveEntityState::set_element_state(::google::protobuf::uint32 value) {
  
  element_state_ = value;
  // @@protoc_insertion_point(field_set:proto.MassiveEntityState.element_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityClientData::kWindChangeSceneTimeFieldNumber;
const int EntityClientData::kWindmillSyncAngleFieldNumber;
const int EntityClientData::kWindChangeTargetLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityClientData::EntityClientData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.EntityClientData)
}
EntityClientData::EntityClientData(const EntityClientData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&wind_change_scene_time_, &from.wind_change_scene_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&wind_change_target_level_) -
    reinterpret_cast<char*>(&wind_change_scene_time_)) + sizeof(wind_change_target_level_));
  // @@protoc_insertion_point(copy_constructor:proto.EntityClientData)
}

void EntityClientData::SharedCtor() {
  ::memset(&wind_change_scene_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wind_change_target_level_) -
      reinterpret_cast<char*>(&wind_change_scene_time_)) + sizeof(wind_change_target_level_));
  _cached_size_ = 0;
}

EntityClientData::~EntityClientData() {
  // @@protoc_insertion_point(destructor:proto.EntityClientData)
  SharedDtor();
}

void EntityClientData::SharedDtor() {
}

void EntityClientData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityClientData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityClientData& EntityClientData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

EntityClientData* EntityClientData::New(::google::protobuf::Arena* arena) const {
  EntityClientData* n = new EntityClientData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityClientData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EntityClientData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&wind_change_scene_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wind_change_target_level_) -
      reinterpret_cast<char*>(&wind_change_scene_time_)) + sizeof(wind_change_target_level_));
  _internal_metadata_.Clear();
}

bool EntityClientData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.EntityClientData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 wind_change_scene_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wind_change_scene_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float windmill_sync_angle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &windmill_sync_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wind_change_target_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wind_change_target_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.EntityClientData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.EntityClientData)
  return false;
#undef DO_
}

void EntityClientData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.EntityClientData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 wind_change_scene_time = 1;
  if (this->wind_change_scene_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wind_change_scene_time(), output);
  }

  // float windmill_sync_angle = 2;
  if (this->windmill_sync_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->windmill_sync_angle(), output);
  }

  // int32 wind_change_target_level = 3;
  if (this->wind_change_target_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wind_change_target_level(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.EntityClientData)
}

::google::protobuf::uint8* EntityClientData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.EntityClientData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 wind_change_scene_time = 1;
  if (this->wind_change_scene_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wind_change_scene_time(), target);
  }

  // float windmill_sync_angle = 2;
  if (this->windmill_sync_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->windmill_sync_angle(), target);
  }

  // int32 wind_change_target_level = 3;
  if (this->wind_change_target_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wind_change_target_level(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EntityClientData)
  return target;
}

size_t EntityClientData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EntityClientData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 wind_change_scene_time = 1;
  if (this->wind_change_scene_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wind_change_scene_time());
  }

  // float windmill_sync_angle = 2;
  if (this->windmill_sync_angle() != 0) {
    total_size += 1 + 4;
  }

  // int32 wind_change_target_level = 3;
  if (this->wind_change_target_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wind_change_target_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityClientData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.EntityClientData)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityClientData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityClientData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.EntityClientData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.EntityClientData)
    MergeFrom(*source);
  }
}

void EntityClientData::MergeFrom(const EntityClientData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.EntityClientData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wind_change_scene_time() != 0) {
    set_wind_change_scene_time(from.wind_change_scene_time());
  }
  if (from.windmill_sync_angle() != 0) {
    set_windmill_sync_angle(from.windmill_sync_angle());
  }
  if (from.wind_change_target_level() != 0) {
    set_wind_change_target_level(from.wind_change_target_level());
  }
}

void EntityClientData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.EntityClientData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityClientData::CopyFrom(const EntityClientData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EntityClientData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityClientData::IsInitialized() const {
  return true;
}

void EntityClientData::Swap(EntityClientData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityClientData::InternalSwap(EntityClientData* other) {
  using std::swap;
  swap(wind_change_scene_time_, other->wind_change_scene_time_);
  swap(windmill_sync_angle_, other->windmill_sync_angle_);
  swap(wind_change_target_level_, other->wind_change_target_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityClientData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EntityClientData

// uint32 wind_change_scene_time = 1;
void EntityClientData::clear_wind_change_scene_time() {
  wind_change_scene_time_ = 0u;
}
::google::protobuf::uint32 EntityClientData::wind_change_scene_time() const {
  // @@protoc_insertion_point(field_get:proto.EntityClientData.wind_change_scene_time)
  return wind_change_scene_time_;
}
void EntityClientData::set_wind_change_scene_time(::google::protobuf::uint32 value) {
  
  wind_change_scene_time_ = value;
  // @@protoc_insertion_point(field_set:proto.EntityClientData.wind_change_scene_time)
}

// float windmill_sync_angle = 2;
void EntityClientData::clear_windmill_sync_angle() {
  windmill_sync_angle_ = 0;
}
float EntityClientData::windmill_sync_angle() const {
  // @@protoc_insertion_point(field_get:proto.EntityClientData.windmill_sync_angle)
  return windmill_sync_angle_;
}
void EntityClientData::set_windmill_sync_angle(float value) {
  
  windmill_sync_angle_ = value;
  // @@protoc_insertion_point(field_set:proto.EntityClientData.windmill_sync_angle)
}

// int32 wind_change_target_level = 3;
void EntityClientData::clear_wind_change_target_level() {
  wind_change_target_level_ = 0;
}
::google::protobuf::int32 EntityClientData::wind_change_target_level() const {
  // @@protoc_insertion_point(field_get:proto.EntityClientData.wind_change_target_level)
  return wind_change_target_level_;
}
void EntityClientData::set_wind_change_target_level(::google::protobuf::int32 value) {
  
  wind_change_target_level_ = value;
  // @@protoc_insertion_point(field_set:proto.EntityClientData.wind_change_target_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockInfo::kBlockIdFieldNumber;
const int BlockInfo::kDataVersionFieldNumber;
const int BlockInfo::kBinDataFieldNumber;
const int BlockInfo::kIsDirtyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockInfo::BlockInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BlockInfo)
}
BlockInfo::BlockInfo(const BlockInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bin_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bin_data().size() > 0) {
    bin_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bin_data_);
  }
  ::memcpy(&block_id_, &from.block_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_dirty_) -
    reinterpret_cast<char*>(&block_id_)) + sizeof(is_dirty_));
  // @@protoc_insertion_point(copy_constructor:proto.BlockInfo)
}

void BlockInfo::SharedCtor() {
  bin_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_dirty_) -
      reinterpret_cast<char*>(&block_id_)) + sizeof(is_dirty_));
  _cached_size_ = 0;
}

BlockInfo::~BlockInfo() {
  // @@protoc_insertion_point(destructor:proto.BlockInfo)
  SharedDtor();
}

void BlockInfo::SharedDtor() {
  bin_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BlockInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlockInfo& BlockInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlockInfo* BlockInfo::New(::google::protobuf::Arena* arena) const {
  BlockInfo* n = new BlockInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BlockInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bin_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_dirty_) -
      reinterpret_cast<char*>(&block_id_)) + sizeof(is_dirty_));
  _internal_metadata_.Clear();
}

bool BlockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BlockInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 block_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 data_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes bin_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bin_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_dirty = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dirty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BlockInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BlockInfo)
  return false;
#undef DO_
}

void BlockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BlockInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 block_id = 1;
  if (this->block_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->block_id(), output);
  }

  // uint32 data_version = 2;
  if (this->data_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->data_version(), output);
  }

  // bytes bin_data = 3;
  if (this->bin_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->bin_data(), output);
  }

  // bool is_dirty = 4;
  if (this->is_dirty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_dirty(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BlockInfo)
}

::google::protobuf::uint8* BlockInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BlockInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 block_id = 1;
  if (this->block_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->block_id(), target);
  }

  // uint32 data_version = 2;
  if (this->data_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->data_version(), target);
  }

  // bytes bin_data = 3;
  if (this->bin_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->bin_data(), target);
  }

  // bool is_dirty = 4;
  if (this->is_dirty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_dirty(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BlockInfo)
  return target;
}

size_t BlockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BlockInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes bin_data = 3;
  if (this->bin_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bin_data());
  }

  // uint32 block_id = 1;
  if (this->block_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->block_id());
  }

  // uint32 data_version = 2;
  if (this->data_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_version());
  }

  // bool is_dirty = 4;
  if (this->is_dirty() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BlockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BlockInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BlockInfo)
    MergeFrom(*source);
  }
}

void BlockInfo::MergeFrom(const BlockInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BlockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bin_data().size() > 0) {

    bin_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bin_data_);
  }
  if (from.block_id() != 0) {
    set_block_id(from.block_id());
  }
  if (from.data_version() != 0) {
    set_data_version(from.data_version());
  }
  if (from.is_dirty() != 0) {
    set_is_dirty(from.is_dirty());
  }
}

void BlockInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BlockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockInfo::CopyFrom(const BlockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BlockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockInfo::IsInitialized() const {
  return true;
}

void BlockInfo::Swap(BlockInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockInfo::InternalSwap(BlockInfo* other) {
  using std::swap;
  bin_data_.Swap(&other->bin_data_);
  swap(block_id_, other->block_id_);
  swap(data_version_, other->data_version_);
  swap(is_dirty_, other->is_dirty_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockInfo

// uint32 block_id = 1;
void BlockInfo::clear_block_id() {
  block_id_ = 0u;
}
::google::protobuf::uint32 BlockInfo::block_id() const {
  // @@protoc_insertion_point(field_get:proto.BlockInfo.block_id)
  return block_id_;
}
void BlockInfo::set_block_id(::google::protobuf::uint32 value) {
  
  block_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BlockInfo.block_id)
}

// uint32 data_version = 2;
void BlockInfo::clear_data_version() {
  data_version_ = 0u;
}
::google::protobuf::uint32 BlockInfo::data_version() const {
  // @@protoc_insertion_point(field_get:proto.BlockInfo.data_version)
  return data_version_;
}
void BlockInfo::set_data_version(::google::protobuf::uint32 value) {
  
  data_version_ = value;
  // @@protoc_insertion_point(field_set:proto.BlockInfo.data_version)
}

// bytes bin_data = 3;
void BlockInfo::clear_bin_data() {
  bin_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BlockInfo::bin_data() const {
  // @@protoc_insertion_point(field_get:proto.BlockInfo.bin_data)
  return bin_data_.GetNoArena();
}
void BlockInfo::set_bin_data(const ::std::string& value) {
  
  bin_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.BlockInfo.bin_data)
}
#if LANG_CXX11
void BlockInfo::set_bin_data(::std::string&& value) {
  
  bin_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.BlockInfo.bin_data)
}
#endif
void BlockInfo::set_bin_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bin_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.BlockInfo.bin_data)
}
void BlockInfo::set_bin_data(const void* value, size_t size) {
  
  bin_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.BlockInfo.bin_data)
}
::std::string* BlockInfo::mutable_bin_data() {
  
  // @@protoc_insertion_point(field_mutable:proto.BlockInfo.bin_data)
  return bin_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlockInfo::release_bin_data() {
  // @@protoc_insertion_point(field_release:proto.BlockInfo.bin_data)
  
  return bin_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlockInfo::set_allocated_bin_data(::std::string* bin_data) {
  if (bin_data != NULL) {
    
  } else {
    
  }
  bin_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bin_data);
  // @@protoc_insertion_point(field_set_allocated:proto.BlockInfo.bin_data)
}

// bool is_dirty = 4;
void BlockInfo::clear_is_dirty() {
  is_dirty_ = false;
}
bool BlockInfo::is_dirty() const {
  // @@protoc_insertion_point(field_get:proto.BlockInfo.is_dirty)
  return is_dirty_;
}
void BlockInfo::set_is_dirty(bool value) {
  
  is_dirty_ = value;
  // @@protoc_insertion_point(field_set:proto.BlockInfo.is_dirty)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShopMcoinProduct::kProductIdFieldNumber;
const int ShopMcoinProduct::kPriceTierFieldNumber;
const int ShopMcoinProduct::kMcoinBaseFieldNumber;
const int ShopMcoinProduct::kMcoinNonFirstFieldNumber;
const int ShopMcoinProduct::kMcoinFirstFieldNumber;
const int ShopMcoinProduct::kBoughtNumFieldNumber;
const int ShopMcoinProduct::kIsAuditFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShopMcoinProduct::ShopMcoinProduct()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ShopMcoinProduct)
}
ShopMcoinProduct::ShopMcoinProduct(const ShopMcoinProduct& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product_id().size() > 0) {
    product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_id_);
  }
  price_tier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.price_tier().size() > 0) {
    price_tier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_tier_);
  }
  ::memcpy(&mcoin_base_, &from.mcoin_base_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_audit_) -
    reinterpret_cast<char*>(&mcoin_base_)) + sizeof(is_audit_));
  // @@protoc_insertion_point(copy_constructor:proto.ShopMcoinProduct)
}

void ShopMcoinProduct::SharedCtor() {
  product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_tier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mcoin_base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_audit_) -
      reinterpret_cast<char*>(&mcoin_base_)) + sizeof(is_audit_));
  _cached_size_ = 0;
}

ShopMcoinProduct::~ShopMcoinProduct() {
  // @@protoc_insertion_point(destructor:proto.ShopMcoinProduct)
  SharedDtor();
}

void ShopMcoinProduct::SharedDtor() {
  product_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_tier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ShopMcoinProduct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopMcoinProduct::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShopMcoinProduct& ShopMcoinProduct::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShopMcoinProduct* ShopMcoinProduct::New(::google::protobuf::Arena* arena) const {
  ShopMcoinProduct* n = new ShopMcoinProduct;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShopMcoinProduct::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ShopMcoinProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_tier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mcoin_base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_audit_) -
      reinterpret_cast<char*>(&mcoin_base_)) + sizeof(is_audit_));
  _internal_metadata_.Clear();
}

bool ShopMcoinProduct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ShopMcoinProduct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string product_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_id().data(), static_cast<int>(this->product_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ShopMcoinProduct.product_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string price_tier = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price_tier()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->price_tier().data(), static_cast<int>(this->price_tier().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ShopMcoinProduct.price_tier"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mcoin_base = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcoin_base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mcoin_non_first = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcoin_non_first_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mcoin_first = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcoin_first_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 bought_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bought_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_audit = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_audit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ShopMcoinProduct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ShopMcoinProduct)
  return false;
#undef DO_
}

void ShopMcoinProduct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ShopMcoinProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_id = 1;
  if (this->product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_id().data(), static_cast<int>(this->product_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ShopMcoinProduct.product_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->product_id(), output);
  }

  // string price_tier = 2;
  if (this->price_tier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->price_tier().data(), static_cast<int>(this->price_tier().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ShopMcoinProduct.price_tier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->price_tier(), output);
  }

  // uint32 mcoin_base = 3;
  if (this->mcoin_base() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mcoin_base(), output);
  }

  // uint32 mcoin_non_first = 4;
  if (this->mcoin_non_first() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mcoin_non_first(), output);
  }

  // uint32 mcoin_first = 5;
  if (this->mcoin_first() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mcoin_first(), output);
  }

  // uint32 bought_num = 6;
  if (this->bought_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bought_num(), output);
  }

  // bool is_audit = 7;
  if (this->is_audit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_audit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ShopMcoinProduct)
}

::google::protobuf::uint8* ShopMcoinProduct::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ShopMcoinProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_id = 1;
  if (this->product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_id().data(), static_cast<int>(this->product_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ShopMcoinProduct.product_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->product_id(), target);
  }

  // string price_tier = 2;
  if (this->price_tier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->price_tier().data(), static_cast<int>(this->price_tier().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ShopMcoinProduct.price_tier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->price_tier(), target);
  }

  // uint32 mcoin_base = 3;
  if (this->mcoin_base() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mcoin_base(), target);
  }

  // uint32 mcoin_non_first = 4;
  if (this->mcoin_non_first() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mcoin_non_first(), target);
  }

  // uint32 mcoin_first = 5;
  if (this->mcoin_first() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mcoin_first(), target);
  }

  // uint32 bought_num = 6;
  if (this->bought_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->bought_num(), target);
  }

  // bool is_audit = 7;
  if (this->is_audit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_audit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ShopMcoinProduct)
  return target;
}

size_t ShopMcoinProduct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ShopMcoinProduct)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string product_id = 1;
  if (this->product_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_id());
  }

  // string price_tier = 2;
  if (this->price_tier().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->price_tier());
  }

  // uint32 mcoin_base = 3;
  if (this->mcoin_base() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mcoin_base());
  }

  // uint32 mcoin_non_first = 4;
  if (this->mcoin_non_first() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mcoin_non_first());
  }

  // uint32 mcoin_first = 5;
  if (this->mcoin_first() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mcoin_first());
  }

  // uint32 bought_num = 6;
  if (this->bought_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bought_num());
  }

  // bool is_audit = 7;
  if (this->is_audit() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopMcoinProduct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ShopMcoinProduct)
  GOOGLE_DCHECK_NE(&from, this);
  const ShopMcoinProduct* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShopMcoinProduct>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ShopMcoinProduct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ShopMcoinProduct)
    MergeFrom(*source);
  }
}

void ShopMcoinProduct::MergeFrom(const ShopMcoinProduct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ShopMcoinProduct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.product_id().size() > 0) {

    product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_id_);
  }
  if (from.price_tier().size() > 0) {

    price_tier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_tier_);
  }
  if (from.mcoin_base() != 0) {
    set_mcoin_base(from.mcoin_base());
  }
  if (from.mcoin_non_first() != 0) {
    set_mcoin_non_first(from.mcoin_non_first());
  }
  if (from.mcoin_first() != 0) {
    set_mcoin_first(from.mcoin_first());
  }
  if (from.bought_num() != 0) {
    set_bought_num(from.bought_num());
  }
  if (from.is_audit() != 0) {
    set_is_audit(from.is_audit());
  }
}

void ShopMcoinProduct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ShopMcoinProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopMcoinProduct::CopyFrom(const ShopMcoinProduct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ShopMcoinProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopMcoinProduct::IsInitialized() const {
  return true;
}

void ShopMcoinProduct::Swap(ShopMcoinProduct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShopMcoinProduct::InternalSwap(ShopMcoinProduct* other) {
  using std::swap;
  product_id_.Swap(&other->product_id_);
  price_tier_.Swap(&other->price_tier_);
  swap(mcoin_base_, other->mcoin_base_);
  swap(mcoin_non_first_, other->mcoin_non_first_);
  swap(mcoin_first_, other->mcoin_first_);
  swap(bought_num_, other->bought_num_);
  swap(is_audit_, other->is_audit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShopMcoinProduct::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShopMcoinProduct

// string product_id = 1;
void ShopMcoinProduct::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ShopMcoinProduct::product_id() const {
  // @@protoc_insertion_point(field_get:proto.ShopMcoinProduct.product_id)
  return product_id_.GetNoArena();
}
void ShopMcoinProduct::set_product_id(const ::std::string& value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ShopMcoinProduct.product_id)
}
#if LANG_CXX11
void ShopMcoinProduct::set_product_id(::std::string&& value) {
  
  product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ShopMcoinProduct.product_id)
}
#endif
void ShopMcoinProduct::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ShopMcoinProduct.product_id)
}
void ShopMcoinProduct::set_product_id(const char* value, size_t size) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ShopMcoinProduct.product_id)
}
::std::string* ShopMcoinProduct::mutable_product_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.ShopMcoinProduct.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShopMcoinProduct::release_product_id() {
  // @@protoc_insertion_point(field_release:proto.ShopMcoinProduct.product_id)
  
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShopMcoinProduct::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    
  } else {
    
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:proto.ShopMcoinProduct.product_id)
}

// string price_tier = 2;
void ShopMcoinProduct::clear_price_tier() {
  price_tier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ShopMcoinProduct::price_tier() const {
  // @@protoc_insertion_point(field_get:proto.ShopMcoinProduct.price_tier)
  return price_tier_.GetNoArena();
}
void ShopMcoinProduct::set_price_tier(const ::std::string& value) {
  
  price_tier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ShopMcoinProduct.price_tier)
}
#if LANG_CXX11
void ShopMcoinProduct::set_price_tier(::std::string&& value) {
  
  price_tier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ShopMcoinProduct.price_tier)
}
#endif
void ShopMcoinProduct::set_price_tier(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  price_tier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ShopMcoinProduct.price_tier)
}
void ShopMcoinProduct::set_price_tier(const char* value, size_t size) {
  
  price_tier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ShopMcoinProduct.price_tier)
}
::std::string* ShopMcoinProduct::mutable_price_tier() {
  
  // @@protoc_insertion_point(field_mutable:proto.ShopMcoinProduct.price_tier)
  return price_tier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShopMcoinProduct::release_price_tier() {
  // @@protoc_insertion_point(field_release:proto.ShopMcoinProduct.price_tier)
  
  return price_tier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShopMcoinProduct::set_allocated_price_tier(::std::string* price_tier) {
  if (price_tier != NULL) {
    
  } else {
    
  }
  price_tier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price_tier);
  // @@protoc_insertion_point(field_set_allocated:proto.ShopMcoinProduct.price_tier)
}

// uint32 mcoin_base = 3;
void ShopMcoinProduct::clear_mcoin_base() {
  mcoin_base_ = 0u;
}
::google::protobuf::uint32 ShopMcoinProduct::mcoin_base() const {
  // @@protoc_insertion_point(field_get:proto.ShopMcoinProduct.mcoin_base)
  return mcoin_base_;
}
void ShopMcoinProduct::set_mcoin_base(::google::protobuf::uint32 value) {
  
  mcoin_base_ = value;
  // @@protoc_insertion_point(field_set:proto.ShopMcoinProduct.mcoin_base)
}

// uint32 mcoin_non_first = 4;
void ShopMcoinProduct::clear_mcoin_non_first() {
  mcoin_non_first_ = 0u;
}
::google::protobuf::uint32 ShopMcoinProduct::mcoin_non_first() const {
  // @@protoc_insertion_point(field_get:proto.ShopMcoinProduct.mcoin_non_first)
  return mcoin_non_first_;
}
void ShopMcoinProduct::set_mcoin_non_first(::google::protobuf::uint32 value) {
  
  mcoin_non_first_ = value;
  // @@protoc_insertion_point(field_set:proto.ShopMcoinProduct.mcoin_non_first)
}

// uint32 mcoin_first = 5;
void ShopMcoinProduct::clear_mcoin_first() {
  mcoin_first_ = 0u;
}
::google::protobuf::uint32 ShopMcoinProduct::mcoin_first() const {
  // @@protoc_insertion_point(field_get:proto.ShopMcoinProduct.mcoin_first)
  return mcoin_first_;
}
void ShopMcoinProduct::set_mcoin_first(::google::protobuf::uint32 value) {
  
  mcoin_first_ = value;
  // @@protoc_insertion_point(field_set:proto.ShopMcoinProduct.mcoin_first)
}

// uint32 bought_num = 6;
void ShopMcoinProduct::clear_bought_num() {
  bought_num_ = 0u;
}
::google::protobuf::uint32 ShopMcoinProduct::bought_num() const {
  // @@protoc_insertion_point(field_get:proto.ShopMcoinProduct.bought_num)
  return bought_num_;
}
void ShopMcoinProduct::set_bought_num(::google::protobuf::uint32 value) {
  
  bought_num_ = value;
  // @@protoc_insertion_point(field_set:proto.ShopMcoinProduct.bought_num)
}

// bool is_audit = 7;
void ShopMcoinProduct::clear_is_audit() {
  is_audit_ = false;
}
bool ShopMcoinProduct::is_audit() const {
  // @@protoc_insertion_point(field_get:proto.ShopMcoinProduct.is_audit)
  return is_audit_;
}
void ShopMcoinProduct::set_is_audit(bool value) {
  
  is_audit_ = value;
  // @@protoc_insertion_point(field_set:proto.ShopMcoinProduct.is_audit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShopCardProduct_ResinCard::kBaseItemListFieldNumber;
const int ShopCardProduct_ResinCard::kPerDayItemListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShopCardProduct_ResinCard::ShopCardProduct_ResinCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ShopCardProduct.ResinCard)
}
ShopCardProduct_ResinCard::ShopCardProduct_ResinCard(const ShopCardProduct_ResinCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      base_item_list_(from.base_item_list_),
      per_day_item_list_(from.per_day_item_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.ShopCardProduct.ResinCard)
}

void ShopCardProduct_ResinCard::SharedCtor() {
  _cached_size_ = 0;
}

ShopCardProduct_ResinCard::~ShopCardProduct_ResinCard() {
  // @@protoc_insertion_point(destructor:proto.ShopCardProduct.ResinCard)
  SharedDtor();
}

void ShopCardProduct_ResinCard::SharedDtor() {
}

void ShopCardProduct_ResinCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopCardProduct_ResinCard::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShopCardProduct_ResinCard& ShopCardProduct_ResinCard::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShopCardProduct_ResinCard* ShopCardProduct_ResinCard::New(::google::protobuf::Arena* arena) const {
  ShopCardProduct_ResinCard* n = new ShopCardProduct_ResinCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShopCardProduct_ResinCard::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ShopCardProduct.ResinCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  base_item_list_.Clear();
  per_day_item_list_.Clear();
  _internal_metadata_.Clear();
}

bool ShopCardProduct_ResinCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ShopCardProduct.ResinCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.ItemParam base_item_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_base_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ItemParam per_day_item_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_per_day_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ShopCardProduct.ResinCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ShopCardProduct.ResinCard)
  return false;
#undef DO_
}

void ShopCardProduct_ResinCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ShopCardProduct.ResinCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ItemParam base_item_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->base_item_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_item_list(static_cast<int>(i)), output);
  }

  // repeated .proto.ItemParam per_day_item_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->per_day_item_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->per_day_item_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ShopCardProduct.ResinCard)
}

::google::protobuf::uint8* ShopCardProduct_ResinCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ShopCardProduct.ResinCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ItemParam base_item_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->base_item_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->base_item_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.ItemParam per_day_item_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->per_day_item_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->per_day_item_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ShopCardProduct.ResinCard)
  return target;
}

size_t ShopCardProduct_ResinCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ShopCardProduct.ResinCard)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ItemParam base_item_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->base_item_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_item_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.ItemParam per_day_item_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->per_day_item_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->per_day_item_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopCardProduct_ResinCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ShopCardProduct.ResinCard)
  GOOGLE_DCHECK_NE(&from, this);
  const ShopCardProduct_ResinCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShopCardProduct_ResinCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ShopCardProduct.ResinCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ShopCardProduct.ResinCard)
    MergeFrom(*source);
  }
}

void ShopCardProduct_ResinCard::MergeFrom(const ShopCardProduct_ResinCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ShopCardProduct.ResinCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  base_item_list_.MergeFrom(from.base_item_list_);
  per_day_item_list_.MergeFrom(from.per_day_item_list_);
}

void ShopCardProduct_ResinCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ShopCardProduct.ResinCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopCardProduct_ResinCard::CopyFrom(const ShopCardProduct_ResinCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ShopCardProduct.ResinCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopCardProduct_ResinCard::IsInitialized() const {
  return true;
}

void ShopCardProduct_ResinCard::Swap(ShopCardProduct_ResinCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShopCardProduct_ResinCard::InternalSwap(ShopCardProduct_ResinCard* other) {
  using std::swap;
  base_item_list_.InternalSwap(&other->base_item_list_);
  per_day_item_list_.InternalSwap(&other->per_day_item_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShopCardProduct_ResinCard::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShopCardProduct_ResinCard

// repeated .proto.ItemParam base_item_list = 1;
int ShopCardProduct_ResinCard::base_item_list_size() const {
  return base_item_list_.size();
}
void ShopCardProduct_ResinCard::clear_base_item_list() {
  base_item_list_.Clear();
}
const ::proto::ItemParam& ShopCardProduct_ResinCard::base_item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ShopCardProduct.ResinCard.base_item_list)
  return base_item_list_.Get(index);
}
::proto::ItemParam* ShopCardProduct_ResinCard::mutable_base_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ShopCardProduct.ResinCard.base_item_list)
  return base_item_list_.Mutable(index);
}
::proto::ItemParam* ShopCardProduct_ResinCard::add_base_item_list() {
  // @@protoc_insertion_point(field_add:proto.ShopCardProduct.ResinCard.base_item_list)
  return base_item_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
ShopCardProduct_ResinCard::mutable_base_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ShopCardProduct.ResinCard.base_item_list)
  return &base_item_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
ShopCardProduct_ResinCard::base_item_list() const {
  // @@protoc_insertion_point(field_list:proto.ShopCardProduct.ResinCard.base_item_list)
  return base_item_list_;
}

// repeated .proto.ItemParam per_day_item_list = 2;
int ShopCardProduct_ResinCard::per_day_item_list_size() const {
  return per_day_item_list_.size();
}
void ShopCardProduct_ResinCard::clear_per_day_item_list() {
  per_day_item_list_.Clear();
}
const ::proto::ItemParam& ShopCardProduct_ResinCard::per_day_item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ShopCardProduct.ResinCard.per_day_item_list)
  return per_day_item_list_.Get(index);
}
::proto::ItemParam* ShopCardProduct_ResinCard::mutable_per_day_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ShopCardProduct.ResinCard.per_day_item_list)
  return per_day_item_list_.Mutable(index);
}
::proto::ItemParam* ShopCardProduct_ResinCard::add_per_day_item_list() {
  // @@protoc_insertion_point(field_add:proto.ShopCardProduct.ResinCard.per_day_item_list)
  return per_day_item_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
ShopCardProduct_ResinCard::mutable_per_day_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ShopCardProduct.ResinCard.per_day_item_list)
  return &per_day_item_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
ShopCardProduct_ResinCard::per_day_item_list() const {
  // @@protoc_insertion_point(field_list:proto.ShopCardProduct.ResinCard.per_day_item_list)
  return per_day_item_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShopCardProduct::kProductIdFieldNumber;
const int ShopCardProduct::kPriceTierFieldNumber;
const int ShopCardProduct::kMcoinBaseFieldNumber;
const int ShopCardProduct::kHcoinPerDayFieldNumber;
const int ShopCardProduct::kDaysFieldNumber;
const int ShopCardProduct::kRemainRewardDaysFieldNumber;
const int ShopCardProduct::kCardProductTypeFieldNumber;
const int ShopCardProduct::kResinCardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShopCardProduct::ShopCardProduct()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ShopCardProduct)
}
ShopCardProduct::ShopCardProduct(const ShopCardProduct& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product_id().size() > 0) {
    product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_id_);
  }
  price_tier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.price_tier().size() > 0) {
    price_tier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_tier_);
  }
  ::memcpy(&mcoin_base_, &from.mcoin_base_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_product_type_) -
    reinterpret_cast<char*>(&mcoin_base_)) + sizeof(card_product_type_));
  clear_has_extra_card_data();
  switch (from.extra_card_data_case()) {
    case kResinCard: {
      mutable_resin_card()->::proto::ShopCardProduct_ResinCard::MergeFrom(from.resin_card());
      break;
    }
    case EXTRA_CARD_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.ShopCardProduct)
}

void ShopCardProduct::SharedCtor() {
  product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_tier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mcoin_base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_product_type_) -
      reinterpret_cast<char*>(&mcoin_base_)) + sizeof(card_product_type_));
  clear_has_extra_card_data();
  _cached_size_ = 0;
}

ShopCardProduct::~ShopCardProduct() {
  // @@protoc_insertion_point(destructor:proto.ShopCardProduct)
  SharedDtor();
}

void ShopCardProduct::SharedDtor() {
  product_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_tier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_extra_card_data()) {
    clear_extra_card_data();
  }
}

void ShopCardProduct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopCardProduct::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShopCardProduct& ShopCardProduct::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShopCardProduct* ShopCardProduct::New(::google::protobuf::Arena* arena) const {
  ShopCardProduct* n = new ShopCardProduct;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShopCardProduct::clear_extra_card_data() {
// @@protoc_insertion_point(one_of_clear_start:proto.ShopCardProduct)
  switch (extra_card_data_case()) {
    case kResinCard: {
      delete extra_card_data_.resin_card_;
      break;
    }
    case EXTRA_CARD_DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXTRA_CARD_DATA_NOT_SET;
}


void ShopCardProduct::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ShopCardProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_tier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mcoin_base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_product_type_) -
      reinterpret_cast<char*>(&mcoin_base_)) + sizeof(card_product_type_));
  clear_extra_card_data();
  _internal_metadata_.Clear();
}

bool ShopCardProduct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ShopCardProduct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string product_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_id().data(), static_cast<int>(this->product_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ShopCardProduct.product_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string price_tier = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price_tier()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->price_tier().data(), static_cast<int>(this->price_tier().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ShopCardProduct.price_tier"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mcoin_base = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcoin_base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hcoin_per_day = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hcoin_per_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 days = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &days_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 remain_reward_days = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remain_reward_days_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_product_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_product_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ShopCardProduct.ResinCard resin_card = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resin_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ShopCardProduct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ShopCardProduct)
  return false;
#undef DO_
}

void ShopCardProduct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ShopCardProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_id = 1;
  if (this->product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_id().data(), static_cast<int>(this->product_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ShopCardProduct.product_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->product_id(), output);
  }

  // string price_tier = 2;
  if (this->price_tier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->price_tier().data(), static_cast<int>(this->price_tier().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ShopCardProduct.price_tier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->price_tier(), output);
  }

  // uint32 mcoin_base = 3;
  if (this->mcoin_base() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mcoin_base(), output);
  }

  // uint32 hcoin_per_day = 4;
  if (this->hcoin_per_day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hcoin_per_day(), output);
  }

  // uint32 days = 5;
  if (this->days() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->days(), output);
  }

  // uint32 remain_reward_days = 6;
  if (this->remain_reward_days() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->remain_reward_days(), output);
  }

  // uint32 card_product_type = 7;
  if (this->card_product_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->card_product_type(), output);
  }

  // .proto.ShopCardProduct.ResinCard resin_card = 101;
  if (has_resin_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *extra_card_data_.resin_card_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ShopCardProduct)
}

::google::protobuf::uint8* ShopCardProduct::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ShopCardProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_id = 1;
  if (this->product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_id().data(), static_cast<int>(this->product_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ShopCardProduct.product_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->product_id(), target);
  }

  // string price_tier = 2;
  if (this->price_tier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->price_tier().data(), static_cast<int>(this->price_tier().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ShopCardProduct.price_tier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->price_tier(), target);
  }

  // uint32 mcoin_base = 3;
  if (this->mcoin_base() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mcoin_base(), target);
  }

  // uint32 hcoin_per_day = 4;
  if (this->hcoin_per_day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hcoin_per_day(), target);
  }

  // uint32 days = 5;
  if (this->days() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->days(), target);
  }

  // uint32 remain_reward_days = 6;
  if (this->remain_reward_days() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->remain_reward_days(), target);
  }

  // uint32 card_product_type = 7;
  if (this->card_product_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->card_product_type(), target);
  }

  // .proto.ShopCardProduct.ResinCard resin_card = 101;
  if (has_resin_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        101, *extra_card_data_.resin_card_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ShopCardProduct)
  return target;
}

size_t ShopCardProduct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ShopCardProduct)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string product_id = 1;
  if (this->product_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_id());
  }

  // string price_tier = 2;
  if (this->price_tier().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->price_tier());
  }

  // uint32 mcoin_base = 3;
  if (this->mcoin_base() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mcoin_base());
  }

  // uint32 hcoin_per_day = 4;
  if (this->hcoin_per_day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hcoin_per_day());
  }

  // uint32 days = 5;
  if (this->days() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->days());
  }

  // uint32 remain_reward_days = 6;
  if (this->remain_reward_days() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remain_reward_days());
  }

  // uint32 card_product_type = 7;
  if (this->card_product_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_product_type());
  }

  switch (extra_card_data_case()) {
    // .proto.ShopCardProduct.ResinCard resin_card = 101;
    case kResinCard: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *extra_card_data_.resin_card_);
      break;
    }
    case EXTRA_CARD_DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopCardProduct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ShopCardProduct)
  GOOGLE_DCHECK_NE(&from, this);
  const ShopCardProduct* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShopCardProduct>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ShopCardProduct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ShopCardProduct)
    MergeFrom(*source);
  }
}

void ShopCardProduct::MergeFrom(const ShopCardProduct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ShopCardProduct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.product_id().size() > 0) {

    product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_id_);
  }
  if (from.price_tier().size() > 0) {

    price_tier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_tier_);
  }
  if (from.mcoin_base() != 0) {
    set_mcoin_base(from.mcoin_base());
  }
  if (from.hcoin_per_day() != 0) {
    set_hcoin_per_day(from.hcoin_per_day());
  }
  if (from.days() != 0) {
    set_days(from.days());
  }
  if (from.remain_reward_days() != 0) {
    set_remain_reward_days(from.remain_reward_days());
  }
  if (from.card_product_type() != 0) {
    set_card_product_type(from.card_product_type());
  }
  switch (from.extra_card_data_case()) {
    case kResinCard: {
      mutable_resin_card()->::proto::ShopCardProduct_ResinCard::MergeFrom(from.resin_card());
      break;
    }
    case EXTRA_CARD_DATA_NOT_SET: {
      break;
    }
  }
}

void ShopCardProduct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ShopCardProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopCardProduct::CopyFrom(const ShopCardProduct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ShopCardProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopCardProduct::IsInitialized() const {
  return true;
}

void ShopCardProduct::Swap(ShopCardProduct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShopCardProduct::InternalSwap(ShopCardProduct* other) {
  using std::swap;
  product_id_.Swap(&other->product_id_);
  price_tier_.Swap(&other->price_tier_);
  swap(mcoin_base_, other->mcoin_base_);
  swap(hcoin_per_day_, other->hcoin_per_day_);
  swap(days_, other->days_);
  swap(remain_reward_days_, other->remain_reward_days_);
  swap(card_product_type_, other->card_product_type_);
  swap(extra_card_data_, other->extra_card_data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShopCardProduct::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShopCardProduct

// string product_id = 1;
void ShopCardProduct::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ShopCardProduct::product_id() const {
  // @@protoc_insertion_point(field_get:proto.ShopCardProduct.product_id)
  return product_id_.GetNoArena();
}
void ShopCardProduct::set_product_id(const ::std::string& value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ShopCardProduct.product_id)
}
#if LANG_CXX11
void ShopCardProduct::set_product_id(::std::string&& value) {
  
  product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ShopCardProduct.product_id)
}
#endif
void ShopCardProduct::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ShopCardProduct.product_id)
}
void ShopCardProduct::set_product_id(const char* value, size_t size) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ShopCardProduct.product_id)
}
::std::string* ShopCardProduct::mutable_product_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.ShopCardProduct.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShopCardProduct::release_product_id() {
  // @@protoc_insertion_point(field_release:proto.ShopCardProduct.product_id)
  
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShopCardProduct::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    
  } else {
    
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:proto.ShopCardProduct.product_id)
}

// string price_tier = 2;
void ShopCardProduct::clear_price_tier() {
  price_tier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ShopCardProduct::price_tier() const {
  // @@protoc_insertion_point(field_get:proto.ShopCardProduct.price_tier)
  return price_tier_.GetNoArena();
}
void ShopCardProduct::set_price_tier(const ::std::string& value) {
  
  price_tier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ShopCardProduct.price_tier)
}
#if LANG_CXX11
void ShopCardProduct::set_price_tier(::std::string&& value) {
  
  price_tier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ShopCardProduct.price_tier)
}
#endif
void ShopCardProduct::set_price_tier(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  price_tier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ShopCardProduct.price_tier)
}
void ShopCardProduct::set_price_tier(const char* value, size_t size) {
  
  price_tier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ShopCardProduct.price_tier)
}
::std::string* ShopCardProduct::mutable_price_tier() {
  
  // @@protoc_insertion_point(field_mutable:proto.ShopCardProduct.price_tier)
  return price_tier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShopCardProduct::release_price_tier() {
  // @@protoc_insertion_point(field_release:proto.ShopCardProduct.price_tier)
  
  return price_tier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShopCardProduct::set_allocated_price_tier(::std::string* price_tier) {
  if (price_tier != NULL) {
    
  } else {
    
  }
  price_tier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price_tier);
  // @@protoc_insertion_point(field_set_allocated:proto.ShopCardProduct.price_tier)
}

// uint32 mcoin_base = 3;
void ShopCardProduct::clear_mcoin_base() {
  mcoin_base_ = 0u;
}
::google::protobuf::uint32 ShopCardProduct::mcoin_base() const {
  // @@protoc_insertion_point(field_get:proto.ShopCardProduct.mcoin_base)
  return mcoin_base_;
}
void ShopCardProduct::set_mcoin_base(::google::protobuf::uint32 value) {
  
  mcoin_base_ = value;
  // @@protoc_insertion_point(field_set:proto.ShopCardProduct.mcoin_base)
}

// uint32 hcoin_per_day = 4;
void ShopCardProduct::clear_hcoin_per_day() {
  hcoin_per_day_ = 0u;
}
::google::protobuf::uint32 ShopCardProduct::hcoin_per_day() const {
  // @@protoc_insertion_point(field_get:proto.ShopCardProduct.hcoin_per_day)
  return hcoin_per_day_;
}
void ShopCardProduct::set_hcoin_per_day(::google::protobuf::uint32 value) {
  
  hcoin_per_day_ = value;
  // @@protoc_insertion_point(field_set:proto.ShopCardProduct.hcoin_per_day)
}

// uint32 days = 5;
void ShopCardProduct::clear_days() {
  days_ = 0u;
}
::google::protobuf::uint32 ShopCardProduct::days() const {
  // @@protoc_insertion_point(field_get:proto.ShopCardProduct.days)
  return days_;
}
void ShopCardProduct::set_days(::google::protobuf::uint32 value) {
  
  days_ = value;
  // @@protoc_insertion_point(field_set:proto.ShopCardProduct.days)
}

// uint32 remain_reward_days = 6;
void ShopCardProduct::clear_remain_reward_days() {
  remain_reward_days_ = 0u;
}
::google::protobuf::uint32 ShopCardProduct::remain_reward_days() const {
  // @@protoc_insertion_point(field_get:proto.ShopCardProduct.remain_reward_days)
  return remain_reward_days_;
}
void ShopCardProduct::set_remain_reward_days(::google::protobuf::uint32 value) {
  
  remain_reward_days_ = value;
  // @@protoc_insertion_point(field_set:proto.ShopCardProduct.remain_reward_days)
}

// uint32 card_product_type = 7;
void ShopCardProduct::clear_card_product_type() {
  card_product_type_ = 0u;
}
::google::protobuf::uint32 ShopCardProduct::card_product_type() const {
  // @@protoc_insertion_point(field_get:proto.ShopCardProduct.card_product_type)
  return card_product_type_;
}
void ShopCardProduct::set_card_product_type(::google::protobuf::uint32 value) {
  
  card_product_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ShopCardProduct.card_product_type)
}

// .proto.ShopCardProduct.ResinCard resin_card = 101;
bool ShopCardProduct::has_resin_card() const {
  return extra_card_data_case() == kResinCard;
}
void ShopCardProduct::set_has_resin_card() {
  _oneof_case_[0] = kResinCard;
}
void ShopCardProduct::clear_resin_card() {
  if (has_resin_card()) {
    delete extra_card_data_.resin_card_;
    clear_has_extra_card_data();
  }
}
 const ::proto::ShopCardProduct_ResinCard& ShopCardProduct::resin_card() const {
  // @@protoc_insertion_point(field_get:proto.ShopCardProduct.resin_card)
  return has_resin_card()
      ? *extra_card_data_.resin_card_
      : ::proto::ShopCardProduct_ResinCard::default_instance();
}
::proto::ShopCardProduct_ResinCard* ShopCardProduct::mutable_resin_card() {
  if (!has_resin_card()) {
    clear_extra_card_data();
    set_has_resin_card();
    extra_card_data_.resin_card_ = new ::proto::ShopCardProduct_ResinCard;
  }
  // @@protoc_insertion_point(field_mutable:proto.ShopCardProduct.resin_card)
  return extra_card_data_.resin_card_;
}
::proto::ShopCardProduct_ResinCard* ShopCardProduct::release_resin_card() {
  // @@protoc_insertion_point(field_release:proto.ShopCardProduct.resin_card)
  if (has_resin_card()) {
    clear_has_extra_card_data();
    ::proto::ShopCardProduct_ResinCard* temp = extra_card_data_.resin_card_;
    extra_card_data_.resin_card_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ShopCardProduct::set_allocated_resin_card(::proto::ShopCardProduct_ResinCard* resin_card) {
  clear_extra_card_data();
  if (resin_card) {
    set_has_resin_card();
    extra_card_data_.resin_card_ = resin_card;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ShopCardProduct.resin_card)
}

bool ShopCardProduct::has_extra_card_data() const {
  return extra_card_data_case() != EXTRA_CARD_DATA_NOT_SET;
}
void ShopCardProduct::clear_has_extra_card_data() {
  _oneof_case_[0] = EXTRA_CARD_DATA_NOT_SET;
}
ShopCardProduct::ExtraCardDataCase ShopCardProduct::extra_card_data_case() const {
  return ShopCardProduct::ExtraCardDataCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayProduct::kProductIdFieldNumber;
const int PlayProduct::kPriceTierFieldNumber;
const int PlayProduct::kScheduleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayProduct::PlayProduct()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PlayProduct)
}
PlayProduct::PlayProduct(const PlayProduct& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product_id().size() > 0) {
    product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_id_);
  }
  price_tier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.price_tier().size() > 0) {
    price_tier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_tier_);
  }
  schedule_id_ = from.schedule_id_;
  // @@protoc_insertion_point(copy_constructor:proto.PlayProduct)
}

void PlayProduct::SharedCtor() {
  product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_tier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schedule_id_ = 0u;
  _cached_size_ = 0;
}

PlayProduct::~PlayProduct() {
  // @@protoc_insertion_point(destructor:proto.PlayProduct)
  SharedDtor();
}

void PlayProduct::SharedDtor() {
  product_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_tier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayProduct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayProduct::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayProduct& PlayProduct::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayProduct* PlayProduct::New(::google::protobuf::Arena* arena) const {
  PlayProduct* n = new PlayProduct;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayProduct::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PlayProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_tier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schedule_id_ = 0u;
  _internal_metadata_.Clear();
}

bool PlayProduct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PlayProduct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string product_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_id().data(), static_cast<int>(this->product_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.PlayProduct.product_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string price_tier = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price_tier()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->price_tier().data(), static_cast<int>(this->price_tier().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.PlayProduct.price_tier"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 schedule_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schedule_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PlayProduct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PlayProduct)
  return false;
#undef DO_
}

void PlayProduct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PlayProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_id = 1;
  if (this->product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_id().data(), static_cast<int>(this->product_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.PlayProduct.product_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->product_id(), output);
  }

  // string price_tier = 2;
  if (this->price_tier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->price_tier().data(), static_cast<int>(this->price_tier().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.PlayProduct.price_tier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->price_tier(), output);
  }

  // uint32 schedule_id = 3;
  if (this->schedule_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->schedule_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PlayProduct)
}

::google::protobuf::uint8* PlayProduct::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PlayProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_id = 1;
  if (this->product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_id().data(), static_cast<int>(this->product_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.PlayProduct.product_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->product_id(), target);
  }

  // string price_tier = 2;
  if (this->price_tier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->price_tier().data(), static_cast<int>(this->price_tier().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.PlayProduct.price_tier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->price_tier(), target);
  }

  // uint32 schedule_id = 3;
  if (this->schedule_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->schedule_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PlayProduct)
  return target;
}

size_t PlayProduct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PlayProduct)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string product_id = 1;
  if (this->product_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_id());
  }

  // string price_tier = 2;
  if (this->price_tier().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->price_tier());
  }

  // uint32 schedule_id = 3;
  if (this->schedule_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->schedule_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayProduct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PlayProduct)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayProduct* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayProduct>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PlayProduct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PlayProduct)
    MergeFrom(*source);
  }
}

void PlayProduct::MergeFrom(const PlayProduct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PlayProduct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.product_id().size() > 0) {

    product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_id_);
  }
  if (from.price_tier().size() > 0) {

    price_tier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_tier_);
  }
  if (from.schedule_id() != 0) {
    set_schedule_id(from.schedule_id());
  }
}

void PlayProduct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PlayProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayProduct::CopyFrom(const PlayProduct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PlayProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayProduct::IsInitialized() const {
  return true;
}

void PlayProduct::Swap(PlayProduct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayProduct::InternalSwap(PlayProduct* other) {
  using std::swap;
  product_id_.Swap(&other->product_id_);
  price_tier_.Swap(&other->price_tier_);
  swap(schedule_id_, other->schedule_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayProduct::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayProduct

// string product_id = 1;
void PlayProduct::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlayProduct::product_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayProduct.product_id)
  return product_id_.GetNoArena();
}
void PlayProduct::set_product_id(const ::std::string& value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.PlayProduct.product_id)
}
#if LANG_CXX11
void PlayProduct::set_product_id(::std::string&& value) {
  
  product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.PlayProduct.product_id)
}
#endif
void PlayProduct::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PlayProduct.product_id)
}
void PlayProduct::set_product_id(const char* value, size_t size) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PlayProduct.product_id)
}
::std::string* PlayProduct::mutable_product_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.PlayProduct.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayProduct::release_product_id() {
  // @@protoc_insertion_point(field_release:proto.PlayProduct.product_id)
  
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayProduct::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    
  } else {
    
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:proto.PlayProduct.product_id)
}

// string price_tier = 2;
void PlayProduct::clear_price_tier() {
  price_tier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlayProduct::price_tier() const {
  // @@protoc_insertion_point(field_get:proto.PlayProduct.price_tier)
  return price_tier_.GetNoArena();
}
void PlayProduct::set_price_tier(const ::std::string& value) {
  
  price_tier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.PlayProduct.price_tier)
}
#if LANG_CXX11
void PlayProduct::set_price_tier(::std::string&& value) {
  
  price_tier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.PlayProduct.price_tier)
}
#endif
void PlayProduct::set_price_tier(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  price_tier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PlayProduct.price_tier)
}
void PlayProduct::set_price_tier(const char* value, size_t size) {
  
  price_tier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PlayProduct.price_tier)
}
::std::string* PlayProduct::mutable_price_tier() {
  
  // @@protoc_insertion_point(field_mutable:proto.PlayProduct.price_tier)
  return price_tier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayProduct::release_price_tier() {
  // @@protoc_insertion_point(field_release:proto.PlayProduct.price_tier)
  
  return price_tier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayProduct::set_allocated_price_tier(::std::string* price_tier) {
  if (price_tier != NULL) {
    
  } else {
    
  }
  price_tier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price_tier);
  // @@protoc_insertion_point(field_set_allocated:proto.PlayProduct.price_tier)
}

// uint32 schedule_id = 3;
void PlayProduct::clear_schedule_id() {
  schedule_id_ = 0u;
}
::google::protobuf::uint32 PlayProduct::schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayProduct.schedule_id)
  return schedule_id_;
}
void PlayProduct::set_schedule_id(::google::protobuf::uint32 value) {
  
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayProduct.schedule_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShopConcertProduct::kProductIdFieldNumber;
const int ShopConcertProduct::kPriceTierFieldNumber;
const int ShopConcertProduct::kObtainCountFieldNumber;
const int ShopConcertProduct::kObtainLimitFieldNumber;
const int ShopConcertProduct::kBeginTimeFieldNumber;
const int ShopConcertProduct::kEndTimeFieldNumber;
const int ShopConcertProduct::kBuyTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShopConcertProduct::ShopConcertProduct()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ShopConcertProduct)
}
ShopConcertProduct::ShopConcertProduct(const ShopConcertProduct& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product_id().size() > 0) {
    product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_id_);
  }
  price_tier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.price_tier().size() > 0) {
    price_tier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_tier_);
  }
  ::memcpy(&obtain_count_, &from.obtain_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&buy_times_) -
    reinterpret_cast<char*>(&obtain_count_)) + sizeof(buy_times_));
  // @@protoc_insertion_point(copy_constructor:proto.ShopConcertProduct)
}

void ShopConcertProduct::SharedCtor() {
  product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_tier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&obtain_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buy_times_) -
      reinterpret_cast<char*>(&obtain_count_)) + sizeof(buy_times_));
  _cached_size_ = 0;
}

ShopConcertProduct::~ShopConcertProduct() {
  // @@protoc_insertion_point(destructor:proto.ShopConcertProduct)
  SharedDtor();
}

void ShopConcertProduct::SharedDtor() {
  product_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_tier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ShopConcertProduct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopConcertProduct::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShopConcertProduct& ShopConcertProduct::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShopConcertProduct* ShopConcertProduct::New(::google::protobuf::Arena* arena) const {
  ShopConcertProduct* n = new ShopConcertProduct;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShopConcertProduct::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ShopConcertProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_tier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&obtain_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buy_times_) -
      reinterpret_cast<char*>(&obtain_count_)) + sizeof(buy_times_));
  _internal_metadata_.Clear();
}

bool ShopConcertProduct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ShopConcertProduct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string product_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_id().data(), static_cast<int>(this->product_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ShopConcertProduct.product_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string price_tier = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price_tier()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->price_tier().data(), static_cast<int>(this->price_tier().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ShopConcertProduct.price_tier"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 obtain_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obtain_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 obtain_limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obtain_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 begin_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 buy_times = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ShopConcertProduct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ShopConcertProduct)
  return false;
#undef DO_
}

void ShopConcertProduct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ShopConcertProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_id = 1;
  if (this->product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_id().data(), static_cast<int>(this->product_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ShopConcertProduct.product_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->product_id(), output);
  }

  // string price_tier = 2;
  if (this->price_tier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->price_tier().data(), static_cast<int>(this->price_tier().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ShopConcertProduct.price_tier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->price_tier(), output);
  }

  // uint32 obtain_count = 3;
  if (this->obtain_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->obtain_count(), output);
  }

  // uint32 obtain_limit = 4;
  if (this->obtain_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->obtain_limit(), output);
  }

  // uint32 begin_time = 5;
  if (this->begin_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->begin_time(), output);
  }

  // uint32 end_time = 6;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->end_time(), output);
  }

  // uint32 buy_times = 7;
  if (this->buy_times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->buy_times(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ShopConcertProduct)
}

::google::protobuf::uint8* ShopConcertProduct::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ShopConcertProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_id = 1;
  if (this->product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_id().data(), static_cast<int>(this->product_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ShopConcertProduct.product_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->product_id(), target);
  }

  // string price_tier = 2;
  if (this->price_tier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->price_tier().data(), static_cast<int>(this->price_tier().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ShopConcertProduct.price_tier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->price_tier(), target);
  }

  // uint32 obtain_count = 3;
  if (this->obtain_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->obtain_count(), target);
  }

  // uint32 obtain_limit = 4;
  if (this->obtain_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->obtain_limit(), target);
  }

  // uint32 begin_time = 5;
  if (this->begin_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->begin_time(), target);
  }

  // uint32 end_time = 6;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->end_time(), target);
  }

  // uint32 buy_times = 7;
  if (this->buy_times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->buy_times(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ShopConcertProduct)
  return target;
}

size_t ShopConcertProduct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ShopConcertProduct)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string product_id = 1;
  if (this->product_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_id());
  }

  // string price_tier = 2;
  if (this->price_tier().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->price_tier());
  }

  // uint32 obtain_count = 3;
  if (this->obtain_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->obtain_count());
  }

  // uint32 obtain_limit = 4;
  if (this->obtain_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->obtain_limit());
  }

  // uint32 begin_time = 5;
  if (this->begin_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->begin_time());
  }

  // uint32 end_time = 6;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  // uint32 buy_times = 7;
  if (this->buy_times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buy_times());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopConcertProduct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ShopConcertProduct)
  GOOGLE_DCHECK_NE(&from, this);
  const ShopConcertProduct* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShopConcertProduct>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ShopConcertProduct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ShopConcertProduct)
    MergeFrom(*source);
  }
}

void ShopConcertProduct::MergeFrom(const ShopConcertProduct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ShopConcertProduct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.product_id().size() > 0) {

    product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_id_);
  }
  if (from.price_tier().size() > 0) {

    price_tier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_tier_);
  }
  if (from.obtain_count() != 0) {
    set_obtain_count(from.obtain_count());
  }
  if (from.obtain_limit() != 0) {
    set_obtain_limit(from.obtain_limit());
  }
  if (from.begin_time() != 0) {
    set_begin_time(from.begin_time());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
  if (from.buy_times() != 0) {
    set_buy_times(from.buy_times());
  }
}

void ShopConcertProduct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ShopConcertProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopConcertProduct::CopyFrom(const ShopConcertProduct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ShopConcertProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopConcertProduct::IsInitialized() const {
  return true;
}

void ShopConcertProduct::Swap(ShopConcertProduct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShopConcertProduct::InternalSwap(ShopConcertProduct* other) {
  using std::swap;
  product_id_.Swap(&other->product_id_);
  price_tier_.Swap(&other->price_tier_);
  swap(obtain_count_, other->obtain_count_);
  swap(obtain_limit_, other->obtain_limit_);
  swap(begin_time_, other->begin_time_);
  swap(end_time_, other->end_time_);
  swap(buy_times_, other->buy_times_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShopConcertProduct::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShopConcertProduct

// string product_id = 1;
void ShopConcertProduct::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ShopConcertProduct::product_id() const {
  // @@protoc_insertion_point(field_get:proto.ShopConcertProduct.product_id)
  return product_id_.GetNoArena();
}
void ShopConcertProduct::set_product_id(const ::std::string& value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ShopConcertProduct.product_id)
}
#if LANG_CXX11
void ShopConcertProduct::set_product_id(::std::string&& value) {
  
  product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ShopConcertProduct.product_id)
}
#endif
void ShopConcertProduct::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ShopConcertProduct.product_id)
}
void ShopConcertProduct::set_product_id(const char* value, size_t size) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ShopConcertProduct.product_id)
}
::std::string* ShopConcertProduct::mutable_product_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.ShopConcertProduct.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShopConcertProduct::release_product_id() {
  // @@protoc_insertion_point(field_release:proto.ShopConcertProduct.product_id)
  
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShopConcertProduct::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    
  } else {
    
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:proto.ShopConcertProduct.product_id)
}

// string price_tier = 2;
void ShopConcertProduct::clear_price_tier() {
  price_tier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ShopConcertProduct::price_tier() const {
  // @@protoc_insertion_point(field_get:proto.ShopConcertProduct.price_tier)
  return price_tier_.GetNoArena();
}
void ShopConcertProduct::set_price_tier(const ::std::string& value) {
  
  price_tier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ShopConcertProduct.price_tier)
}
#if LANG_CXX11
void ShopConcertProduct::set_price_tier(::std::string&& value) {
  
  price_tier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ShopConcertProduct.price_tier)
}
#endif
void ShopConcertProduct::set_price_tier(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  price_tier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ShopConcertProduct.price_tier)
}
void ShopConcertProduct::set_price_tier(const char* value, size_t size) {
  
  price_tier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ShopConcertProduct.price_tier)
}
::std::string* ShopConcertProduct::mutable_price_tier() {
  
  // @@protoc_insertion_point(field_mutable:proto.ShopConcertProduct.price_tier)
  return price_tier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShopConcertProduct::release_price_tier() {
  // @@protoc_insertion_point(field_release:proto.ShopConcertProduct.price_tier)
  
  return price_tier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShopConcertProduct::set_allocated_price_tier(::std::string* price_tier) {
  if (price_tier != NULL) {
    
  } else {
    
  }
  price_tier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price_tier);
  // @@protoc_insertion_point(field_set_allocated:proto.ShopConcertProduct.price_tier)
}

// uint32 obtain_count = 3;
void ShopConcertProduct::clear_obtain_count() {
  obtain_count_ = 0u;
}
::google::protobuf::uint32 ShopConcertProduct::obtain_count() const {
  // @@protoc_insertion_point(field_get:proto.ShopConcertProduct.obtain_count)
  return obtain_count_;
}
void ShopConcertProduct::set_obtain_count(::google::protobuf::uint32 value) {
  
  obtain_count_ = value;
  // @@protoc_insertion_point(field_set:proto.ShopConcertProduct.obtain_count)
}

// uint32 obtain_limit = 4;
void ShopConcertProduct::clear_obtain_limit() {
  obtain_limit_ = 0u;
}
::google::protobuf::uint32 ShopConcertProduct::obtain_limit() const {
  // @@protoc_insertion_point(field_get:proto.ShopConcertProduct.obtain_limit)
  return obtain_limit_;
}
void ShopConcertProduct::set_obtain_limit(::google::protobuf::uint32 value) {
  
  obtain_limit_ = value;
  // @@protoc_insertion_point(field_set:proto.ShopConcertProduct.obtain_limit)
}

// uint32 begin_time = 5;
void ShopConcertProduct::clear_begin_time() {
  begin_time_ = 0u;
}
::google::protobuf::uint32 ShopConcertProduct::begin_time() const {
  // @@protoc_insertion_point(field_get:proto.ShopConcertProduct.begin_time)
  return begin_time_;
}
void ShopConcertProduct::set_begin_time(::google::protobuf::uint32 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ShopConcertProduct.begin_time)
}

// uint32 end_time = 6;
void ShopConcertProduct::clear_end_time() {
  end_time_ = 0u;
}
::google::protobuf::uint32 ShopConcertProduct::end_time() const {
  // @@protoc_insertion_point(field_get:proto.ShopConcertProduct.end_time)
  return end_time_;
}
void ShopConcertProduct::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ShopConcertProduct.end_time)
}

// uint32 buy_times = 7;
void ShopConcertProduct::clear_buy_times() {
  buy_times_ = 0u;
}
::google::protobuf::uint32 ShopConcertProduct::buy_times() const {
  // @@protoc_insertion_point(field_get:proto.ShopConcertProduct.buy_times)
  return buy_times_;
}
void ShopConcertProduct::set_buy_times(::google::protobuf::uint32 value) {
  
  buy_times_ = value;
  // @@protoc_insertion_point(field_set:proto.ShopConcertProduct.buy_times)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashedString::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashedString::HashedString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HashedString)
}
HashedString::HashedString(const HashedString& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_ = from.hash_;
  // @@protoc_insertion_point(copy_constructor:proto.HashedString)
}

void HashedString::SharedCtor() {
  hash_ = 0u;
  _cached_size_ = 0;
}

HashedString::~HashedString() {
  // @@protoc_insertion_point(destructor:proto.HashedString)
  SharedDtor();
}

void HashedString::SharedDtor() {
}

void HashedString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashedString::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HashedString& HashedString::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

HashedString* HashedString::New(::google::protobuf::Arena* arena) const {
  HashedString* n = new HashedString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashedString::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HashedString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_ = 0u;
  _internal_metadata_.Clear();
}

bool HashedString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HashedString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HashedString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HashedString)
  return false;
#undef DO_
}

void HashedString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HashedString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hash = 1;
  if (this->hash() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hash(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HashedString)
}

::google::protobuf::uint8* HashedString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HashedString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hash = 1;
  if (this->hash() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hash(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HashedString)
  return target;
}

size_t HashedString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HashedString)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 hash = 1;
  if (this->hash() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashedString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HashedString)
  GOOGLE_DCHECK_NE(&from, this);
  const HashedString* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HashedString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HashedString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HashedString)
    MergeFrom(*source);
  }
}

void HashedString::MergeFrom(const HashedString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HashedString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash() != 0) {
    set_hash(from.hash());
  }
}

void HashedString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HashedString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashedString::CopyFrom(const HashedString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HashedString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashedString::IsInitialized() const {
  return true;
}

void HashedString::Swap(HashedString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashedString::InternalSwap(HashedString* other) {
  using std::swap;
  swap(hash_, other->hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashedString::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashedString

// uint32 hash = 1;
void HashedString::clear_hash() {
  hash_ = 0u;
}
::google::protobuf::uint32 HashedString::hash() const {
  // @@protoc_insertion_point(field_get:proto.HashedString.hash)
  return hash_;
}
void HashedString::set_hash(::google::protobuf::uint32 value) {
  
  hash_ = value;
  // @@protoc_insertion_point(field_set:proto.HashedString.hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayTeamEntityInfo::kEntityIdFieldNumber;
const int PlayTeamEntityInfo::kPlayerUidFieldNumber;
const int PlayTeamEntityInfo::kAuthorityPeerIdFieldNumber;
const int PlayTeamEntityInfo::kGadgetConfigIdFieldNumber;
const int PlayTeamEntityInfo::kAbilityInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayTeamEntityInfo::PlayTeamEntityInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PlayTeamEntityInfo)
}
PlayTeamEntityInfo::PlayTeamEntityInfo(const PlayTeamEntityInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ability_info()) {
    ability_info_ = new ::proto::AbilitySyncStateInfo(*from.ability_info_);
  } else {
    ability_info_ = NULL;
  }
  ::memcpy(&entity_id_, &from.entity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gadget_config_id_) -
    reinterpret_cast<char*>(&entity_id_)) + sizeof(gadget_config_id_));
  // @@protoc_insertion_point(copy_constructor:proto.PlayTeamEntityInfo)
}

void PlayTeamEntityInfo::SharedCtor() {
  ::memset(&ability_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gadget_config_id_) -
      reinterpret_cast<char*>(&ability_info_)) + sizeof(gadget_config_id_));
  _cached_size_ = 0;
}

PlayTeamEntityInfo::~PlayTeamEntityInfo() {
  // @@protoc_insertion_point(destructor:proto.PlayTeamEntityInfo)
  SharedDtor();
}

void PlayTeamEntityInfo::SharedDtor() {
  if (this != internal_default_instance()) delete ability_info_;
}

void PlayTeamEntityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayTeamEntityInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayTeamEntityInfo& PlayTeamEntityInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayTeamEntityInfo* PlayTeamEntityInfo::New(::google::protobuf::Arena* arena) const {
  PlayTeamEntityInfo* n = new PlayTeamEntityInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayTeamEntityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PlayTeamEntityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && ability_info_ != NULL) {
    delete ability_info_;
  }
  ability_info_ = NULL;
  ::memset(&entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gadget_config_id_) -
      reinterpret_cast<char*>(&entity_id_)) + sizeof(gadget_config_id_));
  _internal_metadata_.Clear();
}

bool PlayTeamEntityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PlayTeamEntityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 entity_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 player_uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 authority_peer_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &authority_peer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gadget_config_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gadget_config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AbilitySyncStateInfo ability_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ability_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PlayTeamEntityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PlayTeamEntityInfo)
  return false;
#undef DO_
}

void PlayTeamEntityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PlayTeamEntityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entity_id = 1;
  if (this->entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->entity_id(), output);
  }

  // uint32 player_uid = 2;
  if (this->player_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_uid(), output);
  }

  // uint32 authority_peer_id = 3;
  if (this->authority_peer_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->authority_peer_id(), output);
  }

  // uint32 gadget_config_id = 5;
  if (this->gadget_config_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gadget_config_id(), output);
  }

  // .proto.AbilitySyncStateInfo ability_info = 6;
  if (this->has_ability_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ability_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PlayTeamEntityInfo)
}

::google::protobuf::uint8* PlayTeamEntityInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PlayTeamEntityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entity_id = 1;
  if (this->entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->entity_id(), target);
  }

  // uint32 player_uid = 2;
  if (this->player_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_uid(), target);
  }

  // uint32 authority_peer_id = 3;
  if (this->authority_peer_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->authority_peer_id(), target);
  }

  // uint32 gadget_config_id = 5;
  if (this->gadget_config_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gadget_config_id(), target);
  }

  // .proto.AbilitySyncStateInfo ability_info = 6;
  if (this->has_ability_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->ability_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PlayTeamEntityInfo)
  return target;
}

size_t PlayTeamEntityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PlayTeamEntityInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.AbilitySyncStateInfo ability_info = 6;
  if (this->has_ability_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ability_info_);
  }

  // uint32 entity_id = 1;
  if (this->entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->entity_id());
  }

  // uint32 player_uid = 2;
  if (this->player_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_uid());
  }

  // uint32 authority_peer_id = 3;
  if (this->authority_peer_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->authority_peer_id());
  }

  // uint32 gadget_config_id = 5;
  if (this->gadget_config_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gadget_config_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayTeamEntityInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PlayTeamEntityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayTeamEntityInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayTeamEntityInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PlayTeamEntityInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PlayTeamEntityInfo)
    MergeFrom(*source);
  }
}

void PlayTeamEntityInfo::MergeFrom(const PlayTeamEntityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PlayTeamEntityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ability_info()) {
    mutable_ability_info()->::proto::AbilitySyncStateInfo::MergeFrom(from.ability_info());
  }
  if (from.entity_id() != 0) {
    set_entity_id(from.entity_id());
  }
  if (from.player_uid() != 0) {
    set_player_uid(from.player_uid());
  }
  if (from.authority_peer_id() != 0) {
    set_authority_peer_id(from.authority_peer_id());
  }
  if (from.gadget_config_id() != 0) {
    set_gadget_config_id(from.gadget_config_id());
  }
}

void PlayTeamEntityInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PlayTeamEntityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayTeamEntityInfo::CopyFrom(const PlayTeamEntityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PlayTeamEntityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayTeamEntityInfo::IsInitialized() const {
  return true;
}

void PlayTeamEntityInfo::Swap(PlayTeamEntityInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayTeamEntityInfo::InternalSwap(PlayTeamEntityInfo* other) {
  using std::swap;
  swap(ability_info_, other->ability_info_);
  swap(entity_id_, other->entity_id_);
  swap(player_uid_, other->player_uid_);
  swap(authority_peer_id_, other->authority_peer_id_);
  swap(gadget_config_id_, other->gadget_config_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayTeamEntityInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayTeamEntityInfo

// uint32 entity_id = 1;
void PlayTeamEntityInfo::clear_entity_id() {
  entity_id_ = 0u;
}
::google::protobuf::uint32 PlayTeamEntityInfo::entity_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayTeamEntityInfo.entity_id)
  return entity_id_;
}
void PlayTeamEntityInfo::set_entity_id(::google::protobuf::uint32 value) {
  
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayTeamEntityInfo.entity_id)
}

// uint32 player_uid = 2;
void PlayTeamEntityInfo::clear_player_uid() {
  player_uid_ = 0u;
}
::google::protobuf::uint32 PlayTeamEntityInfo::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.PlayTeamEntityInfo.player_uid)
  return player_uid_;
}
void PlayTeamEntityInfo::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayTeamEntityInfo.player_uid)
}

// uint32 authority_peer_id = 3;
void PlayTeamEntityInfo::clear_authority_peer_id() {
  authority_peer_id_ = 0u;
}
::google::protobuf::uint32 PlayTeamEntityInfo::authority_peer_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayTeamEntityInfo.authority_peer_id)
  return authority_peer_id_;
}
void PlayTeamEntityInfo::set_authority_peer_id(::google::protobuf::uint32 value) {
  
  authority_peer_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayTeamEntityInfo.authority_peer_id)
}

// uint32 gadget_config_id = 5;
void PlayTeamEntityInfo::clear_gadget_config_id() {
  gadget_config_id_ = 0u;
}
::google::protobuf::uint32 PlayTeamEntityInfo::gadget_config_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayTeamEntityInfo.gadget_config_id)
  return gadget_config_id_;
}
void PlayTeamEntityInfo::set_gadget_config_id(::google::protobuf::uint32 value) {
  
  gadget_config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayTeamEntityInfo.gadget_config_id)
}

// .proto.AbilitySyncStateInfo ability_info = 6;
bool PlayTeamEntityInfo::has_ability_info() const {
  return this != internal_default_instance() && ability_info_ != NULL;
}
void PlayTeamEntityInfo::clear_ability_info() {
  if (GetArenaNoVirtual() == NULL && ability_info_ != NULL) delete ability_info_;
  ability_info_ = NULL;
}
const ::proto::AbilitySyncStateInfo& PlayTeamEntityInfo::ability_info() const {
  const ::proto::AbilitySyncStateInfo* p = ability_info_;
  // @@protoc_insertion_point(field_get:proto.PlayTeamEntityInfo.ability_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::AbilitySyncStateInfo*>(
      &::proto::_AbilitySyncStateInfo_default_instance_);
}
::proto::AbilitySyncStateInfo* PlayTeamEntityInfo::mutable_ability_info() {
  
  if (ability_info_ == NULL) {
    ability_info_ = new ::proto::AbilitySyncStateInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.PlayTeamEntityInfo.ability_info)
  return ability_info_;
}
::proto::AbilitySyncStateInfo* PlayTeamEntityInfo::release_ability_info() {
  // @@protoc_insertion_point(field_release:proto.PlayTeamEntityInfo.ability_info)
  
  ::proto::AbilitySyncStateInfo* temp = ability_info_;
  ability_info_ = NULL;
  return temp;
}
void PlayTeamEntityInfo::set_allocated_ability_info(::proto::AbilitySyncStateInfo* ability_info) {
  delete ability_info_;
  ability_info_ = ability_info;
  if (ability_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.PlayTeamEntityInfo.ability_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureBlockInfo::kFeatureTypeFieldNumber;
const int FeatureBlockInfo::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureBlockInfo::FeatureBlockInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FeatureBlockInfo)
}
FeatureBlockInfo::FeatureBlockInfo(const FeatureBlockInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&feature_type_, &from.feature_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&feature_type_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:proto.FeatureBlockInfo)
}

void FeatureBlockInfo::SharedCtor() {
  ::memset(&feature_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&feature_type_)) + sizeof(end_time_));
  _cached_size_ = 0;
}

FeatureBlockInfo::~FeatureBlockInfo() {
  // @@protoc_insertion_point(destructor:proto.FeatureBlockInfo)
  SharedDtor();
}

void FeatureBlockInfo::SharedDtor() {
}

void FeatureBlockInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureBlockInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FeatureBlockInfo& FeatureBlockInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

FeatureBlockInfo* FeatureBlockInfo::New(::google::protobuf::Arena* arena) const {
  FeatureBlockInfo* n = new FeatureBlockInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureBlockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FeatureBlockInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&feature_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&feature_type_)) + sizeof(end_time_));
  _internal_metadata_.Clear();
}

bool FeatureBlockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FeatureBlockInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 feature_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feature_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FeatureBlockInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FeatureBlockInfo)
  return false;
#undef DO_
}

void FeatureBlockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FeatureBlockInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 feature_type = 1;
  if (this->feature_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->feature_type(), output);
  }

  // uint32 end_time = 2;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->end_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.FeatureBlockInfo)
}

::google::protobuf::uint8* FeatureBlockInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.FeatureBlockInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 feature_type = 1;
  if (this->feature_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->feature_type(), target);
  }

  // uint32 end_time = 2;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->end_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FeatureBlockInfo)
  return target;
}

size_t FeatureBlockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FeatureBlockInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 feature_type = 1;
  if (this->feature_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->feature_type());
  }

  // uint32 end_time = 2;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureBlockInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FeatureBlockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureBlockInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureBlockInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FeatureBlockInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FeatureBlockInfo)
    MergeFrom(*source);
  }
}

void FeatureBlockInfo::MergeFrom(const FeatureBlockInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FeatureBlockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.feature_type() != 0) {
    set_feature_type(from.feature_type());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
}

void FeatureBlockInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FeatureBlockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureBlockInfo::CopyFrom(const FeatureBlockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FeatureBlockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureBlockInfo::IsInitialized() const {
  return true;
}

void FeatureBlockInfo::Swap(FeatureBlockInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureBlockInfo::InternalSwap(FeatureBlockInfo* other) {
  using std::swap;
  swap(feature_type_, other->feature_type_);
  swap(end_time_, other->end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureBlockInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureBlockInfo

// uint32 feature_type = 1;
void FeatureBlockInfo::clear_feature_type() {
  feature_type_ = 0u;
}
::google::protobuf::uint32 FeatureBlockInfo::feature_type() const {
  // @@protoc_insertion_point(field_get:proto.FeatureBlockInfo.feature_type)
  return feature_type_;
}
void FeatureBlockInfo::set_feature_type(::google::protobuf::uint32 value) {
  
  feature_type_ = value;
  // @@protoc_insertion_point(field_set:proto.FeatureBlockInfo.feature_type)
}

// uint32 end_time = 2;
void FeatureBlockInfo::clear_end_time() {
  end_time_ = 0u;
}
::google::protobuf::uint32 FeatureBlockInfo::end_time() const {
  // @@protoc_insertion_point(field_get:proto.FeatureBlockInfo.end_time)
  return end_time_;
}
void FeatureBlockInfo::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.FeatureBlockInfo.end_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapMarkTipsInfo::kTipsTypeFieldNumber;
const int MapMarkTipsInfo::kPointIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapMarkTipsInfo::MapMarkTipsInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MapMarkTipsInfo)
}
MapMarkTipsInfo::MapMarkTipsInfo(const MapMarkTipsInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      point_id_list_(from.point_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tips_type_ = from.tips_type_;
  // @@protoc_insertion_point(copy_constructor:proto.MapMarkTipsInfo)
}

void MapMarkTipsInfo::SharedCtor() {
  tips_type_ = 0;
  _cached_size_ = 0;
}

MapMarkTipsInfo::~MapMarkTipsInfo() {
  // @@protoc_insertion_point(destructor:proto.MapMarkTipsInfo)
  SharedDtor();
}

void MapMarkTipsInfo::SharedDtor() {
}

void MapMarkTipsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapMarkTipsInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapMarkTipsInfo& MapMarkTipsInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

MapMarkTipsInfo* MapMarkTipsInfo::New(::google::protobuf::Arena* arena) const {
  MapMarkTipsInfo* n = new MapMarkTipsInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapMarkTipsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MapMarkTipsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_id_list_.Clear();
  tips_type_ = 0;
  _internal_metadata_.Clear();
}

bool MapMarkTipsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MapMarkTipsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.MapMarkTipsType tips_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tips_type(static_cast< ::proto::MapMarkTipsType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 point_id_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_point_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_point_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MapMarkTipsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MapMarkTipsInfo)
  return false;
#undef DO_
}

void MapMarkTipsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MapMarkTipsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.MapMarkTipsType tips_type = 1;
  if (this->tips_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tips_type(), output);
  }

  // repeated uint32 point_id_list = 2;
  if (this->point_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _point_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->point_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->point_id_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MapMarkTipsInfo)
}

::google::protobuf::uint8* MapMarkTipsInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MapMarkTipsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.MapMarkTipsType tips_type = 1;
  if (this->tips_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tips_type(), target);
  }

  // repeated uint32 point_id_list = 2;
  if (this->point_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _point_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->point_id_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MapMarkTipsInfo)
  return target;
}

size_t MapMarkTipsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MapMarkTipsInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 point_id_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->point_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _point_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .proto.MapMarkTipsType tips_type = 1;
  if (this->tips_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tips_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapMarkTipsInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MapMarkTipsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MapMarkTipsInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapMarkTipsInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MapMarkTipsInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MapMarkTipsInfo)
    MergeFrom(*source);
  }
}

void MapMarkTipsInfo::MergeFrom(const MapMarkTipsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MapMarkTipsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_id_list_.MergeFrom(from.point_id_list_);
  if (from.tips_type() != 0) {
    set_tips_type(from.tips_type());
  }
}

void MapMarkTipsInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MapMarkTipsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapMarkTipsInfo::CopyFrom(const MapMarkTipsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MapMarkTipsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapMarkTipsInfo::IsInitialized() const {
  return true;
}

void MapMarkTipsInfo::Swap(MapMarkTipsInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapMarkTipsInfo::InternalSwap(MapMarkTipsInfo* other) {
  using std::swap;
  point_id_list_.InternalSwap(&other->point_id_list_);
  swap(tips_type_, other->tips_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapMarkTipsInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapMarkTipsInfo

// .proto.MapMarkTipsType tips_type = 1;
void MapMarkTipsInfo::clear_tips_type() {
  tips_type_ = 0;
}
::proto::MapMarkTipsType MapMarkTipsInfo::tips_type() const {
  // @@protoc_insertion_point(field_get:proto.MapMarkTipsInfo.tips_type)
  return static_cast< ::proto::MapMarkTipsType >(tips_type_);
}
void MapMarkTipsInfo::set_tips_type(::proto::MapMarkTipsType value) {
  
  tips_type_ = value;
  // @@protoc_insertion_point(field_set:proto.MapMarkTipsInfo.tips_type)
}

// repeated uint32 point_id_list = 2;
int MapMarkTipsInfo::point_id_list_size() const {
  return point_id_list_.size();
}
void MapMarkTipsInfo::clear_point_id_list() {
  point_id_list_.Clear();
}
::google::protobuf::uint32 MapMarkTipsInfo::point_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.MapMarkTipsInfo.point_id_list)
  return point_id_list_.Get(index);
}
void MapMarkTipsInfo::set_point_id_list(int index, ::google::protobuf::uint32 value) {
  point_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.MapMarkTipsInfo.point_id_list)
}
void MapMarkTipsInfo::add_point_id_list(::google::protobuf::uint32 value) {
  point_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.MapMarkTipsInfo.point_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MapMarkTipsInfo::point_id_list() const {
  // @@protoc_insertion_point(field_list:proto.MapMarkTipsInfo.point_id_list)
  return point_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MapMarkTipsInfo::mutable_point_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.MapMarkTipsInfo.point_id_list)
  return &point_id_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExhibitionDisplayInfo::kIdFieldNumber;
const int ExhibitionDisplayInfo::kParamFieldNumber;
const int ExhibitionDisplayInfo::kDetailParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExhibitionDisplayInfo::ExhibitionDisplayInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ExhibitionDisplayInfo)
}
ExhibitionDisplayInfo::ExhibitionDisplayInfo(const ExhibitionDisplayInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&detail_param_) -
    reinterpret_cast<char*>(&id_)) + sizeof(detail_param_));
  // @@protoc_insertion_point(copy_constructor:proto.ExhibitionDisplayInfo)
}

void ExhibitionDisplayInfo::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detail_param_) -
      reinterpret_cast<char*>(&id_)) + sizeof(detail_param_));
  _cached_size_ = 0;
}

ExhibitionDisplayInfo::~ExhibitionDisplayInfo() {
  // @@protoc_insertion_point(destructor:proto.ExhibitionDisplayInfo)
  SharedDtor();
}

void ExhibitionDisplayInfo::SharedDtor() {
}

void ExhibitionDisplayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExhibitionDisplayInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExhibitionDisplayInfo& ExhibitionDisplayInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExhibitionDisplayInfo* ExhibitionDisplayInfo::New(::google::protobuf::Arena* arena) const {
  ExhibitionDisplayInfo* n = new ExhibitionDisplayInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExhibitionDisplayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ExhibitionDisplayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detail_param_) -
      reinterpret_cast<char*>(&id_)) + sizeof(detail_param_));
  _internal_metadata_.Clear();
}

bool ExhibitionDisplayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ExhibitionDisplayInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 detail_param = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &detail_param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ExhibitionDisplayInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ExhibitionDisplayInfo)
  return false;
#undef DO_
}

void ExhibitionDisplayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ExhibitionDisplayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // uint32 param = 2;
  if (this->param() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param(), output);
  }

  // uint32 detail_param = 3;
  if (this->detail_param() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->detail_param(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ExhibitionDisplayInfo)
}

::google::protobuf::uint8* ExhibitionDisplayInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ExhibitionDisplayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // uint32 param = 2;
  if (this->param() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param(), target);
  }

  // uint32 detail_param = 3;
  if (this->detail_param() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->detail_param(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ExhibitionDisplayInfo)
  return target;
}

size_t ExhibitionDisplayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ExhibitionDisplayInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // uint32 param = 2;
  if (this->param() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->param());
  }

  // uint32 detail_param = 3;
  if (this->detail_param() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->detail_param());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExhibitionDisplayInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ExhibitionDisplayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ExhibitionDisplayInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExhibitionDisplayInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ExhibitionDisplayInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ExhibitionDisplayInfo)
    MergeFrom(*source);
  }
}

void ExhibitionDisplayInfo::MergeFrom(const ExhibitionDisplayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ExhibitionDisplayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.param() != 0) {
    set_param(from.param());
  }
  if (from.detail_param() != 0) {
    set_detail_param(from.detail_param());
  }
}

void ExhibitionDisplayInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ExhibitionDisplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExhibitionDisplayInfo::CopyFrom(const ExhibitionDisplayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ExhibitionDisplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExhibitionDisplayInfo::IsInitialized() const {
  return true;
}

void ExhibitionDisplayInfo::Swap(ExhibitionDisplayInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExhibitionDisplayInfo::InternalSwap(ExhibitionDisplayInfo* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(param_, other->param_);
  swap(detail_param_, other->detail_param_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExhibitionDisplayInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExhibitionDisplayInfo

// uint32 id = 1;
void ExhibitionDisplayInfo::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 ExhibitionDisplayInfo::id() const {
  // @@protoc_insertion_point(field_get:proto.ExhibitionDisplayInfo.id)
  return id_;
}
void ExhibitionDisplayInfo::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.ExhibitionDisplayInfo.id)
}

// uint32 param = 2;
void ExhibitionDisplayInfo::clear_param() {
  param_ = 0u;
}
::google::protobuf::uint32 ExhibitionDisplayInfo::param() const {
  // @@protoc_insertion_point(field_get:proto.ExhibitionDisplayInfo.param)
  return param_;
}
void ExhibitionDisplayInfo::set_param(::google::protobuf::uint32 value) {
  
  param_ = value;
  // @@protoc_insertion_point(field_set:proto.ExhibitionDisplayInfo.param)
}

// uint32 detail_param = 3;
void ExhibitionDisplayInfo::clear_detail_param() {
  detail_param_ = 0u;
}
::google::protobuf::uint32 ExhibitionDisplayInfo::detail_param() const {
  // @@protoc_insertion_point(field_get:proto.ExhibitionDisplayInfo.detail_param)
  return detail_param_;
}
void ExhibitionDisplayInfo::set_detail_param(::google::protobuf::uint32 value) {
  
  detail_param_ = value;
  // @@protoc_insertion_point(field_set:proto.ExhibitionDisplayInfo.detail_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfilePicture::kAvatarIdFieldNumber;
const int ProfilePicture::kCostumeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfilePicture::ProfilePicture()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ProfilePicture)
}
ProfilePicture::ProfilePicture(const ProfilePicture& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&avatar_id_, &from.avatar_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&costume_id_) -
    reinterpret_cast<char*>(&avatar_id_)) + sizeof(costume_id_));
  // @@protoc_insertion_point(copy_constructor:proto.ProfilePicture)
}

void ProfilePicture::SharedCtor() {
  ::memset(&avatar_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&costume_id_) -
      reinterpret_cast<char*>(&avatar_id_)) + sizeof(costume_id_));
  _cached_size_ = 0;
}

ProfilePicture::~ProfilePicture() {
  // @@protoc_insertion_point(destructor:proto.ProfilePicture)
  SharedDtor();
}

void ProfilePicture::SharedDtor() {
}

void ProfilePicture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfilePicture::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProfilePicture& ProfilePicture::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProfilePicture* ProfilePicture::New(::google::protobuf::Arena* arena) const {
  ProfilePicture* n = new ProfilePicture;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProfilePicture::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ProfilePicture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&avatar_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&costume_id_) -
      reinterpret_cast<char*>(&avatar_id_)) + sizeof(costume_id_));
  _internal_metadata_.Clear();
}

bool ProfilePicture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ProfilePicture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 avatar_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 costume_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costume_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ProfilePicture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ProfilePicture)
  return false;
#undef DO_
}

void ProfilePicture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ProfilePicture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 avatar_id = 1;
  if (this->avatar_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->avatar_id(), output);
  }

  // uint32 costume_id = 2;
  if (this->costume_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->costume_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ProfilePicture)
}

::google::protobuf::uint8* ProfilePicture::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ProfilePicture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 avatar_id = 1;
  if (this->avatar_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->avatar_id(), target);
  }

  // uint32 costume_id = 2;
  if (this->costume_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->costume_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ProfilePicture)
  return target;
}

size_t ProfilePicture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ProfilePicture)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 avatar_id = 1;
  if (this->avatar_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avatar_id());
  }

  // uint32 costume_id = 2;
  if (this->costume_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->costume_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfilePicture::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ProfilePicture)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilePicture* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProfilePicture>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ProfilePicture)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ProfilePicture)
    MergeFrom(*source);
  }
}

void ProfilePicture::MergeFrom(const ProfilePicture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ProfilePicture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatar_id() != 0) {
    set_avatar_id(from.avatar_id());
  }
  if (from.costume_id() != 0) {
    set_costume_id(from.costume_id());
  }
}

void ProfilePicture::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ProfilePicture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilePicture::CopyFrom(const ProfilePicture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ProfilePicture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilePicture::IsInitialized() const {
  return true;
}

void ProfilePicture::Swap(ProfilePicture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfilePicture::InternalSwap(ProfilePicture* other) {
  using std::swap;
  swap(avatar_id_, other->avatar_id_);
  swap(costume_id_, other->costume_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProfilePicture::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProfilePicture

// uint32 avatar_id = 1;
void ProfilePicture::clear_avatar_id() {
  avatar_id_ = 0u;
}
::google::protobuf::uint32 ProfilePicture::avatar_id() const {
  // @@protoc_insertion_point(field_get:proto.ProfilePicture.avatar_id)
  return avatar_id_;
}
void ProfilePicture::set_avatar_id(::google::protobuf::uint32 value) {
  
  avatar_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ProfilePicture.avatar_id)
}

// uint32 costume_id = 2;
void ProfilePicture::clear_costume_id() {
  costume_id_ = 0u;
}
::google::protobuf::uint32 ProfilePicture::costume_id() const {
  // @@protoc_insertion_point(field_get:proto.ProfilePicture.costume_id)
  return costume_id_;
}
void ProfilePicture::set_costume_id(::google::protobuf::uint32 value) {
  
  costume_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ProfilePicture.costume_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedPointData::kRedPointTypeFieldNumber;
const int RedPointData::kIsShowFieldNumber;
const int RedPointData::kContentIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedPointData::RedPointData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RedPointData)
}
RedPointData::RedPointData(const RedPointData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&red_point_type_, &from.red_point_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&content_id_) -
    reinterpret_cast<char*>(&red_point_type_)) + sizeof(content_id_));
  // @@protoc_insertion_point(copy_constructor:proto.RedPointData)
}

void RedPointData::SharedCtor() {
  ::memset(&red_point_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&content_id_) -
      reinterpret_cast<char*>(&red_point_type_)) + sizeof(content_id_));
  _cached_size_ = 0;
}

RedPointData::~RedPointData() {
  // @@protoc_insertion_point(destructor:proto.RedPointData)
  SharedDtor();
}

void RedPointData::SharedDtor() {
}

void RedPointData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedPointData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedPointData& RedPointData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

RedPointData* RedPointData::New(::google::protobuf::Arena* arena) const {
  RedPointData* n = new RedPointData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedPointData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RedPointData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&red_point_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&content_id_) -
      reinterpret_cast<char*>(&red_point_type_)) + sizeof(content_id_));
  _internal_metadata_.Clear();
}

bool RedPointData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.RedPointData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 red_point_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_point_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_show = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_show_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 content_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &content_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.RedPointData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.RedPointData)
  return false;
#undef DO_
}

void RedPointData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.RedPointData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 red_point_type = 1;
  if (this->red_point_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->red_point_type(), output);
  }

  // bool is_show = 2;
  if (this->is_show() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_show(), output);
  }

  // uint32 content_id = 3;
  if (this->content_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->content_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.RedPointData)
}

::google::protobuf::uint8* RedPointData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.RedPointData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 red_point_type = 1;
  if (this->red_point_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->red_point_type(), target);
  }

  // bool is_show = 2;
  if (this->is_show() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_show(), target);
  }

  // uint32 content_id = 3;
  if (this->content_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->content_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RedPointData)
  return target;
}

size_t RedPointData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RedPointData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 red_point_type = 1;
  if (this->red_point_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->red_point_type());
  }

  // bool is_show = 2;
  if (this->is_show() != 0) {
    total_size += 1 + 1;
  }

  // uint32 content_id = 3;
  if (this->content_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->content_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedPointData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.RedPointData)
  GOOGLE_DCHECK_NE(&from, this);
  const RedPointData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedPointData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.RedPointData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.RedPointData)
    MergeFrom(*source);
  }
}

void RedPointData::MergeFrom(const RedPointData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RedPointData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.red_point_type() != 0) {
    set_red_point_type(from.red_point_type());
  }
  if (from.is_show() != 0) {
    set_is_show(from.is_show());
  }
  if (from.content_id() != 0) {
    set_content_id(from.content_id());
  }
}

void RedPointData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.RedPointData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedPointData::CopyFrom(const RedPointData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RedPointData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedPointData::IsInitialized() const {
  return true;
}

void RedPointData::Swap(RedPointData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedPointData::InternalSwap(RedPointData* other) {
  using std::swap;
  swap(red_point_type_, other->red_point_type_);
  swap(is_show_, other->is_show_);
  swap(content_id_, other->content_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedPointData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RedPointData

// uint32 red_point_type = 1;
void RedPointData::clear_red_point_type() {
  red_point_type_ = 0u;
}
::google::protobuf::uint32 RedPointData::red_point_type() const {
  // @@protoc_insertion_point(field_get:proto.RedPointData.red_point_type)
  return red_point_type_;
}
void RedPointData::set_red_point_type(::google::protobuf::uint32 value) {
  
  red_point_type_ = value;
  // @@protoc_insertion_point(field_set:proto.RedPointData.red_point_type)
}

// bool is_show = 2;
void RedPointData::clear_is_show() {
  is_show_ = false;
}
bool RedPointData::is_show() const {
  // @@protoc_insertion_point(field_get:proto.RedPointData.is_show)
  return is_show_;
}
void RedPointData::set_is_show(bool value) {
  
  is_show_ = value;
  // @@protoc_insertion_point(field_set:proto.RedPointData.is_show)
}

// uint32 content_id = 3;
void RedPointData::clear_content_id() {
  content_id_ = 0u;
}
::google::protobuf::uint32 RedPointData::content_id() const {
  // @@protoc_insertion_point(field_get:proto.RedPointData.content_id)
  return content_id_;
}
void RedPointData::set_content_id(::google::protobuf::uint32 value) {
  
  content_id_ = value;
  // @@protoc_insertion_point(field_set:proto.RedPointData.content_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HomeMarkPointNPCData::kAvatarIdFieldNumber;
const int HomeMarkPointNPCData::kCostumeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HomeMarkPointNPCData::HomeMarkPointNPCData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HomeMarkPointNPCData)
}
HomeMarkPointNPCData::HomeMarkPointNPCData(const HomeMarkPointNPCData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&avatar_id_, &from.avatar_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&costume_id_) -
    reinterpret_cast<char*>(&avatar_id_)) + sizeof(costume_id_));
  // @@protoc_insertion_point(copy_constructor:proto.HomeMarkPointNPCData)
}

void HomeMarkPointNPCData::SharedCtor() {
  ::memset(&avatar_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&costume_id_) -
      reinterpret_cast<char*>(&avatar_id_)) + sizeof(costume_id_));
  _cached_size_ = 0;
}

HomeMarkPointNPCData::~HomeMarkPointNPCData() {
  // @@protoc_insertion_point(destructor:proto.HomeMarkPointNPCData)
  SharedDtor();
}

void HomeMarkPointNPCData::SharedDtor() {
}

void HomeMarkPointNPCData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HomeMarkPointNPCData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HomeMarkPointNPCData& HomeMarkPointNPCData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

HomeMarkPointNPCData* HomeMarkPointNPCData::New(::google::protobuf::Arena* arena) const {
  HomeMarkPointNPCData* n = new HomeMarkPointNPCData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HomeMarkPointNPCData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HomeMarkPointNPCData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&avatar_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&costume_id_) -
      reinterpret_cast<char*>(&avatar_id_)) + sizeof(costume_id_));
  _internal_metadata_.Clear();
}

bool HomeMarkPointNPCData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HomeMarkPointNPCData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 avatar_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 costume_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costume_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HomeMarkPointNPCData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HomeMarkPointNPCData)
  return false;
#undef DO_
}

void HomeMarkPointNPCData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HomeMarkPointNPCData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 avatar_id = 1;
  if (this->avatar_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->avatar_id(), output);
  }

  // uint32 costume_id = 2;
  if (this->costume_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->costume_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HomeMarkPointNPCData)
}

::google::protobuf::uint8* HomeMarkPointNPCData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HomeMarkPointNPCData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 avatar_id = 1;
  if (this->avatar_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->avatar_id(), target);
  }

  // uint32 costume_id = 2;
  if (this->costume_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->costume_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HomeMarkPointNPCData)
  return target;
}

size_t HomeMarkPointNPCData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HomeMarkPointNPCData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 avatar_id = 1;
  if (this->avatar_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avatar_id());
  }

  // uint32 costume_id = 2;
  if (this->costume_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->costume_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HomeMarkPointNPCData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HomeMarkPointNPCData)
  GOOGLE_DCHECK_NE(&from, this);
  const HomeMarkPointNPCData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HomeMarkPointNPCData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HomeMarkPointNPCData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HomeMarkPointNPCData)
    MergeFrom(*source);
  }
}

void HomeMarkPointNPCData::MergeFrom(const HomeMarkPointNPCData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HomeMarkPointNPCData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatar_id() != 0) {
    set_avatar_id(from.avatar_id());
  }
  if (from.costume_id() != 0) {
    set_costume_id(from.costume_id());
  }
}

void HomeMarkPointNPCData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HomeMarkPointNPCData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HomeMarkPointNPCData::CopyFrom(const HomeMarkPointNPCData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HomeMarkPointNPCData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomeMarkPointNPCData::IsInitialized() const {
  return true;
}

void HomeMarkPointNPCData::Swap(HomeMarkPointNPCData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HomeMarkPointNPCData::InternalSwap(HomeMarkPointNPCData* other) {
  using std::swap;
  swap(avatar_id_, other->avatar_id_);
  swap(costume_id_, other->costume_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HomeMarkPointNPCData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HomeMarkPointNPCData

// uint32 avatar_id = 1;
void HomeMarkPointNPCData::clear_avatar_id() {
  avatar_id_ = 0u;
}
::google::protobuf::uint32 HomeMarkPointNPCData::avatar_id() const {
  // @@protoc_insertion_point(field_get:proto.HomeMarkPointNPCData.avatar_id)
  return avatar_id_;
}
void HomeMarkPointNPCData::set_avatar_id(::google::protobuf::uint32 value) {
  
  avatar_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HomeMarkPointNPCData.avatar_id)
}

// uint32 costume_id = 2;
void HomeMarkPointNPCData::clear_costume_id() {
  costume_id_ = 0u;
}
::google::protobuf::uint32 HomeMarkPointNPCData::costume_id() const {
  // @@protoc_insertion_point(field_get:proto.HomeMarkPointNPCData.costume_id)
  return costume_id_;
}
void HomeMarkPointNPCData::set_costume_id(::google::protobuf::uint32 value) {
  
  costume_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HomeMarkPointNPCData.costume_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HomeMarkPointSuiteData::kSuiteIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HomeMarkPointSuiteData::HomeMarkPointSuiteData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HomeMarkPointSuiteData)
}
HomeMarkPointSuiteData::HomeMarkPointSuiteData(const HomeMarkPointSuiteData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  suite_id_ = from.suite_id_;
  // @@protoc_insertion_point(copy_constructor:proto.HomeMarkPointSuiteData)
}

void HomeMarkPointSuiteData::SharedCtor() {
  suite_id_ = 0u;
  _cached_size_ = 0;
}

HomeMarkPointSuiteData::~HomeMarkPointSuiteData() {
  // @@protoc_insertion_point(destructor:proto.HomeMarkPointSuiteData)
  SharedDtor();
}

void HomeMarkPointSuiteData::SharedDtor() {
}

void HomeMarkPointSuiteData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HomeMarkPointSuiteData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HomeMarkPointSuiteData& HomeMarkPointSuiteData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

HomeMarkPointSuiteData* HomeMarkPointSuiteData::New(::google::protobuf::Arena* arena) const {
  HomeMarkPointSuiteData* n = new HomeMarkPointSuiteData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HomeMarkPointSuiteData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HomeMarkPointSuiteData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  suite_id_ = 0u;
  _internal_metadata_.Clear();
}

bool HomeMarkPointSuiteData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HomeMarkPointSuiteData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 suite_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suite_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HomeMarkPointSuiteData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HomeMarkPointSuiteData)
  return false;
#undef DO_
}

void HomeMarkPointSuiteData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HomeMarkPointSuiteData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 suite_id = 1;
  if (this->suite_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->suite_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HomeMarkPointSuiteData)
}

::google::protobuf::uint8* HomeMarkPointSuiteData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HomeMarkPointSuiteData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 suite_id = 1;
  if (this->suite_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->suite_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HomeMarkPointSuiteData)
  return target;
}

size_t HomeMarkPointSuiteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HomeMarkPointSuiteData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 suite_id = 1;
  if (this->suite_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->suite_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HomeMarkPointSuiteData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HomeMarkPointSuiteData)
  GOOGLE_DCHECK_NE(&from, this);
  const HomeMarkPointSuiteData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HomeMarkPointSuiteData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HomeMarkPointSuiteData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HomeMarkPointSuiteData)
    MergeFrom(*source);
  }
}

void HomeMarkPointSuiteData::MergeFrom(const HomeMarkPointSuiteData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HomeMarkPointSuiteData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.suite_id() != 0) {
    set_suite_id(from.suite_id());
  }
}

void HomeMarkPointSuiteData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HomeMarkPointSuiteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HomeMarkPointSuiteData::CopyFrom(const HomeMarkPointSuiteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HomeMarkPointSuiteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomeMarkPointSuiteData::IsInitialized() const {
  return true;
}

void HomeMarkPointSuiteData::Swap(HomeMarkPointSuiteData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HomeMarkPointSuiteData::InternalSwap(HomeMarkPointSuiteData* other) {
  using std::swap;
  swap(suite_id_, other->suite_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HomeMarkPointSuiteData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HomeMarkPointSuiteData

// uint32 suite_id = 1;
void HomeMarkPointSuiteData::clear_suite_id() {
  suite_id_ = 0u;
}
::google::protobuf::uint32 HomeMarkPointSuiteData::suite_id() const {
  // @@protoc_insertion_point(field_get:proto.HomeMarkPointSuiteData.suite_id)
  return suite_id_;
}
void HomeMarkPointSuiteData::set_suite_id(::google::protobuf::uint32 value) {
  
  suite_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HomeMarkPointSuiteData.suite_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HomeMarkPointFurnitureData::kGuidFieldNumber;
const int HomeMarkPointFurnitureData::kFurnitureIdFieldNumber;
const int HomeMarkPointFurnitureData::kFurnitureTypeFieldNumber;
const int HomeMarkPointFurnitureData::kPosFieldNumber;
const int HomeMarkPointFurnitureData::kNpcDataFieldNumber;
const int HomeMarkPointFurnitureData::kSuiteDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HomeMarkPointFurnitureData::HomeMarkPointFurnitureData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HomeMarkPointFurnitureData)
}
HomeMarkPointFurnitureData::HomeMarkPointFurnitureData(const HomeMarkPointFurnitureData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::proto::Vector(*from.pos_);
  } else {
    pos_ = NULL;
  }
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&furniture_type_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(furniture_type_));
  clear_has_extra();
  switch (from.extra_case()) {
    case kNpcData: {
      mutable_npc_data()->::proto::HomeMarkPointNPCData::MergeFrom(from.npc_data());
      break;
    }
    case kSuiteData: {
      mutable_suite_data()->::proto::HomeMarkPointSuiteData::MergeFrom(from.suite_data());
      break;
    }
    case EXTRA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.HomeMarkPointFurnitureData)
}

void HomeMarkPointFurnitureData::SharedCtor() {
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&furniture_type_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(furniture_type_));
  clear_has_extra();
  _cached_size_ = 0;
}

HomeMarkPointFurnitureData::~HomeMarkPointFurnitureData() {
  // @@protoc_insertion_point(destructor:proto.HomeMarkPointFurnitureData)
  SharedDtor();
}

void HomeMarkPointFurnitureData::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (has_extra()) {
    clear_extra();
  }
}

void HomeMarkPointFurnitureData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HomeMarkPointFurnitureData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HomeMarkPointFurnitureData& HomeMarkPointFurnitureData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

HomeMarkPointFurnitureData* HomeMarkPointFurnitureData::New(::google::protobuf::Arena* arena) const {
  HomeMarkPointFurnitureData* n = new HomeMarkPointFurnitureData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HomeMarkPointFurnitureData::clear_extra() {
// @@protoc_insertion_point(one_of_clear_start:proto.HomeMarkPointFurnitureData)
  switch (extra_case()) {
    case kNpcData: {
      delete extra_.npc_data_;
      break;
    }
    case kSuiteData: {
      delete extra_.suite_data_;
      break;
    }
    case EXTRA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXTRA_NOT_SET;
}


void HomeMarkPointFurnitureData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HomeMarkPointFurnitureData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&furniture_type_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(furniture_type_));
  clear_extra();
  _internal_metadata_.Clear();
}

bool HomeMarkPointFurnitureData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HomeMarkPointFurnitureData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 furniture_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &furniture_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 furniture_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &furniture_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector pos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.HomeMarkPointNPCData npc_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_npc_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.HomeMarkPointSuiteData suite_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_suite_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HomeMarkPointFurnitureData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HomeMarkPointFurnitureData)
  return false;
#undef DO_
}

void HomeMarkPointFurnitureData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HomeMarkPointFurnitureData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guid = 1;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guid(), output);
  }

  // uint32 furniture_id = 2;
  if (this->furniture_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->furniture_id(), output);
  }

  // uint32 furniture_type = 3;
  if (this->furniture_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->furniture_type(), output);
  }

  // .proto.Vector pos = 4;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pos_, output);
  }

  // .proto.HomeMarkPointNPCData npc_data = 6;
  if (has_npc_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *extra_.npc_data_, output);
  }

  // .proto.HomeMarkPointSuiteData suite_data = 7;
  if (has_suite_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *extra_.suite_data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HomeMarkPointFurnitureData)
}

::google::protobuf::uint8* HomeMarkPointFurnitureData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HomeMarkPointFurnitureData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guid = 1;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guid(), target);
  }

  // uint32 furniture_id = 2;
  if (this->furniture_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->furniture_id(), target);
  }

  // uint32 furniture_type = 3;
  if (this->furniture_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->furniture_type(), target);
  }

  // .proto.Vector pos = 4;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->pos_, deterministic, target);
  }

  // .proto.HomeMarkPointNPCData npc_data = 6;
  if (has_npc_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *extra_.npc_data_, deterministic, target);
  }

  // .proto.HomeMarkPointSuiteData suite_data = 7;
  if (has_suite_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *extra_.suite_data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HomeMarkPointFurnitureData)
  return target;
}

size_t HomeMarkPointFurnitureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HomeMarkPointFurnitureData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.Vector pos = 4;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  // uint32 guid = 1;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->guid());
  }

  // uint32 furniture_id = 2;
  if (this->furniture_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->furniture_id());
  }

  // uint32 furniture_type = 3;
  if (this->furniture_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->furniture_type());
  }

  switch (extra_case()) {
    // .proto.HomeMarkPointNPCData npc_data = 6;
    case kNpcData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *extra_.npc_data_);
      break;
    }
    // .proto.HomeMarkPointSuiteData suite_data = 7;
    case kSuiteData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *extra_.suite_data_);
      break;
    }
    case EXTRA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HomeMarkPointFurnitureData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HomeMarkPointFurnitureData)
  GOOGLE_DCHECK_NE(&from, this);
  const HomeMarkPointFurnitureData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HomeMarkPointFurnitureData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HomeMarkPointFurnitureData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HomeMarkPointFurnitureData)
    MergeFrom(*source);
  }
}

void HomeMarkPointFurnitureData::MergeFrom(const HomeMarkPointFurnitureData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HomeMarkPointFurnitureData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    mutable_pos()->::proto::Vector::MergeFrom(from.pos());
  }
  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.furniture_id() != 0) {
    set_furniture_id(from.furniture_id());
  }
  if (from.furniture_type() != 0) {
    set_furniture_type(from.furniture_type());
  }
  switch (from.extra_case()) {
    case kNpcData: {
      mutable_npc_data()->::proto::HomeMarkPointNPCData::MergeFrom(from.npc_data());
      break;
    }
    case kSuiteData: {
      mutable_suite_data()->::proto::HomeMarkPointSuiteData::MergeFrom(from.suite_data());
      break;
    }
    case EXTRA_NOT_SET: {
      break;
    }
  }
}

void HomeMarkPointFurnitureData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HomeMarkPointFurnitureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HomeMarkPointFurnitureData::CopyFrom(const HomeMarkPointFurnitureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HomeMarkPointFurnitureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomeMarkPointFurnitureData::IsInitialized() const {
  return true;
}

void HomeMarkPointFurnitureData::Swap(HomeMarkPointFurnitureData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HomeMarkPointFurnitureData::InternalSwap(HomeMarkPointFurnitureData* other) {
  using std::swap;
  swap(pos_, other->pos_);
  swap(guid_, other->guid_);
  swap(furniture_id_, other->furniture_id_);
  swap(furniture_type_, other->furniture_type_);
  swap(extra_, other->extra_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HomeMarkPointFurnitureData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HomeMarkPointFurnitureData

// uint32 guid = 1;
void HomeMarkPointFurnitureData::clear_guid() {
  guid_ = 0u;
}
::google::protobuf::uint32 HomeMarkPointFurnitureData::guid() const {
  // @@protoc_insertion_point(field_get:proto.HomeMarkPointFurnitureData.guid)
  return guid_;
}
void HomeMarkPointFurnitureData::set_guid(::google::protobuf::uint32 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:proto.HomeMarkPointFurnitureData.guid)
}

// uint32 furniture_id = 2;
void HomeMarkPointFurnitureData::clear_furniture_id() {
  furniture_id_ = 0u;
}
::google::protobuf::uint32 HomeMarkPointFurnitureData::furniture_id() const {
  // @@protoc_insertion_point(field_get:proto.HomeMarkPointFurnitureData.furniture_id)
  return furniture_id_;
}
void HomeMarkPointFurnitureData::set_furniture_id(::google::protobuf::uint32 value) {
  
  furniture_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HomeMarkPointFurnitureData.furniture_id)
}

// uint32 furniture_type = 3;
void HomeMarkPointFurnitureData::clear_furniture_type() {
  furniture_type_ = 0u;
}
::google::protobuf::uint32 HomeMarkPointFurnitureData::furniture_type() const {
  // @@protoc_insertion_point(field_get:proto.HomeMarkPointFurnitureData.furniture_type)
  return furniture_type_;
}
void HomeMarkPointFurnitureData::set_furniture_type(::google::protobuf::uint32 value) {
  
  furniture_type_ = value;
  // @@protoc_insertion_point(field_set:proto.HomeMarkPointFurnitureData.furniture_type)
}

// .proto.Vector pos = 4;
bool HomeMarkPointFurnitureData::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
void HomeMarkPointFurnitureData::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
const ::proto::Vector& HomeMarkPointFurnitureData::pos() const {
  const ::proto::Vector* p = pos_;
  // @@protoc_insertion_point(field_get:proto.HomeMarkPointFurnitureData.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* HomeMarkPointFurnitureData::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.HomeMarkPointFurnitureData.pos)
  return pos_;
}
::proto::Vector* HomeMarkPointFurnitureData::release_pos() {
  // @@protoc_insertion_point(field_release:proto.HomeMarkPointFurnitureData.pos)
  
  ::proto::Vector* temp = pos_;
  pos_ = NULL;
  return temp;
}
void HomeMarkPointFurnitureData::set_allocated_pos(::proto::Vector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HomeMarkPointFurnitureData.pos)
}

// .proto.HomeMarkPointNPCData npc_data = 6;
bool HomeMarkPointFurnitureData::has_npc_data() const {
  return extra_case() == kNpcData;
}
void HomeMarkPointFurnitureData::set_has_npc_data() {
  _oneof_case_[0] = kNpcData;
}
void HomeMarkPointFurnitureData::clear_npc_data() {
  if (has_npc_data()) {
    delete extra_.npc_data_;
    clear_has_extra();
  }
}
 const ::proto::HomeMarkPointNPCData& HomeMarkPointFurnitureData::npc_data() const {
  // @@protoc_insertion_point(field_get:proto.HomeMarkPointFurnitureData.npc_data)
  return has_npc_data()
      ? *extra_.npc_data_
      : ::proto::HomeMarkPointNPCData::default_instance();
}
::proto::HomeMarkPointNPCData* HomeMarkPointFurnitureData::mutable_npc_data() {
  if (!has_npc_data()) {
    clear_extra();
    set_has_npc_data();
    extra_.npc_data_ = new ::proto::HomeMarkPointNPCData;
  }
  // @@protoc_insertion_point(field_mutable:proto.HomeMarkPointFurnitureData.npc_data)
  return extra_.npc_data_;
}
::proto::HomeMarkPointNPCData* HomeMarkPointFurnitureData::release_npc_data() {
  // @@protoc_insertion_point(field_release:proto.HomeMarkPointFurnitureData.npc_data)
  if (has_npc_data()) {
    clear_has_extra();
    ::proto::HomeMarkPointNPCData* temp = extra_.npc_data_;
    extra_.npc_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void HomeMarkPointFurnitureData::set_allocated_npc_data(::proto::HomeMarkPointNPCData* npc_data) {
  clear_extra();
  if (npc_data) {
    set_has_npc_data();
    extra_.npc_data_ = npc_data;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HomeMarkPointFurnitureData.npc_data)
}

// .proto.HomeMarkPointSuiteData suite_data = 7;
bool HomeMarkPointFurnitureData::has_suite_data() const {
  return extra_case() == kSuiteData;
}
void HomeMarkPointFurnitureData::set_has_suite_data() {
  _oneof_case_[0] = kSuiteData;
}
void HomeMarkPointFurnitureData::clear_suite_data() {
  if (has_suite_data()) {
    delete extra_.suite_data_;
    clear_has_extra();
  }
}
 const ::proto::HomeMarkPointSuiteData& HomeMarkPointFurnitureData::suite_data() const {
  // @@protoc_insertion_point(field_get:proto.HomeMarkPointFurnitureData.suite_data)
  return has_suite_data()
      ? *extra_.suite_data_
      : ::proto::HomeMarkPointSuiteData::default_instance();
}
::proto::HomeMarkPointSuiteData* HomeMarkPointFurnitureData::mutable_suite_data() {
  if (!has_suite_data()) {
    clear_extra();
    set_has_suite_data();
    extra_.suite_data_ = new ::proto::HomeMarkPointSuiteData;
  }
  // @@protoc_insertion_point(field_mutable:proto.HomeMarkPointFurnitureData.suite_data)
  return extra_.suite_data_;
}
::proto::HomeMarkPointSuiteData* HomeMarkPointFurnitureData::release_suite_data() {
  // @@protoc_insertion_point(field_release:proto.HomeMarkPointFurnitureData.suite_data)
  if (has_suite_data()) {
    clear_has_extra();
    ::proto::HomeMarkPointSuiteData* temp = extra_.suite_data_;
    extra_.suite_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void HomeMarkPointFurnitureData::set_allocated_suite_data(::proto::HomeMarkPointSuiteData* suite_data) {
  clear_extra();
  if (suite_data) {
    set_has_suite_data();
    extra_.suite_data_ = suite_data;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HomeMarkPointFurnitureData.suite_data)
}

bool HomeMarkPointFurnitureData::has_extra() const {
  return extra_case() != EXTRA_NOT_SET;
}
void HomeMarkPointFurnitureData::clear_has_extra() {
  _oneof_case_[0] = EXTRA_NOT_SET;
}
HomeMarkPointFurnitureData::ExtraCase HomeMarkPointFurnitureData::extra_case() const {
  return HomeMarkPointFurnitureData::ExtraCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapAreaInfo::kMapAreaIdFieldNumber;
const int MapAreaInfo::kIsOpenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapAreaInfo::MapAreaInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MapAreaInfo)
}
MapAreaInfo::MapAreaInfo(const MapAreaInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&map_area_id_, &from.map_area_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_open_) -
    reinterpret_cast<char*>(&map_area_id_)) + sizeof(is_open_));
  // @@protoc_insertion_point(copy_constructor:proto.MapAreaInfo)
}

void MapAreaInfo::SharedCtor() {
  ::memset(&map_area_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_open_) -
      reinterpret_cast<char*>(&map_area_id_)) + sizeof(is_open_));
  _cached_size_ = 0;
}

MapAreaInfo::~MapAreaInfo() {
  // @@protoc_insertion_point(destructor:proto.MapAreaInfo)
  SharedDtor();
}

void MapAreaInfo::SharedDtor() {
}

void MapAreaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapAreaInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapAreaInfo& MapAreaInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

MapAreaInfo* MapAreaInfo::New(::google::protobuf::Arena* arena) const {
  MapAreaInfo* n = new MapAreaInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapAreaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MapAreaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&map_area_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_open_) -
      reinterpret_cast<char*>(&map_area_id_)) + sizeof(is_open_));
  _internal_metadata_.Clear();
}

bool MapAreaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MapAreaInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 map_area_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_area_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_open = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MapAreaInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MapAreaInfo)
  return false;
#undef DO_
}

void MapAreaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MapAreaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 map_area_id = 1;
  if (this->map_area_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_area_id(), output);
  }

  // bool is_open = 2;
  if (this->is_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_open(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MapAreaInfo)
}

::google::protobuf::uint8* MapAreaInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MapAreaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 map_area_id = 1;
  if (this->map_area_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->map_area_id(), target);
  }

  // bool is_open = 2;
  if (this->is_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_open(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MapAreaInfo)
  return target;
}

size_t MapAreaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MapAreaInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 map_area_id = 1;
  if (this->map_area_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->map_area_id());
  }

  // bool is_open = 2;
  if (this->is_open() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapAreaInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MapAreaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MapAreaInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapAreaInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MapAreaInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MapAreaInfo)
    MergeFrom(*source);
  }
}

void MapAreaInfo::MergeFrom(const MapAreaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MapAreaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_area_id() != 0) {
    set_map_area_id(from.map_area_id());
  }
  if (from.is_open() != 0) {
    set_is_open(from.is_open());
  }
}

void MapAreaInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MapAreaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapAreaInfo::CopyFrom(const MapAreaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MapAreaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapAreaInfo::IsInitialized() const {
  return true;
}

void MapAreaInfo::Swap(MapAreaInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapAreaInfo::InternalSwap(MapAreaInfo* other) {
  using std::swap;
  swap(map_area_id_, other->map_area_id_);
  swap(is_open_, other->is_open_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapAreaInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapAreaInfo

// uint32 map_area_id = 1;
void MapAreaInfo::clear_map_area_id() {
  map_area_id_ = 0u;
}
::google::protobuf::uint32 MapAreaInfo::map_area_id() const {
  // @@protoc_insertion_point(field_get:proto.MapAreaInfo.map_area_id)
  return map_area_id_;
}
void MapAreaInfo::set_map_area_id(::google::protobuf::uint32 value) {
  
  map_area_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MapAreaInfo.map_area_id)
}

// bool is_open = 2;
void MapAreaInfo::clear_is_open() {
  is_open_ = false;
}
bool MapAreaInfo::is_open() const {
  // @@protoc_insertion_point(field_get:proto.MapAreaInfo.is_open)
  return is_open_;
}
void MapAreaInfo::set_is_open(bool value) {
  
  is_open_ = value;
  // @@protoc_insertion_point(field_set:proto.MapAreaInfo.is_open)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HomeFurnitureArrangementMuipData::kFurnitureIdFieldNumber;
const int HomeFurnitureArrangementMuipData::kSpawnPosFieldNumber;
const int HomeFurnitureArrangementMuipData::kSpawnRotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HomeFurnitureArrangementMuipData::HomeFurnitureArrangementMuipData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HomeFurnitureArrangementMuipData)
}
HomeFurnitureArrangementMuipData::HomeFurnitureArrangementMuipData(const HomeFurnitureArrangementMuipData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_spawn_pos()) {
    spawn_pos_ = new ::proto::Vector(*from.spawn_pos_);
  } else {
    spawn_pos_ = NULL;
  }
  if (from.has_spawn_rot()) {
    spawn_rot_ = new ::proto::Vector(*from.spawn_rot_);
  } else {
    spawn_rot_ = NULL;
  }
  furniture_id_ = from.furniture_id_;
  // @@protoc_insertion_point(copy_constructor:proto.HomeFurnitureArrangementMuipData)
}

void HomeFurnitureArrangementMuipData::SharedCtor() {
  ::memset(&spawn_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&furniture_id_) -
      reinterpret_cast<char*>(&spawn_pos_)) + sizeof(furniture_id_));
  _cached_size_ = 0;
}

HomeFurnitureArrangementMuipData::~HomeFurnitureArrangementMuipData() {
  // @@protoc_insertion_point(destructor:proto.HomeFurnitureArrangementMuipData)
  SharedDtor();
}

void HomeFurnitureArrangementMuipData::SharedDtor() {
  if (this != internal_default_instance()) delete spawn_pos_;
  if (this != internal_default_instance()) delete spawn_rot_;
}

void HomeFurnitureArrangementMuipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HomeFurnitureArrangementMuipData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HomeFurnitureArrangementMuipData& HomeFurnitureArrangementMuipData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

HomeFurnitureArrangementMuipData* HomeFurnitureArrangementMuipData::New(::google::protobuf::Arena* arena) const {
  HomeFurnitureArrangementMuipData* n = new HomeFurnitureArrangementMuipData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HomeFurnitureArrangementMuipData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HomeFurnitureArrangementMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && spawn_pos_ != NULL) {
    delete spawn_pos_;
  }
  spawn_pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && spawn_rot_ != NULL) {
    delete spawn_rot_;
  }
  spawn_rot_ = NULL;
  furniture_id_ = 0u;
  _internal_metadata_.Clear();
}

bool HomeFurnitureArrangementMuipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HomeFurnitureArrangementMuipData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 furniture_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &furniture_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector spawn_pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spawn_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector spawn_rot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spawn_rot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HomeFurnitureArrangementMuipData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HomeFurnitureArrangementMuipData)
  return false;
#undef DO_
}

void HomeFurnitureArrangementMuipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HomeFurnitureArrangementMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 furniture_id = 1;
  if (this->furniture_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->furniture_id(), output);
  }

  // .proto.Vector spawn_pos = 2;
  if (this->has_spawn_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->spawn_pos_, output);
  }

  // .proto.Vector spawn_rot = 3;
  if (this->has_spawn_rot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->spawn_rot_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HomeFurnitureArrangementMuipData)
}

::google::protobuf::uint8* HomeFurnitureArrangementMuipData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HomeFurnitureArrangementMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 furniture_id = 1;
  if (this->furniture_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->furniture_id(), target);
  }

  // .proto.Vector spawn_pos = 2;
  if (this->has_spawn_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->spawn_pos_, deterministic, target);
  }

  // .proto.Vector spawn_rot = 3;
  if (this->has_spawn_rot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->spawn_rot_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HomeFurnitureArrangementMuipData)
  return target;
}

size_t HomeFurnitureArrangementMuipData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HomeFurnitureArrangementMuipData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.Vector spawn_pos = 2;
  if (this->has_spawn_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->spawn_pos_);
  }

  // .proto.Vector spawn_rot = 3;
  if (this->has_spawn_rot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->spawn_rot_);
  }

  // uint32 furniture_id = 1;
  if (this->furniture_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->furniture_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HomeFurnitureArrangementMuipData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HomeFurnitureArrangementMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  const HomeFurnitureArrangementMuipData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HomeFurnitureArrangementMuipData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HomeFurnitureArrangementMuipData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HomeFurnitureArrangementMuipData)
    MergeFrom(*source);
  }
}

void HomeFurnitureArrangementMuipData::MergeFrom(const HomeFurnitureArrangementMuipData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HomeFurnitureArrangementMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_spawn_pos()) {
    mutable_spawn_pos()->::proto::Vector::MergeFrom(from.spawn_pos());
  }
  if (from.has_spawn_rot()) {
    mutable_spawn_rot()->::proto::Vector::MergeFrom(from.spawn_rot());
  }
  if (from.furniture_id() != 0) {
    set_furniture_id(from.furniture_id());
  }
}

void HomeFurnitureArrangementMuipData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HomeFurnitureArrangementMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HomeFurnitureArrangementMuipData::CopyFrom(const HomeFurnitureArrangementMuipData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HomeFurnitureArrangementMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomeFurnitureArrangementMuipData::IsInitialized() const {
  return true;
}

void HomeFurnitureArrangementMuipData::Swap(HomeFurnitureArrangementMuipData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HomeFurnitureArrangementMuipData::InternalSwap(HomeFurnitureArrangementMuipData* other) {
  using std::swap;
  swap(spawn_pos_, other->spawn_pos_);
  swap(spawn_rot_, other->spawn_rot_);
  swap(furniture_id_, other->furniture_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HomeFurnitureArrangementMuipData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HomeFurnitureArrangementMuipData

// uint32 furniture_id = 1;
void HomeFurnitureArrangementMuipData::clear_furniture_id() {
  furniture_id_ = 0u;
}
::google::protobuf::uint32 HomeFurnitureArrangementMuipData::furniture_id() const {
  // @@protoc_insertion_point(field_get:proto.HomeFurnitureArrangementMuipData.furniture_id)
  return furniture_id_;
}
void HomeFurnitureArrangementMuipData::set_furniture_id(::google::protobuf::uint32 value) {
  
  furniture_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HomeFurnitureArrangementMuipData.furniture_id)
}

// .proto.Vector spawn_pos = 2;
bool HomeFurnitureArrangementMuipData::has_spawn_pos() const {
  return this != internal_default_instance() && spawn_pos_ != NULL;
}
void HomeFurnitureArrangementMuipData::clear_spawn_pos() {
  if (GetArenaNoVirtual() == NULL && spawn_pos_ != NULL) delete spawn_pos_;
  spawn_pos_ = NULL;
}
const ::proto::Vector& HomeFurnitureArrangementMuipData::spawn_pos() const {
  const ::proto::Vector* p = spawn_pos_;
  // @@protoc_insertion_point(field_get:proto.HomeFurnitureArrangementMuipData.spawn_pos)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* HomeFurnitureArrangementMuipData::mutable_spawn_pos() {
  
  if (spawn_pos_ == NULL) {
    spawn_pos_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.HomeFurnitureArrangementMuipData.spawn_pos)
  return spawn_pos_;
}
::proto::Vector* HomeFurnitureArrangementMuipData::release_spawn_pos() {
  // @@protoc_insertion_point(field_release:proto.HomeFurnitureArrangementMuipData.spawn_pos)
  
  ::proto::Vector* temp = spawn_pos_;
  spawn_pos_ = NULL;
  return temp;
}
void HomeFurnitureArrangementMuipData::set_allocated_spawn_pos(::proto::Vector* spawn_pos) {
  delete spawn_pos_;
  spawn_pos_ = spawn_pos;
  if (spawn_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HomeFurnitureArrangementMuipData.spawn_pos)
}

// .proto.Vector spawn_rot = 3;
bool HomeFurnitureArrangementMuipData::has_spawn_rot() const {
  return this != internal_default_instance() && spawn_rot_ != NULL;
}
void HomeFurnitureArrangementMuipData::clear_spawn_rot() {
  if (GetArenaNoVirtual() == NULL && spawn_rot_ != NULL) delete spawn_rot_;
  spawn_rot_ = NULL;
}
const ::proto::Vector& HomeFurnitureArrangementMuipData::spawn_rot() const {
  const ::proto::Vector* p = spawn_rot_;
  // @@protoc_insertion_point(field_get:proto.HomeFurnitureArrangementMuipData.spawn_rot)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* HomeFurnitureArrangementMuipData::mutable_spawn_rot() {
  
  if (spawn_rot_ == NULL) {
    spawn_rot_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.HomeFurnitureArrangementMuipData.spawn_rot)
  return spawn_rot_;
}
::proto::Vector* HomeFurnitureArrangementMuipData::release_spawn_rot() {
  // @@protoc_insertion_point(field_release:proto.HomeFurnitureArrangementMuipData.spawn_rot)
  
  ::proto::Vector* temp = spawn_rot_;
  spawn_rot_ = NULL;
  return temp;
}
void HomeFurnitureArrangementMuipData::set_allocated_spawn_rot(::proto::Vector* spawn_rot) {
  delete spawn_rot_;
  spawn_rot_ = spawn_rot;
  if (spawn_rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HomeFurnitureArrangementMuipData.spawn_rot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HomeBlockArrangementMuipData::kBlockIdFieldNumber;
const int HomeBlockArrangementMuipData::kFurnitureDataListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HomeBlockArrangementMuipData::HomeBlockArrangementMuipData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HomeBlockArrangementMuipData)
}
HomeBlockArrangementMuipData::HomeBlockArrangementMuipData(const HomeBlockArrangementMuipData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      furniture_data_list_(from.furniture_data_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_id_ = from.block_id_;
  // @@protoc_insertion_point(copy_constructor:proto.HomeBlockArrangementMuipData)
}

void HomeBlockArrangementMuipData::SharedCtor() {
  block_id_ = 0u;
  _cached_size_ = 0;
}

HomeBlockArrangementMuipData::~HomeBlockArrangementMuipData() {
  // @@protoc_insertion_point(destructor:proto.HomeBlockArrangementMuipData)
  SharedDtor();
}

void HomeBlockArrangementMuipData::SharedDtor() {
}

void HomeBlockArrangementMuipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HomeBlockArrangementMuipData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HomeBlockArrangementMuipData& HomeBlockArrangementMuipData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

HomeBlockArrangementMuipData* HomeBlockArrangementMuipData::New(::google::protobuf::Arena* arena) const {
  HomeBlockArrangementMuipData* n = new HomeBlockArrangementMuipData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HomeBlockArrangementMuipData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HomeBlockArrangementMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  furniture_data_list_.Clear();
  block_id_ = 0u;
  _internal_metadata_.Clear();
}

bool HomeBlockArrangementMuipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HomeBlockArrangementMuipData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 block_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.HomeFurnitureArrangementMuipData furniture_data_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_furniture_data_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HomeBlockArrangementMuipData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HomeBlockArrangementMuipData)
  return false;
#undef DO_
}

void HomeBlockArrangementMuipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HomeBlockArrangementMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 block_id = 1;
  if (this->block_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->block_id(), output);
  }

  // repeated .proto.HomeFurnitureArrangementMuipData furniture_data_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->furniture_data_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->furniture_data_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HomeBlockArrangementMuipData)
}

::google::protobuf::uint8* HomeBlockArrangementMuipData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HomeBlockArrangementMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 block_id = 1;
  if (this->block_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->block_id(), target);
  }

  // repeated .proto.HomeFurnitureArrangementMuipData furniture_data_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->furniture_data_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->furniture_data_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HomeBlockArrangementMuipData)
  return target;
}

size_t HomeBlockArrangementMuipData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HomeBlockArrangementMuipData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.HomeFurnitureArrangementMuipData furniture_data_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->furniture_data_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->furniture_data_list(static_cast<int>(i)));
    }
  }

  // uint32 block_id = 1;
  if (this->block_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->block_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HomeBlockArrangementMuipData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HomeBlockArrangementMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  const HomeBlockArrangementMuipData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HomeBlockArrangementMuipData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HomeBlockArrangementMuipData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HomeBlockArrangementMuipData)
    MergeFrom(*source);
  }
}

void HomeBlockArrangementMuipData::MergeFrom(const HomeBlockArrangementMuipData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HomeBlockArrangementMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  furniture_data_list_.MergeFrom(from.furniture_data_list_);
  if (from.block_id() != 0) {
    set_block_id(from.block_id());
  }
}

void HomeBlockArrangementMuipData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HomeBlockArrangementMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HomeBlockArrangementMuipData::CopyFrom(const HomeBlockArrangementMuipData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HomeBlockArrangementMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomeBlockArrangementMuipData::IsInitialized() const {
  return true;
}

void HomeBlockArrangementMuipData::Swap(HomeBlockArrangementMuipData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HomeBlockArrangementMuipData::InternalSwap(HomeBlockArrangementMuipData* other) {
  using std::swap;
  furniture_data_list_.InternalSwap(&other->furniture_data_list_);
  swap(block_id_, other->block_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HomeBlockArrangementMuipData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HomeBlockArrangementMuipData

// uint32 block_id = 1;
void HomeBlockArrangementMuipData::clear_block_id() {
  block_id_ = 0u;
}
::google::protobuf::uint32 HomeBlockArrangementMuipData::block_id() const {
  // @@protoc_insertion_point(field_get:proto.HomeBlockArrangementMuipData.block_id)
  return block_id_;
}
void HomeBlockArrangementMuipData::set_block_id(::google::protobuf::uint32 value) {
  
  block_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HomeBlockArrangementMuipData.block_id)
}

// repeated .proto.HomeFurnitureArrangementMuipData furniture_data_list = 2;
int HomeBlockArrangementMuipData::furniture_data_list_size() const {
  return furniture_data_list_.size();
}
void HomeBlockArrangementMuipData::clear_furniture_data_list() {
  furniture_data_list_.Clear();
}
const ::proto::HomeFurnitureArrangementMuipData& HomeBlockArrangementMuipData::furniture_data_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.HomeBlockArrangementMuipData.furniture_data_list)
  return furniture_data_list_.Get(index);
}
::proto::HomeFurnitureArrangementMuipData* HomeBlockArrangementMuipData::mutable_furniture_data_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.HomeBlockArrangementMuipData.furniture_data_list)
  return furniture_data_list_.Mutable(index);
}
::proto::HomeFurnitureArrangementMuipData* HomeBlockArrangementMuipData::add_furniture_data_list() {
  // @@protoc_insertion_point(field_add:proto.HomeBlockArrangementMuipData.furniture_data_list)
  return furniture_data_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::HomeFurnitureArrangementMuipData >*
HomeBlockArrangementMuipData::mutable_furniture_data_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.HomeBlockArrangementMuipData.furniture_data_list)
  return &furniture_data_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::HomeFurnitureArrangementMuipData >&
HomeBlockArrangementMuipData::furniture_data_list() const {
  // @@protoc_insertion_point(field_list:proto.HomeBlockArrangementMuipData.furniture_data_list)
  return furniture_data_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HomeSceneArrangementMuipData::kModuleIdFieldNumber;
const int HomeSceneArrangementMuipData::kSceneIdFieldNumber;
const int HomeSceneArrangementMuipData::kIsRoomFieldNumber;
const int HomeSceneArrangementMuipData::kBlockDataListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HomeSceneArrangementMuipData::HomeSceneArrangementMuipData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HomeSceneArrangementMuipData)
}
HomeSceneArrangementMuipData::HomeSceneArrangementMuipData(const HomeSceneArrangementMuipData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      block_data_list_(from.block_data_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&module_id_, &from.module_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_room_) -
    reinterpret_cast<char*>(&module_id_)) + sizeof(is_room_));
  // @@protoc_insertion_point(copy_constructor:proto.HomeSceneArrangementMuipData)
}

void HomeSceneArrangementMuipData::SharedCtor() {
  ::memset(&module_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_room_) -
      reinterpret_cast<char*>(&module_id_)) + sizeof(is_room_));
  _cached_size_ = 0;
}

HomeSceneArrangementMuipData::~HomeSceneArrangementMuipData() {
  // @@protoc_insertion_point(destructor:proto.HomeSceneArrangementMuipData)
  SharedDtor();
}

void HomeSceneArrangementMuipData::SharedDtor() {
}

void HomeSceneArrangementMuipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HomeSceneArrangementMuipData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HomeSceneArrangementMuipData& HomeSceneArrangementMuipData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

HomeSceneArrangementMuipData* HomeSceneArrangementMuipData::New(::google::protobuf::Arena* arena) const {
  HomeSceneArrangementMuipData* n = new HomeSceneArrangementMuipData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HomeSceneArrangementMuipData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HomeSceneArrangementMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_data_list_.Clear();
  ::memset(&module_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_room_) -
      reinterpret_cast<char*>(&module_id_)) + sizeof(is_room_));
  _internal_metadata_.Clear();
}

bool HomeSceneArrangementMuipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HomeSceneArrangementMuipData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 module_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &module_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 scene_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_room = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_room_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.HomeBlockArrangementMuipData block_data_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_block_data_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HomeSceneArrangementMuipData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HomeSceneArrangementMuipData)
  return false;
#undef DO_
}

void HomeSceneArrangementMuipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HomeSceneArrangementMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 module_id = 1;
  if (this->module_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->module_id(), output);
  }

  // uint32 scene_id = 2;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scene_id(), output);
  }

  // bool is_room = 3;
  if (this->is_room() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_room(), output);
  }

  // repeated .proto.HomeBlockArrangementMuipData block_data_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->block_data_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->block_data_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HomeSceneArrangementMuipData)
}

::google::protobuf::uint8* HomeSceneArrangementMuipData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HomeSceneArrangementMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 module_id = 1;
  if (this->module_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->module_id(), target);
  }

  // uint32 scene_id = 2;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scene_id(), target);
  }

  // bool is_room = 3;
  if (this->is_room() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_room(), target);
  }

  // repeated .proto.HomeBlockArrangementMuipData block_data_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->block_data_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->block_data_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HomeSceneArrangementMuipData)
  return target;
}

size_t HomeSceneArrangementMuipData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HomeSceneArrangementMuipData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.HomeBlockArrangementMuipData block_data_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->block_data_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block_data_list(static_cast<int>(i)));
    }
  }

  // uint32 module_id = 1;
  if (this->module_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->module_id());
  }

  // uint32 scene_id = 2;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  // bool is_room = 3;
  if (this->is_room() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HomeSceneArrangementMuipData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HomeSceneArrangementMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  const HomeSceneArrangementMuipData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HomeSceneArrangementMuipData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HomeSceneArrangementMuipData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HomeSceneArrangementMuipData)
    MergeFrom(*source);
  }
}

void HomeSceneArrangementMuipData::MergeFrom(const HomeSceneArrangementMuipData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HomeSceneArrangementMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_data_list_.MergeFrom(from.block_data_list_);
  if (from.module_id() != 0) {
    set_module_id(from.module_id());
  }
  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
  if (from.is_room() != 0) {
    set_is_room(from.is_room());
  }
}

void HomeSceneArrangementMuipData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HomeSceneArrangementMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HomeSceneArrangementMuipData::CopyFrom(const HomeSceneArrangementMuipData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HomeSceneArrangementMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomeSceneArrangementMuipData::IsInitialized() const {
  return true;
}

void HomeSceneArrangementMuipData::Swap(HomeSceneArrangementMuipData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HomeSceneArrangementMuipData::InternalSwap(HomeSceneArrangementMuipData* other) {
  using std::swap;
  block_data_list_.InternalSwap(&other->block_data_list_);
  swap(module_id_, other->module_id_);
  swap(scene_id_, other->scene_id_);
  swap(is_room_, other->is_room_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HomeSceneArrangementMuipData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HomeSceneArrangementMuipData

// uint32 module_id = 1;
void HomeSceneArrangementMuipData::clear_module_id() {
  module_id_ = 0u;
}
::google::protobuf::uint32 HomeSceneArrangementMuipData::module_id() const {
  // @@protoc_insertion_point(field_get:proto.HomeSceneArrangementMuipData.module_id)
  return module_id_;
}
void HomeSceneArrangementMuipData::set_module_id(::google::protobuf::uint32 value) {
  
  module_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HomeSceneArrangementMuipData.module_id)
}

// uint32 scene_id = 2;
void HomeSceneArrangementMuipData::clear_scene_id() {
  scene_id_ = 0u;
}
::google::protobuf::uint32 HomeSceneArrangementMuipData::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.HomeSceneArrangementMuipData.scene_id)
  return scene_id_;
}
void HomeSceneArrangementMuipData::set_scene_id(::google::protobuf::uint32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HomeSceneArrangementMuipData.scene_id)
}

// bool is_room = 3;
void HomeSceneArrangementMuipData::clear_is_room() {
  is_room_ = false;
}
bool HomeSceneArrangementMuipData::is_room() const {
  // @@protoc_insertion_point(field_get:proto.HomeSceneArrangementMuipData.is_room)
  return is_room_;
}
void HomeSceneArrangementMuipData::set_is_room(bool value) {
  
  is_room_ = value;
  // @@protoc_insertion_point(field_set:proto.HomeSceneArrangementMuipData.is_room)
}

// repeated .proto.HomeBlockArrangementMuipData block_data_list = 4;
int HomeSceneArrangementMuipData::block_data_list_size() const {
  return block_data_list_.size();
}
void HomeSceneArrangementMuipData::clear_block_data_list() {
  block_data_list_.Clear();
}
const ::proto::HomeBlockArrangementMuipData& HomeSceneArrangementMuipData::block_data_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.HomeSceneArrangementMuipData.block_data_list)
  return block_data_list_.Get(index);
}
::proto::HomeBlockArrangementMuipData* HomeSceneArrangementMuipData::mutable_block_data_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.HomeSceneArrangementMuipData.block_data_list)
  return block_data_list_.Mutable(index);
}
::proto::HomeBlockArrangementMuipData* HomeSceneArrangementMuipData::add_block_data_list() {
  // @@protoc_insertion_point(field_add:proto.HomeSceneArrangementMuipData.block_data_list)
  return block_data_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::HomeBlockArrangementMuipData >*
HomeSceneArrangementMuipData::mutable_block_data_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.HomeSceneArrangementMuipData.block_data_list)
  return &block_data_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::HomeBlockArrangementMuipData >&
HomeSceneArrangementMuipData::block_data_list() const {
  // @@protoc_insertion_point(field_list:proto.HomeSceneArrangementMuipData.block_data_list)
  return block_data_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomDungeonBattleRecordMuipData::kDungeonGuidFieldNumber;
const int CustomDungeonBattleRecordMuipData::kMinCostTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomDungeonBattleRecordMuipData::CustomDungeonBattleRecordMuipData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CustomDungeonBattleRecordMuipData)
}
CustomDungeonBattleRecordMuipData::CustomDungeonBattleRecordMuipData(const CustomDungeonBattleRecordMuipData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dungeon_guid_, &from.dungeon_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_cost_time_) -
    reinterpret_cast<char*>(&dungeon_guid_)) + sizeof(min_cost_time_));
  // @@protoc_insertion_point(copy_constructor:proto.CustomDungeonBattleRecordMuipData)
}

void CustomDungeonBattleRecordMuipData::SharedCtor() {
  ::memset(&dungeon_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_cost_time_) -
      reinterpret_cast<char*>(&dungeon_guid_)) + sizeof(min_cost_time_));
  _cached_size_ = 0;
}

CustomDungeonBattleRecordMuipData::~CustomDungeonBattleRecordMuipData() {
  // @@protoc_insertion_point(destructor:proto.CustomDungeonBattleRecordMuipData)
  SharedDtor();
}

void CustomDungeonBattleRecordMuipData::SharedDtor() {
}

void CustomDungeonBattleRecordMuipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomDungeonBattleRecordMuipData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomDungeonBattleRecordMuipData& CustomDungeonBattleRecordMuipData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

CustomDungeonBattleRecordMuipData* CustomDungeonBattleRecordMuipData::New(::google::protobuf::Arena* arena) const {
  CustomDungeonBattleRecordMuipData* n = new CustomDungeonBattleRecordMuipData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CustomDungeonBattleRecordMuipData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CustomDungeonBattleRecordMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dungeon_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_cost_time_) -
      reinterpret_cast<char*>(&dungeon_guid_)) + sizeof(min_cost_time_));
  _internal_metadata_.Clear();
}

bool CustomDungeonBattleRecordMuipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CustomDungeonBattleRecordMuipData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 dungeon_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dungeon_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 min_cost_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_cost_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CustomDungeonBattleRecordMuipData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CustomDungeonBattleRecordMuipData)
  return false;
#undef DO_
}

void CustomDungeonBattleRecordMuipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CustomDungeonBattleRecordMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 dungeon_guid = 1;
  if (this->dungeon_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dungeon_guid(), output);
  }

  // uint32 min_cost_time = 2;
  if (this->min_cost_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->min_cost_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CustomDungeonBattleRecordMuipData)
}

::google::protobuf::uint8* CustomDungeonBattleRecordMuipData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CustomDungeonBattleRecordMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 dungeon_guid = 1;
  if (this->dungeon_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dungeon_guid(), target);
  }

  // uint32 min_cost_time = 2;
  if (this->min_cost_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->min_cost_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CustomDungeonBattleRecordMuipData)
  return target;
}

size_t CustomDungeonBattleRecordMuipData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CustomDungeonBattleRecordMuipData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 dungeon_guid = 1;
  if (this->dungeon_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dungeon_guid());
  }

  // uint32 min_cost_time = 2;
  if (this->min_cost_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->min_cost_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomDungeonBattleRecordMuipData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CustomDungeonBattleRecordMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomDungeonBattleRecordMuipData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomDungeonBattleRecordMuipData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CustomDungeonBattleRecordMuipData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CustomDungeonBattleRecordMuipData)
    MergeFrom(*source);
  }
}

void CustomDungeonBattleRecordMuipData::MergeFrom(const CustomDungeonBattleRecordMuipData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CustomDungeonBattleRecordMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dungeon_guid() != 0) {
    set_dungeon_guid(from.dungeon_guid());
  }
  if (from.min_cost_time() != 0) {
    set_min_cost_time(from.min_cost_time());
  }
}

void CustomDungeonBattleRecordMuipData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CustomDungeonBattleRecordMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomDungeonBattleRecordMuipData::CopyFrom(const CustomDungeonBattleRecordMuipData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CustomDungeonBattleRecordMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomDungeonBattleRecordMuipData::IsInitialized() const {
  return true;
}

void CustomDungeonBattleRecordMuipData::Swap(CustomDungeonBattleRecordMuipData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomDungeonBattleRecordMuipData::InternalSwap(CustomDungeonBattleRecordMuipData* other) {
  using std::swap;
  swap(dungeon_guid_, other->dungeon_guid_);
  swap(min_cost_time_, other->min_cost_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CustomDungeonBattleRecordMuipData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CustomDungeonBattleRecordMuipData

// uint64 dungeon_guid = 1;
void CustomDungeonBattleRecordMuipData::clear_dungeon_guid() {
  dungeon_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CustomDungeonBattleRecordMuipData::dungeon_guid() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonBattleRecordMuipData.dungeon_guid)
  return dungeon_guid_;
}
void CustomDungeonBattleRecordMuipData::set_dungeon_guid(::google::protobuf::uint64 value) {
  
  dungeon_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonBattleRecordMuipData.dungeon_guid)
}

// uint32 min_cost_time = 2;
void CustomDungeonBattleRecordMuipData::clear_min_cost_time() {
  min_cost_time_ = 0u;
}
::google::protobuf::uint32 CustomDungeonBattleRecordMuipData::min_cost_time() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonBattleRecordMuipData.min_cost_time)
  return min_cost_time_;
}
void CustomDungeonBattleRecordMuipData::set_min_cost_time(::google::protobuf::uint32 value) {
  
  min_cost_time_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonBattleRecordMuipData.min_cost_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerCustomDungeonMuipData::kUidFieldNumber;
const int PlayerCustomDungeonMuipData::kPublishDungeonListFieldNumber;
const int PlayerCustomDungeonMuipData::kStoreDungeonListFieldNumber;
const int PlayerCustomDungeonMuipData::kBattleRecordListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerCustomDungeonMuipData::PlayerCustomDungeonMuipData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PlayerCustomDungeonMuipData)
}
PlayerCustomDungeonMuipData::PlayerCustomDungeonMuipData(const PlayerCustomDungeonMuipData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      publish_dungeon_list_(from.publish_dungeon_list_),
      store_dungeon_list_(from.store_dungeon_list_),
      battle_record_list_(from.battle_record_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:proto.PlayerCustomDungeonMuipData)
}

void PlayerCustomDungeonMuipData::SharedCtor() {
  uid_ = 0u;
  _cached_size_ = 0;
}

PlayerCustomDungeonMuipData::~PlayerCustomDungeonMuipData() {
  // @@protoc_insertion_point(destructor:proto.PlayerCustomDungeonMuipData)
  SharedDtor();
}

void PlayerCustomDungeonMuipData::SharedDtor() {
}

void PlayerCustomDungeonMuipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerCustomDungeonMuipData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerCustomDungeonMuipData& PlayerCustomDungeonMuipData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerCustomDungeonMuipData* PlayerCustomDungeonMuipData::New(::google::protobuf::Arena* arena) const {
  PlayerCustomDungeonMuipData* n = new PlayerCustomDungeonMuipData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerCustomDungeonMuipData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PlayerCustomDungeonMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publish_dungeon_list_.Clear();
  store_dungeon_list_.Clear();
  battle_record_list_.Clear();
  uid_ = 0u;
  _internal_metadata_.Clear();
}

bool PlayerCustomDungeonMuipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PlayerCustomDungeonMuipData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 publish_dungeon_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_publish_dungeon_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_publish_dungeon_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 store_dungeon_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_store_dungeon_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26u, input, this->mutable_store_dungeon_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.CustomDungeonBattleRecordMuipData battle_record_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle_record_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PlayerCustomDungeonMuipData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PlayerCustomDungeonMuipData)
  return false;
#undef DO_
}

void PlayerCustomDungeonMuipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PlayerCustomDungeonMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // repeated uint64 publish_dungeon_list = 2;
  if (this->publish_dungeon_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _publish_dungeon_list_cached_byte_size_));
  }
  for (int i = 0, n = this->publish_dungeon_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->publish_dungeon_list(i), output);
  }

  // repeated uint64 store_dungeon_list = 3;
  if (this->store_dungeon_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _store_dungeon_list_cached_byte_size_));
  }
  for (int i = 0, n = this->store_dungeon_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->store_dungeon_list(i), output);
  }

  // repeated .proto.CustomDungeonBattleRecordMuipData battle_record_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->battle_record_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->battle_record_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PlayerCustomDungeonMuipData)
}

::google::protobuf::uint8* PlayerCustomDungeonMuipData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PlayerCustomDungeonMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // repeated uint64 publish_dungeon_list = 2;
  if (this->publish_dungeon_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _publish_dungeon_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->publish_dungeon_list_, target);
  }

  // repeated uint64 store_dungeon_list = 3;
  if (this->store_dungeon_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _store_dungeon_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->store_dungeon_list_, target);
  }

  // repeated .proto.CustomDungeonBattleRecordMuipData battle_record_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->battle_record_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->battle_record_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PlayerCustomDungeonMuipData)
  return target;
}

size_t PlayerCustomDungeonMuipData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PlayerCustomDungeonMuipData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 publish_dungeon_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->publish_dungeon_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _publish_dungeon_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 store_dungeon_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->store_dungeon_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _store_dungeon_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto.CustomDungeonBattleRecordMuipData battle_record_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->battle_record_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_record_list(static_cast<int>(i)));
    }
  }

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerCustomDungeonMuipData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PlayerCustomDungeonMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerCustomDungeonMuipData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerCustomDungeonMuipData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PlayerCustomDungeonMuipData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PlayerCustomDungeonMuipData)
    MergeFrom(*source);
  }
}

void PlayerCustomDungeonMuipData::MergeFrom(const PlayerCustomDungeonMuipData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PlayerCustomDungeonMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  publish_dungeon_list_.MergeFrom(from.publish_dungeon_list_);
  store_dungeon_list_.MergeFrom(from.store_dungeon_list_);
  battle_record_list_.MergeFrom(from.battle_record_list_);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void PlayerCustomDungeonMuipData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PlayerCustomDungeonMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCustomDungeonMuipData::CopyFrom(const PlayerCustomDungeonMuipData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PlayerCustomDungeonMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCustomDungeonMuipData::IsInitialized() const {
  return true;
}

void PlayerCustomDungeonMuipData::Swap(PlayerCustomDungeonMuipData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerCustomDungeonMuipData::InternalSwap(PlayerCustomDungeonMuipData* other) {
  using std::swap;
  publish_dungeon_list_.InternalSwap(&other->publish_dungeon_list_);
  store_dungeon_list_.InternalSwap(&other->store_dungeon_list_);
  battle_record_list_.InternalSwap(&other->battle_record_list_);
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerCustomDungeonMuipData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerCustomDungeonMuipData

// uint32 uid = 1;
void PlayerCustomDungeonMuipData::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 PlayerCustomDungeonMuipData::uid() const {
  // @@protoc_insertion_point(field_get:proto.PlayerCustomDungeonMuipData.uid)
  return uid_;
}
void PlayerCustomDungeonMuipData::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerCustomDungeonMuipData.uid)
}

// repeated uint64 publish_dungeon_list = 2;
int PlayerCustomDungeonMuipData::publish_dungeon_list_size() const {
  return publish_dungeon_list_.size();
}
void PlayerCustomDungeonMuipData::clear_publish_dungeon_list() {
  publish_dungeon_list_.Clear();
}
::google::protobuf::uint64 PlayerCustomDungeonMuipData::publish_dungeon_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.PlayerCustomDungeonMuipData.publish_dungeon_list)
  return publish_dungeon_list_.Get(index);
}
void PlayerCustomDungeonMuipData::set_publish_dungeon_list(int index, ::google::protobuf::uint64 value) {
  publish_dungeon_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.PlayerCustomDungeonMuipData.publish_dungeon_list)
}
void PlayerCustomDungeonMuipData::add_publish_dungeon_list(::google::protobuf::uint64 value) {
  publish_dungeon_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.PlayerCustomDungeonMuipData.publish_dungeon_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
PlayerCustomDungeonMuipData::publish_dungeon_list() const {
  // @@protoc_insertion_point(field_list:proto.PlayerCustomDungeonMuipData.publish_dungeon_list)
  return publish_dungeon_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
PlayerCustomDungeonMuipData::mutable_publish_dungeon_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.PlayerCustomDungeonMuipData.publish_dungeon_list)
  return &publish_dungeon_list_;
}

// repeated uint64 store_dungeon_list = 3;
int PlayerCustomDungeonMuipData::store_dungeon_list_size() const {
  return store_dungeon_list_.size();
}
void PlayerCustomDungeonMuipData::clear_store_dungeon_list() {
  store_dungeon_list_.Clear();
}
::google::protobuf::uint64 PlayerCustomDungeonMuipData::store_dungeon_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.PlayerCustomDungeonMuipData.store_dungeon_list)
  return store_dungeon_list_.Get(index);
}
void PlayerCustomDungeonMuipData::set_store_dungeon_list(int index, ::google::protobuf::uint64 value) {
  store_dungeon_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.PlayerCustomDungeonMuipData.store_dungeon_list)
}
void PlayerCustomDungeonMuipData::add_store_dungeon_list(::google::protobuf::uint64 value) {
  store_dungeon_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.PlayerCustomDungeonMuipData.store_dungeon_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
PlayerCustomDungeonMuipData::store_dungeon_list() const {
  // @@protoc_insertion_point(field_list:proto.PlayerCustomDungeonMuipData.store_dungeon_list)
  return store_dungeon_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
PlayerCustomDungeonMuipData::mutable_store_dungeon_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.PlayerCustomDungeonMuipData.store_dungeon_list)
  return &store_dungeon_list_;
}

// repeated .proto.CustomDungeonBattleRecordMuipData battle_record_list = 4;
int PlayerCustomDungeonMuipData::battle_record_list_size() const {
  return battle_record_list_.size();
}
void PlayerCustomDungeonMuipData::clear_battle_record_list() {
  battle_record_list_.Clear();
}
const ::proto::CustomDungeonBattleRecordMuipData& PlayerCustomDungeonMuipData::battle_record_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.PlayerCustomDungeonMuipData.battle_record_list)
  return battle_record_list_.Get(index);
}
::proto::CustomDungeonBattleRecordMuipData* PlayerCustomDungeonMuipData::mutable_battle_record_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.PlayerCustomDungeonMuipData.battle_record_list)
  return battle_record_list_.Mutable(index);
}
::proto::CustomDungeonBattleRecordMuipData* PlayerCustomDungeonMuipData::add_battle_record_list() {
  // @@protoc_insertion_point(field_add:proto.PlayerCustomDungeonMuipData.battle_record_list)
  return battle_record_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::CustomDungeonBattleRecordMuipData >*
PlayerCustomDungeonMuipData::mutable_battle_record_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.PlayerCustomDungeonMuipData.battle_record_list)
  return &battle_record_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::CustomDungeonBattleRecordMuipData >&
PlayerCustomDungeonMuipData::battle_record_list() const {
  // @@protoc_insertion_point(field_list:proto.PlayerCustomDungeonMuipData.battle_record_list)
  return battle_record_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomDungeonSettingMuipData::kIsArriveFinishFieldNumber;
const int CustomDungeonSettingMuipData::kCoinLimitFieldNumber;
const int CustomDungeonSettingMuipData::kTimeLimitFieldNumber;
const int CustomDungeonSettingMuipData::kIsForbidSkillFieldNumber;
const int CustomDungeonSettingMuipData::kLifeNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomDungeonSettingMuipData::CustomDungeonSettingMuipData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CustomDungeonSettingMuipData)
}
CustomDungeonSettingMuipData::CustomDungeonSettingMuipData(const CustomDungeonSettingMuipData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&coin_limit_, &from.coin_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&life_num_) -
    reinterpret_cast<char*>(&coin_limit_)) + sizeof(life_num_));
  // @@protoc_insertion_point(copy_constructor:proto.CustomDungeonSettingMuipData)
}

void CustomDungeonSettingMuipData::SharedCtor() {
  ::memset(&coin_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&life_num_) -
      reinterpret_cast<char*>(&coin_limit_)) + sizeof(life_num_));
  _cached_size_ = 0;
}

CustomDungeonSettingMuipData::~CustomDungeonSettingMuipData() {
  // @@protoc_insertion_point(destructor:proto.CustomDungeonSettingMuipData)
  SharedDtor();
}

void CustomDungeonSettingMuipData::SharedDtor() {
}

void CustomDungeonSettingMuipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomDungeonSettingMuipData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomDungeonSettingMuipData& CustomDungeonSettingMuipData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

CustomDungeonSettingMuipData* CustomDungeonSettingMuipData::New(::google::protobuf::Arena* arena) const {
  CustomDungeonSettingMuipData* n = new CustomDungeonSettingMuipData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CustomDungeonSettingMuipData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CustomDungeonSettingMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&coin_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&life_num_) -
      reinterpret_cast<char*>(&coin_limit_)) + sizeof(life_num_));
  _internal_metadata_.Clear();
}

bool CustomDungeonSettingMuipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CustomDungeonSettingMuipData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_arrive_finish = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_arrive_finish_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 coin_limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 time_limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_forbid_skill = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_forbid_skill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 life_num = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &life_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CustomDungeonSettingMuipData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CustomDungeonSettingMuipData)
  return false;
#undef DO_
}

void CustomDungeonSettingMuipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CustomDungeonSettingMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_arrive_finish = 1;
  if (this->is_arrive_finish() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_arrive_finish(), output);
  }

  // uint32 coin_limit = 2;
  if (this->coin_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->coin_limit(), output);
  }

  // uint32 time_limit = 3;
  if (this->time_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_limit(), output);
  }

  // bool is_forbid_skill = 4;
  if (this->is_forbid_skill() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_forbid_skill(), output);
  }

  // uint32 life_num = 5;
  if (this->life_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->life_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CustomDungeonSettingMuipData)
}

::google::protobuf::uint8* CustomDungeonSettingMuipData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CustomDungeonSettingMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_arrive_finish = 1;
  if (this->is_arrive_finish() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_arrive_finish(), target);
  }

  // uint32 coin_limit = 2;
  if (this->coin_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->coin_limit(), target);
  }

  // uint32 time_limit = 3;
  if (this->time_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_limit(), target);
  }

  // bool is_forbid_skill = 4;
  if (this->is_forbid_skill() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_forbid_skill(), target);
  }

  // uint32 life_num = 5;
  if (this->life_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->life_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CustomDungeonSettingMuipData)
  return target;
}

size_t CustomDungeonSettingMuipData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CustomDungeonSettingMuipData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 coin_limit = 2;
  if (this->coin_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coin_limit());
  }

  // bool is_arrive_finish = 1;
  if (this->is_arrive_finish() != 0) {
    total_size += 1 + 1;
  }

  // bool is_forbid_skill = 4;
  if (this->is_forbid_skill() != 0) {
    total_size += 1 + 1;
  }

  // uint32 time_limit = 3;
  if (this->time_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time_limit());
  }

  // uint32 life_num = 5;
  if (this->life_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->life_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomDungeonSettingMuipData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CustomDungeonSettingMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomDungeonSettingMuipData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomDungeonSettingMuipData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CustomDungeonSettingMuipData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CustomDungeonSettingMuipData)
    MergeFrom(*source);
  }
}

void CustomDungeonSettingMuipData::MergeFrom(const CustomDungeonSettingMuipData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CustomDungeonSettingMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.coin_limit() != 0) {
    set_coin_limit(from.coin_limit());
  }
  if (from.is_arrive_finish() != 0) {
    set_is_arrive_finish(from.is_arrive_finish());
  }
  if (from.is_forbid_skill() != 0) {
    set_is_forbid_skill(from.is_forbid_skill());
  }
  if (from.time_limit() != 0) {
    set_time_limit(from.time_limit());
  }
  if (from.life_num() != 0) {
    set_life_num(from.life_num());
  }
}

void CustomDungeonSettingMuipData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CustomDungeonSettingMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomDungeonSettingMuipData::CopyFrom(const CustomDungeonSettingMuipData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CustomDungeonSettingMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomDungeonSettingMuipData::IsInitialized() const {
  return true;
}

void CustomDungeonSettingMuipData::Swap(CustomDungeonSettingMuipData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomDungeonSettingMuipData::InternalSwap(CustomDungeonSettingMuipData* other) {
  using std::swap;
  swap(coin_limit_, other->coin_limit_);
  swap(is_arrive_finish_, other->is_arrive_finish_);
  swap(is_forbid_skill_, other->is_forbid_skill_);
  swap(time_limit_, other->time_limit_);
  swap(life_num_, other->life_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CustomDungeonSettingMuipData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CustomDungeonSettingMuipData

// bool is_arrive_finish = 1;
void CustomDungeonSettingMuipData::clear_is_arrive_finish() {
  is_arrive_finish_ = false;
}
bool CustomDungeonSettingMuipData::is_arrive_finish() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonSettingMuipData.is_arrive_finish)
  return is_arrive_finish_;
}
void CustomDungeonSettingMuipData::set_is_arrive_finish(bool value) {
  
  is_arrive_finish_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonSettingMuipData.is_arrive_finish)
}

// uint32 coin_limit = 2;
void CustomDungeonSettingMuipData::clear_coin_limit() {
  coin_limit_ = 0u;
}
::google::protobuf::uint32 CustomDungeonSettingMuipData::coin_limit() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonSettingMuipData.coin_limit)
  return coin_limit_;
}
void CustomDungeonSettingMuipData::set_coin_limit(::google::protobuf::uint32 value) {
  
  coin_limit_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonSettingMuipData.coin_limit)
}

// uint32 time_limit = 3;
void CustomDungeonSettingMuipData::clear_time_limit() {
  time_limit_ = 0u;
}
::google::protobuf::uint32 CustomDungeonSettingMuipData::time_limit() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonSettingMuipData.time_limit)
  return time_limit_;
}
void CustomDungeonSettingMuipData::set_time_limit(::google::protobuf::uint32 value) {
  
  time_limit_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonSettingMuipData.time_limit)
}

// bool is_forbid_skill = 4;
void CustomDungeonSettingMuipData::clear_is_forbid_skill() {
  is_forbid_skill_ = false;
}
bool CustomDungeonSettingMuipData::is_forbid_skill() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonSettingMuipData.is_forbid_skill)
  return is_forbid_skill_;
}
void CustomDungeonSettingMuipData::set_is_forbid_skill(bool value) {
  
  is_forbid_skill_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonSettingMuipData.is_forbid_skill)
}

// uint32 life_num = 5;
void CustomDungeonSettingMuipData::clear_life_num() {
  life_num_ = 0u;
}
::google::protobuf::uint32 CustomDungeonSettingMuipData::life_num() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonSettingMuipData.life_num)
  return life_num_;
}
void CustomDungeonSettingMuipData::set_life_num(::google::protobuf::uint32 value) {
  
  life_num_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonSettingMuipData.life_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

CustomDungeonAbstractMuipData::CustomDungeonAbstractMuipData_BrickStatisticsMapEntry::CustomDungeonAbstractMuipData_BrickStatisticsMapEntry() {}
CustomDungeonAbstractMuipData::CustomDungeonAbstractMuipData_BrickStatisticsMapEntry::CustomDungeonAbstractMuipData_BrickStatisticsMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata CustomDungeonAbstractMuipData::CustomDungeonAbstractMuipData_BrickStatisticsMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[183];
}
void CustomDungeonAbstractMuipData::CustomDungeonAbstractMuipData_BrickStatisticsMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void CustomDungeonAbstractMuipData::CustomDungeonAbstractMuipData_BrickStatisticsMapEntry::MergeFrom(const CustomDungeonAbstractMuipData_BrickStatisticsMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomDungeonAbstractMuipData::kFirstPublishTimeFieldNumber;
const int CustomDungeonAbstractMuipData::kLastPublishTimeFieldNumber;
const int CustomDungeonAbstractMuipData::kBrickStatisticsMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomDungeonAbstractMuipData::CustomDungeonAbstractMuipData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CustomDungeonAbstractMuipData)
}
CustomDungeonAbstractMuipData::CustomDungeonAbstractMuipData(const CustomDungeonAbstractMuipData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  brick_statistics_map_.MergeFrom(from.brick_statistics_map_);
  ::memcpy(&first_publish_time_, &from.first_publish_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_publish_time_) -
    reinterpret_cast<char*>(&first_publish_time_)) + sizeof(last_publish_time_));
  // @@protoc_insertion_point(copy_constructor:proto.CustomDungeonAbstractMuipData)
}

void CustomDungeonAbstractMuipData::SharedCtor() {
  ::memset(&first_publish_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_publish_time_) -
      reinterpret_cast<char*>(&first_publish_time_)) + sizeof(last_publish_time_));
  _cached_size_ = 0;
}

CustomDungeonAbstractMuipData::~CustomDungeonAbstractMuipData() {
  // @@protoc_insertion_point(destructor:proto.CustomDungeonAbstractMuipData)
  SharedDtor();
}

void CustomDungeonAbstractMuipData::SharedDtor() {
}

void CustomDungeonAbstractMuipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomDungeonAbstractMuipData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomDungeonAbstractMuipData& CustomDungeonAbstractMuipData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

CustomDungeonAbstractMuipData* CustomDungeonAbstractMuipData::New(::google::protobuf::Arena* arena) const {
  CustomDungeonAbstractMuipData* n = new CustomDungeonAbstractMuipData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CustomDungeonAbstractMuipData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CustomDungeonAbstractMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  brick_statistics_map_.Clear();
  ::memset(&first_publish_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_publish_time_) -
      reinterpret_cast<char*>(&first_publish_time_)) + sizeof(last_publish_time_));
  _internal_metadata_.Clear();
}

bool CustomDungeonAbstractMuipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CustomDungeonAbstractMuipData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 first_publish_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_publish_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 last_publish_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_publish_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> brick_statistics_map = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          CustomDungeonAbstractMuipData_BrickStatisticsMapEntry::Parser< ::google::protobuf::internal::MapField<
              CustomDungeonAbstractMuipData_BrickStatisticsMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&brick_statistics_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CustomDungeonAbstractMuipData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CustomDungeonAbstractMuipData)
  return false;
#undef DO_
}

void CustomDungeonAbstractMuipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CustomDungeonAbstractMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 first_publish_time = 1;
  if (this->first_publish_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->first_publish_time(), output);
  }

  // uint32 last_publish_time = 2;
  if (this->last_publish_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_publish_time(), output);
  }

  // map<uint32, uint32> brick_statistics_map = 3;
  if (!this->brick_statistics_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->brick_statistics_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->brick_statistics_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->brick_statistics_map().begin();
          it != this->brick_statistics_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<CustomDungeonAbstractMuipData_BrickStatisticsMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(brick_statistics_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<CustomDungeonAbstractMuipData_BrickStatisticsMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->brick_statistics_map().begin();
          it != this->brick_statistics_map().end(); ++it) {
        entry.reset(brick_statistics_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CustomDungeonAbstractMuipData)
}

::google::protobuf::uint8* CustomDungeonAbstractMuipData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CustomDungeonAbstractMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 first_publish_time = 1;
  if (this->first_publish_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->first_publish_time(), target);
  }

  // uint32 last_publish_time = 2;
  if (this->last_publish_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_publish_time(), target);
  }

  // map<uint32, uint32> brick_statistics_map = 3;
  if (!this->brick_statistics_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->brick_statistics_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->brick_statistics_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->brick_statistics_map().begin();
          it != this->brick_statistics_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<CustomDungeonAbstractMuipData_BrickStatisticsMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(brick_statistics_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<CustomDungeonAbstractMuipData_BrickStatisticsMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->brick_statistics_map().begin();
          it != this->brick_statistics_map().end(); ++it) {
        entry.reset(brick_statistics_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CustomDungeonAbstractMuipData)
  return target;
}

size_t CustomDungeonAbstractMuipData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CustomDungeonAbstractMuipData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, uint32> brick_statistics_map = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->brick_statistics_map_size());
  {
    ::google::protobuf::scoped_ptr<CustomDungeonAbstractMuipData_BrickStatisticsMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->brick_statistics_map().begin();
        it != this->brick_statistics_map().end(); ++it) {
      entry.reset(brick_statistics_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 first_publish_time = 1;
  if (this->first_publish_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->first_publish_time());
  }

  // uint32 last_publish_time = 2;
  if (this->last_publish_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->last_publish_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomDungeonAbstractMuipData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CustomDungeonAbstractMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomDungeonAbstractMuipData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomDungeonAbstractMuipData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CustomDungeonAbstractMuipData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CustomDungeonAbstractMuipData)
    MergeFrom(*source);
  }
}

void CustomDungeonAbstractMuipData::MergeFrom(const CustomDungeonAbstractMuipData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CustomDungeonAbstractMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  brick_statistics_map_.MergeFrom(from.brick_statistics_map_);
  if (from.first_publish_time() != 0) {
    set_first_publish_time(from.first_publish_time());
  }
  if (from.last_publish_time() != 0) {
    set_last_publish_time(from.last_publish_time());
  }
}

void CustomDungeonAbstractMuipData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CustomDungeonAbstractMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomDungeonAbstractMuipData::CopyFrom(const CustomDungeonAbstractMuipData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CustomDungeonAbstractMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomDungeonAbstractMuipData::IsInitialized() const {
  return true;
}

void CustomDungeonAbstractMuipData::Swap(CustomDungeonAbstractMuipData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomDungeonAbstractMuipData::InternalSwap(CustomDungeonAbstractMuipData* other) {
  using std::swap;
  brick_statistics_map_.Swap(&other->brick_statistics_map_);
  swap(first_publish_time_, other->first_publish_time_);
  swap(last_publish_time_, other->last_publish_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CustomDungeonAbstractMuipData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CustomDungeonAbstractMuipData

// uint32 first_publish_time = 1;
void CustomDungeonAbstractMuipData::clear_first_publish_time() {
  first_publish_time_ = 0u;
}
::google::protobuf::uint32 CustomDungeonAbstractMuipData::first_publish_time() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonAbstractMuipData.first_publish_time)
  return first_publish_time_;
}
void CustomDungeonAbstractMuipData::set_first_publish_time(::google::protobuf::uint32 value) {
  
  first_publish_time_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonAbstractMuipData.first_publish_time)
}

// uint32 last_publish_time = 2;
void CustomDungeonAbstractMuipData::clear_last_publish_time() {
  last_publish_time_ = 0u;
}
::google::protobuf::uint32 CustomDungeonAbstractMuipData::last_publish_time() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonAbstractMuipData.last_publish_time)
  return last_publish_time_;
}
void CustomDungeonAbstractMuipData::set_last_publish_time(::google::protobuf::uint32 value) {
  
  last_publish_time_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonAbstractMuipData.last_publish_time)
}

// map<uint32, uint32> brick_statistics_map = 3;
int CustomDungeonAbstractMuipData::brick_statistics_map_size() const {
  return brick_statistics_map_.size();
}
void CustomDungeonAbstractMuipData::clear_brick_statistics_map() {
  brick_statistics_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
CustomDungeonAbstractMuipData::brick_statistics_map() const {
  // @@protoc_insertion_point(field_map:proto.CustomDungeonAbstractMuipData.brick_statistics_map)
  return brick_statistics_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
CustomDungeonAbstractMuipData::mutable_brick_statistics_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.CustomDungeonAbstractMuipData.brick_statistics_map)
  return brick_statistics_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomDungeonSocialMuipData::kPlayNumFieldNumber;
const int CustomDungeonSocialMuipData::kLikeNumFieldNumber;
const int CustomDungeonSocialMuipData::kStoreNumFieldNumber;
const int CustomDungeonSocialMuipData::kWinNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomDungeonSocialMuipData::CustomDungeonSocialMuipData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CustomDungeonSocialMuipData)
}
CustomDungeonSocialMuipData::CustomDungeonSocialMuipData(const CustomDungeonSocialMuipData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&play_num_, &from.play_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&win_num_) -
    reinterpret_cast<char*>(&play_num_)) + sizeof(win_num_));
  // @@protoc_insertion_point(copy_constructor:proto.CustomDungeonSocialMuipData)
}

void CustomDungeonSocialMuipData::SharedCtor() {
  ::memset(&play_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&win_num_) -
      reinterpret_cast<char*>(&play_num_)) + sizeof(win_num_));
  _cached_size_ = 0;
}

CustomDungeonSocialMuipData::~CustomDungeonSocialMuipData() {
  // @@protoc_insertion_point(destructor:proto.CustomDungeonSocialMuipData)
  SharedDtor();
}

void CustomDungeonSocialMuipData::SharedDtor() {
}

void CustomDungeonSocialMuipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomDungeonSocialMuipData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomDungeonSocialMuipData& CustomDungeonSocialMuipData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

CustomDungeonSocialMuipData* CustomDungeonSocialMuipData::New(::google::protobuf::Arena* arena) const {
  CustomDungeonSocialMuipData* n = new CustomDungeonSocialMuipData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CustomDungeonSocialMuipData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CustomDungeonSocialMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&play_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&win_num_) -
      reinterpret_cast<char*>(&play_num_)) + sizeof(win_num_));
  _internal_metadata_.Clear();
}

bool CustomDungeonSocialMuipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CustomDungeonSocialMuipData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 play_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 like_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &like_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 store_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &store_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 win_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CustomDungeonSocialMuipData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CustomDungeonSocialMuipData)
  return false;
#undef DO_
}

void CustomDungeonSocialMuipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CustomDungeonSocialMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_num = 1;
  if (this->play_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->play_num(), output);
  }

  // uint32 like_num = 2;
  if (this->like_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->like_num(), output);
  }

  // uint32 store_num = 3;
  if (this->store_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->store_num(), output);
  }

  // uint32 win_num = 4;
  if (this->win_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->win_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CustomDungeonSocialMuipData)
}

::google::protobuf::uint8* CustomDungeonSocialMuipData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CustomDungeonSocialMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_num = 1;
  if (this->play_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->play_num(), target);
  }

  // uint32 like_num = 2;
  if (this->like_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->like_num(), target);
  }

  // uint32 store_num = 3;
  if (this->store_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->store_num(), target);
  }

  // uint32 win_num = 4;
  if (this->win_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->win_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CustomDungeonSocialMuipData)
  return target;
}

size_t CustomDungeonSocialMuipData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CustomDungeonSocialMuipData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 play_num = 1;
  if (this->play_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_num());
  }

  // uint32 like_num = 2;
  if (this->like_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->like_num());
  }

  // uint32 store_num = 3;
  if (this->store_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->store_num());
  }

  // uint32 win_num = 4;
  if (this->win_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->win_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomDungeonSocialMuipData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CustomDungeonSocialMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomDungeonSocialMuipData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomDungeonSocialMuipData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CustomDungeonSocialMuipData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CustomDungeonSocialMuipData)
    MergeFrom(*source);
  }
}

void CustomDungeonSocialMuipData::MergeFrom(const CustomDungeonSocialMuipData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CustomDungeonSocialMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.play_num() != 0) {
    set_play_num(from.play_num());
  }
  if (from.like_num() != 0) {
    set_like_num(from.like_num());
  }
  if (from.store_num() != 0) {
    set_store_num(from.store_num());
  }
  if (from.win_num() != 0) {
    set_win_num(from.win_num());
  }
}

void CustomDungeonSocialMuipData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CustomDungeonSocialMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomDungeonSocialMuipData::CopyFrom(const CustomDungeonSocialMuipData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CustomDungeonSocialMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomDungeonSocialMuipData::IsInitialized() const {
  return true;
}

void CustomDungeonSocialMuipData::Swap(CustomDungeonSocialMuipData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomDungeonSocialMuipData::InternalSwap(CustomDungeonSocialMuipData* other) {
  using std::swap;
  swap(play_num_, other->play_num_);
  swap(like_num_, other->like_num_);
  swap(store_num_, other->store_num_);
  swap(win_num_, other->win_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CustomDungeonSocialMuipData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CustomDungeonSocialMuipData

// uint32 play_num = 1;
void CustomDungeonSocialMuipData::clear_play_num() {
  play_num_ = 0u;
}
::google::protobuf::uint32 CustomDungeonSocialMuipData::play_num() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonSocialMuipData.play_num)
  return play_num_;
}
void CustomDungeonSocialMuipData::set_play_num(::google::protobuf::uint32 value) {
  
  play_num_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonSocialMuipData.play_num)
}

// uint32 like_num = 2;
void CustomDungeonSocialMuipData::clear_like_num() {
  like_num_ = 0u;
}
::google::protobuf::uint32 CustomDungeonSocialMuipData::like_num() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonSocialMuipData.like_num)
  return like_num_;
}
void CustomDungeonSocialMuipData::set_like_num(::google::protobuf::uint32 value) {
  
  like_num_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonSocialMuipData.like_num)
}

// uint32 store_num = 3;
void CustomDungeonSocialMuipData::clear_store_num() {
  store_num_ = 0u;
}
::google::protobuf::uint32 CustomDungeonSocialMuipData::store_num() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonSocialMuipData.store_num)
  return store_num_;
}
void CustomDungeonSocialMuipData::set_store_num(::google::protobuf::uint32 value) {
  
  store_num_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonSocialMuipData.store_num)
}

// uint32 win_num = 4;
void CustomDungeonSocialMuipData::clear_win_num() {
  win_num_ = 0u;
}
::google::protobuf::uint32 CustomDungeonSocialMuipData::win_num() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonSocialMuipData.win_num)
  return win_num_;
}
void CustomDungeonSocialMuipData::set_win_num(::google::protobuf::uint32 value) {
  
  win_num_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonSocialMuipData.win_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomDungeonBriefMuipData::kDungeonGuidFieldNumber;
const int CustomDungeonBriefMuipData::kDungeonIdFieldNumber;
const int CustomDungeonBriefMuipData::kCreatorNicknameFieldNumber;
const int CustomDungeonBriefMuipData::kTagListFieldNumber;
const int CustomDungeonBriefMuipData::kSettingFieldNumber;
const int CustomDungeonBriefMuipData::kAbstractFieldNumber;
const int CustomDungeonBriefMuipData::kSocialFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomDungeonBriefMuipData::CustomDungeonBriefMuipData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CustomDungeonBriefMuipData)
}
CustomDungeonBriefMuipData::CustomDungeonBriefMuipData(const CustomDungeonBriefMuipData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tag_list_(from.tag_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  creator_nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.creator_nickname().size() > 0) {
    creator_nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_nickname_);
  }
  if (from.has_setting()) {
    setting_ = new ::proto::CustomDungeonSettingMuipData(*from.setting_);
  } else {
    setting_ = NULL;
  }
  if (from.has_abstract()) {
    abstract_ = new ::proto::CustomDungeonAbstractMuipData(*from.abstract_);
  } else {
    abstract_ = NULL;
  }
  if (from.has_social()) {
    social_ = new ::proto::CustomDungeonSocialMuipData(*from.social_);
  } else {
    social_ = NULL;
  }
  ::memcpy(&dungeon_guid_, &from.dungeon_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dungeon_id_) -
    reinterpret_cast<char*>(&dungeon_guid_)) + sizeof(dungeon_id_));
  // @@protoc_insertion_point(copy_constructor:proto.CustomDungeonBriefMuipData)
}

void CustomDungeonBriefMuipData::SharedCtor() {
  creator_nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&setting_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dungeon_id_) -
      reinterpret_cast<char*>(&setting_)) + sizeof(dungeon_id_));
  _cached_size_ = 0;
}

CustomDungeonBriefMuipData::~CustomDungeonBriefMuipData() {
  // @@protoc_insertion_point(destructor:proto.CustomDungeonBriefMuipData)
  SharedDtor();
}

void CustomDungeonBriefMuipData::SharedDtor() {
  creator_nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete setting_;
  if (this != internal_default_instance()) delete abstract_;
  if (this != internal_default_instance()) delete social_;
}

void CustomDungeonBriefMuipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomDungeonBriefMuipData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomDungeonBriefMuipData& CustomDungeonBriefMuipData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

CustomDungeonBriefMuipData* CustomDungeonBriefMuipData::New(::google::protobuf::Arena* arena) const {
  CustomDungeonBriefMuipData* n = new CustomDungeonBriefMuipData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CustomDungeonBriefMuipData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CustomDungeonBriefMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_list_.Clear();
  creator_nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && setting_ != NULL) {
    delete setting_;
  }
  setting_ = NULL;
  if (GetArenaNoVirtual() == NULL && abstract_ != NULL) {
    delete abstract_;
  }
  abstract_ = NULL;
  if (GetArenaNoVirtual() == NULL && social_ != NULL) {
    delete social_;
  }
  social_ = NULL;
  ::memset(&dungeon_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dungeon_id_) -
      reinterpret_cast<char*>(&dungeon_guid_)) + sizeof(dungeon_id_));
  _internal_metadata_.Clear();
}

bool CustomDungeonBriefMuipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CustomDungeonBriefMuipData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 dungeon_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dungeon_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dungeon_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string creator_nickname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->creator_nickname().data(), static_cast<int>(this->creator_nickname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.CustomDungeonBriefMuipData.creator_nickname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 tag_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tag_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_tag_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.CustomDungeonSettingMuipData setting = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.CustomDungeonAbstractMuipData abstract = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_abstract()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.CustomDungeonSocialMuipData social = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_social()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CustomDungeonBriefMuipData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CustomDungeonBriefMuipData)
  return false;
#undef DO_
}

void CustomDungeonBriefMuipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CustomDungeonBriefMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 dungeon_guid = 1;
  if (this->dungeon_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dungeon_guid(), output);
  }

  // uint32 dungeon_id = 2;
  if (this->dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dungeon_id(), output);
  }

  // string creator_nickname = 3;
  if (this->creator_nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator_nickname().data(), static_cast<int>(this->creator_nickname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.CustomDungeonBriefMuipData.creator_nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->creator_nickname(), output);
  }

  // repeated uint32 tag_list = 4;
  if (this->tag_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _tag_list_cached_byte_size_));
  }
  for (int i = 0, n = this->tag_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->tag_list(i), output);
  }

  // .proto.CustomDungeonSettingMuipData setting = 5;
  if (this->has_setting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->setting_, output);
  }

  // .proto.CustomDungeonAbstractMuipData abstract = 6;
  if (this->has_abstract()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->abstract_, output);
  }

  // .proto.CustomDungeonSocialMuipData social = 7;
  if (this->has_social()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->social_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CustomDungeonBriefMuipData)
}

::google::protobuf::uint8* CustomDungeonBriefMuipData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CustomDungeonBriefMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 dungeon_guid = 1;
  if (this->dungeon_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dungeon_guid(), target);
  }

  // uint32 dungeon_id = 2;
  if (this->dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dungeon_id(), target);
  }

  // string creator_nickname = 3;
  if (this->creator_nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator_nickname().data(), static_cast<int>(this->creator_nickname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.CustomDungeonBriefMuipData.creator_nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->creator_nickname(), target);
  }

  // repeated uint32 tag_list = 4;
  if (this->tag_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _tag_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->tag_list_, target);
  }

  // .proto.CustomDungeonSettingMuipData setting = 5;
  if (this->has_setting()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->setting_, deterministic, target);
  }

  // .proto.CustomDungeonAbstractMuipData abstract = 6;
  if (this->has_abstract()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->abstract_, deterministic, target);
  }

  // .proto.CustomDungeonSocialMuipData social = 7;
  if (this->has_social()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->social_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CustomDungeonBriefMuipData)
  return target;
}

size_t CustomDungeonBriefMuipData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CustomDungeonBriefMuipData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 tag_list = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->tag_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tag_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string creator_nickname = 3;
  if (this->creator_nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->creator_nickname());
  }

  // .proto.CustomDungeonSettingMuipData setting = 5;
  if (this->has_setting()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->setting_);
  }

  // .proto.CustomDungeonAbstractMuipData abstract = 6;
  if (this->has_abstract()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->abstract_);
  }

  // .proto.CustomDungeonSocialMuipData social = 7;
  if (this->has_social()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->social_);
  }

  // uint64 dungeon_guid = 1;
  if (this->dungeon_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dungeon_guid());
  }

  // uint32 dungeon_id = 2;
  if (this->dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomDungeonBriefMuipData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CustomDungeonBriefMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomDungeonBriefMuipData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomDungeonBriefMuipData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CustomDungeonBriefMuipData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CustomDungeonBriefMuipData)
    MergeFrom(*source);
  }
}

void CustomDungeonBriefMuipData::MergeFrom(const CustomDungeonBriefMuipData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CustomDungeonBriefMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tag_list_.MergeFrom(from.tag_list_);
  if (from.creator_nickname().size() > 0) {

    creator_nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_nickname_);
  }
  if (from.has_setting()) {
    mutable_setting()->::proto::CustomDungeonSettingMuipData::MergeFrom(from.setting());
  }
  if (from.has_abstract()) {
    mutable_abstract()->::proto::CustomDungeonAbstractMuipData::MergeFrom(from.abstract());
  }
  if (from.has_social()) {
    mutable_social()->::proto::CustomDungeonSocialMuipData::MergeFrom(from.social());
  }
  if (from.dungeon_guid() != 0) {
    set_dungeon_guid(from.dungeon_guid());
  }
  if (from.dungeon_id() != 0) {
    set_dungeon_id(from.dungeon_id());
  }
}

void CustomDungeonBriefMuipData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CustomDungeonBriefMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomDungeonBriefMuipData::CopyFrom(const CustomDungeonBriefMuipData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CustomDungeonBriefMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomDungeonBriefMuipData::IsInitialized() const {
  return true;
}

void CustomDungeonBriefMuipData::Swap(CustomDungeonBriefMuipData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomDungeonBriefMuipData::InternalSwap(CustomDungeonBriefMuipData* other) {
  using std::swap;
  tag_list_.InternalSwap(&other->tag_list_);
  creator_nickname_.Swap(&other->creator_nickname_);
  swap(setting_, other->setting_);
  swap(abstract_, other->abstract_);
  swap(social_, other->social_);
  swap(dungeon_guid_, other->dungeon_guid_);
  swap(dungeon_id_, other->dungeon_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CustomDungeonBriefMuipData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CustomDungeonBriefMuipData

// uint64 dungeon_guid = 1;
void CustomDungeonBriefMuipData::clear_dungeon_guid() {
  dungeon_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CustomDungeonBriefMuipData::dungeon_guid() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonBriefMuipData.dungeon_guid)
  return dungeon_guid_;
}
void CustomDungeonBriefMuipData::set_dungeon_guid(::google::protobuf::uint64 value) {
  
  dungeon_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonBriefMuipData.dungeon_guid)
}

// uint32 dungeon_id = 2;
void CustomDungeonBriefMuipData::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
::google::protobuf::uint32 CustomDungeonBriefMuipData::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonBriefMuipData.dungeon_id)
  return dungeon_id_;
}
void CustomDungeonBriefMuipData::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonBriefMuipData.dungeon_id)
}

// string creator_nickname = 3;
void CustomDungeonBriefMuipData::clear_creator_nickname() {
  creator_nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CustomDungeonBriefMuipData::creator_nickname() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonBriefMuipData.creator_nickname)
  return creator_nickname_.GetNoArena();
}
void CustomDungeonBriefMuipData::set_creator_nickname(const ::std::string& value) {
  
  creator_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.CustomDungeonBriefMuipData.creator_nickname)
}
#if LANG_CXX11
void CustomDungeonBriefMuipData::set_creator_nickname(::std::string&& value) {
  
  creator_nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.CustomDungeonBriefMuipData.creator_nickname)
}
#endif
void CustomDungeonBriefMuipData::set_creator_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  creator_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.CustomDungeonBriefMuipData.creator_nickname)
}
void CustomDungeonBriefMuipData::set_creator_nickname(const char* value, size_t size) {
  
  creator_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.CustomDungeonBriefMuipData.creator_nickname)
}
::std::string* CustomDungeonBriefMuipData::mutable_creator_nickname() {
  
  // @@protoc_insertion_point(field_mutable:proto.CustomDungeonBriefMuipData.creator_nickname)
  return creator_nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CustomDungeonBriefMuipData::release_creator_nickname() {
  // @@protoc_insertion_point(field_release:proto.CustomDungeonBriefMuipData.creator_nickname)
  
  return creator_nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CustomDungeonBriefMuipData::set_allocated_creator_nickname(::std::string* creator_nickname) {
  if (creator_nickname != NULL) {
    
  } else {
    
  }
  creator_nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creator_nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.CustomDungeonBriefMuipData.creator_nickname)
}

// repeated uint32 tag_list = 4;
int CustomDungeonBriefMuipData::tag_list_size() const {
  return tag_list_.size();
}
void CustomDungeonBriefMuipData::clear_tag_list() {
  tag_list_.Clear();
}
::google::protobuf::uint32 CustomDungeonBriefMuipData::tag_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonBriefMuipData.tag_list)
  return tag_list_.Get(index);
}
void CustomDungeonBriefMuipData::set_tag_list(int index, ::google::protobuf::uint32 value) {
  tag_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.CustomDungeonBriefMuipData.tag_list)
}
void CustomDungeonBriefMuipData::add_tag_list(::google::protobuf::uint32 value) {
  tag_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.CustomDungeonBriefMuipData.tag_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CustomDungeonBriefMuipData::tag_list() const {
  // @@protoc_insertion_point(field_list:proto.CustomDungeonBriefMuipData.tag_list)
  return tag_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CustomDungeonBriefMuipData::mutable_tag_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.CustomDungeonBriefMuipData.tag_list)
  return &tag_list_;
}

// .proto.CustomDungeonSettingMuipData setting = 5;
bool CustomDungeonBriefMuipData::has_setting() const {
  return this != internal_default_instance() && setting_ != NULL;
}
void CustomDungeonBriefMuipData::clear_setting() {
  if (GetArenaNoVirtual() == NULL && setting_ != NULL) delete setting_;
  setting_ = NULL;
}
const ::proto::CustomDungeonSettingMuipData& CustomDungeonBriefMuipData::setting() const {
  const ::proto::CustomDungeonSettingMuipData* p = setting_;
  // @@protoc_insertion_point(field_get:proto.CustomDungeonBriefMuipData.setting)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::CustomDungeonSettingMuipData*>(
      &::proto::_CustomDungeonSettingMuipData_default_instance_);
}
::proto::CustomDungeonSettingMuipData* CustomDungeonBriefMuipData::mutable_setting() {
  
  if (setting_ == NULL) {
    setting_ = new ::proto::CustomDungeonSettingMuipData;
  }
  // @@protoc_insertion_point(field_mutable:proto.CustomDungeonBriefMuipData.setting)
  return setting_;
}
::proto::CustomDungeonSettingMuipData* CustomDungeonBriefMuipData::release_setting() {
  // @@protoc_insertion_point(field_release:proto.CustomDungeonBriefMuipData.setting)
  
  ::proto::CustomDungeonSettingMuipData* temp = setting_;
  setting_ = NULL;
  return temp;
}
void CustomDungeonBriefMuipData::set_allocated_setting(::proto::CustomDungeonSettingMuipData* setting) {
  delete setting_;
  setting_ = setting;
  if (setting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CustomDungeonBriefMuipData.setting)
}

// .proto.CustomDungeonAbstractMuipData abstract = 6;
bool CustomDungeonBriefMuipData::has_abstract() const {
  return this != internal_default_instance() && abstract_ != NULL;
}
void CustomDungeonBriefMuipData::clear_abstract() {
  if (GetArenaNoVirtual() == NULL && abstract_ != NULL) delete abstract_;
  abstract_ = NULL;
}
const ::proto::CustomDungeonAbstractMuipData& CustomDungeonBriefMuipData::abstract() const {
  const ::proto::CustomDungeonAbstractMuipData* p = abstract_;
  // @@protoc_insertion_point(field_get:proto.CustomDungeonBriefMuipData.abstract)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::CustomDungeonAbstractMuipData*>(
      &::proto::_CustomDungeonAbstractMuipData_default_instance_);
}
::proto::CustomDungeonAbstractMuipData* CustomDungeonBriefMuipData::mutable_abstract() {
  
  if (abstract_ == NULL) {
    abstract_ = new ::proto::CustomDungeonAbstractMuipData;
  }
  // @@protoc_insertion_point(field_mutable:proto.CustomDungeonBriefMuipData.abstract)
  return abstract_;
}
::proto::CustomDungeonAbstractMuipData* CustomDungeonBriefMuipData::release_abstract() {
  // @@protoc_insertion_point(field_release:proto.CustomDungeonBriefMuipData.abstract)
  
  ::proto::CustomDungeonAbstractMuipData* temp = abstract_;
  abstract_ = NULL;
  return temp;
}
void CustomDungeonBriefMuipData::set_allocated_abstract(::proto::CustomDungeonAbstractMuipData* abstract) {
  delete abstract_;
  abstract_ = abstract;
  if (abstract) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CustomDungeonBriefMuipData.abstract)
}

// .proto.CustomDungeonSocialMuipData social = 7;
bool CustomDungeonBriefMuipData::has_social() const {
  return this != internal_default_instance() && social_ != NULL;
}
void CustomDungeonBriefMuipData::clear_social() {
  if (GetArenaNoVirtual() == NULL && social_ != NULL) delete social_;
  social_ = NULL;
}
const ::proto::CustomDungeonSocialMuipData& CustomDungeonBriefMuipData::social() const {
  const ::proto::CustomDungeonSocialMuipData* p = social_;
  // @@protoc_insertion_point(field_get:proto.CustomDungeonBriefMuipData.social)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::CustomDungeonSocialMuipData*>(
      &::proto::_CustomDungeonSocialMuipData_default_instance_);
}
::proto::CustomDungeonSocialMuipData* CustomDungeonBriefMuipData::mutable_social() {
  
  if (social_ == NULL) {
    social_ = new ::proto::CustomDungeonSocialMuipData;
  }
  // @@protoc_insertion_point(field_mutable:proto.CustomDungeonBriefMuipData.social)
  return social_;
}
::proto::CustomDungeonSocialMuipData* CustomDungeonBriefMuipData::release_social() {
  // @@protoc_insertion_point(field_release:proto.CustomDungeonBriefMuipData.social)
  
  ::proto::CustomDungeonSocialMuipData* temp = social_;
  social_ = NULL;
  return temp;
}
void CustomDungeonBriefMuipData::set_allocated_social(::proto::CustomDungeonSocialMuipData* social) {
  delete social_;
  social_ = social;
  if (social) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CustomDungeonBriefMuipData.social)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomDungeonBatchBriefMuipData::kBriefListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomDungeonBatchBriefMuipData::CustomDungeonBatchBriefMuipData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CustomDungeonBatchBriefMuipData)
}
CustomDungeonBatchBriefMuipData::CustomDungeonBatchBriefMuipData(const CustomDungeonBatchBriefMuipData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      brief_list_(from.brief_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.CustomDungeonBatchBriefMuipData)
}

void CustomDungeonBatchBriefMuipData::SharedCtor() {
  _cached_size_ = 0;
}

CustomDungeonBatchBriefMuipData::~CustomDungeonBatchBriefMuipData() {
  // @@protoc_insertion_point(destructor:proto.CustomDungeonBatchBriefMuipData)
  SharedDtor();
}

void CustomDungeonBatchBriefMuipData::SharedDtor() {
}

void CustomDungeonBatchBriefMuipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomDungeonBatchBriefMuipData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomDungeonBatchBriefMuipData& CustomDungeonBatchBriefMuipData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

CustomDungeonBatchBriefMuipData* CustomDungeonBatchBriefMuipData::New(::google::protobuf::Arena* arena) const {
  CustomDungeonBatchBriefMuipData* n = new CustomDungeonBatchBriefMuipData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CustomDungeonBatchBriefMuipData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CustomDungeonBatchBriefMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  brief_list_.Clear();
  _internal_metadata_.Clear();
}

bool CustomDungeonBatchBriefMuipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CustomDungeonBatchBriefMuipData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.CustomDungeonBriefMuipData brief_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_brief_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CustomDungeonBatchBriefMuipData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CustomDungeonBatchBriefMuipData)
  return false;
#undef DO_
}

void CustomDungeonBatchBriefMuipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CustomDungeonBatchBriefMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.CustomDungeonBriefMuipData brief_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->brief_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->brief_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CustomDungeonBatchBriefMuipData)
}

::google::protobuf::uint8* CustomDungeonBatchBriefMuipData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CustomDungeonBatchBriefMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.CustomDungeonBriefMuipData brief_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->brief_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->brief_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CustomDungeonBatchBriefMuipData)
  return target;
}

size_t CustomDungeonBatchBriefMuipData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CustomDungeonBatchBriefMuipData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.CustomDungeonBriefMuipData brief_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->brief_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->brief_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomDungeonBatchBriefMuipData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CustomDungeonBatchBriefMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomDungeonBatchBriefMuipData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomDungeonBatchBriefMuipData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CustomDungeonBatchBriefMuipData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CustomDungeonBatchBriefMuipData)
    MergeFrom(*source);
  }
}

void CustomDungeonBatchBriefMuipData::MergeFrom(const CustomDungeonBatchBriefMuipData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CustomDungeonBatchBriefMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  brief_list_.MergeFrom(from.brief_list_);
}

void CustomDungeonBatchBriefMuipData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CustomDungeonBatchBriefMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomDungeonBatchBriefMuipData::CopyFrom(const CustomDungeonBatchBriefMuipData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CustomDungeonBatchBriefMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomDungeonBatchBriefMuipData::IsInitialized() const {
  return true;
}

void CustomDungeonBatchBriefMuipData::Swap(CustomDungeonBatchBriefMuipData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomDungeonBatchBriefMuipData::InternalSwap(CustomDungeonBatchBriefMuipData* other) {
  using std::swap;
  brief_list_.InternalSwap(&other->brief_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CustomDungeonBatchBriefMuipData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CustomDungeonBatchBriefMuipData

// repeated .proto.CustomDungeonBriefMuipData brief_list = 1;
int CustomDungeonBatchBriefMuipData::brief_list_size() const {
  return brief_list_.size();
}
void CustomDungeonBatchBriefMuipData::clear_brief_list() {
  brief_list_.Clear();
}
const ::proto::CustomDungeonBriefMuipData& CustomDungeonBatchBriefMuipData::brief_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonBatchBriefMuipData.brief_list)
  return brief_list_.Get(index);
}
::proto::CustomDungeonBriefMuipData* CustomDungeonBatchBriefMuipData::mutable_brief_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CustomDungeonBatchBriefMuipData.brief_list)
  return brief_list_.Mutable(index);
}
::proto::CustomDungeonBriefMuipData* CustomDungeonBatchBriefMuipData::add_brief_list() {
  // @@protoc_insertion_point(field_add:proto.CustomDungeonBatchBriefMuipData.brief_list)
  return brief_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::CustomDungeonBriefMuipData >*
CustomDungeonBatchBriefMuipData::mutable_brief_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.CustomDungeonBatchBriefMuipData.brief_list)
  return &brief_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::CustomDungeonBriefMuipData >&
CustomDungeonBatchBriefMuipData::brief_list() const {
  // @@protoc_insertion_point(field_list:proto.CustomDungeonBatchBriefMuipData.brief_list)
  return brief_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HomeBlueprintBriefMuipData::kShareCodeFieldNumber;
const int HomeBlueprintBriefMuipData::kOwnerUidFieldNumber;
const int HomeBlueprintBriefMuipData::kModuleIdFieldNumber;
const int HomeBlueprintBriefMuipData::kSceneIdFieldNumber;
const int HomeBlueprintBriefMuipData::kBlockIdFieldNumber;
const int HomeBlueprintBriefMuipData::kIsAllowCopyFieldNumber;
const int HomeBlueprintBriefMuipData::kCreateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HomeBlueprintBriefMuipData::HomeBlueprintBriefMuipData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HomeBlueprintBriefMuipData)
}
HomeBlueprintBriefMuipData::HomeBlueprintBriefMuipData(const HomeBlueprintBriefMuipData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  share_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.share_code().size() > 0) {
    share_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.share_code_);
  }
  ::memcpy(&owner_uid_, &from.owner_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&create_time_) -
    reinterpret_cast<char*>(&owner_uid_)) + sizeof(create_time_));
  // @@protoc_insertion_point(copy_constructor:proto.HomeBlueprintBriefMuipData)
}

void HomeBlueprintBriefMuipData::SharedCtor() {
  share_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&owner_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) -
      reinterpret_cast<char*>(&owner_uid_)) + sizeof(create_time_));
  _cached_size_ = 0;
}

HomeBlueprintBriefMuipData::~HomeBlueprintBriefMuipData() {
  // @@protoc_insertion_point(destructor:proto.HomeBlueprintBriefMuipData)
  SharedDtor();
}

void HomeBlueprintBriefMuipData::SharedDtor() {
  share_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HomeBlueprintBriefMuipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HomeBlueprintBriefMuipData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HomeBlueprintBriefMuipData& HomeBlueprintBriefMuipData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

HomeBlueprintBriefMuipData* HomeBlueprintBriefMuipData::New(::google::protobuf::Arena* arena) const {
  HomeBlueprintBriefMuipData* n = new HomeBlueprintBriefMuipData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HomeBlueprintBriefMuipData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HomeBlueprintBriefMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  share_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&owner_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) -
      reinterpret_cast<char*>(&owner_uid_)) + sizeof(create_time_));
  _internal_metadata_.Clear();
}

bool HomeBlueprintBriefMuipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HomeBlueprintBriefMuipData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string share_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_share_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->share_code().data(), static_cast<int>(this->share_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.HomeBlueprintBriefMuipData.share_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 owner_uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 module_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &module_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 scene_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 block_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_allow_copy = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_allow_copy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 create_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HomeBlueprintBriefMuipData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HomeBlueprintBriefMuipData)
  return false;
#undef DO_
}

void HomeBlueprintBriefMuipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HomeBlueprintBriefMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string share_code = 1;
  if (this->share_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->share_code().data(), static_cast<int>(this->share_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.HomeBlueprintBriefMuipData.share_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->share_code(), output);
  }

  // uint32 owner_uid = 2;
  if (this->owner_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_uid(), output);
  }

  // uint32 module_id = 3;
  if (this->module_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->module_id(), output);
  }

  // uint32 scene_id = 4;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene_id(), output);
  }

  // uint32 block_id = 5;
  if (this->block_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->block_id(), output);
  }

  // bool is_allow_copy = 6;
  if (this->is_allow_copy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_allow_copy(), output);
  }

  // uint32 create_time = 7;
  if (this->create_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->create_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HomeBlueprintBriefMuipData)
}

::google::protobuf::uint8* HomeBlueprintBriefMuipData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HomeBlueprintBriefMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string share_code = 1;
  if (this->share_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->share_code().data(), static_cast<int>(this->share_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.HomeBlueprintBriefMuipData.share_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->share_code(), target);
  }

  // uint32 owner_uid = 2;
  if (this->owner_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_uid(), target);
  }

  // uint32 module_id = 3;
  if (this->module_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->module_id(), target);
  }

  // uint32 scene_id = 4;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene_id(), target);
  }

  // uint32 block_id = 5;
  if (this->block_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->block_id(), target);
  }

  // bool is_allow_copy = 6;
  if (this->is_allow_copy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_allow_copy(), target);
  }

  // uint32 create_time = 7;
  if (this->create_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->create_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HomeBlueprintBriefMuipData)
  return target;
}

size_t HomeBlueprintBriefMuipData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HomeBlueprintBriefMuipData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string share_code = 1;
  if (this->share_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->share_code());
  }

  // uint32 owner_uid = 2;
  if (this->owner_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner_uid());
  }

  // uint32 module_id = 3;
  if (this->module_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->module_id());
  }

  // uint32 scene_id = 4;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  // uint32 block_id = 5;
  if (this->block_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->block_id());
  }

  // bool is_allow_copy = 6;
  if (this->is_allow_copy() != 0) {
    total_size += 1 + 1;
  }

  // uint32 create_time = 7;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->create_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HomeBlueprintBriefMuipData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HomeBlueprintBriefMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  const HomeBlueprintBriefMuipData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HomeBlueprintBriefMuipData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HomeBlueprintBriefMuipData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HomeBlueprintBriefMuipData)
    MergeFrom(*source);
  }
}

void HomeBlueprintBriefMuipData::MergeFrom(const HomeBlueprintBriefMuipData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HomeBlueprintBriefMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.share_code().size() > 0) {

    share_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.share_code_);
  }
  if (from.owner_uid() != 0) {
    set_owner_uid(from.owner_uid());
  }
  if (from.module_id() != 0) {
    set_module_id(from.module_id());
  }
  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
  if (from.block_id() != 0) {
    set_block_id(from.block_id());
  }
  if (from.is_allow_copy() != 0) {
    set_is_allow_copy(from.is_allow_copy());
  }
  if (from.create_time() != 0) {
    set_create_time(from.create_time());
  }
}

void HomeBlueprintBriefMuipData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HomeBlueprintBriefMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HomeBlueprintBriefMuipData::CopyFrom(const HomeBlueprintBriefMuipData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HomeBlueprintBriefMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomeBlueprintBriefMuipData::IsInitialized() const {
  return true;
}

void HomeBlueprintBriefMuipData::Swap(HomeBlueprintBriefMuipData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HomeBlueprintBriefMuipData::InternalSwap(HomeBlueprintBriefMuipData* other) {
  using std::swap;
  share_code_.Swap(&other->share_code_);
  swap(owner_uid_, other->owner_uid_);
  swap(module_id_, other->module_id_);
  swap(scene_id_, other->scene_id_);
  swap(block_id_, other->block_id_);
  swap(is_allow_copy_, other->is_allow_copy_);
  swap(create_time_, other->create_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HomeBlueprintBriefMuipData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HomeBlueprintBriefMuipData

// string share_code = 1;
void HomeBlueprintBriefMuipData::clear_share_code() {
  share_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HomeBlueprintBriefMuipData::share_code() const {
  // @@protoc_insertion_point(field_get:proto.HomeBlueprintBriefMuipData.share_code)
  return share_code_.GetNoArena();
}
void HomeBlueprintBriefMuipData::set_share_code(const ::std::string& value) {
  
  share_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.HomeBlueprintBriefMuipData.share_code)
}
#if LANG_CXX11
void HomeBlueprintBriefMuipData::set_share_code(::std::string&& value) {
  
  share_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.HomeBlueprintBriefMuipData.share_code)
}
#endif
void HomeBlueprintBriefMuipData::set_share_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  share_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.HomeBlueprintBriefMuipData.share_code)
}
void HomeBlueprintBriefMuipData::set_share_code(const char* value, size_t size) {
  
  share_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.HomeBlueprintBriefMuipData.share_code)
}
::std::string* HomeBlueprintBriefMuipData::mutable_share_code() {
  
  // @@protoc_insertion_point(field_mutable:proto.HomeBlueprintBriefMuipData.share_code)
  return share_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HomeBlueprintBriefMuipData::release_share_code() {
  // @@protoc_insertion_point(field_release:proto.HomeBlueprintBriefMuipData.share_code)
  
  return share_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HomeBlueprintBriefMuipData::set_allocated_share_code(::std::string* share_code) {
  if (share_code != NULL) {
    
  } else {
    
  }
  share_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), share_code);
  // @@protoc_insertion_point(field_set_allocated:proto.HomeBlueprintBriefMuipData.share_code)
}

// uint32 owner_uid = 2;
void HomeBlueprintBriefMuipData::clear_owner_uid() {
  owner_uid_ = 0u;
}
::google::protobuf::uint32 HomeBlueprintBriefMuipData::owner_uid() const {
  // @@protoc_insertion_point(field_get:proto.HomeBlueprintBriefMuipData.owner_uid)
  return owner_uid_;
}
void HomeBlueprintBriefMuipData::set_owner_uid(::google::protobuf::uint32 value) {
  
  owner_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.HomeBlueprintBriefMuipData.owner_uid)
}

// uint32 module_id = 3;
void HomeBlueprintBriefMuipData::clear_module_id() {
  module_id_ = 0u;
}
::google::protobuf::uint32 HomeBlueprintBriefMuipData::module_id() const {
  // @@protoc_insertion_point(field_get:proto.HomeBlueprintBriefMuipData.module_id)
  return module_id_;
}
void HomeBlueprintBriefMuipData::set_module_id(::google::protobuf::uint32 value) {
  
  module_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HomeBlueprintBriefMuipData.module_id)
}

// uint32 scene_id = 4;
void HomeBlueprintBriefMuipData::clear_scene_id() {
  scene_id_ = 0u;
}
::google::protobuf::uint32 HomeBlueprintBriefMuipData::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.HomeBlueprintBriefMuipData.scene_id)
  return scene_id_;
}
void HomeBlueprintBriefMuipData::set_scene_id(::google::protobuf::uint32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HomeBlueprintBriefMuipData.scene_id)
}

// uint32 block_id = 5;
void HomeBlueprintBriefMuipData::clear_block_id() {
  block_id_ = 0u;
}
::google::protobuf::uint32 HomeBlueprintBriefMuipData::block_id() const {
  // @@protoc_insertion_point(field_get:proto.HomeBlueprintBriefMuipData.block_id)
  return block_id_;
}
void HomeBlueprintBriefMuipData::set_block_id(::google::protobuf::uint32 value) {
  
  block_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HomeBlueprintBriefMuipData.block_id)
}

// bool is_allow_copy = 6;
void HomeBlueprintBriefMuipData::clear_is_allow_copy() {
  is_allow_copy_ = false;
}
bool HomeBlueprintBriefMuipData::is_allow_copy() const {
  // @@protoc_insertion_point(field_get:proto.HomeBlueprintBriefMuipData.is_allow_copy)
  return is_allow_copy_;
}
void HomeBlueprintBriefMuipData::set_is_allow_copy(bool value) {
  
  is_allow_copy_ = value;
  // @@protoc_insertion_point(field_set:proto.HomeBlueprintBriefMuipData.is_allow_copy)
}

// uint32 create_time = 7;
void HomeBlueprintBriefMuipData::clear_create_time() {
  create_time_ = 0u;
}
::google::protobuf::uint32 HomeBlueprintBriefMuipData::create_time() const {
  // @@protoc_insertion_point(field_get:proto.HomeBlueprintBriefMuipData.create_time)
  return create_time_;
}
void HomeBlueprintBriefMuipData::set_create_time(::google::protobuf::uint32 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:proto.HomeBlueprintBriefMuipData.create_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HomeBlueprintBatchBriefMuipData::kBriefListFieldNumber;
const int HomeBlueprintBatchBriefMuipData::kNotExistShareCodeListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HomeBlueprintBatchBriefMuipData::HomeBlueprintBatchBriefMuipData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HomeBlueprintBatchBriefMuipData)
}
HomeBlueprintBatchBriefMuipData::HomeBlueprintBatchBriefMuipData(const HomeBlueprintBatchBriefMuipData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      brief_list_(from.brief_list_),
      not_exist_share_code_list_(from.not_exist_share_code_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.HomeBlueprintBatchBriefMuipData)
}

void HomeBlueprintBatchBriefMuipData::SharedCtor() {
  _cached_size_ = 0;
}

HomeBlueprintBatchBriefMuipData::~HomeBlueprintBatchBriefMuipData() {
  // @@protoc_insertion_point(destructor:proto.HomeBlueprintBatchBriefMuipData)
  SharedDtor();
}

void HomeBlueprintBatchBriefMuipData::SharedDtor() {
}

void HomeBlueprintBatchBriefMuipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HomeBlueprintBatchBriefMuipData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HomeBlueprintBatchBriefMuipData& HomeBlueprintBatchBriefMuipData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

HomeBlueprintBatchBriefMuipData* HomeBlueprintBatchBriefMuipData::New(::google::protobuf::Arena* arena) const {
  HomeBlueprintBatchBriefMuipData* n = new HomeBlueprintBatchBriefMuipData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HomeBlueprintBatchBriefMuipData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HomeBlueprintBatchBriefMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  brief_list_.Clear();
  not_exist_share_code_list_.Clear();
  _internal_metadata_.Clear();
}

bool HomeBlueprintBatchBriefMuipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HomeBlueprintBatchBriefMuipData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.HomeBlueprintBriefMuipData brief_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_brief_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string not_exist_share_code_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_not_exist_share_code_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->not_exist_share_code_list(this->not_exist_share_code_list_size() - 1).data(),
            static_cast<int>(this->not_exist_share_code_list(this->not_exist_share_code_list_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.HomeBlueprintBatchBriefMuipData.not_exist_share_code_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HomeBlueprintBatchBriefMuipData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HomeBlueprintBatchBriefMuipData)
  return false;
#undef DO_
}

void HomeBlueprintBatchBriefMuipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HomeBlueprintBatchBriefMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.HomeBlueprintBriefMuipData brief_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->brief_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->brief_list(static_cast<int>(i)), output);
  }

  // repeated string not_exist_share_code_list = 2;
  for (int i = 0, n = this->not_exist_share_code_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->not_exist_share_code_list(i).data(), static_cast<int>(this->not_exist_share_code_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.HomeBlueprintBatchBriefMuipData.not_exist_share_code_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->not_exist_share_code_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HomeBlueprintBatchBriefMuipData)
}

::google::protobuf::uint8* HomeBlueprintBatchBriefMuipData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HomeBlueprintBatchBriefMuipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.HomeBlueprintBriefMuipData brief_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->brief_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->brief_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated string not_exist_share_code_list = 2;
  for (int i = 0, n = this->not_exist_share_code_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->not_exist_share_code_list(i).data(), static_cast<int>(this->not_exist_share_code_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.HomeBlueprintBatchBriefMuipData.not_exist_share_code_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->not_exist_share_code_list(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HomeBlueprintBatchBriefMuipData)
  return target;
}

size_t HomeBlueprintBatchBriefMuipData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HomeBlueprintBatchBriefMuipData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.HomeBlueprintBriefMuipData brief_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->brief_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->brief_list(static_cast<int>(i)));
    }
  }

  // repeated string not_exist_share_code_list = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->not_exist_share_code_list_size());
  for (int i = 0, n = this->not_exist_share_code_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->not_exist_share_code_list(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HomeBlueprintBatchBriefMuipData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HomeBlueprintBatchBriefMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  const HomeBlueprintBatchBriefMuipData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HomeBlueprintBatchBriefMuipData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HomeBlueprintBatchBriefMuipData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HomeBlueprintBatchBriefMuipData)
    MergeFrom(*source);
  }
}

void HomeBlueprintBatchBriefMuipData::MergeFrom(const HomeBlueprintBatchBriefMuipData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HomeBlueprintBatchBriefMuipData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  brief_list_.MergeFrom(from.brief_list_);
  not_exist_share_code_list_.MergeFrom(from.not_exist_share_code_list_);
}

void HomeBlueprintBatchBriefMuipData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HomeBlueprintBatchBriefMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HomeBlueprintBatchBriefMuipData::CopyFrom(const HomeBlueprintBatchBriefMuipData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HomeBlueprintBatchBriefMuipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomeBlueprintBatchBriefMuipData::IsInitialized() const {
  return true;
}

void HomeBlueprintBatchBriefMuipData::Swap(HomeBlueprintBatchBriefMuipData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HomeBlueprintBatchBriefMuipData::InternalSwap(HomeBlueprintBatchBriefMuipData* other) {
  using std::swap;
  brief_list_.InternalSwap(&other->brief_list_);
  not_exist_share_code_list_.InternalSwap(&other->not_exist_share_code_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HomeBlueprintBatchBriefMuipData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HomeBlueprintBatchBriefMuipData

// repeated .proto.HomeBlueprintBriefMuipData brief_list = 1;
int HomeBlueprintBatchBriefMuipData::brief_list_size() const {
  return brief_list_.size();
}
void HomeBlueprintBatchBriefMuipData::clear_brief_list() {
  brief_list_.Clear();
}
const ::proto::HomeBlueprintBriefMuipData& HomeBlueprintBatchBriefMuipData::brief_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.HomeBlueprintBatchBriefMuipData.brief_list)
  return brief_list_.Get(index);
}
::proto::HomeBlueprintBriefMuipData* HomeBlueprintBatchBriefMuipData::mutable_brief_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.HomeBlueprintBatchBriefMuipData.brief_list)
  return brief_list_.Mutable(index);
}
::proto::HomeBlueprintBriefMuipData* HomeBlueprintBatchBriefMuipData::add_brief_list() {
  // @@protoc_insertion_point(field_add:proto.HomeBlueprintBatchBriefMuipData.brief_list)
  return brief_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::HomeBlueprintBriefMuipData >*
HomeBlueprintBatchBriefMuipData::mutable_brief_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.HomeBlueprintBatchBriefMuipData.brief_list)
  return &brief_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::HomeBlueprintBriefMuipData >&
HomeBlueprintBatchBriefMuipData::brief_list() const {
  // @@protoc_insertion_point(field_list:proto.HomeBlueprintBatchBriefMuipData.brief_list)
  return brief_list_;
}

// repeated string not_exist_share_code_list = 2;
int HomeBlueprintBatchBriefMuipData::not_exist_share_code_list_size() const {
  return not_exist_share_code_list_.size();
}
void HomeBlueprintBatchBriefMuipData::clear_not_exist_share_code_list() {
  not_exist_share_code_list_.Clear();
}
const ::std::string& HomeBlueprintBatchBriefMuipData::not_exist_share_code_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.HomeBlueprintBatchBriefMuipData.not_exist_share_code_list)
  return not_exist_share_code_list_.Get(index);
}
::std::string* HomeBlueprintBatchBriefMuipData::mutable_not_exist_share_code_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.HomeBlueprintBatchBriefMuipData.not_exist_share_code_list)
  return not_exist_share_code_list_.Mutable(index);
}
void HomeBlueprintBatchBriefMuipData::set_not_exist_share_code_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.HomeBlueprintBatchBriefMuipData.not_exist_share_code_list)
  not_exist_share_code_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void HomeBlueprintBatchBriefMuipData::set_not_exist_share_code_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.HomeBlueprintBatchBriefMuipData.not_exist_share_code_list)
  not_exist_share_code_list_.Mutable(index)->assign(std::move(value));
}
#endif
void HomeBlueprintBatchBriefMuipData::set_not_exist_share_code_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  not_exist_share_code_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.HomeBlueprintBatchBriefMuipData.not_exist_share_code_list)
}
void HomeBlueprintBatchBriefMuipData::set_not_exist_share_code_list(int index, const char* value, size_t size) {
  not_exist_share_code_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.HomeBlueprintBatchBriefMuipData.not_exist_share_code_list)
}
::std::string* HomeBlueprintBatchBriefMuipData::add_not_exist_share_code_list() {
  // @@protoc_insertion_point(field_add_mutable:proto.HomeBlueprintBatchBriefMuipData.not_exist_share_code_list)
  return not_exist_share_code_list_.Add();
}
void HomeBlueprintBatchBriefMuipData::add_not_exist_share_code_list(const ::std::string& value) {
  not_exist_share_code_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.HomeBlueprintBatchBriefMuipData.not_exist_share_code_list)
}
#if LANG_CXX11
void HomeBlueprintBatchBriefMuipData::add_not_exist_share_code_list(::std::string&& value) {
  not_exist_share_code_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.HomeBlueprintBatchBriefMuipData.not_exist_share_code_list)
}
#endif
void HomeBlueprintBatchBriefMuipData::add_not_exist_share_code_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  not_exist_share_code_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.HomeBlueprintBatchBriefMuipData.not_exist_share_code_list)
}
void HomeBlueprintBatchBriefMuipData::add_not_exist_share_code_list(const char* value, size_t size) {
  not_exist_share_code_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.HomeBlueprintBatchBriefMuipData.not_exist_share_code_list)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
HomeBlueprintBatchBriefMuipData::not_exist_share_code_list() const {
  // @@protoc_insertion_point(field_list:proto.HomeBlueprintBatchBriefMuipData.not_exist_share_code_list)
  return not_exist_share_code_list_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
HomeBlueprintBatchBriefMuipData::mutable_not_exist_share_code_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.HomeBlueprintBatchBriefMuipData.not_exist_share_code_list)
  return &not_exist_share_code_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentAuditInfo::kIsOpenFieldNumber;
const int ContentAuditInfo::kContentFieldNumber;
const int ContentAuditInfo::kSubmitCountFieldNumber;
const int ContentAuditInfo::kAuditStateFieldNumber;
const int ContentAuditInfo::kSubmitLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentAuditInfo::ContentAuditInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ContentAuditInfo)
}
ContentAuditInfo::ContentAuditInfo(const ContentAuditInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&is_open_, &from.is_open_,
    static_cast<size_t>(reinterpret_cast<char*>(&submit_limit_) -
    reinterpret_cast<char*>(&is_open_)) + sizeof(submit_limit_));
  // @@protoc_insertion_point(copy_constructor:proto.ContentAuditInfo)
}

void ContentAuditInfo::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&submit_limit_) -
      reinterpret_cast<char*>(&is_open_)) + sizeof(submit_limit_));
  _cached_size_ = 0;
}

ContentAuditInfo::~ContentAuditInfo() {
  // @@protoc_insertion_point(destructor:proto.ContentAuditInfo)
  SharedDtor();
}

void ContentAuditInfo::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContentAuditInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentAuditInfo::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContentAuditInfo& ContentAuditInfo::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContentAuditInfo* ContentAuditInfo::New(::google::protobuf::Arena* arena) const {
  ContentAuditInfo* n = new ContentAuditInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContentAuditInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ContentAuditInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&submit_limit_) -
      reinterpret_cast<char*>(&is_open_)) + sizeof(submit_limit_));
  _internal_metadata_.Clear();
}

bool ContentAuditInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ContentAuditInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_open = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ContentAuditInfo.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 submit_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &submit_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AuditState audit_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_audit_state(static_cast< ::proto::AuditState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 submit_limit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &submit_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ContentAuditInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ContentAuditInfo)
  return false;
#undef DO_
}

void ContentAuditInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ContentAuditInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_open = 1;
  if (this->is_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_open(), output);
  }

  // string content = 2;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ContentAuditInfo.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // uint32 submit_count = 3;
  if (this->submit_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->submit_count(), output);
  }

  // .proto.AuditState audit_state = 4;
  if (this->audit_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->audit_state(), output);
  }

  // uint32 submit_limit = 5;
  if (this->submit_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->submit_limit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ContentAuditInfo)
}

::google::protobuf::uint8* ContentAuditInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ContentAuditInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_open = 1;
  if (this->is_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_open(), target);
  }

  // string content = 2;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ContentAuditInfo.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // uint32 submit_count = 3;
  if (this->submit_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->submit_count(), target);
  }

  // .proto.AuditState audit_state = 4;
  if (this->audit_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->audit_state(), target);
  }

  // uint32 submit_limit = 5;
  if (this->submit_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->submit_limit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ContentAuditInfo)
  return target;
}

size_t ContentAuditInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ContentAuditInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // bool is_open = 1;
  if (this->is_open() != 0) {
    total_size += 1 + 1;
  }

  // uint32 submit_count = 3;
  if (this->submit_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->submit_count());
  }

  // .proto.AuditState audit_state = 4;
  if (this->audit_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->audit_state());
  }

  // uint32 submit_limit = 5;
  if (this->submit_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->submit_limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentAuditInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ContentAuditInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ContentAuditInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContentAuditInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ContentAuditInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ContentAuditInfo)
    MergeFrom(*source);
  }
}

void ContentAuditInfo::MergeFrom(const ContentAuditInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ContentAuditInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.is_open() != 0) {
    set_is_open(from.is_open());
  }
  if (from.submit_count() != 0) {
    set_submit_count(from.submit_count());
  }
  if (from.audit_state() != 0) {
    set_audit_state(from.audit_state());
  }
  if (from.submit_limit() != 0) {
    set_submit_limit(from.submit_limit());
  }
}

void ContentAuditInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ContentAuditInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentAuditInfo::CopyFrom(const ContentAuditInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ContentAuditInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentAuditInfo::IsInitialized() const {
  return true;
}

void ContentAuditInfo::Swap(ContentAuditInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentAuditInfo::InternalSwap(ContentAuditInfo* other) {
  using std::swap;
  content_.Swap(&other->content_);
  swap(is_open_, other->is_open_);
  swap(submit_count_, other->submit_count_);
  swap(audit_state_, other->audit_state_);
  swap(submit_limit_, other->submit_limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContentAuditInfo::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContentAuditInfo

// bool is_open = 1;
void ContentAuditInfo::clear_is_open() {
  is_open_ = false;
}
bool ContentAuditInfo::is_open() const {
  // @@protoc_insertion_point(field_get:proto.ContentAuditInfo.is_open)
  return is_open_;
}
void ContentAuditInfo::set_is_open(bool value) {
  
  is_open_ = value;
  // @@protoc_insertion_point(field_set:proto.ContentAuditInfo.is_open)
}

// string content = 2;
void ContentAuditInfo::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ContentAuditInfo::content() const {
  // @@protoc_insertion_point(field_get:proto.ContentAuditInfo.content)
  return content_.GetNoArena();
}
void ContentAuditInfo::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ContentAuditInfo.content)
}
#if LANG_CXX11
void ContentAuditInfo::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ContentAuditInfo.content)
}
#endif
void ContentAuditInfo::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ContentAuditInfo.content)
}
void ContentAuditInfo::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ContentAuditInfo.content)
}
::std::string* ContentAuditInfo::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:proto.ContentAuditInfo.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContentAuditInfo::release_content() {
  // @@protoc_insertion_point(field_release:proto.ContentAuditInfo.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentAuditInfo::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:proto.ContentAuditInfo.content)
}

// uint32 submit_count = 3;
void ContentAuditInfo::clear_submit_count() {
  submit_count_ = 0u;
}
::google::protobuf::uint32 ContentAuditInfo::submit_count() const {
  // @@protoc_insertion_point(field_get:proto.ContentAuditInfo.submit_count)
  return submit_count_;
}
void ContentAuditInfo::set_submit_count(::google::protobuf::uint32 value) {
  
  submit_count_ = value;
  // @@protoc_insertion_point(field_set:proto.ContentAuditInfo.submit_count)
}

// .proto.AuditState audit_state = 4;
void ContentAuditInfo::clear_audit_state() {
  audit_state_ = 0;
}
::proto::AuditState ContentAuditInfo::audit_state() const {
  // @@protoc_insertion_point(field_get:proto.ContentAuditInfo.audit_state)
  return static_cast< ::proto::AuditState >(audit_state_);
}
void ContentAuditInfo::set_audit_state(::proto::AuditState value) {
  
  audit_state_ = value;
  // @@protoc_insertion_point(field_set:proto.ContentAuditInfo.audit_state)
}

// uint32 submit_limit = 5;
void ContentAuditInfo::clear_submit_limit() {
  submit_limit_ = 0u;
}
::google::protobuf::uint32 ContentAuditInfo::submit_limit() const {
  // @@protoc_insertion_point(field_get:proto.ContentAuditInfo.submit_limit)
  return submit_limit_;
}
void ContentAuditInfo::set_submit_limit(::google::protobuf::uint32 value) {
  
  submit_limit_ = value;
  // @@protoc_insertion_point(field_set:proto.ContentAuditInfo.submit_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentAuditData::kTypeFieldNumber;
const int ContentAuditData::kContentFieldNumber;
const int ContentAuditData::kAutoPassTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentAuditData::ContentAuditData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ContentAuditData)
}
ContentAuditData::ContentAuditData(const ContentAuditData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  auto_pass_time_ = from.auto_pass_time_;
  // @@protoc_insertion_point(copy_constructor:proto.ContentAuditData)
}

void ContentAuditData::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auto_pass_time_ = 0u;
  _cached_size_ = 0;
}

ContentAuditData::~ContentAuditData() {
  // @@protoc_insertion_point(destructor:proto.ContentAuditData)
  SharedDtor();
}

void ContentAuditData::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContentAuditData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentAuditData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContentAuditData& ContentAuditData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContentAuditData* ContentAuditData::New(::google::protobuf::Arena* arena) const {
  ContentAuditData* n = new ContentAuditData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContentAuditData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ContentAuditData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auto_pass_time_ = 0u;
  _internal_metadata_.Clear();
}

bool ContentAuditData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ContentAuditData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ContentAuditData.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ContentAuditData.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 auto_pass_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auto_pass_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ContentAuditData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ContentAuditData)
  return false;
#undef DO_
}

void ContentAuditData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ContentAuditData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ContentAuditData.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // string content = 2;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ContentAuditData.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // uint32 auto_pass_time = 3;
  if (this->auto_pass_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->auto_pass_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ContentAuditData)
}

::google::protobuf::uint8* ContentAuditData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ContentAuditData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ContentAuditData.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // string content = 2;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ContentAuditData.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // uint32 auto_pass_time = 3;
  if (this->auto_pass_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->auto_pass_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ContentAuditData)
  return target;
}

size_t ContentAuditData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ContentAuditData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // uint32 auto_pass_time = 3;
  if (this->auto_pass_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->auto_pass_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentAuditData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ContentAuditData)
  GOOGLE_DCHECK_NE(&from, this);
  const ContentAuditData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContentAuditData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ContentAuditData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ContentAuditData)
    MergeFrom(*source);
  }
}

void ContentAuditData::MergeFrom(const ContentAuditData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ContentAuditData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.auto_pass_time() != 0) {
    set_auto_pass_time(from.auto_pass_time());
  }
}

void ContentAuditData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ContentAuditData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentAuditData::CopyFrom(const ContentAuditData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ContentAuditData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentAuditData::IsInitialized() const {
  return true;
}

void ContentAuditData::Swap(ContentAuditData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentAuditData::InternalSwap(ContentAuditData* other) {
  using std::swap;
  type_.Swap(&other->type_);
  content_.Swap(&other->content_);
  swap(auto_pass_time_, other->auto_pass_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContentAuditData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContentAuditData

// string type = 1;
void ContentAuditData::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ContentAuditData::type() const {
  // @@protoc_insertion_point(field_get:proto.ContentAuditData.type)
  return type_.GetNoArena();
}
void ContentAuditData::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ContentAuditData.type)
}
#if LANG_CXX11
void ContentAuditData::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ContentAuditData.type)
}
#endif
void ContentAuditData::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ContentAuditData.type)
}
void ContentAuditData::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ContentAuditData.type)
}
::std::string* ContentAuditData::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:proto.ContentAuditData.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContentAuditData::release_type() {
  // @@protoc_insertion_point(field_release:proto.ContentAuditData.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentAuditData::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:proto.ContentAuditData.type)
}

// string content = 2;
void ContentAuditData::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ContentAuditData::content() const {
  // @@protoc_insertion_point(field_get:proto.ContentAuditData.content)
  return content_.GetNoArena();
}
void ContentAuditData::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ContentAuditData.content)
}
#if LANG_CXX11
void ContentAuditData::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ContentAuditData.content)
}
#endif
void ContentAuditData::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ContentAuditData.content)
}
void ContentAuditData::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ContentAuditData.content)
}
::std::string* ContentAuditData::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:proto.ContentAuditData.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContentAuditData::release_content() {
  // @@protoc_insertion_point(field_release:proto.ContentAuditData.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentAuditData::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:proto.ContentAuditData.content)
}

// uint32 auto_pass_time = 3;
void ContentAuditData::clear_auto_pass_time() {
  auto_pass_time_ = 0u;
}
::google::protobuf::uint32 ContentAuditData::auto_pass_time() const {
  // @@protoc_insertion_point(field_get:proto.ContentAuditData.auto_pass_time)
  return auto_pass_time_;
}
void ContentAuditData::set_auto_pass_time(::google::protobuf::uint32 value) {
  
  auto_pass_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ContentAuditData.auto_pass_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentAuditField::kSegmentListFieldNumber;
const int ContentAuditField::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentAuditField::ContentAuditField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ContentAuditField)
}
ContentAuditField::ContentAuditField(const ContentAuditField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      segment_list_(from.segment_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.ContentAuditField)
}

void ContentAuditField::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ContentAuditField::~ContentAuditField() {
  // @@protoc_insertion_point(destructor:proto.ContentAuditField)
  SharedDtor();
}

void ContentAuditField::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContentAuditField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentAuditField::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContentAuditField& ContentAuditField::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContentAuditField* ContentAuditField::New(::google::protobuf::Arena* arena) const {
  ContentAuditField* n = new ContentAuditField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContentAuditField::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ContentAuditField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segment_list_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ContentAuditField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ContentAuditField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.ContentAuditData segment_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segment_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ContentAuditField.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ContentAuditField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ContentAuditField)
  return false;
#undef DO_
}

void ContentAuditField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ContentAuditField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ContentAuditData segment_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segment_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->segment_list(static_cast<int>(i)), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ContentAuditField.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ContentAuditField)
}

::google::protobuf::uint8* ContentAuditField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ContentAuditField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ContentAuditData segment_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segment_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->segment_list(static_cast<int>(i)), deterministic, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ContentAuditField.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ContentAuditField)
  return target;
}

size_t ContentAuditField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ContentAuditField)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ContentAuditData segment_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->segment_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->segment_list(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentAuditField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ContentAuditField)
  GOOGLE_DCHECK_NE(&from, this);
  const ContentAuditField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContentAuditField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ContentAuditField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ContentAuditField)
    MergeFrom(*source);
  }
}

void ContentAuditField::MergeFrom(const ContentAuditField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ContentAuditField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segment_list_.MergeFrom(from.segment_list_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ContentAuditField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ContentAuditField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentAuditField::CopyFrom(const ContentAuditField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ContentAuditField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentAuditField::IsInitialized() const {
  return true;
}

void ContentAuditField::Swap(ContentAuditField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentAuditField::InternalSwap(ContentAuditField* other) {
  using std::swap;
  segment_list_.InternalSwap(&other->segment_list_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContentAuditField::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContentAuditField

// repeated .proto.ContentAuditData segment_list = 1;
int ContentAuditField::segment_list_size() const {
  return segment_list_.size();
}
void ContentAuditField::clear_segment_list() {
  segment_list_.Clear();
}
const ::proto::ContentAuditData& ContentAuditField::segment_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ContentAuditField.segment_list)
  return segment_list_.Get(index);
}
::proto::ContentAuditData* ContentAuditField::mutable_segment_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ContentAuditField.segment_list)
  return segment_list_.Mutable(index);
}
::proto::ContentAuditData* ContentAuditField::add_segment_list() {
  // @@protoc_insertion_point(field_add:proto.ContentAuditField.segment_list)
  return segment_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ContentAuditData >*
ContentAuditField::mutable_segment_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ContentAuditField.segment_list)
  return &segment_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ContentAuditData >&
ContentAuditField::segment_list() const {
  // @@protoc_insertion_point(field_list:proto.ContentAuditField.segment_list)
  return segment_list_;
}

// string name = 2;
void ContentAuditField::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ContentAuditField::name() const {
  // @@protoc_insertion_point(field_get:proto.ContentAuditField.name)
  return name_.GetNoArena();
}
void ContentAuditField::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ContentAuditField.name)
}
#if LANG_CXX11
void ContentAuditField::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ContentAuditField.name)
}
#endif
void ContentAuditField::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ContentAuditField.name)
}
void ContentAuditField::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ContentAuditField.name)
}
::std::string* ContentAuditField::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.ContentAuditField.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContentAuditField::release_name() {
  // @@protoc_insertion_point(field_release:proto.ContentAuditField.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentAuditField::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.ContentAuditField.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentAuditAuxiliaryField::kNameFieldNumber;
const int ContentAuditAuxiliaryField::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentAuditAuxiliaryField::ContentAuditAuxiliaryField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ContentAuditAuxiliaryField)
}
ContentAuditAuxiliaryField::ContentAuditAuxiliaryField(const ContentAuditAuxiliaryField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.ContentAuditAuxiliaryField)
}

void ContentAuditAuxiliaryField::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ContentAuditAuxiliaryField::~ContentAuditAuxiliaryField() {
  // @@protoc_insertion_point(destructor:proto.ContentAuditAuxiliaryField)
  SharedDtor();
}

void ContentAuditAuxiliaryField::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContentAuditAuxiliaryField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentAuditAuxiliaryField::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContentAuditAuxiliaryField& ContentAuditAuxiliaryField::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContentAuditAuxiliaryField* ContentAuditAuxiliaryField::New(::google::protobuf::Arena* arena) const {
  ContentAuditAuxiliaryField* n = new ContentAuditAuxiliaryField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContentAuditAuxiliaryField::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ContentAuditAuxiliaryField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ContentAuditAuxiliaryField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ContentAuditAuxiliaryField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ContentAuditAuxiliaryField.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ContentAuditAuxiliaryField.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ContentAuditAuxiliaryField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ContentAuditAuxiliaryField)
  return false;
#undef DO_
}

void ContentAuditAuxiliaryField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ContentAuditAuxiliaryField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ContentAuditAuxiliaryField.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ContentAuditAuxiliaryField.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ContentAuditAuxiliaryField)
}

::google::protobuf::uint8* ContentAuditAuxiliaryField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ContentAuditAuxiliaryField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ContentAuditAuxiliaryField.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ContentAuditAuxiliaryField.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ContentAuditAuxiliaryField)
  return target;
}

size_t ContentAuditAuxiliaryField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ContentAuditAuxiliaryField)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentAuditAuxiliaryField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ContentAuditAuxiliaryField)
  GOOGLE_DCHECK_NE(&from, this);
  const ContentAuditAuxiliaryField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContentAuditAuxiliaryField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ContentAuditAuxiliaryField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ContentAuditAuxiliaryField)
    MergeFrom(*source);
  }
}

void ContentAuditAuxiliaryField::MergeFrom(const ContentAuditAuxiliaryField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ContentAuditAuxiliaryField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void ContentAuditAuxiliaryField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ContentAuditAuxiliaryField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentAuditAuxiliaryField::CopyFrom(const ContentAuditAuxiliaryField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ContentAuditAuxiliaryField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentAuditAuxiliaryField::IsInitialized() const {
  return true;
}

void ContentAuditAuxiliaryField::Swap(ContentAuditAuxiliaryField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentAuditAuxiliaryField::InternalSwap(ContentAuditAuxiliaryField* other) {
  using std::swap;
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContentAuditAuxiliaryField::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContentAuditAuxiliaryField

// string name = 1;
void ContentAuditAuxiliaryField::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ContentAuditAuxiliaryField::name() const {
  // @@protoc_insertion_point(field_get:proto.ContentAuditAuxiliaryField.name)
  return name_.GetNoArena();
}
void ContentAuditAuxiliaryField::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ContentAuditAuxiliaryField.name)
}
#if LANG_CXX11
void ContentAuditAuxiliaryField::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ContentAuditAuxiliaryField.name)
}
#endif
void ContentAuditAuxiliaryField::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ContentAuditAuxiliaryField.name)
}
void ContentAuditAuxiliaryField::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ContentAuditAuxiliaryField.name)
}
::std::string* ContentAuditAuxiliaryField::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.ContentAuditAuxiliaryField.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContentAuditAuxiliaryField::release_name() {
  // @@protoc_insertion_point(field_release:proto.ContentAuditAuxiliaryField.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentAuditAuxiliaryField::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.ContentAuditAuxiliaryField.name)
}

// string value = 2;
void ContentAuditAuxiliaryField::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ContentAuditAuxiliaryField::value() const {
  // @@protoc_insertion_point(field_get:proto.ContentAuditAuxiliaryField.value)
  return value_.GetNoArena();
}
void ContentAuditAuxiliaryField::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ContentAuditAuxiliaryField.value)
}
#if LANG_CXX11
void ContentAuditAuxiliaryField::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ContentAuditAuxiliaryField.value)
}
#endif
void ContentAuditAuxiliaryField::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ContentAuditAuxiliaryField.value)
}
void ContentAuditAuxiliaryField::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ContentAuditAuxiliaryField.value)
}
::std::string* ContentAuditAuxiliaryField::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:proto.ContentAuditAuxiliaryField.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContentAuditAuxiliaryField::release_value() {
  // @@protoc_insertion_point(field_release:proto.ContentAuditAuxiliaryField.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentAuditAuxiliaryField::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.ContentAuditAuxiliaryField.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NicknameSignatureAuditData::kAidFieldNumber;
const int NicknameSignatureAuditData::kEntityIdFieldNumber;
const int NicknameSignatureAuditData::kLangFieldNumber;
const int NicknameSignatureAuditData::kQueueKeyFieldNumber;
const int NicknameSignatureAuditData::kRegionFieldNumber;
const int NicknameSignatureAuditData::kUidFieldNumber;
const int NicknameSignatureAuditData::kAuditFieldListFieldNumber;
const int NicknameSignatureAuditData::kAuxFieldListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NicknameSignatureAuditData::NicknameSignatureAuditData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.NicknameSignatureAuditData)
}
NicknameSignatureAuditData::NicknameSignatureAuditData(const NicknameSignatureAuditData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      audit_field_list_(from.audit_field_list_),
      aux_field_list_(from.aux_field_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  aid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.aid().size() > 0) {
    aid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aid_);
  }
  entity_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.entity_id().size() > 0) {
    entity_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_id_);
  }
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lang().size() > 0) {
    lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  queue_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.queue_key().size() > 0) {
    queue_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_key_);
  }
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.region().size() > 0) {
    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:proto.NicknameSignatureAuditData)
}

void NicknameSignatureAuditData::SharedCtor() {
  aid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entity_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = 0u;
  _cached_size_ = 0;
}

NicknameSignatureAuditData::~NicknameSignatureAuditData() {
  // @@protoc_insertion_point(destructor:proto.NicknameSignatureAuditData)
  SharedDtor();
}

void NicknameSignatureAuditData::SharedDtor() {
  aid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entity_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NicknameSignatureAuditData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NicknameSignatureAuditData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NicknameSignatureAuditData& NicknameSignatureAuditData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

NicknameSignatureAuditData* NicknameSignatureAuditData::New(::google::protobuf::Arena* arena) const {
  NicknameSignatureAuditData* n = new NicknameSignatureAuditData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NicknameSignatureAuditData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.NicknameSignatureAuditData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audit_field_list_.Clear();
  aux_field_list_.Clear();
  aid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entity_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = 0u;
  _internal_metadata_.Clear();
}

bool NicknameSignatureAuditData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.NicknameSignatureAuditData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string aid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->aid().data(), static_cast<int>(this->aid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.NicknameSignatureAuditData.aid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string entity_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->entity_id().data(), static_cast<int>(this->entity_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.NicknameSignatureAuditData.entity_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lang = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lang().data(), static_cast<int>(this->lang().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.NicknameSignatureAuditData.lang"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string queue_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queue_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->queue_key().data(), static_cast<int>(this->queue_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.NicknameSignatureAuditData.queue_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string region = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->region().data(), static_cast<int>(this->region().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.NicknameSignatureAuditData.region"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ContentAuditField audit_field_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_audit_field_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ContentAuditAuxiliaryField aux_field_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_aux_field_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.NicknameSignatureAuditData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.NicknameSignatureAuditData)
  return false;
#undef DO_
}

void NicknameSignatureAuditData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.NicknameSignatureAuditData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string aid = 1;
  if (this->aid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->aid().data(), static_cast<int>(this->aid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.NicknameSignatureAuditData.aid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->aid(), output);
  }

  // string entity_id = 2;
  if (this->entity_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entity_id().data(), static_cast<int>(this->entity_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.NicknameSignatureAuditData.entity_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->entity_id(), output);
  }

  // string lang = 3;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), static_cast<int>(this->lang().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.NicknameSignatureAuditData.lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->lang(), output);
  }

  // string queue_key = 4;
  if (this->queue_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_key().data(), static_cast<int>(this->queue_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.NicknameSignatureAuditData.queue_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->queue_key(), output);
  }

  // string region = 5;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), static_cast<int>(this->region().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.NicknameSignatureAuditData.region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->region(), output);
  }

  // uint32 uid = 6;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uid(), output);
  }

  // repeated .proto.ContentAuditField audit_field_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audit_field_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->audit_field_list(static_cast<int>(i)), output);
  }

  // repeated .proto.ContentAuditAuxiliaryField aux_field_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->aux_field_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->aux_field_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.NicknameSignatureAuditData)
}

::google::protobuf::uint8* NicknameSignatureAuditData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.NicknameSignatureAuditData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string aid = 1;
  if (this->aid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->aid().data(), static_cast<int>(this->aid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.NicknameSignatureAuditData.aid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->aid(), target);
  }

  // string entity_id = 2;
  if (this->entity_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entity_id().data(), static_cast<int>(this->entity_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.NicknameSignatureAuditData.entity_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->entity_id(), target);
  }

  // string lang = 3;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), static_cast<int>(this->lang().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.NicknameSignatureAuditData.lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lang(), target);
  }

  // string queue_key = 4;
  if (this->queue_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_key().data(), static_cast<int>(this->queue_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.NicknameSignatureAuditData.queue_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->queue_key(), target);
  }

  // string region = 5;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), static_cast<int>(this->region().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.NicknameSignatureAuditData.region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->region(), target);
  }

  // uint32 uid = 6;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uid(), target);
  }

  // repeated .proto.ContentAuditField audit_field_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audit_field_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->audit_field_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.ContentAuditAuxiliaryField aux_field_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->aux_field_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->aux_field_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.NicknameSignatureAuditData)
  return target;
}

size_t NicknameSignatureAuditData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.NicknameSignatureAuditData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ContentAuditField audit_field_list = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->audit_field_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->audit_field_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.ContentAuditAuxiliaryField aux_field_list = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->aux_field_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aux_field_list(static_cast<int>(i)));
    }
  }

  // string aid = 1;
  if (this->aid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->aid());
  }

  // string entity_id = 2;
  if (this->entity_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->entity_id());
  }

  // string lang = 3;
  if (this->lang().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lang());
  }

  // string queue_key = 4;
  if (this->queue_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->queue_key());
  }

  // string region = 5;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->region());
  }

  // uint32 uid = 6;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NicknameSignatureAuditData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.NicknameSignatureAuditData)
  GOOGLE_DCHECK_NE(&from, this);
  const NicknameSignatureAuditData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NicknameSignatureAuditData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.NicknameSignatureAuditData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.NicknameSignatureAuditData)
    MergeFrom(*source);
  }
}

void NicknameSignatureAuditData::MergeFrom(const NicknameSignatureAuditData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.NicknameSignatureAuditData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  audit_field_list_.MergeFrom(from.audit_field_list_);
  aux_field_list_.MergeFrom(from.aux_field_list_);
  if (from.aid().size() > 0) {

    aid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aid_);
  }
  if (from.entity_id().size() > 0) {

    entity_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_id_);
  }
  if (from.lang().size() > 0) {

    lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  if (from.queue_key().size() > 0) {

    queue_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_key_);
  }
  if (from.region().size() > 0) {

    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void NicknameSignatureAuditData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.NicknameSignatureAuditData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NicknameSignatureAuditData::CopyFrom(const NicknameSignatureAuditData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.NicknameSignatureAuditData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NicknameSignatureAuditData::IsInitialized() const {
  return true;
}

void NicknameSignatureAuditData::Swap(NicknameSignatureAuditData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NicknameSignatureAuditData::InternalSwap(NicknameSignatureAuditData* other) {
  using std::swap;
  audit_field_list_.InternalSwap(&other->audit_field_list_);
  aux_field_list_.InternalSwap(&other->aux_field_list_);
  aid_.Swap(&other->aid_);
  entity_id_.Swap(&other->entity_id_);
  lang_.Swap(&other->lang_);
  queue_key_.Swap(&other->queue_key_);
  region_.Swap(&other->region_);
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NicknameSignatureAuditData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NicknameSignatureAuditData

// string aid = 1;
void NicknameSignatureAuditData::clear_aid() {
  aid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NicknameSignatureAuditData::aid() const {
  // @@protoc_insertion_point(field_get:proto.NicknameSignatureAuditData.aid)
  return aid_.GetNoArena();
}
void NicknameSignatureAuditData::set_aid(const ::std::string& value) {
  
  aid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.NicknameSignatureAuditData.aid)
}
#if LANG_CXX11
void NicknameSignatureAuditData::set_aid(::std::string&& value) {
  
  aid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.NicknameSignatureAuditData.aid)
}
#endif
void NicknameSignatureAuditData::set_aid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  aid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.NicknameSignatureAuditData.aid)
}
void NicknameSignatureAuditData::set_aid(const char* value, size_t size) {
  
  aid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.NicknameSignatureAuditData.aid)
}
::std::string* NicknameSignatureAuditData::mutable_aid() {
  
  // @@protoc_insertion_point(field_mutable:proto.NicknameSignatureAuditData.aid)
  return aid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NicknameSignatureAuditData::release_aid() {
  // @@protoc_insertion_point(field_release:proto.NicknameSignatureAuditData.aid)
  
  return aid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NicknameSignatureAuditData::set_allocated_aid(::std::string* aid) {
  if (aid != NULL) {
    
  } else {
    
  }
  aid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aid);
  // @@protoc_insertion_point(field_set_allocated:proto.NicknameSignatureAuditData.aid)
}

// string entity_id = 2;
void NicknameSignatureAuditData::clear_entity_id() {
  entity_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NicknameSignatureAuditData::entity_id() const {
  // @@protoc_insertion_point(field_get:proto.NicknameSignatureAuditData.entity_id)
  return entity_id_.GetNoArena();
}
void NicknameSignatureAuditData::set_entity_id(const ::std::string& value) {
  
  entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.NicknameSignatureAuditData.entity_id)
}
#if LANG_CXX11
void NicknameSignatureAuditData::set_entity_id(::std::string&& value) {
  
  entity_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.NicknameSignatureAuditData.entity_id)
}
#endif
void NicknameSignatureAuditData::set_entity_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.NicknameSignatureAuditData.entity_id)
}
void NicknameSignatureAuditData::set_entity_id(const char* value, size_t size) {
  
  entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.NicknameSignatureAuditData.entity_id)
}
::std::string* NicknameSignatureAuditData::mutable_entity_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.NicknameSignatureAuditData.entity_id)
  return entity_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NicknameSignatureAuditData::release_entity_id() {
  // @@protoc_insertion_point(field_release:proto.NicknameSignatureAuditData.entity_id)
  
  return entity_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NicknameSignatureAuditData::set_allocated_entity_id(::std::string* entity_id) {
  if (entity_id != NULL) {
    
  } else {
    
  }
  entity_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity_id);
  // @@protoc_insertion_point(field_set_allocated:proto.NicknameSignatureAuditData.entity_id)
}

// string lang = 3;
void NicknameSignatureAuditData::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NicknameSignatureAuditData::lang() const {
  // @@protoc_insertion_point(field_get:proto.NicknameSignatureAuditData.lang)
  return lang_.GetNoArena();
}
void NicknameSignatureAuditData::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.NicknameSignatureAuditData.lang)
}
#if LANG_CXX11
void NicknameSignatureAuditData::set_lang(::std::string&& value) {
  
  lang_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.NicknameSignatureAuditData.lang)
}
#endif
void NicknameSignatureAuditData::set_lang(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.NicknameSignatureAuditData.lang)
}
void NicknameSignatureAuditData::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.NicknameSignatureAuditData.lang)
}
::std::string* NicknameSignatureAuditData::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:proto.NicknameSignatureAuditData.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NicknameSignatureAuditData::release_lang() {
  // @@protoc_insertion_point(field_release:proto.NicknameSignatureAuditData.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NicknameSignatureAuditData::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:proto.NicknameSignatureAuditData.lang)
}

// string queue_key = 4;
void NicknameSignatureAuditData::clear_queue_key() {
  queue_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NicknameSignatureAuditData::queue_key() const {
  // @@protoc_insertion_point(field_get:proto.NicknameSignatureAuditData.queue_key)
  return queue_key_.GetNoArena();
}
void NicknameSignatureAuditData::set_queue_key(const ::std::string& value) {
  
  queue_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.NicknameSignatureAuditData.queue_key)
}
#if LANG_CXX11
void NicknameSignatureAuditData::set_queue_key(::std::string&& value) {
  
  queue_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.NicknameSignatureAuditData.queue_key)
}
#endif
void NicknameSignatureAuditData::set_queue_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  queue_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.NicknameSignatureAuditData.queue_key)
}
void NicknameSignatureAuditData::set_queue_key(const char* value, size_t size) {
  
  queue_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.NicknameSignatureAuditData.queue_key)
}
::std::string* NicknameSignatureAuditData::mutable_queue_key() {
  
  // @@protoc_insertion_point(field_mutable:proto.NicknameSignatureAuditData.queue_key)
  return queue_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NicknameSignatureAuditData::release_queue_key() {
  // @@protoc_insertion_point(field_release:proto.NicknameSignatureAuditData.queue_key)
  
  return queue_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NicknameSignatureAuditData::set_allocated_queue_key(::std::string* queue_key) {
  if (queue_key != NULL) {
    
  } else {
    
  }
  queue_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queue_key);
  // @@protoc_insertion_point(field_set_allocated:proto.NicknameSignatureAuditData.queue_key)
}

// string region = 5;
void NicknameSignatureAuditData::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NicknameSignatureAuditData::region() const {
  // @@protoc_insertion_point(field_get:proto.NicknameSignatureAuditData.region)
  return region_.GetNoArena();
}
void NicknameSignatureAuditData::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.NicknameSignatureAuditData.region)
}
#if LANG_CXX11
void NicknameSignatureAuditData::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.NicknameSignatureAuditData.region)
}
#endif
void NicknameSignatureAuditData::set_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.NicknameSignatureAuditData.region)
}
void NicknameSignatureAuditData::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.NicknameSignatureAuditData.region)
}
::std::string* NicknameSignatureAuditData::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:proto.NicknameSignatureAuditData.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NicknameSignatureAuditData::release_region() {
  // @@protoc_insertion_point(field_release:proto.NicknameSignatureAuditData.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NicknameSignatureAuditData::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:proto.NicknameSignatureAuditData.region)
}

// uint32 uid = 6;
void NicknameSignatureAuditData::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 NicknameSignatureAuditData::uid() const {
  // @@protoc_insertion_point(field_get:proto.NicknameSignatureAuditData.uid)
  return uid_;
}
void NicknameSignatureAuditData::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.NicknameSignatureAuditData.uid)
}

// repeated .proto.ContentAuditField audit_field_list = 7;
int NicknameSignatureAuditData::audit_field_list_size() const {
  return audit_field_list_.size();
}
void NicknameSignatureAuditData::clear_audit_field_list() {
  audit_field_list_.Clear();
}
const ::proto::ContentAuditField& NicknameSignatureAuditData::audit_field_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.NicknameSignatureAuditData.audit_field_list)
  return audit_field_list_.Get(index);
}
::proto::ContentAuditField* NicknameSignatureAuditData::mutable_audit_field_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.NicknameSignatureAuditData.audit_field_list)
  return audit_field_list_.Mutable(index);
}
::proto::ContentAuditField* NicknameSignatureAuditData::add_audit_field_list() {
  // @@protoc_insertion_point(field_add:proto.NicknameSignatureAuditData.audit_field_list)
  return audit_field_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ContentAuditField >*
NicknameSignatureAuditData::mutable_audit_field_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.NicknameSignatureAuditData.audit_field_list)
  return &audit_field_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ContentAuditField >&
NicknameSignatureAuditData::audit_field_list() const {
  // @@protoc_insertion_point(field_list:proto.NicknameSignatureAuditData.audit_field_list)
  return audit_field_list_;
}

// repeated .proto.ContentAuditAuxiliaryField aux_field_list = 8;
int NicknameSignatureAuditData::aux_field_list_size() const {
  return aux_field_list_.size();
}
void NicknameSignatureAuditData::clear_aux_field_list() {
  aux_field_list_.Clear();
}
const ::proto::ContentAuditAuxiliaryField& NicknameSignatureAuditData::aux_field_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.NicknameSignatureAuditData.aux_field_list)
  return aux_field_list_.Get(index);
}
::proto::ContentAuditAuxiliaryField* NicknameSignatureAuditData::mutable_aux_field_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.NicknameSignatureAuditData.aux_field_list)
  return aux_field_list_.Mutable(index);
}
::proto::ContentAuditAuxiliaryField* NicknameSignatureAuditData::add_aux_field_list() {
  // @@protoc_insertion_point(field_add:proto.NicknameSignatureAuditData.aux_field_list)
  return aux_field_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ContentAuditAuxiliaryField >*
NicknameSignatureAuditData::mutable_aux_field_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.NicknameSignatureAuditData.aux_field_list)
  return &aux_field_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ContentAuditAuxiliaryField >&
NicknameSignatureAuditData::aux_field_list() const {
  // @@protoc_insertion_point(field_list:proto.NicknameSignatureAuditData.aux_field_list)
  return aux_field_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarRenameAuditContent::kTypeFieldNumber;
const int AvatarRenameAuditContent::kContentFieldNumber;
const int AvatarRenameAuditContent::kAutoFailTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarRenameAuditContent::AvatarRenameAuditContent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarRenameAuditContent)
}
AvatarRenameAuditContent::AvatarRenameAuditContent(const AvatarRenameAuditContent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  auto_fail_time_ = from.auto_fail_time_;
  // @@protoc_insertion_point(copy_constructor:proto.AvatarRenameAuditContent)
}

void AvatarRenameAuditContent::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auto_fail_time_ = 0u;
  _cached_size_ = 0;
}

AvatarRenameAuditContent::~AvatarRenameAuditContent() {
  // @@protoc_insertion_point(destructor:proto.AvatarRenameAuditContent)
  SharedDtor();
}

void AvatarRenameAuditContent::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AvatarRenameAuditContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarRenameAuditContent::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarRenameAuditContent& AvatarRenameAuditContent::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarRenameAuditContent* AvatarRenameAuditContent::New(::google::protobuf::Arena* arena) const {
  AvatarRenameAuditContent* n = new AvatarRenameAuditContent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarRenameAuditContent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarRenameAuditContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auto_fail_time_ = 0u;
  _internal_metadata_.Clear();
}

bool AvatarRenameAuditContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarRenameAuditContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.AvatarRenameAuditContent.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.AvatarRenameAuditContent.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 auto_fail_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auto_fail_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarRenameAuditContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarRenameAuditContent)
  return false;
#undef DO_
}

void AvatarRenameAuditContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarRenameAuditContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AvatarRenameAuditContent.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // string content = 2;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AvatarRenameAuditContent.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // uint32 auto_fail_time = 3;
  if (this->auto_fail_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->auto_fail_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarRenameAuditContent)
}

::google::protobuf::uint8* AvatarRenameAuditContent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarRenameAuditContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AvatarRenameAuditContent.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // string content = 2;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AvatarRenameAuditContent.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // uint32 auto_fail_time = 3;
  if (this->auto_fail_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->auto_fail_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarRenameAuditContent)
  return target;
}

size_t AvatarRenameAuditContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarRenameAuditContent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // uint32 auto_fail_time = 3;
  if (this->auto_fail_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->auto_fail_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarRenameAuditContent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarRenameAuditContent)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarRenameAuditContent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarRenameAuditContent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarRenameAuditContent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarRenameAuditContent)
    MergeFrom(*source);
  }
}

void AvatarRenameAuditContent::MergeFrom(const AvatarRenameAuditContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarRenameAuditContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.auto_fail_time() != 0) {
    set_auto_fail_time(from.auto_fail_time());
  }
}

void AvatarRenameAuditContent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarRenameAuditContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarRenameAuditContent::CopyFrom(const AvatarRenameAuditContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarRenameAuditContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarRenameAuditContent::IsInitialized() const {
  return true;
}

void AvatarRenameAuditContent::Swap(AvatarRenameAuditContent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarRenameAuditContent::InternalSwap(AvatarRenameAuditContent* other) {
  using std::swap;
  type_.Swap(&other->type_);
  content_.Swap(&other->content_);
  swap(auto_fail_time_, other->auto_fail_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarRenameAuditContent::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarRenameAuditContent

// string type = 1;
void AvatarRenameAuditContent::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AvatarRenameAuditContent::type() const {
  // @@protoc_insertion_point(field_get:proto.AvatarRenameAuditContent.type)
  return type_.GetNoArena();
}
void AvatarRenameAuditContent::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AvatarRenameAuditContent.type)
}
#if LANG_CXX11
void AvatarRenameAuditContent::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AvatarRenameAuditContent.type)
}
#endif
void AvatarRenameAuditContent::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AvatarRenameAuditContent.type)
}
void AvatarRenameAuditContent::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AvatarRenameAuditContent.type)
}
::std::string* AvatarRenameAuditContent::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:proto.AvatarRenameAuditContent.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AvatarRenameAuditContent::release_type() {
  // @@protoc_insertion_point(field_release:proto.AvatarRenameAuditContent.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AvatarRenameAuditContent::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:proto.AvatarRenameAuditContent.type)
}

// string content = 2;
void AvatarRenameAuditContent::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AvatarRenameAuditContent::content() const {
  // @@protoc_insertion_point(field_get:proto.AvatarRenameAuditContent.content)
  return content_.GetNoArena();
}
void AvatarRenameAuditContent::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AvatarRenameAuditContent.content)
}
#if LANG_CXX11
void AvatarRenameAuditContent::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AvatarRenameAuditContent.content)
}
#endif
void AvatarRenameAuditContent::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AvatarRenameAuditContent.content)
}
void AvatarRenameAuditContent::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AvatarRenameAuditContent.content)
}
::std::string* AvatarRenameAuditContent::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:proto.AvatarRenameAuditContent.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AvatarRenameAuditContent::release_content() {
  // @@protoc_insertion_point(field_release:proto.AvatarRenameAuditContent.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AvatarRenameAuditContent::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:proto.AvatarRenameAuditContent.content)
}

// uint32 auto_fail_time = 3;
void AvatarRenameAuditContent::clear_auto_fail_time() {
  auto_fail_time_ = 0u;
}
::google::protobuf::uint32 AvatarRenameAuditContent::auto_fail_time() const {
  // @@protoc_insertion_point(field_get:proto.AvatarRenameAuditContent.auto_fail_time)
  return auto_fail_time_;
}
void AvatarRenameAuditContent::set_auto_fail_time(::google::protobuf::uint32 value) {
  
  auto_fail_time_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarRenameAuditContent.auto_fail_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarRenameContentAuditField::kSegmentListFieldNumber;
const int AvatarRenameContentAuditField::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarRenameContentAuditField::AvatarRenameContentAuditField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarRenameContentAuditField)
}
AvatarRenameContentAuditField::AvatarRenameContentAuditField(const AvatarRenameContentAuditField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      segment_list_(from.segment_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.AvatarRenameContentAuditField)
}

void AvatarRenameContentAuditField::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AvatarRenameContentAuditField::~AvatarRenameContentAuditField() {
  // @@protoc_insertion_point(destructor:proto.AvatarRenameContentAuditField)
  SharedDtor();
}

void AvatarRenameContentAuditField::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AvatarRenameContentAuditField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarRenameContentAuditField::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarRenameContentAuditField& AvatarRenameContentAuditField::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarRenameContentAuditField* AvatarRenameContentAuditField::New(::google::protobuf::Arena* arena) const {
  AvatarRenameContentAuditField* n = new AvatarRenameContentAuditField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarRenameContentAuditField::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarRenameContentAuditField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segment_list_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool AvatarRenameContentAuditField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarRenameContentAuditField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.AvatarRenameAuditContent segment_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segment_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.AvatarRenameContentAuditField.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarRenameContentAuditField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarRenameContentAuditField)
  return false;
#undef DO_
}

void AvatarRenameContentAuditField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarRenameContentAuditField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.AvatarRenameAuditContent segment_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segment_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->segment_list(static_cast<int>(i)), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AvatarRenameContentAuditField.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarRenameContentAuditField)
}

::google::protobuf::uint8* AvatarRenameContentAuditField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarRenameContentAuditField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.AvatarRenameAuditContent segment_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segment_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->segment_list(static_cast<int>(i)), deterministic, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AvatarRenameContentAuditField.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarRenameContentAuditField)
  return target;
}

size_t AvatarRenameContentAuditField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarRenameContentAuditField)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.AvatarRenameAuditContent segment_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->segment_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->segment_list(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarRenameContentAuditField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarRenameContentAuditField)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarRenameContentAuditField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarRenameContentAuditField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarRenameContentAuditField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarRenameContentAuditField)
    MergeFrom(*source);
  }
}

void AvatarRenameContentAuditField::MergeFrom(const AvatarRenameContentAuditField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarRenameContentAuditField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segment_list_.MergeFrom(from.segment_list_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void AvatarRenameContentAuditField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarRenameContentAuditField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarRenameContentAuditField::CopyFrom(const AvatarRenameContentAuditField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarRenameContentAuditField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarRenameContentAuditField::IsInitialized() const {
  return true;
}

void AvatarRenameContentAuditField::Swap(AvatarRenameContentAuditField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarRenameContentAuditField::InternalSwap(AvatarRenameContentAuditField* other) {
  using std::swap;
  segment_list_.InternalSwap(&other->segment_list_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarRenameContentAuditField::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarRenameContentAuditField

// repeated .proto.AvatarRenameAuditContent segment_list = 1;
int AvatarRenameContentAuditField::segment_list_size() const {
  return segment_list_.size();
}
void AvatarRenameContentAuditField::clear_segment_list() {
  segment_list_.Clear();
}
const ::proto::AvatarRenameAuditContent& AvatarRenameContentAuditField::segment_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AvatarRenameContentAuditField.segment_list)
  return segment_list_.Get(index);
}
::proto::AvatarRenameAuditContent* AvatarRenameContentAuditField::mutable_segment_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.AvatarRenameContentAuditField.segment_list)
  return segment_list_.Mutable(index);
}
::proto::AvatarRenameAuditContent* AvatarRenameContentAuditField::add_segment_list() {
  // @@protoc_insertion_point(field_add:proto.AvatarRenameContentAuditField.segment_list)
  return segment_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::AvatarRenameAuditContent >*
AvatarRenameContentAuditField::mutable_segment_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AvatarRenameContentAuditField.segment_list)
  return &segment_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::AvatarRenameAuditContent >&
AvatarRenameContentAuditField::segment_list() const {
  // @@protoc_insertion_point(field_list:proto.AvatarRenameContentAuditField.segment_list)
  return segment_list_;
}

// string name = 2;
void AvatarRenameContentAuditField::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AvatarRenameContentAuditField::name() const {
  // @@protoc_insertion_point(field_get:proto.AvatarRenameContentAuditField.name)
  return name_.GetNoArena();
}
void AvatarRenameContentAuditField::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AvatarRenameContentAuditField.name)
}
#if LANG_CXX11
void AvatarRenameContentAuditField::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AvatarRenameContentAuditField.name)
}
#endif
void AvatarRenameContentAuditField::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AvatarRenameContentAuditField.name)
}
void AvatarRenameContentAuditField::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AvatarRenameContentAuditField.name)
}
::std::string* AvatarRenameContentAuditField::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.AvatarRenameContentAuditField.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AvatarRenameContentAuditField::release_name() {
  // @@protoc_insertion_point(field_release:proto.AvatarRenameContentAuditField.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AvatarRenameContentAuditField::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.AvatarRenameContentAuditField.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarRenameAuditData::kAidFieldNumber;
const int AvatarRenameAuditData::kEntityIdFieldNumber;
const int AvatarRenameAuditData::kLangFieldNumber;
const int AvatarRenameAuditData::kQueueKeyFieldNumber;
const int AvatarRenameAuditData::kRegionFieldNumber;
const int AvatarRenameAuditData::kUidFieldNumber;
const int AvatarRenameAuditData::kAuditFieldListFieldNumber;
const int AvatarRenameAuditData::kAuxFieldListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarRenameAuditData::AvatarRenameAuditData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarRenameAuditData)
}
AvatarRenameAuditData::AvatarRenameAuditData(const AvatarRenameAuditData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      audit_field_list_(from.audit_field_list_),
      aux_field_list_(from.aux_field_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  aid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.aid().size() > 0) {
    aid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aid_);
  }
  entity_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.entity_id().size() > 0) {
    entity_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_id_);
  }
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lang().size() > 0) {
    lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  queue_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.queue_key().size() > 0) {
    queue_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_key_);
  }
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.region().size() > 0) {
    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:proto.AvatarRenameAuditData)
}

void AvatarRenameAuditData::SharedCtor() {
  aid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entity_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = 0u;
  _cached_size_ = 0;
}

AvatarRenameAuditData::~AvatarRenameAuditData() {
  // @@protoc_insertion_point(destructor:proto.AvatarRenameAuditData)
  SharedDtor();
}

void AvatarRenameAuditData::SharedDtor() {
  aid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entity_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AvatarRenameAuditData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarRenameAuditData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarRenameAuditData& AvatarRenameAuditData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarRenameAuditData* AvatarRenameAuditData::New(::google::protobuf::Arena* arena) const {
  AvatarRenameAuditData* n = new AvatarRenameAuditData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarRenameAuditData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarRenameAuditData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audit_field_list_.Clear();
  aux_field_list_.Clear();
  aid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entity_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = 0u;
  _internal_metadata_.Clear();
}

bool AvatarRenameAuditData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarRenameAuditData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string aid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->aid().data(), static_cast<int>(this->aid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.AvatarRenameAuditData.aid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string entity_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->entity_id().data(), static_cast<int>(this->entity_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.AvatarRenameAuditData.entity_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lang = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lang().data(), static_cast<int>(this->lang().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.AvatarRenameAuditData.lang"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string queue_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queue_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->queue_key().data(), static_cast<int>(this->queue_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.AvatarRenameAuditData.queue_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string region = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->region().data(), static_cast<int>(this->region().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.AvatarRenameAuditData.region"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.AvatarRenameContentAuditField audit_field_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_audit_field_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ContentAuditAuxiliaryField aux_field_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_aux_field_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarRenameAuditData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarRenameAuditData)
  return false;
#undef DO_
}

void AvatarRenameAuditData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarRenameAuditData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string aid = 1;
  if (this->aid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->aid().data(), static_cast<int>(this->aid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AvatarRenameAuditData.aid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->aid(), output);
  }

  // string entity_id = 2;
  if (this->entity_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entity_id().data(), static_cast<int>(this->entity_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AvatarRenameAuditData.entity_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->entity_id(), output);
  }

  // string lang = 3;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), static_cast<int>(this->lang().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AvatarRenameAuditData.lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->lang(), output);
  }

  // string queue_key = 4;
  if (this->queue_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_key().data(), static_cast<int>(this->queue_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AvatarRenameAuditData.queue_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->queue_key(), output);
  }

  // string region = 5;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), static_cast<int>(this->region().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AvatarRenameAuditData.region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->region(), output);
  }

  // uint32 uid = 6;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uid(), output);
  }

  // repeated .proto.AvatarRenameContentAuditField audit_field_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audit_field_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->audit_field_list(static_cast<int>(i)), output);
  }

  // repeated .proto.ContentAuditAuxiliaryField aux_field_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->aux_field_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->aux_field_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarRenameAuditData)
}

::google::protobuf::uint8* AvatarRenameAuditData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarRenameAuditData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string aid = 1;
  if (this->aid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->aid().data(), static_cast<int>(this->aid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AvatarRenameAuditData.aid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->aid(), target);
  }

  // string entity_id = 2;
  if (this->entity_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entity_id().data(), static_cast<int>(this->entity_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AvatarRenameAuditData.entity_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->entity_id(), target);
  }

  // string lang = 3;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), static_cast<int>(this->lang().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AvatarRenameAuditData.lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lang(), target);
  }

  // string queue_key = 4;
  if (this->queue_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_key().data(), static_cast<int>(this->queue_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AvatarRenameAuditData.queue_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->queue_key(), target);
  }

  // string region = 5;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), static_cast<int>(this->region().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AvatarRenameAuditData.region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->region(), target);
  }

  // uint32 uid = 6;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uid(), target);
  }

  // repeated .proto.AvatarRenameContentAuditField audit_field_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audit_field_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->audit_field_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.ContentAuditAuxiliaryField aux_field_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->aux_field_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->aux_field_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarRenameAuditData)
  return target;
}

size_t AvatarRenameAuditData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarRenameAuditData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.AvatarRenameContentAuditField audit_field_list = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->audit_field_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->audit_field_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.ContentAuditAuxiliaryField aux_field_list = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->aux_field_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aux_field_list(static_cast<int>(i)));
    }
  }

  // string aid = 1;
  if (this->aid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->aid());
  }

  // string entity_id = 2;
  if (this->entity_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->entity_id());
  }

  // string lang = 3;
  if (this->lang().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lang());
  }

  // string queue_key = 4;
  if (this->queue_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->queue_key());
  }

  // string region = 5;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->region());
  }

  // uint32 uid = 6;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarRenameAuditData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarRenameAuditData)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarRenameAuditData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarRenameAuditData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarRenameAuditData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarRenameAuditData)
    MergeFrom(*source);
  }
}

void AvatarRenameAuditData::MergeFrom(const AvatarRenameAuditData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarRenameAuditData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  audit_field_list_.MergeFrom(from.audit_field_list_);
  aux_field_list_.MergeFrom(from.aux_field_list_);
  if (from.aid().size() > 0) {

    aid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aid_);
  }
  if (from.entity_id().size() > 0) {

    entity_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_id_);
  }
  if (from.lang().size() > 0) {

    lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  if (from.queue_key().size() > 0) {

    queue_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_key_);
  }
  if (from.region().size() > 0) {

    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void AvatarRenameAuditData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarRenameAuditData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarRenameAuditData::CopyFrom(const AvatarRenameAuditData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarRenameAuditData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarRenameAuditData::IsInitialized() const {
  return true;
}

void AvatarRenameAuditData::Swap(AvatarRenameAuditData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarRenameAuditData::InternalSwap(AvatarRenameAuditData* other) {
  using std::swap;
  audit_field_list_.InternalSwap(&other->audit_field_list_);
  aux_field_list_.InternalSwap(&other->aux_field_list_);
  aid_.Swap(&other->aid_);
  entity_id_.Swap(&other->entity_id_);
  lang_.Swap(&other->lang_);
  queue_key_.Swap(&other->queue_key_);
  region_.Swap(&other->region_);
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarRenameAuditData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarRenameAuditData

// string aid = 1;
void AvatarRenameAuditData::clear_aid() {
  aid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AvatarRenameAuditData::aid() const {
  // @@protoc_insertion_point(field_get:proto.AvatarRenameAuditData.aid)
  return aid_.GetNoArena();
}
void AvatarRenameAuditData::set_aid(const ::std::string& value) {
  
  aid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AvatarRenameAuditData.aid)
}
#if LANG_CXX11
void AvatarRenameAuditData::set_aid(::std::string&& value) {
  
  aid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AvatarRenameAuditData.aid)
}
#endif
void AvatarRenameAuditData::set_aid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  aid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AvatarRenameAuditData.aid)
}
void AvatarRenameAuditData::set_aid(const char* value, size_t size) {
  
  aid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AvatarRenameAuditData.aid)
}
::std::string* AvatarRenameAuditData::mutable_aid() {
  
  // @@protoc_insertion_point(field_mutable:proto.AvatarRenameAuditData.aid)
  return aid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AvatarRenameAuditData::release_aid() {
  // @@protoc_insertion_point(field_release:proto.AvatarRenameAuditData.aid)
  
  return aid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AvatarRenameAuditData::set_allocated_aid(::std::string* aid) {
  if (aid != NULL) {
    
  } else {
    
  }
  aid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aid);
  // @@protoc_insertion_point(field_set_allocated:proto.AvatarRenameAuditData.aid)
}

// string entity_id = 2;
void AvatarRenameAuditData::clear_entity_id() {
  entity_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AvatarRenameAuditData::entity_id() const {
  // @@protoc_insertion_point(field_get:proto.AvatarRenameAuditData.entity_id)
  return entity_id_.GetNoArena();
}
void AvatarRenameAuditData::set_entity_id(const ::std::string& value) {
  
  entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AvatarRenameAuditData.entity_id)
}
#if LANG_CXX11
void AvatarRenameAuditData::set_entity_id(::std::string&& value) {
  
  entity_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AvatarRenameAuditData.entity_id)
}
#endif
void AvatarRenameAuditData::set_entity_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AvatarRenameAuditData.entity_id)
}
void AvatarRenameAuditData::set_entity_id(const char* value, size_t size) {
  
  entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AvatarRenameAuditData.entity_id)
}
::std::string* AvatarRenameAuditData::mutable_entity_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.AvatarRenameAuditData.entity_id)
  return entity_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AvatarRenameAuditData::release_entity_id() {
  // @@protoc_insertion_point(field_release:proto.AvatarRenameAuditData.entity_id)
  
  return entity_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AvatarRenameAuditData::set_allocated_entity_id(::std::string* entity_id) {
  if (entity_id != NULL) {
    
  } else {
    
  }
  entity_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity_id);
  // @@protoc_insertion_point(field_set_allocated:proto.AvatarRenameAuditData.entity_id)
}

// string lang = 3;
void AvatarRenameAuditData::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AvatarRenameAuditData::lang() const {
  // @@protoc_insertion_point(field_get:proto.AvatarRenameAuditData.lang)
  return lang_.GetNoArena();
}
void AvatarRenameAuditData::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AvatarRenameAuditData.lang)
}
#if LANG_CXX11
void AvatarRenameAuditData::set_lang(::std::string&& value) {
  
  lang_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AvatarRenameAuditData.lang)
}
#endif
void AvatarRenameAuditData::set_lang(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AvatarRenameAuditData.lang)
}
void AvatarRenameAuditData::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AvatarRenameAuditData.lang)
}
::std::string* AvatarRenameAuditData::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:proto.AvatarRenameAuditData.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AvatarRenameAuditData::release_lang() {
  // @@protoc_insertion_point(field_release:proto.AvatarRenameAuditData.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AvatarRenameAuditData::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:proto.AvatarRenameAuditData.lang)
}

// string queue_key = 4;
void AvatarRenameAuditData::clear_queue_key() {
  queue_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AvatarRenameAuditData::queue_key() const {
  // @@protoc_insertion_point(field_get:proto.AvatarRenameAuditData.queue_key)
  return queue_key_.GetNoArena();
}
void AvatarRenameAuditData::set_queue_key(const ::std::string& value) {
  
  queue_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AvatarRenameAuditData.queue_key)
}
#if LANG_CXX11
void AvatarRenameAuditData::set_queue_key(::std::string&& value) {
  
  queue_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AvatarRenameAuditData.queue_key)
}
#endif
void AvatarRenameAuditData::set_queue_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  queue_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AvatarRenameAuditData.queue_key)
}
void AvatarRenameAuditData::set_queue_key(const char* value, size_t size) {
  
  queue_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AvatarRenameAuditData.queue_key)
}
::std::string* AvatarRenameAuditData::mutable_queue_key() {
  
  // @@protoc_insertion_point(field_mutable:proto.AvatarRenameAuditData.queue_key)
  return queue_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AvatarRenameAuditData::release_queue_key() {
  // @@protoc_insertion_point(field_release:proto.AvatarRenameAuditData.queue_key)
  
  return queue_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AvatarRenameAuditData::set_allocated_queue_key(::std::string* queue_key) {
  if (queue_key != NULL) {
    
  } else {
    
  }
  queue_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queue_key);
  // @@protoc_insertion_point(field_set_allocated:proto.AvatarRenameAuditData.queue_key)
}

// string region = 5;
void AvatarRenameAuditData::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AvatarRenameAuditData::region() const {
  // @@protoc_insertion_point(field_get:proto.AvatarRenameAuditData.region)
  return region_.GetNoArena();
}
void AvatarRenameAuditData::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AvatarRenameAuditData.region)
}
#if LANG_CXX11
void AvatarRenameAuditData::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AvatarRenameAuditData.region)
}
#endif
void AvatarRenameAuditData::set_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AvatarRenameAuditData.region)
}
void AvatarRenameAuditData::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AvatarRenameAuditData.region)
}
::std::string* AvatarRenameAuditData::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:proto.AvatarRenameAuditData.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AvatarRenameAuditData::release_region() {
  // @@protoc_insertion_point(field_release:proto.AvatarRenameAuditData.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AvatarRenameAuditData::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:proto.AvatarRenameAuditData.region)
}

// uint32 uid = 6;
void AvatarRenameAuditData::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 AvatarRenameAuditData::uid() const {
  // @@protoc_insertion_point(field_get:proto.AvatarRenameAuditData.uid)
  return uid_;
}
void AvatarRenameAuditData::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarRenameAuditData.uid)
}

// repeated .proto.AvatarRenameContentAuditField audit_field_list = 7;
int AvatarRenameAuditData::audit_field_list_size() const {
  return audit_field_list_.size();
}
void AvatarRenameAuditData::clear_audit_field_list() {
  audit_field_list_.Clear();
}
const ::proto::AvatarRenameContentAuditField& AvatarRenameAuditData::audit_field_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AvatarRenameAuditData.audit_field_list)
  return audit_field_list_.Get(index);
}
::proto::AvatarRenameContentAuditField* AvatarRenameAuditData::mutable_audit_field_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.AvatarRenameAuditData.audit_field_list)
  return audit_field_list_.Mutable(index);
}
::proto::AvatarRenameContentAuditField* AvatarRenameAuditData::add_audit_field_list() {
  // @@protoc_insertion_point(field_add:proto.AvatarRenameAuditData.audit_field_list)
  return audit_field_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::AvatarRenameContentAuditField >*
AvatarRenameAuditData::mutable_audit_field_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AvatarRenameAuditData.audit_field_list)
  return &audit_field_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::AvatarRenameContentAuditField >&
AvatarRenameAuditData::audit_field_list() const {
  // @@protoc_insertion_point(field_list:proto.AvatarRenameAuditData.audit_field_list)
  return audit_field_list_;
}

// repeated .proto.ContentAuditAuxiliaryField aux_field_list = 8;
int AvatarRenameAuditData::aux_field_list_size() const {
  return aux_field_list_.size();
}
void AvatarRenameAuditData::clear_aux_field_list() {
  aux_field_list_.Clear();
}
const ::proto::ContentAuditAuxiliaryField& AvatarRenameAuditData::aux_field_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AvatarRenameAuditData.aux_field_list)
  return aux_field_list_.Get(index);
}
::proto::ContentAuditAuxiliaryField* AvatarRenameAuditData::mutable_aux_field_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.AvatarRenameAuditData.aux_field_list)
  return aux_field_list_.Mutable(index);
}
::proto::ContentAuditAuxiliaryField* AvatarRenameAuditData::add_aux_field_list() {
  // @@protoc_insertion_point(field_add:proto.AvatarRenameAuditData.aux_field_list)
  return aux_field_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ContentAuditAuxiliaryField >*
AvatarRenameAuditData::mutable_aux_field_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AvatarRenameAuditData.aux_field_list)
  return &aux_field_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ContentAuditAuxiliaryField >&
AvatarRenameAuditData::aux_field_list() const {
  // @@protoc_insertion_point(field_list:proto.AvatarRenameAuditData.aux_field_list)
  return aux_field_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivityDungeonAvatar::kAvatarIdFieldNumber;
const int ActivityDungeonAvatar::kIsTrialFieldNumber;
const int ActivityDungeonAvatar::kCostumeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivityDungeonAvatar::ActivityDungeonAvatar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ActivityDungeonAvatar)
}
ActivityDungeonAvatar::ActivityDungeonAvatar(const ActivityDungeonAvatar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&avatar_id_, &from.avatar_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&costume_id_) -
    reinterpret_cast<char*>(&avatar_id_)) + sizeof(costume_id_));
  // @@protoc_insertion_point(copy_constructor:proto.ActivityDungeonAvatar)
}

void ActivityDungeonAvatar::SharedCtor() {
  ::memset(&avatar_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&costume_id_) -
      reinterpret_cast<char*>(&avatar_id_)) + sizeof(costume_id_));
  _cached_size_ = 0;
}

ActivityDungeonAvatar::~ActivityDungeonAvatar() {
  // @@protoc_insertion_point(destructor:proto.ActivityDungeonAvatar)
  SharedDtor();
}

void ActivityDungeonAvatar::SharedDtor() {
}

void ActivityDungeonAvatar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityDungeonAvatar::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActivityDungeonAvatar& ActivityDungeonAvatar::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActivityDungeonAvatar* ActivityDungeonAvatar::New(::google::protobuf::Arena* arena) const {
  ActivityDungeonAvatar* n = new ActivityDungeonAvatar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivityDungeonAvatar::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ActivityDungeonAvatar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&avatar_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&costume_id_) -
      reinterpret_cast<char*>(&avatar_id_)) + sizeof(costume_id_));
  _internal_metadata_.Clear();
}

bool ActivityDungeonAvatar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ActivityDungeonAvatar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 avatar_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_trial = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 costume_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costume_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ActivityDungeonAvatar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ActivityDungeonAvatar)
  return false;
#undef DO_
}

void ActivityDungeonAvatar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ActivityDungeonAvatar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 avatar_id = 1;
  if (this->avatar_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->avatar_id(), output);
  }

  // bool is_trial = 2;
  if (this->is_trial() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_trial(), output);
  }

  // uint32 costume_id = 3;
  if (this->costume_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->costume_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ActivityDungeonAvatar)
}

::google::protobuf::uint8* ActivityDungeonAvatar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ActivityDungeonAvatar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 avatar_id = 1;
  if (this->avatar_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->avatar_id(), target);
  }

  // bool is_trial = 2;
  if (this->is_trial() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_trial(), target);
  }

  // uint32 costume_id = 3;
  if (this->costume_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->costume_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ActivityDungeonAvatar)
  return target;
}

size_t ActivityDungeonAvatar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ActivityDungeonAvatar)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 avatar_id = 1;
  if (this->avatar_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avatar_id());
  }

  // bool is_trial = 2;
  if (this->is_trial() != 0) {
    total_size += 1 + 1;
  }

  // uint32 costume_id = 3;
  if (this->costume_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->costume_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityDungeonAvatar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ActivityDungeonAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityDungeonAvatar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivityDungeonAvatar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ActivityDungeonAvatar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ActivityDungeonAvatar)
    MergeFrom(*source);
  }
}

void ActivityDungeonAvatar::MergeFrom(const ActivityDungeonAvatar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ActivityDungeonAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatar_id() != 0) {
    set_avatar_id(from.avatar_id());
  }
  if (from.is_trial() != 0) {
    set_is_trial(from.is_trial());
  }
  if (from.costume_id() != 0) {
    set_costume_id(from.costume_id());
  }
}

void ActivityDungeonAvatar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ActivityDungeonAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityDungeonAvatar::CopyFrom(const ActivityDungeonAvatar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ActivityDungeonAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityDungeonAvatar::IsInitialized() const {
  return true;
}

void ActivityDungeonAvatar::Swap(ActivityDungeonAvatar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivityDungeonAvatar::InternalSwap(ActivityDungeonAvatar* other) {
  using std::swap;
  swap(avatar_id_, other->avatar_id_);
  swap(is_trial_, other->is_trial_);
  swap(costume_id_, other->costume_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivityDungeonAvatar::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActivityDungeonAvatar

// uint32 avatar_id = 1;
void ActivityDungeonAvatar::clear_avatar_id() {
  avatar_id_ = 0u;
}
::google::protobuf::uint32 ActivityDungeonAvatar::avatar_id() const {
  // @@protoc_insertion_point(field_get:proto.ActivityDungeonAvatar.avatar_id)
  return avatar_id_;
}
void ActivityDungeonAvatar::set_avatar_id(::google::protobuf::uint32 value) {
  
  avatar_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityDungeonAvatar.avatar_id)
}

// bool is_trial = 2;
void ActivityDungeonAvatar::clear_is_trial() {
  is_trial_ = false;
}
bool ActivityDungeonAvatar::is_trial() const {
  // @@protoc_insertion_point(field_get:proto.ActivityDungeonAvatar.is_trial)
  return is_trial_;
}
void ActivityDungeonAvatar::set_is_trial(bool value) {
  
  is_trial_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityDungeonAvatar.is_trial)
}

// uint32 costume_id = 3;
void ActivityDungeonAvatar::clear_costume_id() {
  costume_id_ = 0u;
}
::google::protobuf::uint32 ActivityDungeonAvatar::costume_id() const {
  // @@protoc_insertion_point(field_get:proto.ActivityDungeonAvatar.costume_id)
  return costume_id_;
}
void ActivityDungeonAvatar::set_costume_id(::google::protobuf::uint32 value) {
  
  costume_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityDungeonAvatar.costume_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGChallengeData::kChallengeIdFieldNumber;
const int GCGChallengeData::kChallengeTypeFieldNumber;
const int GCGChallengeData::kParamListFieldNumber;
const int GCGChallengeData::kProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGChallengeData::GCGChallengeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGChallengeData)
}
GCGChallengeData::GCGChallengeData(const GCGChallengeData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      param_list_(from.param_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&challenge_id_, &from.challenge_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&progress_) -
    reinterpret_cast<char*>(&challenge_id_)) + sizeof(progress_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGChallengeData)
}

void GCGChallengeData::SharedCtor() {
  ::memset(&challenge_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_) -
      reinterpret_cast<char*>(&challenge_id_)) + sizeof(progress_));
  _cached_size_ = 0;
}

GCGChallengeData::~GCGChallengeData() {
  // @@protoc_insertion_point(destructor:proto.GCGChallengeData)
  SharedDtor();
}

void GCGChallengeData::SharedDtor() {
}

void GCGChallengeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGChallengeData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGChallengeData& GCGChallengeData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGChallengeData* GCGChallengeData::New(::google::protobuf::Arena* arena) const {
  GCGChallengeData* n = new GCGChallengeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGChallengeData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGChallengeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_list_.Clear();
  ::memset(&challenge_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_) -
      reinterpret_cast<char*>(&challenge_id_)) + sizeof(progress_));
  _internal_metadata_.Clear();
}

bool GCGChallengeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGChallengeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 challenge_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 param_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_param_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_param_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 progress = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGChallengeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGChallengeData)
  return false;
#undef DO_
}

void GCGChallengeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGChallengeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 challenge_id = 1;
  if (this->challenge_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->challenge_id(), output);
  }

  // uint32 challenge_type = 2;
  if (this->challenge_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->challenge_type(), output);
  }

  // repeated uint32 param_list = 3;
  if (this->param_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _param_list_cached_byte_size_));
  }
  for (int i = 0, n = this->param_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->param_list(i), output);
  }

  // uint32 progress = 4;
  if (this->progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->progress(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGChallengeData)
}

::google::protobuf::uint8* GCGChallengeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGChallengeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 challenge_id = 1;
  if (this->challenge_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->challenge_id(), target);
  }

  // uint32 challenge_type = 2;
  if (this->challenge_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->challenge_type(), target);
  }

  // repeated uint32 param_list = 3;
  if (this->param_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _param_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->param_list_, target);
  }

  // uint32 progress = 4;
  if (this->progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->progress(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGChallengeData)
  return target;
}

size_t GCGChallengeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGChallengeData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 param_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->param_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _param_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 challenge_id = 1;
  if (this->challenge_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_id());
  }

  // uint32 challenge_type = 2;
  if (this->challenge_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_type());
  }

  // uint32 progress = 4;
  if (this->progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->progress());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGChallengeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGChallengeData)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGChallengeData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGChallengeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGChallengeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGChallengeData)
    MergeFrom(*source);
  }
}

void GCGChallengeData::MergeFrom(const GCGChallengeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGChallengeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  param_list_.MergeFrom(from.param_list_);
  if (from.challenge_id() != 0) {
    set_challenge_id(from.challenge_id());
  }
  if (from.challenge_type() != 0) {
    set_challenge_type(from.challenge_type());
  }
  if (from.progress() != 0) {
    set_progress(from.progress());
  }
}

void GCGChallengeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGChallengeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGChallengeData::CopyFrom(const GCGChallengeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGChallengeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGChallengeData::IsInitialized() const {
  return true;
}

void GCGChallengeData::Swap(GCGChallengeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGChallengeData::InternalSwap(GCGChallengeData* other) {
  using std::swap;
  param_list_.InternalSwap(&other->param_list_);
  swap(challenge_id_, other->challenge_id_);
  swap(challenge_type_, other->challenge_type_);
  swap(progress_, other->progress_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGChallengeData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGChallengeData

// uint32 challenge_id = 1;
void GCGChallengeData::clear_challenge_id() {
  challenge_id_ = 0u;
}
::google::protobuf::uint32 GCGChallengeData::challenge_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGChallengeData.challenge_id)
  return challenge_id_;
}
void GCGChallengeData::set_challenge_id(::google::protobuf::uint32 value) {
  
  challenge_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGChallengeData.challenge_id)
}

// uint32 challenge_type = 2;
void GCGChallengeData::clear_challenge_type() {
  challenge_type_ = 0u;
}
::google::protobuf::uint32 GCGChallengeData::challenge_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGChallengeData.challenge_type)
  return challenge_type_;
}
void GCGChallengeData::set_challenge_type(::google::protobuf::uint32 value) {
  
  challenge_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGChallengeData.challenge_type)
}

// repeated uint32 param_list = 3;
int GCGChallengeData::param_list_size() const {
  return param_list_.size();
}
void GCGChallengeData::clear_param_list() {
  param_list_.Clear();
}
::google::protobuf::uint32 GCGChallengeData::param_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGChallengeData.param_list)
  return param_list_.Get(index);
}
void GCGChallengeData::set_param_list(int index, ::google::protobuf::uint32 value) {
  param_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGChallengeData.param_list)
}
void GCGChallengeData::add_param_list(::google::protobuf::uint32 value) {
  param_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGChallengeData.param_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGChallengeData::param_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGChallengeData.param_list)
  return param_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGChallengeData::mutable_param_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGChallengeData.param_list)
  return &param_list_;
}

// uint32 progress = 4;
void GCGChallengeData::clear_progress() {
  progress_ = 0u;
}
::google::protobuf::uint32 GCGChallengeData::progress() const {
  // @@protoc_insertion_point(field_get:proto.GCGChallengeData.progress)
  return progress_;
}
void GCGChallengeData::set_progress(::google::protobuf::uint32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGChallengeData.progress)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GCGDuelExtra::GCGDuelExtra_CardFaceMapEntry::GCGDuelExtra_CardFaceMapEntry() {}
GCGDuelExtra::GCGDuelExtra_CardFaceMapEntry::GCGDuelExtra_CardFaceMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata GCGDuelExtra::GCGDuelExtra_CardFaceMapEntry::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[200];
}
void GCGDuelExtra::GCGDuelExtra_CardFaceMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void GCGDuelExtra::GCGDuelExtra_CardFaceMapEntry::MergeFrom(const GCGDuelExtra_CardFaceMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDuelExtra::kCardIdListFieldNumber;
const int GCGDuelExtra::kFieldIdFieldNumber;
const int GCGDuelExtra::kCardBackIdFieldNumber;
const int GCGDuelExtra::kCardFaceMapFieldNumber;
const int GCGDuelExtra::kChallengeListFieldNumber;
const int GCGDuelExtra::kScoreFieldNumber;
const int GCGDuelExtra::kIsMatchAiFieldNumber;
const int GCGDuelExtra::kAiDeckIdFieldNumber;
const int GCGDuelExtra::kIsInternalFieldNumber;
const int GCGDuelExtra::kForbidFinishChallengeListFieldNumber;
const int GCGDuelExtra::kLevelFieldNumber;
const int GCGDuelExtra::kClientVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDuelExtra::GCGDuelExtra()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDuelExtra)
}
GCGDuelExtra::GCGDuelExtra(const GCGDuelExtra& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      card_id_list_(from.card_id_list_),
      challenge_list_(from.challenge_list_),
      forbid_finish_challenge_list_(from.forbid_finish_challenge_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  card_face_map_.MergeFrom(from.card_face_map_);
  ::memcpy(&field_id_, &from.field_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&field_id_)) + sizeof(client_version_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGDuelExtra)
}

void GCGDuelExtra::SharedCtor() {
  ::memset(&field_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_version_) -
      reinterpret_cast<char*>(&field_id_)) + sizeof(client_version_));
  _cached_size_ = 0;
}

GCGDuelExtra::~GCGDuelExtra() {
  // @@protoc_insertion_point(destructor:proto.GCGDuelExtra)
  SharedDtor();
}

void GCGDuelExtra::SharedDtor() {
}

void GCGDuelExtra::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDuelExtra::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDuelExtra& GCGDuelExtra::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDuelExtra* GCGDuelExtra::New(::google::protobuf::Arena* arena) const {
  GCGDuelExtra* n = new GCGDuelExtra;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDuelExtra::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDuelExtra)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_id_list_.Clear();
  card_face_map_.Clear();
  challenge_list_.Clear();
  forbid_finish_challenge_list_.Clear();
  ::memset(&field_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_version_) -
      reinterpret_cast<char*>(&field_id_)) + sizeof(client_version_));
  _internal_metadata_.Clear();
}

bool GCGDuelExtra::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDuelExtra)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 card_id_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_card_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 field_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &field_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_back_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_back_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> card_face_map = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          GCGDuelExtra_CardFaceMapEntry::Parser< ::google::protobuf::internal::MapField<
              GCGDuelExtra_CardFaceMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&card_face_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGChallengeData challenge_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_challenge_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 score = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_match_ai = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_match_ai_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ai_deck_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ai_deck_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_internal = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_internal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 forbid_finish_challenge_list = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_forbid_finish_challenge_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 82u, input, this->mutable_forbid_finish_challenge_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 client_version = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDuelExtra)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDuelExtra)
  return false;
#undef DO_
}

void GCGDuelExtra::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDuelExtra)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 card_id_list = 1;
  if (this->card_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _card_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->card_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->card_id_list(i), output);
  }

  // uint32 field_id = 2;
  if (this->field_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->field_id(), output);
  }

  // uint32 card_back_id = 3;
  if (this->card_back_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->card_back_id(), output);
  }

  // map<uint32, uint32> card_face_map = 4;
  if (!this->card_face_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->card_face_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->card_face_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->card_face_map().begin();
          it != this->card_face_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGDuelExtra_CardFaceMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(card_face_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGDuelExtra_CardFaceMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->card_face_map().begin();
          it != this->card_face_map().end(); ++it) {
        entry.reset(card_face_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    }
  }

  // repeated .proto.GCGChallengeData challenge_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->challenge_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->challenge_list(static_cast<int>(i)), output);
  }

  // uint32 score = 6;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->score(), output);
  }

  // bool is_match_ai = 7;
  if (this->is_match_ai() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_match_ai(), output);
  }

  // uint32 ai_deck_id = 8;
  if (this->ai_deck_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ai_deck_id(), output);
  }

  // bool is_internal = 9;
  if (this->is_internal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_internal(), output);
  }

  // repeated uint32 forbid_finish_challenge_list = 10;
  if (this->forbid_finish_challenge_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _forbid_finish_challenge_list_cached_byte_size_));
  }
  for (int i = 0, n = this->forbid_finish_challenge_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->forbid_finish_challenge_list(i), output);
  }

  // uint32 level = 11;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->level(), output);
  }

  // uint32 client_version = 12;
  if (this->client_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->client_version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDuelExtra)
}

::google::protobuf::uint8* GCGDuelExtra::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDuelExtra)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 card_id_list = 1;
  if (this->card_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _card_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->card_id_list_, target);
  }

  // uint32 field_id = 2;
  if (this->field_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->field_id(), target);
  }

  // uint32 card_back_id = 3;
  if (this->card_back_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->card_back_id(), target);
  }

  // map<uint32, uint32> card_face_map = 4;
  if (!this->card_face_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->card_face_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->card_face_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->card_face_map().begin();
          it != this->card_face_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGDuelExtra_CardFaceMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(card_face_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGDuelExtra_CardFaceMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->card_face_map().begin();
          it != this->card_face_map().end(); ++it) {
        entry.reset(card_face_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    }
  }

  // repeated .proto.GCGChallengeData challenge_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->challenge_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->challenge_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 score = 6;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->score(), target);
  }

  // bool is_match_ai = 7;
  if (this->is_match_ai() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_match_ai(), target);
  }

  // uint32 ai_deck_id = 8;
  if (this->ai_deck_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ai_deck_id(), target);
  }

  // bool is_internal = 9;
  if (this->is_internal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_internal(), target);
  }

  // repeated uint32 forbid_finish_challenge_list = 10;
  if (this->forbid_finish_challenge_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _forbid_finish_challenge_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->forbid_finish_challenge_list_, target);
  }

  // uint32 level = 11;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->level(), target);
  }

  // uint32 client_version = 12;
  if (this->client_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->client_version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDuelExtra)
  return target;
}

size_t GCGDuelExtra::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDuelExtra)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 card_id_list = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->card_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _card_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<uint32, uint32> card_face_map = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->card_face_map_size());
  {
    ::google::protobuf::scoped_ptr<GCGDuelExtra_CardFaceMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->card_face_map().begin();
        it != this->card_face_map().end(); ++it) {
      entry.reset(card_face_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .proto.GCGChallengeData challenge_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->challenge_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->challenge_list(static_cast<int>(i)));
    }
  }

  // repeated uint32 forbid_finish_challenge_list = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->forbid_finish_challenge_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _forbid_finish_challenge_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 field_id = 2;
  if (this->field_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->field_id());
  }

  // uint32 card_back_id = 3;
  if (this->card_back_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_back_id());
  }

  // uint32 score = 6;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  // uint32 ai_deck_id = 8;
  if (this->ai_deck_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ai_deck_id());
  }

  // bool is_match_ai = 7;
  if (this->is_match_ai() != 0) {
    total_size += 1 + 1;
  }

  // bool is_internal = 9;
  if (this->is_internal() != 0) {
    total_size += 1 + 1;
  }

  // uint32 level = 11;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // uint32 client_version = 12;
  if (this->client_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->client_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDuelExtra::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDuelExtra)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDuelExtra* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDuelExtra>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDuelExtra)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDuelExtra)
    MergeFrom(*source);
  }
}

void GCGDuelExtra::MergeFrom(const GCGDuelExtra& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDuelExtra)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_id_list_.MergeFrom(from.card_id_list_);
  card_face_map_.MergeFrom(from.card_face_map_);
  challenge_list_.MergeFrom(from.challenge_list_);
  forbid_finish_challenge_list_.MergeFrom(from.forbid_finish_challenge_list_);
  if (from.field_id() != 0) {
    set_field_id(from.field_id());
  }
  if (from.card_back_id() != 0) {
    set_card_back_id(from.card_back_id());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.ai_deck_id() != 0) {
    set_ai_deck_id(from.ai_deck_id());
  }
  if (from.is_match_ai() != 0) {
    set_is_match_ai(from.is_match_ai());
  }
  if (from.is_internal() != 0) {
    set_is_internal(from.is_internal());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.client_version() != 0) {
    set_client_version(from.client_version());
  }
}

void GCGDuelExtra::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDuelExtra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDuelExtra::CopyFrom(const GCGDuelExtra& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDuelExtra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDuelExtra::IsInitialized() const {
  return true;
}

void GCGDuelExtra::Swap(GCGDuelExtra* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDuelExtra::InternalSwap(GCGDuelExtra* other) {
  using std::swap;
  card_id_list_.InternalSwap(&other->card_id_list_);
  card_face_map_.Swap(&other->card_face_map_);
  challenge_list_.InternalSwap(&other->challenge_list_);
  forbid_finish_challenge_list_.InternalSwap(&other->forbid_finish_challenge_list_);
  swap(field_id_, other->field_id_);
  swap(card_back_id_, other->card_back_id_);
  swap(score_, other->score_);
  swap(ai_deck_id_, other->ai_deck_id_);
  swap(is_match_ai_, other->is_match_ai_);
  swap(is_internal_, other->is_internal_);
  swap(level_, other->level_);
  swap(client_version_, other->client_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDuelExtra::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDuelExtra

// repeated uint32 card_id_list = 1;
int GCGDuelExtra::card_id_list_size() const {
  return card_id_list_.size();
}
void GCGDuelExtra::clear_card_id_list() {
  card_id_list_.Clear();
}
::google::protobuf::uint32 GCGDuelExtra::card_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDuelExtra.card_id_list)
  return card_id_list_.Get(index);
}
void GCGDuelExtra::set_card_id_list(int index, ::google::protobuf::uint32 value) {
  card_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDuelExtra.card_id_list)
}
void GCGDuelExtra::add_card_id_list(::google::protobuf::uint32 value) {
  card_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDuelExtra.card_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDuelExtra::card_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDuelExtra.card_id_list)
  return card_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDuelExtra::mutable_card_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDuelExtra.card_id_list)
  return &card_id_list_;
}

// uint32 field_id = 2;
void GCGDuelExtra::clear_field_id() {
  field_id_ = 0u;
}
::google::protobuf::uint32 GCGDuelExtra::field_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuelExtra.field_id)
  return field_id_;
}
void GCGDuelExtra::set_field_id(::google::protobuf::uint32 value) {
  
  field_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuelExtra.field_id)
}

// uint32 card_back_id = 3;
void GCGDuelExtra::clear_card_back_id() {
  card_back_id_ = 0u;
}
::google::protobuf::uint32 GCGDuelExtra::card_back_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuelExtra.card_back_id)
  return card_back_id_;
}
void GCGDuelExtra::set_card_back_id(::google::protobuf::uint32 value) {
  
  card_back_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuelExtra.card_back_id)
}

// map<uint32, uint32> card_face_map = 4;
int GCGDuelExtra::card_face_map_size() const {
  return card_face_map_.size();
}
void GCGDuelExtra::clear_card_face_map() {
  card_face_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
GCGDuelExtra::card_face_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGDuelExtra.card_face_map)
  return card_face_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
GCGDuelExtra::mutable_card_face_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGDuelExtra.card_face_map)
  return card_face_map_.MutableMap();
}

// repeated .proto.GCGChallengeData challenge_list = 5;
int GCGDuelExtra::challenge_list_size() const {
  return challenge_list_.size();
}
void GCGDuelExtra::clear_challenge_list() {
  challenge_list_.Clear();
}
const ::proto::GCGChallengeData& GCGDuelExtra::challenge_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDuelExtra.challenge_list)
  return challenge_list_.Get(index);
}
::proto::GCGChallengeData* GCGDuelExtra::mutable_challenge_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGDuelExtra.challenge_list)
  return challenge_list_.Mutable(index);
}
::proto::GCGChallengeData* GCGDuelExtra::add_challenge_list() {
  // @@protoc_insertion_point(field_add:proto.GCGDuelExtra.challenge_list)
  return challenge_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGChallengeData >*
GCGDuelExtra::mutable_challenge_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDuelExtra.challenge_list)
  return &challenge_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGChallengeData >&
GCGDuelExtra::challenge_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDuelExtra.challenge_list)
  return challenge_list_;
}

// uint32 score = 6;
void GCGDuelExtra::clear_score() {
  score_ = 0u;
}
::google::protobuf::uint32 GCGDuelExtra::score() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuelExtra.score)
  return score_;
}
void GCGDuelExtra::set_score(::google::protobuf::uint32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuelExtra.score)
}

// bool is_match_ai = 7;
void GCGDuelExtra::clear_is_match_ai() {
  is_match_ai_ = false;
}
bool GCGDuelExtra::is_match_ai() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuelExtra.is_match_ai)
  return is_match_ai_;
}
void GCGDuelExtra::set_is_match_ai(bool value) {
  
  is_match_ai_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuelExtra.is_match_ai)
}

// uint32 ai_deck_id = 8;
void GCGDuelExtra::clear_ai_deck_id() {
  ai_deck_id_ = 0u;
}
::google::protobuf::uint32 GCGDuelExtra::ai_deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuelExtra.ai_deck_id)
  return ai_deck_id_;
}
void GCGDuelExtra::set_ai_deck_id(::google::protobuf::uint32 value) {
  
  ai_deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuelExtra.ai_deck_id)
}

// bool is_internal = 9;
void GCGDuelExtra::clear_is_internal() {
  is_internal_ = false;
}
bool GCGDuelExtra::is_internal() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuelExtra.is_internal)
  return is_internal_;
}
void GCGDuelExtra::set_is_internal(bool value) {
  
  is_internal_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuelExtra.is_internal)
}

// repeated uint32 forbid_finish_challenge_list = 10;
int GCGDuelExtra::forbid_finish_challenge_list_size() const {
  return forbid_finish_challenge_list_.size();
}
void GCGDuelExtra::clear_forbid_finish_challenge_list() {
  forbid_finish_challenge_list_.Clear();
}
::google::protobuf::uint32 GCGDuelExtra::forbid_finish_challenge_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDuelExtra.forbid_finish_challenge_list)
  return forbid_finish_challenge_list_.Get(index);
}
void GCGDuelExtra::set_forbid_finish_challenge_list(int index, ::google::protobuf::uint32 value) {
  forbid_finish_challenge_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDuelExtra.forbid_finish_challenge_list)
}
void GCGDuelExtra::add_forbid_finish_challenge_list(::google::protobuf::uint32 value) {
  forbid_finish_challenge_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDuelExtra.forbid_finish_challenge_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDuelExtra::forbid_finish_challenge_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDuelExtra.forbid_finish_challenge_list)
  return forbid_finish_challenge_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDuelExtra::mutable_forbid_finish_challenge_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDuelExtra.forbid_finish_challenge_list)
  return &forbid_finish_challenge_list_;
}

// uint32 level = 11;
void GCGDuelExtra::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 GCGDuelExtra::level() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuelExtra.level)
  return level_;
}
void GCGDuelExtra::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuelExtra.level)
}

// uint32 client_version = 12;
void GCGDuelExtra::clear_client_version() {
  client_version_ = 0u;
}
::google::protobuf::uint32 GCGDuelExtra::client_version() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuelExtra.client_version)
  return client_version_;
}
void GCGDuelExtra::set_client_version(::google::protobuf::uint32 value) {
  
  client_version_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuelExtra.client_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryIpRegionData::kIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryIpRegionData::QueryIpRegionData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_define_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.QueryIpRegionData)
}
QueryIpRegionData::QueryIpRegionData(const QueryIpRegionData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.QueryIpRegionData)
}

void QueryIpRegionData::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

QueryIpRegionData::~QueryIpRegionData() {
  // @@protoc_insertion_point(destructor:proto.QueryIpRegionData)
  SharedDtor();
}

void QueryIpRegionData::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryIpRegionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryIpRegionData::descriptor() {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryIpRegionData& QueryIpRegionData::default_instance() {
  protobuf_define_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryIpRegionData* QueryIpRegionData::New(::google::protobuf::Arena* arena) const {
  QueryIpRegionData* n = new QueryIpRegionData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryIpRegionData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.QueryIpRegionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool QueryIpRegionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.QueryIpRegionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.QueryIpRegionData.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.QueryIpRegionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.QueryIpRegionData)
  return false;
#undef DO_
}

void QueryIpRegionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.QueryIpRegionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.QueryIpRegionData.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.QueryIpRegionData)
}

::google::protobuf::uint8* QueryIpRegionData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.QueryIpRegionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.QueryIpRegionData.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.QueryIpRegionData)
  return target;
}

size_t QueryIpRegionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.QueryIpRegionData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryIpRegionData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.QueryIpRegionData)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryIpRegionData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryIpRegionData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.QueryIpRegionData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.QueryIpRegionData)
    MergeFrom(*source);
  }
}

void QueryIpRegionData::MergeFrom(const QueryIpRegionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.QueryIpRegionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
}

void QueryIpRegionData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.QueryIpRegionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryIpRegionData::CopyFrom(const QueryIpRegionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.QueryIpRegionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryIpRegionData::IsInitialized() const {
  return true;
}

void QueryIpRegionData::Swap(QueryIpRegionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryIpRegionData::InternalSwap(QueryIpRegionData* other) {
  using std::swap;
  ip_.Swap(&other->ip_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryIpRegionData::GetMetadata() const {
  protobuf_define_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_define_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryIpRegionData

// string ip = 1;
void QueryIpRegionData::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryIpRegionData::ip() const {
  // @@protoc_insertion_point(field_get:proto.QueryIpRegionData.ip)
  return ip_.GetNoArena();
}
void QueryIpRegionData::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.QueryIpRegionData.ip)
}
#if LANG_CXX11
void QueryIpRegionData::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.QueryIpRegionData.ip)
}
#endif
void QueryIpRegionData::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.QueryIpRegionData.ip)
}
void QueryIpRegionData::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.QueryIpRegionData.ip)
}
::std::string* QueryIpRegionData::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:proto.QueryIpRegionData.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryIpRegionData::release_ip() {
  // @@protoc_insertion_point(field_release:proto.QueryIpRegionData.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryIpRegionData::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:proto.QueryIpRegionData.ip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
