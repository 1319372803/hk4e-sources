// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_only/cmd_mp.server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server_only/cmd_mp.server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
class UpdateMpStatusNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UpdateMpStatusNotify>
     _instance;
} _UpdateMpStatusNotify_default_instance_;
class DelMpStatusNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DelMpStatusNotify>
     _instance;
} _DelMpStatusNotify_default_instance_;
class GetPlayerMpStatusListReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetPlayerMpStatusListReq>
     _instance;
} _GetPlayerMpStatusListReq_default_instance_;
class GetPlayerMpStatusListRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetPlayerMpStatusListRsp>
     _instance;
} _GetPlayerMpStatusListRsp_default_instance_;
class GetPlayerMpStatusInfoReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetPlayerMpStatusInfoReq>
     _instance;
  ::google::protobuf::uint32 target_uid_;
  ::google::protobuf::internal::ArenaStringPtr online_id_;
  ::google::protobuf::internal::ArenaStringPtr psn_id_;
} _GetPlayerMpStatusInfoReq_default_instance_;
class GetPlayerMpStatusInfoRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetPlayerMpStatusInfoRsp>
     _instance;
} _GetPlayerMpStatusInfoRsp_default_instance_;

namespace protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMpStatusNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMpStatusNotify, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMpStatusNotify, is_only_mp_with_ps_player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMpStatusNotify, platform_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMpStatusNotify, online_player_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMpStatusNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMpStatusNotify, uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerMpStatusListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerMpStatusListRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerMpStatusListRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerMpStatusListRsp, player_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerMpStatusInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerMpStatusInfoReq, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerMpStatusInfoReq, is_online_id_),
  offsetof(GetPlayerMpStatusInfoReqDefaultTypeInternal, target_uid_),
  offsetof(GetPlayerMpStatusInfoReqDefaultTypeInternal, online_id_),
  offsetof(GetPlayerMpStatusInfoReqDefaultTypeInternal, psn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerMpStatusInfoReq, player_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerMpStatusInfoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerMpStatusInfoRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerMpStatusInfoRsp, target_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerMpStatusInfoRsp, target_player_info_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(UpdateMpStatusNotify)},
  { 9, -1, sizeof(DelMpStatusNotify)},
  { 15, -1, sizeof(GetPlayerMpStatusListReq)},
  { 20, -1, sizeof(GetPlayerMpStatusListRsp)},
  { 27, -1, sizeof(GetPlayerMpStatusInfoReq)},
  { 37, -1, sizeof(GetPlayerMpStatusInfoRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateMpStatusNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelMpStatusNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPlayerMpStatusListReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPlayerMpStatusListRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPlayerMpStatusInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPlayerMpStatusInfoRsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "server_only/cmd_mp.server.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::protobuf_define_2eproto::InitDefaults();
  _UpdateMpStatusNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UpdateMpStatusNotify_default_instance_);_DelMpStatusNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DelMpStatusNotify_default_instance_);_GetPlayerMpStatusListReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetPlayerMpStatusListReq_default_instance_);_GetPlayerMpStatusListRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetPlayerMpStatusListRsp_default_instance_);_GetPlayerMpStatusInfoReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetPlayerMpStatusInfoReq_default_instance_);_GetPlayerMpStatusInfoRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetPlayerMpStatusInfoRsp_default_instance_);_UpdateMpStatusNotify_default_instance_._instance.get_mutable()->online_player_info_ = const_cast< ::proto::OnlinePlayerInfo*>(
      ::proto::OnlinePlayerInfo::internal_default_instance());
  _GetPlayerMpStatusInfoReq_default_instance_.target_uid_ = 0u;
  _GetPlayerMpStatusInfoReq_default_instance_.online_id_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _GetPlayerMpStatusInfoReq_default_instance_.psn_id_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _GetPlayerMpStatusInfoRsp_default_instance_._instance.get_mutable()->target_player_info_ = const_cast< ::proto::OnlinePlayerInfo*>(
      ::proto::OnlinePlayerInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\037server_only/cmd_mp.server.proto\022\005proto"
      "\032\014define.proto\"\247\001\n\024UpdateMpStatusNotify\022"
      "\013\n\003uid\030\001 \001(\r\022!\n\031is_only_mp_with_ps_playe"
      "r\030\002 \001(\010\022*\n\rplatform_type\030\003 \001(\0162\023.proto.P"
      "latformType\0223\n\022online_player_info\030\004 \001(\0132"
      "\027.proto.OnlinePlayerInfo\" \n\021DelMpStatusN"
      "otify\022\013\n\003uid\030\001 \001(\r\"\032\n\030GetPlayerMpStatusL"
      "istReq\"Y\n\030GetPlayerMpStatusListRsp\022\017\n\007re"
      "tcode\030\001 \001(\005\022,\n\013player_list\030\002 \003(\0132\027.proto"
      ".OnlinePlayerInfo\"z\n\030GetPlayerMpStatusIn"
      "foReq\022\024\n\014is_online_id\030\001 \001(\010\022\024\n\ntarget_ui"
      "d\030\002 \001(\rH\000\022\023\n\tonline_id\030\003 \001(\tH\000\022\020\n\006psn_id"
      "\030\004 \001(\tH\000B\013\n\tplayer_id\"t\n\030GetPlayerMpStat"
      "usInfoRsp\022\017\n\007retcode\030\001 \001(\005\022\022\n\ntarget_uid"
      "\030\002 \001(\r\0223\n\022target_player_info\030\003 \001(\0132\027.pro"
      "to.OnlinePlayerInfoB(Z&github.com/teyvat"
      "-helper/hk4e-proto/pbb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 669);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server_only/cmd_mp.server.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_define_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateMpStatusNotify::kUidFieldNumber;
const int UpdateMpStatusNotify::kIsOnlyMpWithPsPlayerFieldNumber;
const int UpdateMpStatusNotify::kPlatformTypeFieldNumber;
const int UpdateMpStatusNotify::kOnlinePlayerInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateMpStatusNotify::UpdateMpStatusNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.UpdateMpStatusNotify)
}
UpdateMpStatusNotify::UpdateMpStatusNotify(const UpdateMpStatusNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_online_player_info()) {
    online_player_info_ = new ::proto::OnlinePlayerInfo(*from.online_player_info_);
  } else {
    online_player_info_ = NULL;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&platform_type_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(platform_type_));
  // @@protoc_insertion_point(copy_constructor:proto.UpdateMpStatusNotify)
}

void UpdateMpStatusNotify::SharedCtor() {
  ::memset(&online_player_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&platform_type_) -
      reinterpret_cast<char*>(&online_player_info_)) + sizeof(platform_type_));
  _cached_size_ = 0;
}

UpdateMpStatusNotify::~UpdateMpStatusNotify() {
  // @@protoc_insertion_point(destructor:proto.UpdateMpStatusNotify)
  SharedDtor();
}

void UpdateMpStatusNotify::SharedDtor() {
  if (this != internal_default_instance()) delete online_player_info_;
}

void UpdateMpStatusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateMpStatusNotify::descriptor() {
  protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateMpStatusNotify& UpdateMpStatusNotify::default_instance() {
  protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateMpStatusNotify* UpdateMpStatusNotify::New(::google::protobuf::Arena* arena) const {
  UpdateMpStatusNotify* n = new UpdateMpStatusNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateMpStatusNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.UpdateMpStatusNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && online_player_info_ != NULL) {
    delete online_player_info_;
  }
  online_player_info_ = NULL;
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&platform_type_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(platform_type_));
  _internal_metadata_.Clear();
}

bool UpdateMpStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.UpdateMpStatusNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_only_mp_with_ps_player = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_only_mp_with_ps_player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.PlatformType platform_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_platform_type(static_cast< ::proto::PlatformType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.OnlinePlayerInfo online_player_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_online_player_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.UpdateMpStatusNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.UpdateMpStatusNotify)
  return false;
#undef DO_
}

void UpdateMpStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.UpdateMpStatusNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // bool is_only_mp_with_ps_player = 2;
  if (this->is_only_mp_with_ps_player() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_only_mp_with_ps_player(), output);
  }

  // .proto.PlatformType platform_type = 3;
  if (this->platform_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->platform_type(), output);
  }

  // .proto.OnlinePlayerInfo online_player_info = 4;
  if (this->has_online_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->online_player_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.UpdateMpStatusNotify)
}

::google::protobuf::uint8* UpdateMpStatusNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.UpdateMpStatusNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // bool is_only_mp_with_ps_player = 2;
  if (this->is_only_mp_with_ps_player() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_only_mp_with_ps_player(), target);
  }

  // .proto.PlatformType platform_type = 3;
  if (this->platform_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->platform_type(), target);
  }

  // .proto.OnlinePlayerInfo online_player_info = 4;
  if (this->has_online_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->online_player_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.UpdateMpStatusNotify)
  return target;
}

size_t UpdateMpStatusNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.UpdateMpStatusNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.OnlinePlayerInfo online_player_info = 4;
  if (this->has_online_player_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->online_player_info_);
  }

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // bool is_only_mp_with_ps_player = 2;
  if (this->is_only_mp_with_ps_player() != 0) {
    total_size += 1 + 1;
  }

  // .proto.PlatformType platform_type = 3;
  if (this->platform_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->platform_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateMpStatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.UpdateMpStatusNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateMpStatusNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateMpStatusNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.UpdateMpStatusNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.UpdateMpStatusNotify)
    MergeFrom(*source);
  }
}

void UpdateMpStatusNotify::MergeFrom(const UpdateMpStatusNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.UpdateMpStatusNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_online_player_info()) {
    mutable_online_player_info()->::proto::OnlinePlayerInfo::MergeFrom(from.online_player_info());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.is_only_mp_with_ps_player() != 0) {
    set_is_only_mp_with_ps_player(from.is_only_mp_with_ps_player());
  }
  if (from.platform_type() != 0) {
    set_platform_type(from.platform_type());
  }
}

void UpdateMpStatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.UpdateMpStatusNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMpStatusNotify::CopyFrom(const UpdateMpStatusNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.UpdateMpStatusNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMpStatusNotify::IsInitialized() const {
  return true;
}

void UpdateMpStatusNotify::Swap(UpdateMpStatusNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateMpStatusNotify::InternalSwap(UpdateMpStatusNotify* other) {
  using std::swap;
  swap(online_player_info_, other->online_player_info_);
  swap(uid_, other->uid_);
  swap(is_only_mp_with_ps_player_, other->is_only_mp_with_ps_player_);
  swap(platform_type_, other->platform_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateMpStatusNotify::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateMpStatusNotify

// uint32 uid = 1;
void UpdateMpStatusNotify::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 UpdateMpStatusNotify::uid() const {
  // @@protoc_insertion_point(field_get:proto.UpdateMpStatusNotify.uid)
  return uid_;
}
void UpdateMpStatusNotify::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.UpdateMpStatusNotify.uid)
}

// bool is_only_mp_with_ps_player = 2;
void UpdateMpStatusNotify::clear_is_only_mp_with_ps_player() {
  is_only_mp_with_ps_player_ = false;
}
bool UpdateMpStatusNotify::is_only_mp_with_ps_player() const {
  // @@protoc_insertion_point(field_get:proto.UpdateMpStatusNotify.is_only_mp_with_ps_player)
  return is_only_mp_with_ps_player_;
}
void UpdateMpStatusNotify::set_is_only_mp_with_ps_player(bool value) {
  
  is_only_mp_with_ps_player_ = value;
  // @@protoc_insertion_point(field_set:proto.UpdateMpStatusNotify.is_only_mp_with_ps_player)
}

// .proto.PlatformType platform_type = 3;
void UpdateMpStatusNotify::clear_platform_type() {
  platform_type_ = 0;
}
::proto::PlatformType UpdateMpStatusNotify::platform_type() const {
  // @@protoc_insertion_point(field_get:proto.UpdateMpStatusNotify.platform_type)
  return static_cast< ::proto::PlatformType >(platform_type_);
}
void UpdateMpStatusNotify::set_platform_type(::proto::PlatformType value) {
  
  platform_type_ = value;
  // @@protoc_insertion_point(field_set:proto.UpdateMpStatusNotify.platform_type)
}

// .proto.OnlinePlayerInfo online_player_info = 4;
bool UpdateMpStatusNotify::has_online_player_info() const {
  return this != internal_default_instance() && online_player_info_ != NULL;
}
void UpdateMpStatusNotify::clear_online_player_info() {
  if (GetArenaNoVirtual() == NULL && online_player_info_ != NULL) delete online_player_info_;
  online_player_info_ = NULL;
}
const ::proto::OnlinePlayerInfo& UpdateMpStatusNotify::online_player_info() const {
  const ::proto::OnlinePlayerInfo* p = online_player_info_;
  // @@protoc_insertion_point(field_get:proto.UpdateMpStatusNotify.online_player_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::OnlinePlayerInfo*>(
      &::proto::_OnlinePlayerInfo_default_instance_);
}
::proto::OnlinePlayerInfo* UpdateMpStatusNotify::mutable_online_player_info() {
  
  if (online_player_info_ == NULL) {
    online_player_info_ = new ::proto::OnlinePlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.UpdateMpStatusNotify.online_player_info)
  return online_player_info_;
}
::proto::OnlinePlayerInfo* UpdateMpStatusNotify::release_online_player_info() {
  // @@protoc_insertion_point(field_release:proto.UpdateMpStatusNotify.online_player_info)
  
  ::proto::OnlinePlayerInfo* temp = online_player_info_;
  online_player_info_ = NULL;
  return temp;
}
void UpdateMpStatusNotify::set_allocated_online_player_info(::proto::OnlinePlayerInfo* online_player_info) {
  delete online_player_info_;
  online_player_info_ = online_player_info;
  if (online_player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateMpStatusNotify.online_player_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelMpStatusNotify::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelMpStatusNotify::DelMpStatusNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DelMpStatusNotify)
}
DelMpStatusNotify::DelMpStatusNotify(const DelMpStatusNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:proto.DelMpStatusNotify)
}

void DelMpStatusNotify::SharedCtor() {
  uid_ = 0u;
  _cached_size_ = 0;
}

DelMpStatusNotify::~DelMpStatusNotify() {
  // @@protoc_insertion_point(destructor:proto.DelMpStatusNotify)
  SharedDtor();
}

void DelMpStatusNotify::SharedDtor() {
}

void DelMpStatusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelMpStatusNotify::descriptor() {
  protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelMpStatusNotify& DelMpStatusNotify::default_instance() {
  protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelMpStatusNotify* DelMpStatusNotify::New(::google::protobuf::Arena* arena) const {
  DelMpStatusNotify* n = new DelMpStatusNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelMpStatusNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DelMpStatusNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0u;
  _internal_metadata_.Clear();
}

bool DelMpStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DelMpStatusNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DelMpStatusNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DelMpStatusNotify)
  return false;
#undef DO_
}

void DelMpStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DelMpStatusNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DelMpStatusNotify)
}

::google::protobuf::uint8* DelMpStatusNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DelMpStatusNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DelMpStatusNotify)
  return target;
}

size_t DelMpStatusNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DelMpStatusNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelMpStatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DelMpStatusNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DelMpStatusNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelMpStatusNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DelMpStatusNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DelMpStatusNotify)
    MergeFrom(*source);
  }
}

void DelMpStatusNotify::MergeFrom(const DelMpStatusNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DelMpStatusNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void DelMpStatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DelMpStatusNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelMpStatusNotify::CopyFrom(const DelMpStatusNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DelMpStatusNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelMpStatusNotify::IsInitialized() const {
  return true;
}

void DelMpStatusNotify::Swap(DelMpStatusNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelMpStatusNotify::InternalSwap(DelMpStatusNotify* other) {
  using std::swap;
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelMpStatusNotify::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelMpStatusNotify

// uint32 uid = 1;
void DelMpStatusNotify::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 DelMpStatusNotify::uid() const {
  // @@protoc_insertion_point(field_get:proto.DelMpStatusNotify.uid)
  return uid_;
}
void DelMpStatusNotify::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DelMpStatusNotify.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPlayerMpStatusListReq::GetPlayerMpStatusListReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetPlayerMpStatusListReq)
}
GetPlayerMpStatusListReq::GetPlayerMpStatusListReq(const GetPlayerMpStatusListReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GetPlayerMpStatusListReq)
}

void GetPlayerMpStatusListReq::SharedCtor() {
  _cached_size_ = 0;
}

GetPlayerMpStatusListReq::~GetPlayerMpStatusListReq() {
  // @@protoc_insertion_point(destructor:proto.GetPlayerMpStatusListReq)
  SharedDtor();
}

void GetPlayerMpStatusListReq::SharedDtor() {
}

void GetPlayerMpStatusListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPlayerMpStatusListReq::descriptor() {
  protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPlayerMpStatusListReq& GetPlayerMpStatusListReq::default_instance() {
  protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPlayerMpStatusListReq* GetPlayerMpStatusListReq::New(::google::protobuf::Arena* arena) const {
  GetPlayerMpStatusListReq* n = new GetPlayerMpStatusListReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPlayerMpStatusListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetPlayerMpStatusListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GetPlayerMpStatusListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetPlayerMpStatusListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetPlayerMpStatusListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetPlayerMpStatusListReq)
  return false;
#undef DO_
}

void GetPlayerMpStatusListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetPlayerMpStatusListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetPlayerMpStatusListReq)
}

::google::protobuf::uint8* GetPlayerMpStatusListReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetPlayerMpStatusListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetPlayerMpStatusListReq)
  return target;
}

size_t GetPlayerMpStatusListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetPlayerMpStatusListReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPlayerMpStatusListReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetPlayerMpStatusListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPlayerMpStatusListReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPlayerMpStatusListReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetPlayerMpStatusListReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetPlayerMpStatusListReq)
    MergeFrom(*source);
  }
}

void GetPlayerMpStatusListReq::MergeFrom(const GetPlayerMpStatusListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetPlayerMpStatusListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetPlayerMpStatusListReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetPlayerMpStatusListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayerMpStatusListReq::CopyFrom(const GetPlayerMpStatusListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetPlayerMpStatusListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerMpStatusListReq::IsInitialized() const {
  return true;
}

void GetPlayerMpStatusListReq::Swap(GetPlayerMpStatusListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPlayerMpStatusListReq::InternalSwap(GetPlayerMpStatusListReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPlayerMpStatusListReq::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPlayerMpStatusListReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPlayerMpStatusListRsp::kRetcodeFieldNumber;
const int GetPlayerMpStatusListRsp::kPlayerListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPlayerMpStatusListRsp::GetPlayerMpStatusListRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetPlayerMpStatusListRsp)
}
GetPlayerMpStatusListRsp::GetPlayerMpStatusListRsp(const GetPlayerMpStatusListRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      player_list_(from.player_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.GetPlayerMpStatusListRsp)
}

void GetPlayerMpStatusListRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

GetPlayerMpStatusListRsp::~GetPlayerMpStatusListRsp() {
  // @@protoc_insertion_point(destructor:proto.GetPlayerMpStatusListRsp)
  SharedDtor();
}

void GetPlayerMpStatusListRsp::SharedDtor() {
}

void GetPlayerMpStatusListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPlayerMpStatusListRsp::descriptor() {
  protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPlayerMpStatusListRsp& GetPlayerMpStatusListRsp::default_instance() {
  protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPlayerMpStatusListRsp* GetPlayerMpStatusListRsp::New(::google::protobuf::Arena* arena) const {
  GetPlayerMpStatusListRsp* n = new GetPlayerMpStatusListRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPlayerMpStatusListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetPlayerMpStatusListRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_list_.Clear();
  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool GetPlayerMpStatusListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetPlayerMpStatusListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.OnlinePlayerInfo player_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetPlayerMpStatusListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetPlayerMpStatusListRsp)
  return false;
#undef DO_
}

void GetPlayerMpStatusListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetPlayerMpStatusListRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // repeated .proto.OnlinePlayerInfo player_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetPlayerMpStatusListRsp)
}

::google::protobuf::uint8* GetPlayerMpStatusListRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetPlayerMpStatusListRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // repeated .proto.OnlinePlayerInfo player_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->player_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetPlayerMpStatusListRsp)
  return target;
}

size_t GetPlayerMpStatusListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetPlayerMpStatusListRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.OnlinePlayerInfo player_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->player_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_list(static_cast<int>(i)));
    }
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPlayerMpStatusListRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetPlayerMpStatusListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPlayerMpStatusListRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPlayerMpStatusListRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetPlayerMpStatusListRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetPlayerMpStatusListRsp)
    MergeFrom(*source);
  }
}

void GetPlayerMpStatusListRsp::MergeFrom(const GetPlayerMpStatusListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetPlayerMpStatusListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_list_.MergeFrom(from.player_list_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void GetPlayerMpStatusListRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetPlayerMpStatusListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayerMpStatusListRsp::CopyFrom(const GetPlayerMpStatusListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetPlayerMpStatusListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerMpStatusListRsp::IsInitialized() const {
  return true;
}

void GetPlayerMpStatusListRsp::Swap(GetPlayerMpStatusListRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPlayerMpStatusListRsp::InternalSwap(GetPlayerMpStatusListRsp* other) {
  using std::swap;
  player_list_.InternalSwap(&other->player_list_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPlayerMpStatusListRsp::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPlayerMpStatusListRsp

// int32 retcode = 1;
void GetPlayerMpStatusListRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GetPlayerMpStatusListRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetPlayerMpStatusListRsp.retcode)
  return retcode_;
}
void GetPlayerMpStatusListRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpStatusListRsp.retcode)
}

// repeated .proto.OnlinePlayerInfo player_list = 2;
int GetPlayerMpStatusListRsp::player_list_size() const {
  return player_list_.size();
}
void GetPlayerMpStatusListRsp::clear_player_list() {
  player_list_.Clear();
}
const ::proto::OnlinePlayerInfo& GetPlayerMpStatusListRsp::player_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetPlayerMpStatusListRsp.player_list)
  return player_list_.Get(index);
}
::proto::OnlinePlayerInfo* GetPlayerMpStatusListRsp::mutable_player_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetPlayerMpStatusListRsp.player_list)
  return player_list_.Mutable(index);
}
::proto::OnlinePlayerInfo* GetPlayerMpStatusListRsp::add_player_list() {
  // @@protoc_insertion_point(field_add:proto.GetPlayerMpStatusListRsp.player_list)
  return player_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::OnlinePlayerInfo >*
GetPlayerMpStatusListRsp::mutable_player_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetPlayerMpStatusListRsp.player_list)
  return &player_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::OnlinePlayerInfo >&
GetPlayerMpStatusListRsp::player_list() const {
  // @@protoc_insertion_point(field_list:proto.GetPlayerMpStatusListRsp.player_list)
  return player_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPlayerMpStatusInfoReq::kIsOnlineIdFieldNumber;
const int GetPlayerMpStatusInfoReq::kTargetUidFieldNumber;
const int GetPlayerMpStatusInfoReq::kOnlineIdFieldNumber;
const int GetPlayerMpStatusInfoReq::kPsnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPlayerMpStatusInfoReq::GetPlayerMpStatusInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetPlayerMpStatusInfoReq)
}
GetPlayerMpStatusInfoReq::GetPlayerMpStatusInfoReq(const GetPlayerMpStatusInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_online_id_ = from.is_online_id_;
  clear_has_player_id();
  switch (from.player_id_case()) {
    case kTargetUid: {
      set_target_uid(from.target_uid());
      break;
    }
    case kOnlineId: {
      set_online_id(from.online_id());
      break;
    }
    case kPsnId: {
      set_psn_id(from.psn_id());
      break;
    }
    case PLAYER_ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.GetPlayerMpStatusInfoReq)
}

void GetPlayerMpStatusInfoReq::SharedCtor() {
  is_online_id_ = false;
  clear_has_player_id();
  _cached_size_ = 0;
}

GetPlayerMpStatusInfoReq::~GetPlayerMpStatusInfoReq() {
  // @@protoc_insertion_point(destructor:proto.GetPlayerMpStatusInfoReq)
  SharedDtor();
}

void GetPlayerMpStatusInfoReq::SharedDtor() {
  if (has_player_id()) {
    clear_player_id();
  }
}

void GetPlayerMpStatusInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPlayerMpStatusInfoReq::descriptor() {
  protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPlayerMpStatusInfoReq& GetPlayerMpStatusInfoReq::default_instance() {
  protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPlayerMpStatusInfoReq* GetPlayerMpStatusInfoReq::New(::google::protobuf::Arena* arena) const {
  GetPlayerMpStatusInfoReq* n = new GetPlayerMpStatusInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPlayerMpStatusInfoReq::clear_player_id() {
// @@protoc_insertion_point(one_of_clear_start:proto.GetPlayerMpStatusInfoReq)
  switch (player_id_case()) {
    case kTargetUid: {
      // No need to clear
      break;
    }
    case kOnlineId: {
      player_id_.online_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kPsnId: {
      player_id_.psn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case PLAYER_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PLAYER_ID_NOT_SET;
}


void GetPlayerMpStatusInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetPlayerMpStatusInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_online_id_ = false;
  clear_player_id();
  _internal_metadata_.Clear();
}

bool GetPlayerMpStatusInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetPlayerMpStatusInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_online_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_online_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_.target_uid_)));
          set_has_target_uid();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string online_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_online_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->online_id().data(), static_cast<int>(this->online_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.GetPlayerMpStatusInfoReq.online_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string psn_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_psn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->psn_id().data(), static_cast<int>(this->psn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.GetPlayerMpStatusInfoReq.psn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetPlayerMpStatusInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetPlayerMpStatusInfoReq)
  return false;
#undef DO_
}

void GetPlayerMpStatusInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetPlayerMpStatusInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_online_id = 1;
  if (this->is_online_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_online_id(), output);
  }

  // uint32 target_uid = 2;
  if (has_target_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_uid(), output);
  }

  // string online_id = 3;
  if (has_online_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->online_id().data(), static_cast<int>(this->online_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GetPlayerMpStatusInfoReq.online_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->online_id(), output);
  }

  // string psn_id = 4;
  if (has_psn_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->psn_id().data(), static_cast<int>(this->psn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GetPlayerMpStatusInfoReq.psn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->psn_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetPlayerMpStatusInfoReq)
}

::google::protobuf::uint8* GetPlayerMpStatusInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetPlayerMpStatusInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_online_id = 1;
  if (this->is_online_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_online_id(), target);
  }

  // uint32 target_uid = 2;
  if (has_target_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_uid(), target);
  }

  // string online_id = 3;
  if (has_online_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->online_id().data(), static_cast<int>(this->online_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GetPlayerMpStatusInfoReq.online_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->online_id(), target);
  }

  // string psn_id = 4;
  if (has_psn_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->psn_id().data(), static_cast<int>(this->psn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GetPlayerMpStatusInfoReq.psn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->psn_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetPlayerMpStatusInfoReq)
  return target;
}

size_t GetPlayerMpStatusInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetPlayerMpStatusInfoReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_online_id = 1;
  if (this->is_online_id() != 0) {
    total_size += 1 + 1;
  }

  switch (player_id_case()) {
    // uint32 target_uid = 2;
    case kTargetUid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_uid());
      break;
    }
    // string online_id = 3;
    case kOnlineId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->online_id());
      break;
    }
    // string psn_id = 4;
    case kPsnId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->psn_id());
      break;
    }
    case PLAYER_ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPlayerMpStatusInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetPlayerMpStatusInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPlayerMpStatusInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPlayerMpStatusInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetPlayerMpStatusInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetPlayerMpStatusInfoReq)
    MergeFrom(*source);
  }
}

void GetPlayerMpStatusInfoReq::MergeFrom(const GetPlayerMpStatusInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetPlayerMpStatusInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_online_id() != 0) {
    set_is_online_id(from.is_online_id());
  }
  switch (from.player_id_case()) {
    case kTargetUid: {
      set_target_uid(from.target_uid());
      break;
    }
    case kOnlineId: {
      set_online_id(from.online_id());
      break;
    }
    case kPsnId: {
      set_psn_id(from.psn_id());
      break;
    }
    case PLAYER_ID_NOT_SET: {
      break;
    }
  }
}

void GetPlayerMpStatusInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetPlayerMpStatusInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayerMpStatusInfoReq::CopyFrom(const GetPlayerMpStatusInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetPlayerMpStatusInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerMpStatusInfoReq::IsInitialized() const {
  return true;
}

void GetPlayerMpStatusInfoReq::Swap(GetPlayerMpStatusInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPlayerMpStatusInfoReq::InternalSwap(GetPlayerMpStatusInfoReq* other) {
  using std::swap;
  swap(is_online_id_, other->is_online_id_);
  swap(player_id_, other->player_id_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPlayerMpStatusInfoReq::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPlayerMpStatusInfoReq

// bool is_online_id = 1;
void GetPlayerMpStatusInfoReq::clear_is_online_id() {
  is_online_id_ = false;
}
bool GetPlayerMpStatusInfoReq::is_online_id() const {
  // @@protoc_insertion_point(field_get:proto.GetPlayerMpStatusInfoReq.is_online_id)
  return is_online_id_;
}
void GetPlayerMpStatusInfoReq::set_is_online_id(bool value) {
  
  is_online_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpStatusInfoReq.is_online_id)
}

// uint32 target_uid = 2;
bool GetPlayerMpStatusInfoReq::has_target_uid() const {
  return player_id_case() == kTargetUid;
}
void GetPlayerMpStatusInfoReq::set_has_target_uid() {
  _oneof_case_[0] = kTargetUid;
}
void GetPlayerMpStatusInfoReq::clear_target_uid() {
  if (has_target_uid()) {
    player_id_.target_uid_ = 0u;
    clear_has_player_id();
  }
}
::google::protobuf::uint32 GetPlayerMpStatusInfoReq::target_uid() const {
  // @@protoc_insertion_point(field_get:proto.GetPlayerMpStatusInfoReq.target_uid)
  if (has_target_uid()) {
    return player_id_.target_uid_;
  }
  return 0u;
}
void GetPlayerMpStatusInfoReq::set_target_uid(::google::protobuf::uint32 value) {
  if (!has_target_uid()) {
    clear_player_id();
    set_has_target_uid();
  }
  player_id_.target_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpStatusInfoReq.target_uid)
}

// string online_id = 3;
bool GetPlayerMpStatusInfoReq::has_online_id() const {
  return player_id_case() == kOnlineId;
}
void GetPlayerMpStatusInfoReq::set_has_online_id() {
  _oneof_case_[0] = kOnlineId;
}
void GetPlayerMpStatusInfoReq::clear_online_id() {
  if (has_online_id()) {
    player_id_.online_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_player_id();
  }
}
const ::std::string& GetPlayerMpStatusInfoReq::online_id() const {
  // @@protoc_insertion_point(field_get:proto.GetPlayerMpStatusInfoReq.online_id)
  if (has_online_id()) {
    return player_id_.online_id_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void GetPlayerMpStatusInfoReq::set_online_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpStatusInfoReq.online_id)
  if (!has_online_id()) {
    clear_player_id();
    set_has_online_id();
    player_id_.online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpStatusInfoReq.online_id)
}
#if LANG_CXX11
void GetPlayerMpStatusInfoReq::set_online_id(::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpStatusInfoReq.online_id)
  if (!has_online_id()) {
    clear_player_id();
    set_has_online_id();
    player_id_.online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.online_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GetPlayerMpStatusInfoReq.online_id)
}
#endif
void GetPlayerMpStatusInfoReq::set_online_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_online_id()) {
    clear_player_id();
    set_has_online_id();
    player_id_.online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GetPlayerMpStatusInfoReq.online_id)
}
void GetPlayerMpStatusInfoReq::set_online_id(const char* value, size_t size) {
  if (!has_online_id()) {
    clear_player_id();
    set_has_online_id();
    player_id_.online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GetPlayerMpStatusInfoReq.online_id)
}
::std::string* GetPlayerMpStatusInfoReq::mutable_online_id() {
  if (!has_online_id()) {
    clear_player_id();
    set_has_online_id();
    player_id_.online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:proto.GetPlayerMpStatusInfoReq.online_id)
  return player_id_.online_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetPlayerMpStatusInfoReq::release_online_id() {
  // @@protoc_insertion_point(field_release:proto.GetPlayerMpStatusInfoReq.online_id)
  if (has_online_id()) {
    clear_has_player_id();
    return player_id_.online_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void GetPlayerMpStatusInfoReq::set_allocated_online_id(::std::string* online_id) {
  if (!has_online_id()) {
    player_id_.online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_player_id();
  if (online_id != NULL) {
    set_has_online_id();
    player_id_.online_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        online_id);
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GetPlayerMpStatusInfoReq.online_id)
}

// string psn_id = 4;
bool GetPlayerMpStatusInfoReq::has_psn_id() const {
  return player_id_case() == kPsnId;
}
void GetPlayerMpStatusInfoReq::set_has_psn_id() {
  _oneof_case_[0] = kPsnId;
}
void GetPlayerMpStatusInfoReq::clear_psn_id() {
  if (has_psn_id()) {
    player_id_.psn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_player_id();
  }
}
const ::std::string& GetPlayerMpStatusInfoReq::psn_id() const {
  // @@protoc_insertion_point(field_get:proto.GetPlayerMpStatusInfoReq.psn_id)
  if (has_psn_id()) {
    return player_id_.psn_id_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void GetPlayerMpStatusInfoReq::set_psn_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpStatusInfoReq.psn_id)
  if (!has_psn_id()) {
    clear_player_id();
    set_has_psn_id();
    player_id_.psn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.psn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpStatusInfoReq.psn_id)
}
#if LANG_CXX11
void GetPlayerMpStatusInfoReq::set_psn_id(::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpStatusInfoReq.psn_id)
  if (!has_psn_id()) {
    clear_player_id();
    set_has_psn_id();
    player_id_.psn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.psn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GetPlayerMpStatusInfoReq.psn_id)
}
#endif
void GetPlayerMpStatusInfoReq::set_psn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_psn_id()) {
    clear_player_id();
    set_has_psn_id();
    player_id_.psn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.psn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GetPlayerMpStatusInfoReq.psn_id)
}
void GetPlayerMpStatusInfoReq::set_psn_id(const char* value, size_t size) {
  if (!has_psn_id()) {
    clear_player_id();
    set_has_psn_id();
    player_id_.psn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.psn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GetPlayerMpStatusInfoReq.psn_id)
}
::std::string* GetPlayerMpStatusInfoReq::mutable_psn_id() {
  if (!has_psn_id()) {
    clear_player_id();
    set_has_psn_id();
    player_id_.psn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:proto.GetPlayerMpStatusInfoReq.psn_id)
  return player_id_.psn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetPlayerMpStatusInfoReq::release_psn_id() {
  // @@protoc_insertion_point(field_release:proto.GetPlayerMpStatusInfoReq.psn_id)
  if (has_psn_id()) {
    clear_has_player_id();
    return player_id_.psn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void GetPlayerMpStatusInfoReq::set_allocated_psn_id(::std::string* psn_id) {
  if (!has_psn_id()) {
    player_id_.psn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_player_id();
  if (psn_id != NULL) {
    set_has_psn_id();
    player_id_.psn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        psn_id);
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GetPlayerMpStatusInfoReq.psn_id)
}

bool GetPlayerMpStatusInfoReq::has_player_id() const {
  return player_id_case() != PLAYER_ID_NOT_SET;
}
void GetPlayerMpStatusInfoReq::clear_has_player_id() {
  _oneof_case_[0] = PLAYER_ID_NOT_SET;
}
GetPlayerMpStatusInfoReq::PlayerIdCase GetPlayerMpStatusInfoReq::player_id_case() const {
  return GetPlayerMpStatusInfoReq::PlayerIdCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPlayerMpStatusInfoRsp::kRetcodeFieldNumber;
const int GetPlayerMpStatusInfoRsp::kTargetUidFieldNumber;
const int GetPlayerMpStatusInfoRsp::kTargetPlayerInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPlayerMpStatusInfoRsp::GetPlayerMpStatusInfoRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetPlayerMpStatusInfoRsp)
}
GetPlayerMpStatusInfoRsp::GetPlayerMpStatusInfoRsp(const GetPlayerMpStatusInfoRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target_player_info()) {
    target_player_info_ = new ::proto::OnlinePlayerInfo(*from.target_player_info_);
  } else {
    target_player_info_ = NULL;
  }
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_uid_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(target_uid_));
  // @@protoc_insertion_point(copy_constructor:proto.GetPlayerMpStatusInfoRsp)
}

void GetPlayerMpStatusInfoRsp::SharedCtor() {
  ::memset(&target_player_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_uid_) -
      reinterpret_cast<char*>(&target_player_info_)) + sizeof(target_uid_));
  _cached_size_ = 0;
}

GetPlayerMpStatusInfoRsp::~GetPlayerMpStatusInfoRsp() {
  // @@protoc_insertion_point(destructor:proto.GetPlayerMpStatusInfoRsp)
  SharedDtor();
}

void GetPlayerMpStatusInfoRsp::SharedDtor() {
  if (this != internal_default_instance()) delete target_player_info_;
}

void GetPlayerMpStatusInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPlayerMpStatusInfoRsp::descriptor() {
  protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPlayerMpStatusInfoRsp& GetPlayerMpStatusInfoRsp::default_instance() {
  protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPlayerMpStatusInfoRsp* GetPlayerMpStatusInfoRsp::New(::google::protobuf::Arena* arena) const {
  GetPlayerMpStatusInfoRsp* n = new GetPlayerMpStatusInfoRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPlayerMpStatusInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetPlayerMpStatusInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && target_player_info_ != NULL) {
    delete target_player_info_;
  }
  target_player_info_ = NULL;
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_uid_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(target_uid_));
  _internal_metadata_.Clear();
}

bool GetPlayerMpStatusInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetPlayerMpStatusInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.OnlinePlayerInfo target_player_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_player_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetPlayerMpStatusInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetPlayerMpStatusInfoRsp)
  return false;
#undef DO_
}

void GetPlayerMpStatusInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetPlayerMpStatusInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 target_uid = 2;
  if (this->target_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_uid(), output);
  }

  // .proto.OnlinePlayerInfo target_player_info = 3;
  if (this->has_target_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->target_player_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetPlayerMpStatusInfoRsp)
}

::google::protobuf::uint8* GetPlayerMpStatusInfoRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetPlayerMpStatusInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 target_uid = 2;
  if (this->target_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_uid(), target);
  }

  // .proto.OnlinePlayerInfo target_player_info = 3;
  if (this->has_target_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->target_player_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetPlayerMpStatusInfoRsp)
  return target;
}

size_t GetPlayerMpStatusInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetPlayerMpStatusInfoRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.OnlinePlayerInfo target_player_info = 3;
  if (this->has_target_player_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_player_info_);
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 target_uid = 2;
  if (this->target_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPlayerMpStatusInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetPlayerMpStatusInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPlayerMpStatusInfoRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPlayerMpStatusInfoRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetPlayerMpStatusInfoRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetPlayerMpStatusInfoRsp)
    MergeFrom(*source);
  }
}

void GetPlayerMpStatusInfoRsp::MergeFrom(const GetPlayerMpStatusInfoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetPlayerMpStatusInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target_player_info()) {
    mutable_target_player_info()->::proto::OnlinePlayerInfo::MergeFrom(from.target_player_info());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.target_uid() != 0) {
    set_target_uid(from.target_uid());
  }
}

void GetPlayerMpStatusInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetPlayerMpStatusInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayerMpStatusInfoRsp::CopyFrom(const GetPlayerMpStatusInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetPlayerMpStatusInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerMpStatusInfoRsp::IsInitialized() const {
  return true;
}

void GetPlayerMpStatusInfoRsp::Swap(GetPlayerMpStatusInfoRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPlayerMpStatusInfoRsp::InternalSwap(GetPlayerMpStatusInfoRsp* other) {
  using std::swap;
  swap(target_player_info_, other->target_player_info_);
  swap(retcode_, other->retcode_);
  swap(target_uid_, other->target_uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPlayerMpStatusInfoRsp::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPlayerMpStatusInfoRsp

// int32 retcode = 1;
void GetPlayerMpStatusInfoRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GetPlayerMpStatusInfoRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetPlayerMpStatusInfoRsp.retcode)
  return retcode_;
}
void GetPlayerMpStatusInfoRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpStatusInfoRsp.retcode)
}

// uint32 target_uid = 2;
void GetPlayerMpStatusInfoRsp::clear_target_uid() {
  target_uid_ = 0u;
}
::google::protobuf::uint32 GetPlayerMpStatusInfoRsp::target_uid() const {
  // @@protoc_insertion_point(field_get:proto.GetPlayerMpStatusInfoRsp.target_uid)
  return target_uid_;
}
void GetPlayerMpStatusInfoRsp::set_target_uid(::google::protobuf::uint32 value) {
  
  target_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpStatusInfoRsp.target_uid)
}

// .proto.OnlinePlayerInfo target_player_info = 3;
bool GetPlayerMpStatusInfoRsp::has_target_player_info() const {
  return this != internal_default_instance() && target_player_info_ != NULL;
}
void GetPlayerMpStatusInfoRsp::clear_target_player_info() {
  if (GetArenaNoVirtual() == NULL && target_player_info_ != NULL) delete target_player_info_;
  target_player_info_ = NULL;
}
const ::proto::OnlinePlayerInfo& GetPlayerMpStatusInfoRsp::target_player_info() const {
  const ::proto::OnlinePlayerInfo* p = target_player_info_;
  // @@protoc_insertion_point(field_get:proto.GetPlayerMpStatusInfoRsp.target_player_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::OnlinePlayerInfo*>(
      &::proto::_OnlinePlayerInfo_default_instance_);
}
::proto::OnlinePlayerInfo* GetPlayerMpStatusInfoRsp::mutable_target_player_info() {
  
  if (target_player_info_ == NULL) {
    target_player_info_ = new ::proto::OnlinePlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.GetPlayerMpStatusInfoRsp.target_player_info)
  return target_player_info_;
}
::proto::OnlinePlayerInfo* GetPlayerMpStatusInfoRsp::release_target_player_info() {
  // @@protoc_insertion_point(field_release:proto.GetPlayerMpStatusInfoRsp.target_player_info)
  
  ::proto::OnlinePlayerInfo* temp = target_player_info_;
  target_player_info_ = NULL;
  return temp;
}
void GetPlayerMpStatusInfoRsp::set_allocated_target_player_info(::proto::OnlinePlayerInfo* target_player_info) {
  delete target_player_info_;
  target_player_info_ = target_player_info;
  if (target_player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GetPlayerMpStatusInfoRsp.target_player_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
