// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_only/cmd_activity.server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server_only/cmd_activity.server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
class SeaLampPlayerContributionNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SeaLampPlayerContributionNotify>
     _instance;
} _SeaLampPlayerContributionNotify_default_instance_;
class SeaLampProgressNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SeaLampProgressNotify>
     _instance;
} _SeaLampProgressNotify_default_instance_;
class SeaLampBroadcastNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SeaLampBroadcastNotify>
     _instance;
} _SeaLampBroadcastNotify_default_instance_;
class SeaLampSetProgressByMuipReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SeaLampSetProgressByMuipReq>
     _instance;
} _SeaLampSetProgressByMuipReq_default_instance_;
class SeaLampSetProgressByMuipRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SeaLampSetProgressByMuipRsp>
     _instance;
} _SeaLampSetProgressByMuipRsp_default_instance_;
class SeaLampProgressImplementNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SeaLampProgressImplementNotify>
     _instance;
} _SeaLampProgressImplementNotify_default_instance_;
class SeaLampClearProgressByGmNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SeaLampClearProgressByGmNotify>
     _instance;
} _SeaLampClearProgressByGmNotify_default_instance_;
class SeaLampAddProgressByMuipReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SeaLampAddProgressByMuipReq>
     _instance;
} _SeaLampAddProgressByMuipReq_default_instance_;
class SeaLampAddProgressByMuipRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SeaLampAddProgressByMuipRsp>
     _instance;
} _SeaLampAddProgressByMuipRsp_default_instance_;
class SeaLampActivityDataMuipDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SeaLampActivityDataMuip>
     _instance;
} _SeaLampActivityDataMuip_default_instance_;
class GetActivityDataByMuipReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetActivityDataByMuipReq>
     _instance;
} _GetActivityDataByMuipReq_default_instance_;
class GetActivityDataByMuipRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetActivityDataByMuipRsp>
     _instance;
  const ::proto::SeaLampActivityDataMuip* sea_lamp_data_;
} _GetActivityDataByMuipRsp_default_instance_;

namespace protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[12];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampPlayerContributionNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampPlayerContributionNotify, total_contribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampPlayerContributionNotify, add_progress_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampProgressNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampProgressNotify, schedule_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampProgressNotify, progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampProgressNotify, is_finished_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampProgressNotify, is_changed_by_muip_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampBroadcastNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampBroadcastNotify, schedule_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampBroadcastNotify, last_phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampBroadcastNotify, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampBroadcastNotify, progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampBroadcastNotify, is_changed_by_muip_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampSetProgressByMuipReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampSetProgressByMuipReq, progress_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampSetProgressByMuipRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampSetProgressByMuipRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampSetProgressByMuipRsp, old_progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampSetProgressByMuipRsp, new_progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampSetProgressByMuipRsp, factor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampProgressImplementNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampProgressImplementNotify, msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampClearProgressByGmNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampAddProgressByMuipReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampAddProgressByMuipReq, add_progress_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampAddProgressByMuipRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampAddProgressByMuipRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampAddProgressByMuipRsp, old_progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampAddProgressByMuipRsp, new_progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampAddProgressByMuipRsp, factor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampActivityDataMuip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampActivityDataMuip, progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampActivityDataMuip, phase_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampActivityDataMuip, factor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityDataByMuipReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityDataByMuipReq, activity_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityDataByMuipRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityDataByMuipRsp, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityDataByMuipRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityDataByMuipRsp, activity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityDataByMuipRsp, schedule_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityDataByMuipRsp, is_started_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityDataByMuipRsp, is_finished_),
  offsetof(GetActivityDataByMuipRspDefaultTypeInternal, sea_lamp_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityDataByMuipRsp, detail_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(SeaLampPlayerContributionNotify)},
  { 7, -1, sizeof(SeaLampProgressNotify)},
  { 16, -1, sizeof(SeaLampBroadcastNotify)},
  { 26, -1, sizeof(SeaLampSetProgressByMuipReq)},
  { 32, -1, sizeof(SeaLampSetProgressByMuipRsp)},
  { 41, -1, sizeof(SeaLampProgressImplementNotify)},
  { 47, -1, sizeof(SeaLampClearProgressByGmNotify)},
  { 52, -1, sizeof(SeaLampAddProgressByMuipReq)},
  { 58, -1, sizeof(SeaLampAddProgressByMuipRsp)},
  { 67, -1, sizeof(SeaLampActivityDataMuip)},
  { 75, -1, sizeof(GetActivityDataByMuipReq)},
  { 81, -1, sizeof(GetActivityDataByMuipRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SeaLampPlayerContributionNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SeaLampProgressNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SeaLampBroadcastNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SeaLampSetProgressByMuipReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SeaLampSetProgressByMuipRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SeaLampProgressImplementNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SeaLampClearProgressByGmNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SeaLampAddProgressByMuipReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SeaLampAddProgressByMuipRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SeaLampActivityDataMuip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetActivityDataByMuipReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetActivityDataByMuipRsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "server_only/cmd_activity.server.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SeaLampPlayerContributionNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SeaLampPlayerContributionNotify_default_instance_);_SeaLampProgressNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SeaLampProgressNotify_default_instance_);_SeaLampBroadcastNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SeaLampBroadcastNotify_default_instance_);_SeaLampSetProgressByMuipReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SeaLampSetProgressByMuipReq_default_instance_);_SeaLampSetProgressByMuipRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SeaLampSetProgressByMuipRsp_default_instance_);_SeaLampProgressImplementNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SeaLampProgressImplementNotify_default_instance_);_SeaLampClearProgressByGmNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SeaLampClearProgressByGmNotify_default_instance_);_SeaLampAddProgressByMuipReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SeaLampAddProgressByMuipReq_default_instance_);_SeaLampAddProgressByMuipRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SeaLampAddProgressByMuipRsp_default_instance_);_SeaLampActivityDataMuip_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SeaLampActivityDataMuip_default_instance_);_GetActivityDataByMuipReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetActivityDataByMuipReq_default_instance_);_GetActivityDataByMuipRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetActivityDataByMuipRsp_default_instance_);_SeaLampProgressImplementNotify_default_instance_._instance.get_mutable()->msg_ = const_cast< ::proto::SeaLampProgressNotify*>(
      ::proto::SeaLampProgressNotify::internal_default_instance());
  _GetActivityDataByMuipRsp_default_instance_.sea_lamp_data_ = const_cast< ::proto::SeaLampActivityDataMuip*>(
      ::proto::SeaLampActivityDataMuip::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n%server_only/cmd_activity.server.proto\022"
      "\005proto\"S\n\037SeaLampPlayerContributionNotif"
      "y\022\032\n\022total_contribution\030\001 \001(\r\022\024\n\014add_pro"
      "gress\030\002 \001(\r\"o\n\025SeaLampProgressNotify\022\023\n\013"
      "schedule_id\030\001 \001(\r\022\020\n\010progress\030\002 \001(\r\022\023\n\013i"
      "s_finished\030\003 \001(\010\022\032\n\022is_changed_by_muip\030\004"
      " \001(\010\"~\n\026SeaLampBroadcastNotify\022\023\n\013schedu"
      "le_id\030\001 \001(\r\022\022\n\nlast_phase\030\002 \001(\r\022\r\n\005phase"
      "\030\003 \001(\r\022\020\n\010progress\030\004 \001(\r\022\032\n\022is_changed_b"
      "y_muip\030\005 \001(\010\"/\n\033SeaLampSetProgressByMuip"
      "Req\022\020\n\010progress\030\001 \001(\r\"j\n\033SeaLampSetProgr"
      "essByMuipRsp\022\017\n\007retcode\030\001 \001(\005\022\024\n\014old_pro"
      "gress\030\002 \001(\r\022\024\n\014new_progress\030\003 \001(\r\022\016\n\006fac"
      "tor\030\004 \001(\r\"K\n\036SeaLampProgressImplementNot"
      "ify\022)\n\003msg\030\001 \001(\0132\034.proto.SeaLampProgress"
      "Notify\" \n\036SeaLampClearProgressByGmNotify"
      "\"3\n\033SeaLampAddProgressByMuipReq\022\024\n\014add_p"
      "rogress\030\001 \001(\r\"j\n\033SeaLampAddProgressByMui"
      "pRsp\022\017\n\007retcode\030\001 \001(\005\022\024\n\014old_progress\030\002 "
      "\001(\r\022\024\n\014new_progress\030\003 \001(\r\022\016\n\006factor\030\004 \001("
      "\r\"M\n\027SeaLampActivityDataMuip\022\020\n\010progress"
      "\030\001 \001(\r\022\020\n\010phase_id\030\002 \001(\r\022\016\n\006factor\030\003 \001(\r"
      "\"/\n\030GetActivityDataByMuipReq\022\023\n\013activity"
      "_id\030\001 \001(\r\"\301\001\n\030GetActivityDataByMuipRsp\022\017"
      "\n\007retcode\030\001 \001(\005\022\023\n\013activity_id\030\002 \001(\r\022\023\n\013"
      "schedule_id\030\003 \001(\r\022\022\n\nis_started\030\004 \001(\010\022\023\n"
      "\013is_finished\030\005 \001(\010\0227\n\rsea_lamp_data\030\n \001("
      "\0132\036.proto.SeaLampActivityDataMuipH\000B\010\n\006d"
      "etailB(Z&github.com/teyvat-helper/hk4e-p"
      "roto/pbb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1175);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server_only/cmd_activity.server.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeaLampPlayerContributionNotify::kTotalContributionFieldNumber;
const int SeaLampPlayerContributionNotify::kAddProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeaLampPlayerContributionNotify::SeaLampPlayerContributionNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SeaLampPlayerContributionNotify)
}
SeaLampPlayerContributionNotify::SeaLampPlayerContributionNotify(const SeaLampPlayerContributionNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_contribution_, &from.total_contribution_,
    static_cast<size_t>(reinterpret_cast<char*>(&add_progress_) -
    reinterpret_cast<char*>(&total_contribution_)) + sizeof(add_progress_));
  // @@protoc_insertion_point(copy_constructor:proto.SeaLampPlayerContributionNotify)
}

void SeaLampPlayerContributionNotify::SharedCtor() {
  ::memset(&total_contribution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add_progress_) -
      reinterpret_cast<char*>(&total_contribution_)) + sizeof(add_progress_));
  _cached_size_ = 0;
}

SeaLampPlayerContributionNotify::~SeaLampPlayerContributionNotify() {
  // @@protoc_insertion_point(destructor:proto.SeaLampPlayerContributionNotify)
  SharedDtor();
}

void SeaLampPlayerContributionNotify::SharedDtor() {
}

void SeaLampPlayerContributionNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeaLampPlayerContributionNotify::descriptor() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeaLampPlayerContributionNotify& SeaLampPlayerContributionNotify::default_instance() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

SeaLampPlayerContributionNotify* SeaLampPlayerContributionNotify::New(::google::protobuf::Arena* arena) const {
  SeaLampPlayerContributionNotify* n = new SeaLampPlayerContributionNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeaLampPlayerContributionNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SeaLampPlayerContributionNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_contribution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add_progress_) -
      reinterpret_cast<char*>(&total_contribution_)) + sizeof(add_progress_));
  _internal_metadata_.Clear();
}

bool SeaLampPlayerContributionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SeaLampPlayerContributionNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 total_contribution = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 add_progress = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SeaLampPlayerContributionNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SeaLampPlayerContributionNotify)
  return false;
#undef DO_
}

void SeaLampPlayerContributionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SeaLampPlayerContributionNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total_contribution = 1;
  if (this->total_contribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total_contribution(), output);
  }

  // uint32 add_progress = 2;
  if (this->add_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->add_progress(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SeaLampPlayerContributionNotify)
}

::google::protobuf::uint8* SeaLampPlayerContributionNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SeaLampPlayerContributionNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total_contribution = 1;
  if (this->total_contribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->total_contribution(), target);
  }

  // uint32 add_progress = 2;
  if (this->add_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->add_progress(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SeaLampPlayerContributionNotify)
  return target;
}

size_t SeaLampPlayerContributionNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SeaLampPlayerContributionNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 total_contribution = 1;
  if (this->total_contribution() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_contribution());
  }

  // uint32 add_progress = 2;
  if (this->add_progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->add_progress());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeaLampPlayerContributionNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SeaLampPlayerContributionNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SeaLampPlayerContributionNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeaLampPlayerContributionNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SeaLampPlayerContributionNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SeaLampPlayerContributionNotify)
    MergeFrom(*source);
  }
}

void SeaLampPlayerContributionNotify::MergeFrom(const SeaLampPlayerContributionNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SeaLampPlayerContributionNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_contribution() != 0) {
    set_total_contribution(from.total_contribution());
  }
  if (from.add_progress() != 0) {
    set_add_progress(from.add_progress());
  }
}

void SeaLampPlayerContributionNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SeaLampPlayerContributionNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeaLampPlayerContributionNotify::CopyFrom(const SeaLampPlayerContributionNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SeaLampPlayerContributionNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeaLampPlayerContributionNotify::IsInitialized() const {
  return true;
}

void SeaLampPlayerContributionNotify::Swap(SeaLampPlayerContributionNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeaLampPlayerContributionNotify::InternalSwap(SeaLampPlayerContributionNotify* other) {
  using std::swap;
  swap(total_contribution_, other->total_contribution_);
  swap(add_progress_, other->add_progress_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeaLampPlayerContributionNotify::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeaLampPlayerContributionNotify

// uint32 total_contribution = 1;
void SeaLampPlayerContributionNotify::clear_total_contribution() {
  total_contribution_ = 0u;
}
::google::protobuf::uint32 SeaLampPlayerContributionNotify::total_contribution() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampPlayerContributionNotify.total_contribution)
  return total_contribution_;
}
void SeaLampPlayerContributionNotify::set_total_contribution(::google::protobuf::uint32 value) {
  
  total_contribution_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampPlayerContributionNotify.total_contribution)
}

// uint32 add_progress = 2;
void SeaLampPlayerContributionNotify::clear_add_progress() {
  add_progress_ = 0u;
}
::google::protobuf::uint32 SeaLampPlayerContributionNotify::add_progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampPlayerContributionNotify.add_progress)
  return add_progress_;
}
void SeaLampPlayerContributionNotify::set_add_progress(::google::protobuf::uint32 value) {
  
  add_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampPlayerContributionNotify.add_progress)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeaLampProgressNotify::kScheduleIdFieldNumber;
const int SeaLampProgressNotify::kProgressFieldNumber;
const int SeaLampProgressNotify::kIsFinishedFieldNumber;
const int SeaLampProgressNotify::kIsChangedByMuipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeaLampProgressNotify::SeaLampProgressNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SeaLampProgressNotify)
}
SeaLampProgressNotify::SeaLampProgressNotify(const SeaLampProgressNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&schedule_id_, &from.schedule_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_changed_by_muip_) -
    reinterpret_cast<char*>(&schedule_id_)) + sizeof(is_changed_by_muip_));
  // @@protoc_insertion_point(copy_constructor:proto.SeaLampProgressNotify)
}

void SeaLampProgressNotify::SharedCtor() {
  ::memset(&schedule_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_changed_by_muip_) -
      reinterpret_cast<char*>(&schedule_id_)) + sizeof(is_changed_by_muip_));
  _cached_size_ = 0;
}

SeaLampProgressNotify::~SeaLampProgressNotify() {
  // @@protoc_insertion_point(destructor:proto.SeaLampProgressNotify)
  SharedDtor();
}

void SeaLampProgressNotify::SharedDtor() {
}

void SeaLampProgressNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeaLampProgressNotify::descriptor() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeaLampProgressNotify& SeaLampProgressNotify::default_instance() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

SeaLampProgressNotify* SeaLampProgressNotify::New(::google::protobuf::Arena* arena) const {
  SeaLampProgressNotify* n = new SeaLampProgressNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeaLampProgressNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SeaLampProgressNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&schedule_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_changed_by_muip_) -
      reinterpret_cast<char*>(&schedule_id_)) + sizeof(is_changed_by_muip_));
  _internal_metadata_.Clear();
}

bool SeaLampProgressNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SeaLampProgressNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 schedule_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schedule_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 progress = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_finished = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_finished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_changed_by_muip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_changed_by_muip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SeaLampProgressNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SeaLampProgressNotify)
  return false;
#undef DO_
}

void SeaLampProgressNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SeaLampProgressNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 schedule_id = 1;
  if (this->schedule_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->schedule_id(), output);
  }

  // uint32 progress = 2;
  if (this->progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->progress(), output);
  }

  // bool is_finished = 3;
  if (this->is_finished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_finished(), output);
  }

  // bool is_changed_by_muip = 4;
  if (this->is_changed_by_muip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_changed_by_muip(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SeaLampProgressNotify)
}

::google::protobuf::uint8* SeaLampProgressNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SeaLampProgressNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 schedule_id = 1;
  if (this->schedule_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->schedule_id(), target);
  }

  // uint32 progress = 2;
  if (this->progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->progress(), target);
  }

  // bool is_finished = 3;
  if (this->is_finished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_finished(), target);
  }

  // bool is_changed_by_muip = 4;
  if (this->is_changed_by_muip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_changed_by_muip(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SeaLampProgressNotify)
  return target;
}

size_t SeaLampProgressNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SeaLampProgressNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 schedule_id = 1;
  if (this->schedule_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->schedule_id());
  }

  // uint32 progress = 2;
  if (this->progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->progress());
  }

  // bool is_finished = 3;
  if (this->is_finished() != 0) {
    total_size += 1 + 1;
  }

  // bool is_changed_by_muip = 4;
  if (this->is_changed_by_muip() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeaLampProgressNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SeaLampProgressNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SeaLampProgressNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeaLampProgressNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SeaLampProgressNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SeaLampProgressNotify)
    MergeFrom(*source);
  }
}

void SeaLampProgressNotify::MergeFrom(const SeaLampProgressNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SeaLampProgressNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.schedule_id() != 0) {
    set_schedule_id(from.schedule_id());
  }
  if (from.progress() != 0) {
    set_progress(from.progress());
  }
  if (from.is_finished() != 0) {
    set_is_finished(from.is_finished());
  }
  if (from.is_changed_by_muip() != 0) {
    set_is_changed_by_muip(from.is_changed_by_muip());
  }
}

void SeaLampProgressNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SeaLampProgressNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeaLampProgressNotify::CopyFrom(const SeaLampProgressNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SeaLampProgressNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeaLampProgressNotify::IsInitialized() const {
  return true;
}

void SeaLampProgressNotify::Swap(SeaLampProgressNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeaLampProgressNotify::InternalSwap(SeaLampProgressNotify* other) {
  using std::swap;
  swap(schedule_id_, other->schedule_id_);
  swap(progress_, other->progress_);
  swap(is_finished_, other->is_finished_);
  swap(is_changed_by_muip_, other->is_changed_by_muip_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeaLampProgressNotify::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeaLampProgressNotify

// uint32 schedule_id = 1;
void SeaLampProgressNotify::clear_schedule_id() {
  schedule_id_ = 0u;
}
::google::protobuf::uint32 SeaLampProgressNotify::schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampProgressNotify.schedule_id)
  return schedule_id_;
}
void SeaLampProgressNotify::set_schedule_id(::google::protobuf::uint32 value) {
  
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampProgressNotify.schedule_id)
}

// uint32 progress = 2;
void SeaLampProgressNotify::clear_progress() {
  progress_ = 0u;
}
::google::protobuf::uint32 SeaLampProgressNotify::progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampProgressNotify.progress)
  return progress_;
}
void SeaLampProgressNotify::set_progress(::google::protobuf::uint32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampProgressNotify.progress)
}

// bool is_finished = 3;
void SeaLampProgressNotify::clear_is_finished() {
  is_finished_ = false;
}
bool SeaLampProgressNotify::is_finished() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampProgressNotify.is_finished)
  return is_finished_;
}
void SeaLampProgressNotify::set_is_finished(bool value) {
  
  is_finished_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampProgressNotify.is_finished)
}

// bool is_changed_by_muip = 4;
void SeaLampProgressNotify::clear_is_changed_by_muip() {
  is_changed_by_muip_ = false;
}
bool SeaLampProgressNotify::is_changed_by_muip() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampProgressNotify.is_changed_by_muip)
  return is_changed_by_muip_;
}
void SeaLampProgressNotify::set_is_changed_by_muip(bool value) {
  
  is_changed_by_muip_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampProgressNotify.is_changed_by_muip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeaLampBroadcastNotify::kScheduleIdFieldNumber;
const int SeaLampBroadcastNotify::kLastPhaseFieldNumber;
const int SeaLampBroadcastNotify::kPhaseFieldNumber;
const int SeaLampBroadcastNotify::kProgressFieldNumber;
const int SeaLampBroadcastNotify::kIsChangedByMuipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeaLampBroadcastNotify::SeaLampBroadcastNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SeaLampBroadcastNotify)
}
SeaLampBroadcastNotify::SeaLampBroadcastNotify(const SeaLampBroadcastNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&schedule_id_, &from.schedule_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_changed_by_muip_) -
    reinterpret_cast<char*>(&schedule_id_)) + sizeof(is_changed_by_muip_));
  // @@protoc_insertion_point(copy_constructor:proto.SeaLampBroadcastNotify)
}

void SeaLampBroadcastNotify::SharedCtor() {
  ::memset(&schedule_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_changed_by_muip_) -
      reinterpret_cast<char*>(&schedule_id_)) + sizeof(is_changed_by_muip_));
  _cached_size_ = 0;
}

SeaLampBroadcastNotify::~SeaLampBroadcastNotify() {
  // @@protoc_insertion_point(destructor:proto.SeaLampBroadcastNotify)
  SharedDtor();
}

void SeaLampBroadcastNotify::SharedDtor() {
}

void SeaLampBroadcastNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeaLampBroadcastNotify::descriptor() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeaLampBroadcastNotify& SeaLampBroadcastNotify::default_instance() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

SeaLampBroadcastNotify* SeaLampBroadcastNotify::New(::google::protobuf::Arena* arena) const {
  SeaLampBroadcastNotify* n = new SeaLampBroadcastNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeaLampBroadcastNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SeaLampBroadcastNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&schedule_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_changed_by_muip_) -
      reinterpret_cast<char*>(&schedule_id_)) + sizeof(is_changed_by_muip_));
  _internal_metadata_.Clear();
}

bool SeaLampBroadcastNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SeaLampBroadcastNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 schedule_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schedule_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 last_phase = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_phase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 phase = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 progress = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_changed_by_muip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_changed_by_muip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SeaLampBroadcastNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SeaLampBroadcastNotify)
  return false;
#undef DO_
}

void SeaLampBroadcastNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SeaLampBroadcastNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 schedule_id = 1;
  if (this->schedule_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->schedule_id(), output);
  }

  // uint32 last_phase = 2;
  if (this->last_phase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_phase(), output);
  }

  // uint32 phase = 3;
  if (this->phase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->phase(), output);
  }

  // uint32 progress = 4;
  if (this->progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->progress(), output);
  }

  // bool is_changed_by_muip = 5;
  if (this->is_changed_by_muip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_changed_by_muip(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SeaLampBroadcastNotify)
}

::google::protobuf::uint8* SeaLampBroadcastNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SeaLampBroadcastNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 schedule_id = 1;
  if (this->schedule_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->schedule_id(), target);
  }

  // uint32 last_phase = 2;
  if (this->last_phase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_phase(), target);
  }

  // uint32 phase = 3;
  if (this->phase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->phase(), target);
  }

  // uint32 progress = 4;
  if (this->progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->progress(), target);
  }

  // bool is_changed_by_muip = 5;
  if (this->is_changed_by_muip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_changed_by_muip(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SeaLampBroadcastNotify)
  return target;
}

size_t SeaLampBroadcastNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SeaLampBroadcastNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 schedule_id = 1;
  if (this->schedule_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->schedule_id());
  }

  // uint32 last_phase = 2;
  if (this->last_phase() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->last_phase());
  }

  // uint32 phase = 3;
  if (this->phase() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->phase());
  }

  // uint32 progress = 4;
  if (this->progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->progress());
  }

  // bool is_changed_by_muip = 5;
  if (this->is_changed_by_muip() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeaLampBroadcastNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SeaLampBroadcastNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SeaLampBroadcastNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeaLampBroadcastNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SeaLampBroadcastNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SeaLampBroadcastNotify)
    MergeFrom(*source);
  }
}

void SeaLampBroadcastNotify::MergeFrom(const SeaLampBroadcastNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SeaLampBroadcastNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.schedule_id() != 0) {
    set_schedule_id(from.schedule_id());
  }
  if (from.last_phase() != 0) {
    set_last_phase(from.last_phase());
  }
  if (from.phase() != 0) {
    set_phase(from.phase());
  }
  if (from.progress() != 0) {
    set_progress(from.progress());
  }
  if (from.is_changed_by_muip() != 0) {
    set_is_changed_by_muip(from.is_changed_by_muip());
  }
}

void SeaLampBroadcastNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SeaLampBroadcastNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeaLampBroadcastNotify::CopyFrom(const SeaLampBroadcastNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SeaLampBroadcastNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeaLampBroadcastNotify::IsInitialized() const {
  return true;
}

void SeaLampBroadcastNotify::Swap(SeaLampBroadcastNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeaLampBroadcastNotify::InternalSwap(SeaLampBroadcastNotify* other) {
  using std::swap;
  swap(schedule_id_, other->schedule_id_);
  swap(last_phase_, other->last_phase_);
  swap(phase_, other->phase_);
  swap(progress_, other->progress_);
  swap(is_changed_by_muip_, other->is_changed_by_muip_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeaLampBroadcastNotify::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeaLampBroadcastNotify

// uint32 schedule_id = 1;
void SeaLampBroadcastNotify::clear_schedule_id() {
  schedule_id_ = 0u;
}
::google::protobuf::uint32 SeaLampBroadcastNotify::schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampBroadcastNotify.schedule_id)
  return schedule_id_;
}
void SeaLampBroadcastNotify::set_schedule_id(::google::protobuf::uint32 value) {
  
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampBroadcastNotify.schedule_id)
}

// uint32 last_phase = 2;
void SeaLampBroadcastNotify::clear_last_phase() {
  last_phase_ = 0u;
}
::google::protobuf::uint32 SeaLampBroadcastNotify::last_phase() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampBroadcastNotify.last_phase)
  return last_phase_;
}
void SeaLampBroadcastNotify::set_last_phase(::google::protobuf::uint32 value) {
  
  last_phase_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampBroadcastNotify.last_phase)
}

// uint32 phase = 3;
void SeaLampBroadcastNotify::clear_phase() {
  phase_ = 0u;
}
::google::protobuf::uint32 SeaLampBroadcastNotify::phase() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampBroadcastNotify.phase)
  return phase_;
}
void SeaLampBroadcastNotify::set_phase(::google::protobuf::uint32 value) {
  
  phase_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampBroadcastNotify.phase)
}

// uint32 progress = 4;
void SeaLampBroadcastNotify::clear_progress() {
  progress_ = 0u;
}
::google::protobuf::uint32 SeaLampBroadcastNotify::progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampBroadcastNotify.progress)
  return progress_;
}
void SeaLampBroadcastNotify::set_progress(::google::protobuf::uint32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampBroadcastNotify.progress)
}

// bool is_changed_by_muip = 5;
void SeaLampBroadcastNotify::clear_is_changed_by_muip() {
  is_changed_by_muip_ = false;
}
bool SeaLampBroadcastNotify::is_changed_by_muip() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampBroadcastNotify.is_changed_by_muip)
  return is_changed_by_muip_;
}
void SeaLampBroadcastNotify::set_is_changed_by_muip(bool value) {
  
  is_changed_by_muip_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampBroadcastNotify.is_changed_by_muip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeaLampSetProgressByMuipReq::kProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeaLampSetProgressByMuipReq::SeaLampSetProgressByMuipReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SeaLampSetProgressByMuipReq)
}
SeaLampSetProgressByMuipReq::SeaLampSetProgressByMuipReq(const SeaLampSetProgressByMuipReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  progress_ = from.progress_;
  // @@protoc_insertion_point(copy_constructor:proto.SeaLampSetProgressByMuipReq)
}

void SeaLampSetProgressByMuipReq::SharedCtor() {
  progress_ = 0u;
  _cached_size_ = 0;
}

SeaLampSetProgressByMuipReq::~SeaLampSetProgressByMuipReq() {
  // @@protoc_insertion_point(destructor:proto.SeaLampSetProgressByMuipReq)
  SharedDtor();
}

void SeaLampSetProgressByMuipReq::SharedDtor() {
}

void SeaLampSetProgressByMuipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeaLampSetProgressByMuipReq::descriptor() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeaLampSetProgressByMuipReq& SeaLampSetProgressByMuipReq::default_instance() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

SeaLampSetProgressByMuipReq* SeaLampSetProgressByMuipReq::New(::google::protobuf::Arena* arena) const {
  SeaLampSetProgressByMuipReq* n = new SeaLampSetProgressByMuipReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeaLampSetProgressByMuipReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SeaLampSetProgressByMuipReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  progress_ = 0u;
  _internal_metadata_.Clear();
}

bool SeaLampSetProgressByMuipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SeaLampSetProgressByMuipReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 progress = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SeaLampSetProgressByMuipReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SeaLampSetProgressByMuipReq)
  return false;
#undef DO_
}

void SeaLampSetProgressByMuipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SeaLampSetProgressByMuipReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 progress = 1;
  if (this->progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->progress(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SeaLampSetProgressByMuipReq)
}

::google::protobuf::uint8* SeaLampSetProgressByMuipReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SeaLampSetProgressByMuipReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 progress = 1;
  if (this->progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->progress(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SeaLampSetProgressByMuipReq)
  return target;
}

size_t SeaLampSetProgressByMuipReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SeaLampSetProgressByMuipReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 progress = 1;
  if (this->progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->progress());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeaLampSetProgressByMuipReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SeaLampSetProgressByMuipReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SeaLampSetProgressByMuipReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeaLampSetProgressByMuipReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SeaLampSetProgressByMuipReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SeaLampSetProgressByMuipReq)
    MergeFrom(*source);
  }
}

void SeaLampSetProgressByMuipReq::MergeFrom(const SeaLampSetProgressByMuipReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SeaLampSetProgressByMuipReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.progress() != 0) {
    set_progress(from.progress());
  }
}

void SeaLampSetProgressByMuipReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SeaLampSetProgressByMuipReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeaLampSetProgressByMuipReq::CopyFrom(const SeaLampSetProgressByMuipReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SeaLampSetProgressByMuipReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeaLampSetProgressByMuipReq::IsInitialized() const {
  return true;
}

void SeaLampSetProgressByMuipReq::Swap(SeaLampSetProgressByMuipReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeaLampSetProgressByMuipReq::InternalSwap(SeaLampSetProgressByMuipReq* other) {
  using std::swap;
  swap(progress_, other->progress_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeaLampSetProgressByMuipReq::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeaLampSetProgressByMuipReq

// uint32 progress = 1;
void SeaLampSetProgressByMuipReq::clear_progress() {
  progress_ = 0u;
}
::google::protobuf::uint32 SeaLampSetProgressByMuipReq::progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampSetProgressByMuipReq.progress)
  return progress_;
}
void SeaLampSetProgressByMuipReq::set_progress(::google::protobuf::uint32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampSetProgressByMuipReq.progress)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeaLampSetProgressByMuipRsp::kRetcodeFieldNumber;
const int SeaLampSetProgressByMuipRsp::kOldProgressFieldNumber;
const int SeaLampSetProgressByMuipRsp::kNewProgressFieldNumber;
const int SeaLampSetProgressByMuipRsp::kFactorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeaLampSetProgressByMuipRsp::SeaLampSetProgressByMuipRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SeaLampSetProgressByMuipRsp)
}
SeaLampSetProgressByMuipRsp::SeaLampSetProgressByMuipRsp(const SeaLampSetProgressByMuipRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&factor_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(factor_));
  // @@protoc_insertion_point(copy_constructor:proto.SeaLampSetProgressByMuipRsp)
}

void SeaLampSetProgressByMuipRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&factor_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(factor_));
  _cached_size_ = 0;
}

SeaLampSetProgressByMuipRsp::~SeaLampSetProgressByMuipRsp() {
  // @@protoc_insertion_point(destructor:proto.SeaLampSetProgressByMuipRsp)
  SharedDtor();
}

void SeaLampSetProgressByMuipRsp::SharedDtor() {
}

void SeaLampSetProgressByMuipRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeaLampSetProgressByMuipRsp::descriptor() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeaLampSetProgressByMuipRsp& SeaLampSetProgressByMuipRsp::default_instance() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

SeaLampSetProgressByMuipRsp* SeaLampSetProgressByMuipRsp::New(::google::protobuf::Arena* arena) const {
  SeaLampSetProgressByMuipRsp* n = new SeaLampSetProgressByMuipRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeaLampSetProgressByMuipRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SeaLampSetProgressByMuipRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&factor_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(factor_));
  _internal_metadata_.Clear();
}

bool SeaLampSetProgressByMuipRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SeaLampSetProgressByMuipRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 old_progress = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 new_progress = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 factor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SeaLampSetProgressByMuipRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SeaLampSetProgressByMuipRsp)
  return false;
#undef DO_
}

void SeaLampSetProgressByMuipRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SeaLampSetProgressByMuipRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 old_progress = 2;
  if (this->old_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->old_progress(), output);
  }

  // uint32 new_progress = 3;
  if (this->new_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->new_progress(), output);
  }

  // uint32 factor = 4;
  if (this->factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->factor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SeaLampSetProgressByMuipRsp)
}

::google::protobuf::uint8* SeaLampSetProgressByMuipRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SeaLampSetProgressByMuipRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 old_progress = 2;
  if (this->old_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->old_progress(), target);
  }

  // uint32 new_progress = 3;
  if (this->new_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->new_progress(), target);
  }

  // uint32 factor = 4;
  if (this->factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->factor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SeaLampSetProgressByMuipRsp)
  return target;
}

size_t SeaLampSetProgressByMuipRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SeaLampSetProgressByMuipRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 old_progress = 2;
  if (this->old_progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->old_progress());
  }

  // uint32 new_progress = 3;
  if (this->new_progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->new_progress());
  }

  // uint32 factor = 4;
  if (this->factor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->factor());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeaLampSetProgressByMuipRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SeaLampSetProgressByMuipRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SeaLampSetProgressByMuipRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeaLampSetProgressByMuipRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SeaLampSetProgressByMuipRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SeaLampSetProgressByMuipRsp)
    MergeFrom(*source);
  }
}

void SeaLampSetProgressByMuipRsp::MergeFrom(const SeaLampSetProgressByMuipRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SeaLampSetProgressByMuipRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.old_progress() != 0) {
    set_old_progress(from.old_progress());
  }
  if (from.new_progress() != 0) {
    set_new_progress(from.new_progress());
  }
  if (from.factor() != 0) {
    set_factor(from.factor());
  }
}

void SeaLampSetProgressByMuipRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SeaLampSetProgressByMuipRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeaLampSetProgressByMuipRsp::CopyFrom(const SeaLampSetProgressByMuipRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SeaLampSetProgressByMuipRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeaLampSetProgressByMuipRsp::IsInitialized() const {
  return true;
}

void SeaLampSetProgressByMuipRsp::Swap(SeaLampSetProgressByMuipRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeaLampSetProgressByMuipRsp::InternalSwap(SeaLampSetProgressByMuipRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(old_progress_, other->old_progress_);
  swap(new_progress_, other->new_progress_);
  swap(factor_, other->factor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeaLampSetProgressByMuipRsp::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeaLampSetProgressByMuipRsp

// int32 retcode = 1;
void SeaLampSetProgressByMuipRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 SeaLampSetProgressByMuipRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampSetProgressByMuipRsp.retcode)
  return retcode_;
}
void SeaLampSetProgressByMuipRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampSetProgressByMuipRsp.retcode)
}

// uint32 old_progress = 2;
void SeaLampSetProgressByMuipRsp::clear_old_progress() {
  old_progress_ = 0u;
}
::google::protobuf::uint32 SeaLampSetProgressByMuipRsp::old_progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampSetProgressByMuipRsp.old_progress)
  return old_progress_;
}
void SeaLampSetProgressByMuipRsp::set_old_progress(::google::protobuf::uint32 value) {
  
  old_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampSetProgressByMuipRsp.old_progress)
}

// uint32 new_progress = 3;
void SeaLampSetProgressByMuipRsp::clear_new_progress() {
  new_progress_ = 0u;
}
::google::protobuf::uint32 SeaLampSetProgressByMuipRsp::new_progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampSetProgressByMuipRsp.new_progress)
  return new_progress_;
}
void SeaLampSetProgressByMuipRsp::set_new_progress(::google::protobuf::uint32 value) {
  
  new_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampSetProgressByMuipRsp.new_progress)
}

// uint32 factor = 4;
void SeaLampSetProgressByMuipRsp::clear_factor() {
  factor_ = 0u;
}
::google::protobuf::uint32 SeaLampSetProgressByMuipRsp::factor() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampSetProgressByMuipRsp.factor)
  return factor_;
}
void SeaLampSetProgressByMuipRsp::set_factor(::google::protobuf::uint32 value) {
  
  factor_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampSetProgressByMuipRsp.factor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeaLampProgressImplementNotify::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeaLampProgressImplementNotify::SeaLampProgressImplementNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SeaLampProgressImplementNotify)
}
SeaLampProgressImplementNotify::SeaLampProgressImplementNotify(const SeaLampProgressImplementNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::proto::SeaLampProgressNotify(*from.msg_);
  } else {
    msg_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.SeaLampProgressImplementNotify)
}

void SeaLampProgressImplementNotify::SharedCtor() {
  msg_ = NULL;
  _cached_size_ = 0;
}

SeaLampProgressImplementNotify::~SeaLampProgressImplementNotify() {
  // @@protoc_insertion_point(destructor:proto.SeaLampProgressImplementNotify)
  SharedDtor();
}

void SeaLampProgressImplementNotify::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void SeaLampProgressImplementNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeaLampProgressImplementNotify::descriptor() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeaLampProgressImplementNotify& SeaLampProgressImplementNotify::default_instance() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

SeaLampProgressImplementNotify* SeaLampProgressImplementNotify::New(::google::protobuf::Arena* arena) const {
  SeaLampProgressImplementNotify* n = new SeaLampProgressImplementNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeaLampProgressImplementNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SeaLampProgressImplementNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && msg_ != NULL) {
    delete msg_;
  }
  msg_ = NULL;
  _internal_metadata_.Clear();
}

bool SeaLampProgressImplementNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SeaLampProgressImplementNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.SeaLampProgressNotify msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SeaLampProgressImplementNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SeaLampProgressImplementNotify)
  return false;
#undef DO_
}

void SeaLampProgressImplementNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SeaLampProgressImplementNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.SeaLampProgressNotify msg = 1;
  if (this->has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msg_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SeaLampProgressImplementNotify)
}

::google::protobuf::uint8* SeaLampProgressImplementNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SeaLampProgressImplementNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.SeaLampProgressNotify msg = 1;
  if (this->has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msg_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SeaLampProgressImplementNotify)
  return target;
}

size_t SeaLampProgressImplementNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SeaLampProgressImplementNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.SeaLampProgressNotify msg = 1;
  if (this->has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeaLampProgressImplementNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SeaLampProgressImplementNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SeaLampProgressImplementNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeaLampProgressImplementNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SeaLampProgressImplementNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SeaLampProgressImplementNotify)
    MergeFrom(*source);
  }
}

void SeaLampProgressImplementNotify::MergeFrom(const SeaLampProgressImplementNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SeaLampProgressImplementNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg()) {
    mutable_msg()->::proto::SeaLampProgressNotify::MergeFrom(from.msg());
  }
}

void SeaLampProgressImplementNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SeaLampProgressImplementNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeaLampProgressImplementNotify::CopyFrom(const SeaLampProgressImplementNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SeaLampProgressImplementNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeaLampProgressImplementNotify::IsInitialized() const {
  return true;
}

void SeaLampProgressImplementNotify::Swap(SeaLampProgressImplementNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeaLampProgressImplementNotify::InternalSwap(SeaLampProgressImplementNotify* other) {
  using std::swap;
  swap(msg_, other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeaLampProgressImplementNotify::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeaLampProgressImplementNotify

// .proto.SeaLampProgressNotify msg = 1;
bool SeaLampProgressImplementNotify::has_msg() const {
  return this != internal_default_instance() && msg_ != NULL;
}
void SeaLampProgressImplementNotify::clear_msg() {
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}
const ::proto::SeaLampProgressNotify& SeaLampProgressImplementNotify::msg() const {
  const ::proto::SeaLampProgressNotify* p = msg_;
  // @@protoc_insertion_point(field_get:proto.SeaLampProgressImplementNotify.msg)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::SeaLampProgressNotify*>(
      &::proto::_SeaLampProgressNotify_default_instance_);
}
::proto::SeaLampProgressNotify* SeaLampProgressImplementNotify::mutable_msg() {
  
  if (msg_ == NULL) {
    msg_ = new ::proto::SeaLampProgressNotify;
  }
  // @@protoc_insertion_point(field_mutable:proto.SeaLampProgressImplementNotify.msg)
  return msg_;
}
::proto::SeaLampProgressNotify* SeaLampProgressImplementNotify::release_msg() {
  // @@protoc_insertion_point(field_release:proto.SeaLampProgressImplementNotify.msg)
  
  ::proto::SeaLampProgressNotify* temp = msg_;
  msg_ = NULL;
  return temp;
}
void SeaLampProgressImplementNotify::set_allocated_msg(::proto::SeaLampProgressNotify* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SeaLampProgressImplementNotify.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeaLampClearProgressByGmNotify::SeaLampClearProgressByGmNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SeaLampClearProgressByGmNotify)
}
SeaLampClearProgressByGmNotify::SeaLampClearProgressByGmNotify(const SeaLampClearProgressByGmNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.SeaLampClearProgressByGmNotify)
}

void SeaLampClearProgressByGmNotify::SharedCtor() {
  _cached_size_ = 0;
}

SeaLampClearProgressByGmNotify::~SeaLampClearProgressByGmNotify() {
  // @@protoc_insertion_point(destructor:proto.SeaLampClearProgressByGmNotify)
  SharedDtor();
}

void SeaLampClearProgressByGmNotify::SharedDtor() {
}

void SeaLampClearProgressByGmNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeaLampClearProgressByGmNotify::descriptor() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeaLampClearProgressByGmNotify& SeaLampClearProgressByGmNotify::default_instance() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

SeaLampClearProgressByGmNotify* SeaLampClearProgressByGmNotify::New(::google::protobuf::Arena* arena) const {
  SeaLampClearProgressByGmNotify* n = new SeaLampClearProgressByGmNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeaLampClearProgressByGmNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SeaLampClearProgressByGmNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool SeaLampClearProgressByGmNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SeaLampClearProgressByGmNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SeaLampClearProgressByGmNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SeaLampClearProgressByGmNotify)
  return false;
#undef DO_
}

void SeaLampClearProgressByGmNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SeaLampClearProgressByGmNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SeaLampClearProgressByGmNotify)
}

::google::protobuf::uint8* SeaLampClearProgressByGmNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SeaLampClearProgressByGmNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SeaLampClearProgressByGmNotify)
  return target;
}

size_t SeaLampClearProgressByGmNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SeaLampClearProgressByGmNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeaLampClearProgressByGmNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SeaLampClearProgressByGmNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SeaLampClearProgressByGmNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeaLampClearProgressByGmNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SeaLampClearProgressByGmNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SeaLampClearProgressByGmNotify)
    MergeFrom(*source);
  }
}

void SeaLampClearProgressByGmNotify::MergeFrom(const SeaLampClearProgressByGmNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SeaLampClearProgressByGmNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SeaLampClearProgressByGmNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SeaLampClearProgressByGmNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeaLampClearProgressByGmNotify::CopyFrom(const SeaLampClearProgressByGmNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SeaLampClearProgressByGmNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeaLampClearProgressByGmNotify::IsInitialized() const {
  return true;
}

void SeaLampClearProgressByGmNotify::Swap(SeaLampClearProgressByGmNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeaLampClearProgressByGmNotify::InternalSwap(SeaLampClearProgressByGmNotify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeaLampClearProgressByGmNotify::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeaLampClearProgressByGmNotify

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeaLampAddProgressByMuipReq::kAddProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeaLampAddProgressByMuipReq::SeaLampAddProgressByMuipReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SeaLampAddProgressByMuipReq)
}
SeaLampAddProgressByMuipReq::SeaLampAddProgressByMuipReq(const SeaLampAddProgressByMuipReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  add_progress_ = from.add_progress_;
  // @@protoc_insertion_point(copy_constructor:proto.SeaLampAddProgressByMuipReq)
}

void SeaLampAddProgressByMuipReq::SharedCtor() {
  add_progress_ = 0u;
  _cached_size_ = 0;
}

SeaLampAddProgressByMuipReq::~SeaLampAddProgressByMuipReq() {
  // @@protoc_insertion_point(destructor:proto.SeaLampAddProgressByMuipReq)
  SharedDtor();
}

void SeaLampAddProgressByMuipReq::SharedDtor() {
}

void SeaLampAddProgressByMuipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeaLampAddProgressByMuipReq::descriptor() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeaLampAddProgressByMuipReq& SeaLampAddProgressByMuipReq::default_instance() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

SeaLampAddProgressByMuipReq* SeaLampAddProgressByMuipReq::New(::google::protobuf::Arena* arena) const {
  SeaLampAddProgressByMuipReq* n = new SeaLampAddProgressByMuipReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeaLampAddProgressByMuipReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SeaLampAddProgressByMuipReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  add_progress_ = 0u;
  _internal_metadata_.Clear();
}

bool SeaLampAddProgressByMuipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SeaLampAddProgressByMuipReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 add_progress = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SeaLampAddProgressByMuipReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SeaLampAddProgressByMuipReq)
  return false;
#undef DO_
}

void SeaLampAddProgressByMuipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SeaLampAddProgressByMuipReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 add_progress = 1;
  if (this->add_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->add_progress(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SeaLampAddProgressByMuipReq)
}

::google::protobuf::uint8* SeaLampAddProgressByMuipReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SeaLampAddProgressByMuipReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 add_progress = 1;
  if (this->add_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->add_progress(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SeaLampAddProgressByMuipReq)
  return target;
}

size_t SeaLampAddProgressByMuipReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SeaLampAddProgressByMuipReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 add_progress = 1;
  if (this->add_progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->add_progress());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeaLampAddProgressByMuipReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SeaLampAddProgressByMuipReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SeaLampAddProgressByMuipReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeaLampAddProgressByMuipReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SeaLampAddProgressByMuipReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SeaLampAddProgressByMuipReq)
    MergeFrom(*source);
  }
}

void SeaLampAddProgressByMuipReq::MergeFrom(const SeaLampAddProgressByMuipReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SeaLampAddProgressByMuipReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.add_progress() != 0) {
    set_add_progress(from.add_progress());
  }
}

void SeaLampAddProgressByMuipReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SeaLampAddProgressByMuipReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeaLampAddProgressByMuipReq::CopyFrom(const SeaLampAddProgressByMuipReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SeaLampAddProgressByMuipReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeaLampAddProgressByMuipReq::IsInitialized() const {
  return true;
}

void SeaLampAddProgressByMuipReq::Swap(SeaLampAddProgressByMuipReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeaLampAddProgressByMuipReq::InternalSwap(SeaLampAddProgressByMuipReq* other) {
  using std::swap;
  swap(add_progress_, other->add_progress_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeaLampAddProgressByMuipReq::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeaLampAddProgressByMuipReq

// uint32 add_progress = 1;
void SeaLampAddProgressByMuipReq::clear_add_progress() {
  add_progress_ = 0u;
}
::google::protobuf::uint32 SeaLampAddProgressByMuipReq::add_progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampAddProgressByMuipReq.add_progress)
  return add_progress_;
}
void SeaLampAddProgressByMuipReq::set_add_progress(::google::protobuf::uint32 value) {
  
  add_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampAddProgressByMuipReq.add_progress)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeaLampAddProgressByMuipRsp::kRetcodeFieldNumber;
const int SeaLampAddProgressByMuipRsp::kOldProgressFieldNumber;
const int SeaLampAddProgressByMuipRsp::kNewProgressFieldNumber;
const int SeaLampAddProgressByMuipRsp::kFactorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeaLampAddProgressByMuipRsp::SeaLampAddProgressByMuipRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SeaLampAddProgressByMuipRsp)
}
SeaLampAddProgressByMuipRsp::SeaLampAddProgressByMuipRsp(const SeaLampAddProgressByMuipRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&factor_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(factor_));
  // @@protoc_insertion_point(copy_constructor:proto.SeaLampAddProgressByMuipRsp)
}

void SeaLampAddProgressByMuipRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&factor_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(factor_));
  _cached_size_ = 0;
}

SeaLampAddProgressByMuipRsp::~SeaLampAddProgressByMuipRsp() {
  // @@protoc_insertion_point(destructor:proto.SeaLampAddProgressByMuipRsp)
  SharedDtor();
}

void SeaLampAddProgressByMuipRsp::SharedDtor() {
}

void SeaLampAddProgressByMuipRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeaLampAddProgressByMuipRsp::descriptor() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeaLampAddProgressByMuipRsp& SeaLampAddProgressByMuipRsp::default_instance() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

SeaLampAddProgressByMuipRsp* SeaLampAddProgressByMuipRsp::New(::google::protobuf::Arena* arena) const {
  SeaLampAddProgressByMuipRsp* n = new SeaLampAddProgressByMuipRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeaLampAddProgressByMuipRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SeaLampAddProgressByMuipRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&factor_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(factor_));
  _internal_metadata_.Clear();
}

bool SeaLampAddProgressByMuipRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SeaLampAddProgressByMuipRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 old_progress = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 new_progress = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 factor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SeaLampAddProgressByMuipRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SeaLampAddProgressByMuipRsp)
  return false;
#undef DO_
}

void SeaLampAddProgressByMuipRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SeaLampAddProgressByMuipRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 old_progress = 2;
  if (this->old_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->old_progress(), output);
  }

  // uint32 new_progress = 3;
  if (this->new_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->new_progress(), output);
  }

  // uint32 factor = 4;
  if (this->factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->factor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SeaLampAddProgressByMuipRsp)
}

::google::protobuf::uint8* SeaLampAddProgressByMuipRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SeaLampAddProgressByMuipRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 old_progress = 2;
  if (this->old_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->old_progress(), target);
  }

  // uint32 new_progress = 3;
  if (this->new_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->new_progress(), target);
  }

  // uint32 factor = 4;
  if (this->factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->factor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SeaLampAddProgressByMuipRsp)
  return target;
}

size_t SeaLampAddProgressByMuipRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SeaLampAddProgressByMuipRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 old_progress = 2;
  if (this->old_progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->old_progress());
  }

  // uint32 new_progress = 3;
  if (this->new_progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->new_progress());
  }

  // uint32 factor = 4;
  if (this->factor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->factor());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeaLampAddProgressByMuipRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SeaLampAddProgressByMuipRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SeaLampAddProgressByMuipRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeaLampAddProgressByMuipRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SeaLampAddProgressByMuipRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SeaLampAddProgressByMuipRsp)
    MergeFrom(*source);
  }
}

void SeaLampAddProgressByMuipRsp::MergeFrom(const SeaLampAddProgressByMuipRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SeaLampAddProgressByMuipRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.old_progress() != 0) {
    set_old_progress(from.old_progress());
  }
  if (from.new_progress() != 0) {
    set_new_progress(from.new_progress());
  }
  if (from.factor() != 0) {
    set_factor(from.factor());
  }
}

void SeaLampAddProgressByMuipRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SeaLampAddProgressByMuipRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeaLampAddProgressByMuipRsp::CopyFrom(const SeaLampAddProgressByMuipRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SeaLampAddProgressByMuipRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeaLampAddProgressByMuipRsp::IsInitialized() const {
  return true;
}

void SeaLampAddProgressByMuipRsp::Swap(SeaLampAddProgressByMuipRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeaLampAddProgressByMuipRsp::InternalSwap(SeaLampAddProgressByMuipRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(old_progress_, other->old_progress_);
  swap(new_progress_, other->new_progress_);
  swap(factor_, other->factor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeaLampAddProgressByMuipRsp::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeaLampAddProgressByMuipRsp

// int32 retcode = 1;
void SeaLampAddProgressByMuipRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 SeaLampAddProgressByMuipRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampAddProgressByMuipRsp.retcode)
  return retcode_;
}
void SeaLampAddProgressByMuipRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampAddProgressByMuipRsp.retcode)
}

// uint32 old_progress = 2;
void SeaLampAddProgressByMuipRsp::clear_old_progress() {
  old_progress_ = 0u;
}
::google::protobuf::uint32 SeaLampAddProgressByMuipRsp::old_progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampAddProgressByMuipRsp.old_progress)
  return old_progress_;
}
void SeaLampAddProgressByMuipRsp::set_old_progress(::google::protobuf::uint32 value) {
  
  old_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampAddProgressByMuipRsp.old_progress)
}

// uint32 new_progress = 3;
void SeaLampAddProgressByMuipRsp::clear_new_progress() {
  new_progress_ = 0u;
}
::google::protobuf::uint32 SeaLampAddProgressByMuipRsp::new_progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampAddProgressByMuipRsp.new_progress)
  return new_progress_;
}
void SeaLampAddProgressByMuipRsp::set_new_progress(::google::protobuf::uint32 value) {
  
  new_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampAddProgressByMuipRsp.new_progress)
}

// uint32 factor = 4;
void SeaLampAddProgressByMuipRsp::clear_factor() {
  factor_ = 0u;
}
::google::protobuf::uint32 SeaLampAddProgressByMuipRsp::factor() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampAddProgressByMuipRsp.factor)
  return factor_;
}
void SeaLampAddProgressByMuipRsp::set_factor(::google::protobuf::uint32 value) {
  
  factor_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampAddProgressByMuipRsp.factor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeaLampActivityDataMuip::kProgressFieldNumber;
const int SeaLampActivityDataMuip::kPhaseIdFieldNumber;
const int SeaLampActivityDataMuip::kFactorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeaLampActivityDataMuip::SeaLampActivityDataMuip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SeaLampActivityDataMuip)
}
SeaLampActivityDataMuip::SeaLampActivityDataMuip(const SeaLampActivityDataMuip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&progress_, &from.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&factor_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(factor_));
  // @@protoc_insertion_point(copy_constructor:proto.SeaLampActivityDataMuip)
}

void SeaLampActivityDataMuip::SharedCtor() {
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&factor_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(factor_));
  _cached_size_ = 0;
}

SeaLampActivityDataMuip::~SeaLampActivityDataMuip() {
  // @@protoc_insertion_point(destructor:proto.SeaLampActivityDataMuip)
  SharedDtor();
}

void SeaLampActivityDataMuip::SharedDtor() {
}

void SeaLampActivityDataMuip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeaLampActivityDataMuip::descriptor() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeaLampActivityDataMuip& SeaLampActivityDataMuip::default_instance() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

SeaLampActivityDataMuip* SeaLampActivityDataMuip::New(::google::protobuf::Arena* arena) const {
  SeaLampActivityDataMuip* n = new SeaLampActivityDataMuip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeaLampActivityDataMuip::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SeaLampActivityDataMuip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&factor_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(factor_));
  _internal_metadata_.Clear();
}

bool SeaLampActivityDataMuip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SeaLampActivityDataMuip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 progress = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 phase_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phase_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 factor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SeaLampActivityDataMuip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SeaLampActivityDataMuip)
  return false;
#undef DO_
}

void SeaLampActivityDataMuip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SeaLampActivityDataMuip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 progress = 1;
  if (this->progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->progress(), output);
  }

  // uint32 phase_id = 2;
  if (this->phase_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->phase_id(), output);
  }

  // uint32 factor = 3;
  if (this->factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->factor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SeaLampActivityDataMuip)
}

::google::protobuf::uint8* SeaLampActivityDataMuip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SeaLampActivityDataMuip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 progress = 1;
  if (this->progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->progress(), target);
  }

  // uint32 phase_id = 2;
  if (this->phase_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->phase_id(), target);
  }

  // uint32 factor = 3;
  if (this->factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->factor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SeaLampActivityDataMuip)
  return target;
}

size_t SeaLampActivityDataMuip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SeaLampActivityDataMuip)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 progress = 1;
  if (this->progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->progress());
  }

  // uint32 phase_id = 2;
  if (this->phase_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->phase_id());
  }

  // uint32 factor = 3;
  if (this->factor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->factor());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeaLampActivityDataMuip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SeaLampActivityDataMuip)
  GOOGLE_DCHECK_NE(&from, this);
  const SeaLampActivityDataMuip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeaLampActivityDataMuip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SeaLampActivityDataMuip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SeaLampActivityDataMuip)
    MergeFrom(*source);
  }
}

void SeaLampActivityDataMuip::MergeFrom(const SeaLampActivityDataMuip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SeaLampActivityDataMuip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.progress() != 0) {
    set_progress(from.progress());
  }
  if (from.phase_id() != 0) {
    set_phase_id(from.phase_id());
  }
  if (from.factor() != 0) {
    set_factor(from.factor());
  }
}

void SeaLampActivityDataMuip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SeaLampActivityDataMuip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeaLampActivityDataMuip::CopyFrom(const SeaLampActivityDataMuip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SeaLampActivityDataMuip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeaLampActivityDataMuip::IsInitialized() const {
  return true;
}

void SeaLampActivityDataMuip::Swap(SeaLampActivityDataMuip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeaLampActivityDataMuip::InternalSwap(SeaLampActivityDataMuip* other) {
  using std::swap;
  swap(progress_, other->progress_);
  swap(phase_id_, other->phase_id_);
  swap(factor_, other->factor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeaLampActivityDataMuip::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeaLampActivityDataMuip

// uint32 progress = 1;
void SeaLampActivityDataMuip::clear_progress() {
  progress_ = 0u;
}
::google::protobuf::uint32 SeaLampActivityDataMuip::progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampActivityDataMuip.progress)
  return progress_;
}
void SeaLampActivityDataMuip::set_progress(::google::protobuf::uint32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampActivityDataMuip.progress)
}

// uint32 phase_id = 2;
void SeaLampActivityDataMuip::clear_phase_id() {
  phase_id_ = 0u;
}
::google::protobuf::uint32 SeaLampActivityDataMuip::phase_id() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampActivityDataMuip.phase_id)
  return phase_id_;
}
void SeaLampActivityDataMuip::set_phase_id(::google::protobuf::uint32 value) {
  
  phase_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampActivityDataMuip.phase_id)
}

// uint32 factor = 3;
void SeaLampActivityDataMuip::clear_factor() {
  factor_ = 0u;
}
::google::protobuf::uint32 SeaLampActivityDataMuip::factor() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampActivityDataMuip.factor)
  return factor_;
}
void SeaLampActivityDataMuip::set_factor(::google::protobuf::uint32 value) {
  
  factor_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampActivityDataMuip.factor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetActivityDataByMuipReq::kActivityIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetActivityDataByMuipReq::GetActivityDataByMuipReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetActivityDataByMuipReq)
}
GetActivityDataByMuipReq::GetActivityDataByMuipReq(const GetActivityDataByMuipReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  activity_id_ = from.activity_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GetActivityDataByMuipReq)
}

void GetActivityDataByMuipReq::SharedCtor() {
  activity_id_ = 0u;
  _cached_size_ = 0;
}

GetActivityDataByMuipReq::~GetActivityDataByMuipReq() {
  // @@protoc_insertion_point(destructor:proto.GetActivityDataByMuipReq)
  SharedDtor();
}

void GetActivityDataByMuipReq::SharedDtor() {
}

void GetActivityDataByMuipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetActivityDataByMuipReq::descriptor() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetActivityDataByMuipReq& GetActivityDataByMuipReq::default_instance() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetActivityDataByMuipReq* GetActivityDataByMuipReq::New(::google::protobuf::Arena* arena) const {
  GetActivityDataByMuipReq* n = new GetActivityDataByMuipReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetActivityDataByMuipReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetActivityDataByMuipReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activity_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GetActivityDataByMuipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetActivityDataByMuipReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 activity_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetActivityDataByMuipReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetActivityDataByMuipReq)
  return false;
#undef DO_
}

void GetActivityDataByMuipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetActivityDataByMuipReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 activity_id = 1;
  if (this->activity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetActivityDataByMuipReq)
}

::google::protobuf::uint8* GetActivityDataByMuipReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetActivityDataByMuipReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 activity_id = 1;
  if (this->activity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetActivityDataByMuipReq)
  return target;
}

size_t GetActivityDataByMuipReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetActivityDataByMuipReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 activity_id = 1;
  if (this->activity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->activity_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetActivityDataByMuipReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetActivityDataByMuipReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetActivityDataByMuipReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetActivityDataByMuipReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetActivityDataByMuipReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetActivityDataByMuipReq)
    MergeFrom(*source);
  }
}

void GetActivityDataByMuipReq::MergeFrom(const GetActivityDataByMuipReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetActivityDataByMuipReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.activity_id() != 0) {
    set_activity_id(from.activity_id());
  }
}

void GetActivityDataByMuipReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetActivityDataByMuipReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetActivityDataByMuipReq::CopyFrom(const GetActivityDataByMuipReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetActivityDataByMuipReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActivityDataByMuipReq::IsInitialized() const {
  return true;
}

void GetActivityDataByMuipReq::Swap(GetActivityDataByMuipReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetActivityDataByMuipReq::InternalSwap(GetActivityDataByMuipReq* other) {
  using std::swap;
  swap(activity_id_, other->activity_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetActivityDataByMuipReq::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetActivityDataByMuipReq

// uint32 activity_id = 1;
void GetActivityDataByMuipReq::clear_activity_id() {
  activity_id_ = 0u;
}
::google::protobuf::uint32 GetActivityDataByMuipReq::activity_id() const {
  // @@protoc_insertion_point(field_get:proto.GetActivityDataByMuipReq.activity_id)
  return activity_id_;
}
void GetActivityDataByMuipReq::set_activity_id(::google::protobuf::uint32 value) {
  
  activity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetActivityDataByMuipReq.activity_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetActivityDataByMuipRsp::kRetcodeFieldNumber;
const int GetActivityDataByMuipRsp::kActivityIdFieldNumber;
const int GetActivityDataByMuipRsp::kScheduleIdFieldNumber;
const int GetActivityDataByMuipRsp::kIsStartedFieldNumber;
const int GetActivityDataByMuipRsp::kIsFinishedFieldNumber;
const int GetActivityDataByMuipRsp::kSeaLampDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetActivityDataByMuipRsp::GetActivityDataByMuipRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetActivityDataByMuipRsp)
}
GetActivityDataByMuipRsp::GetActivityDataByMuipRsp(const GetActivityDataByMuipRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_finished_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(is_finished_));
  clear_has_detail();
  switch (from.detail_case()) {
    case kSeaLampData: {
      mutable_sea_lamp_data()->::proto::SeaLampActivityDataMuip::MergeFrom(from.sea_lamp_data());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.GetActivityDataByMuipRsp)
}

void GetActivityDataByMuipRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_finished_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(is_finished_));
  clear_has_detail();
  _cached_size_ = 0;
}

GetActivityDataByMuipRsp::~GetActivityDataByMuipRsp() {
  // @@protoc_insertion_point(destructor:proto.GetActivityDataByMuipRsp)
  SharedDtor();
}

void GetActivityDataByMuipRsp::SharedDtor() {
  if (has_detail()) {
    clear_detail();
  }
}

void GetActivityDataByMuipRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetActivityDataByMuipRsp::descriptor() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetActivityDataByMuipRsp& GetActivityDataByMuipRsp::default_instance() {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetActivityDataByMuipRsp* GetActivityDataByMuipRsp::New(::google::protobuf::Arena* arena) const {
  GetActivityDataByMuipRsp* n = new GetActivityDataByMuipRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetActivityDataByMuipRsp::clear_detail() {
// @@protoc_insertion_point(one_of_clear_start:proto.GetActivityDataByMuipRsp)
  switch (detail_case()) {
    case kSeaLampData: {
      delete detail_.sea_lamp_data_;
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DETAIL_NOT_SET;
}


void GetActivityDataByMuipRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetActivityDataByMuipRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_finished_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(is_finished_));
  clear_detail();
  _internal_metadata_.Clear();
}

bool GetActivityDataByMuipRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetActivityDataByMuipRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 activity_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 schedule_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schedule_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_started = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_started_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_finished = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_finished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SeaLampActivityDataMuip sea_lamp_data = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sea_lamp_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetActivityDataByMuipRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetActivityDataByMuipRsp)
  return false;
#undef DO_
}

void GetActivityDataByMuipRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetActivityDataByMuipRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 activity_id = 2;
  if (this->activity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activity_id(), output);
  }

  // uint32 schedule_id = 3;
  if (this->schedule_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->schedule_id(), output);
  }

  // bool is_started = 4;
  if (this->is_started() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_started(), output);
  }

  // bool is_finished = 5;
  if (this->is_finished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_finished(), output);
  }

  // .proto.SeaLampActivityDataMuip sea_lamp_data = 10;
  if (has_sea_lamp_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *detail_.sea_lamp_data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetActivityDataByMuipRsp)
}

::google::protobuf::uint8* GetActivityDataByMuipRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetActivityDataByMuipRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 activity_id = 2;
  if (this->activity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activity_id(), target);
  }

  // uint32 schedule_id = 3;
  if (this->schedule_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->schedule_id(), target);
  }

  // bool is_started = 4;
  if (this->is_started() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_started(), target);
  }

  // bool is_finished = 5;
  if (this->is_finished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_finished(), target);
  }

  // .proto.SeaLampActivityDataMuip sea_lamp_data = 10;
  if (has_sea_lamp_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *detail_.sea_lamp_data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetActivityDataByMuipRsp)
  return target;
}

size_t GetActivityDataByMuipRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetActivityDataByMuipRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 activity_id = 2;
  if (this->activity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->activity_id());
  }

  // uint32 schedule_id = 3;
  if (this->schedule_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->schedule_id());
  }

  // bool is_started = 4;
  if (this->is_started() != 0) {
    total_size += 1 + 1;
  }

  // bool is_finished = 5;
  if (this->is_finished() != 0) {
    total_size += 1 + 1;
  }

  switch (detail_case()) {
    // .proto.SeaLampActivityDataMuip sea_lamp_data = 10;
    case kSeaLampData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.sea_lamp_data_);
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetActivityDataByMuipRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetActivityDataByMuipRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetActivityDataByMuipRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetActivityDataByMuipRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetActivityDataByMuipRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetActivityDataByMuipRsp)
    MergeFrom(*source);
  }
}

void GetActivityDataByMuipRsp::MergeFrom(const GetActivityDataByMuipRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetActivityDataByMuipRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.activity_id() != 0) {
    set_activity_id(from.activity_id());
  }
  if (from.schedule_id() != 0) {
    set_schedule_id(from.schedule_id());
  }
  if (from.is_started() != 0) {
    set_is_started(from.is_started());
  }
  if (from.is_finished() != 0) {
    set_is_finished(from.is_finished());
  }
  switch (from.detail_case()) {
    case kSeaLampData: {
      mutable_sea_lamp_data()->::proto::SeaLampActivityDataMuip::MergeFrom(from.sea_lamp_data());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
}

void GetActivityDataByMuipRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetActivityDataByMuipRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetActivityDataByMuipRsp::CopyFrom(const GetActivityDataByMuipRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetActivityDataByMuipRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActivityDataByMuipRsp::IsInitialized() const {
  return true;
}

void GetActivityDataByMuipRsp::Swap(GetActivityDataByMuipRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetActivityDataByMuipRsp::InternalSwap(GetActivityDataByMuipRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(activity_id_, other->activity_id_);
  swap(schedule_id_, other->schedule_id_);
  swap(is_started_, other->is_started_);
  swap(is_finished_, other->is_finished_);
  swap(detail_, other->detail_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetActivityDataByMuipRsp::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetActivityDataByMuipRsp

// int32 retcode = 1;
void GetActivityDataByMuipRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GetActivityDataByMuipRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetActivityDataByMuipRsp.retcode)
  return retcode_;
}
void GetActivityDataByMuipRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetActivityDataByMuipRsp.retcode)
}

// uint32 activity_id = 2;
void GetActivityDataByMuipRsp::clear_activity_id() {
  activity_id_ = 0u;
}
::google::protobuf::uint32 GetActivityDataByMuipRsp::activity_id() const {
  // @@protoc_insertion_point(field_get:proto.GetActivityDataByMuipRsp.activity_id)
  return activity_id_;
}
void GetActivityDataByMuipRsp::set_activity_id(::google::protobuf::uint32 value) {
  
  activity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetActivityDataByMuipRsp.activity_id)
}

// uint32 schedule_id = 3;
void GetActivityDataByMuipRsp::clear_schedule_id() {
  schedule_id_ = 0u;
}
::google::protobuf::uint32 GetActivityDataByMuipRsp::schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.GetActivityDataByMuipRsp.schedule_id)
  return schedule_id_;
}
void GetActivityDataByMuipRsp::set_schedule_id(::google::protobuf::uint32 value) {
  
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetActivityDataByMuipRsp.schedule_id)
}

// bool is_started = 4;
void GetActivityDataByMuipRsp::clear_is_started() {
  is_started_ = false;
}
bool GetActivityDataByMuipRsp::is_started() const {
  // @@protoc_insertion_point(field_get:proto.GetActivityDataByMuipRsp.is_started)
  return is_started_;
}
void GetActivityDataByMuipRsp::set_is_started(bool value) {
  
  is_started_ = value;
  // @@protoc_insertion_point(field_set:proto.GetActivityDataByMuipRsp.is_started)
}

// bool is_finished = 5;
void GetActivityDataByMuipRsp::clear_is_finished() {
  is_finished_ = false;
}
bool GetActivityDataByMuipRsp::is_finished() const {
  // @@protoc_insertion_point(field_get:proto.GetActivityDataByMuipRsp.is_finished)
  return is_finished_;
}
void GetActivityDataByMuipRsp::set_is_finished(bool value) {
  
  is_finished_ = value;
  // @@protoc_insertion_point(field_set:proto.GetActivityDataByMuipRsp.is_finished)
}

// .proto.SeaLampActivityDataMuip sea_lamp_data = 10;
bool GetActivityDataByMuipRsp::has_sea_lamp_data() const {
  return detail_case() == kSeaLampData;
}
void GetActivityDataByMuipRsp::set_has_sea_lamp_data() {
  _oneof_case_[0] = kSeaLampData;
}
void GetActivityDataByMuipRsp::clear_sea_lamp_data() {
  if (has_sea_lamp_data()) {
    delete detail_.sea_lamp_data_;
    clear_has_detail();
  }
}
 const ::proto::SeaLampActivityDataMuip& GetActivityDataByMuipRsp::sea_lamp_data() const {
  // @@protoc_insertion_point(field_get:proto.GetActivityDataByMuipRsp.sea_lamp_data)
  return has_sea_lamp_data()
      ? *detail_.sea_lamp_data_
      : ::proto::SeaLampActivityDataMuip::default_instance();
}
::proto::SeaLampActivityDataMuip* GetActivityDataByMuipRsp::mutable_sea_lamp_data() {
  if (!has_sea_lamp_data()) {
    clear_detail();
    set_has_sea_lamp_data();
    detail_.sea_lamp_data_ = new ::proto::SeaLampActivityDataMuip;
  }
  // @@protoc_insertion_point(field_mutable:proto.GetActivityDataByMuipRsp.sea_lamp_data)
  return detail_.sea_lamp_data_;
}
::proto::SeaLampActivityDataMuip* GetActivityDataByMuipRsp::release_sea_lamp_data() {
  // @@protoc_insertion_point(field_release:proto.GetActivityDataByMuipRsp.sea_lamp_data)
  if (has_sea_lamp_data()) {
    clear_has_detail();
    ::proto::SeaLampActivityDataMuip* temp = detail_.sea_lamp_data_;
    detail_.sea_lamp_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GetActivityDataByMuipRsp::set_allocated_sea_lamp_data(::proto::SeaLampActivityDataMuip* sea_lamp_data) {
  clear_detail();
  if (sea_lamp_data) {
    set_has_sea_lamp_data();
    detail_.sea_lamp_data_ = sea_lamp_data;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GetActivityDataByMuipRsp.sea_lamp_data)
}

bool GetActivityDataByMuipRsp::has_detail() const {
  return detail_case() != DETAIL_NOT_SET;
}
void GetActivityDataByMuipRsp::clear_has_detail() {
  _oneof_case_[0] = DETAIL_NOT_SET;
}
GetActivityDataByMuipRsp::DetailCase GetActivityDataByMuipRsp::detail_case() const {
  return GetActivityDataByMuipRsp::DetailCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
