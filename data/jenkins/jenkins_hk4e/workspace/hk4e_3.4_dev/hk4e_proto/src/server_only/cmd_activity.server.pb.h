// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_only/cmd_activity.server.proto

#ifndef PROTOBUF_server_5fonly_2fcmd_5factivity_2eserver_2eproto__INCLUDED
#define PROTOBUF_server_5fonly_2fcmd_5factivity_2eserver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace proto {
class GetActivityDataByMuipReq;
class GetActivityDataByMuipReqDefaultTypeInternal;
extern GetActivityDataByMuipReqDefaultTypeInternal _GetActivityDataByMuipReq_default_instance_;
class GetActivityDataByMuipRsp;
class GetActivityDataByMuipRspDefaultTypeInternal;
extern GetActivityDataByMuipRspDefaultTypeInternal _GetActivityDataByMuipRsp_default_instance_;
class SeaLampActivityDataMuip;
class SeaLampActivityDataMuipDefaultTypeInternal;
extern SeaLampActivityDataMuipDefaultTypeInternal _SeaLampActivityDataMuip_default_instance_;
class SeaLampAddProgressByMuipReq;
class SeaLampAddProgressByMuipReqDefaultTypeInternal;
extern SeaLampAddProgressByMuipReqDefaultTypeInternal _SeaLampAddProgressByMuipReq_default_instance_;
class SeaLampAddProgressByMuipRsp;
class SeaLampAddProgressByMuipRspDefaultTypeInternal;
extern SeaLampAddProgressByMuipRspDefaultTypeInternal _SeaLampAddProgressByMuipRsp_default_instance_;
class SeaLampBroadcastNotify;
class SeaLampBroadcastNotifyDefaultTypeInternal;
extern SeaLampBroadcastNotifyDefaultTypeInternal _SeaLampBroadcastNotify_default_instance_;
class SeaLampClearProgressByGmNotify;
class SeaLampClearProgressByGmNotifyDefaultTypeInternal;
extern SeaLampClearProgressByGmNotifyDefaultTypeInternal _SeaLampClearProgressByGmNotify_default_instance_;
class SeaLampPlayerContributionNotify;
class SeaLampPlayerContributionNotifyDefaultTypeInternal;
extern SeaLampPlayerContributionNotifyDefaultTypeInternal _SeaLampPlayerContributionNotify_default_instance_;
class SeaLampProgressImplementNotify;
class SeaLampProgressImplementNotifyDefaultTypeInternal;
extern SeaLampProgressImplementNotifyDefaultTypeInternal _SeaLampProgressImplementNotify_default_instance_;
class SeaLampProgressNotify;
class SeaLampProgressNotifyDefaultTypeInternal;
extern SeaLampProgressNotifyDefaultTypeInternal _SeaLampProgressNotify_default_instance_;
class SeaLampSetProgressByMuipReq;
class SeaLampSetProgressByMuipReqDefaultTypeInternal;
extern SeaLampSetProgressByMuipReqDefaultTypeInternal _SeaLampSetProgressByMuipReq_default_instance_;
class SeaLampSetProgressByMuipRsp;
class SeaLampSetProgressByMuipRspDefaultTypeInternal;
extern SeaLampSetProgressByMuipRspDefaultTypeInternal _SeaLampSetProgressByMuipRsp_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto

// ===================================================================

class SeaLampPlayerContributionNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SeaLampPlayerContributionNotify) */ {
 public:
  SeaLampPlayerContributionNotify();
  virtual ~SeaLampPlayerContributionNotify();

  SeaLampPlayerContributionNotify(const SeaLampPlayerContributionNotify& from);

  inline SeaLampPlayerContributionNotify& operator=(const SeaLampPlayerContributionNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeaLampPlayerContributionNotify(SeaLampPlayerContributionNotify&& from) noexcept
    : SeaLampPlayerContributionNotify() {
    *this = ::std::move(from);
  }

  inline SeaLampPlayerContributionNotify& operator=(SeaLampPlayerContributionNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeaLampPlayerContributionNotify& default_instance();

  static inline const SeaLampPlayerContributionNotify* internal_default_instance() {
    return reinterpret_cast<const SeaLampPlayerContributionNotify*>(
               &_SeaLampPlayerContributionNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SeaLampPlayerContributionNotify* other);
  friend void swap(SeaLampPlayerContributionNotify& a, SeaLampPlayerContributionNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeaLampPlayerContributionNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  SeaLampPlayerContributionNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SeaLampPlayerContributionNotify& from);
  void MergeFrom(const SeaLampPlayerContributionNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SeaLampPlayerContributionNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 total_contribution = 1;
  void clear_total_contribution();
  static const int kTotalContributionFieldNumber = 1;
  ::google::protobuf::uint32 total_contribution() const;
  void set_total_contribution(::google::protobuf::uint32 value);

  // uint32 add_progress = 2;
  void clear_add_progress();
  static const int kAddProgressFieldNumber = 2;
  ::google::protobuf::uint32 add_progress() const;
  void set_add_progress(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.SeaLampPlayerContributionNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 total_contribution_;
  ::google::protobuf::uint32 add_progress_;
  mutable int _cached_size_;
  friend struct protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SeaLampProgressNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SeaLampProgressNotify) */ {
 public:
  SeaLampProgressNotify();
  virtual ~SeaLampProgressNotify();

  SeaLampProgressNotify(const SeaLampProgressNotify& from);

  inline SeaLampProgressNotify& operator=(const SeaLampProgressNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeaLampProgressNotify(SeaLampProgressNotify&& from) noexcept
    : SeaLampProgressNotify() {
    *this = ::std::move(from);
  }

  inline SeaLampProgressNotify& operator=(SeaLampProgressNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeaLampProgressNotify& default_instance();

  static inline const SeaLampProgressNotify* internal_default_instance() {
    return reinterpret_cast<const SeaLampProgressNotify*>(
               &_SeaLampProgressNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SeaLampProgressNotify* other);
  friend void swap(SeaLampProgressNotify& a, SeaLampProgressNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeaLampProgressNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  SeaLampProgressNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SeaLampProgressNotify& from);
  void MergeFrom(const SeaLampProgressNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SeaLampProgressNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 schedule_id = 1;
  void clear_schedule_id();
  static const int kScheduleIdFieldNumber = 1;
  ::google::protobuf::uint32 schedule_id() const;
  void set_schedule_id(::google::protobuf::uint32 value);

  // uint32 progress = 2;
  void clear_progress();
  static const int kProgressFieldNumber = 2;
  ::google::protobuf::uint32 progress() const;
  void set_progress(::google::protobuf::uint32 value);

  // bool is_finished = 3;
  void clear_is_finished();
  static const int kIsFinishedFieldNumber = 3;
  bool is_finished() const;
  void set_is_finished(bool value);

  // bool is_changed_by_muip = 4;
  void clear_is_changed_by_muip();
  static const int kIsChangedByMuipFieldNumber = 4;
  bool is_changed_by_muip() const;
  void set_is_changed_by_muip(bool value);

  // @@protoc_insertion_point(class_scope:proto.SeaLampProgressNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 schedule_id_;
  ::google::protobuf::uint32 progress_;
  bool is_finished_;
  bool is_changed_by_muip_;
  mutable int _cached_size_;
  friend struct protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SeaLampBroadcastNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SeaLampBroadcastNotify) */ {
 public:
  SeaLampBroadcastNotify();
  virtual ~SeaLampBroadcastNotify();

  SeaLampBroadcastNotify(const SeaLampBroadcastNotify& from);

  inline SeaLampBroadcastNotify& operator=(const SeaLampBroadcastNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeaLampBroadcastNotify(SeaLampBroadcastNotify&& from) noexcept
    : SeaLampBroadcastNotify() {
    *this = ::std::move(from);
  }

  inline SeaLampBroadcastNotify& operator=(SeaLampBroadcastNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeaLampBroadcastNotify& default_instance();

  static inline const SeaLampBroadcastNotify* internal_default_instance() {
    return reinterpret_cast<const SeaLampBroadcastNotify*>(
               &_SeaLampBroadcastNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SeaLampBroadcastNotify* other);
  friend void swap(SeaLampBroadcastNotify& a, SeaLampBroadcastNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeaLampBroadcastNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  SeaLampBroadcastNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SeaLampBroadcastNotify& from);
  void MergeFrom(const SeaLampBroadcastNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SeaLampBroadcastNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 schedule_id = 1;
  void clear_schedule_id();
  static const int kScheduleIdFieldNumber = 1;
  ::google::protobuf::uint32 schedule_id() const;
  void set_schedule_id(::google::protobuf::uint32 value);

  // uint32 last_phase = 2;
  void clear_last_phase();
  static const int kLastPhaseFieldNumber = 2;
  ::google::protobuf::uint32 last_phase() const;
  void set_last_phase(::google::protobuf::uint32 value);

  // uint32 phase = 3;
  void clear_phase();
  static const int kPhaseFieldNumber = 3;
  ::google::protobuf::uint32 phase() const;
  void set_phase(::google::protobuf::uint32 value);

  // uint32 progress = 4;
  void clear_progress();
  static const int kProgressFieldNumber = 4;
  ::google::protobuf::uint32 progress() const;
  void set_progress(::google::protobuf::uint32 value);

  // bool is_changed_by_muip = 5;
  void clear_is_changed_by_muip();
  static const int kIsChangedByMuipFieldNumber = 5;
  bool is_changed_by_muip() const;
  void set_is_changed_by_muip(bool value);

  // @@protoc_insertion_point(class_scope:proto.SeaLampBroadcastNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 schedule_id_;
  ::google::protobuf::uint32 last_phase_;
  ::google::protobuf::uint32 phase_;
  ::google::protobuf::uint32 progress_;
  bool is_changed_by_muip_;
  mutable int _cached_size_;
  friend struct protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SeaLampSetProgressByMuipReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SeaLampSetProgressByMuipReq) */ {
 public:
  SeaLampSetProgressByMuipReq();
  virtual ~SeaLampSetProgressByMuipReq();

  SeaLampSetProgressByMuipReq(const SeaLampSetProgressByMuipReq& from);

  inline SeaLampSetProgressByMuipReq& operator=(const SeaLampSetProgressByMuipReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeaLampSetProgressByMuipReq(SeaLampSetProgressByMuipReq&& from) noexcept
    : SeaLampSetProgressByMuipReq() {
    *this = ::std::move(from);
  }

  inline SeaLampSetProgressByMuipReq& operator=(SeaLampSetProgressByMuipReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeaLampSetProgressByMuipReq& default_instance();

  static inline const SeaLampSetProgressByMuipReq* internal_default_instance() {
    return reinterpret_cast<const SeaLampSetProgressByMuipReq*>(
               &_SeaLampSetProgressByMuipReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SeaLampSetProgressByMuipReq* other);
  friend void swap(SeaLampSetProgressByMuipReq& a, SeaLampSetProgressByMuipReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeaLampSetProgressByMuipReq* New() const PROTOBUF_FINAL { return New(NULL); }

  SeaLampSetProgressByMuipReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SeaLampSetProgressByMuipReq& from);
  void MergeFrom(const SeaLampSetProgressByMuipReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SeaLampSetProgressByMuipReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 progress = 1;
  void clear_progress();
  static const int kProgressFieldNumber = 1;
  ::google::protobuf::uint32 progress() const;
  void set_progress(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.SeaLampSetProgressByMuipReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 progress_;
  mutable int _cached_size_;
  friend struct protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SeaLampSetProgressByMuipRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SeaLampSetProgressByMuipRsp) */ {
 public:
  SeaLampSetProgressByMuipRsp();
  virtual ~SeaLampSetProgressByMuipRsp();

  SeaLampSetProgressByMuipRsp(const SeaLampSetProgressByMuipRsp& from);

  inline SeaLampSetProgressByMuipRsp& operator=(const SeaLampSetProgressByMuipRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeaLampSetProgressByMuipRsp(SeaLampSetProgressByMuipRsp&& from) noexcept
    : SeaLampSetProgressByMuipRsp() {
    *this = ::std::move(from);
  }

  inline SeaLampSetProgressByMuipRsp& operator=(SeaLampSetProgressByMuipRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeaLampSetProgressByMuipRsp& default_instance();

  static inline const SeaLampSetProgressByMuipRsp* internal_default_instance() {
    return reinterpret_cast<const SeaLampSetProgressByMuipRsp*>(
               &_SeaLampSetProgressByMuipRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SeaLampSetProgressByMuipRsp* other);
  friend void swap(SeaLampSetProgressByMuipRsp& a, SeaLampSetProgressByMuipRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeaLampSetProgressByMuipRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SeaLampSetProgressByMuipRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SeaLampSetProgressByMuipRsp& from);
  void MergeFrom(const SeaLampSetProgressByMuipRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SeaLampSetProgressByMuipRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 old_progress = 2;
  void clear_old_progress();
  static const int kOldProgressFieldNumber = 2;
  ::google::protobuf::uint32 old_progress() const;
  void set_old_progress(::google::protobuf::uint32 value);

  // uint32 new_progress = 3;
  void clear_new_progress();
  static const int kNewProgressFieldNumber = 3;
  ::google::protobuf::uint32 new_progress() const;
  void set_new_progress(::google::protobuf::uint32 value);

  // uint32 factor = 4;
  void clear_factor();
  static const int kFactorFieldNumber = 4;
  ::google::protobuf::uint32 factor() const;
  void set_factor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.SeaLampSetProgressByMuipRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 old_progress_;
  ::google::protobuf::uint32 new_progress_;
  ::google::protobuf::uint32 factor_;
  mutable int _cached_size_;
  friend struct protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SeaLampProgressImplementNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SeaLampProgressImplementNotify) */ {
 public:
  SeaLampProgressImplementNotify();
  virtual ~SeaLampProgressImplementNotify();

  SeaLampProgressImplementNotify(const SeaLampProgressImplementNotify& from);

  inline SeaLampProgressImplementNotify& operator=(const SeaLampProgressImplementNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeaLampProgressImplementNotify(SeaLampProgressImplementNotify&& from) noexcept
    : SeaLampProgressImplementNotify() {
    *this = ::std::move(from);
  }

  inline SeaLampProgressImplementNotify& operator=(SeaLampProgressImplementNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeaLampProgressImplementNotify& default_instance();

  static inline const SeaLampProgressImplementNotify* internal_default_instance() {
    return reinterpret_cast<const SeaLampProgressImplementNotify*>(
               &_SeaLampProgressImplementNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SeaLampProgressImplementNotify* other);
  friend void swap(SeaLampProgressImplementNotify& a, SeaLampProgressImplementNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeaLampProgressImplementNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  SeaLampProgressImplementNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SeaLampProgressImplementNotify& from);
  void MergeFrom(const SeaLampProgressImplementNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SeaLampProgressImplementNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.SeaLampProgressNotify msg = 1;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::proto::SeaLampProgressNotify& msg() const;
  ::proto::SeaLampProgressNotify* mutable_msg();
  ::proto::SeaLampProgressNotify* release_msg();
  void set_allocated_msg(::proto::SeaLampProgressNotify* msg);

  // @@protoc_insertion_point(class_scope:proto.SeaLampProgressImplementNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::SeaLampProgressNotify* msg_;
  mutable int _cached_size_;
  friend struct protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SeaLampClearProgressByGmNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SeaLampClearProgressByGmNotify) */ {
 public:
  SeaLampClearProgressByGmNotify();
  virtual ~SeaLampClearProgressByGmNotify();

  SeaLampClearProgressByGmNotify(const SeaLampClearProgressByGmNotify& from);

  inline SeaLampClearProgressByGmNotify& operator=(const SeaLampClearProgressByGmNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeaLampClearProgressByGmNotify(SeaLampClearProgressByGmNotify&& from) noexcept
    : SeaLampClearProgressByGmNotify() {
    *this = ::std::move(from);
  }

  inline SeaLampClearProgressByGmNotify& operator=(SeaLampClearProgressByGmNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeaLampClearProgressByGmNotify& default_instance();

  static inline const SeaLampClearProgressByGmNotify* internal_default_instance() {
    return reinterpret_cast<const SeaLampClearProgressByGmNotify*>(
               &_SeaLampClearProgressByGmNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SeaLampClearProgressByGmNotify* other);
  friend void swap(SeaLampClearProgressByGmNotify& a, SeaLampClearProgressByGmNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeaLampClearProgressByGmNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  SeaLampClearProgressByGmNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SeaLampClearProgressByGmNotify& from);
  void MergeFrom(const SeaLampClearProgressByGmNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SeaLampClearProgressByGmNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.SeaLampClearProgressByGmNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SeaLampAddProgressByMuipReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SeaLampAddProgressByMuipReq) */ {
 public:
  SeaLampAddProgressByMuipReq();
  virtual ~SeaLampAddProgressByMuipReq();

  SeaLampAddProgressByMuipReq(const SeaLampAddProgressByMuipReq& from);

  inline SeaLampAddProgressByMuipReq& operator=(const SeaLampAddProgressByMuipReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeaLampAddProgressByMuipReq(SeaLampAddProgressByMuipReq&& from) noexcept
    : SeaLampAddProgressByMuipReq() {
    *this = ::std::move(from);
  }

  inline SeaLampAddProgressByMuipReq& operator=(SeaLampAddProgressByMuipReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeaLampAddProgressByMuipReq& default_instance();

  static inline const SeaLampAddProgressByMuipReq* internal_default_instance() {
    return reinterpret_cast<const SeaLampAddProgressByMuipReq*>(
               &_SeaLampAddProgressByMuipReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(SeaLampAddProgressByMuipReq* other);
  friend void swap(SeaLampAddProgressByMuipReq& a, SeaLampAddProgressByMuipReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeaLampAddProgressByMuipReq* New() const PROTOBUF_FINAL { return New(NULL); }

  SeaLampAddProgressByMuipReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SeaLampAddProgressByMuipReq& from);
  void MergeFrom(const SeaLampAddProgressByMuipReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SeaLampAddProgressByMuipReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 add_progress = 1;
  void clear_add_progress();
  static const int kAddProgressFieldNumber = 1;
  ::google::protobuf::uint32 add_progress() const;
  void set_add_progress(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.SeaLampAddProgressByMuipReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 add_progress_;
  mutable int _cached_size_;
  friend struct protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SeaLampAddProgressByMuipRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SeaLampAddProgressByMuipRsp) */ {
 public:
  SeaLampAddProgressByMuipRsp();
  virtual ~SeaLampAddProgressByMuipRsp();

  SeaLampAddProgressByMuipRsp(const SeaLampAddProgressByMuipRsp& from);

  inline SeaLampAddProgressByMuipRsp& operator=(const SeaLampAddProgressByMuipRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeaLampAddProgressByMuipRsp(SeaLampAddProgressByMuipRsp&& from) noexcept
    : SeaLampAddProgressByMuipRsp() {
    *this = ::std::move(from);
  }

  inline SeaLampAddProgressByMuipRsp& operator=(SeaLampAddProgressByMuipRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeaLampAddProgressByMuipRsp& default_instance();

  static inline const SeaLampAddProgressByMuipRsp* internal_default_instance() {
    return reinterpret_cast<const SeaLampAddProgressByMuipRsp*>(
               &_SeaLampAddProgressByMuipRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(SeaLampAddProgressByMuipRsp* other);
  friend void swap(SeaLampAddProgressByMuipRsp& a, SeaLampAddProgressByMuipRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeaLampAddProgressByMuipRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SeaLampAddProgressByMuipRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SeaLampAddProgressByMuipRsp& from);
  void MergeFrom(const SeaLampAddProgressByMuipRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SeaLampAddProgressByMuipRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 old_progress = 2;
  void clear_old_progress();
  static const int kOldProgressFieldNumber = 2;
  ::google::protobuf::uint32 old_progress() const;
  void set_old_progress(::google::protobuf::uint32 value);

  // uint32 new_progress = 3;
  void clear_new_progress();
  static const int kNewProgressFieldNumber = 3;
  ::google::protobuf::uint32 new_progress() const;
  void set_new_progress(::google::protobuf::uint32 value);

  // uint32 factor = 4;
  void clear_factor();
  static const int kFactorFieldNumber = 4;
  ::google::protobuf::uint32 factor() const;
  void set_factor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.SeaLampAddProgressByMuipRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 old_progress_;
  ::google::protobuf::uint32 new_progress_;
  ::google::protobuf::uint32 factor_;
  mutable int _cached_size_;
  friend struct protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SeaLampActivityDataMuip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SeaLampActivityDataMuip) */ {
 public:
  SeaLampActivityDataMuip();
  virtual ~SeaLampActivityDataMuip();

  SeaLampActivityDataMuip(const SeaLampActivityDataMuip& from);

  inline SeaLampActivityDataMuip& operator=(const SeaLampActivityDataMuip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeaLampActivityDataMuip(SeaLampActivityDataMuip&& from) noexcept
    : SeaLampActivityDataMuip() {
    *this = ::std::move(from);
  }

  inline SeaLampActivityDataMuip& operator=(SeaLampActivityDataMuip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeaLampActivityDataMuip& default_instance();

  static inline const SeaLampActivityDataMuip* internal_default_instance() {
    return reinterpret_cast<const SeaLampActivityDataMuip*>(
               &_SeaLampActivityDataMuip_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(SeaLampActivityDataMuip* other);
  friend void swap(SeaLampActivityDataMuip& a, SeaLampActivityDataMuip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeaLampActivityDataMuip* New() const PROTOBUF_FINAL { return New(NULL); }

  SeaLampActivityDataMuip* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SeaLampActivityDataMuip& from);
  void MergeFrom(const SeaLampActivityDataMuip& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SeaLampActivityDataMuip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 progress = 1;
  void clear_progress();
  static const int kProgressFieldNumber = 1;
  ::google::protobuf::uint32 progress() const;
  void set_progress(::google::protobuf::uint32 value);

  // uint32 phase_id = 2;
  void clear_phase_id();
  static const int kPhaseIdFieldNumber = 2;
  ::google::protobuf::uint32 phase_id() const;
  void set_phase_id(::google::protobuf::uint32 value);

  // uint32 factor = 3;
  void clear_factor();
  static const int kFactorFieldNumber = 3;
  ::google::protobuf::uint32 factor() const;
  void set_factor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.SeaLampActivityDataMuip)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 progress_;
  ::google::protobuf::uint32 phase_id_;
  ::google::protobuf::uint32 factor_;
  mutable int _cached_size_;
  friend struct protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetActivityDataByMuipReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetActivityDataByMuipReq) */ {
 public:
  GetActivityDataByMuipReq();
  virtual ~GetActivityDataByMuipReq();

  GetActivityDataByMuipReq(const GetActivityDataByMuipReq& from);

  inline GetActivityDataByMuipReq& operator=(const GetActivityDataByMuipReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetActivityDataByMuipReq(GetActivityDataByMuipReq&& from) noexcept
    : GetActivityDataByMuipReq() {
    *this = ::std::move(from);
  }

  inline GetActivityDataByMuipReq& operator=(GetActivityDataByMuipReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetActivityDataByMuipReq& default_instance();

  static inline const GetActivityDataByMuipReq* internal_default_instance() {
    return reinterpret_cast<const GetActivityDataByMuipReq*>(
               &_GetActivityDataByMuipReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(GetActivityDataByMuipReq* other);
  friend void swap(GetActivityDataByMuipReq& a, GetActivityDataByMuipReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetActivityDataByMuipReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetActivityDataByMuipReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetActivityDataByMuipReq& from);
  void MergeFrom(const GetActivityDataByMuipReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetActivityDataByMuipReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 activity_id = 1;
  void clear_activity_id();
  static const int kActivityIdFieldNumber = 1;
  ::google::protobuf::uint32 activity_id() const;
  void set_activity_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GetActivityDataByMuipReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 activity_id_;
  mutable int _cached_size_;
  friend struct protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetActivityDataByMuipRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetActivityDataByMuipRsp) */ {
 public:
  GetActivityDataByMuipRsp();
  virtual ~GetActivityDataByMuipRsp();

  GetActivityDataByMuipRsp(const GetActivityDataByMuipRsp& from);

  inline GetActivityDataByMuipRsp& operator=(const GetActivityDataByMuipRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetActivityDataByMuipRsp(GetActivityDataByMuipRsp&& from) noexcept
    : GetActivityDataByMuipRsp() {
    *this = ::std::move(from);
  }

  inline GetActivityDataByMuipRsp& operator=(GetActivityDataByMuipRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetActivityDataByMuipRsp& default_instance();

  enum DetailCase {
    kSeaLampData = 10,
    DETAIL_NOT_SET = 0,
  };

  static inline const GetActivityDataByMuipRsp* internal_default_instance() {
    return reinterpret_cast<const GetActivityDataByMuipRsp*>(
               &_GetActivityDataByMuipRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(GetActivityDataByMuipRsp* other);
  friend void swap(GetActivityDataByMuipRsp& a, GetActivityDataByMuipRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetActivityDataByMuipRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetActivityDataByMuipRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetActivityDataByMuipRsp& from);
  void MergeFrom(const GetActivityDataByMuipRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetActivityDataByMuipRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 activity_id = 2;
  void clear_activity_id();
  static const int kActivityIdFieldNumber = 2;
  ::google::protobuf::uint32 activity_id() const;
  void set_activity_id(::google::protobuf::uint32 value);

  // uint32 schedule_id = 3;
  void clear_schedule_id();
  static const int kScheduleIdFieldNumber = 3;
  ::google::protobuf::uint32 schedule_id() const;
  void set_schedule_id(::google::protobuf::uint32 value);

  // bool is_started = 4;
  void clear_is_started();
  static const int kIsStartedFieldNumber = 4;
  bool is_started() const;
  void set_is_started(bool value);

  // bool is_finished = 5;
  void clear_is_finished();
  static const int kIsFinishedFieldNumber = 5;
  bool is_finished() const;
  void set_is_finished(bool value);

  // .proto.SeaLampActivityDataMuip sea_lamp_data = 10;
  bool has_sea_lamp_data() const;
  void clear_sea_lamp_data();
  static const int kSeaLampDataFieldNumber = 10;
  const ::proto::SeaLampActivityDataMuip& sea_lamp_data() const;
  ::proto::SeaLampActivityDataMuip* mutable_sea_lamp_data();
  ::proto::SeaLampActivityDataMuip* release_sea_lamp_data();
  void set_allocated_sea_lamp_data(::proto::SeaLampActivityDataMuip* sea_lamp_data);

  DetailCase detail_case() const;
  // @@protoc_insertion_point(class_scope:proto.GetActivityDataByMuipRsp)
 private:
  void set_has_sea_lamp_data();

  inline bool has_detail() const;
  void clear_detail();
  inline void clear_has_detail();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 activity_id_;
  ::google::protobuf::uint32 schedule_id_;
  bool is_started_;
  bool is_finished_;
  union DetailUnion {
    DetailUnion() {}
    ::proto::SeaLampActivityDataMuip* sea_lamp_data_;
  } detail_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_server_5fonly_2fcmd_5factivity_2eserver_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SeaLampPlayerContributionNotify

// uint32 total_contribution = 1;
inline void SeaLampPlayerContributionNotify::clear_total_contribution() {
  total_contribution_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampPlayerContributionNotify::total_contribution() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampPlayerContributionNotify.total_contribution)
  return total_contribution_;
}
inline void SeaLampPlayerContributionNotify::set_total_contribution(::google::protobuf::uint32 value) {
  
  total_contribution_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampPlayerContributionNotify.total_contribution)
}

// uint32 add_progress = 2;
inline void SeaLampPlayerContributionNotify::clear_add_progress() {
  add_progress_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampPlayerContributionNotify::add_progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampPlayerContributionNotify.add_progress)
  return add_progress_;
}
inline void SeaLampPlayerContributionNotify::set_add_progress(::google::protobuf::uint32 value) {
  
  add_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampPlayerContributionNotify.add_progress)
}

// -------------------------------------------------------------------

// SeaLampProgressNotify

// uint32 schedule_id = 1;
inline void SeaLampProgressNotify::clear_schedule_id() {
  schedule_id_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampProgressNotify::schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampProgressNotify.schedule_id)
  return schedule_id_;
}
inline void SeaLampProgressNotify::set_schedule_id(::google::protobuf::uint32 value) {
  
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampProgressNotify.schedule_id)
}

// uint32 progress = 2;
inline void SeaLampProgressNotify::clear_progress() {
  progress_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampProgressNotify::progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampProgressNotify.progress)
  return progress_;
}
inline void SeaLampProgressNotify::set_progress(::google::protobuf::uint32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampProgressNotify.progress)
}

// bool is_finished = 3;
inline void SeaLampProgressNotify::clear_is_finished() {
  is_finished_ = false;
}
inline bool SeaLampProgressNotify::is_finished() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampProgressNotify.is_finished)
  return is_finished_;
}
inline void SeaLampProgressNotify::set_is_finished(bool value) {
  
  is_finished_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampProgressNotify.is_finished)
}

// bool is_changed_by_muip = 4;
inline void SeaLampProgressNotify::clear_is_changed_by_muip() {
  is_changed_by_muip_ = false;
}
inline bool SeaLampProgressNotify::is_changed_by_muip() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampProgressNotify.is_changed_by_muip)
  return is_changed_by_muip_;
}
inline void SeaLampProgressNotify::set_is_changed_by_muip(bool value) {
  
  is_changed_by_muip_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampProgressNotify.is_changed_by_muip)
}

// -------------------------------------------------------------------

// SeaLampBroadcastNotify

// uint32 schedule_id = 1;
inline void SeaLampBroadcastNotify::clear_schedule_id() {
  schedule_id_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampBroadcastNotify::schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampBroadcastNotify.schedule_id)
  return schedule_id_;
}
inline void SeaLampBroadcastNotify::set_schedule_id(::google::protobuf::uint32 value) {
  
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampBroadcastNotify.schedule_id)
}

// uint32 last_phase = 2;
inline void SeaLampBroadcastNotify::clear_last_phase() {
  last_phase_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampBroadcastNotify::last_phase() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampBroadcastNotify.last_phase)
  return last_phase_;
}
inline void SeaLampBroadcastNotify::set_last_phase(::google::protobuf::uint32 value) {
  
  last_phase_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampBroadcastNotify.last_phase)
}

// uint32 phase = 3;
inline void SeaLampBroadcastNotify::clear_phase() {
  phase_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampBroadcastNotify::phase() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampBroadcastNotify.phase)
  return phase_;
}
inline void SeaLampBroadcastNotify::set_phase(::google::protobuf::uint32 value) {
  
  phase_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampBroadcastNotify.phase)
}

// uint32 progress = 4;
inline void SeaLampBroadcastNotify::clear_progress() {
  progress_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampBroadcastNotify::progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampBroadcastNotify.progress)
  return progress_;
}
inline void SeaLampBroadcastNotify::set_progress(::google::protobuf::uint32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampBroadcastNotify.progress)
}

// bool is_changed_by_muip = 5;
inline void SeaLampBroadcastNotify::clear_is_changed_by_muip() {
  is_changed_by_muip_ = false;
}
inline bool SeaLampBroadcastNotify::is_changed_by_muip() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampBroadcastNotify.is_changed_by_muip)
  return is_changed_by_muip_;
}
inline void SeaLampBroadcastNotify::set_is_changed_by_muip(bool value) {
  
  is_changed_by_muip_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampBroadcastNotify.is_changed_by_muip)
}

// -------------------------------------------------------------------

// SeaLampSetProgressByMuipReq

// uint32 progress = 1;
inline void SeaLampSetProgressByMuipReq::clear_progress() {
  progress_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampSetProgressByMuipReq::progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampSetProgressByMuipReq.progress)
  return progress_;
}
inline void SeaLampSetProgressByMuipReq::set_progress(::google::protobuf::uint32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampSetProgressByMuipReq.progress)
}

// -------------------------------------------------------------------

// SeaLampSetProgressByMuipRsp

// int32 retcode = 1;
inline void SeaLampSetProgressByMuipRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 SeaLampSetProgressByMuipRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampSetProgressByMuipRsp.retcode)
  return retcode_;
}
inline void SeaLampSetProgressByMuipRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampSetProgressByMuipRsp.retcode)
}

// uint32 old_progress = 2;
inline void SeaLampSetProgressByMuipRsp::clear_old_progress() {
  old_progress_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampSetProgressByMuipRsp::old_progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampSetProgressByMuipRsp.old_progress)
  return old_progress_;
}
inline void SeaLampSetProgressByMuipRsp::set_old_progress(::google::protobuf::uint32 value) {
  
  old_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampSetProgressByMuipRsp.old_progress)
}

// uint32 new_progress = 3;
inline void SeaLampSetProgressByMuipRsp::clear_new_progress() {
  new_progress_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampSetProgressByMuipRsp::new_progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampSetProgressByMuipRsp.new_progress)
  return new_progress_;
}
inline void SeaLampSetProgressByMuipRsp::set_new_progress(::google::protobuf::uint32 value) {
  
  new_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampSetProgressByMuipRsp.new_progress)
}

// uint32 factor = 4;
inline void SeaLampSetProgressByMuipRsp::clear_factor() {
  factor_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampSetProgressByMuipRsp::factor() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampSetProgressByMuipRsp.factor)
  return factor_;
}
inline void SeaLampSetProgressByMuipRsp::set_factor(::google::protobuf::uint32 value) {
  
  factor_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampSetProgressByMuipRsp.factor)
}

// -------------------------------------------------------------------

// SeaLampProgressImplementNotify

// .proto.SeaLampProgressNotify msg = 1;
inline bool SeaLampProgressImplementNotify::has_msg() const {
  return this != internal_default_instance() && msg_ != NULL;
}
inline void SeaLampProgressImplementNotify::clear_msg() {
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}
inline const ::proto::SeaLampProgressNotify& SeaLampProgressImplementNotify::msg() const {
  const ::proto::SeaLampProgressNotify* p = msg_;
  // @@protoc_insertion_point(field_get:proto.SeaLampProgressImplementNotify.msg)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::SeaLampProgressNotify*>(
      &::proto::_SeaLampProgressNotify_default_instance_);
}
inline ::proto::SeaLampProgressNotify* SeaLampProgressImplementNotify::mutable_msg() {
  
  if (msg_ == NULL) {
    msg_ = new ::proto::SeaLampProgressNotify;
  }
  // @@protoc_insertion_point(field_mutable:proto.SeaLampProgressImplementNotify.msg)
  return msg_;
}
inline ::proto::SeaLampProgressNotify* SeaLampProgressImplementNotify::release_msg() {
  // @@protoc_insertion_point(field_release:proto.SeaLampProgressImplementNotify.msg)
  
  ::proto::SeaLampProgressNotify* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline void SeaLampProgressImplementNotify::set_allocated_msg(::proto::SeaLampProgressNotify* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SeaLampProgressImplementNotify.msg)
}

// -------------------------------------------------------------------

// SeaLampClearProgressByGmNotify

// -------------------------------------------------------------------

// SeaLampAddProgressByMuipReq

// uint32 add_progress = 1;
inline void SeaLampAddProgressByMuipReq::clear_add_progress() {
  add_progress_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampAddProgressByMuipReq::add_progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampAddProgressByMuipReq.add_progress)
  return add_progress_;
}
inline void SeaLampAddProgressByMuipReq::set_add_progress(::google::protobuf::uint32 value) {
  
  add_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampAddProgressByMuipReq.add_progress)
}

// -------------------------------------------------------------------

// SeaLampAddProgressByMuipRsp

// int32 retcode = 1;
inline void SeaLampAddProgressByMuipRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 SeaLampAddProgressByMuipRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampAddProgressByMuipRsp.retcode)
  return retcode_;
}
inline void SeaLampAddProgressByMuipRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampAddProgressByMuipRsp.retcode)
}

// uint32 old_progress = 2;
inline void SeaLampAddProgressByMuipRsp::clear_old_progress() {
  old_progress_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampAddProgressByMuipRsp::old_progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampAddProgressByMuipRsp.old_progress)
  return old_progress_;
}
inline void SeaLampAddProgressByMuipRsp::set_old_progress(::google::protobuf::uint32 value) {
  
  old_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampAddProgressByMuipRsp.old_progress)
}

// uint32 new_progress = 3;
inline void SeaLampAddProgressByMuipRsp::clear_new_progress() {
  new_progress_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampAddProgressByMuipRsp::new_progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampAddProgressByMuipRsp.new_progress)
  return new_progress_;
}
inline void SeaLampAddProgressByMuipRsp::set_new_progress(::google::protobuf::uint32 value) {
  
  new_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampAddProgressByMuipRsp.new_progress)
}

// uint32 factor = 4;
inline void SeaLampAddProgressByMuipRsp::clear_factor() {
  factor_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampAddProgressByMuipRsp::factor() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampAddProgressByMuipRsp.factor)
  return factor_;
}
inline void SeaLampAddProgressByMuipRsp::set_factor(::google::protobuf::uint32 value) {
  
  factor_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampAddProgressByMuipRsp.factor)
}

// -------------------------------------------------------------------

// SeaLampActivityDataMuip

// uint32 progress = 1;
inline void SeaLampActivityDataMuip::clear_progress() {
  progress_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampActivityDataMuip::progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampActivityDataMuip.progress)
  return progress_;
}
inline void SeaLampActivityDataMuip::set_progress(::google::protobuf::uint32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampActivityDataMuip.progress)
}

// uint32 phase_id = 2;
inline void SeaLampActivityDataMuip::clear_phase_id() {
  phase_id_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampActivityDataMuip::phase_id() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampActivityDataMuip.phase_id)
  return phase_id_;
}
inline void SeaLampActivityDataMuip::set_phase_id(::google::protobuf::uint32 value) {
  
  phase_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampActivityDataMuip.phase_id)
}

// uint32 factor = 3;
inline void SeaLampActivityDataMuip::clear_factor() {
  factor_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampActivityDataMuip::factor() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampActivityDataMuip.factor)
  return factor_;
}
inline void SeaLampActivityDataMuip::set_factor(::google::protobuf::uint32 value) {
  
  factor_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampActivityDataMuip.factor)
}

// -------------------------------------------------------------------

// GetActivityDataByMuipReq

// uint32 activity_id = 1;
inline void GetActivityDataByMuipReq::clear_activity_id() {
  activity_id_ = 0u;
}
inline ::google::protobuf::uint32 GetActivityDataByMuipReq::activity_id() const {
  // @@protoc_insertion_point(field_get:proto.GetActivityDataByMuipReq.activity_id)
  return activity_id_;
}
inline void GetActivityDataByMuipReq::set_activity_id(::google::protobuf::uint32 value) {
  
  activity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetActivityDataByMuipReq.activity_id)
}

// -------------------------------------------------------------------

// GetActivityDataByMuipRsp

// int32 retcode = 1;
inline void GetActivityDataByMuipRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GetActivityDataByMuipRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetActivityDataByMuipRsp.retcode)
  return retcode_;
}
inline void GetActivityDataByMuipRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetActivityDataByMuipRsp.retcode)
}

// uint32 activity_id = 2;
inline void GetActivityDataByMuipRsp::clear_activity_id() {
  activity_id_ = 0u;
}
inline ::google::protobuf::uint32 GetActivityDataByMuipRsp::activity_id() const {
  // @@protoc_insertion_point(field_get:proto.GetActivityDataByMuipRsp.activity_id)
  return activity_id_;
}
inline void GetActivityDataByMuipRsp::set_activity_id(::google::protobuf::uint32 value) {
  
  activity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetActivityDataByMuipRsp.activity_id)
}

// uint32 schedule_id = 3;
inline void GetActivityDataByMuipRsp::clear_schedule_id() {
  schedule_id_ = 0u;
}
inline ::google::protobuf::uint32 GetActivityDataByMuipRsp::schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.GetActivityDataByMuipRsp.schedule_id)
  return schedule_id_;
}
inline void GetActivityDataByMuipRsp::set_schedule_id(::google::protobuf::uint32 value) {
  
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetActivityDataByMuipRsp.schedule_id)
}

// bool is_started = 4;
inline void GetActivityDataByMuipRsp::clear_is_started() {
  is_started_ = false;
}
inline bool GetActivityDataByMuipRsp::is_started() const {
  // @@protoc_insertion_point(field_get:proto.GetActivityDataByMuipRsp.is_started)
  return is_started_;
}
inline void GetActivityDataByMuipRsp::set_is_started(bool value) {
  
  is_started_ = value;
  // @@protoc_insertion_point(field_set:proto.GetActivityDataByMuipRsp.is_started)
}

// bool is_finished = 5;
inline void GetActivityDataByMuipRsp::clear_is_finished() {
  is_finished_ = false;
}
inline bool GetActivityDataByMuipRsp::is_finished() const {
  // @@protoc_insertion_point(field_get:proto.GetActivityDataByMuipRsp.is_finished)
  return is_finished_;
}
inline void GetActivityDataByMuipRsp::set_is_finished(bool value) {
  
  is_finished_ = value;
  // @@protoc_insertion_point(field_set:proto.GetActivityDataByMuipRsp.is_finished)
}

// .proto.SeaLampActivityDataMuip sea_lamp_data = 10;
inline bool GetActivityDataByMuipRsp::has_sea_lamp_data() const {
  return detail_case() == kSeaLampData;
}
inline void GetActivityDataByMuipRsp::set_has_sea_lamp_data() {
  _oneof_case_[0] = kSeaLampData;
}
inline void GetActivityDataByMuipRsp::clear_sea_lamp_data() {
  if (has_sea_lamp_data()) {
    delete detail_.sea_lamp_data_;
    clear_has_detail();
  }
}
inline  const ::proto::SeaLampActivityDataMuip& GetActivityDataByMuipRsp::sea_lamp_data() const {
  // @@protoc_insertion_point(field_get:proto.GetActivityDataByMuipRsp.sea_lamp_data)
  return has_sea_lamp_data()
      ? *detail_.sea_lamp_data_
      : ::proto::SeaLampActivityDataMuip::default_instance();
}
inline ::proto::SeaLampActivityDataMuip* GetActivityDataByMuipRsp::mutable_sea_lamp_data() {
  if (!has_sea_lamp_data()) {
    clear_detail();
    set_has_sea_lamp_data();
    detail_.sea_lamp_data_ = new ::proto::SeaLampActivityDataMuip;
  }
  // @@protoc_insertion_point(field_mutable:proto.GetActivityDataByMuipRsp.sea_lamp_data)
  return detail_.sea_lamp_data_;
}
inline ::proto::SeaLampActivityDataMuip* GetActivityDataByMuipRsp::release_sea_lamp_data() {
  // @@protoc_insertion_point(field_release:proto.GetActivityDataByMuipRsp.sea_lamp_data)
  if (has_sea_lamp_data()) {
    clear_has_detail();
    ::proto::SeaLampActivityDataMuip* temp = detail_.sea_lamp_data_;
    detail_.sea_lamp_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GetActivityDataByMuipRsp::set_allocated_sea_lamp_data(::proto::SeaLampActivityDataMuip* sea_lamp_data) {
  clear_detail();
  if (sea_lamp_data) {
    set_has_sea_lamp_data();
    detail_.sea_lamp_data_ = sea_lamp_data;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GetActivityDataByMuipRsp.sea_lamp_data)
}

inline bool GetActivityDataByMuipRsp::has_detail() const {
  return detail_case() != DETAIL_NOT_SET;
}
inline void GetActivityDataByMuipRsp::clear_has_detail() {
  _oneof_case_[0] = DETAIL_NOT_SET;
}
inline GetActivityDataByMuipRsp::DetailCase GetActivityDataByMuipRsp::detail_case() const {
  return GetActivityDataByMuipRsp::DetailCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_5fonly_2fcmd_5factivity_2eserver_2eproto__INCLUDED
