// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_only/cmd_mp.server.proto

#ifndef PROTOBUF_server_5fonly_2fcmd_5fmp_2eserver_2eproto__INCLUDED
#define PROTOBUF_server_5fonly_2fcmd_5fmp_2eserver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "define.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
class DelMpStatusNotify;
class DelMpStatusNotifyDefaultTypeInternal;
extern DelMpStatusNotifyDefaultTypeInternal _DelMpStatusNotify_default_instance_;
class GetPlayerMpStatusInfoReq;
class GetPlayerMpStatusInfoReqDefaultTypeInternal;
extern GetPlayerMpStatusInfoReqDefaultTypeInternal _GetPlayerMpStatusInfoReq_default_instance_;
class GetPlayerMpStatusInfoRsp;
class GetPlayerMpStatusInfoRspDefaultTypeInternal;
extern GetPlayerMpStatusInfoRspDefaultTypeInternal _GetPlayerMpStatusInfoRsp_default_instance_;
class GetPlayerMpStatusListReq;
class GetPlayerMpStatusListReqDefaultTypeInternal;
extern GetPlayerMpStatusListReqDefaultTypeInternal _GetPlayerMpStatusListReq_default_instance_;
class GetPlayerMpStatusListRsp;
class GetPlayerMpStatusListRspDefaultTypeInternal;
extern GetPlayerMpStatusListRspDefaultTypeInternal _GetPlayerMpStatusListRsp_default_instance_;
class UpdateMpStatusNotify;
class UpdateMpStatusNotifyDefaultTypeInternal;
extern UpdateMpStatusNotifyDefaultTypeInternal _UpdateMpStatusNotify_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto

// ===================================================================

class UpdateMpStatusNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.UpdateMpStatusNotify) */ {
 public:
  UpdateMpStatusNotify();
  virtual ~UpdateMpStatusNotify();

  UpdateMpStatusNotify(const UpdateMpStatusNotify& from);

  inline UpdateMpStatusNotify& operator=(const UpdateMpStatusNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateMpStatusNotify(UpdateMpStatusNotify&& from) noexcept
    : UpdateMpStatusNotify() {
    *this = ::std::move(from);
  }

  inline UpdateMpStatusNotify& operator=(UpdateMpStatusNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateMpStatusNotify& default_instance();

  static inline const UpdateMpStatusNotify* internal_default_instance() {
    return reinterpret_cast<const UpdateMpStatusNotify*>(
               &_UpdateMpStatusNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(UpdateMpStatusNotify* other);
  friend void swap(UpdateMpStatusNotify& a, UpdateMpStatusNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateMpStatusNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateMpStatusNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateMpStatusNotify& from);
  void MergeFrom(const UpdateMpStatusNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateMpStatusNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.OnlinePlayerInfo online_player_info = 4;
  bool has_online_player_info() const;
  void clear_online_player_info();
  static const int kOnlinePlayerInfoFieldNumber = 4;
  const ::proto::OnlinePlayerInfo& online_player_info() const;
  ::proto::OnlinePlayerInfo* mutable_online_player_info();
  ::proto::OnlinePlayerInfo* release_online_player_info();
  void set_allocated_online_player_info(::proto::OnlinePlayerInfo* online_player_info);

  // uint32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // bool is_only_mp_with_ps_player = 2;
  void clear_is_only_mp_with_ps_player();
  static const int kIsOnlyMpWithPsPlayerFieldNumber = 2;
  bool is_only_mp_with_ps_player() const;
  void set_is_only_mp_with_ps_player(bool value);

  // .proto.PlatformType platform_type = 3;
  void clear_platform_type();
  static const int kPlatformTypeFieldNumber = 3;
  ::proto::PlatformType platform_type() const;
  void set_platform_type(::proto::PlatformType value);

  // @@protoc_insertion_point(class_scope:proto.UpdateMpStatusNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::OnlinePlayerInfo* online_player_info_;
  ::google::protobuf::uint32 uid_;
  bool is_only_mp_with_ps_player_;
  int platform_type_;
  mutable int _cached_size_;
  friend struct protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DelMpStatusNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DelMpStatusNotify) */ {
 public:
  DelMpStatusNotify();
  virtual ~DelMpStatusNotify();

  DelMpStatusNotify(const DelMpStatusNotify& from);

  inline DelMpStatusNotify& operator=(const DelMpStatusNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DelMpStatusNotify(DelMpStatusNotify&& from) noexcept
    : DelMpStatusNotify() {
    *this = ::std::move(from);
  }

  inline DelMpStatusNotify& operator=(DelMpStatusNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DelMpStatusNotify& default_instance();

  static inline const DelMpStatusNotify* internal_default_instance() {
    return reinterpret_cast<const DelMpStatusNotify*>(
               &_DelMpStatusNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DelMpStatusNotify* other);
  friend void swap(DelMpStatusNotify& a, DelMpStatusNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DelMpStatusNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  DelMpStatusNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DelMpStatusNotify& from);
  void MergeFrom(const DelMpStatusNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DelMpStatusNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DelMpStatusNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 uid_;
  mutable int _cached_size_;
  friend struct protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPlayerMpStatusListReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetPlayerMpStatusListReq) */ {
 public:
  GetPlayerMpStatusListReq();
  virtual ~GetPlayerMpStatusListReq();

  GetPlayerMpStatusListReq(const GetPlayerMpStatusListReq& from);

  inline GetPlayerMpStatusListReq& operator=(const GetPlayerMpStatusListReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPlayerMpStatusListReq(GetPlayerMpStatusListReq&& from) noexcept
    : GetPlayerMpStatusListReq() {
    *this = ::std::move(from);
  }

  inline GetPlayerMpStatusListReq& operator=(GetPlayerMpStatusListReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPlayerMpStatusListReq& default_instance();

  static inline const GetPlayerMpStatusListReq* internal_default_instance() {
    return reinterpret_cast<const GetPlayerMpStatusListReq*>(
               &_GetPlayerMpStatusListReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GetPlayerMpStatusListReq* other);
  friend void swap(GetPlayerMpStatusListReq& a, GetPlayerMpStatusListReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPlayerMpStatusListReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPlayerMpStatusListReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPlayerMpStatusListReq& from);
  void MergeFrom(const GetPlayerMpStatusListReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPlayerMpStatusListReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.GetPlayerMpStatusListReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPlayerMpStatusListRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetPlayerMpStatusListRsp) */ {
 public:
  GetPlayerMpStatusListRsp();
  virtual ~GetPlayerMpStatusListRsp();

  GetPlayerMpStatusListRsp(const GetPlayerMpStatusListRsp& from);

  inline GetPlayerMpStatusListRsp& operator=(const GetPlayerMpStatusListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPlayerMpStatusListRsp(GetPlayerMpStatusListRsp&& from) noexcept
    : GetPlayerMpStatusListRsp() {
    *this = ::std::move(from);
  }

  inline GetPlayerMpStatusListRsp& operator=(GetPlayerMpStatusListRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPlayerMpStatusListRsp& default_instance();

  static inline const GetPlayerMpStatusListRsp* internal_default_instance() {
    return reinterpret_cast<const GetPlayerMpStatusListRsp*>(
               &_GetPlayerMpStatusListRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(GetPlayerMpStatusListRsp* other);
  friend void swap(GetPlayerMpStatusListRsp& a, GetPlayerMpStatusListRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPlayerMpStatusListRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPlayerMpStatusListRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPlayerMpStatusListRsp& from);
  void MergeFrom(const GetPlayerMpStatusListRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPlayerMpStatusListRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.OnlinePlayerInfo player_list = 2;
  int player_list_size() const;
  void clear_player_list();
  static const int kPlayerListFieldNumber = 2;
  const ::proto::OnlinePlayerInfo& player_list(int index) const;
  ::proto::OnlinePlayerInfo* mutable_player_list(int index);
  ::proto::OnlinePlayerInfo* add_player_list();
  ::google::protobuf::RepeatedPtrField< ::proto::OnlinePlayerInfo >*
      mutable_player_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::OnlinePlayerInfo >&
      player_list() const;

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.GetPlayerMpStatusListRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::OnlinePlayerInfo > player_list_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPlayerMpStatusInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetPlayerMpStatusInfoReq) */ {
 public:
  GetPlayerMpStatusInfoReq();
  virtual ~GetPlayerMpStatusInfoReq();

  GetPlayerMpStatusInfoReq(const GetPlayerMpStatusInfoReq& from);

  inline GetPlayerMpStatusInfoReq& operator=(const GetPlayerMpStatusInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPlayerMpStatusInfoReq(GetPlayerMpStatusInfoReq&& from) noexcept
    : GetPlayerMpStatusInfoReq() {
    *this = ::std::move(from);
  }

  inline GetPlayerMpStatusInfoReq& operator=(GetPlayerMpStatusInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPlayerMpStatusInfoReq& default_instance();

  enum PlayerIdCase {
    kTargetUid = 2,
    kOnlineId = 3,
    kPsnId = 4,
    PLAYER_ID_NOT_SET = 0,
  };

  static inline const GetPlayerMpStatusInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetPlayerMpStatusInfoReq*>(
               &_GetPlayerMpStatusInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(GetPlayerMpStatusInfoReq* other);
  friend void swap(GetPlayerMpStatusInfoReq& a, GetPlayerMpStatusInfoReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPlayerMpStatusInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPlayerMpStatusInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPlayerMpStatusInfoReq& from);
  void MergeFrom(const GetPlayerMpStatusInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPlayerMpStatusInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_online_id = 1;
  void clear_is_online_id();
  static const int kIsOnlineIdFieldNumber = 1;
  bool is_online_id() const;
  void set_is_online_id(bool value);

  // uint32 target_uid = 2;
  private:
  bool has_target_uid() const;
  public:
  void clear_target_uid();
  static const int kTargetUidFieldNumber = 2;
  ::google::protobuf::uint32 target_uid() const;
  void set_target_uid(::google::protobuf::uint32 value);

  // string online_id = 3;
  private:
  bool has_online_id() const;
  public:
  void clear_online_id();
  static const int kOnlineIdFieldNumber = 3;
  const ::std::string& online_id() const;
  void set_online_id(const ::std::string& value);
  #if LANG_CXX11
  void set_online_id(::std::string&& value);
  #endif
  void set_online_id(const char* value);
  void set_online_id(const char* value, size_t size);
  ::std::string* mutable_online_id();
  ::std::string* release_online_id();
  void set_allocated_online_id(::std::string* online_id);

  // string psn_id = 4;
  private:
  bool has_psn_id() const;
  public:
  void clear_psn_id();
  static const int kPsnIdFieldNumber = 4;
  const ::std::string& psn_id() const;
  void set_psn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_psn_id(::std::string&& value);
  #endif
  void set_psn_id(const char* value);
  void set_psn_id(const char* value, size_t size);
  ::std::string* mutable_psn_id();
  ::std::string* release_psn_id();
  void set_allocated_psn_id(::std::string* psn_id);

  PlayerIdCase player_id_case() const;
  // @@protoc_insertion_point(class_scope:proto.GetPlayerMpStatusInfoReq)
 private:
  void set_has_target_uid();
  void set_has_online_id();
  void set_has_psn_id();

  inline bool has_player_id() const;
  void clear_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_online_id_;
  union PlayerIdUnion {
    PlayerIdUnion() {}
    ::google::protobuf::uint32 target_uid_;
    ::google::protobuf::internal::ArenaStringPtr online_id_;
    ::google::protobuf::internal::ArenaStringPtr psn_id_;
  } player_id_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPlayerMpStatusInfoRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetPlayerMpStatusInfoRsp) */ {
 public:
  GetPlayerMpStatusInfoRsp();
  virtual ~GetPlayerMpStatusInfoRsp();

  GetPlayerMpStatusInfoRsp(const GetPlayerMpStatusInfoRsp& from);

  inline GetPlayerMpStatusInfoRsp& operator=(const GetPlayerMpStatusInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPlayerMpStatusInfoRsp(GetPlayerMpStatusInfoRsp&& from) noexcept
    : GetPlayerMpStatusInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetPlayerMpStatusInfoRsp& operator=(GetPlayerMpStatusInfoRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPlayerMpStatusInfoRsp& default_instance();

  static inline const GetPlayerMpStatusInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetPlayerMpStatusInfoRsp*>(
               &_GetPlayerMpStatusInfoRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(GetPlayerMpStatusInfoRsp* other);
  friend void swap(GetPlayerMpStatusInfoRsp& a, GetPlayerMpStatusInfoRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPlayerMpStatusInfoRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPlayerMpStatusInfoRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPlayerMpStatusInfoRsp& from);
  void MergeFrom(const GetPlayerMpStatusInfoRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPlayerMpStatusInfoRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.OnlinePlayerInfo target_player_info = 3;
  bool has_target_player_info() const;
  void clear_target_player_info();
  static const int kTargetPlayerInfoFieldNumber = 3;
  const ::proto::OnlinePlayerInfo& target_player_info() const;
  ::proto::OnlinePlayerInfo* mutable_target_player_info();
  ::proto::OnlinePlayerInfo* release_target_player_info();
  void set_allocated_target_player_info(::proto::OnlinePlayerInfo* target_player_info);

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 target_uid = 2;
  void clear_target_uid();
  static const int kTargetUidFieldNumber = 2;
  ::google::protobuf::uint32 target_uid() const;
  void set_target_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GetPlayerMpStatusInfoRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::OnlinePlayerInfo* target_player_info_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 target_uid_;
  mutable int _cached_size_;
  friend struct protobuf_server_5fonly_2fcmd_5fmp_2eserver_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UpdateMpStatusNotify

// uint32 uid = 1;
inline void UpdateMpStatusNotify::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 UpdateMpStatusNotify::uid() const {
  // @@protoc_insertion_point(field_get:proto.UpdateMpStatusNotify.uid)
  return uid_;
}
inline void UpdateMpStatusNotify::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.UpdateMpStatusNotify.uid)
}

// bool is_only_mp_with_ps_player = 2;
inline void UpdateMpStatusNotify::clear_is_only_mp_with_ps_player() {
  is_only_mp_with_ps_player_ = false;
}
inline bool UpdateMpStatusNotify::is_only_mp_with_ps_player() const {
  // @@protoc_insertion_point(field_get:proto.UpdateMpStatusNotify.is_only_mp_with_ps_player)
  return is_only_mp_with_ps_player_;
}
inline void UpdateMpStatusNotify::set_is_only_mp_with_ps_player(bool value) {
  
  is_only_mp_with_ps_player_ = value;
  // @@protoc_insertion_point(field_set:proto.UpdateMpStatusNotify.is_only_mp_with_ps_player)
}

// .proto.PlatformType platform_type = 3;
inline void UpdateMpStatusNotify::clear_platform_type() {
  platform_type_ = 0;
}
inline ::proto::PlatformType UpdateMpStatusNotify::platform_type() const {
  // @@protoc_insertion_point(field_get:proto.UpdateMpStatusNotify.platform_type)
  return static_cast< ::proto::PlatformType >(platform_type_);
}
inline void UpdateMpStatusNotify::set_platform_type(::proto::PlatformType value) {
  
  platform_type_ = value;
  // @@protoc_insertion_point(field_set:proto.UpdateMpStatusNotify.platform_type)
}

// .proto.OnlinePlayerInfo online_player_info = 4;
inline bool UpdateMpStatusNotify::has_online_player_info() const {
  return this != internal_default_instance() && online_player_info_ != NULL;
}
inline void UpdateMpStatusNotify::clear_online_player_info() {
  if (GetArenaNoVirtual() == NULL && online_player_info_ != NULL) delete online_player_info_;
  online_player_info_ = NULL;
}
inline const ::proto::OnlinePlayerInfo& UpdateMpStatusNotify::online_player_info() const {
  const ::proto::OnlinePlayerInfo* p = online_player_info_;
  // @@protoc_insertion_point(field_get:proto.UpdateMpStatusNotify.online_player_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::OnlinePlayerInfo*>(
      &::proto::_OnlinePlayerInfo_default_instance_);
}
inline ::proto::OnlinePlayerInfo* UpdateMpStatusNotify::mutable_online_player_info() {
  
  if (online_player_info_ == NULL) {
    online_player_info_ = new ::proto::OnlinePlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.UpdateMpStatusNotify.online_player_info)
  return online_player_info_;
}
inline ::proto::OnlinePlayerInfo* UpdateMpStatusNotify::release_online_player_info() {
  // @@protoc_insertion_point(field_release:proto.UpdateMpStatusNotify.online_player_info)
  
  ::proto::OnlinePlayerInfo* temp = online_player_info_;
  online_player_info_ = NULL;
  return temp;
}
inline void UpdateMpStatusNotify::set_allocated_online_player_info(::proto::OnlinePlayerInfo* online_player_info) {
  delete online_player_info_;
  online_player_info_ = online_player_info;
  if (online_player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateMpStatusNotify.online_player_info)
}

// -------------------------------------------------------------------

// DelMpStatusNotify

// uint32 uid = 1;
inline void DelMpStatusNotify::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 DelMpStatusNotify::uid() const {
  // @@protoc_insertion_point(field_get:proto.DelMpStatusNotify.uid)
  return uid_;
}
inline void DelMpStatusNotify::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DelMpStatusNotify.uid)
}

// -------------------------------------------------------------------

// GetPlayerMpStatusListReq

// -------------------------------------------------------------------

// GetPlayerMpStatusListRsp

// int32 retcode = 1;
inline void GetPlayerMpStatusListRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GetPlayerMpStatusListRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetPlayerMpStatusListRsp.retcode)
  return retcode_;
}
inline void GetPlayerMpStatusListRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpStatusListRsp.retcode)
}

// repeated .proto.OnlinePlayerInfo player_list = 2;
inline int GetPlayerMpStatusListRsp::player_list_size() const {
  return player_list_.size();
}
inline void GetPlayerMpStatusListRsp::clear_player_list() {
  player_list_.Clear();
}
inline const ::proto::OnlinePlayerInfo& GetPlayerMpStatusListRsp::player_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetPlayerMpStatusListRsp.player_list)
  return player_list_.Get(index);
}
inline ::proto::OnlinePlayerInfo* GetPlayerMpStatusListRsp::mutable_player_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetPlayerMpStatusListRsp.player_list)
  return player_list_.Mutable(index);
}
inline ::proto::OnlinePlayerInfo* GetPlayerMpStatusListRsp::add_player_list() {
  // @@protoc_insertion_point(field_add:proto.GetPlayerMpStatusListRsp.player_list)
  return player_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::OnlinePlayerInfo >*
GetPlayerMpStatusListRsp::mutable_player_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetPlayerMpStatusListRsp.player_list)
  return &player_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::OnlinePlayerInfo >&
GetPlayerMpStatusListRsp::player_list() const {
  // @@protoc_insertion_point(field_list:proto.GetPlayerMpStatusListRsp.player_list)
  return player_list_;
}

// -------------------------------------------------------------------

// GetPlayerMpStatusInfoReq

// bool is_online_id = 1;
inline void GetPlayerMpStatusInfoReq::clear_is_online_id() {
  is_online_id_ = false;
}
inline bool GetPlayerMpStatusInfoReq::is_online_id() const {
  // @@protoc_insertion_point(field_get:proto.GetPlayerMpStatusInfoReq.is_online_id)
  return is_online_id_;
}
inline void GetPlayerMpStatusInfoReq::set_is_online_id(bool value) {
  
  is_online_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpStatusInfoReq.is_online_id)
}

// uint32 target_uid = 2;
inline bool GetPlayerMpStatusInfoReq::has_target_uid() const {
  return player_id_case() == kTargetUid;
}
inline void GetPlayerMpStatusInfoReq::set_has_target_uid() {
  _oneof_case_[0] = kTargetUid;
}
inline void GetPlayerMpStatusInfoReq::clear_target_uid() {
  if (has_target_uid()) {
    player_id_.target_uid_ = 0u;
    clear_has_player_id();
  }
}
inline ::google::protobuf::uint32 GetPlayerMpStatusInfoReq::target_uid() const {
  // @@protoc_insertion_point(field_get:proto.GetPlayerMpStatusInfoReq.target_uid)
  if (has_target_uid()) {
    return player_id_.target_uid_;
  }
  return 0u;
}
inline void GetPlayerMpStatusInfoReq::set_target_uid(::google::protobuf::uint32 value) {
  if (!has_target_uid()) {
    clear_player_id();
    set_has_target_uid();
  }
  player_id_.target_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpStatusInfoReq.target_uid)
}

// string online_id = 3;
inline bool GetPlayerMpStatusInfoReq::has_online_id() const {
  return player_id_case() == kOnlineId;
}
inline void GetPlayerMpStatusInfoReq::set_has_online_id() {
  _oneof_case_[0] = kOnlineId;
}
inline void GetPlayerMpStatusInfoReq::clear_online_id() {
  if (has_online_id()) {
    player_id_.online_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_player_id();
  }
}
inline const ::std::string& GetPlayerMpStatusInfoReq::online_id() const {
  // @@protoc_insertion_point(field_get:proto.GetPlayerMpStatusInfoReq.online_id)
  if (has_online_id()) {
    return player_id_.online_id_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void GetPlayerMpStatusInfoReq::set_online_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpStatusInfoReq.online_id)
  if (!has_online_id()) {
    clear_player_id();
    set_has_online_id();
    player_id_.online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpStatusInfoReq.online_id)
}
#if LANG_CXX11
inline void GetPlayerMpStatusInfoReq::set_online_id(::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpStatusInfoReq.online_id)
  if (!has_online_id()) {
    clear_player_id();
    set_has_online_id();
    player_id_.online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.online_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GetPlayerMpStatusInfoReq.online_id)
}
#endif
inline void GetPlayerMpStatusInfoReq::set_online_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_online_id()) {
    clear_player_id();
    set_has_online_id();
    player_id_.online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GetPlayerMpStatusInfoReq.online_id)
}
inline void GetPlayerMpStatusInfoReq::set_online_id(const char* value, size_t size) {
  if (!has_online_id()) {
    clear_player_id();
    set_has_online_id();
    player_id_.online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GetPlayerMpStatusInfoReq.online_id)
}
inline ::std::string* GetPlayerMpStatusInfoReq::mutable_online_id() {
  if (!has_online_id()) {
    clear_player_id();
    set_has_online_id();
    player_id_.online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:proto.GetPlayerMpStatusInfoReq.online_id)
  return player_id_.online_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPlayerMpStatusInfoReq::release_online_id() {
  // @@protoc_insertion_point(field_release:proto.GetPlayerMpStatusInfoReq.online_id)
  if (has_online_id()) {
    clear_has_player_id();
    return player_id_.online_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void GetPlayerMpStatusInfoReq::set_allocated_online_id(::std::string* online_id) {
  if (!has_online_id()) {
    player_id_.online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_player_id();
  if (online_id != NULL) {
    set_has_online_id();
    player_id_.online_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        online_id);
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GetPlayerMpStatusInfoReq.online_id)
}

// string psn_id = 4;
inline bool GetPlayerMpStatusInfoReq::has_psn_id() const {
  return player_id_case() == kPsnId;
}
inline void GetPlayerMpStatusInfoReq::set_has_psn_id() {
  _oneof_case_[0] = kPsnId;
}
inline void GetPlayerMpStatusInfoReq::clear_psn_id() {
  if (has_psn_id()) {
    player_id_.psn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_player_id();
  }
}
inline const ::std::string& GetPlayerMpStatusInfoReq::psn_id() const {
  // @@protoc_insertion_point(field_get:proto.GetPlayerMpStatusInfoReq.psn_id)
  if (has_psn_id()) {
    return player_id_.psn_id_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void GetPlayerMpStatusInfoReq::set_psn_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpStatusInfoReq.psn_id)
  if (!has_psn_id()) {
    clear_player_id();
    set_has_psn_id();
    player_id_.psn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.psn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpStatusInfoReq.psn_id)
}
#if LANG_CXX11
inline void GetPlayerMpStatusInfoReq::set_psn_id(::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpStatusInfoReq.psn_id)
  if (!has_psn_id()) {
    clear_player_id();
    set_has_psn_id();
    player_id_.psn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.psn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GetPlayerMpStatusInfoReq.psn_id)
}
#endif
inline void GetPlayerMpStatusInfoReq::set_psn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_psn_id()) {
    clear_player_id();
    set_has_psn_id();
    player_id_.psn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.psn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GetPlayerMpStatusInfoReq.psn_id)
}
inline void GetPlayerMpStatusInfoReq::set_psn_id(const char* value, size_t size) {
  if (!has_psn_id()) {
    clear_player_id();
    set_has_psn_id();
    player_id_.psn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.psn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GetPlayerMpStatusInfoReq.psn_id)
}
inline ::std::string* GetPlayerMpStatusInfoReq::mutable_psn_id() {
  if (!has_psn_id()) {
    clear_player_id();
    set_has_psn_id();
    player_id_.psn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:proto.GetPlayerMpStatusInfoReq.psn_id)
  return player_id_.psn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPlayerMpStatusInfoReq::release_psn_id() {
  // @@protoc_insertion_point(field_release:proto.GetPlayerMpStatusInfoReq.psn_id)
  if (has_psn_id()) {
    clear_has_player_id();
    return player_id_.psn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void GetPlayerMpStatusInfoReq::set_allocated_psn_id(::std::string* psn_id) {
  if (!has_psn_id()) {
    player_id_.psn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_player_id();
  if (psn_id != NULL) {
    set_has_psn_id();
    player_id_.psn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        psn_id);
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GetPlayerMpStatusInfoReq.psn_id)
}

inline bool GetPlayerMpStatusInfoReq::has_player_id() const {
  return player_id_case() != PLAYER_ID_NOT_SET;
}
inline void GetPlayerMpStatusInfoReq::clear_has_player_id() {
  _oneof_case_[0] = PLAYER_ID_NOT_SET;
}
inline GetPlayerMpStatusInfoReq::PlayerIdCase GetPlayerMpStatusInfoReq::player_id_case() const {
  return GetPlayerMpStatusInfoReq::PlayerIdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetPlayerMpStatusInfoRsp

// int32 retcode = 1;
inline void GetPlayerMpStatusInfoRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GetPlayerMpStatusInfoRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetPlayerMpStatusInfoRsp.retcode)
  return retcode_;
}
inline void GetPlayerMpStatusInfoRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpStatusInfoRsp.retcode)
}

// uint32 target_uid = 2;
inline void GetPlayerMpStatusInfoRsp::clear_target_uid() {
  target_uid_ = 0u;
}
inline ::google::protobuf::uint32 GetPlayerMpStatusInfoRsp::target_uid() const {
  // @@protoc_insertion_point(field_get:proto.GetPlayerMpStatusInfoRsp.target_uid)
  return target_uid_;
}
inline void GetPlayerMpStatusInfoRsp::set_target_uid(::google::protobuf::uint32 value) {
  
  target_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpStatusInfoRsp.target_uid)
}

// .proto.OnlinePlayerInfo target_player_info = 3;
inline bool GetPlayerMpStatusInfoRsp::has_target_player_info() const {
  return this != internal_default_instance() && target_player_info_ != NULL;
}
inline void GetPlayerMpStatusInfoRsp::clear_target_player_info() {
  if (GetArenaNoVirtual() == NULL && target_player_info_ != NULL) delete target_player_info_;
  target_player_info_ = NULL;
}
inline const ::proto::OnlinePlayerInfo& GetPlayerMpStatusInfoRsp::target_player_info() const {
  const ::proto::OnlinePlayerInfo* p = target_player_info_;
  // @@protoc_insertion_point(field_get:proto.GetPlayerMpStatusInfoRsp.target_player_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::OnlinePlayerInfo*>(
      &::proto::_OnlinePlayerInfo_default_instance_);
}
inline ::proto::OnlinePlayerInfo* GetPlayerMpStatusInfoRsp::mutable_target_player_info() {
  
  if (target_player_info_ == NULL) {
    target_player_info_ = new ::proto::OnlinePlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.GetPlayerMpStatusInfoRsp.target_player_info)
  return target_player_info_;
}
inline ::proto::OnlinePlayerInfo* GetPlayerMpStatusInfoRsp::release_target_player_info() {
  // @@protoc_insertion_point(field_release:proto.GetPlayerMpStatusInfoRsp.target_player_info)
  
  ::proto::OnlinePlayerInfo* temp = target_player_info_;
  target_player_info_ = NULL;
  return temp;
}
inline void GetPlayerMpStatusInfoRsp::set_allocated_target_player_info(::proto::OnlinePlayerInfo* target_player_info) {
  delete target_player_info_;
  target_player_info_ = target_player_info;
  if (target_player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GetPlayerMpStatusInfoRsp.target_player_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_5fonly_2fcmd_5fmp_2eserver_2eproto__INCLUDED
