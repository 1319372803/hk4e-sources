// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_only/cmd_gcg.server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server_only/cmd_gcg.server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
class ServerGCGVerifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGVerify>
     _instance;
} _ServerGCGVerify_default_instance_;
class ServerGCGOperationReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGOperationReq>
     _instance;
} _ServerGCGOperationReq_default_instance_;
class ServerGCGOperationRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGOperationRsp>
     _instance;
} _ServerGCGOperationRsp_default_instance_;
class ServerGCGAskDuelReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGAskDuelReq>
     _instance;
} _ServerGCGAskDuelReq_default_instance_;
class ServerGCGNewGameInfoNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGNewGameInfoNotify>
     _instance;
} _ServerGCGNewGameInfoNotify_default_instance_;
class ServerGCGGMCommandReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGGMCommandReq>
     _instance;
} _ServerGCGGMCommandReq_default_instance_;
class ServerGCGGMCommandRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGGMCommandRsp>
     _instance;
} _ServerGCGGMCommandRsp_default_instance_;
class ServerGCGInitFinishReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGInitFinishReq>
     _instance;
} _ServerGCGInitFinishReq_default_instance_;
class ServerGCGSyncReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGSyncReq>
     _instance;
} _ServerGCGSyncReq_default_instance_;
class ServerGCGSyncRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGSyncRsp>
     _instance;
} _ServerGCGSyncRsp_default_instance_;
class GCGPlayerDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGPlayerData>
     _instance;
} _GCGPlayerData_default_instance_;
class ServerGCGCreateSingleGameReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGCreateSingleGameReq>
     _instance;
} _ServerGCGCreateSingleGameReq_default_instance_;
class ServerGCGCreateSingleGameRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGCreateSingleGameRsp>
     _instance;
} _ServerGCGCreateSingleGameRsp_default_instance_;
class ServerGCGGiveUpGameReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGGiveUpGameReq>
     _instance;
} _ServerGCGGiveUpGameReq_default_instance_;
class ServerGCGGiveUpGameRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGGiveUpGameRsp>
     _instance;
} _ServerGCGGiveUpGameRsp_default_instance_;
class ServerGCGSkillPreviewAskReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGSkillPreviewAskReq>
     _instance;
} _ServerGCGSkillPreviewAskReq_default_instance_;
class ServerGCGSkillPreviewAskRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGSkillPreviewAskRsp>
     _instance;
} _ServerGCGSkillPreviewAskRsp_default_instance_;
class ServerGCGCreateMultiGameReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGCreateMultiGameReq>
     _instance;
} _ServerGCGCreateMultiGameReq_default_instance_;
class ServerGCGCreateMultiGameRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGCreateMultiGameRsp>
     _instance;
} _ServerGCGCreateMultiGameRsp_default_instance_;
class ServerGCGAddBothAITaskReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGAddBothAITaskReq>
     _instance;
} _ServerGCGAddBothAITaskReq_default_instance_;
class ServerGCGAddBothAITaskRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGAddBothAITaskRsp>
     _instance;
} _ServerGCGAddBothAITaskRsp_default_instance_;
class GCGMatchPlayerInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMatchPlayerInfo>
     _instance;
} _GCGMatchPlayerInfo_default_instance_;
class ServerGCGCreateMatchGameNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGCreateMatchGameNotify>
     _instance;
} _ServerGCGCreateMatchGameNotify_default_instance_;
class ServerGCGCreateMatchAIGameNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGCreateMatchAIGameNotify>
     _instance;
} _ServerGCGCreateMatchAIGameNotify_default_instance_;
class ServerGCGMatchFinishNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGMatchFinishNotify>
     _instance;
} _ServerGCGMatchFinishNotify_default_instance_;
class ServerGCGBackToDuelReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGBackToDuelReq>
     _instance;
} _ServerGCGBackToDuelReq_default_instance_;
class ServerGCGBackToDuelRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGBackToDuelRsp>
     _instance;
} _ServerGCGBackToDuelRsp_default_instance_;
class ServerGCGMessagePackNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGMessagePackNotify>
     _instance;
} _ServerGCGMessagePackNotify_default_instance_;
class ServerGCGHeartBeatNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGHeartBeatNotify>
     _instance;
} _ServerGCGHeartBeatNotify_default_instance_;
class ServerGCGSkillPreviewNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGSkillPreviewNotify>
     _instance;
} _ServerGCGSkillPreviewNotify_default_instance_;
class ServerGCGChallengeUpdateNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerGCGChallengeUpdateNotify>
     _instance;
} _ServerGCGChallengeUpdateNotify_default_instance_;

namespace protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[31];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGVerify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGVerify, game_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGVerify, verify_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGVerify, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGVerify, thread_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGOperationReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGOperationReq, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGOperationReq, op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGOperationReq, op_seq_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGOperationRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGOperationRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGOperationRsp, op_seq_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGAskDuelReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGAskDuelReq, uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGNewGameInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGNewGameInfoNotify, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGNewGameInfoNotify, thread_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGNewGameInfoNotify, game_brief_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGNewGameInfoNotify, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGNewGameInfoNotify, try_create_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGGMCommandReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGGMCommandReq, msg_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGGMCommandRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGGMCommandRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGGMCommandRsp, ret_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGGMCommandRsp, ret_extra_content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGInitFinishReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGInitFinishReq, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGSyncReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGSyncReq, game_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGSyncReq, verify_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGSyncReq, is_login_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGSyncRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGSyncRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGSyncRsp, game_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGSyncRsp, verify_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGSyncRsp, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGSyncRsp, thread_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGSyncRsp, is_login_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerData, player_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerData, duel_extra_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateSingleGameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateSingleGameReq, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateSingleGameReq, business_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateSingleGameReq, player_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateSingleGameReq, custom_param_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateSingleGameReq, try_create_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateSingleGameRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateSingleGameRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateSingleGameRsp, game_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGGiveUpGameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGGiveUpGameReq, game_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGGiveUpGameReq, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGGiveUpGameReq, verify_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGGiveUpGameReq, business_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGGiveUpGameRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGGiveUpGameRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGGiveUpGameRsp, game_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGGiveUpGameRsp, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGGiveUpGameRsp, verify_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGGiveUpGameRsp, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGGiveUpGameRsp, thread_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGSkillPreviewAskReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGSkillPreviewAskReq, uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGSkillPreviewAskRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGSkillPreviewAskRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateMultiGameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateMultiGameReq, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateMultiGameReq, business_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateMultiGameReq, player_data_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateMultiGameReq, player_data_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateMultiGameReq, try_create_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateMultiGameRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateMultiGameRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateMultiGameRsp, game_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGAddBothAITaskReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGAddBothAITaskReq, task_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGAddBothAITaskReq, subtask_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGAddBothAITaskReq, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGAddBothAITaskReq, level_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGAddBothAITaskReq, card_group1_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGAddBothAITaskReq, card_group2_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGAddBothAITaskRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGAddBothAITaskRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGAddBothAITaskRsp, task_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGAddBothAITaskRsp, subtask_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMatchPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMatchPlayerInfo, match_player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMatchPlayerInfo, gcg_duel_extra_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateMatchGameNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateMatchGameNotify, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateMatchGameNotify, gcg_match_player_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateMatchGameNotify, try_create_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateMatchAIGameNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateMatchAIGameNotify, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateMatchAIGameNotify, gcg_match_player_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateMatchAIGameNotify, ai_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGCreateMatchAIGameNotify, try_create_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGMatchFinishNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGBackToDuelReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGBackToDuelReq, game_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGBackToDuelReq, verify_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGBackToDuelReq, client_data_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGBackToDuelRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGBackToDuelRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGBackToDuelRsp, game_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGBackToDuelRsp, verify_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGBackToDuelRsp, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGBackToDuelRsp, thread_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGBackToDuelRsp, client_data_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGMessagePackNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGMessagePackNotify, verify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGMessagePackNotify, server_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGMessagePackNotify, msg_pack_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGHeartBeatNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGHeartBeatNotify, verify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGHeartBeatNotify, server_seq_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGSkillPreviewNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGSkillPreviewNotify, verify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGSkillPreviewNotify, controller_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGSkillPreviewNotify, onstage_card_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGSkillPreviewNotify, skill_preview_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGSkillPreviewNotify, change_onstage_preview_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGSkillPreviewNotify, play_card_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGChallengeUpdateNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGChallengeUpdateNotify, verify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGChallengeUpdateNotify, server_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGCGChallengeUpdateNotify, challenge_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(ServerGCGVerify)},
  { 9, -1, sizeof(ServerGCGOperationReq)},
  { 17, -1, sizeof(ServerGCGOperationRsp)},
  { 24, -1, sizeof(ServerGCGAskDuelReq)},
  { 30, -1, sizeof(ServerGCGNewGameInfoNotify)},
  { 40, -1, sizeof(ServerGCGGMCommandReq)},
  { 46, -1, sizeof(ServerGCGGMCommandRsp)},
  { 54, -1, sizeof(ServerGCGInitFinishReq)},
  { 60, -1, sizeof(ServerGCGSyncReq)},
  { 68, -1, sizeof(ServerGCGSyncRsp)},
  { 79, -1, sizeof(GCGPlayerData)},
  { 86, -1, sizeof(ServerGCGCreateSingleGameReq)},
  { 96, -1, sizeof(ServerGCGCreateSingleGameRsp)},
  { 103, -1, sizeof(ServerGCGGiveUpGameReq)},
  { 112, -1, sizeof(ServerGCGGiveUpGameRsp)},
  { 123, -1, sizeof(ServerGCGSkillPreviewAskReq)},
  { 129, -1, sizeof(ServerGCGSkillPreviewAskRsp)},
  { 135, -1, sizeof(ServerGCGCreateMultiGameReq)},
  { 145, -1, sizeof(ServerGCGCreateMultiGameRsp)},
  { 152, -1, sizeof(ServerGCGAddBothAITaskReq)},
  { 163, -1, sizeof(ServerGCGAddBothAITaskRsp)},
  { 171, -1, sizeof(GCGMatchPlayerInfo)},
  { 178, -1, sizeof(ServerGCGCreateMatchGameNotify)},
  { 186, -1, sizeof(ServerGCGCreateMatchAIGameNotify)},
  { 195, -1, sizeof(ServerGCGMatchFinishNotify)},
  { 200, -1, sizeof(ServerGCGBackToDuelReq)},
  { 208, -1, sizeof(ServerGCGBackToDuelRsp)},
  { 219, -1, sizeof(ServerGCGMessagePackNotify)},
  { 227, -1, sizeof(ServerGCGHeartBeatNotify)},
  { 234, -1, sizeof(ServerGCGSkillPreviewNotify)},
  { 245, -1, sizeof(ServerGCGChallengeUpdateNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGVerify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGOperationReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGOperationRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGAskDuelReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGNewGameInfoNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGGMCommandReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGGMCommandRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGInitFinishReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGSyncReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGSyncRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGPlayerData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGCreateSingleGameReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGCreateSingleGameRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGGiveUpGameReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGGiveUpGameRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGSkillPreviewAskReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGSkillPreviewAskRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGCreateMultiGameReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGCreateMultiGameRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGAddBothAITaskReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGAddBothAITaskRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMatchPlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGCreateMatchGameNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGCreateMatchAIGameNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGMatchFinishNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGBackToDuelReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGBackToDuelRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGMessagePackNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGHeartBeatNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGSkillPreviewNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerGCGChallengeUpdateNotify_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "server_only/cmd_gcg.server.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 31);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::protobuf_define_2eproto::InitDefaults();
  ::proto::protobuf_cmd_2fcmd_5fgcg_5fcommon_2eproto::InitDefaults();
  ::proto::protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  ::proto::protobuf_server_5fonly_2fcmd_5fmatch_2eserver_2eproto::InitDefaults();
  _ServerGCGVerify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGVerify_default_instance_);_ServerGCGOperationReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGOperationReq_default_instance_);_ServerGCGOperationRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGOperationRsp_default_instance_);_ServerGCGAskDuelReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGAskDuelReq_default_instance_);_ServerGCGNewGameInfoNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGNewGameInfoNotify_default_instance_);_ServerGCGGMCommandReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGGMCommandReq_default_instance_);_ServerGCGGMCommandRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGGMCommandRsp_default_instance_);_ServerGCGInitFinishReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGInitFinishReq_default_instance_);_ServerGCGSyncReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGSyncReq_default_instance_);_ServerGCGSyncRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGSyncRsp_default_instance_);_GCGPlayerData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGPlayerData_default_instance_);_ServerGCGCreateSingleGameReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGCreateSingleGameReq_default_instance_);_ServerGCGCreateSingleGameRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGCreateSingleGameRsp_default_instance_);_ServerGCGGiveUpGameReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGGiveUpGameReq_default_instance_);_ServerGCGGiveUpGameRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGGiveUpGameRsp_default_instance_);_ServerGCGSkillPreviewAskReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGSkillPreviewAskReq_default_instance_);_ServerGCGSkillPreviewAskRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGSkillPreviewAskRsp_default_instance_);_ServerGCGCreateMultiGameReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGCreateMultiGameReq_default_instance_);_ServerGCGCreateMultiGameRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGCreateMultiGameRsp_default_instance_);_ServerGCGAddBothAITaskReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGAddBothAITaskReq_default_instance_);_ServerGCGAddBothAITaskRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGAddBothAITaskRsp_default_instance_);_GCGMatchPlayerInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMatchPlayerInfo_default_instance_);_ServerGCGCreateMatchGameNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGCreateMatchGameNotify_default_instance_);_ServerGCGCreateMatchAIGameNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGCreateMatchAIGameNotify_default_instance_);_ServerGCGMatchFinishNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGMatchFinishNotify_default_instance_);_ServerGCGBackToDuelReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGBackToDuelReq_default_instance_);_ServerGCGBackToDuelRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGBackToDuelRsp_default_instance_);_ServerGCGMessagePackNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGMessagePackNotify_default_instance_);_ServerGCGHeartBeatNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGHeartBeatNotify_default_instance_);_ServerGCGSkillPreviewNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGSkillPreviewNotify_default_instance_);_ServerGCGChallengeUpdateNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerGCGChallengeUpdateNotify_default_instance_);_ServerGCGOperationReq_default_instance_._instance.get_mutable()->op_ = const_cast< ::proto::GCGOperation*>(
      ::proto::GCGOperation::internal_default_instance());
  _ServerGCGNewGameInfoNotify_default_instance_._instance.get_mutable()->game_brief_data_ = const_cast< ::proto::GCGGameBriefData*>(
      ::proto::GCGGameBriefData::internal_default_instance());
  _GCGPlayerData_default_instance_._instance.get_mutable()->player_info_ = const_cast< ::proto::OnlinePlayerInfo*>(
      ::proto::OnlinePlayerInfo::internal_default_instance());
  _GCGPlayerData_default_instance_._instance.get_mutable()->duel_extra_ = const_cast< ::proto::GCGDuelExtra*>(
      ::proto::GCGDuelExtra::internal_default_instance());
  _ServerGCGCreateSingleGameReq_default_instance_._instance.get_mutable()->player_data_ = const_cast< ::proto::GCGPlayerData*>(
      ::proto::GCGPlayerData::internal_default_instance());
  _ServerGCGCreateMultiGameReq_default_instance_._instance.get_mutable()->player_data_1_ = const_cast< ::proto::GCGPlayerData*>(
      ::proto::GCGPlayerData::internal_default_instance());
  _ServerGCGCreateMultiGameReq_default_instance_._instance.get_mutable()->player_data_2_ = const_cast< ::proto::GCGPlayerData*>(
      ::proto::GCGPlayerData::internal_default_instance());
  _GCGMatchPlayerInfo_default_instance_._instance.get_mutable()->match_player_ = const_cast< ::proto::MatchPlayer*>(
      ::proto::MatchPlayer::internal_default_instance());
  _GCGMatchPlayerInfo_default_instance_._instance.get_mutable()->gcg_duel_extra_ = const_cast< ::proto::GCGDuelExtra*>(
      ::proto::GCGDuelExtra::internal_default_instance());
  _ServerGCGCreateMatchAIGameNotify_default_instance_._instance.get_mutable()->ai_info_ = const_cast< ::proto::OnlinePlayerInfo*>(
      ::proto::OnlinePlayerInfo::internal_default_instance());
  _ServerGCGMessagePackNotify_default_instance_._instance.get_mutable()->verify_ = const_cast< ::proto::ServerGCGVerify*>(
      ::proto::ServerGCGVerify::internal_default_instance());
  _ServerGCGHeartBeatNotify_default_instance_._instance.get_mutable()->verify_ = const_cast< ::proto::ServerGCGVerify*>(
      ::proto::ServerGCGVerify::internal_default_instance());
  _ServerGCGSkillPreviewNotify_default_instance_._instance.get_mutable()->verify_ = const_cast< ::proto::ServerGCGVerify*>(
      ::proto::ServerGCGVerify::internal_default_instance());
  _ServerGCGChallengeUpdateNotify_default_instance_._instance.get_mutable()->verify_ = const_cast< ::proto::ServerGCGVerify*>(
      ::proto::ServerGCGVerify::internal_default_instance());
  _ServerGCGChallengeUpdateNotify_default_instance_._instance.get_mutable()->challenge_ = const_cast< ::proto::GCGDuelChallenge*>(
      ::proto::GCGDuelChallenge::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n server_only/cmd_gcg.server.proto\022\005prot"
      "o\032\014define.proto\032\030cmd/cmd_gcg_common.prot"
      "o\032\021cmd/cmd_gcg.proto\032\"server_only/cmd_ma"
      "tch.server.proto\"^\n\017ServerGCGVerify\022\020\n\010g"
      "ame_uid\030\001 \001(\r\022\023\n\013verify_code\030\002 \001(\r\022\016\n\006ap"
      "p_id\030\003 \001(\r\022\024\n\014thread_index\030\004 \001(\r\"U\n\025Serv"
      "erGCGOperationReq\022\013\n\003uid\030\001 \001(\r\022\037\n\002op\030\002 \001"
      "(\0132\023.proto.GCGOperation\022\016\n\006op_seq\030\003 \001(\r\""
      "8\n\025ServerGCGOperationRsp\022\017\n\007retcode\030\001 \001("
      "\005\022\016\n\006op_seq\030\002 \001(\r\"\"\n\023ServerGCGAskDuelReq"
      "\022\013\n\003uid\030\001 \001(\r\"\242\001\n\032ServerGCGNewGameInfoNo"
      "tify\022\016\n\006app_id\030\001 \001(\r\022\024\n\014thread_index\030\002 \001"
      "(\r\0220\n\017game_brief_data\030\003 \001(\0132\027.proto.GCGG"
      "ameBriefData\022\023\n\013create_time\030\004 \001(\r\022\027\n\017try"
      "_create_time\030\005 \001(\r\")\n\025ServerGCGGMCommand"
      "Req\022\020\n\010msg_list\030\001 \003(\t\"T\n\025ServerGCGGMComm"
      "andRsp\022\017\n\007retcode\030\001 \001(\005\022\017\n\007ret_msg\030\002 \001(\t"
      "\022\031\n\021ret_extra_content\030\003 \001(\t\")\n\026ServerGCG"
      "InitFinishReq\022\017\n\007retcode\030\001 \001(\005\"K\n\020Server"
      "GCGSyncReq\022\020\n\010game_uid\030\001 \001(\r\022\023\n\013verify_c"
      "ode\030\002 \001(\r\022\020\n\010is_login\030\003 \001(\010\"\202\001\n\020ServerGC"
      "GSyncRsp\022\017\n\007retcode\030\001 \001(\005\022\020\n\010game_uid\030\002 "
      "\001(\r\022\023\n\013verify_code\030\003 \001(\r\022\016\n\006app_id\030\004 \001(\r"
      "\022\024\n\014thread_index\030\005 \001(\r\022\020\n\010is_login\030\006 \001(\010"
      "\"f\n\rGCGPlayerData\022,\n\013player_info\030\001 \001(\0132\027"
      ".proto.OnlinePlayerInfo\022\'\n\nduel_extra\030\002 "
      "\001(\0132\023.proto.GCGDuelExtra\"\301\001\n\034ServerGCGCr"
      "eateSingleGameReq\022\017\n\007game_id\030\001 \001(\r\0221\n\rbu"
      "siness_type\030\002 \001(\0162\032.proto.GCGGameBusines"
      "sType\022)\n\013player_data\030\003 \001(\0132\024.proto.GCGPl"
      "ayerData\022\031\n\021custom_param_list\030\004 \003(\r\022\027\n\017t"
      "ry_create_time\030\005 \001(\r\"@\n\034ServerGCGCreateS"
      "ingleGameRsp\022\017\n\007retcode\030\001 \001(\005\022\017\n\007game_id"
      "\030\002 \001(\r\"\203\001\n\026ServerGCGGiveUpGameReq\022\020\n\010gam"
      "e_uid\030\001 \001(\r\022\017\n\007game_id\030\002 \001(\r\022\023\n\013verify_c"
      "ode\030\003 \001(\r\0221\n\rbusiness_type\030\004 \001(\0162\032.proto"
      ".GCGGameBusinessType\"\207\001\n\026ServerGCGGiveUp"
      "GameRsp\022\017\n\007retcode\030\001 \001(\005\022\020\n\010game_uid\030\002 \001"
      "(\r\022\017\n\007game_id\030\003 \001(\r\022\023\n\013verify_code\030\004 \001(\r"
      "\022\016\n\006app_id\030\005 \001(\r\022\024\n\014thread_index\030\006 \001(\r\"*"
      "\n\033ServerGCGSkillPreviewAskReq\022\013\n\003uid\030\001 \001"
      "(\r\".\n\033ServerGCGSkillPreviewAskRsp\022\017\n\007ret"
      "code\030\001 \001(\005\"\324\001\n\033ServerGCGCreateMultiGameR"
      "eq\022\017\n\007game_id\030\001 \001(\r\0221\n\rbusiness_type\030\002 \001"
      "(\0162\032.proto.GCGGameBusinessType\022+\n\rplayer"
      "_data_1\030\003 \001(\0132\024.proto.GCGPlayerData\022+\n\rp"
      "layer_data_2\030\004 \001(\0132\024.proto.GCGPlayerData"
      "\022\027\n\017try_create_time\030\005 \001(\r\"\?\n\033ServerGCGCr"
      "eateMultiGameRsp\022\017\n\007retcode\030\001 \001(\005\022\017\n\007gam"
      "e_id\030\002 \001(\r\"\225\001\n\031ServerGCGAddBothAITaskReq"
      "\022\017\n\007task_id\030\001 \001(\004\022\022\n\nsubtask_id\030\002 \001(\r\022\021\n"
      "\tgame_type\030\003 \001(\r\022\020\n\010level_id\030\004 \001(\r\022\026\n\016ca"
      "rd_group1_id\030\005 \001(\r\022\026\n\016card_group2_id\030\006 \001"
      "(\r\"Q\n\031ServerGCGAddBothAITaskRsp\022\017\n\007retco"
      "de\030\001 \001(\005\022\017\n\007task_id\030\002 \001(\r\022\022\n\nsubtask_id\030"
      "\003 \001(\r\"k\n\022GCGMatchPlayerInfo\022(\n\014match_pla"
      "yer\030\001 \001(\0132\022.proto.MatchPlayer\022+\n\016gcg_due"
      "l_extra\030\002 \001(\0132\023.proto.GCGDuelExtra\"\205\001\n\036S"
      "erverGCGCreateMatchGameNotify\022\020\n\010match_i"
      "d\030\001 \001(\r\0228\n\025gcg_match_player_list\030\002 \003(\0132\031"
      ".proto.GCGMatchPlayerInfo\022\027\n\017try_create_"
      "time\030\003 \001(\r\"\261\001\n ServerGCGCreateMatchAIGam"
      "eNotify\022\020\n\010match_id\030\001 \001(\r\0228\n\025gcg_match_p"
      "layer_list\030\002 \003(\0132\031.proto.GCGMatchPlayerI"
      "nfo\022(\n\007ai_info\030\003 \001(\0132\027.proto.OnlinePlaye"
      "rInfo\022\027\n\017try_create_time\030\004 \001(\r\"\034\n\032Server"
      "GCGMatchFinishNotify\"\\\n\026ServerGCGBackToD"
      "uelReq\022\020\n\010game_uid\030\001 \001(\r\022\023\n\013verify_code\030"
      "\002 \001(\r\022\033\n\023client_data_version\030\003 \001(\r\"\223\001\n\026S"
      "erverGCGBackToDuelRsp\022\017\n\007retcode\030\001 \001(\005\022\020"
      "\n\010game_uid\030\002 \001(\r\022\023\n\013verify_code\030\003 \001(\r\022\016\n"
      "\006app_id\030\004 \001(\r\022\024\n\014thread_index\030\005 \001(\r\022\033\n\023c"
      "lient_data_version\030\006 \001(\r\"\206\001\n\032ServerGCGMe"
      "ssagePackNotify\022&\n\006verify\030\001 \001(\0132\026.proto."
      "ServerGCGVerify\022\022\n\nserver_seq\030\002 \001(\r\022,\n\rm"
      "sg_pack_list\030\003 \003(\0132\025.proto.GCGMessagePac"
      "k\"V\n\030ServerGCGHeartBeatNotify\022&\n\006verify\030"
      "\001 \001(\0132\026.proto.ServerGCGVerify\022\022\n\nserver_"
      "seq\030\002 \001(\r\"\255\002\n\033ServerGCGSkillPreviewNotif"
      "y\022&\n\006verify\030\001 \001(\0132\026.proto.ServerGCGVerif"
      "y\022\025\n\rcontroller_id\030\002 \001(\r\022\031\n\021onstage_card"
      "_guid\030\003 \001(\r\0226\n\022skill_preview_list\030\004 \003(\0132"
      "\032.proto.GCGSkillPreviewInfo\022@\n\033change_on"
      "stage_preview_list\030\005 \003(\0132\033.proto.GCGChan"
      "geOnstageInfo\022:\n\016play_card_list\030\006 \003(\0132\"."
      "proto.GCGSkillPreviewPlayCardInfo\"\210\001\n\036Se"
      "rverGCGChallengeUpdateNotify\022&\n\006verify\030\001"
      " \001(\0132\026.proto.ServerGCGVerify\022\022\n\nserver_s"
      "eq\030\002 \001(\r\022*\n\tchallenge\030\003 \001(\0132\027.proto.GCGD"
      "uelChallenge*\355\003\n\033GCGStatisticSpecifyItem"
      "Type\022\020\n\014SPECIFY_INIT\020\000\022\025\n\021DIE_CHARACTER_"
      "NUM\020\001\022\032\n\026ALIVE_CHARACTER_HP_SUM\020\002\022\024\n\020BEI"
      "NG_DAMAGE_SUM\020\003\022\022\n\016BEING_HEAL_SUM\020\004\022\025\n\021S"
      "HIELD_REDUCE_SUM\020\005\022\017\n\013REST_ENERGY\020\006\022$\n R"
      "EST_THINK_REST_VIRTUAL_DICE_SUM\020\007\022\036\n\032RES"
      "T_DISCARD_INTENTION_SUM\020\010\022%\n!REST_DISCAR"
      "D_INTENTION_DAMAGE_SUM\020\t\022\032\n\026ELEMENT_REAC"
      "TION_TIMES\020\n\022\026\n\022ONE_HIT_DAMAGE_VEC\020\013\022\023\n\017"
      "PLAY_CARD_TIMES\020\014\022\020\n\014SUMMON_TIMES\020\r\022\025\n\021S"
      "KILL_TAG_Q_TIMES\020\016\022 \n\034ONE_OPERATION_KILL"
      "_COUNT_VEC\020\017\022\027\n\023CHARACTER_DIE_TIMES\020\020\022\035\n"
      "\031BEING_DAMAGE_OVERFLOW_SUM\020\021*\201\001\n\032GCGStat"
      "isticCommonItemType\022\017\n\013COMMON_INIT\020\000\022\024\n\020"
      "CONTROLLER_A_WIN\020\001\022\r\n\tROUND_NUM\020\002\022\024\n\020WIN"
      "NER_REST_DICE\020\003\022\027\n\023PHASE_MAIN_TIME_USE\020\004"
      "B(Z&github.com/teyvat-helper/hk4e-proto/"
      "pbb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4250);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server_only/cmd_gcg.server.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_define_2eproto::AddDescriptors();
  ::proto::protobuf_cmd_2fcmd_5fgcg_5fcommon_2eproto::AddDescriptors();
  ::proto::protobuf_cmd_2fcmd_5fgcg_2eproto::AddDescriptors();
  ::proto::protobuf_server_5fonly_2fcmd_5fmatch_2eserver_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto

const ::google::protobuf::EnumDescriptor* GCGStatisticSpecifyItemType_descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_enum_descriptors[0];
}
bool GCGStatisticSpecifyItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GCGStatisticCommonItemType_descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_enum_descriptors[1];
}
bool GCGStatisticCommonItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGVerify::kGameUidFieldNumber;
const int ServerGCGVerify::kVerifyCodeFieldNumber;
const int ServerGCGVerify::kAppIdFieldNumber;
const int ServerGCGVerify::kThreadIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGVerify::ServerGCGVerify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGVerify)
}
ServerGCGVerify::ServerGCGVerify(const ServerGCGVerify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_uid_, &from.game_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&thread_index_) -
    reinterpret_cast<char*>(&game_uid_)) + sizeof(thread_index_));
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGVerify)
}

void ServerGCGVerify::SharedCtor() {
  ::memset(&game_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_index_) -
      reinterpret_cast<char*>(&game_uid_)) + sizeof(thread_index_));
  _cached_size_ = 0;
}

ServerGCGVerify::~ServerGCGVerify() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGVerify)
  SharedDtor();
}

void ServerGCGVerify::SharedDtor() {
}

void ServerGCGVerify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGVerify::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGVerify& ServerGCGVerify::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGVerify* ServerGCGVerify::New(::google::protobuf::Arena* arena) const {
  ServerGCGVerify* n = new ServerGCGVerify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGVerify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGVerify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&game_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_index_) -
      reinterpret_cast<char*>(&game_uid_)) + sizeof(thread_index_));
  _internal_metadata_.Clear();
}

bool ServerGCGVerify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGVerify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 game_uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 verify_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verify_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 app_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 thread_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGVerify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGVerify)
  return false;
#undef DO_
}

void ServerGCGVerify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGVerify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_uid = 1;
  if (this->game_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_uid(), output);
  }

  // uint32 verify_code = 2;
  if (this->verify_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->verify_code(), output);
  }

  // uint32 app_id = 3;
  if (this->app_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->app_id(), output);
  }

  // uint32 thread_index = 4;
  if (this->thread_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->thread_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGVerify)
}

::google::protobuf::uint8* ServerGCGVerify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGVerify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_uid = 1;
  if (this->game_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_uid(), target);
  }

  // uint32 verify_code = 2;
  if (this->verify_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->verify_code(), target);
  }

  // uint32 app_id = 3;
  if (this->app_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->app_id(), target);
  }

  // uint32 thread_index = 4;
  if (this->thread_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->thread_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGVerify)
  return target;
}

size_t ServerGCGVerify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGVerify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 game_uid = 1;
  if (this->game_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_uid());
  }

  // uint32 verify_code = 2;
  if (this->verify_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->verify_code());
  }

  // uint32 app_id = 3;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->app_id());
  }

  // uint32 thread_index = 4;
  if (this->thread_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thread_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGVerify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGVerify)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGVerify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGVerify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGVerify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGVerify)
    MergeFrom(*source);
  }
}

void ServerGCGVerify::MergeFrom(const ServerGCGVerify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGVerify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_uid() != 0) {
    set_game_uid(from.game_uid());
  }
  if (from.verify_code() != 0) {
    set_verify_code(from.verify_code());
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.thread_index() != 0) {
    set_thread_index(from.thread_index());
  }
}

void ServerGCGVerify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGVerify::CopyFrom(const ServerGCGVerify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGVerify::IsInitialized() const {
  return true;
}

void ServerGCGVerify::Swap(ServerGCGVerify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGVerify::InternalSwap(ServerGCGVerify* other) {
  using std::swap;
  swap(game_uid_, other->game_uid_);
  swap(verify_code_, other->verify_code_);
  swap(app_id_, other->app_id_);
  swap(thread_index_, other->thread_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGVerify::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGVerify

// uint32 game_uid = 1;
void ServerGCGVerify::clear_game_uid() {
  game_uid_ = 0u;
}
::google::protobuf::uint32 ServerGCGVerify::game_uid() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGVerify.game_uid)
  return game_uid_;
}
void ServerGCGVerify::set_game_uid(::google::protobuf::uint32 value) {
  
  game_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGVerify.game_uid)
}

// uint32 verify_code = 2;
void ServerGCGVerify::clear_verify_code() {
  verify_code_ = 0u;
}
::google::protobuf::uint32 ServerGCGVerify::verify_code() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGVerify.verify_code)
  return verify_code_;
}
void ServerGCGVerify::set_verify_code(::google::protobuf::uint32 value) {
  
  verify_code_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGVerify.verify_code)
}

// uint32 app_id = 3;
void ServerGCGVerify::clear_app_id() {
  app_id_ = 0u;
}
::google::protobuf::uint32 ServerGCGVerify::app_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGVerify.app_id)
  return app_id_;
}
void ServerGCGVerify::set_app_id(::google::protobuf::uint32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGVerify.app_id)
}

// uint32 thread_index = 4;
void ServerGCGVerify::clear_thread_index() {
  thread_index_ = 0u;
}
::google::protobuf::uint32 ServerGCGVerify::thread_index() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGVerify.thread_index)
  return thread_index_;
}
void ServerGCGVerify::set_thread_index(::google::protobuf::uint32 value) {
  
  thread_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGVerify.thread_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGOperationReq::kUidFieldNumber;
const int ServerGCGOperationReq::kOpFieldNumber;
const int ServerGCGOperationReq::kOpSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGOperationReq::ServerGCGOperationReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGOperationReq)
}
ServerGCGOperationReq::ServerGCGOperationReq(const ServerGCGOperationReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_op()) {
    op_ = new ::proto::GCGOperation(*from.op_);
  } else {
    op_ = NULL;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_seq_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(op_seq_));
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGOperationReq)
}

void ServerGCGOperationReq::SharedCtor() {
  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_seq_) -
      reinterpret_cast<char*>(&op_)) + sizeof(op_seq_));
  _cached_size_ = 0;
}

ServerGCGOperationReq::~ServerGCGOperationReq() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGOperationReq)
  SharedDtor();
}

void ServerGCGOperationReq::SharedDtor() {
  if (this != internal_default_instance()) delete op_;
}

void ServerGCGOperationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGOperationReq::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGOperationReq& ServerGCGOperationReq::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGOperationReq* ServerGCGOperationReq::New(::google::protobuf::Arena* arena) const {
  ServerGCGOperationReq* n = new ServerGCGOperationReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGOperationReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGOperationReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && op_ != NULL) {
    delete op_;
  }
  op_ = NULL;
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_seq_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(op_seq_));
  _internal_metadata_.Clear();
}

bool ServerGCGOperationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGOperationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGOperation op = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 op_seq = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGOperationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGOperationReq)
  return false;
#undef DO_
}

void ServerGCGOperationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGOperationReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // .proto.GCGOperation op = 2;
  if (this->has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->op_, output);
  }

  // uint32 op_seq = 3;
  if (this->op_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->op_seq(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGOperationReq)
}

::google::protobuf::uint8* ServerGCGOperationReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGOperationReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // .proto.GCGOperation op = 2;
  if (this->has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->op_, deterministic, target);
  }

  // uint32 op_seq = 3;
  if (this->op_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->op_seq(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGOperationReq)
  return target;
}

size_t ServerGCGOperationReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGOperationReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.GCGOperation op = 2;
  if (this->has_op()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->op_);
  }

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // uint32 op_seq = 3;
  if (this->op_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->op_seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGOperationReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGOperationReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGOperationReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGOperationReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGOperationReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGOperationReq)
    MergeFrom(*source);
  }
}

void ServerGCGOperationReq::MergeFrom(const ServerGCGOperationReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGOperationReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_op()) {
    mutable_op()->::proto::GCGOperation::MergeFrom(from.op());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.op_seq() != 0) {
    set_op_seq(from.op_seq());
  }
}

void ServerGCGOperationReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGOperationReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGOperationReq::CopyFrom(const ServerGCGOperationReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGOperationReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGOperationReq::IsInitialized() const {
  return true;
}

void ServerGCGOperationReq::Swap(ServerGCGOperationReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGOperationReq::InternalSwap(ServerGCGOperationReq* other) {
  using std::swap;
  swap(op_, other->op_);
  swap(uid_, other->uid_);
  swap(op_seq_, other->op_seq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGOperationReq::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGOperationReq

// uint32 uid = 1;
void ServerGCGOperationReq::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 ServerGCGOperationReq::uid() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGOperationReq.uid)
  return uid_;
}
void ServerGCGOperationReq::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGOperationReq.uid)
}

// .proto.GCGOperation op = 2;
bool ServerGCGOperationReq::has_op() const {
  return this != internal_default_instance() && op_ != NULL;
}
void ServerGCGOperationReq::clear_op() {
  if (GetArenaNoVirtual() == NULL && op_ != NULL) delete op_;
  op_ = NULL;
}
const ::proto::GCGOperation& ServerGCGOperationReq::op() const {
  const ::proto::GCGOperation* p = op_;
  // @@protoc_insertion_point(field_get:proto.ServerGCGOperationReq.op)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGOperation*>(
      &::proto::_GCGOperation_default_instance_);
}
::proto::GCGOperation* ServerGCGOperationReq::mutable_op() {
  
  if (op_ == NULL) {
    op_ = new ::proto::GCGOperation;
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerGCGOperationReq.op)
  return op_;
}
::proto::GCGOperation* ServerGCGOperationReq::release_op() {
  // @@protoc_insertion_point(field_release:proto.ServerGCGOperationReq.op)
  
  ::proto::GCGOperation* temp = op_;
  op_ = NULL;
  return temp;
}
void ServerGCGOperationReq::set_allocated_op(::proto::GCGOperation* op) {
  delete op_;
  op_ = op;
  if (op) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerGCGOperationReq.op)
}

// uint32 op_seq = 3;
void ServerGCGOperationReq::clear_op_seq() {
  op_seq_ = 0u;
}
::google::protobuf::uint32 ServerGCGOperationReq::op_seq() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGOperationReq.op_seq)
  return op_seq_;
}
void ServerGCGOperationReq::set_op_seq(::google::protobuf::uint32 value) {
  
  op_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGOperationReq.op_seq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGOperationRsp::kRetcodeFieldNumber;
const int ServerGCGOperationRsp::kOpSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGOperationRsp::ServerGCGOperationRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGOperationRsp)
}
ServerGCGOperationRsp::ServerGCGOperationRsp(const ServerGCGOperationRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_seq_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(op_seq_));
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGOperationRsp)
}

void ServerGCGOperationRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_seq_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(op_seq_));
  _cached_size_ = 0;
}

ServerGCGOperationRsp::~ServerGCGOperationRsp() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGOperationRsp)
  SharedDtor();
}

void ServerGCGOperationRsp::SharedDtor() {
}

void ServerGCGOperationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGOperationRsp::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGOperationRsp& ServerGCGOperationRsp::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGOperationRsp* ServerGCGOperationRsp::New(::google::protobuf::Arena* arena) const {
  ServerGCGOperationRsp* n = new ServerGCGOperationRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGOperationRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGOperationRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_seq_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(op_seq_));
  _internal_metadata_.Clear();
}

bool ServerGCGOperationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGOperationRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 op_seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGOperationRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGOperationRsp)
  return false;
#undef DO_
}

void ServerGCGOperationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGOperationRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 op_seq = 2;
  if (this->op_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->op_seq(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGOperationRsp)
}

::google::protobuf::uint8* ServerGCGOperationRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGOperationRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 op_seq = 2;
  if (this->op_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->op_seq(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGOperationRsp)
  return target;
}

size_t ServerGCGOperationRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGOperationRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 op_seq = 2;
  if (this->op_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->op_seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGOperationRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGOperationRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGOperationRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGOperationRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGOperationRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGOperationRsp)
    MergeFrom(*source);
  }
}

void ServerGCGOperationRsp::MergeFrom(const ServerGCGOperationRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGOperationRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.op_seq() != 0) {
    set_op_seq(from.op_seq());
  }
}

void ServerGCGOperationRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGOperationRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGOperationRsp::CopyFrom(const ServerGCGOperationRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGOperationRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGOperationRsp::IsInitialized() const {
  return true;
}

void ServerGCGOperationRsp::Swap(ServerGCGOperationRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGOperationRsp::InternalSwap(ServerGCGOperationRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(op_seq_, other->op_seq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGOperationRsp::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGOperationRsp

// int32 retcode = 1;
void ServerGCGOperationRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 ServerGCGOperationRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGOperationRsp.retcode)
  return retcode_;
}
void ServerGCGOperationRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGOperationRsp.retcode)
}

// uint32 op_seq = 2;
void ServerGCGOperationRsp::clear_op_seq() {
  op_seq_ = 0u;
}
::google::protobuf::uint32 ServerGCGOperationRsp::op_seq() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGOperationRsp.op_seq)
  return op_seq_;
}
void ServerGCGOperationRsp::set_op_seq(::google::protobuf::uint32 value) {
  
  op_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGOperationRsp.op_seq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGAskDuelReq::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGAskDuelReq::ServerGCGAskDuelReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGAskDuelReq)
}
ServerGCGAskDuelReq::ServerGCGAskDuelReq(const ServerGCGAskDuelReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGAskDuelReq)
}

void ServerGCGAskDuelReq::SharedCtor() {
  uid_ = 0u;
  _cached_size_ = 0;
}

ServerGCGAskDuelReq::~ServerGCGAskDuelReq() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGAskDuelReq)
  SharedDtor();
}

void ServerGCGAskDuelReq::SharedDtor() {
}

void ServerGCGAskDuelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGAskDuelReq::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGAskDuelReq& ServerGCGAskDuelReq::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGAskDuelReq* ServerGCGAskDuelReq::New(::google::protobuf::Arena* arena) const {
  ServerGCGAskDuelReq* n = new ServerGCGAskDuelReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGAskDuelReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGAskDuelReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0u;
  _internal_metadata_.Clear();
}

bool ServerGCGAskDuelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGAskDuelReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGAskDuelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGAskDuelReq)
  return false;
#undef DO_
}

void ServerGCGAskDuelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGAskDuelReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGAskDuelReq)
}

::google::protobuf::uint8* ServerGCGAskDuelReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGAskDuelReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGAskDuelReq)
  return target;
}

size_t ServerGCGAskDuelReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGAskDuelReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGAskDuelReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGAskDuelReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGAskDuelReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGAskDuelReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGAskDuelReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGAskDuelReq)
    MergeFrom(*source);
  }
}

void ServerGCGAskDuelReq::MergeFrom(const ServerGCGAskDuelReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGAskDuelReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void ServerGCGAskDuelReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGAskDuelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGAskDuelReq::CopyFrom(const ServerGCGAskDuelReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGAskDuelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGAskDuelReq::IsInitialized() const {
  return true;
}

void ServerGCGAskDuelReq::Swap(ServerGCGAskDuelReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGAskDuelReq::InternalSwap(ServerGCGAskDuelReq* other) {
  using std::swap;
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGAskDuelReq::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGAskDuelReq

// uint32 uid = 1;
void ServerGCGAskDuelReq::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 ServerGCGAskDuelReq::uid() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGAskDuelReq.uid)
  return uid_;
}
void ServerGCGAskDuelReq::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGAskDuelReq.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGNewGameInfoNotify::kAppIdFieldNumber;
const int ServerGCGNewGameInfoNotify::kThreadIndexFieldNumber;
const int ServerGCGNewGameInfoNotify::kGameBriefDataFieldNumber;
const int ServerGCGNewGameInfoNotify::kCreateTimeFieldNumber;
const int ServerGCGNewGameInfoNotify::kTryCreateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGNewGameInfoNotify::ServerGCGNewGameInfoNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGNewGameInfoNotify)
}
ServerGCGNewGameInfoNotify::ServerGCGNewGameInfoNotify(const ServerGCGNewGameInfoNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_game_brief_data()) {
    game_brief_data_ = new ::proto::GCGGameBriefData(*from.game_brief_data_);
  } else {
    game_brief_data_ = NULL;
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&try_create_time_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(try_create_time_));
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGNewGameInfoNotify)
}

void ServerGCGNewGameInfoNotify::SharedCtor() {
  ::memset(&game_brief_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&try_create_time_) -
      reinterpret_cast<char*>(&game_brief_data_)) + sizeof(try_create_time_));
  _cached_size_ = 0;
}

ServerGCGNewGameInfoNotify::~ServerGCGNewGameInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGNewGameInfoNotify)
  SharedDtor();
}

void ServerGCGNewGameInfoNotify::SharedDtor() {
  if (this != internal_default_instance()) delete game_brief_data_;
}

void ServerGCGNewGameInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGNewGameInfoNotify::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGNewGameInfoNotify& ServerGCGNewGameInfoNotify::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGNewGameInfoNotify* ServerGCGNewGameInfoNotify::New(::google::protobuf::Arena* arena) const {
  ServerGCGNewGameInfoNotify* n = new ServerGCGNewGameInfoNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGNewGameInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGNewGameInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && game_brief_data_ != NULL) {
    delete game_brief_data_;
  }
  game_brief_data_ = NULL;
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&try_create_time_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(try_create_time_));
  _internal_metadata_.Clear();
}

bool ServerGCGNewGameInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGNewGameInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 thread_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGGameBriefData game_brief_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_brief_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 create_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 try_create_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &try_create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGNewGameInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGNewGameInfoNotify)
  return false;
#undef DO_
}

void ServerGCGNewGameInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGNewGameInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 app_id = 1;
  if (this->app_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // uint32 thread_index = 2;
  if (this->thread_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->thread_index(), output);
  }

  // .proto.GCGGameBriefData game_brief_data = 3;
  if (this->has_game_brief_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->game_brief_data_, output);
  }

  // uint32 create_time = 4;
  if (this->create_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->create_time(), output);
  }

  // uint32 try_create_time = 5;
  if (this->try_create_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->try_create_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGNewGameInfoNotify)
}

::google::protobuf::uint8* ServerGCGNewGameInfoNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGNewGameInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 app_id = 1;
  if (this->app_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // uint32 thread_index = 2;
  if (this->thread_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->thread_index(), target);
  }

  // .proto.GCGGameBriefData game_brief_data = 3;
  if (this->has_game_brief_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->game_brief_data_, deterministic, target);
  }

  // uint32 create_time = 4;
  if (this->create_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->create_time(), target);
  }

  // uint32 try_create_time = 5;
  if (this->try_create_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->try_create_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGNewGameInfoNotify)
  return target;
}

size_t ServerGCGNewGameInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGNewGameInfoNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.GCGGameBriefData game_brief_data = 3;
  if (this->has_game_brief_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->game_brief_data_);
  }

  // uint32 app_id = 1;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->app_id());
  }

  // uint32 thread_index = 2;
  if (this->thread_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thread_index());
  }

  // uint32 create_time = 4;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->create_time());
  }

  // uint32 try_create_time = 5;
  if (this->try_create_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->try_create_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGNewGameInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGNewGameInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGNewGameInfoNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGNewGameInfoNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGNewGameInfoNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGNewGameInfoNotify)
    MergeFrom(*source);
  }
}

void ServerGCGNewGameInfoNotify::MergeFrom(const ServerGCGNewGameInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGNewGameInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_game_brief_data()) {
    mutable_game_brief_data()->::proto::GCGGameBriefData::MergeFrom(from.game_brief_data());
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.thread_index() != 0) {
    set_thread_index(from.thread_index());
  }
  if (from.create_time() != 0) {
    set_create_time(from.create_time());
  }
  if (from.try_create_time() != 0) {
    set_try_create_time(from.try_create_time());
  }
}

void ServerGCGNewGameInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGNewGameInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGNewGameInfoNotify::CopyFrom(const ServerGCGNewGameInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGNewGameInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGNewGameInfoNotify::IsInitialized() const {
  return true;
}

void ServerGCGNewGameInfoNotify::Swap(ServerGCGNewGameInfoNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGNewGameInfoNotify::InternalSwap(ServerGCGNewGameInfoNotify* other) {
  using std::swap;
  swap(game_brief_data_, other->game_brief_data_);
  swap(app_id_, other->app_id_);
  swap(thread_index_, other->thread_index_);
  swap(create_time_, other->create_time_);
  swap(try_create_time_, other->try_create_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGNewGameInfoNotify::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGNewGameInfoNotify

// uint32 app_id = 1;
void ServerGCGNewGameInfoNotify::clear_app_id() {
  app_id_ = 0u;
}
::google::protobuf::uint32 ServerGCGNewGameInfoNotify::app_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGNewGameInfoNotify.app_id)
  return app_id_;
}
void ServerGCGNewGameInfoNotify::set_app_id(::google::protobuf::uint32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGNewGameInfoNotify.app_id)
}

// uint32 thread_index = 2;
void ServerGCGNewGameInfoNotify::clear_thread_index() {
  thread_index_ = 0u;
}
::google::protobuf::uint32 ServerGCGNewGameInfoNotify::thread_index() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGNewGameInfoNotify.thread_index)
  return thread_index_;
}
void ServerGCGNewGameInfoNotify::set_thread_index(::google::protobuf::uint32 value) {
  
  thread_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGNewGameInfoNotify.thread_index)
}

// .proto.GCGGameBriefData game_brief_data = 3;
bool ServerGCGNewGameInfoNotify::has_game_brief_data() const {
  return this != internal_default_instance() && game_brief_data_ != NULL;
}
void ServerGCGNewGameInfoNotify::clear_game_brief_data() {
  if (GetArenaNoVirtual() == NULL && game_brief_data_ != NULL) delete game_brief_data_;
  game_brief_data_ = NULL;
}
const ::proto::GCGGameBriefData& ServerGCGNewGameInfoNotify::game_brief_data() const {
  const ::proto::GCGGameBriefData* p = game_brief_data_;
  // @@protoc_insertion_point(field_get:proto.ServerGCGNewGameInfoNotify.game_brief_data)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGGameBriefData*>(
      &::proto::_GCGGameBriefData_default_instance_);
}
::proto::GCGGameBriefData* ServerGCGNewGameInfoNotify::mutable_game_brief_data() {
  
  if (game_brief_data_ == NULL) {
    game_brief_data_ = new ::proto::GCGGameBriefData;
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerGCGNewGameInfoNotify.game_brief_data)
  return game_brief_data_;
}
::proto::GCGGameBriefData* ServerGCGNewGameInfoNotify::release_game_brief_data() {
  // @@protoc_insertion_point(field_release:proto.ServerGCGNewGameInfoNotify.game_brief_data)
  
  ::proto::GCGGameBriefData* temp = game_brief_data_;
  game_brief_data_ = NULL;
  return temp;
}
void ServerGCGNewGameInfoNotify::set_allocated_game_brief_data(::proto::GCGGameBriefData* game_brief_data) {
  delete game_brief_data_;
  game_brief_data_ = game_brief_data;
  if (game_brief_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerGCGNewGameInfoNotify.game_brief_data)
}

// uint32 create_time = 4;
void ServerGCGNewGameInfoNotify::clear_create_time() {
  create_time_ = 0u;
}
::google::protobuf::uint32 ServerGCGNewGameInfoNotify::create_time() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGNewGameInfoNotify.create_time)
  return create_time_;
}
void ServerGCGNewGameInfoNotify::set_create_time(::google::protobuf::uint32 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGNewGameInfoNotify.create_time)
}

// uint32 try_create_time = 5;
void ServerGCGNewGameInfoNotify::clear_try_create_time() {
  try_create_time_ = 0u;
}
::google::protobuf::uint32 ServerGCGNewGameInfoNotify::try_create_time() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGNewGameInfoNotify.try_create_time)
  return try_create_time_;
}
void ServerGCGNewGameInfoNotify::set_try_create_time(::google::protobuf::uint32 value) {
  
  try_create_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGNewGameInfoNotify.try_create_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGGMCommandReq::kMsgListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGGMCommandReq::ServerGCGGMCommandReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGGMCommandReq)
}
ServerGCGGMCommandReq::ServerGCGGMCommandReq(const ServerGCGGMCommandReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      msg_list_(from.msg_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGGMCommandReq)
}

void ServerGCGGMCommandReq::SharedCtor() {
  _cached_size_ = 0;
}

ServerGCGGMCommandReq::~ServerGCGGMCommandReq() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGGMCommandReq)
  SharedDtor();
}

void ServerGCGGMCommandReq::SharedDtor() {
}

void ServerGCGGMCommandReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGGMCommandReq::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGGMCommandReq& ServerGCGGMCommandReq::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGGMCommandReq* ServerGCGGMCommandReq::New(::google::protobuf::Arena* arena) const {
  ServerGCGGMCommandReq* n = new ServerGCGGMCommandReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGGMCommandReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGGMCommandReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_list_.Clear();
  _internal_metadata_.Clear();
}

bool ServerGCGGMCommandReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGGMCommandReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string msg_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_msg_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg_list(this->msg_list_size() - 1).data(),
            static_cast<int>(this->msg_list(this->msg_list_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ServerGCGGMCommandReq.msg_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGGMCommandReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGGMCommandReq)
  return false;
#undef DO_
}

void ServerGCGGMCommandReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGGMCommandReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string msg_list = 1;
  for (int i = 0, n = this->msg_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_list(i).data(), static_cast<int>(this->msg_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ServerGCGGMCommandReq.msg_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGGMCommandReq)
}

::google::protobuf::uint8* ServerGCGGMCommandReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGGMCommandReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string msg_list = 1;
  for (int i = 0, n = this->msg_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_list(i).data(), static_cast<int>(this->msg_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ServerGCGGMCommandReq.msg_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->msg_list(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGGMCommandReq)
  return target;
}

size_t ServerGCGGMCommandReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGGMCommandReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string msg_list = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->msg_list_size());
  for (int i = 0, n = this->msg_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->msg_list(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGGMCommandReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGGMCommandReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGGMCommandReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGGMCommandReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGGMCommandReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGGMCommandReq)
    MergeFrom(*source);
  }
}

void ServerGCGGMCommandReq::MergeFrom(const ServerGCGGMCommandReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGGMCommandReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_list_.MergeFrom(from.msg_list_);
}

void ServerGCGGMCommandReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGGMCommandReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGGMCommandReq::CopyFrom(const ServerGCGGMCommandReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGGMCommandReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGGMCommandReq::IsInitialized() const {
  return true;
}

void ServerGCGGMCommandReq::Swap(ServerGCGGMCommandReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGGMCommandReq::InternalSwap(ServerGCGGMCommandReq* other) {
  using std::swap;
  msg_list_.InternalSwap(&other->msg_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGGMCommandReq::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGGMCommandReq

// repeated string msg_list = 1;
int ServerGCGGMCommandReq::msg_list_size() const {
  return msg_list_.size();
}
void ServerGCGGMCommandReq::clear_msg_list() {
  msg_list_.Clear();
}
const ::std::string& ServerGCGGMCommandReq::msg_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGGMCommandReq.msg_list)
  return msg_list_.Get(index);
}
::std::string* ServerGCGGMCommandReq::mutable_msg_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ServerGCGGMCommandReq.msg_list)
  return msg_list_.Mutable(index);
}
void ServerGCGGMCommandReq::set_msg_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.ServerGCGGMCommandReq.msg_list)
  msg_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ServerGCGGMCommandReq::set_msg_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.ServerGCGGMCommandReq.msg_list)
  msg_list_.Mutable(index)->assign(std::move(value));
}
#endif
void ServerGCGGMCommandReq::set_msg_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  msg_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.ServerGCGGMCommandReq.msg_list)
}
void ServerGCGGMCommandReq::set_msg_list(int index, const char* value, size_t size) {
  msg_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.ServerGCGGMCommandReq.msg_list)
}
::std::string* ServerGCGGMCommandReq::add_msg_list() {
  // @@protoc_insertion_point(field_add_mutable:proto.ServerGCGGMCommandReq.msg_list)
  return msg_list_.Add();
}
void ServerGCGGMCommandReq::add_msg_list(const ::std::string& value) {
  msg_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.ServerGCGGMCommandReq.msg_list)
}
#if LANG_CXX11
void ServerGCGGMCommandReq::add_msg_list(::std::string&& value) {
  msg_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.ServerGCGGMCommandReq.msg_list)
}
#endif
void ServerGCGGMCommandReq::add_msg_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  msg_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.ServerGCGGMCommandReq.msg_list)
}
void ServerGCGGMCommandReq::add_msg_list(const char* value, size_t size) {
  msg_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.ServerGCGGMCommandReq.msg_list)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServerGCGGMCommandReq::msg_list() const {
  // @@protoc_insertion_point(field_list:proto.ServerGCGGMCommandReq.msg_list)
  return msg_list_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ServerGCGGMCommandReq::mutable_msg_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ServerGCGGMCommandReq.msg_list)
  return &msg_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGGMCommandRsp::kRetcodeFieldNumber;
const int ServerGCGGMCommandRsp::kRetMsgFieldNumber;
const int ServerGCGGMCommandRsp::kRetExtraContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGGMCommandRsp::ServerGCGGMCommandRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGGMCommandRsp)
}
ServerGCGGMCommandRsp::ServerGCGGMCommandRsp(const ServerGCGGMCommandRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ret_msg().size() > 0) {
    ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
  }
  ret_extra_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ret_extra_content().size() > 0) {
    ret_extra_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_extra_content_);
  }
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGGMCommandRsp)
}

void ServerGCGGMCommandRsp::SharedCtor() {
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_extra_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  retcode_ = 0;
  _cached_size_ = 0;
}

ServerGCGGMCommandRsp::~ServerGCGGMCommandRsp() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGGMCommandRsp)
  SharedDtor();
}

void ServerGCGGMCommandRsp::SharedDtor() {
  ret_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_extra_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerGCGGMCommandRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGGMCommandRsp::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGGMCommandRsp& ServerGCGGMCommandRsp::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGGMCommandRsp* ServerGCGGMCommandRsp::New(::google::protobuf::Arena* arena) const {
  ServerGCGGMCommandRsp* n = new ServerGCGGMCommandRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGGMCommandRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGGMCommandRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_extra_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool ServerGCGGMCommandRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGGMCommandRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ret_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ret_msg().data(), static_cast<int>(this->ret_msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ServerGCGGMCommandRsp.ret_msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ret_extra_content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_extra_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ret_extra_content().data(), static_cast<int>(this->ret_extra_content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ServerGCGGMCommandRsp.ret_extra_content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGGMCommandRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGGMCommandRsp)
  return false;
#undef DO_
}

void ServerGCGGMCommandRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGGMCommandRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // string ret_msg = 2;
  if (this->ret_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ret_msg().data(), static_cast<int>(this->ret_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ServerGCGGMCommandRsp.ret_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ret_msg(), output);
  }

  // string ret_extra_content = 3;
  if (this->ret_extra_content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ret_extra_content().data(), static_cast<int>(this->ret_extra_content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ServerGCGGMCommandRsp.ret_extra_content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ret_extra_content(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGGMCommandRsp)
}

::google::protobuf::uint8* ServerGCGGMCommandRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGGMCommandRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // string ret_msg = 2;
  if (this->ret_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ret_msg().data(), static_cast<int>(this->ret_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ServerGCGGMCommandRsp.ret_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ret_msg(), target);
  }

  // string ret_extra_content = 3;
  if (this->ret_extra_content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ret_extra_content().data(), static_cast<int>(this->ret_extra_content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ServerGCGGMCommandRsp.ret_extra_content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ret_extra_content(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGGMCommandRsp)
  return target;
}

size_t ServerGCGGMCommandRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGGMCommandRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ret_msg = 2;
  if (this->ret_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ret_msg());
  }

  // string ret_extra_content = 3;
  if (this->ret_extra_content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ret_extra_content());
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGGMCommandRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGGMCommandRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGGMCommandRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGGMCommandRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGGMCommandRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGGMCommandRsp)
    MergeFrom(*source);
  }
}

void ServerGCGGMCommandRsp::MergeFrom(const ServerGCGGMCommandRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGGMCommandRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret_msg().size() > 0) {

    ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
  }
  if (from.ret_extra_content().size() > 0) {

    ret_extra_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_extra_content_);
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void ServerGCGGMCommandRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGGMCommandRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGGMCommandRsp::CopyFrom(const ServerGCGGMCommandRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGGMCommandRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGGMCommandRsp::IsInitialized() const {
  return true;
}

void ServerGCGGMCommandRsp::Swap(ServerGCGGMCommandRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGGMCommandRsp::InternalSwap(ServerGCGGMCommandRsp* other) {
  using std::swap;
  ret_msg_.Swap(&other->ret_msg_);
  ret_extra_content_.Swap(&other->ret_extra_content_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGGMCommandRsp::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGGMCommandRsp

// int32 retcode = 1;
void ServerGCGGMCommandRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 ServerGCGGMCommandRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGGMCommandRsp.retcode)
  return retcode_;
}
void ServerGCGGMCommandRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGGMCommandRsp.retcode)
}

// string ret_msg = 2;
void ServerGCGGMCommandRsp::clear_ret_msg() {
  ret_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ServerGCGGMCommandRsp::ret_msg() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGGMCommandRsp.ret_msg)
  return ret_msg_.GetNoArena();
}
void ServerGCGGMCommandRsp::set_ret_msg(const ::std::string& value) {
  
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ServerGCGGMCommandRsp.ret_msg)
}
#if LANG_CXX11
void ServerGCGGMCommandRsp::set_ret_msg(::std::string&& value) {
  
  ret_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ServerGCGGMCommandRsp.ret_msg)
}
#endif
void ServerGCGGMCommandRsp::set_ret_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ServerGCGGMCommandRsp.ret_msg)
}
void ServerGCGGMCommandRsp::set_ret_msg(const char* value, size_t size) {
  
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ServerGCGGMCommandRsp.ret_msg)
}
::std::string* ServerGCGGMCommandRsp::mutable_ret_msg() {
  
  // @@protoc_insertion_point(field_mutable:proto.ServerGCGGMCommandRsp.ret_msg)
  return ret_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServerGCGGMCommandRsp::release_ret_msg() {
  // @@protoc_insertion_point(field_release:proto.ServerGCGGMCommandRsp.ret_msg)
  
  return ret_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerGCGGMCommandRsp::set_allocated_ret_msg(::std::string* ret_msg) {
  if (ret_msg != NULL) {
    
  } else {
    
  }
  ret_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_msg);
  // @@protoc_insertion_point(field_set_allocated:proto.ServerGCGGMCommandRsp.ret_msg)
}

// string ret_extra_content = 3;
void ServerGCGGMCommandRsp::clear_ret_extra_content() {
  ret_extra_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ServerGCGGMCommandRsp::ret_extra_content() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGGMCommandRsp.ret_extra_content)
  return ret_extra_content_.GetNoArena();
}
void ServerGCGGMCommandRsp::set_ret_extra_content(const ::std::string& value) {
  
  ret_extra_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ServerGCGGMCommandRsp.ret_extra_content)
}
#if LANG_CXX11
void ServerGCGGMCommandRsp::set_ret_extra_content(::std::string&& value) {
  
  ret_extra_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ServerGCGGMCommandRsp.ret_extra_content)
}
#endif
void ServerGCGGMCommandRsp::set_ret_extra_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ret_extra_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ServerGCGGMCommandRsp.ret_extra_content)
}
void ServerGCGGMCommandRsp::set_ret_extra_content(const char* value, size_t size) {
  
  ret_extra_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ServerGCGGMCommandRsp.ret_extra_content)
}
::std::string* ServerGCGGMCommandRsp::mutable_ret_extra_content() {
  
  // @@protoc_insertion_point(field_mutable:proto.ServerGCGGMCommandRsp.ret_extra_content)
  return ret_extra_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServerGCGGMCommandRsp::release_ret_extra_content() {
  // @@protoc_insertion_point(field_release:proto.ServerGCGGMCommandRsp.ret_extra_content)
  
  return ret_extra_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerGCGGMCommandRsp::set_allocated_ret_extra_content(::std::string* ret_extra_content) {
  if (ret_extra_content != NULL) {
    
  } else {
    
  }
  ret_extra_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_extra_content);
  // @@protoc_insertion_point(field_set_allocated:proto.ServerGCGGMCommandRsp.ret_extra_content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGInitFinishReq::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGInitFinishReq::ServerGCGInitFinishReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGInitFinishReq)
}
ServerGCGInitFinishReq::ServerGCGInitFinishReq(const ServerGCGInitFinishReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGInitFinishReq)
}

void ServerGCGInitFinishReq::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

ServerGCGInitFinishReq::~ServerGCGInitFinishReq() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGInitFinishReq)
  SharedDtor();
}

void ServerGCGInitFinishReq::SharedDtor() {
}

void ServerGCGInitFinishReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGInitFinishReq::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGInitFinishReq& ServerGCGInitFinishReq::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGInitFinishReq* ServerGCGInitFinishReq::New(::google::protobuf::Arena* arena) const {
  ServerGCGInitFinishReq* n = new ServerGCGInitFinishReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGInitFinishReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGInitFinishReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool ServerGCGInitFinishReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGInitFinishReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGInitFinishReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGInitFinishReq)
  return false;
#undef DO_
}

void ServerGCGInitFinishReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGInitFinishReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGInitFinishReq)
}

::google::protobuf::uint8* ServerGCGInitFinishReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGInitFinishReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGInitFinishReq)
  return target;
}

size_t ServerGCGInitFinishReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGInitFinishReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGInitFinishReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGInitFinishReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGInitFinishReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGInitFinishReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGInitFinishReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGInitFinishReq)
    MergeFrom(*source);
  }
}

void ServerGCGInitFinishReq::MergeFrom(const ServerGCGInitFinishReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGInitFinishReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void ServerGCGInitFinishReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGInitFinishReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGInitFinishReq::CopyFrom(const ServerGCGInitFinishReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGInitFinishReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGInitFinishReq::IsInitialized() const {
  return true;
}

void ServerGCGInitFinishReq::Swap(ServerGCGInitFinishReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGInitFinishReq::InternalSwap(ServerGCGInitFinishReq* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGInitFinishReq::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGInitFinishReq

// int32 retcode = 1;
void ServerGCGInitFinishReq::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 ServerGCGInitFinishReq::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGInitFinishReq.retcode)
  return retcode_;
}
void ServerGCGInitFinishReq::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGInitFinishReq.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGSyncReq::kGameUidFieldNumber;
const int ServerGCGSyncReq::kVerifyCodeFieldNumber;
const int ServerGCGSyncReq::kIsLoginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGSyncReq::ServerGCGSyncReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGSyncReq)
}
ServerGCGSyncReq::ServerGCGSyncReq(const ServerGCGSyncReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_uid_, &from.game_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_login_) -
    reinterpret_cast<char*>(&game_uid_)) + sizeof(is_login_));
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGSyncReq)
}

void ServerGCGSyncReq::SharedCtor() {
  ::memset(&game_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_login_) -
      reinterpret_cast<char*>(&game_uid_)) + sizeof(is_login_));
  _cached_size_ = 0;
}

ServerGCGSyncReq::~ServerGCGSyncReq() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGSyncReq)
  SharedDtor();
}

void ServerGCGSyncReq::SharedDtor() {
}

void ServerGCGSyncReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGSyncReq::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGSyncReq& ServerGCGSyncReq::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGSyncReq* ServerGCGSyncReq::New(::google::protobuf::Arena* arena) const {
  ServerGCGSyncReq* n = new ServerGCGSyncReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGSyncReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGSyncReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&game_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_login_) -
      reinterpret_cast<char*>(&game_uid_)) + sizeof(is_login_));
  _internal_metadata_.Clear();
}

bool ServerGCGSyncReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGSyncReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 game_uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 verify_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verify_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_login = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_login_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGSyncReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGSyncReq)
  return false;
#undef DO_
}

void ServerGCGSyncReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGSyncReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_uid = 1;
  if (this->game_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_uid(), output);
  }

  // uint32 verify_code = 2;
  if (this->verify_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->verify_code(), output);
  }

  // bool is_login = 3;
  if (this->is_login() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_login(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGSyncReq)
}

::google::protobuf::uint8* ServerGCGSyncReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGSyncReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_uid = 1;
  if (this->game_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_uid(), target);
  }

  // uint32 verify_code = 2;
  if (this->verify_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->verify_code(), target);
  }

  // bool is_login = 3;
  if (this->is_login() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_login(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGSyncReq)
  return target;
}

size_t ServerGCGSyncReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGSyncReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 game_uid = 1;
  if (this->game_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_uid());
  }

  // uint32 verify_code = 2;
  if (this->verify_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->verify_code());
  }

  // bool is_login = 3;
  if (this->is_login() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGSyncReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGSyncReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGSyncReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGSyncReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGSyncReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGSyncReq)
    MergeFrom(*source);
  }
}

void ServerGCGSyncReq::MergeFrom(const ServerGCGSyncReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGSyncReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_uid() != 0) {
    set_game_uid(from.game_uid());
  }
  if (from.verify_code() != 0) {
    set_verify_code(from.verify_code());
  }
  if (from.is_login() != 0) {
    set_is_login(from.is_login());
  }
}

void ServerGCGSyncReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGSyncReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGSyncReq::CopyFrom(const ServerGCGSyncReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGSyncReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGSyncReq::IsInitialized() const {
  return true;
}

void ServerGCGSyncReq::Swap(ServerGCGSyncReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGSyncReq::InternalSwap(ServerGCGSyncReq* other) {
  using std::swap;
  swap(game_uid_, other->game_uid_);
  swap(verify_code_, other->verify_code_);
  swap(is_login_, other->is_login_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGSyncReq::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGSyncReq

// uint32 game_uid = 1;
void ServerGCGSyncReq::clear_game_uid() {
  game_uid_ = 0u;
}
::google::protobuf::uint32 ServerGCGSyncReq::game_uid() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGSyncReq.game_uid)
  return game_uid_;
}
void ServerGCGSyncReq::set_game_uid(::google::protobuf::uint32 value) {
  
  game_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGSyncReq.game_uid)
}

// uint32 verify_code = 2;
void ServerGCGSyncReq::clear_verify_code() {
  verify_code_ = 0u;
}
::google::protobuf::uint32 ServerGCGSyncReq::verify_code() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGSyncReq.verify_code)
  return verify_code_;
}
void ServerGCGSyncReq::set_verify_code(::google::protobuf::uint32 value) {
  
  verify_code_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGSyncReq.verify_code)
}

// bool is_login = 3;
void ServerGCGSyncReq::clear_is_login() {
  is_login_ = false;
}
bool ServerGCGSyncReq::is_login() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGSyncReq.is_login)
  return is_login_;
}
void ServerGCGSyncReq::set_is_login(bool value) {
  
  is_login_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGSyncReq.is_login)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGSyncRsp::kRetcodeFieldNumber;
const int ServerGCGSyncRsp::kGameUidFieldNumber;
const int ServerGCGSyncRsp::kVerifyCodeFieldNumber;
const int ServerGCGSyncRsp::kAppIdFieldNumber;
const int ServerGCGSyncRsp::kThreadIndexFieldNumber;
const int ServerGCGSyncRsp::kIsLoginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGSyncRsp::ServerGCGSyncRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGSyncRsp)
}
ServerGCGSyncRsp::ServerGCGSyncRsp(const ServerGCGSyncRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_login_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(is_login_));
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGSyncRsp)
}

void ServerGCGSyncRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_login_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(is_login_));
  _cached_size_ = 0;
}

ServerGCGSyncRsp::~ServerGCGSyncRsp() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGSyncRsp)
  SharedDtor();
}

void ServerGCGSyncRsp::SharedDtor() {
}

void ServerGCGSyncRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGSyncRsp::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGSyncRsp& ServerGCGSyncRsp::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGSyncRsp* ServerGCGSyncRsp::New(::google::protobuf::Arena* arena) const {
  ServerGCGSyncRsp* n = new ServerGCGSyncRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGSyncRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGSyncRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_login_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(is_login_));
  _internal_metadata_.Clear();
}

bool ServerGCGSyncRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGSyncRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 verify_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verify_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 app_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 thread_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_login = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_login_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGSyncRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGSyncRsp)
  return false;
#undef DO_
}

void ServerGCGSyncRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGSyncRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 game_uid = 2;
  if (this->game_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_uid(), output);
  }

  // uint32 verify_code = 3;
  if (this->verify_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->verify_code(), output);
  }

  // uint32 app_id = 4;
  if (this->app_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->app_id(), output);
  }

  // uint32 thread_index = 5;
  if (this->thread_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->thread_index(), output);
  }

  // bool is_login = 6;
  if (this->is_login() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_login(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGSyncRsp)
}

::google::protobuf::uint8* ServerGCGSyncRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGSyncRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 game_uid = 2;
  if (this->game_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_uid(), target);
  }

  // uint32 verify_code = 3;
  if (this->verify_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->verify_code(), target);
  }

  // uint32 app_id = 4;
  if (this->app_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->app_id(), target);
  }

  // uint32 thread_index = 5;
  if (this->thread_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->thread_index(), target);
  }

  // bool is_login = 6;
  if (this->is_login() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_login(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGSyncRsp)
  return target;
}

size_t ServerGCGSyncRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGSyncRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 game_uid = 2;
  if (this->game_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_uid());
  }

  // uint32 verify_code = 3;
  if (this->verify_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->verify_code());
  }

  // uint32 app_id = 4;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->app_id());
  }

  // uint32 thread_index = 5;
  if (this->thread_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thread_index());
  }

  // bool is_login = 6;
  if (this->is_login() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGSyncRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGSyncRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGSyncRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGSyncRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGSyncRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGSyncRsp)
    MergeFrom(*source);
  }
}

void ServerGCGSyncRsp::MergeFrom(const ServerGCGSyncRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGSyncRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.game_uid() != 0) {
    set_game_uid(from.game_uid());
  }
  if (from.verify_code() != 0) {
    set_verify_code(from.verify_code());
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.thread_index() != 0) {
    set_thread_index(from.thread_index());
  }
  if (from.is_login() != 0) {
    set_is_login(from.is_login());
  }
}

void ServerGCGSyncRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGSyncRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGSyncRsp::CopyFrom(const ServerGCGSyncRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGSyncRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGSyncRsp::IsInitialized() const {
  return true;
}

void ServerGCGSyncRsp::Swap(ServerGCGSyncRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGSyncRsp::InternalSwap(ServerGCGSyncRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(game_uid_, other->game_uid_);
  swap(verify_code_, other->verify_code_);
  swap(app_id_, other->app_id_);
  swap(thread_index_, other->thread_index_);
  swap(is_login_, other->is_login_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGSyncRsp::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGSyncRsp

// int32 retcode = 1;
void ServerGCGSyncRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 ServerGCGSyncRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGSyncRsp.retcode)
  return retcode_;
}
void ServerGCGSyncRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGSyncRsp.retcode)
}

// uint32 game_uid = 2;
void ServerGCGSyncRsp::clear_game_uid() {
  game_uid_ = 0u;
}
::google::protobuf::uint32 ServerGCGSyncRsp::game_uid() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGSyncRsp.game_uid)
  return game_uid_;
}
void ServerGCGSyncRsp::set_game_uid(::google::protobuf::uint32 value) {
  
  game_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGSyncRsp.game_uid)
}

// uint32 verify_code = 3;
void ServerGCGSyncRsp::clear_verify_code() {
  verify_code_ = 0u;
}
::google::protobuf::uint32 ServerGCGSyncRsp::verify_code() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGSyncRsp.verify_code)
  return verify_code_;
}
void ServerGCGSyncRsp::set_verify_code(::google::protobuf::uint32 value) {
  
  verify_code_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGSyncRsp.verify_code)
}

// uint32 app_id = 4;
void ServerGCGSyncRsp::clear_app_id() {
  app_id_ = 0u;
}
::google::protobuf::uint32 ServerGCGSyncRsp::app_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGSyncRsp.app_id)
  return app_id_;
}
void ServerGCGSyncRsp::set_app_id(::google::protobuf::uint32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGSyncRsp.app_id)
}

// uint32 thread_index = 5;
void ServerGCGSyncRsp::clear_thread_index() {
  thread_index_ = 0u;
}
::google::protobuf::uint32 ServerGCGSyncRsp::thread_index() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGSyncRsp.thread_index)
  return thread_index_;
}
void ServerGCGSyncRsp::set_thread_index(::google::protobuf::uint32 value) {
  
  thread_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGSyncRsp.thread_index)
}

// bool is_login = 6;
void ServerGCGSyncRsp::clear_is_login() {
  is_login_ = false;
}
bool ServerGCGSyncRsp::is_login() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGSyncRsp.is_login)
  return is_login_;
}
void ServerGCGSyncRsp::set_is_login(bool value) {
  
  is_login_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGSyncRsp.is_login)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGPlayerData::kPlayerInfoFieldNumber;
const int GCGPlayerData::kDuelExtraFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGPlayerData::GCGPlayerData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGPlayerData)
}
GCGPlayerData::GCGPlayerData(const GCGPlayerData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player_info()) {
    player_info_ = new ::proto::OnlinePlayerInfo(*from.player_info_);
  } else {
    player_info_ = NULL;
  }
  if (from.has_duel_extra()) {
    duel_extra_ = new ::proto::GCGDuelExtra(*from.duel_extra_);
  } else {
    duel_extra_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.GCGPlayerData)
}

void GCGPlayerData::SharedCtor() {
  ::memset(&player_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duel_extra_) -
      reinterpret_cast<char*>(&player_info_)) + sizeof(duel_extra_));
  _cached_size_ = 0;
}

GCGPlayerData::~GCGPlayerData() {
  // @@protoc_insertion_point(destructor:proto.GCGPlayerData)
  SharedDtor();
}

void GCGPlayerData::SharedDtor() {
  if (this != internal_default_instance()) delete player_info_;
  if (this != internal_default_instance()) delete duel_extra_;
}

void GCGPlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGPlayerData::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGPlayerData& GCGPlayerData::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGPlayerData* GCGPlayerData::New(::google::protobuf::Arena* arena) const {
  GCGPlayerData* n = new GCGPlayerData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGPlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGPlayerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && player_info_ != NULL) {
    delete player_info_;
  }
  player_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && duel_extra_ != NULL) {
    delete duel_extra_;
  }
  duel_extra_ = NULL;
  _internal_metadata_.Clear();
}

bool GCGPlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGPlayerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.OnlinePlayerInfo player_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGDuelExtra duel_extra = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_duel_extra()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGPlayerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGPlayerData)
  return false;
#undef DO_
}

void GCGPlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGPlayerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.OnlinePlayerInfo player_info = 1;
  if (this->has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_info_, output);
  }

  // .proto.GCGDuelExtra duel_extra = 2;
  if (this->has_duel_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->duel_extra_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGPlayerData)
}

::google::protobuf::uint8* GCGPlayerData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGPlayerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.OnlinePlayerInfo player_info = 1;
  if (this->has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_info_, deterministic, target);
  }

  // .proto.GCGDuelExtra duel_extra = 2;
  if (this->has_duel_extra()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->duel_extra_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGPlayerData)
  return target;
}

size_t GCGPlayerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGPlayerData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.OnlinePlayerInfo player_info = 1;
  if (this->has_player_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_info_);
  }

  // .proto.GCGDuelExtra duel_extra = 2;
  if (this->has_duel_extra()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->duel_extra_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGPlayerData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGPlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGPlayerData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGPlayerData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGPlayerData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGPlayerData)
    MergeFrom(*source);
  }
}

void GCGPlayerData::MergeFrom(const GCGPlayerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGPlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_info()) {
    mutable_player_info()->::proto::OnlinePlayerInfo::MergeFrom(from.player_info());
  }
  if (from.has_duel_extra()) {
    mutable_duel_extra()->::proto::GCGDuelExtra::MergeFrom(from.duel_extra());
  }
}

void GCGPlayerData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGPlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGPlayerData::CopyFrom(const GCGPlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGPlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGPlayerData::IsInitialized() const {
  return true;
}

void GCGPlayerData::Swap(GCGPlayerData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGPlayerData::InternalSwap(GCGPlayerData* other) {
  using std::swap;
  swap(player_info_, other->player_info_);
  swap(duel_extra_, other->duel_extra_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGPlayerData::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGPlayerData

// .proto.OnlinePlayerInfo player_info = 1;
bool GCGPlayerData::has_player_info() const {
  return this != internal_default_instance() && player_info_ != NULL;
}
void GCGPlayerData::clear_player_info() {
  if (GetArenaNoVirtual() == NULL && player_info_ != NULL) delete player_info_;
  player_info_ = NULL;
}
const ::proto::OnlinePlayerInfo& GCGPlayerData::player_info() const {
  const ::proto::OnlinePlayerInfo* p = player_info_;
  // @@protoc_insertion_point(field_get:proto.GCGPlayerData.player_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::OnlinePlayerInfo*>(
      &::proto::_OnlinePlayerInfo_default_instance_);
}
::proto::OnlinePlayerInfo* GCGPlayerData::mutable_player_info() {
  
  if (player_info_ == NULL) {
    player_info_ = new ::proto::OnlinePlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGPlayerData.player_info)
  return player_info_;
}
::proto::OnlinePlayerInfo* GCGPlayerData::release_player_info() {
  // @@protoc_insertion_point(field_release:proto.GCGPlayerData.player_info)
  
  ::proto::OnlinePlayerInfo* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
void GCGPlayerData::set_allocated_player_info(::proto::OnlinePlayerInfo* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGPlayerData.player_info)
}

// .proto.GCGDuelExtra duel_extra = 2;
bool GCGPlayerData::has_duel_extra() const {
  return this != internal_default_instance() && duel_extra_ != NULL;
}
void GCGPlayerData::clear_duel_extra() {
  if (GetArenaNoVirtual() == NULL && duel_extra_ != NULL) delete duel_extra_;
  duel_extra_ = NULL;
}
const ::proto::GCGDuelExtra& GCGPlayerData::duel_extra() const {
  const ::proto::GCGDuelExtra* p = duel_extra_;
  // @@protoc_insertion_point(field_get:proto.GCGPlayerData.duel_extra)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGDuelExtra*>(
      &::proto::_GCGDuelExtra_default_instance_);
}
::proto::GCGDuelExtra* GCGPlayerData::mutable_duel_extra() {
  
  if (duel_extra_ == NULL) {
    duel_extra_ = new ::proto::GCGDuelExtra;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGPlayerData.duel_extra)
  return duel_extra_;
}
::proto::GCGDuelExtra* GCGPlayerData::release_duel_extra() {
  // @@protoc_insertion_point(field_release:proto.GCGPlayerData.duel_extra)
  
  ::proto::GCGDuelExtra* temp = duel_extra_;
  duel_extra_ = NULL;
  return temp;
}
void GCGPlayerData::set_allocated_duel_extra(::proto::GCGDuelExtra* duel_extra) {
  delete duel_extra_;
  duel_extra_ = duel_extra;
  if (duel_extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGPlayerData.duel_extra)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGCreateSingleGameReq::kGameIdFieldNumber;
const int ServerGCGCreateSingleGameReq::kBusinessTypeFieldNumber;
const int ServerGCGCreateSingleGameReq::kPlayerDataFieldNumber;
const int ServerGCGCreateSingleGameReq::kCustomParamListFieldNumber;
const int ServerGCGCreateSingleGameReq::kTryCreateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGCreateSingleGameReq::ServerGCGCreateSingleGameReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGCreateSingleGameReq)
}
ServerGCGCreateSingleGameReq::ServerGCGCreateSingleGameReq(const ServerGCGCreateSingleGameReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      custom_param_list_(from.custom_param_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player_data()) {
    player_data_ = new ::proto::GCGPlayerData(*from.player_data_);
  } else {
    player_data_ = NULL;
  }
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&try_create_time_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(try_create_time_));
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGCreateSingleGameReq)
}

void ServerGCGCreateSingleGameReq::SharedCtor() {
  ::memset(&player_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&try_create_time_) -
      reinterpret_cast<char*>(&player_data_)) + sizeof(try_create_time_));
  _cached_size_ = 0;
}

ServerGCGCreateSingleGameReq::~ServerGCGCreateSingleGameReq() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGCreateSingleGameReq)
  SharedDtor();
}

void ServerGCGCreateSingleGameReq::SharedDtor() {
  if (this != internal_default_instance()) delete player_data_;
}

void ServerGCGCreateSingleGameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGCreateSingleGameReq::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGCreateSingleGameReq& ServerGCGCreateSingleGameReq::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGCreateSingleGameReq* ServerGCGCreateSingleGameReq::New(::google::protobuf::Arena* arena) const {
  ServerGCGCreateSingleGameReq* n = new ServerGCGCreateSingleGameReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGCreateSingleGameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGCreateSingleGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_param_list_.Clear();
  if (GetArenaNoVirtual() == NULL && player_data_ != NULL) {
    delete player_data_;
  }
  player_data_ = NULL;
  ::memset(&game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&try_create_time_) -
      reinterpret_cast<char*>(&game_id_)) + sizeof(try_create_time_));
  _internal_metadata_.Clear();
}

bool ServerGCGCreateSingleGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGCreateSingleGameReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 game_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGGameBusinessType business_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_business_type(static_cast< ::proto::GCGGameBusinessType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGPlayerData player_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 custom_param_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_custom_param_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_custom_param_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 try_create_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &try_create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGCreateSingleGameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGCreateSingleGameReq)
  return false;
#undef DO_
}

void ServerGCGCreateSingleGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGCreateSingleGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_id = 1;
  if (this->game_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_id(), output);
  }

  // .proto.GCGGameBusinessType business_type = 2;
  if (this->business_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->business_type(), output);
  }

  // .proto.GCGPlayerData player_data = 3;
  if (this->has_player_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->player_data_, output);
  }

  // repeated uint32 custom_param_list = 4;
  if (this->custom_param_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _custom_param_list_cached_byte_size_));
  }
  for (int i = 0, n = this->custom_param_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->custom_param_list(i), output);
  }

  // uint32 try_create_time = 5;
  if (this->try_create_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->try_create_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGCreateSingleGameReq)
}

::google::protobuf::uint8* ServerGCGCreateSingleGameReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGCreateSingleGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_id = 1;
  if (this->game_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_id(), target);
  }

  // .proto.GCGGameBusinessType business_type = 2;
  if (this->business_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->business_type(), target);
  }

  // .proto.GCGPlayerData player_data = 3;
  if (this->has_player_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->player_data_, deterministic, target);
  }

  // repeated uint32 custom_param_list = 4;
  if (this->custom_param_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _custom_param_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->custom_param_list_, target);
  }

  // uint32 try_create_time = 5;
  if (this->try_create_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->try_create_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGCreateSingleGameReq)
  return target;
}

size_t ServerGCGCreateSingleGameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGCreateSingleGameReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 custom_param_list = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->custom_param_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _custom_param_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .proto.GCGPlayerData player_data = 3;
  if (this->has_player_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_data_);
  }

  // uint32 game_id = 1;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_id());
  }

  // .proto.GCGGameBusinessType business_type = 2;
  if (this->business_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->business_type());
  }

  // uint32 try_create_time = 5;
  if (this->try_create_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->try_create_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGCreateSingleGameReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGCreateSingleGameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGCreateSingleGameReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGCreateSingleGameReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGCreateSingleGameReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGCreateSingleGameReq)
    MergeFrom(*source);
  }
}

void ServerGCGCreateSingleGameReq::MergeFrom(const ServerGCGCreateSingleGameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGCreateSingleGameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  custom_param_list_.MergeFrom(from.custom_param_list_);
  if (from.has_player_data()) {
    mutable_player_data()->::proto::GCGPlayerData::MergeFrom(from.player_data());
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
  if (from.business_type() != 0) {
    set_business_type(from.business_type());
  }
  if (from.try_create_time() != 0) {
    set_try_create_time(from.try_create_time());
  }
}

void ServerGCGCreateSingleGameReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGCreateSingleGameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGCreateSingleGameReq::CopyFrom(const ServerGCGCreateSingleGameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGCreateSingleGameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGCreateSingleGameReq::IsInitialized() const {
  return true;
}

void ServerGCGCreateSingleGameReq::Swap(ServerGCGCreateSingleGameReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGCreateSingleGameReq::InternalSwap(ServerGCGCreateSingleGameReq* other) {
  using std::swap;
  custom_param_list_.InternalSwap(&other->custom_param_list_);
  swap(player_data_, other->player_data_);
  swap(game_id_, other->game_id_);
  swap(business_type_, other->business_type_);
  swap(try_create_time_, other->try_create_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGCreateSingleGameReq::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGCreateSingleGameReq

// uint32 game_id = 1;
void ServerGCGCreateSingleGameReq::clear_game_id() {
  game_id_ = 0u;
}
::google::protobuf::uint32 ServerGCGCreateSingleGameReq::game_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGCreateSingleGameReq.game_id)
  return game_id_;
}
void ServerGCGCreateSingleGameReq::set_game_id(::google::protobuf::uint32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGCreateSingleGameReq.game_id)
}

// .proto.GCGGameBusinessType business_type = 2;
void ServerGCGCreateSingleGameReq::clear_business_type() {
  business_type_ = 0;
}
::proto::GCGGameBusinessType ServerGCGCreateSingleGameReq::business_type() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGCreateSingleGameReq.business_type)
  return static_cast< ::proto::GCGGameBusinessType >(business_type_);
}
void ServerGCGCreateSingleGameReq::set_business_type(::proto::GCGGameBusinessType value) {
  
  business_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGCreateSingleGameReq.business_type)
}

// .proto.GCGPlayerData player_data = 3;
bool ServerGCGCreateSingleGameReq::has_player_data() const {
  return this != internal_default_instance() && player_data_ != NULL;
}
void ServerGCGCreateSingleGameReq::clear_player_data() {
  if (GetArenaNoVirtual() == NULL && player_data_ != NULL) delete player_data_;
  player_data_ = NULL;
}
const ::proto::GCGPlayerData& ServerGCGCreateSingleGameReq::player_data() const {
  const ::proto::GCGPlayerData* p = player_data_;
  // @@protoc_insertion_point(field_get:proto.ServerGCGCreateSingleGameReq.player_data)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGPlayerData*>(
      &::proto::_GCGPlayerData_default_instance_);
}
::proto::GCGPlayerData* ServerGCGCreateSingleGameReq::mutable_player_data() {
  
  if (player_data_ == NULL) {
    player_data_ = new ::proto::GCGPlayerData;
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerGCGCreateSingleGameReq.player_data)
  return player_data_;
}
::proto::GCGPlayerData* ServerGCGCreateSingleGameReq::release_player_data() {
  // @@protoc_insertion_point(field_release:proto.ServerGCGCreateSingleGameReq.player_data)
  
  ::proto::GCGPlayerData* temp = player_data_;
  player_data_ = NULL;
  return temp;
}
void ServerGCGCreateSingleGameReq::set_allocated_player_data(::proto::GCGPlayerData* player_data) {
  delete player_data_;
  player_data_ = player_data;
  if (player_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerGCGCreateSingleGameReq.player_data)
}

// repeated uint32 custom_param_list = 4;
int ServerGCGCreateSingleGameReq::custom_param_list_size() const {
  return custom_param_list_.size();
}
void ServerGCGCreateSingleGameReq::clear_custom_param_list() {
  custom_param_list_.Clear();
}
::google::protobuf::uint32 ServerGCGCreateSingleGameReq::custom_param_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGCreateSingleGameReq.custom_param_list)
  return custom_param_list_.Get(index);
}
void ServerGCGCreateSingleGameReq::set_custom_param_list(int index, ::google::protobuf::uint32 value) {
  custom_param_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ServerGCGCreateSingleGameReq.custom_param_list)
}
void ServerGCGCreateSingleGameReq::add_custom_param_list(::google::protobuf::uint32 value) {
  custom_param_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ServerGCGCreateSingleGameReq.custom_param_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ServerGCGCreateSingleGameReq::custom_param_list() const {
  // @@protoc_insertion_point(field_list:proto.ServerGCGCreateSingleGameReq.custom_param_list)
  return custom_param_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ServerGCGCreateSingleGameReq::mutable_custom_param_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ServerGCGCreateSingleGameReq.custom_param_list)
  return &custom_param_list_;
}

// uint32 try_create_time = 5;
void ServerGCGCreateSingleGameReq::clear_try_create_time() {
  try_create_time_ = 0u;
}
::google::protobuf::uint32 ServerGCGCreateSingleGameReq::try_create_time() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGCreateSingleGameReq.try_create_time)
  return try_create_time_;
}
void ServerGCGCreateSingleGameReq::set_try_create_time(::google::protobuf::uint32 value) {
  
  try_create_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGCreateSingleGameReq.try_create_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGCreateSingleGameRsp::kRetcodeFieldNumber;
const int ServerGCGCreateSingleGameRsp::kGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGCreateSingleGameRsp::ServerGCGCreateSingleGameRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGCreateSingleGameRsp)
}
ServerGCGCreateSingleGameRsp::ServerGCGCreateSingleGameRsp(const ServerGCGCreateSingleGameRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(game_id_));
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGCreateSingleGameRsp)
}

void ServerGCGCreateSingleGameRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(game_id_));
  _cached_size_ = 0;
}

ServerGCGCreateSingleGameRsp::~ServerGCGCreateSingleGameRsp() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGCreateSingleGameRsp)
  SharedDtor();
}

void ServerGCGCreateSingleGameRsp::SharedDtor() {
}

void ServerGCGCreateSingleGameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGCreateSingleGameRsp::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGCreateSingleGameRsp& ServerGCGCreateSingleGameRsp::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGCreateSingleGameRsp* ServerGCGCreateSingleGameRsp::New(::google::protobuf::Arena* arena) const {
  ServerGCGCreateSingleGameRsp* n = new ServerGCGCreateSingleGameRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGCreateSingleGameRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGCreateSingleGameRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(game_id_));
  _internal_metadata_.Clear();
}

bool ServerGCGCreateSingleGameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGCreateSingleGameRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGCreateSingleGameRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGCreateSingleGameRsp)
  return false;
#undef DO_
}

void ServerGCGCreateSingleGameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGCreateSingleGameRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 game_id = 2;
  if (this->game_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGCreateSingleGameRsp)
}

::google::protobuf::uint8* ServerGCGCreateSingleGameRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGCreateSingleGameRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 game_id = 2;
  if (this->game_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGCreateSingleGameRsp)
  return target;
}

size_t ServerGCGCreateSingleGameRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGCreateSingleGameRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 game_id = 2;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGCreateSingleGameRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGCreateSingleGameRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGCreateSingleGameRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGCreateSingleGameRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGCreateSingleGameRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGCreateSingleGameRsp)
    MergeFrom(*source);
  }
}

void ServerGCGCreateSingleGameRsp::MergeFrom(const ServerGCGCreateSingleGameRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGCreateSingleGameRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
}

void ServerGCGCreateSingleGameRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGCreateSingleGameRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGCreateSingleGameRsp::CopyFrom(const ServerGCGCreateSingleGameRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGCreateSingleGameRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGCreateSingleGameRsp::IsInitialized() const {
  return true;
}

void ServerGCGCreateSingleGameRsp::Swap(ServerGCGCreateSingleGameRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGCreateSingleGameRsp::InternalSwap(ServerGCGCreateSingleGameRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(game_id_, other->game_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGCreateSingleGameRsp::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGCreateSingleGameRsp

// int32 retcode = 1;
void ServerGCGCreateSingleGameRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 ServerGCGCreateSingleGameRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGCreateSingleGameRsp.retcode)
  return retcode_;
}
void ServerGCGCreateSingleGameRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGCreateSingleGameRsp.retcode)
}

// uint32 game_id = 2;
void ServerGCGCreateSingleGameRsp::clear_game_id() {
  game_id_ = 0u;
}
::google::protobuf::uint32 ServerGCGCreateSingleGameRsp::game_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGCreateSingleGameRsp.game_id)
  return game_id_;
}
void ServerGCGCreateSingleGameRsp::set_game_id(::google::protobuf::uint32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGCreateSingleGameRsp.game_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGGiveUpGameReq::kGameUidFieldNumber;
const int ServerGCGGiveUpGameReq::kGameIdFieldNumber;
const int ServerGCGGiveUpGameReq::kVerifyCodeFieldNumber;
const int ServerGCGGiveUpGameReq::kBusinessTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGGiveUpGameReq::ServerGCGGiveUpGameReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGGiveUpGameReq)
}
ServerGCGGiveUpGameReq::ServerGCGGiveUpGameReq(const ServerGCGGiveUpGameReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_uid_, &from.game_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&business_type_) -
    reinterpret_cast<char*>(&game_uid_)) + sizeof(business_type_));
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGGiveUpGameReq)
}

void ServerGCGGiveUpGameReq::SharedCtor() {
  ::memset(&game_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&business_type_) -
      reinterpret_cast<char*>(&game_uid_)) + sizeof(business_type_));
  _cached_size_ = 0;
}

ServerGCGGiveUpGameReq::~ServerGCGGiveUpGameReq() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGGiveUpGameReq)
  SharedDtor();
}

void ServerGCGGiveUpGameReq::SharedDtor() {
}

void ServerGCGGiveUpGameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGGiveUpGameReq::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGGiveUpGameReq& ServerGCGGiveUpGameReq::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGGiveUpGameReq* ServerGCGGiveUpGameReq::New(::google::protobuf::Arena* arena) const {
  ServerGCGGiveUpGameReq* n = new ServerGCGGiveUpGameReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGGiveUpGameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGGiveUpGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&game_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&business_type_) -
      reinterpret_cast<char*>(&game_uid_)) + sizeof(business_type_));
  _internal_metadata_.Clear();
}

bool ServerGCGGiveUpGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGGiveUpGameReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 game_uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 verify_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verify_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGGameBusinessType business_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_business_type(static_cast< ::proto::GCGGameBusinessType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGGiveUpGameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGGiveUpGameReq)
  return false;
#undef DO_
}

void ServerGCGGiveUpGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGGiveUpGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_uid = 1;
  if (this->game_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_uid(), output);
  }

  // uint32 game_id = 2;
  if (this->game_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  // uint32 verify_code = 3;
  if (this->verify_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->verify_code(), output);
  }

  // .proto.GCGGameBusinessType business_type = 4;
  if (this->business_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->business_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGGiveUpGameReq)
}

::google::protobuf::uint8* ServerGCGGiveUpGameReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGGiveUpGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_uid = 1;
  if (this->game_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_uid(), target);
  }

  // uint32 game_id = 2;
  if (this->game_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  // uint32 verify_code = 3;
  if (this->verify_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->verify_code(), target);
  }

  // .proto.GCGGameBusinessType business_type = 4;
  if (this->business_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->business_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGGiveUpGameReq)
  return target;
}

size_t ServerGCGGiveUpGameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGGiveUpGameReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 game_uid = 1;
  if (this->game_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_uid());
  }

  // uint32 game_id = 2;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_id());
  }

  // uint32 verify_code = 3;
  if (this->verify_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->verify_code());
  }

  // .proto.GCGGameBusinessType business_type = 4;
  if (this->business_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->business_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGGiveUpGameReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGGiveUpGameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGGiveUpGameReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGGiveUpGameReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGGiveUpGameReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGGiveUpGameReq)
    MergeFrom(*source);
  }
}

void ServerGCGGiveUpGameReq::MergeFrom(const ServerGCGGiveUpGameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGGiveUpGameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_uid() != 0) {
    set_game_uid(from.game_uid());
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
  if (from.verify_code() != 0) {
    set_verify_code(from.verify_code());
  }
  if (from.business_type() != 0) {
    set_business_type(from.business_type());
  }
}

void ServerGCGGiveUpGameReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGGiveUpGameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGGiveUpGameReq::CopyFrom(const ServerGCGGiveUpGameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGGiveUpGameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGGiveUpGameReq::IsInitialized() const {
  return true;
}

void ServerGCGGiveUpGameReq::Swap(ServerGCGGiveUpGameReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGGiveUpGameReq::InternalSwap(ServerGCGGiveUpGameReq* other) {
  using std::swap;
  swap(game_uid_, other->game_uid_);
  swap(game_id_, other->game_id_);
  swap(verify_code_, other->verify_code_);
  swap(business_type_, other->business_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGGiveUpGameReq::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGGiveUpGameReq

// uint32 game_uid = 1;
void ServerGCGGiveUpGameReq::clear_game_uid() {
  game_uid_ = 0u;
}
::google::protobuf::uint32 ServerGCGGiveUpGameReq::game_uid() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGGiveUpGameReq.game_uid)
  return game_uid_;
}
void ServerGCGGiveUpGameReq::set_game_uid(::google::protobuf::uint32 value) {
  
  game_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGGiveUpGameReq.game_uid)
}

// uint32 game_id = 2;
void ServerGCGGiveUpGameReq::clear_game_id() {
  game_id_ = 0u;
}
::google::protobuf::uint32 ServerGCGGiveUpGameReq::game_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGGiveUpGameReq.game_id)
  return game_id_;
}
void ServerGCGGiveUpGameReq::set_game_id(::google::protobuf::uint32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGGiveUpGameReq.game_id)
}

// uint32 verify_code = 3;
void ServerGCGGiveUpGameReq::clear_verify_code() {
  verify_code_ = 0u;
}
::google::protobuf::uint32 ServerGCGGiveUpGameReq::verify_code() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGGiveUpGameReq.verify_code)
  return verify_code_;
}
void ServerGCGGiveUpGameReq::set_verify_code(::google::protobuf::uint32 value) {
  
  verify_code_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGGiveUpGameReq.verify_code)
}

// .proto.GCGGameBusinessType business_type = 4;
void ServerGCGGiveUpGameReq::clear_business_type() {
  business_type_ = 0;
}
::proto::GCGGameBusinessType ServerGCGGiveUpGameReq::business_type() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGGiveUpGameReq.business_type)
  return static_cast< ::proto::GCGGameBusinessType >(business_type_);
}
void ServerGCGGiveUpGameReq::set_business_type(::proto::GCGGameBusinessType value) {
  
  business_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGGiveUpGameReq.business_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGGiveUpGameRsp::kRetcodeFieldNumber;
const int ServerGCGGiveUpGameRsp::kGameUidFieldNumber;
const int ServerGCGGiveUpGameRsp::kGameIdFieldNumber;
const int ServerGCGGiveUpGameRsp::kVerifyCodeFieldNumber;
const int ServerGCGGiveUpGameRsp::kAppIdFieldNumber;
const int ServerGCGGiveUpGameRsp::kThreadIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGGiveUpGameRsp::ServerGCGGiveUpGameRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGGiveUpGameRsp)
}
ServerGCGGiveUpGameRsp::ServerGCGGiveUpGameRsp(const ServerGCGGiveUpGameRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&thread_index_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(thread_index_));
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGGiveUpGameRsp)
}

void ServerGCGGiveUpGameRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_index_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(thread_index_));
  _cached_size_ = 0;
}

ServerGCGGiveUpGameRsp::~ServerGCGGiveUpGameRsp() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGGiveUpGameRsp)
  SharedDtor();
}

void ServerGCGGiveUpGameRsp::SharedDtor() {
}

void ServerGCGGiveUpGameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGGiveUpGameRsp::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGGiveUpGameRsp& ServerGCGGiveUpGameRsp::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGGiveUpGameRsp* ServerGCGGiveUpGameRsp::New(::google::protobuf::Arena* arena) const {
  ServerGCGGiveUpGameRsp* n = new ServerGCGGiveUpGameRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGGiveUpGameRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGGiveUpGameRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_index_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(thread_index_));
  _internal_metadata_.Clear();
}

bool ServerGCGGiveUpGameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGGiveUpGameRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 verify_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verify_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 app_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 thread_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGGiveUpGameRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGGiveUpGameRsp)
  return false;
#undef DO_
}

void ServerGCGGiveUpGameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGGiveUpGameRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 game_uid = 2;
  if (this->game_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_uid(), output);
  }

  // uint32 game_id = 3;
  if (this->game_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_id(), output);
  }

  // uint32 verify_code = 4;
  if (this->verify_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->verify_code(), output);
  }

  // uint32 app_id = 5;
  if (this->app_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->app_id(), output);
  }

  // uint32 thread_index = 6;
  if (this->thread_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->thread_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGGiveUpGameRsp)
}

::google::protobuf::uint8* ServerGCGGiveUpGameRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGGiveUpGameRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 game_uid = 2;
  if (this->game_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_uid(), target);
  }

  // uint32 game_id = 3;
  if (this->game_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_id(), target);
  }

  // uint32 verify_code = 4;
  if (this->verify_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->verify_code(), target);
  }

  // uint32 app_id = 5;
  if (this->app_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->app_id(), target);
  }

  // uint32 thread_index = 6;
  if (this->thread_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->thread_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGGiveUpGameRsp)
  return target;
}

size_t ServerGCGGiveUpGameRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGGiveUpGameRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 game_uid = 2;
  if (this->game_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_uid());
  }

  // uint32 game_id = 3;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_id());
  }

  // uint32 verify_code = 4;
  if (this->verify_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->verify_code());
  }

  // uint32 app_id = 5;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->app_id());
  }

  // uint32 thread_index = 6;
  if (this->thread_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thread_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGGiveUpGameRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGGiveUpGameRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGGiveUpGameRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGGiveUpGameRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGGiveUpGameRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGGiveUpGameRsp)
    MergeFrom(*source);
  }
}

void ServerGCGGiveUpGameRsp::MergeFrom(const ServerGCGGiveUpGameRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGGiveUpGameRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.game_uid() != 0) {
    set_game_uid(from.game_uid());
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
  if (from.verify_code() != 0) {
    set_verify_code(from.verify_code());
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.thread_index() != 0) {
    set_thread_index(from.thread_index());
  }
}

void ServerGCGGiveUpGameRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGGiveUpGameRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGGiveUpGameRsp::CopyFrom(const ServerGCGGiveUpGameRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGGiveUpGameRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGGiveUpGameRsp::IsInitialized() const {
  return true;
}

void ServerGCGGiveUpGameRsp::Swap(ServerGCGGiveUpGameRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGGiveUpGameRsp::InternalSwap(ServerGCGGiveUpGameRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(game_uid_, other->game_uid_);
  swap(game_id_, other->game_id_);
  swap(verify_code_, other->verify_code_);
  swap(app_id_, other->app_id_);
  swap(thread_index_, other->thread_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGGiveUpGameRsp::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGGiveUpGameRsp

// int32 retcode = 1;
void ServerGCGGiveUpGameRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 ServerGCGGiveUpGameRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGGiveUpGameRsp.retcode)
  return retcode_;
}
void ServerGCGGiveUpGameRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGGiveUpGameRsp.retcode)
}

// uint32 game_uid = 2;
void ServerGCGGiveUpGameRsp::clear_game_uid() {
  game_uid_ = 0u;
}
::google::protobuf::uint32 ServerGCGGiveUpGameRsp::game_uid() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGGiveUpGameRsp.game_uid)
  return game_uid_;
}
void ServerGCGGiveUpGameRsp::set_game_uid(::google::protobuf::uint32 value) {
  
  game_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGGiveUpGameRsp.game_uid)
}

// uint32 game_id = 3;
void ServerGCGGiveUpGameRsp::clear_game_id() {
  game_id_ = 0u;
}
::google::protobuf::uint32 ServerGCGGiveUpGameRsp::game_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGGiveUpGameRsp.game_id)
  return game_id_;
}
void ServerGCGGiveUpGameRsp::set_game_id(::google::protobuf::uint32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGGiveUpGameRsp.game_id)
}

// uint32 verify_code = 4;
void ServerGCGGiveUpGameRsp::clear_verify_code() {
  verify_code_ = 0u;
}
::google::protobuf::uint32 ServerGCGGiveUpGameRsp::verify_code() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGGiveUpGameRsp.verify_code)
  return verify_code_;
}
void ServerGCGGiveUpGameRsp::set_verify_code(::google::protobuf::uint32 value) {
  
  verify_code_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGGiveUpGameRsp.verify_code)
}

// uint32 app_id = 5;
void ServerGCGGiveUpGameRsp::clear_app_id() {
  app_id_ = 0u;
}
::google::protobuf::uint32 ServerGCGGiveUpGameRsp::app_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGGiveUpGameRsp.app_id)
  return app_id_;
}
void ServerGCGGiveUpGameRsp::set_app_id(::google::protobuf::uint32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGGiveUpGameRsp.app_id)
}

// uint32 thread_index = 6;
void ServerGCGGiveUpGameRsp::clear_thread_index() {
  thread_index_ = 0u;
}
::google::protobuf::uint32 ServerGCGGiveUpGameRsp::thread_index() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGGiveUpGameRsp.thread_index)
  return thread_index_;
}
void ServerGCGGiveUpGameRsp::set_thread_index(::google::protobuf::uint32 value) {
  
  thread_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGGiveUpGameRsp.thread_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGSkillPreviewAskReq::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGSkillPreviewAskReq::ServerGCGSkillPreviewAskReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGSkillPreviewAskReq)
}
ServerGCGSkillPreviewAskReq::ServerGCGSkillPreviewAskReq(const ServerGCGSkillPreviewAskReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGSkillPreviewAskReq)
}

void ServerGCGSkillPreviewAskReq::SharedCtor() {
  uid_ = 0u;
  _cached_size_ = 0;
}

ServerGCGSkillPreviewAskReq::~ServerGCGSkillPreviewAskReq() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGSkillPreviewAskReq)
  SharedDtor();
}

void ServerGCGSkillPreviewAskReq::SharedDtor() {
}

void ServerGCGSkillPreviewAskReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGSkillPreviewAskReq::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGSkillPreviewAskReq& ServerGCGSkillPreviewAskReq::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGSkillPreviewAskReq* ServerGCGSkillPreviewAskReq::New(::google::protobuf::Arena* arena) const {
  ServerGCGSkillPreviewAskReq* n = new ServerGCGSkillPreviewAskReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGSkillPreviewAskReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGSkillPreviewAskReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0u;
  _internal_metadata_.Clear();
}

bool ServerGCGSkillPreviewAskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGSkillPreviewAskReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGSkillPreviewAskReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGSkillPreviewAskReq)
  return false;
#undef DO_
}

void ServerGCGSkillPreviewAskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGSkillPreviewAskReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGSkillPreviewAskReq)
}

::google::protobuf::uint8* ServerGCGSkillPreviewAskReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGSkillPreviewAskReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGSkillPreviewAskReq)
  return target;
}

size_t ServerGCGSkillPreviewAskReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGSkillPreviewAskReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGSkillPreviewAskReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGSkillPreviewAskReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGSkillPreviewAskReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGSkillPreviewAskReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGSkillPreviewAskReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGSkillPreviewAskReq)
    MergeFrom(*source);
  }
}

void ServerGCGSkillPreviewAskReq::MergeFrom(const ServerGCGSkillPreviewAskReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGSkillPreviewAskReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void ServerGCGSkillPreviewAskReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGSkillPreviewAskReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGSkillPreviewAskReq::CopyFrom(const ServerGCGSkillPreviewAskReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGSkillPreviewAskReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGSkillPreviewAskReq::IsInitialized() const {
  return true;
}

void ServerGCGSkillPreviewAskReq::Swap(ServerGCGSkillPreviewAskReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGSkillPreviewAskReq::InternalSwap(ServerGCGSkillPreviewAskReq* other) {
  using std::swap;
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGSkillPreviewAskReq::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGSkillPreviewAskReq

// uint32 uid = 1;
void ServerGCGSkillPreviewAskReq::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 ServerGCGSkillPreviewAskReq::uid() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGSkillPreviewAskReq.uid)
  return uid_;
}
void ServerGCGSkillPreviewAskReq::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGSkillPreviewAskReq.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGSkillPreviewAskRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGSkillPreviewAskRsp::ServerGCGSkillPreviewAskRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGSkillPreviewAskRsp)
}
ServerGCGSkillPreviewAskRsp::ServerGCGSkillPreviewAskRsp(const ServerGCGSkillPreviewAskRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGSkillPreviewAskRsp)
}

void ServerGCGSkillPreviewAskRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

ServerGCGSkillPreviewAskRsp::~ServerGCGSkillPreviewAskRsp() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGSkillPreviewAskRsp)
  SharedDtor();
}

void ServerGCGSkillPreviewAskRsp::SharedDtor() {
}

void ServerGCGSkillPreviewAskRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGSkillPreviewAskRsp::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGSkillPreviewAskRsp& ServerGCGSkillPreviewAskRsp::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGSkillPreviewAskRsp* ServerGCGSkillPreviewAskRsp::New(::google::protobuf::Arena* arena) const {
  ServerGCGSkillPreviewAskRsp* n = new ServerGCGSkillPreviewAskRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGSkillPreviewAskRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGSkillPreviewAskRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool ServerGCGSkillPreviewAskRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGSkillPreviewAskRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGSkillPreviewAskRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGSkillPreviewAskRsp)
  return false;
#undef DO_
}

void ServerGCGSkillPreviewAskRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGSkillPreviewAskRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGSkillPreviewAskRsp)
}

::google::protobuf::uint8* ServerGCGSkillPreviewAskRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGSkillPreviewAskRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGSkillPreviewAskRsp)
  return target;
}

size_t ServerGCGSkillPreviewAskRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGSkillPreviewAskRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGSkillPreviewAskRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGSkillPreviewAskRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGSkillPreviewAskRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGSkillPreviewAskRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGSkillPreviewAskRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGSkillPreviewAskRsp)
    MergeFrom(*source);
  }
}

void ServerGCGSkillPreviewAskRsp::MergeFrom(const ServerGCGSkillPreviewAskRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGSkillPreviewAskRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void ServerGCGSkillPreviewAskRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGSkillPreviewAskRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGSkillPreviewAskRsp::CopyFrom(const ServerGCGSkillPreviewAskRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGSkillPreviewAskRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGSkillPreviewAskRsp::IsInitialized() const {
  return true;
}

void ServerGCGSkillPreviewAskRsp::Swap(ServerGCGSkillPreviewAskRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGSkillPreviewAskRsp::InternalSwap(ServerGCGSkillPreviewAskRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGSkillPreviewAskRsp::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGSkillPreviewAskRsp

// int32 retcode = 1;
void ServerGCGSkillPreviewAskRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 ServerGCGSkillPreviewAskRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGSkillPreviewAskRsp.retcode)
  return retcode_;
}
void ServerGCGSkillPreviewAskRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGSkillPreviewAskRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGCreateMultiGameReq::kGameIdFieldNumber;
const int ServerGCGCreateMultiGameReq::kBusinessTypeFieldNumber;
const int ServerGCGCreateMultiGameReq::kPlayerData1FieldNumber;
const int ServerGCGCreateMultiGameReq::kPlayerData2FieldNumber;
const int ServerGCGCreateMultiGameReq::kTryCreateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGCreateMultiGameReq::ServerGCGCreateMultiGameReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGCreateMultiGameReq)
}
ServerGCGCreateMultiGameReq::ServerGCGCreateMultiGameReq(const ServerGCGCreateMultiGameReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player_data_1()) {
    player_data_1_ = new ::proto::GCGPlayerData(*from.player_data_1_);
  } else {
    player_data_1_ = NULL;
  }
  if (from.has_player_data_2()) {
    player_data_2_ = new ::proto::GCGPlayerData(*from.player_data_2_);
  } else {
    player_data_2_ = NULL;
  }
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&try_create_time_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(try_create_time_));
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGCreateMultiGameReq)
}

void ServerGCGCreateMultiGameReq::SharedCtor() {
  ::memset(&player_data_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&try_create_time_) -
      reinterpret_cast<char*>(&player_data_1_)) + sizeof(try_create_time_));
  _cached_size_ = 0;
}

ServerGCGCreateMultiGameReq::~ServerGCGCreateMultiGameReq() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGCreateMultiGameReq)
  SharedDtor();
}

void ServerGCGCreateMultiGameReq::SharedDtor() {
  if (this != internal_default_instance()) delete player_data_1_;
  if (this != internal_default_instance()) delete player_data_2_;
}

void ServerGCGCreateMultiGameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGCreateMultiGameReq::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGCreateMultiGameReq& ServerGCGCreateMultiGameReq::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGCreateMultiGameReq* ServerGCGCreateMultiGameReq::New(::google::protobuf::Arena* arena) const {
  ServerGCGCreateMultiGameReq* n = new ServerGCGCreateMultiGameReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGCreateMultiGameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGCreateMultiGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && player_data_1_ != NULL) {
    delete player_data_1_;
  }
  player_data_1_ = NULL;
  if (GetArenaNoVirtual() == NULL && player_data_2_ != NULL) {
    delete player_data_2_;
  }
  player_data_2_ = NULL;
  ::memset(&game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&try_create_time_) -
      reinterpret_cast<char*>(&game_id_)) + sizeof(try_create_time_));
  _internal_metadata_.Clear();
}

bool ServerGCGCreateMultiGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGCreateMultiGameReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 game_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGGameBusinessType business_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_business_type(static_cast< ::proto::GCGGameBusinessType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGPlayerData player_data_1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_data_1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGPlayerData player_data_2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_data_2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 try_create_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &try_create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGCreateMultiGameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGCreateMultiGameReq)
  return false;
#undef DO_
}

void ServerGCGCreateMultiGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGCreateMultiGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_id = 1;
  if (this->game_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_id(), output);
  }

  // .proto.GCGGameBusinessType business_type = 2;
  if (this->business_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->business_type(), output);
  }

  // .proto.GCGPlayerData player_data_1 = 3;
  if (this->has_player_data_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->player_data_1_, output);
  }

  // .proto.GCGPlayerData player_data_2 = 4;
  if (this->has_player_data_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->player_data_2_, output);
  }

  // uint32 try_create_time = 5;
  if (this->try_create_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->try_create_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGCreateMultiGameReq)
}

::google::protobuf::uint8* ServerGCGCreateMultiGameReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGCreateMultiGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_id = 1;
  if (this->game_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_id(), target);
  }

  // .proto.GCGGameBusinessType business_type = 2;
  if (this->business_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->business_type(), target);
  }

  // .proto.GCGPlayerData player_data_1 = 3;
  if (this->has_player_data_1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->player_data_1_, deterministic, target);
  }

  // .proto.GCGPlayerData player_data_2 = 4;
  if (this->has_player_data_2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->player_data_2_, deterministic, target);
  }

  // uint32 try_create_time = 5;
  if (this->try_create_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->try_create_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGCreateMultiGameReq)
  return target;
}

size_t ServerGCGCreateMultiGameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGCreateMultiGameReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.GCGPlayerData player_data_1 = 3;
  if (this->has_player_data_1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_data_1_);
  }

  // .proto.GCGPlayerData player_data_2 = 4;
  if (this->has_player_data_2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_data_2_);
  }

  // uint32 game_id = 1;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_id());
  }

  // .proto.GCGGameBusinessType business_type = 2;
  if (this->business_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->business_type());
  }

  // uint32 try_create_time = 5;
  if (this->try_create_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->try_create_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGCreateMultiGameReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGCreateMultiGameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGCreateMultiGameReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGCreateMultiGameReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGCreateMultiGameReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGCreateMultiGameReq)
    MergeFrom(*source);
  }
}

void ServerGCGCreateMultiGameReq::MergeFrom(const ServerGCGCreateMultiGameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGCreateMultiGameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_data_1()) {
    mutable_player_data_1()->::proto::GCGPlayerData::MergeFrom(from.player_data_1());
  }
  if (from.has_player_data_2()) {
    mutable_player_data_2()->::proto::GCGPlayerData::MergeFrom(from.player_data_2());
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
  if (from.business_type() != 0) {
    set_business_type(from.business_type());
  }
  if (from.try_create_time() != 0) {
    set_try_create_time(from.try_create_time());
  }
}

void ServerGCGCreateMultiGameReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGCreateMultiGameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGCreateMultiGameReq::CopyFrom(const ServerGCGCreateMultiGameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGCreateMultiGameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGCreateMultiGameReq::IsInitialized() const {
  return true;
}

void ServerGCGCreateMultiGameReq::Swap(ServerGCGCreateMultiGameReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGCreateMultiGameReq::InternalSwap(ServerGCGCreateMultiGameReq* other) {
  using std::swap;
  swap(player_data_1_, other->player_data_1_);
  swap(player_data_2_, other->player_data_2_);
  swap(game_id_, other->game_id_);
  swap(business_type_, other->business_type_);
  swap(try_create_time_, other->try_create_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGCreateMultiGameReq::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGCreateMultiGameReq

// uint32 game_id = 1;
void ServerGCGCreateMultiGameReq::clear_game_id() {
  game_id_ = 0u;
}
::google::protobuf::uint32 ServerGCGCreateMultiGameReq::game_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGCreateMultiGameReq.game_id)
  return game_id_;
}
void ServerGCGCreateMultiGameReq::set_game_id(::google::protobuf::uint32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGCreateMultiGameReq.game_id)
}

// .proto.GCGGameBusinessType business_type = 2;
void ServerGCGCreateMultiGameReq::clear_business_type() {
  business_type_ = 0;
}
::proto::GCGGameBusinessType ServerGCGCreateMultiGameReq::business_type() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGCreateMultiGameReq.business_type)
  return static_cast< ::proto::GCGGameBusinessType >(business_type_);
}
void ServerGCGCreateMultiGameReq::set_business_type(::proto::GCGGameBusinessType value) {
  
  business_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGCreateMultiGameReq.business_type)
}

// .proto.GCGPlayerData player_data_1 = 3;
bool ServerGCGCreateMultiGameReq::has_player_data_1() const {
  return this != internal_default_instance() && player_data_1_ != NULL;
}
void ServerGCGCreateMultiGameReq::clear_player_data_1() {
  if (GetArenaNoVirtual() == NULL && player_data_1_ != NULL) delete player_data_1_;
  player_data_1_ = NULL;
}
const ::proto::GCGPlayerData& ServerGCGCreateMultiGameReq::player_data_1() const {
  const ::proto::GCGPlayerData* p = player_data_1_;
  // @@protoc_insertion_point(field_get:proto.ServerGCGCreateMultiGameReq.player_data_1)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGPlayerData*>(
      &::proto::_GCGPlayerData_default_instance_);
}
::proto::GCGPlayerData* ServerGCGCreateMultiGameReq::mutable_player_data_1() {
  
  if (player_data_1_ == NULL) {
    player_data_1_ = new ::proto::GCGPlayerData;
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerGCGCreateMultiGameReq.player_data_1)
  return player_data_1_;
}
::proto::GCGPlayerData* ServerGCGCreateMultiGameReq::release_player_data_1() {
  // @@protoc_insertion_point(field_release:proto.ServerGCGCreateMultiGameReq.player_data_1)
  
  ::proto::GCGPlayerData* temp = player_data_1_;
  player_data_1_ = NULL;
  return temp;
}
void ServerGCGCreateMultiGameReq::set_allocated_player_data_1(::proto::GCGPlayerData* player_data_1) {
  delete player_data_1_;
  player_data_1_ = player_data_1;
  if (player_data_1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerGCGCreateMultiGameReq.player_data_1)
}

// .proto.GCGPlayerData player_data_2 = 4;
bool ServerGCGCreateMultiGameReq::has_player_data_2() const {
  return this != internal_default_instance() && player_data_2_ != NULL;
}
void ServerGCGCreateMultiGameReq::clear_player_data_2() {
  if (GetArenaNoVirtual() == NULL && player_data_2_ != NULL) delete player_data_2_;
  player_data_2_ = NULL;
}
const ::proto::GCGPlayerData& ServerGCGCreateMultiGameReq::player_data_2() const {
  const ::proto::GCGPlayerData* p = player_data_2_;
  // @@protoc_insertion_point(field_get:proto.ServerGCGCreateMultiGameReq.player_data_2)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGPlayerData*>(
      &::proto::_GCGPlayerData_default_instance_);
}
::proto::GCGPlayerData* ServerGCGCreateMultiGameReq::mutable_player_data_2() {
  
  if (player_data_2_ == NULL) {
    player_data_2_ = new ::proto::GCGPlayerData;
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerGCGCreateMultiGameReq.player_data_2)
  return player_data_2_;
}
::proto::GCGPlayerData* ServerGCGCreateMultiGameReq::release_player_data_2() {
  // @@protoc_insertion_point(field_release:proto.ServerGCGCreateMultiGameReq.player_data_2)
  
  ::proto::GCGPlayerData* temp = player_data_2_;
  player_data_2_ = NULL;
  return temp;
}
void ServerGCGCreateMultiGameReq::set_allocated_player_data_2(::proto::GCGPlayerData* player_data_2) {
  delete player_data_2_;
  player_data_2_ = player_data_2;
  if (player_data_2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerGCGCreateMultiGameReq.player_data_2)
}

// uint32 try_create_time = 5;
void ServerGCGCreateMultiGameReq::clear_try_create_time() {
  try_create_time_ = 0u;
}
::google::protobuf::uint32 ServerGCGCreateMultiGameReq::try_create_time() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGCreateMultiGameReq.try_create_time)
  return try_create_time_;
}
void ServerGCGCreateMultiGameReq::set_try_create_time(::google::protobuf::uint32 value) {
  
  try_create_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGCreateMultiGameReq.try_create_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGCreateMultiGameRsp::kRetcodeFieldNumber;
const int ServerGCGCreateMultiGameRsp::kGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGCreateMultiGameRsp::ServerGCGCreateMultiGameRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGCreateMultiGameRsp)
}
ServerGCGCreateMultiGameRsp::ServerGCGCreateMultiGameRsp(const ServerGCGCreateMultiGameRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(game_id_));
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGCreateMultiGameRsp)
}

void ServerGCGCreateMultiGameRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(game_id_));
  _cached_size_ = 0;
}

ServerGCGCreateMultiGameRsp::~ServerGCGCreateMultiGameRsp() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGCreateMultiGameRsp)
  SharedDtor();
}

void ServerGCGCreateMultiGameRsp::SharedDtor() {
}

void ServerGCGCreateMultiGameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGCreateMultiGameRsp::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGCreateMultiGameRsp& ServerGCGCreateMultiGameRsp::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGCreateMultiGameRsp* ServerGCGCreateMultiGameRsp::New(::google::protobuf::Arena* arena) const {
  ServerGCGCreateMultiGameRsp* n = new ServerGCGCreateMultiGameRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGCreateMultiGameRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGCreateMultiGameRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(game_id_));
  _internal_metadata_.Clear();
}

bool ServerGCGCreateMultiGameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGCreateMultiGameRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGCreateMultiGameRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGCreateMultiGameRsp)
  return false;
#undef DO_
}

void ServerGCGCreateMultiGameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGCreateMultiGameRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 game_id = 2;
  if (this->game_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGCreateMultiGameRsp)
}

::google::protobuf::uint8* ServerGCGCreateMultiGameRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGCreateMultiGameRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 game_id = 2;
  if (this->game_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGCreateMultiGameRsp)
  return target;
}

size_t ServerGCGCreateMultiGameRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGCreateMultiGameRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 game_id = 2;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGCreateMultiGameRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGCreateMultiGameRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGCreateMultiGameRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGCreateMultiGameRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGCreateMultiGameRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGCreateMultiGameRsp)
    MergeFrom(*source);
  }
}

void ServerGCGCreateMultiGameRsp::MergeFrom(const ServerGCGCreateMultiGameRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGCreateMultiGameRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
}

void ServerGCGCreateMultiGameRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGCreateMultiGameRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGCreateMultiGameRsp::CopyFrom(const ServerGCGCreateMultiGameRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGCreateMultiGameRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGCreateMultiGameRsp::IsInitialized() const {
  return true;
}

void ServerGCGCreateMultiGameRsp::Swap(ServerGCGCreateMultiGameRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGCreateMultiGameRsp::InternalSwap(ServerGCGCreateMultiGameRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(game_id_, other->game_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGCreateMultiGameRsp::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGCreateMultiGameRsp

// int32 retcode = 1;
void ServerGCGCreateMultiGameRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 ServerGCGCreateMultiGameRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGCreateMultiGameRsp.retcode)
  return retcode_;
}
void ServerGCGCreateMultiGameRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGCreateMultiGameRsp.retcode)
}

// uint32 game_id = 2;
void ServerGCGCreateMultiGameRsp::clear_game_id() {
  game_id_ = 0u;
}
::google::protobuf::uint32 ServerGCGCreateMultiGameRsp::game_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGCreateMultiGameRsp.game_id)
  return game_id_;
}
void ServerGCGCreateMultiGameRsp::set_game_id(::google::protobuf::uint32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGCreateMultiGameRsp.game_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGAddBothAITaskReq::kTaskIdFieldNumber;
const int ServerGCGAddBothAITaskReq::kSubtaskIdFieldNumber;
const int ServerGCGAddBothAITaskReq::kGameTypeFieldNumber;
const int ServerGCGAddBothAITaskReq::kLevelIdFieldNumber;
const int ServerGCGAddBothAITaskReq::kCardGroup1IdFieldNumber;
const int ServerGCGAddBothAITaskReq::kCardGroup2IdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGAddBothAITaskReq::ServerGCGAddBothAITaskReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGAddBothAITaskReq)
}
ServerGCGAddBothAITaskReq::ServerGCGAddBothAITaskReq(const ServerGCGAddBothAITaskReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&task_id_, &from.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_group2_id_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(card_group2_id_));
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGAddBothAITaskReq)
}

void ServerGCGAddBothAITaskReq::SharedCtor() {
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_group2_id_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(card_group2_id_));
  _cached_size_ = 0;
}

ServerGCGAddBothAITaskReq::~ServerGCGAddBothAITaskReq() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGAddBothAITaskReq)
  SharedDtor();
}

void ServerGCGAddBothAITaskReq::SharedDtor() {
}

void ServerGCGAddBothAITaskReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGAddBothAITaskReq::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGAddBothAITaskReq& ServerGCGAddBothAITaskReq::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGAddBothAITaskReq* ServerGCGAddBothAITaskReq::New(::google::protobuf::Arena* arena) const {
  ServerGCGAddBothAITaskReq* n = new ServerGCGAddBothAITaskReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGAddBothAITaskReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGAddBothAITaskReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_group2_id_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(card_group2_id_));
  _internal_metadata_.Clear();
}

bool ServerGCGAddBothAITaskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGAddBothAITaskReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 task_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 subtask_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subtask_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_group1_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_group1_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_group2_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_group2_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGAddBothAITaskReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGAddBothAITaskReq)
  return false;
#undef DO_
}

void ServerGCGAddBothAITaskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGAddBothAITaskReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_id(), output);
  }

  // uint32 subtask_id = 2;
  if (this->subtask_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->subtask_id(), output);
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_type(), output);
  }

  // uint32 level_id = 4;
  if (this->level_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level_id(), output);
  }

  // uint32 card_group1_id = 5;
  if (this->card_group1_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->card_group1_id(), output);
  }

  // uint32 card_group2_id = 6;
  if (this->card_group2_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->card_group2_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGAddBothAITaskReq)
}

::google::protobuf::uint8* ServerGCGAddBothAITaskReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGAddBothAITaskReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_id(), target);
  }

  // uint32 subtask_id = 2;
  if (this->subtask_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->subtask_id(), target);
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_type(), target);
  }

  // uint32 level_id = 4;
  if (this->level_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level_id(), target);
  }

  // uint32 card_group1_id = 5;
  if (this->card_group1_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->card_group1_id(), target);
  }

  // uint32 card_group2_id = 6;
  if (this->card_group2_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->card_group2_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGAddBothAITaskReq)
  return target;
}

size_t ServerGCGAddBothAITaskReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGAddBothAITaskReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->task_id());
  }

  // uint32 subtask_id = 2;
  if (this->subtask_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->subtask_id());
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_type());
  }

  // uint32 level_id = 4;
  if (this->level_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level_id());
  }

  // uint32 card_group1_id = 5;
  if (this->card_group1_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_group1_id());
  }

  // uint32 card_group2_id = 6;
  if (this->card_group2_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_group2_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGAddBothAITaskReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGAddBothAITaskReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGAddBothAITaskReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGAddBothAITaskReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGAddBothAITaskReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGAddBothAITaskReq)
    MergeFrom(*source);
  }
}

void ServerGCGAddBothAITaskReq::MergeFrom(const ServerGCGAddBothAITaskReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGAddBothAITaskReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
  if (from.subtask_id() != 0) {
    set_subtask_id(from.subtask_id());
  }
  if (from.game_type() != 0) {
    set_game_type(from.game_type());
  }
  if (from.level_id() != 0) {
    set_level_id(from.level_id());
  }
  if (from.card_group1_id() != 0) {
    set_card_group1_id(from.card_group1_id());
  }
  if (from.card_group2_id() != 0) {
    set_card_group2_id(from.card_group2_id());
  }
}

void ServerGCGAddBothAITaskReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGAddBothAITaskReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGAddBothAITaskReq::CopyFrom(const ServerGCGAddBothAITaskReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGAddBothAITaskReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGAddBothAITaskReq::IsInitialized() const {
  return true;
}

void ServerGCGAddBothAITaskReq::Swap(ServerGCGAddBothAITaskReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGAddBothAITaskReq::InternalSwap(ServerGCGAddBothAITaskReq* other) {
  using std::swap;
  swap(task_id_, other->task_id_);
  swap(subtask_id_, other->subtask_id_);
  swap(game_type_, other->game_type_);
  swap(level_id_, other->level_id_);
  swap(card_group1_id_, other->card_group1_id_);
  swap(card_group2_id_, other->card_group2_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGAddBothAITaskReq::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGAddBothAITaskReq

// uint64 task_id = 1;
void ServerGCGAddBothAITaskReq::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ServerGCGAddBothAITaskReq::task_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGAddBothAITaskReq.task_id)
  return task_id_;
}
void ServerGCGAddBothAITaskReq::set_task_id(::google::protobuf::uint64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGAddBothAITaskReq.task_id)
}

// uint32 subtask_id = 2;
void ServerGCGAddBothAITaskReq::clear_subtask_id() {
  subtask_id_ = 0u;
}
::google::protobuf::uint32 ServerGCGAddBothAITaskReq::subtask_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGAddBothAITaskReq.subtask_id)
  return subtask_id_;
}
void ServerGCGAddBothAITaskReq::set_subtask_id(::google::protobuf::uint32 value) {
  
  subtask_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGAddBothAITaskReq.subtask_id)
}

// uint32 game_type = 3;
void ServerGCGAddBothAITaskReq::clear_game_type() {
  game_type_ = 0u;
}
::google::protobuf::uint32 ServerGCGAddBothAITaskReq::game_type() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGAddBothAITaskReq.game_type)
  return game_type_;
}
void ServerGCGAddBothAITaskReq::set_game_type(::google::protobuf::uint32 value) {
  
  game_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGAddBothAITaskReq.game_type)
}

// uint32 level_id = 4;
void ServerGCGAddBothAITaskReq::clear_level_id() {
  level_id_ = 0u;
}
::google::protobuf::uint32 ServerGCGAddBothAITaskReq::level_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGAddBothAITaskReq.level_id)
  return level_id_;
}
void ServerGCGAddBothAITaskReq::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGAddBothAITaskReq.level_id)
}

// uint32 card_group1_id = 5;
void ServerGCGAddBothAITaskReq::clear_card_group1_id() {
  card_group1_id_ = 0u;
}
::google::protobuf::uint32 ServerGCGAddBothAITaskReq::card_group1_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGAddBothAITaskReq.card_group1_id)
  return card_group1_id_;
}
void ServerGCGAddBothAITaskReq::set_card_group1_id(::google::protobuf::uint32 value) {
  
  card_group1_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGAddBothAITaskReq.card_group1_id)
}

// uint32 card_group2_id = 6;
void ServerGCGAddBothAITaskReq::clear_card_group2_id() {
  card_group2_id_ = 0u;
}
::google::protobuf::uint32 ServerGCGAddBothAITaskReq::card_group2_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGAddBothAITaskReq.card_group2_id)
  return card_group2_id_;
}
void ServerGCGAddBothAITaskReq::set_card_group2_id(::google::protobuf::uint32 value) {
  
  card_group2_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGAddBothAITaskReq.card_group2_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGAddBothAITaskRsp::kRetcodeFieldNumber;
const int ServerGCGAddBothAITaskRsp::kTaskIdFieldNumber;
const int ServerGCGAddBothAITaskRsp::kSubtaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGAddBothAITaskRsp::ServerGCGAddBothAITaskRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGAddBothAITaskRsp)
}
ServerGCGAddBothAITaskRsp::ServerGCGAddBothAITaskRsp(const ServerGCGAddBothAITaskRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&subtask_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(subtask_id_));
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGAddBothAITaskRsp)
}

void ServerGCGAddBothAITaskRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subtask_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(subtask_id_));
  _cached_size_ = 0;
}

ServerGCGAddBothAITaskRsp::~ServerGCGAddBothAITaskRsp() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGAddBothAITaskRsp)
  SharedDtor();
}

void ServerGCGAddBothAITaskRsp::SharedDtor() {
}

void ServerGCGAddBothAITaskRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGAddBothAITaskRsp::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGAddBothAITaskRsp& ServerGCGAddBothAITaskRsp::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGAddBothAITaskRsp* ServerGCGAddBothAITaskRsp::New(::google::protobuf::Arena* arena) const {
  ServerGCGAddBothAITaskRsp* n = new ServerGCGAddBothAITaskRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGAddBothAITaskRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGAddBothAITaskRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subtask_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(subtask_id_));
  _internal_metadata_.Clear();
}

bool ServerGCGAddBothAITaskRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGAddBothAITaskRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 task_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 subtask_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subtask_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGAddBothAITaskRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGAddBothAITaskRsp)
  return false;
#undef DO_
}

void ServerGCGAddBothAITaskRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGAddBothAITaskRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 task_id = 2;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_id(), output);
  }

  // uint32 subtask_id = 3;
  if (this->subtask_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->subtask_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGAddBothAITaskRsp)
}

::google::protobuf::uint8* ServerGCGAddBothAITaskRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGAddBothAITaskRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 task_id = 2;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->task_id(), target);
  }

  // uint32 subtask_id = 3;
  if (this->subtask_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->subtask_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGAddBothAITaskRsp)
  return target;
}

size_t ServerGCGAddBothAITaskRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGAddBothAITaskRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 task_id = 2;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->task_id());
  }

  // uint32 subtask_id = 3;
  if (this->subtask_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->subtask_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGAddBothAITaskRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGAddBothAITaskRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGAddBothAITaskRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGAddBothAITaskRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGAddBothAITaskRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGAddBothAITaskRsp)
    MergeFrom(*source);
  }
}

void ServerGCGAddBothAITaskRsp::MergeFrom(const ServerGCGAddBothAITaskRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGAddBothAITaskRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
  if (from.subtask_id() != 0) {
    set_subtask_id(from.subtask_id());
  }
}

void ServerGCGAddBothAITaskRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGAddBothAITaskRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGAddBothAITaskRsp::CopyFrom(const ServerGCGAddBothAITaskRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGAddBothAITaskRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGAddBothAITaskRsp::IsInitialized() const {
  return true;
}

void ServerGCGAddBothAITaskRsp::Swap(ServerGCGAddBothAITaskRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGAddBothAITaskRsp::InternalSwap(ServerGCGAddBothAITaskRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(task_id_, other->task_id_);
  swap(subtask_id_, other->subtask_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGAddBothAITaskRsp::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGAddBothAITaskRsp

// int32 retcode = 1;
void ServerGCGAddBothAITaskRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 ServerGCGAddBothAITaskRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGAddBothAITaskRsp.retcode)
  return retcode_;
}
void ServerGCGAddBothAITaskRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGAddBothAITaskRsp.retcode)
}

// uint32 task_id = 2;
void ServerGCGAddBothAITaskRsp::clear_task_id() {
  task_id_ = 0u;
}
::google::protobuf::uint32 ServerGCGAddBothAITaskRsp::task_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGAddBothAITaskRsp.task_id)
  return task_id_;
}
void ServerGCGAddBothAITaskRsp::set_task_id(::google::protobuf::uint32 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGAddBothAITaskRsp.task_id)
}

// uint32 subtask_id = 3;
void ServerGCGAddBothAITaskRsp::clear_subtask_id() {
  subtask_id_ = 0u;
}
::google::protobuf::uint32 ServerGCGAddBothAITaskRsp::subtask_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGAddBothAITaskRsp.subtask_id)
  return subtask_id_;
}
void ServerGCGAddBothAITaskRsp::set_subtask_id(::google::protobuf::uint32 value) {
  
  subtask_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGAddBothAITaskRsp.subtask_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMatchPlayerInfo::kMatchPlayerFieldNumber;
const int GCGMatchPlayerInfo::kGcgDuelExtraFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMatchPlayerInfo::GCGMatchPlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMatchPlayerInfo)
}
GCGMatchPlayerInfo::GCGMatchPlayerInfo(const GCGMatchPlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_match_player()) {
    match_player_ = new ::proto::MatchPlayer(*from.match_player_);
  } else {
    match_player_ = NULL;
  }
  if (from.has_gcg_duel_extra()) {
    gcg_duel_extra_ = new ::proto::GCGDuelExtra(*from.gcg_duel_extra_);
  } else {
    gcg_duel_extra_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.GCGMatchPlayerInfo)
}

void GCGMatchPlayerInfo::SharedCtor() {
  ::memset(&match_player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gcg_duel_extra_) -
      reinterpret_cast<char*>(&match_player_)) + sizeof(gcg_duel_extra_));
  _cached_size_ = 0;
}

GCGMatchPlayerInfo::~GCGMatchPlayerInfo() {
  // @@protoc_insertion_point(destructor:proto.GCGMatchPlayerInfo)
  SharedDtor();
}

void GCGMatchPlayerInfo::SharedDtor() {
  if (this != internal_default_instance()) delete match_player_;
  if (this != internal_default_instance()) delete gcg_duel_extra_;
}

void GCGMatchPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMatchPlayerInfo::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMatchPlayerInfo& GCGMatchPlayerInfo::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMatchPlayerInfo* GCGMatchPlayerInfo::New(::google::protobuf::Arena* arena) const {
  GCGMatchPlayerInfo* n = new GCGMatchPlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMatchPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMatchPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && match_player_ != NULL) {
    delete match_player_;
  }
  match_player_ = NULL;
  if (GetArenaNoVirtual() == NULL && gcg_duel_extra_ != NULL) {
    delete gcg_duel_extra_;
  }
  gcg_duel_extra_ = NULL;
  _internal_metadata_.Clear();
}

bool GCGMatchPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMatchPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.MatchPlayer match_player = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGDuelExtra gcg_duel_extra = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gcg_duel_extra()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMatchPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMatchPlayerInfo)
  return false;
#undef DO_
}

void GCGMatchPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMatchPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.MatchPlayer match_player = 1;
  if (this->has_match_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->match_player_, output);
  }

  // .proto.GCGDuelExtra gcg_duel_extra = 2;
  if (this->has_gcg_duel_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->gcg_duel_extra_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMatchPlayerInfo)
}

::google::protobuf::uint8* GCGMatchPlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMatchPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.MatchPlayer match_player = 1;
  if (this->has_match_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->match_player_, deterministic, target);
  }

  // .proto.GCGDuelExtra gcg_duel_extra = 2;
  if (this->has_gcg_duel_extra()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->gcg_duel_extra_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMatchPlayerInfo)
  return target;
}

size_t GCGMatchPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMatchPlayerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.MatchPlayer match_player = 1;
  if (this->has_match_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->match_player_);
  }

  // .proto.GCGDuelExtra gcg_duel_extra = 2;
  if (this->has_gcg_duel_extra()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gcg_duel_extra_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMatchPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMatchPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMatchPlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMatchPlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMatchPlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMatchPlayerInfo)
    MergeFrom(*source);
  }
}

void GCGMatchPlayerInfo::MergeFrom(const GCGMatchPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMatchPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_match_player()) {
    mutable_match_player()->::proto::MatchPlayer::MergeFrom(from.match_player());
  }
  if (from.has_gcg_duel_extra()) {
    mutable_gcg_duel_extra()->::proto::GCGDuelExtra::MergeFrom(from.gcg_duel_extra());
  }
}

void GCGMatchPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMatchPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMatchPlayerInfo::CopyFrom(const GCGMatchPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMatchPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMatchPlayerInfo::IsInitialized() const {
  return true;
}

void GCGMatchPlayerInfo::Swap(GCGMatchPlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMatchPlayerInfo::InternalSwap(GCGMatchPlayerInfo* other) {
  using std::swap;
  swap(match_player_, other->match_player_);
  swap(gcg_duel_extra_, other->gcg_duel_extra_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMatchPlayerInfo::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMatchPlayerInfo

// .proto.MatchPlayer match_player = 1;
bool GCGMatchPlayerInfo::has_match_player() const {
  return this != internal_default_instance() && match_player_ != NULL;
}
void GCGMatchPlayerInfo::clear_match_player() {
  if (GetArenaNoVirtual() == NULL && match_player_ != NULL) delete match_player_;
  match_player_ = NULL;
}
const ::proto::MatchPlayer& GCGMatchPlayerInfo::match_player() const {
  const ::proto::MatchPlayer* p = match_player_;
  // @@protoc_insertion_point(field_get:proto.GCGMatchPlayerInfo.match_player)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::MatchPlayer*>(
      &::proto::_MatchPlayer_default_instance_);
}
::proto::MatchPlayer* GCGMatchPlayerInfo::mutable_match_player() {
  
  if (match_player_ == NULL) {
    match_player_ = new ::proto::MatchPlayer;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMatchPlayerInfo.match_player)
  return match_player_;
}
::proto::MatchPlayer* GCGMatchPlayerInfo::release_match_player() {
  // @@protoc_insertion_point(field_release:proto.GCGMatchPlayerInfo.match_player)
  
  ::proto::MatchPlayer* temp = match_player_;
  match_player_ = NULL;
  return temp;
}
void GCGMatchPlayerInfo::set_allocated_match_player(::proto::MatchPlayer* match_player) {
  delete match_player_;
  match_player_ = match_player;
  if (match_player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMatchPlayerInfo.match_player)
}

// .proto.GCGDuelExtra gcg_duel_extra = 2;
bool GCGMatchPlayerInfo::has_gcg_duel_extra() const {
  return this != internal_default_instance() && gcg_duel_extra_ != NULL;
}
void GCGMatchPlayerInfo::clear_gcg_duel_extra() {
  if (GetArenaNoVirtual() == NULL && gcg_duel_extra_ != NULL) delete gcg_duel_extra_;
  gcg_duel_extra_ = NULL;
}
const ::proto::GCGDuelExtra& GCGMatchPlayerInfo::gcg_duel_extra() const {
  const ::proto::GCGDuelExtra* p = gcg_duel_extra_;
  // @@protoc_insertion_point(field_get:proto.GCGMatchPlayerInfo.gcg_duel_extra)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGDuelExtra*>(
      &::proto::_GCGDuelExtra_default_instance_);
}
::proto::GCGDuelExtra* GCGMatchPlayerInfo::mutable_gcg_duel_extra() {
  
  if (gcg_duel_extra_ == NULL) {
    gcg_duel_extra_ = new ::proto::GCGDuelExtra;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMatchPlayerInfo.gcg_duel_extra)
  return gcg_duel_extra_;
}
::proto::GCGDuelExtra* GCGMatchPlayerInfo::release_gcg_duel_extra() {
  // @@protoc_insertion_point(field_release:proto.GCGMatchPlayerInfo.gcg_duel_extra)
  
  ::proto::GCGDuelExtra* temp = gcg_duel_extra_;
  gcg_duel_extra_ = NULL;
  return temp;
}
void GCGMatchPlayerInfo::set_allocated_gcg_duel_extra(::proto::GCGDuelExtra* gcg_duel_extra) {
  delete gcg_duel_extra_;
  gcg_duel_extra_ = gcg_duel_extra;
  if (gcg_duel_extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMatchPlayerInfo.gcg_duel_extra)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGCreateMatchGameNotify::kMatchIdFieldNumber;
const int ServerGCGCreateMatchGameNotify::kGcgMatchPlayerListFieldNumber;
const int ServerGCGCreateMatchGameNotify::kTryCreateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGCreateMatchGameNotify::ServerGCGCreateMatchGameNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGCreateMatchGameNotify)
}
ServerGCGCreateMatchGameNotify::ServerGCGCreateMatchGameNotify(const ServerGCGCreateMatchGameNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      gcg_match_player_list_(from.gcg_match_player_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&try_create_time_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(try_create_time_));
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGCreateMatchGameNotify)
}

void ServerGCGCreateMatchGameNotify::SharedCtor() {
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&try_create_time_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(try_create_time_));
  _cached_size_ = 0;
}

ServerGCGCreateMatchGameNotify::~ServerGCGCreateMatchGameNotify() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGCreateMatchGameNotify)
  SharedDtor();
}

void ServerGCGCreateMatchGameNotify::SharedDtor() {
}

void ServerGCGCreateMatchGameNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGCreateMatchGameNotify::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGCreateMatchGameNotify& ServerGCGCreateMatchGameNotify::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGCreateMatchGameNotify* ServerGCGCreateMatchGameNotify::New(::google::protobuf::Arena* arena) const {
  ServerGCGCreateMatchGameNotify* n = new ServerGCGCreateMatchGameNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGCreateMatchGameNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGCreateMatchGameNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gcg_match_player_list_.Clear();
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&try_create_time_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(try_create_time_));
  _internal_metadata_.Clear();
}

bool ServerGCGCreateMatchGameNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGCreateMatchGameNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGMatchPlayerInfo gcg_match_player_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gcg_match_player_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 try_create_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &try_create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGCreateMatchGameNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGCreateMatchGameNotify)
  return false;
#undef DO_
}

void ServerGCGCreateMatchGameNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGCreateMatchGameNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 match_id = 1;
  if (this->match_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->match_id(), output);
  }

  // repeated .proto.GCGMatchPlayerInfo gcg_match_player_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gcg_match_player_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gcg_match_player_list(static_cast<int>(i)), output);
  }

  // uint32 try_create_time = 3;
  if (this->try_create_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->try_create_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGCreateMatchGameNotify)
}

::google::protobuf::uint8* ServerGCGCreateMatchGameNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGCreateMatchGameNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 match_id = 1;
  if (this->match_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->match_id(), target);
  }

  // repeated .proto.GCGMatchPlayerInfo gcg_match_player_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gcg_match_player_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->gcg_match_player_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 try_create_time = 3;
  if (this->try_create_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->try_create_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGCreateMatchGameNotify)
  return target;
}

size_t ServerGCGCreateMatchGameNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGCreateMatchGameNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGMatchPlayerInfo gcg_match_player_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->gcg_match_player_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gcg_match_player_list(static_cast<int>(i)));
    }
  }

  // uint32 match_id = 1;
  if (this->match_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->match_id());
  }

  // uint32 try_create_time = 3;
  if (this->try_create_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->try_create_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGCreateMatchGameNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGCreateMatchGameNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGCreateMatchGameNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGCreateMatchGameNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGCreateMatchGameNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGCreateMatchGameNotify)
    MergeFrom(*source);
  }
}

void ServerGCGCreateMatchGameNotify::MergeFrom(const ServerGCGCreateMatchGameNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGCreateMatchGameNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gcg_match_player_list_.MergeFrom(from.gcg_match_player_list_);
  if (from.match_id() != 0) {
    set_match_id(from.match_id());
  }
  if (from.try_create_time() != 0) {
    set_try_create_time(from.try_create_time());
  }
}

void ServerGCGCreateMatchGameNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGCreateMatchGameNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGCreateMatchGameNotify::CopyFrom(const ServerGCGCreateMatchGameNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGCreateMatchGameNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGCreateMatchGameNotify::IsInitialized() const {
  return true;
}

void ServerGCGCreateMatchGameNotify::Swap(ServerGCGCreateMatchGameNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGCreateMatchGameNotify::InternalSwap(ServerGCGCreateMatchGameNotify* other) {
  using std::swap;
  gcg_match_player_list_.InternalSwap(&other->gcg_match_player_list_);
  swap(match_id_, other->match_id_);
  swap(try_create_time_, other->try_create_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGCreateMatchGameNotify::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGCreateMatchGameNotify

// uint32 match_id = 1;
void ServerGCGCreateMatchGameNotify::clear_match_id() {
  match_id_ = 0u;
}
::google::protobuf::uint32 ServerGCGCreateMatchGameNotify::match_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGCreateMatchGameNotify.match_id)
  return match_id_;
}
void ServerGCGCreateMatchGameNotify::set_match_id(::google::protobuf::uint32 value) {
  
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGCreateMatchGameNotify.match_id)
}

// repeated .proto.GCGMatchPlayerInfo gcg_match_player_list = 2;
int ServerGCGCreateMatchGameNotify::gcg_match_player_list_size() const {
  return gcg_match_player_list_.size();
}
void ServerGCGCreateMatchGameNotify::clear_gcg_match_player_list() {
  gcg_match_player_list_.Clear();
}
const ::proto::GCGMatchPlayerInfo& ServerGCGCreateMatchGameNotify::gcg_match_player_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGCreateMatchGameNotify.gcg_match_player_list)
  return gcg_match_player_list_.Get(index);
}
::proto::GCGMatchPlayerInfo* ServerGCGCreateMatchGameNotify::mutable_gcg_match_player_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ServerGCGCreateMatchGameNotify.gcg_match_player_list)
  return gcg_match_player_list_.Mutable(index);
}
::proto::GCGMatchPlayerInfo* ServerGCGCreateMatchGameNotify::add_gcg_match_player_list() {
  // @@protoc_insertion_point(field_add:proto.ServerGCGCreateMatchGameNotify.gcg_match_player_list)
  return gcg_match_player_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGMatchPlayerInfo >*
ServerGCGCreateMatchGameNotify::mutable_gcg_match_player_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ServerGCGCreateMatchGameNotify.gcg_match_player_list)
  return &gcg_match_player_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGMatchPlayerInfo >&
ServerGCGCreateMatchGameNotify::gcg_match_player_list() const {
  // @@protoc_insertion_point(field_list:proto.ServerGCGCreateMatchGameNotify.gcg_match_player_list)
  return gcg_match_player_list_;
}

// uint32 try_create_time = 3;
void ServerGCGCreateMatchGameNotify::clear_try_create_time() {
  try_create_time_ = 0u;
}
::google::protobuf::uint32 ServerGCGCreateMatchGameNotify::try_create_time() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGCreateMatchGameNotify.try_create_time)
  return try_create_time_;
}
void ServerGCGCreateMatchGameNotify::set_try_create_time(::google::protobuf::uint32 value) {
  
  try_create_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGCreateMatchGameNotify.try_create_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGCreateMatchAIGameNotify::kMatchIdFieldNumber;
const int ServerGCGCreateMatchAIGameNotify::kGcgMatchPlayerListFieldNumber;
const int ServerGCGCreateMatchAIGameNotify::kAiInfoFieldNumber;
const int ServerGCGCreateMatchAIGameNotify::kTryCreateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGCreateMatchAIGameNotify::ServerGCGCreateMatchAIGameNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGCreateMatchAIGameNotify)
}
ServerGCGCreateMatchAIGameNotify::ServerGCGCreateMatchAIGameNotify(const ServerGCGCreateMatchAIGameNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      gcg_match_player_list_(from.gcg_match_player_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ai_info()) {
    ai_info_ = new ::proto::OnlinePlayerInfo(*from.ai_info_);
  } else {
    ai_info_ = NULL;
  }
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&try_create_time_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(try_create_time_));
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGCreateMatchAIGameNotify)
}

void ServerGCGCreateMatchAIGameNotify::SharedCtor() {
  ::memset(&ai_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&try_create_time_) -
      reinterpret_cast<char*>(&ai_info_)) + sizeof(try_create_time_));
  _cached_size_ = 0;
}

ServerGCGCreateMatchAIGameNotify::~ServerGCGCreateMatchAIGameNotify() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGCreateMatchAIGameNotify)
  SharedDtor();
}

void ServerGCGCreateMatchAIGameNotify::SharedDtor() {
  if (this != internal_default_instance()) delete ai_info_;
}

void ServerGCGCreateMatchAIGameNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGCreateMatchAIGameNotify::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGCreateMatchAIGameNotify& ServerGCGCreateMatchAIGameNotify::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGCreateMatchAIGameNotify* ServerGCGCreateMatchAIGameNotify::New(::google::protobuf::Arena* arena) const {
  ServerGCGCreateMatchAIGameNotify* n = new ServerGCGCreateMatchAIGameNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGCreateMatchAIGameNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGCreateMatchAIGameNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gcg_match_player_list_.Clear();
  if (GetArenaNoVirtual() == NULL && ai_info_ != NULL) {
    delete ai_info_;
  }
  ai_info_ = NULL;
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&try_create_time_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(try_create_time_));
  _internal_metadata_.Clear();
}

bool ServerGCGCreateMatchAIGameNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGCreateMatchAIGameNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGMatchPlayerInfo gcg_match_player_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gcg_match_player_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.OnlinePlayerInfo ai_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ai_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 try_create_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &try_create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGCreateMatchAIGameNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGCreateMatchAIGameNotify)
  return false;
#undef DO_
}

void ServerGCGCreateMatchAIGameNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGCreateMatchAIGameNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 match_id = 1;
  if (this->match_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->match_id(), output);
  }

  // repeated .proto.GCGMatchPlayerInfo gcg_match_player_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gcg_match_player_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gcg_match_player_list(static_cast<int>(i)), output);
  }

  // .proto.OnlinePlayerInfo ai_info = 3;
  if (this->has_ai_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ai_info_, output);
  }

  // uint32 try_create_time = 4;
  if (this->try_create_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->try_create_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGCreateMatchAIGameNotify)
}

::google::protobuf::uint8* ServerGCGCreateMatchAIGameNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGCreateMatchAIGameNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 match_id = 1;
  if (this->match_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->match_id(), target);
  }

  // repeated .proto.GCGMatchPlayerInfo gcg_match_player_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gcg_match_player_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->gcg_match_player_list(static_cast<int>(i)), deterministic, target);
  }

  // .proto.OnlinePlayerInfo ai_info = 3;
  if (this->has_ai_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->ai_info_, deterministic, target);
  }

  // uint32 try_create_time = 4;
  if (this->try_create_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->try_create_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGCreateMatchAIGameNotify)
  return target;
}

size_t ServerGCGCreateMatchAIGameNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGCreateMatchAIGameNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGMatchPlayerInfo gcg_match_player_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->gcg_match_player_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gcg_match_player_list(static_cast<int>(i)));
    }
  }

  // .proto.OnlinePlayerInfo ai_info = 3;
  if (this->has_ai_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ai_info_);
  }

  // uint32 match_id = 1;
  if (this->match_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->match_id());
  }

  // uint32 try_create_time = 4;
  if (this->try_create_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->try_create_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGCreateMatchAIGameNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGCreateMatchAIGameNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGCreateMatchAIGameNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGCreateMatchAIGameNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGCreateMatchAIGameNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGCreateMatchAIGameNotify)
    MergeFrom(*source);
  }
}

void ServerGCGCreateMatchAIGameNotify::MergeFrom(const ServerGCGCreateMatchAIGameNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGCreateMatchAIGameNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gcg_match_player_list_.MergeFrom(from.gcg_match_player_list_);
  if (from.has_ai_info()) {
    mutable_ai_info()->::proto::OnlinePlayerInfo::MergeFrom(from.ai_info());
  }
  if (from.match_id() != 0) {
    set_match_id(from.match_id());
  }
  if (from.try_create_time() != 0) {
    set_try_create_time(from.try_create_time());
  }
}

void ServerGCGCreateMatchAIGameNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGCreateMatchAIGameNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGCreateMatchAIGameNotify::CopyFrom(const ServerGCGCreateMatchAIGameNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGCreateMatchAIGameNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGCreateMatchAIGameNotify::IsInitialized() const {
  return true;
}

void ServerGCGCreateMatchAIGameNotify::Swap(ServerGCGCreateMatchAIGameNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGCreateMatchAIGameNotify::InternalSwap(ServerGCGCreateMatchAIGameNotify* other) {
  using std::swap;
  gcg_match_player_list_.InternalSwap(&other->gcg_match_player_list_);
  swap(ai_info_, other->ai_info_);
  swap(match_id_, other->match_id_);
  swap(try_create_time_, other->try_create_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGCreateMatchAIGameNotify::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGCreateMatchAIGameNotify

// uint32 match_id = 1;
void ServerGCGCreateMatchAIGameNotify::clear_match_id() {
  match_id_ = 0u;
}
::google::protobuf::uint32 ServerGCGCreateMatchAIGameNotify::match_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGCreateMatchAIGameNotify.match_id)
  return match_id_;
}
void ServerGCGCreateMatchAIGameNotify::set_match_id(::google::protobuf::uint32 value) {
  
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGCreateMatchAIGameNotify.match_id)
}

// repeated .proto.GCGMatchPlayerInfo gcg_match_player_list = 2;
int ServerGCGCreateMatchAIGameNotify::gcg_match_player_list_size() const {
  return gcg_match_player_list_.size();
}
void ServerGCGCreateMatchAIGameNotify::clear_gcg_match_player_list() {
  gcg_match_player_list_.Clear();
}
const ::proto::GCGMatchPlayerInfo& ServerGCGCreateMatchAIGameNotify::gcg_match_player_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGCreateMatchAIGameNotify.gcg_match_player_list)
  return gcg_match_player_list_.Get(index);
}
::proto::GCGMatchPlayerInfo* ServerGCGCreateMatchAIGameNotify::mutable_gcg_match_player_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ServerGCGCreateMatchAIGameNotify.gcg_match_player_list)
  return gcg_match_player_list_.Mutable(index);
}
::proto::GCGMatchPlayerInfo* ServerGCGCreateMatchAIGameNotify::add_gcg_match_player_list() {
  // @@protoc_insertion_point(field_add:proto.ServerGCGCreateMatchAIGameNotify.gcg_match_player_list)
  return gcg_match_player_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGMatchPlayerInfo >*
ServerGCGCreateMatchAIGameNotify::mutable_gcg_match_player_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ServerGCGCreateMatchAIGameNotify.gcg_match_player_list)
  return &gcg_match_player_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGMatchPlayerInfo >&
ServerGCGCreateMatchAIGameNotify::gcg_match_player_list() const {
  // @@protoc_insertion_point(field_list:proto.ServerGCGCreateMatchAIGameNotify.gcg_match_player_list)
  return gcg_match_player_list_;
}

// .proto.OnlinePlayerInfo ai_info = 3;
bool ServerGCGCreateMatchAIGameNotify::has_ai_info() const {
  return this != internal_default_instance() && ai_info_ != NULL;
}
void ServerGCGCreateMatchAIGameNotify::clear_ai_info() {
  if (GetArenaNoVirtual() == NULL && ai_info_ != NULL) delete ai_info_;
  ai_info_ = NULL;
}
const ::proto::OnlinePlayerInfo& ServerGCGCreateMatchAIGameNotify::ai_info() const {
  const ::proto::OnlinePlayerInfo* p = ai_info_;
  // @@protoc_insertion_point(field_get:proto.ServerGCGCreateMatchAIGameNotify.ai_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::OnlinePlayerInfo*>(
      &::proto::_OnlinePlayerInfo_default_instance_);
}
::proto::OnlinePlayerInfo* ServerGCGCreateMatchAIGameNotify::mutable_ai_info() {
  
  if (ai_info_ == NULL) {
    ai_info_ = new ::proto::OnlinePlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerGCGCreateMatchAIGameNotify.ai_info)
  return ai_info_;
}
::proto::OnlinePlayerInfo* ServerGCGCreateMatchAIGameNotify::release_ai_info() {
  // @@protoc_insertion_point(field_release:proto.ServerGCGCreateMatchAIGameNotify.ai_info)
  
  ::proto::OnlinePlayerInfo* temp = ai_info_;
  ai_info_ = NULL;
  return temp;
}
void ServerGCGCreateMatchAIGameNotify::set_allocated_ai_info(::proto::OnlinePlayerInfo* ai_info) {
  delete ai_info_;
  ai_info_ = ai_info;
  if (ai_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerGCGCreateMatchAIGameNotify.ai_info)
}

// uint32 try_create_time = 4;
void ServerGCGCreateMatchAIGameNotify::clear_try_create_time() {
  try_create_time_ = 0u;
}
::google::protobuf::uint32 ServerGCGCreateMatchAIGameNotify::try_create_time() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGCreateMatchAIGameNotify.try_create_time)
  return try_create_time_;
}
void ServerGCGCreateMatchAIGameNotify::set_try_create_time(::google::protobuf::uint32 value) {
  
  try_create_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGCreateMatchAIGameNotify.try_create_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGMatchFinishNotify::ServerGCGMatchFinishNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGMatchFinishNotify)
}
ServerGCGMatchFinishNotify::ServerGCGMatchFinishNotify(const ServerGCGMatchFinishNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGMatchFinishNotify)
}

void ServerGCGMatchFinishNotify::SharedCtor() {
  _cached_size_ = 0;
}

ServerGCGMatchFinishNotify::~ServerGCGMatchFinishNotify() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGMatchFinishNotify)
  SharedDtor();
}

void ServerGCGMatchFinishNotify::SharedDtor() {
}

void ServerGCGMatchFinishNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGMatchFinishNotify::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGMatchFinishNotify& ServerGCGMatchFinishNotify::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGMatchFinishNotify* ServerGCGMatchFinishNotify::New(::google::protobuf::Arena* arena) const {
  ServerGCGMatchFinishNotify* n = new ServerGCGMatchFinishNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGMatchFinishNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGMatchFinishNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ServerGCGMatchFinishNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGMatchFinishNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGMatchFinishNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGMatchFinishNotify)
  return false;
#undef DO_
}

void ServerGCGMatchFinishNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGMatchFinishNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGMatchFinishNotify)
}

::google::protobuf::uint8* ServerGCGMatchFinishNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGMatchFinishNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGMatchFinishNotify)
  return target;
}

size_t ServerGCGMatchFinishNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGMatchFinishNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGMatchFinishNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGMatchFinishNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGMatchFinishNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGMatchFinishNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGMatchFinishNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGMatchFinishNotify)
    MergeFrom(*source);
  }
}

void ServerGCGMatchFinishNotify::MergeFrom(const ServerGCGMatchFinishNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGMatchFinishNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ServerGCGMatchFinishNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGMatchFinishNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGMatchFinishNotify::CopyFrom(const ServerGCGMatchFinishNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGMatchFinishNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGMatchFinishNotify::IsInitialized() const {
  return true;
}

void ServerGCGMatchFinishNotify::Swap(ServerGCGMatchFinishNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGMatchFinishNotify::InternalSwap(ServerGCGMatchFinishNotify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGMatchFinishNotify::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGMatchFinishNotify

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGBackToDuelReq::kGameUidFieldNumber;
const int ServerGCGBackToDuelReq::kVerifyCodeFieldNumber;
const int ServerGCGBackToDuelReq::kClientDataVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGBackToDuelReq::ServerGCGBackToDuelReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGBackToDuelReq)
}
ServerGCGBackToDuelReq::ServerGCGBackToDuelReq(const ServerGCGBackToDuelReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_uid_, &from.game_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_data_version_) -
    reinterpret_cast<char*>(&game_uid_)) + sizeof(client_data_version_));
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGBackToDuelReq)
}

void ServerGCGBackToDuelReq::SharedCtor() {
  ::memset(&game_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_data_version_) -
      reinterpret_cast<char*>(&game_uid_)) + sizeof(client_data_version_));
  _cached_size_ = 0;
}

ServerGCGBackToDuelReq::~ServerGCGBackToDuelReq() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGBackToDuelReq)
  SharedDtor();
}

void ServerGCGBackToDuelReq::SharedDtor() {
}

void ServerGCGBackToDuelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGBackToDuelReq::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGBackToDuelReq& ServerGCGBackToDuelReq::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGBackToDuelReq* ServerGCGBackToDuelReq::New(::google::protobuf::Arena* arena) const {
  ServerGCGBackToDuelReq* n = new ServerGCGBackToDuelReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGBackToDuelReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGBackToDuelReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&game_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_data_version_) -
      reinterpret_cast<char*>(&game_uid_)) + sizeof(client_data_version_));
  _internal_metadata_.Clear();
}

bool ServerGCGBackToDuelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGBackToDuelReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 game_uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 verify_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verify_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 client_data_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_data_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGBackToDuelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGBackToDuelReq)
  return false;
#undef DO_
}

void ServerGCGBackToDuelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGBackToDuelReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_uid = 1;
  if (this->game_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_uid(), output);
  }

  // uint32 verify_code = 2;
  if (this->verify_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->verify_code(), output);
  }

  // uint32 client_data_version = 3;
  if (this->client_data_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_data_version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGBackToDuelReq)
}

::google::protobuf::uint8* ServerGCGBackToDuelReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGBackToDuelReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_uid = 1;
  if (this->game_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_uid(), target);
  }

  // uint32 verify_code = 2;
  if (this->verify_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->verify_code(), target);
  }

  // uint32 client_data_version = 3;
  if (this->client_data_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_data_version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGBackToDuelReq)
  return target;
}

size_t ServerGCGBackToDuelReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGBackToDuelReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 game_uid = 1;
  if (this->game_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_uid());
  }

  // uint32 verify_code = 2;
  if (this->verify_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->verify_code());
  }

  // uint32 client_data_version = 3;
  if (this->client_data_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->client_data_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGBackToDuelReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGBackToDuelReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGBackToDuelReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGBackToDuelReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGBackToDuelReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGBackToDuelReq)
    MergeFrom(*source);
  }
}

void ServerGCGBackToDuelReq::MergeFrom(const ServerGCGBackToDuelReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGBackToDuelReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_uid() != 0) {
    set_game_uid(from.game_uid());
  }
  if (from.verify_code() != 0) {
    set_verify_code(from.verify_code());
  }
  if (from.client_data_version() != 0) {
    set_client_data_version(from.client_data_version());
  }
}

void ServerGCGBackToDuelReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGBackToDuelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGBackToDuelReq::CopyFrom(const ServerGCGBackToDuelReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGBackToDuelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGBackToDuelReq::IsInitialized() const {
  return true;
}

void ServerGCGBackToDuelReq::Swap(ServerGCGBackToDuelReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGBackToDuelReq::InternalSwap(ServerGCGBackToDuelReq* other) {
  using std::swap;
  swap(game_uid_, other->game_uid_);
  swap(verify_code_, other->verify_code_);
  swap(client_data_version_, other->client_data_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGBackToDuelReq::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGBackToDuelReq

// uint32 game_uid = 1;
void ServerGCGBackToDuelReq::clear_game_uid() {
  game_uid_ = 0u;
}
::google::protobuf::uint32 ServerGCGBackToDuelReq::game_uid() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGBackToDuelReq.game_uid)
  return game_uid_;
}
void ServerGCGBackToDuelReq::set_game_uid(::google::protobuf::uint32 value) {
  
  game_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGBackToDuelReq.game_uid)
}

// uint32 verify_code = 2;
void ServerGCGBackToDuelReq::clear_verify_code() {
  verify_code_ = 0u;
}
::google::protobuf::uint32 ServerGCGBackToDuelReq::verify_code() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGBackToDuelReq.verify_code)
  return verify_code_;
}
void ServerGCGBackToDuelReq::set_verify_code(::google::protobuf::uint32 value) {
  
  verify_code_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGBackToDuelReq.verify_code)
}

// uint32 client_data_version = 3;
void ServerGCGBackToDuelReq::clear_client_data_version() {
  client_data_version_ = 0u;
}
::google::protobuf::uint32 ServerGCGBackToDuelReq::client_data_version() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGBackToDuelReq.client_data_version)
  return client_data_version_;
}
void ServerGCGBackToDuelReq::set_client_data_version(::google::protobuf::uint32 value) {
  
  client_data_version_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGBackToDuelReq.client_data_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGBackToDuelRsp::kRetcodeFieldNumber;
const int ServerGCGBackToDuelRsp::kGameUidFieldNumber;
const int ServerGCGBackToDuelRsp::kVerifyCodeFieldNumber;
const int ServerGCGBackToDuelRsp::kAppIdFieldNumber;
const int ServerGCGBackToDuelRsp::kThreadIndexFieldNumber;
const int ServerGCGBackToDuelRsp::kClientDataVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGBackToDuelRsp::ServerGCGBackToDuelRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGBackToDuelRsp)
}
ServerGCGBackToDuelRsp::ServerGCGBackToDuelRsp(const ServerGCGBackToDuelRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_data_version_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(client_data_version_));
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGBackToDuelRsp)
}

void ServerGCGBackToDuelRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_data_version_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(client_data_version_));
  _cached_size_ = 0;
}

ServerGCGBackToDuelRsp::~ServerGCGBackToDuelRsp() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGBackToDuelRsp)
  SharedDtor();
}

void ServerGCGBackToDuelRsp::SharedDtor() {
}

void ServerGCGBackToDuelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGBackToDuelRsp::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGBackToDuelRsp& ServerGCGBackToDuelRsp::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGBackToDuelRsp* ServerGCGBackToDuelRsp::New(::google::protobuf::Arena* arena) const {
  ServerGCGBackToDuelRsp* n = new ServerGCGBackToDuelRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGBackToDuelRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGBackToDuelRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_data_version_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(client_data_version_));
  _internal_metadata_.Clear();
}

bool ServerGCGBackToDuelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGBackToDuelRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 verify_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verify_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 app_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 thread_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 client_data_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_data_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGBackToDuelRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGBackToDuelRsp)
  return false;
#undef DO_
}

void ServerGCGBackToDuelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGBackToDuelRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 game_uid = 2;
  if (this->game_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_uid(), output);
  }

  // uint32 verify_code = 3;
  if (this->verify_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->verify_code(), output);
  }

  // uint32 app_id = 4;
  if (this->app_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->app_id(), output);
  }

  // uint32 thread_index = 5;
  if (this->thread_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->thread_index(), output);
  }

  // uint32 client_data_version = 6;
  if (this->client_data_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->client_data_version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGBackToDuelRsp)
}

::google::protobuf::uint8* ServerGCGBackToDuelRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGBackToDuelRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 game_uid = 2;
  if (this->game_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_uid(), target);
  }

  // uint32 verify_code = 3;
  if (this->verify_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->verify_code(), target);
  }

  // uint32 app_id = 4;
  if (this->app_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->app_id(), target);
  }

  // uint32 thread_index = 5;
  if (this->thread_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->thread_index(), target);
  }

  // uint32 client_data_version = 6;
  if (this->client_data_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->client_data_version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGBackToDuelRsp)
  return target;
}

size_t ServerGCGBackToDuelRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGBackToDuelRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 game_uid = 2;
  if (this->game_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_uid());
  }

  // uint32 verify_code = 3;
  if (this->verify_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->verify_code());
  }

  // uint32 app_id = 4;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->app_id());
  }

  // uint32 thread_index = 5;
  if (this->thread_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thread_index());
  }

  // uint32 client_data_version = 6;
  if (this->client_data_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->client_data_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGBackToDuelRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGBackToDuelRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGBackToDuelRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGBackToDuelRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGBackToDuelRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGBackToDuelRsp)
    MergeFrom(*source);
  }
}

void ServerGCGBackToDuelRsp::MergeFrom(const ServerGCGBackToDuelRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGBackToDuelRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.game_uid() != 0) {
    set_game_uid(from.game_uid());
  }
  if (from.verify_code() != 0) {
    set_verify_code(from.verify_code());
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.thread_index() != 0) {
    set_thread_index(from.thread_index());
  }
  if (from.client_data_version() != 0) {
    set_client_data_version(from.client_data_version());
  }
}

void ServerGCGBackToDuelRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGBackToDuelRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGBackToDuelRsp::CopyFrom(const ServerGCGBackToDuelRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGBackToDuelRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGBackToDuelRsp::IsInitialized() const {
  return true;
}

void ServerGCGBackToDuelRsp::Swap(ServerGCGBackToDuelRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGBackToDuelRsp::InternalSwap(ServerGCGBackToDuelRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(game_uid_, other->game_uid_);
  swap(verify_code_, other->verify_code_);
  swap(app_id_, other->app_id_);
  swap(thread_index_, other->thread_index_);
  swap(client_data_version_, other->client_data_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGBackToDuelRsp::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGBackToDuelRsp

// int32 retcode = 1;
void ServerGCGBackToDuelRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 ServerGCGBackToDuelRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGBackToDuelRsp.retcode)
  return retcode_;
}
void ServerGCGBackToDuelRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGBackToDuelRsp.retcode)
}

// uint32 game_uid = 2;
void ServerGCGBackToDuelRsp::clear_game_uid() {
  game_uid_ = 0u;
}
::google::protobuf::uint32 ServerGCGBackToDuelRsp::game_uid() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGBackToDuelRsp.game_uid)
  return game_uid_;
}
void ServerGCGBackToDuelRsp::set_game_uid(::google::protobuf::uint32 value) {
  
  game_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGBackToDuelRsp.game_uid)
}

// uint32 verify_code = 3;
void ServerGCGBackToDuelRsp::clear_verify_code() {
  verify_code_ = 0u;
}
::google::protobuf::uint32 ServerGCGBackToDuelRsp::verify_code() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGBackToDuelRsp.verify_code)
  return verify_code_;
}
void ServerGCGBackToDuelRsp::set_verify_code(::google::protobuf::uint32 value) {
  
  verify_code_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGBackToDuelRsp.verify_code)
}

// uint32 app_id = 4;
void ServerGCGBackToDuelRsp::clear_app_id() {
  app_id_ = 0u;
}
::google::protobuf::uint32 ServerGCGBackToDuelRsp::app_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGBackToDuelRsp.app_id)
  return app_id_;
}
void ServerGCGBackToDuelRsp::set_app_id(::google::protobuf::uint32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGBackToDuelRsp.app_id)
}

// uint32 thread_index = 5;
void ServerGCGBackToDuelRsp::clear_thread_index() {
  thread_index_ = 0u;
}
::google::protobuf::uint32 ServerGCGBackToDuelRsp::thread_index() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGBackToDuelRsp.thread_index)
  return thread_index_;
}
void ServerGCGBackToDuelRsp::set_thread_index(::google::protobuf::uint32 value) {
  
  thread_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGBackToDuelRsp.thread_index)
}

// uint32 client_data_version = 6;
void ServerGCGBackToDuelRsp::clear_client_data_version() {
  client_data_version_ = 0u;
}
::google::protobuf::uint32 ServerGCGBackToDuelRsp::client_data_version() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGBackToDuelRsp.client_data_version)
  return client_data_version_;
}
void ServerGCGBackToDuelRsp::set_client_data_version(::google::protobuf::uint32 value) {
  
  client_data_version_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGBackToDuelRsp.client_data_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGMessagePackNotify::kVerifyFieldNumber;
const int ServerGCGMessagePackNotify::kServerSeqFieldNumber;
const int ServerGCGMessagePackNotify::kMsgPackListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGMessagePackNotify::ServerGCGMessagePackNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGMessagePackNotify)
}
ServerGCGMessagePackNotify::ServerGCGMessagePackNotify(const ServerGCGMessagePackNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      msg_pack_list_(from.msg_pack_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_verify()) {
    verify_ = new ::proto::ServerGCGVerify(*from.verify_);
  } else {
    verify_ = NULL;
  }
  server_seq_ = from.server_seq_;
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGMessagePackNotify)
}

void ServerGCGMessagePackNotify::SharedCtor() {
  ::memset(&verify_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_seq_) -
      reinterpret_cast<char*>(&verify_)) + sizeof(server_seq_));
  _cached_size_ = 0;
}

ServerGCGMessagePackNotify::~ServerGCGMessagePackNotify() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGMessagePackNotify)
  SharedDtor();
}

void ServerGCGMessagePackNotify::SharedDtor() {
  if (this != internal_default_instance()) delete verify_;
}

void ServerGCGMessagePackNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGMessagePackNotify::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGMessagePackNotify& ServerGCGMessagePackNotify::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGMessagePackNotify* ServerGCGMessagePackNotify::New(::google::protobuf::Arena* arena) const {
  ServerGCGMessagePackNotify* n = new ServerGCGMessagePackNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGMessagePackNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGMessagePackNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_pack_list_.Clear();
  if (GetArenaNoVirtual() == NULL && verify_ != NULL) {
    delete verify_;
  }
  verify_ = NULL;
  server_seq_ = 0u;
  _internal_metadata_.Clear();
}

bool ServerGCGMessagePackNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGMessagePackNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.ServerGCGVerify verify = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verify()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 server_seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGMessagePack msg_pack_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg_pack_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGMessagePackNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGMessagePackNotify)
  return false;
#undef DO_
}

void ServerGCGMessagePackNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGMessagePackNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ServerGCGVerify verify = 1;
  if (this->has_verify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->verify_, output);
  }

  // uint32 server_seq = 2;
  if (this->server_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_seq(), output);
  }

  // repeated .proto.GCGMessagePack msg_pack_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->msg_pack_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msg_pack_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGMessagePackNotify)
}

::google::protobuf::uint8* ServerGCGMessagePackNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGMessagePackNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ServerGCGVerify verify = 1;
  if (this->has_verify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->verify_, deterministic, target);
  }

  // uint32 server_seq = 2;
  if (this->server_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_seq(), target);
  }

  // repeated .proto.GCGMessagePack msg_pack_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->msg_pack_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->msg_pack_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGMessagePackNotify)
  return target;
}

size_t ServerGCGMessagePackNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGMessagePackNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGMessagePack msg_pack_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->msg_pack_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_pack_list(static_cast<int>(i)));
    }
  }

  // .proto.ServerGCGVerify verify = 1;
  if (this->has_verify()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->verify_);
  }

  // uint32 server_seq = 2;
  if (this->server_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGMessagePackNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGMessagePackNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGMessagePackNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGMessagePackNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGMessagePackNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGMessagePackNotify)
    MergeFrom(*source);
  }
}

void ServerGCGMessagePackNotify::MergeFrom(const ServerGCGMessagePackNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGMessagePackNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_pack_list_.MergeFrom(from.msg_pack_list_);
  if (from.has_verify()) {
    mutable_verify()->::proto::ServerGCGVerify::MergeFrom(from.verify());
  }
  if (from.server_seq() != 0) {
    set_server_seq(from.server_seq());
  }
}

void ServerGCGMessagePackNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGMessagePackNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGMessagePackNotify::CopyFrom(const ServerGCGMessagePackNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGMessagePackNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGMessagePackNotify::IsInitialized() const {
  return true;
}

void ServerGCGMessagePackNotify::Swap(ServerGCGMessagePackNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGMessagePackNotify::InternalSwap(ServerGCGMessagePackNotify* other) {
  using std::swap;
  msg_pack_list_.InternalSwap(&other->msg_pack_list_);
  swap(verify_, other->verify_);
  swap(server_seq_, other->server_seq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGMessagePackNotify::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGMessagePackNotify

// .proto.ServerGCGVerify verify = 1;
bool ServerGCGMessagePackNotify::has_verify() const {
  return this != internal_default_instance() && verify_ != NULL;
}
void ServerGCGMessagePackNotify::clear_verify() {
  if (GetArenaNoVirtual() == NULL && verify_ != NULL) delete verify_;
  verify_ = NULL;
}
const ::proto::ServerGCGVerify& ServerGCGMessagePackNotify::verify() const {
  const ::proto::ServerGCGVerify* p = verify_;
  // @@protoc_insertion_point(field_get:proto.ServerGCGMessagePackNotify.verify)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ServerGCGVerify*>(
      &::proto::_ServerGCGVerify_default_instance_);
}
::proto::ServerGCGVerify* ServerGCGMessagePackNotify::mutable_verify() {
  
  if (verify_ == NULL) {
    verify_ = new ::proto::ServerGCGVerify;
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerGCGMessagePackNotify.verify)
  return verify_;
}
::proto::ServerGCGVerify* ServerGCGMessagePackNotify::release_verify() {
  // @@protoc_insertion_point(field_release:proto.ServerGCGMessagePackNotify.verify)
  
  ::proto::ServerGCGVerify* temp = verify_;
  verify_ = NULL;
  return temp;
}
void ServerGCGMessagePackNotify::set_allocated_verify(::proto::ServerGCGVerify* verify) {
  delete verify_;
  verify_ = verify;
  if (verify) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerGCGMessagePackNotify.verify)
}

// uint32 server_seq = 2;
void ServerGCGMessagePackNotify::clear_server_seq() {
  server_seq_ = 0u;
}
::google::protobuf::uint32 ServerGCGMessagePackNotify::server_seq() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGMessagePackNotify.server_seq)
  return server_seq_;
}
void ServerGCGMessagePackNotify::set_server_seq(::google::protobuf::uint32 value) {
  
  server_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGMessagePackNotify.server_seq)
}

// repeated .proto.GCGMessagePack msg_pack_list = 3;
int ServerGCGMessagePackNotify::msg_pack_list_size() const {
  return msg_pack_list_.size();
}
void ServerGCGMessagePackNotify::clear_msg_pack_list() {
  msg_pack_list_.Clear();
}
const ::proto::GCGMessagePack& ServerGCGMessagePackNotify::msg_pack_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGMessagePackNotify.msg_pack_list)
  return msg_pack_list_.Get(index);
}
::proto::GCGMessagePack* ServerGCGMessagePackNotify::mutable_msg_pack_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ServerGCGMessagePackNotify.msg_pack_list)
  return msg_pack_list_.Mutable(index);
}
::proto::GCGMessagePack* ServerGCGMessagePackNotify::add_msg_pack_list() {
  // @@protoc_insertion_point(field_add:proto.ServerGCGMessagePackNotify.msg_pack_list)
  return msg_pack_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGMessagePack >*
ServerGCGMessagePackNotify::mutable_msg_pack_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ServerGCGMessagePackNotify.msg_pack_list)
  return &msg_pack_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGMessagePack >&
ServerGCGMessagePackNotify::msg_pack_list() const {
  // @@protoc_insertion_point(field_list:proto.ServerGCGMessagePackNotify.msg_pack_list)
  return msg_pack_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGHeartBeatNotify::kVerifyFieldNumber;
const int ServerGCGHeartBeatNotify::kServerSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGHeartBeatNotify::ServerGCGHeartBeatNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGHeartBeatNotify)
}
ServerGCGHeartBeatNotify::ServerGCGHeartBeatNotify(const ServerGCGHeartBeatNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_verify()) {
    verify_ = new ::proto::ServerGCGVerify(*from.verify_);
  } else {
    verify_ = NULL;
  }
  server_seq_ = from.server_seq_;
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGHeartBeatNotify)
}

void ServerGCGHeartBeatNotify::SharedCtor() {
  ::memset(&verify_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_seq_) -
      reinterpret_cast<char*>(&verify_)) + sizeof(server_seq_));
  _cached_size_ = 0;
}

ServerGCGHeartBeatNotify::~ServerGCGHeartBeatNotify() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGHeartBeatNotify)
  SharedDtor();
}

void ServerGCGHeartBeatNotify::SharedDtor() {
  if (this != internal_default_instance()) delete verify_;
}

void ServerGCGHeartBeatNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGHeartBeatNotify::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGHeartBeatNotify& ServerGCGHeartBeatNotify::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGHeartBeatNotify* ServerGCGHeartBeatNotify::New(::google::protobuf::Arena* arena) const {
  ServerGCGHeartBeatNotify* n = new ServerGCGHeartBeatNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGHeartBeatNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGHeartBeatNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && verify_ != NULL) {
    delete verify_;
  }
  verify_ = NULL;
  server_seq_ = 0u;
  _internal_metadata_.Clear();
}

bool ServerGCGHeartBeatNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGHeartBeatNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.ServerGCGVerify verify = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verify()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 server_seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGHeartBeatNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGHeartBeatNotify)
  return false;
#undef DO_
}

void ServerGCGHeartBeatNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGHeartBeatNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ServerGCGVerify verify = 1;
  if (this->has_verify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->verify_, output);
  }

  // uint32 server_seq = 2;
  if (this->server_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_seq(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGHeartBeatNotify)
}

::google::protobuf::uint8* ServerGCGHeartBeatNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGHeartBeatNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ServerGCGVerify verify = 1;
  if (this->has_verify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->verify_, deterministic, target);
  }

  // uint32 server_seq = 2;
  if (this->server_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_seq(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGHeartBeatNotify)
  return target;
}

size_t ServerGCGHeartBeatNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGHeartBeatNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.ServerGCGVerify verify = 1;
  if (this->has_verify()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->verify_);
  }

  // uint32 server_seq = 2;
  if (this->server_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGHeartBeatNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGHeartBeatNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGHeartBeatNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGHeartBeatNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGHeartBeatNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGHeartBeatNotify)
    MergeFrom(*source);
  }
}

void ServerGCGHeartBeatNotify::MergeFrom(const ServerGCGHeartBeatNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGHeartBeatNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_verify()) {
    mutable_verify()->::proto::ServerGCGVerify::MergeFrom(from.verify());
  }
  if (from.server_seq() != 0) {
    set_server_seq(from.server_seq());
  }
}

void ServerGCGHeartBeatNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGHeartBeatNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGHeartBeatNotify::CopyFrom(const ServerGCGHeartBeatNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGHeartBeatNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGHeartBeatNotify::IsInitialized() const {
  return true;
}

void ServerGCGHeartBeatNotify::Swap(ServerGCGHeartBeatNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGHeartBeatNotify::InternalSwap(ServerGCGHeartBeatNotify* other) {
  using std::swap;
  swap(verify_, other->verify_);
  swap(server_seq_, other->server_seq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGHeartBeatNotify::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGHeartBeatNotify

// .proto.ServerGCGVerify verify = 1;
bool ServerGCGHeartBeatNotify::has_verify() const {
  return this != internal_default_instance() && verify_ != NULL;
}
void ServerGCGHeartBeatNotify::clear_verify() {
  if (GetArenaNoVirtual() == NULL && verify_ != NULL) delete verify_;
  verify_ = NULL;
}
const ::proto::ServerGCGVerify& ServerGCGHeartBeatNotify::verify() const {
  const ::proto::ServerGCGVerify* p = verify_;
  // @@protoc_insertion_point(field_get:proto.ServerGCGHeartBeatNotify.verify)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ServerGCGVerify*>(
      &::proto::_ServerGCGVerify_default_instance_);
}
::proto::ServerGCGVerify* ServerGCGHeartBeatNotify::mutable_verify() {
  
  if (verify_ == NULL) {
    verify_ = new ::proto::ServerGCGVerify;
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerGCGHeartBeatNotify.verify)
  return verify_;
}
::proto::ServerGCGVerify* ServerGCGHeartBeatNotify::release_verify() {
  // @@protoc_insertion_point(field_release:proto.ServerGCGHeartBeatNotify.verify)
  
  ::proto::ServerGCGVerify* temp = verify_;
  verify_ = NULL;
  return temp;
}
void ServerGCGHeartBeatNotify::set_allocated_verify(::proto::ServerGCGVerify* verify) {
  delete verify_;
  verify_ = verify;
  if (verify) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerGCGHeartBeatNotify.verify)
}

// uint32 server_seq = 2;
void ServerGCGHeartBeatNotify::clear_server_seq() {
  server_seq_ = 0u;
}
::google::protobuf::uint32 ServerGCGHeartBeatNotify::server_seq() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGHeartBeatNotify.server_seq)
  return server_seq_;
}
void ServerGCGHeartBeatNotify::set_server_seq(::google::protobuf::uint32 value) {
  
  server_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGHeartBeatNotify.server_seq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGSkillPreviewNotify::kVerifyFieldNumber;
const int ServerGCGSkillPreviewNotify::kControllerIdFieldNumber;
const int ServerGCGSkillPreviewNotify::kOnstageCardGuidFieldNumber;
const int ServerGCGSkillPreviewNotify::kSkillPreviewListFieldNumber;
const int ServerGCGSkillPreviewNotify::kChangeOnstagePreviewListFieldNumber;
const int ServerGCGSkillPreviewNotify::kPlayCardListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGSkillPreviewNotify::ServerGCGSkillPreviewNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGSkillPreviewNotify)
}
ServerGCGSkillPreviewNotify::ServerGCGSkillPreviewNotify(const ServerGCGSkillPreviewNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      skill_preview_list_(from.skill_preview_list_),
      change_onstage_preview_list_(from.change_onstage_preview_list_),
      play_card_list_(from.play_card_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_verify()) {
    verify_ = new ::proto::ServerGCGVerify(*from.verify_);
  } else {
    verify_ = NULL;
  }
  ::memcpy(&controller_id_, &from.controller_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&onstage_card_guid_) -
    reinterpret_cast<char*>(&controller_id_)) + sizeof(onstage_card_guid_));
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGSkillPreviewNotify)
}

void ServerGCGSkillPreviewNotify::SharedCtor() {
  ::memset(&verify_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&onstage_card_guid_) -
      reinterpret_cast<char*>(&verify_)) + sizeof(onstage_card_guid_));
  _cached_size_ = 0;
}

ServerGCGSkillPreviewNotify::~ServerGCGSkillPreviewNotify() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGSkillPreviewNotify)
  SharedDtor();
}

void ServerGCGSkillPreviewNotify::SharedDtor() {
  if (this != internal_default_instance()) delete verify_;
}

void ServerGCGSkillPreviewNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGSkillPreviewNotify::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGSkillPreviewNotify& ServerGCGSkillPreviewNotify::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGSkillPreviewNotify* ServerGCGSkillPreviewNotify::New(::google::protobuf::Arena* arena) const {
  ServerGCGSkillPreviewNotify* n = new ServerGCGSkillPreviewNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGSkillPreviewNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGSkillPreviewNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skill_preview_list_.Clear();
  change_onstage_preview_list_.Clear();
  play_card_list_.Clear();
  if (GetArenaNoVirtual() == NULL && verify_ != NULL) {
    delete verify_;
  }
  verify_ = NULL;
  ::memset(&controller_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&onstage_card_guid_) -
      reinterpret_cast<char*>(&controller_id_)) + sizeof(onstage_card_guid_));
  _internal_metadata_.Clear();
}

bool ServerGCGSkillPreviewNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGSkillPreviewNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.ServerGCGVerify verify = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verify()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 controller_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 onstage_card_guid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onstage_card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGSkillPreviewInfo skill_preview_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_preview_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGChangeOnstageInfo change_onstage_preview_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_change_onstage_preview_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGSkillPreviewPlayCardInfo play_card_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_play_card_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGSkillPreviewNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGSkillPreviewNotify)
  return false;
#undef DO_
}

void ServerGCGSkillPreviewNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGSkillPreviewNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ServerGCGVerify verify = 1;
  if (this->has_verify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->verify_, output);
  }

  // uint32 controller_id = 2;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->controller_id(), output);
  }

  // uint32 onstage_card_guid = 3;
  if (this->onstage_card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->onstage_card_guid(), output);
  }

  // repeated .proto.GCGSkillPreviewInfo skill_preview_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skill_preview_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->skill_preview_list(static_cast<int>(i)), output);
  }

  // repeated .proto.GCGChangeOnstageInfo change_onstage_preview_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->change_onstage_preview_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->change_onstage_preview_list(static_cast<int>(i)), output);
  }

  // repeated .proto.GCGSkillPreviewPlayCardInfo play_card_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->play_card_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->play_card_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGSkillPreviewNotify)
}

::google::protobuf::uint8* ServerGCGSkillPreviewNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGSkillPreviewNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ServerGCGVerify verify = 1;
  if (this->has_verify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->verify_, deterministic, target);
  }

  // uint32 controller_id = 2;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->controller_id(), target);
  }

  // uint32 onstage_card_guid = 3;
  if (this->onstage_card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->onstage_card_guid(), target);
  }

  // repeated .proto.GCGSkillPreviewInfo skill_preview_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skill_preview_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->skill_preview_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.GCGChangeOnstageInfo change_onstage_preview_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->change_onstage_preview_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->change_onstage_preview_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.GCGSkillPreviewPlayCardInfo play_card_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->play_card_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->play_card_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGSkillPreviewNotify)
  return target;
}

size_t ServerGCGSkillPreviewNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGSkillPreviewNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGSkillPreviewInfo skill_preview_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->skill_preview_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_preview_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.GCGChangeOnstageInfo change_onstage_preview_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->change_onstage_preview_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_onstage_preview_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.GCGSkillPreviewPlayCardInfo play_card_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->play_card_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->play_card_list(static_cast<int>(i)));
    }
  }

  // .proto.ServerGCGVerify verify = 1;
  if (this->has_verify()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->verify_);
  }

  // uint32 controller_id = 2;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  // uint32 onstage_card_guid = 3;
  if (this->onstage_card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->onstage_card_guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGSkillPreviewNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGSkillPreviewNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGSkillPreviewNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGSkillPreviewNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGSkillPreviewNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGSkillPreviewNotify)
    MergeFrom(*source);
  }
}

void ServerGCGSkillPreviewNotify::MergeFrom(const ServerGCGSkillPreviewNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGSkillPreviewNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skill_preview_list_.MergeFrom(from.skill_preview_list_);
  change_onstage_preview_list_.MergeFrom(from.change_onstage_preview_list_);
  play_card_list_.MergeFrom(from.play_card_list_);
  if (from.has_verify()) {
    mutable_verify()->::proto::ServerGCGVerify::MergeFrom(from.verify());
  }
  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
  if (from.onstage_card_guid() != 0) {
    set_onstage_card_guid(from.onstage_card_guid());
  }
}

void ServerGCGSkillPreviewNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGSkillPreviewNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGSkillPreviewNotify::CopyFrom(const ServerGCGSkillPreviewNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGSkillPreviewNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGSkillPreviewNotify::IsInitialized() const {
  return true;
}

void ServerGCGSkillPreviewNotify::Swap(ServerGCGSkillPreviewNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGSkillPreviewNotify::InternalSwap(ServerGCGSkillPreviewNotify* other) {
  using std::swap;
  skill_preview_list_.InternalSwap(&other->skill_preview_list_);
  change_onstage_preview_list_.InternalSwap(&other->change_onstage_preview_list_);
  play_card_list_.InternalSwap(&other->play_card_list_);
  swap(verify_, other->verify_);
  swap(controller_id_, other->controller_id_);
  swap(onstage_card_guid_, other->onstage_card_guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGSkillPreviewNotify::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGSkillPreviewNotify

// .proto.ServerGCGVerify verify = 1;
bool ServerGCGSkillPreviewNotify::has_verify() const {
  return this != internal_default_instance() && verify_ != NULL;
}
void ServerGCGSkillPreviewNotify::clear_verify() {
  if (GetArenaNoVirtual() == NULL && verify_ != NULL) delete verify_;
  verify_ = NULL;
}
const ::proto::ServerGCGVerify& ServerGCGSkillPreviewNotify::verify() const {
  const ::proto::ServerGCGVerify* p = verify_;
  // @@protoc_insertion_point(field_get:proto.ServerGCGSkillPreviewNotify.verify)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ServerGCGVerify*>(
      &::proto::_ServerGCGVerify_default_instance_);
}
::proto::ServerGCGVerify* ServerGCGSkillPreviewNotify::mutable_verify() {
  
  if (verify_ == NULL) {
    verify_ = new ::proto::ServerGCGVerify;
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerGCGSkillPreviewNotify.verify)
  return verify_;
}
::proto::ServerGCGVerify* ServerGCGSkillPreviewNotify::release_verify() {
  // @@protoc_insertion_point(field_release:proto.ServerGCGSkillPreviewNotify.verify)
  
  ::proto::ServerGCGVerify* temp = verify_;
  verify_ = NULL;
  return temp;
}
void ServerGCGSkillPreviewNotify::set_allocated_verify(::proto::ServerGCGVerify* verify) {
  delete verify_;
  verify_ = verify;
  if (verify) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerGCGSkillPreviewNotify.verify)
}

// uint32 controller_id = 2;
void ServerGCGSkillPreviewNotify::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 ServerGCGSkillPreviewNotify::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGSkillPreviewNotify.controller_id)
  return controller_id_;
}
void ServerGCGSkillPreviewNotify::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGSkillPreviewNotify.controller_id)
}

// uint32 onstage_card_guid = 3;
void ServerGCGSkillPreviewNotify::clear_onstage_card_guid() {
  onstage_card_guid_ = 0u;
}
::google::protobuf::uint32 ServerGCGSkillPreviewNotify::onstage_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGSkillPreviewNotify.onstage_card_guid)
  return onstage_card_guid_;
}
void ServerGCGSkillPreviewNotify::set_onstage_card_guid(::google::protobuf::uint32 value) {
  
  onstage_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGSkillPreviewNotify.onstage_card_guid)
}

// repeated .proto.GCGSkillPreviewInfo skill_preview_list = 4;
int ServerGCGSkillPreviewNotify::skill_preview_list_size() const {
  return skill_preview_list_.size();
}
void ServerGCGSkillPreviewNotify::clear_skill_preview_list() {
  skill_preview_list_.Clear();
}
const ::proto::GCGSkillPreviewInfo& ServerGCGSkillPreviewNotify::skill_preview_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGSkillPreviewNotify.skill_preview_list)
  return skill_preview_list_.Get(index);
}
::proto::GCGSkillPreviewInfo* ServerGCGSkillPreviewNotify::mutable_skill_preview_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ServerGCGSkillPreviewNotify.skill_preview_list)
  return skill_preview_list_.Mutable(index);
}
::proto::GCGSkillPreviewInfo* ServerGCGSkillPreviewNotify::add_skill_preview_list() {
  // @@protoc_insertion_point(field_add:proto.ServerGCGSkillPreviewNotify.skill_preview_list)
  return skill_preview_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewInfo >*
ServerGCGSkillPreviewNotify::mutable_skill_preview_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ServerGCGSkillPreviewNotify.skill_preview_list)
  return &skill_preview_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewInfo >&
ServerGCGSkillPreviewNotify::skill_preview_list() const {
  // @@protoc_insertion_point(field_list:proto.ServerGCGSkillPreviewNotify.skill_preview_list)
  return skill_preview_list_;
}

// repeated .proto.GCGChangeOnstageInfo change_onstage_preview_list = 5;
int ServerGCGSkillPreviewNotify::change_onstage_preview_list_size() const {
  return change_onstage_preview_list_.size();
}
void ServerGCGSkillPreviewNotify::clear_change_onstage_preview_list() {
  change_onstage_preview_list_.Clear();
}
const ::proto::GCGChangeOnstageInfo& ServerGCGSkillPreviewNotify::change_onstage_preview_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGSkillPreviewNotify.change_onstage_preview_list)
  return change_onstage_preview_list_.Get(index);
}
::proto::GCGChangeOnstageInfo* ServerGCGSkillPreviewNotify::mutable_change_onstage_preview_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ServerGCGSkillPreviewNotify.change_onstage_preview_list)
  return change_onstage_preview_list_.Mutable(index);
}
::proto::GCGChangeOnstageInfo* ServerGCGSkillPreviewNotify::add_change_onstage_preview_list() {
  // @@protoc_insertion_point(field_add:proto.ServerGCGSkillPreviewNotify.change_onstage_preview_list)
  return change_onstage_preview_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGChangeOnstageInfo >*
ServerGCGSkillPreviewNotify::mutable_change_onstage_preview_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ServerGCGSkillPreviewNotify.change_onstage_preview_list)
  return &change_onstage_preview_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGChangeOnstageInfo >&
ServerGCGSkillPreviewNotify::change_onstage_preview_list() const {
  // @@protoc_insertion_point(field_list:proto.ServerGCGSkillPreviewNotify.change_onstage_preview_list)
  return change_onstage_preview_list_;
}

// repeated .proto.GCGSkillPreviewPlayCardInfo play_card_list = 6;
int ServerGCGSkillPreviewNotify::play_card_list_size() const {
  return play_card_list_.size();
}
void ServerGCGSkillPreviewNotify::clear_play_card_list() {
  play_card_list_.Clear();
}
const ::proto::GCGSkillPreviewPlayCardInfo& ServerGCGSkillPreviewNotify::play_card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGSkillPreviewNotify.play_card_list)
  return play_card_list_.Get(index);
}
::proto::GCGSkillPreviewPlayCardInfo* ServerGCGSkillPreviewNotify::mutable_play_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ServerGCGSkillPreviewNotify.play_card_list)
  return play_card_list_.Mutable(index);
}
::proto::GCGSkillPreviewPlayCardInfo* ServerGCGSkillPreviewNotify::add_play_card_list() {
  // @@protoc_insertion_point(field_add:proto.ServerGCGSkillPreviewNotify.play_card_list)
  return play_card_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewPlayCardInfo >*
ServerGCGSkillPreviewNotify::mutable_play_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ServerGCGSkillPreviewNotify.play_card_list)
  return &play_card_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewPlayCardInfo >&
ServerGCGSkillPreviewNotify::play_card_list() const {
  // @@protoc_insertion_point(field_list:proto.ServerGCGSkillPreviewNotify.play_card_list)
  return play_card_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerGCGChallengeUpdateNotify::kVerifyFieldNumber;
const int ServerGCGChallengeUpdateNotify::kServerSeqFieldNumber;
const int ServerGCGChallengeUpdateNotify::kChallengeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerGCGChallengeUpdateNotify::ServerGCGChallengeUpdateNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerGCGChallengeUpdateNotify)
}
ServerGCGChallengeUpdateNotify::ServerGCGChallengeUpdateNotify(const ServerGCGChallengeUpdateNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_verify()) {
    verify_ = new ::proto::ServerGCGVerify(*from.verify_);
  } else {
    verify_ = NULL;
  }
  if (from.has_challenge()) {
    challenge_ = new ::proto::GCGDuelChallenge(*from.challenge_);
  } else {
    challenge_ = NULL;
  }
  server_seq_ = from.server_seq_;
  // @@protoc_insertion_point(copy_constructor:proto.ServerGCGChallengeUpdateNotify)
}

void ServerGCGChallengeUpdateNotify::SharedCtor() {
  ::memset(&verify_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_seq_) -
      reinterpret_cast<char*>(&verify_)) + sizeof(server_seq_));
  _cached_size_ = 0;
}

ServerGCGChallengeUpdateNotify::~ServerGCGChallengeUpdateNotify() {
  // @@protoc_insertion_point(destructor:proto.ServerGCGChallengeUpdateNotify)
  SharedDtor();
}

void ServerGCGChallengeUpdateNotify::SharedDtor() {
  if (this != internal_default_instance()) delete verify_;
  if (this != internal_default_instance()) delete challenge_;
}

void ServerGCGChallengeUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGCGChallengeUpdateNotify::descriptor() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerGCGChallengeUpdateNotify& ServerGCGChallengeUpdateNotify::default_instance() {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerGCGChallengeUpdateNotify* ServerGCGChallengeUpdateNotify::New(::google::protobuf::Arena* arena) const {
  ServerGCGChallengeUpdateNotify* n = new ServerGCGChallengeUpdateNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerGCGChallengeUpdateNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerGCGChallengeUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && verify_ != NULL) {
    delete verify_;
  }
  verify_ = NULL;
  if (GetArenaNoVirtual() == NULL && challenge_ != NULL) {
    delete challenge_;
  }
  challenge_ = NULL;
  server_seq_ = 0u;
  _internal_metadata_.Clear();
}

bool ServerGCGChallengeUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerGCGChallengeUpdateNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.ServerGCGVerify verify = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verify()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 server_seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGDuelChallenge challenge = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_challenge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerGCGChallengeUpdateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerGCGChallengeUpdateNotify)
  return false;
#undef DO_
}

void ServerGCGChallengeUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerGCGChallengeUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ServerGCGVerify verify = 1;
  if (this->has_verify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->verify_, output);
  }

  // uint32 server_seq = 2;
  if (this->server_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_seq(), output);
  }

  // .proto.GCGDuelChallenge challenge = 3;
  if (this->has_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->challenge_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerGCGChallengeUpdateNotify)
}

::google::protobuf::uint8* ServerGCGChallengeUpdateNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerGCGChallengeUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ServerGCGVerify verify = 1;
  if (this->has_verify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->verify_, deterministic, target);
  }

  // uint32 server_seq = 2;
  if (this->server_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_seq(), target);
  }

  // .proto.GCGDuelChallenge challenge = 3;
  if (this->has_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->challenge_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerGCGChallengeUpdateNotify)
  return target;
}

size_t ServerGCGChallengeUpdateNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerGCGChallengeUpdateNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.ServerGCGVerify verify = 1;
  if (this->has_verify()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->verify_);
  }

  // .proto.GCGDuelChallenge challenge = 3;
  if (this->has_challenge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->challenge_);
  }

  // uint32 server_seq = 2;
  if (this->server_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGCGChallengeUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerGCGChallengeUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGCGChallengeUpdateNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerGCGChallengeUpdateNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerGCGChallengeUpdateNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerGCGChallengeUpdateNotify)
    MergeFrom(*source);
  }
}

void ServerGCGChallengeUpdateNotify::MergeFrom(const ServerGCGChallengeUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerGCGChallengeUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_verify()) {
    mutable_verify()->::proto::ServerGCGVerify::MergeFrom(from.verify());
  }
  if (from.has_challenge()) {
    mutable_challenge()->::proto::GCGDuelChallenge::MergeFrom(from.challenge());
  }
  if (from.server_seq() != 0) {
    set_server_seq(from.server_seq());
  }
}

void ServerGCGChallengeUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerGCGChallengeUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGCGChallengeUpdateNotify::CopyFrom(const ServerGCGChallengeUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerGCGChallengeUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGCGChallengeUpdateNotify::IsInitialized() const {
  return true;
}

void ServerGCGChallengeUpdateNotify::Swap(ServerGCGChallengeUpdateNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerGCGChallengeUpdateNotify::InternalSwap(ServerGCGChallengeUpdateNotify* other) {
  using std::swap;
  swap(verify_, other->verify_);
  swap(challenge_, other->challenge_);
  swap(server_seq_, other->server_seq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerGCGChallengeUpdateNotify::GetMetadata() const {
  protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fonly_2fcmd_5fgcg_2eserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerGCGChallengeUpdateNotify

// .proto.ServerGCGVerify verify = 1;
bool ServerGCGChallengeUpdateNotify::has_verify() const {
  return this != internal_default_instance() && verify_ != NULL;
}
void ServerGCGChallengeUpdateNotify::clear_verify() {
  if (GetArenaNoVirtual() == NULL && verify_ != NULL) delete verify_;
  verify_ = NULL;
}
const ::proto::ServerGCGVerify& ServerGCGChallengeUpdateNotify::verify() const {
  const ::proto::ServerGCGVerify* p = verify_;
  // @@protoc_insertion_point(field_get:proto.ServerGCGChallengeUpdateNotify.verify)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ServerGCGVerify*>(
      &::proto::_ServerGCGVerify_default_instance_);
}
::proto::ServerGCGVerify* ServerGCGChallengeUpdateNotify::mutable_verify() {
  
  if (verify_ == NULL) {
    verify_ = new ::proto::ServerGCGVerify;
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerGCGChallengeUpdateNotify.verify)
  return verify_;
}
::proto::ServerGCGVerify* ServerGCGChallengeUpdateNotify::release_verify() {
  // @@protoc_insertion_point(field_release:proto.ServerGCGChallengeUpdateNotify.verify)
  
  ::proto::ServerGCGVerify* temp = verify_;
  verify_ = NULL;
  return temp;
}
void ServerGCGChallengeUpdateNotify::set_allocated_verify(::proto::ServerGCGVerify* verify) {
  delete verify_;
  verify_ = verify;
  if (verify) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerGCGChallengeUpdateNotify.verify)
}

// uint32 server_seq = 2;
void ServerGCGChallengeUpdateNotify::clear_server_seq() {
  server_seq_ = 0u;
}
::google::protobuf::uint32 ServerGCGChallengeUpdateNotify::server_seq() const {
  // @@protoc_insertion_point(field_get:proto.ServerGCGChallengeUpdateNotify.server_seq)
  return server_seq_;
}
void ServerGCGChallengeUpdateNotify::set_server_seq(::google::protobuf::uint32 value) {
  
  server_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerGCGChallengeUpdateNotify.server_seq)
}

// .proto.GCGDuelChallenge challenge = 3;
bool ServerGCGChallengeUpdateNotify::has_challenge() const {
  return this != internal_default_instance() && challenge_ != NULL;
}
void ServerGCGChallengeUpdateNotify::clear_challenge() {
  if (GetArenaNoVirtual() == NULL && challenge_ != NULL) delete challenge_;
  challenge_ = NULL;
}
const ::proto::GCGDuelChallenge& ServerGCGChallengeUpdateNotify::challenge() const {
  const ::proto::GCGDuelChallenge* p = challenge_;
  // @@protoc_insertion_point(field_get:proto.ServerGCGChallengeUpdateNotify.challenge)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGDuelChallenge*>(
      &::proto::_GCGDuelChallenge_default_instance_);
}
::proto::GCGDuelChallenge* ServerGCGChallengeUpdateNotify::mutable_challenge() {
  
  if (challenge_ == NULL) {
    challenge_ = new ::proto::GCGDuelChallenge;
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerGCGChallengeUpdateNotify.challenge)
  return challenge_;
}
::proto::GCGDuelChallenge* ServerGCGChallengeUpdateNotify::release_challenge() {
  // @@protoc_insertion_point(field_release:proto.ServerGCGChallengeUpdateNotify.challenge)
  
  ::proto::GCGDuelChallenge* temp = challenge_;
  challenge_ = NULL;
  return temp;
}
void ServerGCGChallengeUpdateNotify::set_allocated_challenge(::proto::GCGDuelChallenge* challenge) {
  delete challenge_;
  challenge_ = challenge;
  if (challenge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerGCGChallengeUpdateNotify.challenge)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
