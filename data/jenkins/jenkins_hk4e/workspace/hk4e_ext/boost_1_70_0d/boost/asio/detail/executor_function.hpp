// File: /data/jenkins/jenkins_hk4e/workspace/hk4e_ext/boost_1_70_0d/boost/asio/detail/executor_function.hpp

// Line 30: range 000000000C64B2E2-000000000C64B326
void __cdecl boost::asio::detail::executor_function_base::complete(
        boost::asio::detail::executor_function_base *const this)
{
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_load8(this);
  this->func_(this, 1LL);
};

// Line 35: range 000000000C64B328-000000000C64B36C
void __cdecl boost::asio::detail::executor_function_base::destroy(
        boost::asio::detail::executor_function_base *const this)
{
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_load8(this);
  this->func_(this, 0LL);
};

// Line 43: range 000000000C64B36E-000000000C64B3AC
void __cdecl boost::asio::detail::executor_function_base::executor_function_base(
        boost::asio::detail::executor_function_base *const this,
        boost::asio::detail::executor_function_base::func_type func)
{
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8();
  this->func_ = func;
};

// Line 49: range 000000000C64B3AE-000000000C64B3B8
void __cdecl boost::asio::detail::executor_function_base::~executor_function_base(
        boost::asio::detail::executor_function_base *const this)
{
  ;
};

// Line 58: range 000000000C70066A-000000000C700684
void __cdecl boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::~executor_function(
        boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> > *const this)
{
  boost::asio::detail::executor_function_base::~executor_function_base(this);
};

// Line 58: range 000000000C700DD0-000000000C700DEA
void __cdecl boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::~executor_function(
        boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> > *const this)
{
  boost::asio::detail::executor_function_base::~executor_function_base(this);
};

// Line 58: range 000000000C6F922E-000000000C6F9258
void __cdecl boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void>>::~executor_function(
        boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void> > *const this)
{
  boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>::~binder1(&this->function_);
  boost::asio::detail::executor_function_base::~executor_function_base(this);
};

// Line 61: range 000000000C6FEA75-000000000C6FEB58
boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> > *__cdecl boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::ptr::allocate(
        const std::allocator<void> *a)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> > *result; // rax
  boost::asio::detail::recycling_allocator<void,boost::asio::detail::thread_info_base::executor_function_tag> v5; // [rsp+1Fh] [rbp-61h] BYREF
  char v6[96]; // [rsp+20h] [rbp-60h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 1 5 a1:61";
  *(_QWORD *)(v1 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::ptr::allocate;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116351;
  boost::asio::detail::get_recycling_allocator<std::allocator<void>,boost::asio::detail::thread_info_base::executor_function_tag>::get(a);
  boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>,boost::asio::detail::thread_info_base::executor_function_tag>::recycling_allocator<void>(
    (boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> >,boost::asio::detail::thread_info_base::executor_function_tag> *const)(v1 + 32),
    &v5);
  result = boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>,boost::asio::detail::thread_info_base::executor_function_tag>::allocate(
             (boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> >,boost::asio::detail::thread_info_base::executor_function_tag> *const)(v1 + 32),
             1uLL);
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 61: range 000000000C6FF64E-000000000C6FF731
boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> > *__cdecl boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::ptr::allocate(
        const std::allocator<void> *a)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> > *result; // rax
  boost::asio::detail::recycling_allocator<void,boost::asio::detail::thread_info_base::executor_function_tag> v5; // [rsp+1Fh] [rbp-61h] BYREF
  char v6[96]; // [rsp+20h] [rbp-60h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 1 5 a1:61";
  *(_QWORD *)(v1 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::ptr::allocate;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116351;
  boost::asio::detail::get_recycling_allocator<std::allocator<void>,boost::asio::detail::thread_info_base::executor_function_tag>::get(a);
  boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>,boost::asio::detail::thread_info_base::executor_function_tag>::recycling_allocator<void>(
    (boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> >,boost::asio::detail::thread_info_base::executor_function_tag> *const)(v1 + 32),
    &v5);
  result = boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>,boost::asio::detail::thread_info_base::executor_function_tag>::allocate(
             (boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> >,boost::asio::detail::thread_info_base::executor_function_tag> *const)(v1 + 32),
             1uLL);
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 61: range 000000000C6F3C84-000000000C6F3D67
boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void> > *__cdecl boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void>>::ptr::allocate(
        const std::allocator<void> *a)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void> > *result; // rax
  boost::asio::detail::recycling_allocator<void,boost::asio::detail::thread_info_base::executor_function_tag> v5; // [rsp+1Fh] [rbp-61h] BYREF
  char v6[96]; // [rsp+20h] [rbp-60h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 1 5 a1:61";
  *(_QWORD *)(v1 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void>>::ptr::allocate;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116351;
  boost::asio::detail::get_recycling_allocator<std::allocator<void>,boost::asio::detail::thread_info_base::executor_function_tag>::get(a);
  boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void>>,boost::asio::detail::thread_info_base::executor_function_tag>::recycling_allocator<void>(
    (boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void> >,boost::asio::detail::thread_info_base::executor_function_tag> *const)(v1 + 32),
    &v5);
  result = boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void>>,boost::asio::detail::thread_info_base::executor_function_tag>::allocate(
             (boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void> >,boost::asio::detail::thread_info_base::executor_function_tag> *const)(v1 + 32),
             1uLL);
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 61: range 000000000C700686-000000000C700898
void __cdecl boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> >::ptr *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  boost::asio::detail::recycling_allocator<void,boost::asio::detail::thread_info_base::executor_function_tag> v4; // [rsp+1Fh] [rbp-61h] BYREF
  char v5[96]; // [rsp+20h] [rbp-60h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 1 5 a1:61";
  *(_QWORD *)(v1 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::ptr::reset;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116351;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->p);
  if ( this->p )
  {
    boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::~executor_function(this->p);
    if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
      __asan_report_store8();
    this->p = 0LL;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->v);
  if ( this->v )
  {
    if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_load8(this);
    boost::asio::detail::get_recycling_allocator<std::allocator<void>,boost::asio::detail::thread_info_base::executor_function_tag>::get(this->a);
    boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>,boost::asio::detail::thread_info_base::executor_function_tag>::recycling_allocator<void>(
      (boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> >,boost::asio::detail::thread_info_base::executor_function_tag> *const)(v1 + 32),
      &v4);
    if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->v);
    boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>,boost::asio::detail::thread_info_base::executor_function_tag>::deallocate(
      (boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> >,boost::asio::detail::thread_info_base::executor_function_tag> *const)(v1 + 32),
      (boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> > *)this->v,
      1uLL);
    if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
      __asan_report_store8();
    this->v = 0LL;
  }
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 61: range 000000000C6FEB5A-000000000C6FEB74
void __cdecl boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::ptr::~ptr(
        boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> >::ptr *const this)
{
  boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::ptr::reset(this);
};

// Line 61: range 000000000C700DEC-000000000C700FFE
void __cdecl boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> >::ptr *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  boost::asio::detail::recycling_allocator<void,boost::asio::detail::thread_info_base::executor_function_tag> v4; // [rsp+1Fh] [rbp-61h] BYREF
  char v5[96]; // [rsp+20h] [rbp-60h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 1 5 a1:61";
  *(_QWORD *)(v1 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::ptr::reset;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116351;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->p);
  if ( this->p )
  {
    boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::~executor_function(this->p);
    if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
      __asan_report_store8();
    this->p = 0LL;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->v);
  if ( this->v )
  {
    if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_load8(this);
    boost::asio::detail::get_recycling_allocator<std::allocator<void>,boost::asio::detail::thread_info_base::executor_function_tag>::get(this->a);
    boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>,boost::asio::detail::thread_info_base::executor_function_tag>::recycling_allocator<void>(
      (boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> >,boost::asio::detail::thread_info_base::executor_function_tag> *const)(v1 + 32),
      &v4);
    if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->v);
    boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>,boost::asio::detail::thread_info_base::executor_function_tag>::deallocate(
      (boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> >,boost::asio::detail::thread_info_base::executor_function_tag> *const)(v1 + 32),
      (boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> > *)this->v,
      1uLL);
    if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
      __asan_report_store8();
    this->v = 0LL;
  }
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 61: range 000000000C6FF732-000000000C6FF74C
void __cdecl boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::ptr::~ptr(
        boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> >::ptr *const this)
{
  boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::ptr::reset(this);
};

// Line 61: range 000000000C6F925A-000000000C6F946C
void __cdecl boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void> >::ptr *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  boost::asio::detail::recycling_allocator<void,boost::asio::detail::thread_info_base::executor_function_tag> v4; // [rsp+1Fh] [rbp-61h] BYREF
  char v5[96]; // [rsp+20h] [rbp-60h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 1 5 a1:61";
  *(_QWORD *)(v1 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void>>::ptr::reset;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116351;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->p);
  if ( this->p )
  {
    boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void>>::~executor_function(this->p);
    if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
      __asan_report_store8();
    this->p = 0LL;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->v);
  if ( this->v )
  {
    if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_load8(this);
    boost::asio::detail::get_recycling_allocator<std::allocator<void>,boost::asio::detail::thread_info_base::executor_function_tag>::get(this->a);
    boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void>>,boost::asio::detail::thread_info_base::executor_function_tag>::recycling_allocator<void>(
      (boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void> >,boost::asio::detail::thread_info_base::executor_function_tag> *const)(v1 + 32),
      &v4);
    if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->v);
    boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void>>,boost::asio::detail::thread_info_base::executor_function_tag>::deallocate(
      (boost::asio::detail::recycling_allocator<boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void> >,boost::asio::detail::thread_info_base::executor_function_tag> *const)(v1 + 32),
      (boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void> > *)this->v,
      1uLL);
    if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
      __asan_report_store8();
    this->v = 0LL;
  }
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 61: range 000000000C6F3D68-000000000C6F3D82
void __cdecl boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void>>::ptr::~ptr(
        boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void> >::ptr *const this)
{
  boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void>>::ptr::reset(this);
};

// Line 61: range 0000000014EE6A4C-0000000014EE7B30
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerSession,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>,boost::system::error_code const&>,boost::_bi::list3<boost::_bi::value<std::shared_ptr<common::minet::AServerSession>>,boost::_bi::value<boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>>,boost::arg<1> (*)(void)>>,boost::system::error_code>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerSession,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> >,const boost::system::error_code&>,boost::_bi::list3<boost::_bi::value<std::shared_ptr<common::minet::AServerSession> >,boost::_bi::value<boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > >,boost::arg<1> (*)()> >,boost::system::error_code>,std::allocator<void> >::ptr *const this)
{
  unsigned __int64 p; // rbp
  common::minet::AServerSession *v2; // rsi
  boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerSession,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> >,const boost::system::error_code&>,boost::_bi::list3<boost::_bi::value<std::shared_ptr<common::minet::AServerSession> >,boost::_bi::value<boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > >,boost::arg<1> (*)()> >,boost::system::error_code>,std::allocator<void> > **p_p; // rdi
  char *v5; // r12
  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *v6; // rdi
  __int64 p_v; // rdi
  __int64 v8; // rax
  boost::signals2::detail::signal_impl<int(common::minet::AServerSession*,unsigned int),boost::signals2::optional_last_value<int>,int,std::less<int>,boost::function<int(common::minet::AServerSession*,unsigned int)>,boost::function<int(const boost::signals2::connection&,common::minet::AServerSession*,unsigned int)>,boost::signals2::mutex> *v9; // rdi
  char v10; // dl
  char v11; // dl
  unsigned int v12; // edx

  p_p = &this->p;
  if ( *(_BYTE *)(((unsigned __int64)p_p >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(p_p);
LABEL_21:
    p_v = p;
    __asan_report_load8(p);
LABEL_22:
    __asan_report_store8();
    goto LABEL_23;
  }
  p = (unsigned __int64)this->p;
  if ( !p )
    goto LABEL_8;
  v5 = (char *)(p + 24);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context((boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > *const)(p + 40));
  p += 32LL;
  if ( *(_BYTE *)((p >> 3) + 0x7FFF8000) )
    goto LABEL_21;
  v6 = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)*((_QWORD *)v5 + 1);
  if ( v6 )
    std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(v6);
  p_v = (__int64)&this->p;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
    goto LABEL_22;
  this->p = 0LL;
LABEL_8:
  p_v = (__int64)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_23:
    __asan_report_load8(p_v);
    goto LABEL_24;
  }
  p = (unsigned __int64)this->v;
  if ( !p )
    return;
  v8 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                  + __readfsqword(0));
  if ( v8 )
  {
    p_v = v8 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v8 + 8) >> 3) + 0x7FFF8000) )
    {
      v8 = *(_QWORD *)(v8 + 8);
      goto LABEL_13;
    }
LABEL_24:
    __asan_report_load8(p_v);
LABEL_25:
    v8 = __asan_report_load8(p_v);
    goto LABEL_26;
  }
LABEL_13:
  if ( !v8 )
  {
LABEL_16:
    operator delete(this->v);
    goto LABEL_17;
  }
  p_v = v8 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v8 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_25;
  if ( *(_QWORD *)(v8 + 16) )
    goto LABEL_16;
LABEL_26:
  v10 = *(_BYTE *)(((p + 112) >> 3) + 0x7FFF8000);
  if ( v10 <= (char)((p + 112) & 7) && v10 )
  {
    __asan_report_load1(p + 112);
LABEL_32:
    v9 = (boost::signals2::detail::signal_impl<int(common::minet::AServerSession*,unsigned int),boost::signals2::optional_last_value<int>,int,std::less<int>,boost::function<int(common::minet::AServerSession*,unsigned int)>,boost::function<int(const boost::signals2::connection&,common::minet::AServerSession*,unsigned int)>,boost::signals2::mutex> *)p;
    __asan_report_store1(p);
    goto LABEL_33;
  }
  v11 = *(_BYTE *)((p >> 3) + 0x7FFF8000);
  v2 = (common::minet::AServerSession *)(p & 7);
  if ( v11 <= (char)v2 && v11 )
    goto LABEL_32;
  *(_BYTE *)p = *(_BYTE *)(p + 112);
  *(_QWORD *)(v8 + 16) = p;
LABEL_17:
  v9 = (boost::signals2::detail::signal_impl<int(common::minet::AServerSession*,unsigned int),boost::signals2::optional_last_value<int>,int,std::less<int>,boost::function<int(common::minet::AServerSession*,unsigned int)>,boost::function<int(const boost::signals2::connection&,common::minet::AServerSession*,unsigned int)>,boost::signals2::mutex> *)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_33:
    __asan_report_store8();
    boost::signals2::detail::signal_impl<int ()(common::minet::AServerSession *,unsigned int),boost::signals2::optional_last_value<int>,int,std::less<int>,boost::function<int ()(common::minet::AServerSession *,unsigned int)>,boost::function<int ()(boost::signals2::connection const&,common::minet::AServerSession *,unsigned int)>,boost::signals2::mutex>::operator()(
      v9,
      v2,
      v12);
    return;
  }
  this->v = 0LL;
};

// Line 61: range 0000000019BEBA22-0000000019BEC6AE
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>,boost::system::error_code>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int> > > >,boost::system::error_code>,std::allocator<void> >::ptr *const this)
{
  unsigned __int64 p; // rbp
  unsigned __int64 p_p; // rdi
  __int64 v4; // rax
  char v5; // dl
  char v6; // dl

  p_p = (unsigned __int64)&this->p;
  if ( *(_BYTE *)((p_p >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(p_p);
LABEL_20:
    __asan_report_store8();
    goto LABEL_21;
  }
  p = (unsigned __int64)this->p;
  if ( !p )
    goto LABEL_7;
  p_p = p + 72;
  if ( *(_BYTE *)(((p + 72) >> 3) + 0x7FFF8000) )
    goto LABEL_20;
  *(_QWORD *)(p + 72) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>,boost::asio::executor,std::allocator<void>>
                      + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(p + 192));
  p_p = p + 80;
  if ( *(_BYTE *)(((p + 80) >> 3) + 0x7FFF8000) )
  {
LABEL_21:
    __asan_report_store8();
    goto LABEL_22;
  }
  *(_QWORD *)(p + 80) = &`vtable for'boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>
                      + 2;
  boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(p + 80));
  p_p = (unsigned __int64)&this->p;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
  {
LABEL_22:
    __asan_report_store8();
    goto LABEL_23;
  }
  this->p = 0LL;
LABEL_7:
  p_p = (unsigned __int64)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_23:
    __asan_report_load8(p_p);
    goto LABEL_24;
  }
  p = (unsigned __int64)this->v;
  if ( !p )
    return;
  v4 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                  + __readfsqword(0));
  if ( v4 )
  {
    p_p = v4 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v4 + 8) >> 3) + 0x7FFF8000) )
    {
      v4 = *(_QWORD *)(v4 + 8);
      goto LABEL_12;
    }
LABEL_24:
    __asan_report_load8(p_p);
LABEL_25:
    v4 = __asan_report_load8(p_p);
    goto LABEL_26;
  }
LABEL_12:
  if ( !v4 )
  {
LABEL_15:
    operator delete(this->v);
    goto LABEL_16;
  }
  p_p = v4 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v4 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_25;
  if ( *(_QWORD *)(v4 + 16) )
    goto LABEL_15;
LABEL_26:
  v5 = *(_BYTE *)(((p + 288) >> 3) + 0x7FFF8000);
  if ( v5 <= (char)((p + 32) & 7) && v5 )
  {
    __asan_report_load1(p + 288);
LABEL_32:
    __asan_report_store1(p);
    goto LABEL_33;
  }
  v6 = *(_BYTE *)((p >> 3) + 0x7FFF8000);
  if ( v6 <= (char)(p & 7) && v6 )
    goto LABEL_32;
  *(_BYTE *)p = *(_BYTE *)(p + 288);
  *(_QWORD *)(v4 + 16) = p;
LABEL_16:
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_33:
    __asan_report_store8();
    JUMPOUT(0x19BEBBFBLL);
  }
  this->v = 0LL;
};

// Line 61: range 0000000014EDF72E-0000000014EE0152
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const this)
{
  boost::asio::detail::executor_function_base *p_function; // rbp
  char v2; // si
  unsigned __int64 p_p; // rdi
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::system::error_code,long unsigned int>,std::allocator<void> > *p; // rdi
  unsigned __int64 v6; // rdx
  boost::asio::detail::executor_function_base *p_v; // rdi
  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *func; // rdi
  __int64 v9; // rax
  boost::asio::detail::executor_function_base *v10; // rdi
  char v11; // dl
  char v12; // dl

  p_p = (unsigned __int64)&this->p;
  if ( *(_BYTE *)((p_p >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(p_p);
LABEL_26:
    __asan_report_load8(p_p);
LABEL_27:
    __asan_report_load8(p_p);
    goto LABEL_28;
  }
  p = this->p;
  if ( !p )
    goto LABEL_13;
  p_function = (boost::asio::detail::executor_function_base *)&p->function_;
  p_p = (unsigned __int64)&p->function_.handler_.handler_;
  if ( *(_BYTE *)((p_p >> 3) + 0x7FFF8000) )
    goto LABEL_26;
  p_p = (unsigned __int64)p_function[3].func_;
  if ( !p_p )
    goto LABEL_8;
  if ( *(_BYTE *)((p_p >> 3) + 0x7FFF8000) )
    goto LABEL_27;
  v6 = *(_QWORD *)p_p + 8LL;
  if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
  {
LABEL_28:
    p_v = (boost::asio::detail::executor_function_base *)v6;
    __asan_report_load8(v6);
    goto LABEL_29;
  }
  (*(void (**)(void))(*(_QWORD *)p_p + 8LL))();
LABEL_8:
  p_v = p_function + 1;
  if ( *(_BYTE *)(((unsigned __int64)&p_function[1] >> 3) + 0x7FFF8000) )
  {
LABEL_29:
    __asan_report_load8(p_v);
LABEL_30:
    __asan_report_store8();
    goto LABEL_31;
  }
  func = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)p_function[1].func_;
  if ( func )
    std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(func);
  p_v = (boost::asio::detail::executor_function_base *)&this->p;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
    goto LABEL_30;
  this->p = 0LL;
LABEL_13:
  p_v = (boost::asio::detail::executor_function_base *)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_31:
    __asan_report_load8(p_v);
    goto LABEL_32;
  }
  p_function = (boost::asio::detail::executor_function_base *)this->v;
  if ( !p_function )
    return;
  v9 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                  + __readfsqword(0));
  if ( v9 )
  {
    p_v = (boost::asio::detail::executor_function_base *)(v9 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v9 + 8) >> 3) + 0x7FFF8000) )
    {
      v9 = *(_QWORD *)(v9 + 8);
      goto LABEL_18;
    }
LABEL_32:
    __asan_report_load8(p_v);
LABEL_33:
    v9 = __asan_report_load8(p_v);
    goto LABEL_34;
  }
LABEL_18:
  if ( !v9 )
  {
LABEL_21:
    operator delete(this->v);
    goto LABEL_22;
  }
  p_v = (boost::asio::detail::executor_function_base *)(v9 + 16);
  if ( *(_BYTE *)(((unsigned __int64)(v9 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_33;
  if ( *(_QWORD *)(v9 + 16) )
    goto LABEL_21;
LABEL_34:
  v11 = *(_BYTE *)(((unsigned __int64)&p_function[13] >> 3) + 0x7FFF8000);
  if ( v11 <= (((unsigned __int8)p_function + 104) & 7) && v11 )
  {
    __asan_report_load1(&p_function[13]);
LABEL_40:
    v10 = p_function;
    __asan_report_store1(p_function);
    goto LABEL_41;
  }
  v12 = *(_BYTE *)(((unsigned __int64)p_function >> 3) + 0x7FFF8000);
  v2 = (unsigned __int8)p_function & 7;
  if ( v12 <= ((unsigned __int8)p_function & 7) && v12 )
    goto LABEL_40;
  LOBYTE(p_function->func_) = p_function[13].func_;
  *(_QWORD *)(v9 + 16) = p_function;
LABEL_22:
  v10 = (boost::asio::detail::executor_function_base *)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_41:
    __asan_report_store8();
    boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
      v10,
      v2);
    return;
  }
  this->v = 0LL;
};

// Line 61: range 0000000014EC48E8-0000000014EC4A93
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::asio::detail::write_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp,boost::asio::executor>,std::vector<boost::asio::const_buffer>,__gnu_cxx::__normal_iterator<boost::asio::const_buffer const*,std::vector<boost::asio::const_buffer>>,boost::asio::detail::transfer_all_t,common::minet::AServerSession::asyncSendFrontString(void)::{lambda(boost::system::error_code const&,unsigned long)#1}>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::asio::detail::write_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp,boost::asio::executor>,std::vector<boost::asio::const_buffer>,__gnu_cxx::__normal_iterator<const boost::asio::const_buffer*,std::vector<boost::asio::const_buffer> >,boost::asio::detail::transfer_all_t,common::minet::AServerSession::asyncSendFrontString()::<lambda(const boost::system::error_code&,size_t)> >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const this)
{
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::asio::detail::write_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp,boost::asio::executor>,std::vector<boost::asio::const_buffer>,__gnu_cxx::__normal_iterator<const boost::asio::const_buffer*,std::vector<boost::asio::const_buffer> >,boost::asio::detail::transfer_all_t,common::minet::AServerSession::asyncSendFrontString()::<lambda(const boost::system::error_code&,size_t)> >,boost::system::error_code,long unsigned int>,std::allocator<void> > **p_p; // rdi
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::asio::detail::write_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp,boost::asio::executor>,std::vector<boost::asio::const_buffer>,__gnu_cxx::__normal_iterator<const boost::asio::const_buffer*,std::vector<boost::asio::const_buffer> >,boost::asio::detail::transfer_all_t,common::minet::AServerSession::asyncSendFrontString()::<lambda(const boost::system::error_code&,size_t)> >,boost::system::error_code,long unsigned int>,std::allocator<void> > *p; // rdi
  boost::asio::detail::binder2<boost::asio::detail::write_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp,boost::asio::executor>,std::vector<boost::asio::const_buffer>,__gnu_cxx::__normal_iterator<const boost::asio::const_buffer*,std::vector<boost::asio::const_buffer> >,boost::asio::detail::transfer_all_t,common::minet::AServerSession::asyncSendFrontString()::<lambda(const boost::system::error_code&,size_t)> >,boost::system::error_code,long unsigned int> *p_function; // rbp
  std::__shared_count<(__gnu_cxx::_Lock_policy)2> *p_M_refcount; // rdi
  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *M_pi; // rdi
  std::_Vector_base<boost::asio::const_buffer>::pointer M_start; // rdi
  unsigned __int64 v; // rbp
  __int64 v9; // rax
  char v10; // dl
  char v11; // cl
  char v12; // dl

  p_p = &this->p;
  if ( *(_BYTE *)(((unsigned __int64)p_p >> 3) + 0x7FFF8000) )
    __asan_report_load8(p_p);
  p = this->p;
  if ( p )
  {
    p_function = &p->function_;
    p_M_refcount = &p->function_.handler_.handler_.__self_ptr._M_refcount;
    if ( *(_BYTE *)(((unsigned __int64)p_M_refcount >> 3) + 0x7FFF8000) )
      __asan_report_load8(p_M_refcount);
    M_pi = p_function->handler_.handler_.__self_ptr._M_refcount._M_pi;
    if ( M_pi )
      std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(M_pi);
    if ( *(_BYTE *)(((unsigned __int64)&p_function->handler_.buffers_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&p_function->handler_.buffers_);
    M_start = p_function->handler_.buffers_.buffers_._M_impl._M_start;
    if ( M_start )
      operator delete(M_start);
    if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
      __asan_report_store8();
    this->p = 0LL;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->v);
  v = (unsigned __int64)this->v;
  if ( v )
  {
    v9 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                    + __readfsqword(0));
    if ( v9 )
    {
      if ( *(_BYTE *)(((unsigned __int64)(v9 + 8) >> 3) + 0x7FFF8000) )
        v9 = __asan_report_load8(v9 + 8);
      v9 = *(_QWORD *)(v9 + 8);
    }
    if ( !v9 )
      goto LABEL_35;
    if ( *(_BYTE *)(((unsigned __int64)(v9 + 16) >> 3) + 0x7FFF8000) )
      v9 = __asan_report_load8(v9 + 16);
    if ( *(_QWORD *)(v9 + 16) )
      goto LABEL_35;
    v10 = *(_BYTE *)(((v + 128) >> 3) + 0x7FFF8000);
    if ( v10 <= (char)((v + 0x80) & 7) && v10 )
      v9 = __asan_report_load1(v + 128);
    v11 = *(_BYTE *)(v + 128);
    v12 = *(_BYTE *)((v >> 3) + 0x7FFF8000);
    if ( v12 <= (char)(v & 7) )
    {
      if ( v12 )
        v9 = __asan_report_store1(v);
    }
    *(_BYTE *)v = v11;
    *(_QWORD *)(v9 + 16) = v;
    while ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
    {
      __asan_report_store8();
LABEL_35:
      operator delete((void *)v);
    }
    this->v = 0LL;
  }
};

// Line 61: range 0000000019C4E83A-0000000019C4FD60
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int> > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const this)
{
  unsigned __int64 p_function; // rbp
  char v2; // si
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int> > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> > **p_p; // rdi
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int> > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> > *p; // r12
  unsigned __int64 p_clear; // rdi
  char v7; // al
  boost::detail::sp_counted_base *pi; // rdi
  __int64 p_handler; // rdi
  __int64 v10; // rax
  boost::asio::detail::executor_function_base *p_v; // rdi
  char v12; // dl
  char v13; // dl

  p_p = &this->p;
  if ( *(_BYTE *)(((unsigned __int64)p_p >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(p_p);
LABEL_31:
    p_clear = p_function;
    __asan_report_store8();
    goto LABEL_32;
  }
  p = this->p;
  if ( !p )
    goto LABEL_18;
  p_function = (unsigned __int64)&p->function_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_ >> 3) + 0x7FFF8000) )
    goto LABEL_31;
  p->function_.handler_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>>>
                                                         + 2);
  p_clear = (unsigned __int64)&p->function_.handler_.pg_.clear_;
  if ( *(char *)(((unsigned __int64)&p->function_.handler_.pg_.clear_ >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_32:
    __asan_report_load1(p_clear);
LABEL_33:
    __asan_report_load8(p_clear);
LABEL_34:
    __asan_report_store1(p_clear);
    goto LABEL_35;
  }
  if ( !p->function_.handler_.pg_.clear_ )
    goto LABEL_10;
  p_clear = (unsigned __int64)&p->function_.handler_.pg_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.pg_ >> 3) + 0x7FFF8000) )
    goto LABEL_33;
  p_clear = (unsigned __int64)p->function_.handler_.pg_.b_;
  v7 = *(_BYTE *)((p_clear >> 3) + 0x7FFF8000);
  if ( v7 <= ((__int64)p->function_.handler_.pg_.b_ & 7) && v7 )
    goto LABEL_34;
  *(_BYTE *)p_clear = 0;
LABEL_10:
  p_clear = (unsigned __int64)&p->function_.handler_.impl_.pn;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.impl_.pn >> 3) + 0x7FFF8000) )
  {
LABEL_35:
    __asan_report_load8(p_clear);
LABEL_36:
    p_handler = p_function;
    __asan_report_store8();
    goto LABEL_37;
  }
  pi = p->function_.handler_.impl_.pn.pi_;
  if ( pi )
    boost::detail::sp_counted_base::release(pi);
  if ( *(_BYTE *)((p_function >> 3) + 0x7FFF8000) )
    goto LABEL_36;
  p->function_.handler_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::async_base<boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>>,boost::asio::executor,std::allocator<void>>
                                                         + 2);
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard(&p->function_.handler_.wg1_);
  p_handler = (__int64)&p->function_.handler_.h_.handler_.handler_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.h_.handler_.handler_ >> 3) + 0x7FFF8000) )
  {
LABEL_37:
    __asan_report_store8();
    goto LABEL_38;
  }
  p->function_.handler_.h_.handler_.handler_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::async_base<boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>,boost::asio::executor,std::allocator<void>>
                                                                              + 2);
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard(&p->function_.handler_.h_.handler_.handler_.wg1_);
  p_handler = (__int64)&p->function_.handler_.h_.handler_.handler_.h_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.h_.handler_.handler_.h_ >> 3) + 0x7FFF8000) )
  {
LABEL_38:
    __asan_report_store8();
    goto LABEL_39;
  }
  p->function_.handler_.h_.handler_.handler_.h_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>
                                                                                 + 2);
  boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base(&p->function_.handler_.h_.handler_.handler_.h_);
  p_handler = (__int64)&this->p;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
  {
LABEL_39:
    __asan_report_store8();
    goto LABEL_40;
  }
  this->p = 0LL;
LABEL_18:
  p_handler = (__int64)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_40:
    __asan_report_load8(p_handler);
    goto LABEL_41;
  }
  p_function = (unsigned __int64)this->v;
  if ( !p_function )
    return;
  v10 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v10 )
  {
    p_handler = v10 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v10 + 8) >> 3) + 0x7FFF8000) )
    {
      v10 = *(_QWORD *)(v10 + 8);
      goto LABEL_23;
    }
LABEL_41:
    __asan_report_load8(p_handler);
LABEL_42:
    v10 = __asan_report_load8(p_handler);
    goto LABEL_43;
  }
LABEL_23:
  if ( !v10 )
  {
LABEL_26:
    operator delete(this->v);
    goto LABEL_27;
  }
  p_handler = v10 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v10 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_42;
  if ( *(_QWORD *)(v10 + 16) )
    goto LABEL_26;
LABEL_43:
  v12 = *(_BYTE *)(((p_function + 416) >> 3) + 0x7FFF8000);
  if ( v12 <= (char)((p_function - 96) & 7) && v12 )
  {
    __asan_report_load1(p_function + 416);
LABEL_49:
    p_v = (boost::asio::detail::executor_function_base *)p_function;
    __asan_report_store1(p_function);
    goto LABEL_50;
  }
  v13 = *(_BYTE *)((p_function >> 3) + 0x7FFF8000);
  v2 = p_function & 7;
  if ( v13 <= (char)(p_function & 7) && v13 )
    goto LABEL_49;
  *(_BYTE *)p_function = *(_BYTE *)(p_function + 416);
  *(_QWORD *)(v10 + 16) = p_function;
LABEL_27:
  p_v = (boost::asio::detail::executor_function_base *)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_50:
    __asan_report_store8();
    boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
      p_v,
      v2);
    return;
  }
  this->v = 0LL;
};

// Line 61: range 0000000019CD6DA4-0000000019CD796F
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const this)
{
  unsigned __int64 p_function; // rbp
  char v2; // si
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> > **p_p; // rdi
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> > *p; // r12
  unsigned __int64 p_clear; // rdi
  char v7; // al
  boost::detail::sp_counted_base *pi; // rdi
  __int64 p_handler; // rdi
  __int64 v10; // rax
  boost::asio::detail::executor_function_base *p_v; // rdi
  char v12; // dl
  char v13; // dl

  p_p = &this->p;
  if ( *(_BYTE *)(((unsigned __int64)p_p >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(p_p);
LABEL_31:
    p_clear = p_function;
    __asan_report_store8();
    goto LABEL_32;
  }
  p = this->p;
  if ( !p )
    goto LABEL_18;
  p_function = (unsigned __int64)&p->function_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_ >> 3) + 0x7FFF8000) )
    goto LABEL_31;
  p->function_.handler_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>
                                                         + 2);
  p_clear = (unsigned __int64)&p->function_.handler_.pg_.clear_;
  if ( *(char *)(((unsigned __int64)&p->function_.handler_.pg_.clear_ >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_32:
    __asan_report_load1(p_clear);
LABEL_33:
    __asan_report_load8(p_clear);
LABEL_34:
    __asan_report_store1(p_clear);
    goto LABEL_35;
  }
  if ( !p->function_.handler_.pg_.clear_ )
    goto LABEL_10;
  p_clear = (unsigned __int64)&p->function_.handler_.pg_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.pg_ >> 3) + 0x7FFF8000) )
    goto LABEL_33;
  p_clear = (unsigned __int64)p->function_.handler_.pg_.b_;
  v7 = *(_BYTE *)((p_clear >> 3) + 0x7FFF8000);
  if ( v7 <= ((__int64)p->function_.handler_.pg_.b_ & 7) && v7 )
    goto LABEL_34;
  *(_BYTE *)p_clear = 0;
LABEL_10:
  p_clear = (unsigned __int64)&p->function_.handler_.impl_.pn;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.impl_.pn >> 3) + 0x7FFF8000) )
  {
LABEL_35:
    __asan_report_load8(p_clear);
LABEL_36:
    p_handler = p_function;
    __asan_report_store8();
    goto LABEL_37;
  }
  pi = p->function_.handler_.impl_.pn.pi_;
  if ( pi )
    boost::detail::sp_counted_base::release(pi);
  if ( *(_BYTE *)((p_function >> 3) + 0x7FFF8000) )
    goto LABEL_36;
  p->function_.handler_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::async_base<boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::asio::executor,std::allocator<void>>
                                                         + 2);
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard(&p->function_.handler_.wg1_);
  p_handler = (__int64)&p->function_.handler_.h_.handler_.handler_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.h_.handler_.handler_ >> 3) + 0x7FFF8000) )
  {
LABEL_37:
    __asan_report_store8();
    goto LABEL_38;
  }
  p->function_.handler_.h_.handler_.handler_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                                                                              + 2);
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard(&p->function_.handler_.h_.handler_.handler_.wg1_);
  p_handler = (__int64)&p->function_.handler_.h_.handler_.handler_.h_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.h_.handler_.handler_.h_ >> 3) + 0x7FFF8000) )
  {
LABEL_38:
    __asan_report_store8();
    goto LABEL_39;
  }
  p->function_.handler_.h_.handler_.handler_.h_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                                                                                 + 2);
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base(&p->function_.handler_.h_.handler_.handler_.h_);
  p_handler = (__int64)&this->p;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
  {
LABEL_39:
    __asan_report_store8();
    goto LABEL_40;
  }
  this->p = 0LL;
LABEL_18:
  p_handler = (__int64)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_40:
    __asan_report_load8(p_handler);
    goto LABEL_41;
  }
  p_function = (unsigned __int64)this->v;
  if ( !p_function )
    return;
  v10 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v10 )
  {
    p_handler = v10 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v10 + 8) >> 3) + 0x7FFF8000) )
    {
      v10 = *(_QWORD *)(v10 + 8);
      goto LABEL_23;
    }
LABEL_41:
    __asan_report_load8(p_handler);
LABEL_42:
    v10 = __asan_report_load8(p_handler);
    goto LABEL_43;
  }
LABEL_23:
  if ( !v10 )
  {
LABEL_26:
    operator delete(this->v);
    goto LABEL_27;
  }
  p_handler = v10 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v10 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_42;
  if ( *(_QWORD *)(v10 + 16) )
    goto LABEL_26;
LABEL_43:
  v12 = *(_BYTE *)(((p_function + 464) >> 3) + 0x7FFF8000);
  if ( v12 <= (char)((p_function - 48) & 7) && v12 )
  {
    __asan_report_load1(p_function + 464);
LABEL_49:
    p_v = (boost::asio::detail::executor_function_base *)p_function;
    __asan_report_store1(p_function);
    goto LABEL_50;
  }
  v13 = *(_BYTE *)((p_function >> 3) + 0x7FFF8000);
  v2 = p_function & 7;
  if ( v13 <= (char)(p_function & 7) && v13 )
    goto LABEL_49;
  *(_BYTE *)p_function = *(_BYTE *)(p_function + 464);
  *(_QWORD *)(v10 + 16) = p_function;
LABEL_27:
  p_v = (boost::asio::detail::executor_function_base *)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_50:
    __asan_report_store8();
    boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
      p_v,
      v2);
    return;
  }
  this->v = 0LL;
};

// Line 61: range 0000000019CD8D3A-0000000019CD9922
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::asio::const_buffer>&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const this)
{
  unsigned __int64 p_function; // rbp
  char v2; // si
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::asio::const_buffer>&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> > **p_p; // rdi
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::asio::const_buffer>&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> > *p; // r12
  unsigned __int64 p_clear; // rdi
  char v7; // al
  boost::detail::sp_counted_base *pi; // rdi
  __int64 p_handler; // rdi
  __int64 v10; // rax
  boost::asio::detail::executor_function_base *p_v; // rdi
  char v12; // dl
  char v13; // dl

  p_p = &this->p;
  if ( *(_BYTE *)(((unsigned __int64)p_p >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(p_p);
LABEL_31:
    p_clear = p_function;
    __asan_report_store8();
    goto LABEL_32;
  }
  p = this->p;
  if ( !p )
    goto LABEL_18;
  p_function = (unsigned __int64)&p->function_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_ >> 3) + 0x7FFF8000) )
    goto LABEL_31;
  p->function_.handler_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>
                                                         + 2);
  p_clear = (unsigned __int64)&p->function_.handler_.pg_.clear_;
  if ( *(char *)(((unsigned __int64)&p->function_.handler_.pg_.clear_ >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_32:
    __asan_report_load1(p_clear);
LABEL_33:
    __asan_report_load8(p_clear);
LABEL_34:
    __asan_report_store1(p_clear);
    goto LABEL_35;
  }
  if ( !p->function_.handler_.pg_.clear_ )
    goto LABEL_10;
  p_clear = (unsigned __int64)&p->function_.handler_.pg_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.pg_ >> 3) + 0x7FFF8000) )
    goto LABEL_33;
  p_clear = (unsigned __int64)p->function_.handler_.pg_.b_;
  v7 = *(_BYTE *)((p_clear >> 3) + 0x7FFF8000);
  if ( v7 <= ((__int64)p->function_.handler_.pg_.b_ & 7) && v7 )
    goto LABEL_34;
  *(_BYTE *)p_clear = 0;
LABEL_10:
  p_clear = (unsigned __int64)&p->function_.handler_.impl_.pn;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.impl_.pn >> 3) + 0x7FFF8000) )
  {
LABEL_35:
    __asan_report_load8(p_clear);
LABEL_36:
    p_handler = p_function;
    __asan_report_store8();
    goto LABEL_37;
  }
  pi = p->function_.handler_.impl_.pn.pi_;
  if ( pi )
    boost::detail::sp_counted_base::release(pi);
  if ( *(_BYTE *)((p_function >> 3) + 0x7FFF8000) )
    goto LABEL_36;
  p->function_.handler_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::async_base<boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::asio::executor,std::allocator<void>>
                                                         + 2);
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard(&p->function_.handler_.wg1_);
  p_handler = (__int64)&p->function_.handler_.h_.handler_.handler_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.h_.handler_.handler_ >> 3) + 0x7FFF8000) )
  {
LABEL_37:
    __asan_report_store8();
    goto LABEL_38;
  }
  p->function_.handler_.h_.handler_.handler_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                                                                              + 2);
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard(&p->function_.handler_.h_.handler_.handler_.wg1_);
  p_handler = (__int64)&p->function_.handler_.h_.handler_.handler_.h_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.h_.handler_.handler_.h_ >> 3) + 0x7FFF8000) )
  {
LABEL_38:
    __asan_report_store8();
    goto LABEL_39;
  }
  p->function_.handler_.h_.handler_.handler_.h_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                                                                                 + 2);
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base(&p->function_.handler_.h_.handler_.handler_.h_);
  p_handler = (__int64)&this->p;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
  {
LABEL_39:
    __asan_report_store8();
    goto LABEL_40;
  }
  this->p = 0LL;
LABEL_18:
  p_handler = (__int64)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_40:
    __asan_report_load8(p_handler);
    goto LABEL_41;
  }
  p_function = (unsigned __int64)this->v;
  if ( !p_function )
    return;
  v10 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v10 )
  {
    p_handler = v10 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v10 + 8) >> 3) + 0x7FFF8000) )
    {
      v10 = *(_QWORD *)(v10 + 8);
      goto LABEL_23;
    }
LABEL_41:
    __asan_report_load8(p_handler);
LABEL_42:
    v10 = __asan_report_load8(p_handler);
    goto LABEL_43;
  }
LABEL_23:
  if ( !v10 )
  {
LABEL_26:
    operator delete(this->v);
    goto LABEL_27;
  }
  p_handler = v10 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v10 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_42;
  if ( *(_QWORD *)(v10 + 16) )
    goto LABEL_26;
LABEL_43:
  v12 = *(_BYTE *)(((p_function + 504) >> 3) + 0x7FFF8000);
  if ( v12 <= (char)((p_function - 8) & 7) && v12 )
  {
    __asan_report_load1(p_function + 504);
LABEL_49:
    p_v = (boost::asio::detail::executor_function_base *)p_function;
    __asan_report_store1(p_function);
    goto LABEL_50;
  }
  v13 = *(_BYTE *)((p_function >> 3) + 0x7FFF8000);
  v2 = p_function & 7;
  if ( v13 <= (char)(p_function & 7) && v13 )
    goto LABEL_49;
  *(_BYTE *)p_function = *(_BYTE *)(p_function + 504);
  *(_QWORD *)(v10 + 16) = p_function;
LABEL_27:
  p_v = (boost::asio::detail::executor_function_base *)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_50:
    __asan_report_store8();
    boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
      p_v,
      v2);
    return;
  }
  this->v = 0LL;
};

// Line 61: range 0000000019CDC240-0000000019CDCBFE
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const this)
{
  boost::asio::detail::executor_function_base *v; // rbp
  char v2; // si
  unsigned __int64 p_p; // rdi
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> > *p; // rdi
  __int64 v6; // rax
  boost::asio::detail::executor_function_base *p_v; // rdi
  char v8; // dl
  char v9; // dl

  p_p = (unsigned __int64)&this->p;
  if ( *(_BYTE *)((p_p >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(p_p);
    goto LABEL_18;
  }
  p = this->p;
  if ( !p )
    goto LABEL_5;
  boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>::~transfer_op(&p->function_.handler_);
  p_p = (unsigned __int64)&this->p;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
  {
LABEL_18:
    __asan_report_store8();
    goto LABEL_19;
  }
  this->p = 0LL;
LABEL_5:
  p_p = (unsigned __int64)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_19:
    __asan_report_load8(p_p);
    goto LABEL_20;
  }
  v = (boost::asio::detail::executor_function_base *)this->v;
  if ( !v )
    return;
  v6 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                  + __readfsqword(0));
  if ( v6 )
  {
    p_p = v6 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v6 + 8) >> 3) + 0x7FFF8000) )
    {
      v6 = *(_QWORD *)(v6 + 8);
      goto LABEL_10;
    }
LABEL_20:
    __asan_report_load8(p_p);
LABEL_21:
    v6 = __asan_report_load8(p_p);
    goto LABEL_22;
  }
LABEL_10:
  if ( !v6 )
  {
LABEL_13:
    operator delete(this->v);
    goto LABEL_14;
  }
  p_p = v6 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v6 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_21;
  if ( *(_QWORD *)(v6 + 16) )
    goto LABEL_13;
LABEL_22:
  v8 = *(_BYTE *)(((unsigned __int64)&v[65] >> 3) + 0x7FFF8000);
  if ( v8 <= (((unsigned __int8)v + 8) & 7) && v8 )
  {
    __asan_report_load1(&v[65]);
LABEL_28:
    p_v = v;
    __asan_report_store1(v);
    goto LABEL_29;
  }
  v9 = *(_BYTE *)(((unsigned __int64)v >> 3) + 0x7FFF8000);
  v2 = (unsigned __int8)v & 7;
  if ( v9 <= ((unsigned __int8)v & 7) && v9 )
    goto LABEL_28;
  LOBYTE(v->func_) = v[65].func_;
  *(_QWORD *)(v6 + 16) = v;
LABEL_14:
  p_v = (boost::asio::detail::executor_function_base *)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_29:
    __asan_report_store8();
    boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
      p_v,
      v2);
    return;
  }
  this->v = 0LL;
};

// Line 61: range 0000000019CD7974-0000000019CD8371
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::asio::const_buffer> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const this)
{
  boost::asio::detail::executor_function_base *v; // rbp
  char v2; // si
  unsigned __int64 p_p; // rdi
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::asio::const_buffer> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> > *p; // rdi
  __int64 v6; // rax
  boost::asio::detail::executor_function_base *p_v; // rdi
  char v8; // dl
  char v9; // dl

  p_p = (unsigned __int64)&this->p;
  if ( *(_BYTE *)((p_p >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(p_p);
    goto LABEL_18;
  }
  p = this->p;
  if ( !p )
    goto LABEL_5;
  boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>::~transfer_op(&p->function_.handler_);
  p_p = (unsigned __int64)&this->p;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
  {
LABEL_18:
    __asan_report_store8();
    goto LABEL_19;
  }
  this->p = 0LL;
LABEL_5:
  p_p = (unsigned __int64)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_19:
    __asan_report_load8(p_p);
    goto LABEL_20;
  }
  v = (boost::asio::detail::executor_function_base *)this->v;
  if ( !v )
    return;
  v6 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                  + __readfsqword(0));
  if ( v6 )
  {
    p_p = v6 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v6 + 8) >> 3) + 0x7FFF8000) )
    {
      v6 = *(_QWORD *)(v6 + 8);
      goto LABEL_10;
    }
LABEL_20:
    __asan_report_load8(p_p);
LABEL_21:
    v6 = __asan_report_load8(p_p);
    goto LABEL_22;
  }
LABEL_10:
  if ( !v6 )
  {
LABEL_13:
    operator delete(this->v);
    goto LABEL_14;
  }
  p_p = v6 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v6 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_21;
  if ( *(_QWORD *)(v6 + 16) )
    goto LABEL_13;
LABEL_22:
  v8 = *(_BYTE *)(((unsigned __int64)&v[67] >> 3) + 0x7FFF8000);
  if ( v8 <= (((unsigned __int8)v + 24) & 7) && v8 )
  {
    __asan_report_load1(&v[67]);
LABEL_28:
    p_v = v;
    __asan_report_store1(v);
    goto LABEL_29;
  }
  v9 = *(_BYTE *)(((unsigned __int64)v >> 3) + 0x7FFF8000);
  v2 = (unsigned __int8)v & 7;
  if ( v9 <= ((unsigned __int8)v & 7) && v9 )
    goto LABEL_28;
  LOBYTE(v->func_) = v[67].func_;
  *(_QWORD *)(v6 + 16) = v;
LABEL_14:
  p_v = (boost::asio::detail::executor_function_base *)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_29:
    __asan_report_store8();
    boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
      p_v,
      v2);
    return;
  }
  this->v = 0LL;
};

// Line 61: range 0000000019CDB83E-0000000019CDC23B
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const this)
{
  boost::asio::detail::executor_function_base *v; // rbp
  char v2; // si
  unsigned __int64 p_p; // rdi
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> > *p; // rdi
  __int64 v6; // rax
  boost::asio::detail::executor_function_base *p_v; // rdi
  char v8; // dl
  char v9; // dl

  p_p = (unsigned __int64)&this->p;
  if ( *(_BYTE *)((p_p >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(p_p);
    goto LABEL_18;
  }
  p = this->p;
  if ( !p )
    goto LABEL_5;
  boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>::~transfer_op(&p->function_.handler_);
  p_p = (unsigned __int64)&this->p;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
  {
LABEL_18:
    __asan_report_store8();
    goto LABEL_19;
  }
  this->p = 0LL;
LABEL_5:
  p_p = (unsigned __int64)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_19:
    __asan_report_load8(p_p);
    goto LABEL_20;
  }
  v = (boost::asio::detail::executor_function_base *)this->v;
  if ( !v )
    return;
  v6 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                  + __readfsqword(0));
  if ( v6 )
  {
    p_p = v6 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v6 + 8) >> 3) + 0x7FFF8000) )
    {
      v6 = *(_QWORD *)(v6 + 8);
      goto LABEL_10;
    }
LABEL_20:
    __asan_report_load8(p_p);
LABEL_21:
    v6 = __asan_report_load8(p_p);
    goto LABEL_22;
  }
LABEL_10:
  if ( !v6 )
  {
LABEL_13:
    operator delete(this->v);
    goto LABEL_14;
  }
  p_p = v6 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v6 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_21;
  if ( *(_QWORD *)(v6 + 16) )
    goto LABEL_13;
LABEL_22:
  v8 = *(_BYTE *)(((unsigned __int64)&v[67] >> 3) + 0x7FFF8000);
  if ( v8 <= (((unsigned __int8)v + 24) & 7) && v8 )
  {
    __asan_report_load1(&v[67]);
LABEL_28:
    p_v = v;
    __asan_report_store1(v);
    goto LABEL_29;
  }
  v9 = *(_BYTE *)(((unsigned __int64)v >> 3) + 0x7FFF8000);
  v2 = (unsigned __int8)v & 7;
  if ( v9 <= ((unsigned __int8)v & 7) && v9 )
    goto LABEL_28;
  LOBYTE(v->func_) = v[67].func_;
  *(_QWORD *)(v6 + 16) = v;
LABEL_14:
  p_v = (boost::asio::detail::executor_function_base *)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_29:
    __asan_report_store8();
    boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
      p_v,
      v2);
    return;
  }
  this->v = 0LL;
};

// Line 61: range 0000000019CD9928-0000000019CDA325
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const this)
{
  boost::asio::detail::executor_function_base *v; // rbp
  char v2; // si
  unsigned __int64 p_p; // rdi
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> > *p; // rdi
  __int64 v6; // rax
  boost::asio::detail::executor_function_base *p_v; // rdi
  char v8; // dl
  char v9; // dl

  p_p = (unsigned __int64)&this->p;
  if ( *(_BYTE *)((p_p >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(p_p);
    goto LABEL_18;
  }
  p = this->p;
  if ( !p )
    goto LABEL_5;
  boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>::~transfer_op(&p->function_.handler_);
  p_p = (unsigned __int64)&this->p;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
  {
LABEL_18:
    __asan_report_store8();
    goto LABEL_19;
  }
  this->p = 0LL;
LABEL_5:
  p_p = (unsigned __int64)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_19:
    __asan_report_load8(p_p);
    goto LABEL_20;
  }
  v = (boost::asio::detail::executor_function_base *)this->v;
  if ( !v )
    return;
  v6 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                  + __readfsqword(0));
  if ( v6 )
  {
    p_p = v6 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v6 + 8) >> 3) + 0x7FFF8000) )
    {
      v6 = *(_QWORD *)(v6 + 8);
      goto LABEL_10;
    }
LABEL_20:
    __asan_report_load8(p_p);
LABEL_21:
    v6 = __asan_report_load8(p_p);
    goto LABEL_22;
  }
LABEL_10:
  if ( !v6 )
  {
LABEL_13:
    operator delete(this->v);
    goto LABEL_14;
  }
  p_p = v6 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v6 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_21;
  if ( *(_QWORD *)(v6 + 16) )
    goto LABEL_13;
LABEL_22:
  v8 = *(_BYTE *)(((unsigned __int64)&v[67] >> 3) + 0x7FFF8000);
  if ( v8 <= (((unsigned __int8)v + 24) & 7) && v8 )
  {
    __asan_report_load1(&v[67]);
LABEL_28:
    p_v = v;
    __asan_report_store1(v);
    goto LABEL_29;
  }
  v9 = *(_BYTE *)(((unsigned __int64)v >> 3) + 0x7FFF8000);
  v2 = (unsigned __int8)v & 7;
  if ( v9 <= ((unsigned __int8)v & 7) && v9 )
    goto LABEL_28;
  LOBYTE(v->func_) = v[67].func_;
  *(_QWORD *)(v6 + 16) = v;
LABEL_14:
  p_v = (boost::asio::detail::executor_function_base *)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_29:
    __asan_report_store8();
    boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
      p_v,
      v2);
    return;
  }
  this->v = 0LL;
};

// Line 61: range 0000000019CDACEE-0000000019CDB839
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const this)
{
  unsigned __int64 p_function; // rbp
  char v2; // si
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> > **p_p; // rdi
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> > *p; // r12
  unsigned __int64 p_clear; // rdi
  char v7; // al
  boost::detail::sp_counted_base *pi; // rdi
  __int64 p_v; // rdi
  __int64 v10; // rax
  boost::asio::detail::executor_function_base *v11; // rdi
  char v12; // dl
  char v13; // dl

  p_p = &this->p;
  if ( *(_BYTE *)(((unsigned __int64)p_p >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(p_p);
LABEL_29:
    p_clear = p_function;
    __asan_report_store8();
    goto LABEL_30;
  }
  p = this->p;
  if ( !p )
    goto LABEL_16;
  p_function = (unsigned __int64)&p->function_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_ >> 3) + 0x7FFF8000) )
    goto LABEL_29;
  p->function_.handler_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>
                                                         + 2);
  p_clear = (unsigned __int64)&p->function_.handler_.pg_.clear_;
  if ( *(char *)(((unsigned __int64)&p->function_.handler_.pg_.clear_ >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_30:
    __asan_report_load1(p_clear);
LABEL_31:
    __asan_report_load8(p_clear);
LABEL_32:
    __asan_report_store1(p_clear);
    goto LABEL_33;
  }
  if ( !p->function_.handler_.pg_.clear_ )
    goto LABEL_10;
  p_clear = (unsigned __int64)&p->function_.handler_.pg_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.pg_ >> 3) + 0x7FFF8000) )
    goto LABEL_31;
  p_clear = (unsigned __int64)p->function_.handler_.pg_.b_;
  v7 = *(_BYTE *)((p_clear >> 3) + 0x7FFF8000);
  if ( v7 <= ((__int64)p->function_.handler_.pg_.b_ & 7) && v7 )
    goto LABEL_32;
  *(_BYTE *)p_clear = 0;
LABEL_10:
  p_clear = (unsigned __int64)&p->function_.handler_.impl_.pn;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.impl_.pn >> 3) + 0x7FFF8000) )
  {
LABEL_33:
    __asan_report_load8(p_clear);
LABEL_34:
    p_v = p_function;
    __asan_report_store8();
    goto LABEL_35;
  }
  pi = p->function_.handler_.impl_.pn.pi_;
  if ( pi )
    boost::detail::sp_counted_base::release(pi);
  if ( *(_BYTE *)((p_function >> 3) + 0x7FFF8000) )
    goto LABEL_34;
  p->function_.handler_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::async_base<boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::asio::executor,std::allocator<void>>
                                                         + 2);
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard(&p->function_.handler_.wg1_);
  boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op(&p->function_.handler_.h_.handler_);
  p_v = (__int64)&this->p;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
  {
LABEL_35:
    __asan_report_store8();
    goto LABEL_36;
  }
  this->p = 0LL;
LABEL_16:
  p_v = (__int64)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_36:
    __asan_report_load8(p_v);
    goto LABEL_37;
  }
  p_function = (unsigned __int64)this->v;
  if ( !p_function )
    return;
  v10 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v10 )
  {
    p_v = v10 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v10 + 8) >> 3) + 0x7FFF8000) )
    {
      v10 = *(_QWORD *)(v10 + 8);
      goto LABEL_21;
    }
LABEL_37:
    __asan_report_load8(p_v);
LABEL_38:
    v10 = __asan_report_load8(p_v);
    goto LABEL_39;
  }
LABEL_21:
  if ( !v10 )
  {
LABEL_24:
    operator delete(this->v);
    goto LABEL_25;
  }
  p_v = v10 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v10 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_38;
  if ( *(_QWORD *)(v10 + 16) )
    goto LABEL_24;
LABEL_39:
  v12 = *(_BYTE *)(((p_function + 520) >> 3) + 0x7FFF8000);
  if ( v12 <= (char)((p_function + 8) & 7) && v12 )
  {
    __asan_report_load1(p_function + 520);
LABEL_45:
    v11 = (boost::asio::detail::executor_function_base *)p_function;
    __asan_report_store1(p_function);
    goto LABEL_46;
  }
  v13 = *(_BYTE *)((p_function >> 3) + 0x7FFF8000);
  v2 = p_function & 7;
  if ( v13 <= (char)(p_function & 7) && v13 )
    goto LABEL_45;
  *(_BYTE *)p_function = *(_BYTE *)(p_function + 520);
  *(_QWORD *)(v10 + 16) = p_function;
LABEL_25:
  v11 = (boost::asio::detail::executor_function_base *)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_46:
    __asan_report_store8();
    boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
      v11,
      v2);
    return;
  }
  this->v = 0LL;
};

// Line 61: range 0000000019CDA32A-0000000019CDACE8
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const this)
{
  boost::asio::detail::executor_function_base *v; // rbp
  char v2; // si
  unsigned __int64 p_p; // rdi
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> > *p; // rdi
  __int64 v6; // rax
  boost::asio::detail::executor_function_base *p_v; // rdi
  char v8; // dl
  char v9; // dl

  p_p = (unsigned __int64)&this->p;
  if ( *(_BYTE *)((p_p >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(p_p);
    goto LABEL_18;
  }
  p = this->p;
  if ( !p )
    goto LABEL_5;
  boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>::~transfer_op(&p->function_.handler_);
  p_p = (unsigned __int64)&this->p;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
  {
LABEL_18:
    __asan_report_store8();
    goto LABEL_19;
  }
  this->p = 0LL;
LABEL_5:
  p_p = (unsigned __int64)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_19:
    __asan_report_load8(p_p);
    goto LABEL_20;
  }
  v = (boost::asio::detail::executor_function_base *)this->v;
  if ( !v )
    return;
  v6 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                  + __readfsqword(0));
  if ( v6 )
  {
    p_p = v6 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v6 + 8) >> 3) + 0x7FFF8000) )
    {
      v6 = *(_QWORD *)(v6 + 8);
      goto LABEL_10;
    }
LABEL_20:
    __asan_report_load8(p_p);
LABEL_21:
    v6 = __asan_report_load8(p_p);
    goto LABEL_22;
  }
LABEL_10:
  if ( !v6 )
  {
LABEL_13:
    operator delete(this->v);
    goto LABEL_14;
  }
  p_p = v6 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v6 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_21;
  if ( *(_QWORD *)(v6 + 16) )
    goto LABEL_13;
LABEL_22:
  v8 = *(_BYTE *)(((unsigned __int64)&v[65] >> 3) + 0x7FFF8000);
  if ( v8 <= (((unsigned __int8)v + 8) & 7) && v8 )
  {
    __asan_report_load1(&v[65]);
LABEL_28:
    p_v = v;
    __asan_report_store1(v);
    goto LABEL_29;
  }
  v9 = *(_BYTE *)(((unsigned __int64)v >> 3) + 0x7FFF8000);
  v2 = (unsigned __int8)v & 7;
  if ( v9 <= ((unsigned __int8)v & 7) && v9 )
    goto LABEL_28;
  LOBYTE(v->func_) = v[65].func_;
  *(_QWORD *)(v6 + 16) = v;
LABEL_14:
  p_v = (boost::asio::detail::executor_function_base *)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_29:
    __asan_report_store8();
    boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
      p_v,
      v2);
    return;
  }
  this->v = 0LL;
};

// Line 61: range 0000000019CD8376-0000000019CD8D34
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> > >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const this)
{
  boost::asio::detail::executor_function_base *v; // rbp
  char v2; // si
  unsigned __int64 p_p; // rdi
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> > >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> > *p; // rdi
  __int64 v6; // rax
  boost::asio::detail::executor_function_base *p_v; // rdi
  char v8; // dl
  char v9; // dl

  p_p = (unsigned __int64)&this->p;
  if ( *(_BYTE *)((p_p >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(p_p);
    goto LABEL_18;
  }
  p = this->p;
  if ( !p )
    goto LABEL_5;
  boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>::~transfer_op(&p->function_.handler_);
  p_p = (unsigned __int64)&this->p;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
  {
LABEL_18:
    __asan_report_store8();
    goto LABEL_19;
  }
  this->p = 0LL;
LABEL_5:
  p_p = (unsigned __int64)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_19:
    __asan_report_load8(p_p);
    goto LABEL_20;
  }
  v = (boost::asio::detail::executor_function_base *)this->v;
  if ( !v )
    return;
  v6 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                  + __readfsqword(0));
  if ( v6 )
  {
    p_p = v6 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v6 + 8) >> 3) + 0x7FFF8000) )
    {
      v6 = *(_QWORD *)(v6 + 8);
      goto LABEL_10;
    }
LABEL_20:
    __asan_report_load8(p_p);
LABEL_21:
    v6 = __asan_report_load8(p_p);
    goto LABEL_22;
  }
LABEL_10:
  if ( !v6 )
  {
LABEL_13:
    operator delete(this->v);
    goto LABEL_14;
  }
  p_p = v6 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v6 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_21;
  if ( *(_QWORD *)(v6 + 16) )
    goto LABEL_13;
LABEL_22:
  v8 = *(_BYTE *)(((unsigned __int64)&v[65] >> 3) + 0x7FFF8000);
  if ( v8 <= (((unsigned __int8)v + 8) & 7) && v8 )
  {
    __asan_report_load1(&v[65]);
LABEL_28:
    p_v = v;
    __asan_report_store1(v);
    goto LABEL_29;
  }
  v9 = *(_BYTE *)(((unsigned __int64)v >> 3) + 0x7FFF8000);
  v2 = (unsigned __int8)v & 7;
  if ( v9 <= ((unsigned __int8)v & 7) && v9 )
    goto LABEL_28;
  LOBYTE(v->func_) = v[65].func_;
  *(_QWORD *)(v6 + 16) = v;
LABEL_14:
  p_v = (boost::asio::detail::executor_function_base *)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_29:
    __asan_report_store8();
    boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
      p_v,
      v2);
    return;
  }
  this->v = 0LL;
};

// Line 61: range 0000000019BE20F6-0000000019BE331F
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffer,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffer,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::basic_flat_buffer<std::allocator<char> >,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::basic_flat_buffer<std::allocator<char> >,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int> > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const this)
{
  unsigned __int64 p_function; // rbp
  char v2; // si
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffer,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::basic_flat_buffer<std::allocator<char> >,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::basic_flat_buffer<std::allocator<char> >,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int> > > >,boost::system::error_code,long unsigned int>,std::allocator<void> > **p_p; // rdi
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffer,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::basic_flat_buffer<std::allocator<char> >,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::basic_flat_buffer<std::allocator<char> >,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int> > > >,boost::system::error_code,long unsigned int>,std::allocator<void> > *p; // r12
  unsigned __int64 p_clear; // rdi
  char v7; // al
  boost::detail::sp_counted_base *pi; // rdi
  __int64 p_h; // rdi
  __int64 v10; // rax
  boost::asio::detail::executor_function_base *p_v; // rdi
  char v12; // dl
  char v13; // dl

  p_p = &this->p;
  if ( *(_BYTE *)(((unsigned __int64)p_p >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(p_p);
LABEL_31:
    p_clear = p_function;
    __asan_report_store8();
    goto LABEL_32;
  }
  p = this->p;
  if ( !p )
    goto LABEL_18;
  p_function = (unsigned __int64)&p->function_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_ >> 3) + 0x7FFF8000) )
    goto LABEL_31;
  p->function_.handler_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffer,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>
                                                         + 2);
  p_clear = (unsigned __int64)&p->function_.handler_.pg_.clear_;
  if ( *(char *)(((unsigned __int64)&p->function_.handler_.pg_.clear_ >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_32:
    __asan_report_load1(p_clear);
LABEL_33:
    __asan_report_load8(p_clear);
LABEL_34:
    __asan_report_store1(p_clear);
    goto LABEL_35;
  }
  if ( !p->function_.handler_.pg_.clear_ )
    goto LABEL_10;
  p_clear = (unsigned __int64)&p->function_.handler_.pg_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.pg_ >> 3) + 0x7FFF8000) )
    goto LABEL_33;
  p_clear = (unsigned __int64)p->function_.handler_.pg_.b_;
  v7 = *(_BYTE *)((p_clear >> 3) + 0x7FFF8000);
  if ( v7 <= ((__int64)p->function_.handler_.pg_.b_ & 7) && v7 )
    goto LABEL_34;
  *(_BYTE *)p_clear = 0;
LABEL_10:
  p_clear = (unsigned __int64)&p->function_.handler_.impl_.pn;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.impl_.pn >> 3) + 0x7FFF8000) )
  {
LABEL_35:
    __asan_report_load8(p_clear);
LABEL_36:
    p_h = p_function;
    __asan_report_store8();
    goto LABEL_37;
  }
  pi = p->function_.handler_.impl_.pn.pi_;
  if ( pi )
    boost::detail::sp_counted_base::release(pi);
  if ( *(_BYTE *)((p_function >> 3) + 0x7FFF8000) )
    goto LABEL_36;
  p->function_.handler_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::async_base<boost::beast::detail::dynamic_read_ops::read_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>,boost::asio::executor,std::allocator<void>>
                                                         + 2);
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard(&p->function_.handler_.wg1_);
  p_h = (__int64)&p->function_.handler_.h_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.h_ >> 3) + 0x7FFF8000) )
  {
LABEL_37:
    __asan_report_store8();
    goto LABEL_38;
  }
  p->function_.handler_.h_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::async_base<boost::beast::http::detail::read_msg_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>,boost::asio::executor,std::allocator<void>>
                                                            + 2);
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard(&p->function_.handler_.h_.wg1_);
  p_h = (__int64)&p->function_.handler_.h_.h_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.h_.h_ >> 3) + 0x7FFF8000) )
  {
LABEL_38:
    __asan_report_store8();
    goto LABEL_39;
  }
  p->function_.handler_.h_.h_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::http::detail::read_msg_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>
                                                               + 2);
  boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base(&p->function_.handler_.h_.h_);
  p_h = (__int64)&this->p;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
  {
LABEL_39:
    __asan_report_store8();
    goto LABEL_40;
  }
  this->p = 0LL;
LABEL_18:
  p_h = (__int64)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_40:
    __asan_report_load8(p_h);
    goto LABEL_41;
  }
  p_function = (unsigned __int64)this->v;
  if ( !p_function )
    return;
  v10 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v10 )
  {
    p_h = v10 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v10 + 8) >> 3) + 0x7FFF8000) )
    {
      v10 = *(_QWORD *)(v10 + 8);
      goto LABEL_23;
    }
LABEL_41:
    __asan_report_load8(p_h);
LABEL_42:
    v10 = __asan_report_load8(p_h);
    goto LABEL_43;
  }
LABEL_23:
  if ( !v10 )
  {
LABEL_26:
    operator delete(this->v);
    goto LABEL_27;
  }
  p_h = v10 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v10 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_42;
  if ( *(_QWORD *)(v10 + 16) )
    goto LABEL_26;
LABEL_43:
  v12 = *(_BYTE *)(((p_function + 312) >> 3) + 0x7FFF8000);
  if ( v12 <= (char)((p_function + 56) & 7) && v12 )
  {
    __asan_report_load1(p_function + 312);
LABEL_49:
    p_v = (boost::asio::detail::executor_function_base *)p_function;
    __asan_report_store1(p_function);
    goto LABEL_50;
  }
  v13 = *(_BYTE *)((p_function >> 3) + 0x7FFF8000);
  v2 = p_function & 7;
  if ( v13 <= (char)(p_function & 7) && v13 )
    goto LABEL_49;
  *(_BYTE *)p_function = *(_BYTE *)(p_function + 312);
  *(_QWORD *)(v10 + 16) = p_function;
LABEL_27:
  p_v = (boost::asio::detail::executor_function_base *)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_50:
    __asan_report_store8();
    boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffer,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
      p_v,
      v2);
    return;
  }
  this->v = 0LL;
};

// Line 61: range 0000000019C0A4C4-0000000019C0A7C4
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int> > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const this)
{
  unsigned __int64 p_function; // rbp
  std::size_t v2; // rsi
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int> > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> > **p_p; // rdi
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int> > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> > *p; // r12
  unsigned __int64 p_clear; // rdi
  char v7; // al
  boost::detail::sp_counted_base *pi; // rdi
  __int64 p_handler; // rdi
  __int64 v10; // rax
  void **p_v; // rdi
  char v12; // dl
  char v13; // dl
  boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *v14; // rdx

  p_p = &this->p;
  if ( *(_BYTE *)(((unsigned __int64)p_p >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(p_p);
LABEL_31:
    p_clear = p_function;
    __asan_report_store8();
    goto LABEL_32;
  }
  p = this->p;
  if ( !p )
    goto LABEL_18;
  p_function = (unsigned __int64)&p->function_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_ >> 3) + 0x7FFF8000) )
    goto LABEL_31;
  p->function_.handler_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>>
                                                         + 2);
  p_clear = (unsigned __int64)&p->function_.handler_.pg_.clear_;
  if ( *(char *)(((unsigned __int64)&p->function_.handler_.pg_.clear_ >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_32:
    __asan_report_load1(p_clear);
LABEL_33:
    __asan_report_load8(p_clear);
LABEL_34:
    __asan_report_store1(p_clear);
    goto LABEL_35;
  }
  if ( !p->function_.handler_.pg_.clear_ )
    goto LABEL_10;
  p_clear = (unsigned __int64)&p->function_.handler_.pg_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.pg_ >> 3) + 0x7FFF8000) )
    goto LABEL_33;
  p_clear = (unsigned __int64)p->function_.handler_.pg_.b_;
  v7 = *(_BYTE *)((p_clear >> 3) + 0x7FFF8000);
  if ( v7 <= ((__int64)p->function_.handler_.pg_.b_ & 7) && v7 )
    goto LABEL_34;
  *(_BYTE *)p_clear = 0;
LABEL_10:
  p_clear = (unsigned __int64)&p->function_.handler_.impl_.pn;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.impl_.pn >> 3) + 0x7FFF8000) )
  {
LABEL_35:
    __asan_report_load8(p_clear);
LABEL_36:
    p_handler = p_function;
    __asan_report_store8();
    goto LABEL_37;
  }
  pi = p->function_.handler_.impl_.pn.pi_;
  if ( pi )
    boost::detail::sp_counted_base::release(pi);
  if ( *(_BYTE *)((p_function >> 3) + 0x7FFF8000) )
    goto LABEL_36;
  p->function_.handler_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::async_base<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>,boost::asio::executor,std::allocator<void>>
                                                         + 2);
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard(&p->function_.handler_.wg1_);
  p_handler = (__int64)&p->function_.handler_.h_.handler_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.h_.handler_ >> 3) + 0x7FFF8000) )
  {
LABEL_37:
    __asan_report_store8();
    goto LABEL_38;
  }
  p->function_.handler_.h_.handler_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::async_base<boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>,boost::asio::executor,std::allocator<void>>
                                                                     + 2);
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard(&p->function_.handler_.h_.handler_.wg1_);
  p_handler = (__int64)&p->function_.handler_.h_.handler_.h_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.h_.handler_.h_ >> 3) + 0x7FFF8000) )
  {
LABEL_38:
    __asan_report_store8();
    goto LABEL_39;
  }
  p->function_.handler_.h_.handler_.h_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>
                                                                        + 2);
  boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base(&p->function_.handler_.h_.handler_.h_);
  p_handler = (__int64)&this->p;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
  {
LABEL_39:
    __asan_report_store8();
    goto LABEL_40;
  }
  this->p = 0LL;
LABEL_18:
  p_handler = (__int64)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_40:
    __asan_report_load8(p_handler);
    goto LABEL_41;
  }
  p_function = (unsigned __int64)this->v;
  if ( !p_function )
    return;
  v10 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v10 )
  {
    p_handler = v10 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v10 + 8) >> 3) + 0x7FFF8000) )
    {
      v10 = *(_QWORD *)(v10 + 8);
      goto LABEL_23;
    }
LABEL_41:
    __asan_report_load8(p_handler);
LABEL_42:
    v10 = __asan_report_load8(p_handler);
    goto LABEL_43;
  }
LABEL_23:
  if ( !v10 )
  {
LABEL_26:
    operator delete(this->v);
    goto LABEL_27;
  }
  p_handler = v10 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v10 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_42;
  if ( *(_QWORD *)(v10 + 16) )
    goto LABEL_26;
LABEL_43:
  v12 = *(_BYTE *)(((p_function + 376) >> 3) + 0x7FFF8000);
  if ( v12 <= (char)((p_function + 120) & 7) && v12 )
  {
    __asan_report_load1(p_function + 376);
LABEL_49:
    p_v = (void **)p_function;
    __asan_report_store1(p_function);
    goto LABEL_50;
  }
  v13 = *(_BYTE *)((p_function >> 3) + 0x7FFF8000);
  v2 = p_function & 7;
  if ( v13 <= (char)v2 && v13 )
    goto LABEL_49;
  *(_BYTE *)p_function = *(_BYTE *)(p_function + 376);
  *(_QWORD *)(v10 + 16) = p_function;
LABEL_27:
  p_v = &this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_50:
    __asan_report_store8();
    boost::beast::asio_handler_deallocate<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>(
      p_v,
      v2,
      v14);
    return;
  }
  this->v = 0LL;
};

// Line 61: range 0000000019BB79EE-0000000019BB82EF
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::shutdown_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::shutdown_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const this)
{
  unsigned __int64 p_function; // rbp
  boost::beast::async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp> >,boost::asio::executor,std::allocator<void> > *v2; // rsi
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::shutdown_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> > >,boost::system::error_code,long unsigned int>,std::allocator<void> > **p_p; // rdi
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::shutdown_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> > >,boost::system::error_code,long unsigned int>,std::allocator<void> > *p; // r12
  unsigned __int64 p_clear; // rdi
  char v7; // al
  boost::detail::sp_counted_base *pi; // rdi
  __int64 p_v; // rdi
  __int64 v10; // rax
  void **v11; // rdi
  char v12; // dl
  char v13; // dl

  p_p = &this->p;
  if ( *(_BYTE *)(((unsigned __int64)p_p >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(p_p);
LABEL_29:
    p_clear = p_function;
    __asan_report_store8();
    goto LABEL_30;
  }
  p = this->p;
  if ( !p )
    goto LABEL_16;
  p_function = (unsigned __int64)&p->function_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_ >> 3) + 0x7FFF8000) )
    goto LABEL_29;
  p->function_.handler_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::shutdown_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>>>
                                                         + 2);
  p_clear = (unsigned __int64)&p->function_.handler_.pg_.clear_;
  if ( *(char *)(((unsigned __int64)&p->function_.handler_.pg_.clear_ >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_30:
    __asan_report_load1(p_clear);
LABEL_31:
    __asan_report_load8(p_clear);
LABEL_32:
    __asan_report_store1(p_clear);
    goto LABEL_33;
  }
  if ( !p->function_.handler_.pg_.clear_ )
    goto LABEL_10;
  p_clear = (unsigned __int64)&p->function_.handler_.pg_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.pg_ >> 3) + 0x7FFF8000) )
    goto LABEL_31;
  p_clear = (unsigned __int64)p->function_.handler_.pg_.b_;
  v7 = *(_BYTE *)((p_clear >> 3) + 0x7FFF8000);
  if ( v7 <= ((__int64)p->function_.handler_.pg_.b_ & 7) && v7 )
    goto LABEL_32;
  *(_BYTE *)p_clear = 0;
LABEL_10:
  p_clear = (unsigned __int64)&p->function_.handler_.impl_.pn;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.impl_.pn >> 3) + 0x7FFF8000) )
  {
LABEL_33:
    __asan_report_load8(p_clear);
LABEL_34:
    p_v = p_function;
    __asan_report_store8();
    goto LABEL_35;
  }
  pi = p->function_.handler_.impl_.pn.pi_;
  if ( pi )
    boost::detail::sp_counted_base::release(pi);
  if ( *(_BYTE *)((p_function >> 3) + 0x7FFF8000) )
    goto LABEL_34;
  p->function_.handler_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::async_base<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::shutdown_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>>,boost::asio::executor,std::allocator<void>>
                                                         + 2);
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard(&p->function_.handler_.wg1_);
  boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>::~coro_handler(&p->function_.handler_.h_.handler_);
  p_v = (__int64)&this->p;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
  {
LABEL_35:
    __asan_report_store8();
    goto LABEL_36;
  }
  this->p = 0LL;
LABEL_16:
  p_v = (__int64)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_36:
    __asan_report_load8(p_v);
    goto LABEL_37;
  }
  p_function = (unsigned __int64)this->v;
  if ( !p_function )
    return;
  v10 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v10 )
  {
    p_v = v10 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v10 + 8) >> 3) + 0x7FFF8000) )
    {
      v10 = *(_QWORD *)(v10 + 8);
      goto LABEL_21;
    }
LABEL_37:
    __asan_report_load8(p_v);
LABEL_38:
    v10 = __asan_report_load8(p_v);
    goto LABEL_39;
  }
LABEL_21:
  if ( !v10 )
  {
LABEL_24:
    operator delete(this->v);
    goto LABEL_25;
  }
  p_v = v10 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v10 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_38;
  if ( *(_QWORD *)(v10 + 16) )
    goto LABEL_24;
LABEL_39:
  v12 = *(_BYTE *)(((p_function + 232) >> 3) + 0x7FFF8000);
  if ( v12 <= (char)((p_function - 24) & 7) && v12 )
  {
    __asan_report_load1(p_function + 232);
LABEL_45:
    v11 = (void **)p_function;
    __asan_report_store1(p_function);
    goto LABEL_46;
  }
  v13 = *(_BYTE *)((p_function >> 3) + 0x7FFF8000);
  v2 = (boost::beast::async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp> >,boost::asio::executor,std::allocator<void> > *)(p_function & 7);
  if ( v13 <= (char)v2 && v13 )
    goto LABEL_45;
  *(_BYTE *)p_function = *(_BYTE *)(p_function + 232);
  *(_QWORD *)(v10 + 16) = p_function;
LABEL_25:
  v11 = &this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_46:
    __asan_report_store8();
    boost::beast::asio_handler_invoke<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp>>,boost::asio::executor,std::allocator<void>,boost::asio::detail::binder1<boost::asio::detail::range_connect_op<boost::asio::ip::tcp,boost::asio::executor,boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>,boost::beast::detail::any_endpoint,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::connect_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp>>>>,boost::system::error_code> &>(
      (boost::asio::detail::binder1<boost::asio::detail::range_connect_op<boost::asio::ip::tcp,boost::asio::executor,boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>,boost::beast::detail::any_endpoint,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::connect_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp> > > >,boost::system::error_code> *)v11,
      v2);
    return;
  }
  this->v = 0LL;
};

// Line 61: range 0000000019C70276-0000000019C713FD
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const this)
{
  unsigned __int64 p_function; // rbp
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> > **p_p; // rdi
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> > *p; // r12
  unsigned __int64 p_clear; // rdi
  char v6; // al
  boost::detail::sp_counted_base *pi; // rdi
  __int64 p_handler; // rdi
  __int64 v9; // rax
  char v10; // dl
  char v11; // dl

  p_p = &this->p;
  if ( *(_BYTE *)(((unsigned __int64)p_p >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(p_p);
LABEL_31:
    p_clear = p_function;
    __asan_report_store8();
    goto LABEL_32;
  }
  p = this->p;
  if ( !p )
    goto LABEL_18;
  p_function = (unsigned __int64)&p->function_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_ >> 3) + 0x7FFF8000) )
    goto LABEL_31;
  p->function_.handler_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>
                                                         + 2);
  p_clear = (unsigned __int64)&p->function_.handler_.pg_.clear_;
  if ( *(char *)(((unsigned __int64)&p->function_.handler_.pg_.clear_ >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_32:
    __asan_report_load1(p_clear);
LABEL_33:
    __asan_report_load8(p_clear);
LABEL_34:
    __asan_report_store1(p_clear);
    goto LABEL_35;
  }
  if ( !p->function_.handler_.pg_.clear_ )
    goto LABEL_10;
  p_clear = (unsigned __int64)&p->function_.handler_.pg_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.pg_ >> 3) + 0x7FFF8000) )
    goto LABEL_33;
  p_clear = (unsigned __int64)p->function_.handler_.pg_.b_;
  v6 = *(_BYTE *)((p_clear >> 3) + 0x7FFF8000);
  if ( v6 <= ((__int64)p->function_.handler_.pg_.b_ & 7) && v6 )
    goto LABEL_34;
  *(_BYTE *)p_clear = 0;
LABEL_10:
  p_clear = (unsigned __int64)&p->function_.handler_.impl_.pn;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.impl_.pn >> 3) + 0x7FFF8000) )
  {
LABEL_35:
    __asan_report_load8(p_clear);
LABEL_36:
    p_handler = p_function;
    __asan_report_store8();
    goto LABEL_37;
  }
  pi = p->function_.handler_.impl_.pn.pi_;
  if ( pi )
    boost::detail::sp_counted_base::release(pi);
  if ( *(_BYTE *)((p_function >> 3) + 0x7FFF8000) )
    goto LABEL_36;
  p->function_.handler_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::async_base<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::asio::executor,std::allocator<void>>
                                                         + 2);
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard(&p->function_.handler_.wg1_);
  p_handler = (__int64)&p->function_.handler_.h_.handler_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.h_.handler_ >> 3) + 0x7FFF8000) )
  {
LABEL_37:
    __asan_report_store8();
    goto LABEL_38;
  }
  p->function_.handler_.h_.handler_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                                                                     + 2);
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard(&p->function_.handler_.h_.handler_.wg1_);
  p_handler = (__int64)&p->function_.handler_.h_.handler_.h_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_.handler_.h_.handler_.h_ >> 3) + 0x7FFF8000) )
  {
LABEL_38:
    __asan_report_store8();
    goto LABEL_39;
  }
  p->function_.handler_.h_.handler_.h_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                                                                        + 2);
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base(&p->function_.handler_.h_.handler_.h_);
  p_handler = (__int64)&this->p;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
  {
LABEL_39:
    __asan_report_store8();
    goto LABEL_40;
  }
  this->p = 0LL;
LABEL_18:
  p_handler = (__int64)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_40:
    __asan_report_load8(p_handler);
    goto LABEL_41;
  }
  p_function = (unsigned __int64)this->v;
  if ( !p_function )
    return;
  v9 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                  + __readfsqword(0));
  if ( v9 )
  {
    p_handler = v9 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v9 + 8) >> 3) + 0x7FFF8000) )
    {
      v9 = *(_QWORD *)(v9 + 8);
      goto LABEL_23;
    }
LABEL_41:
    __asan_report_load8(p_handler);
LABEL_42:
    v9 = __asan_report_load8(p_handler);
    goto LABEL_43;
  }
LABEL_23:
  if ( !v9 )
  {
LABEL_26:
    operator delete(this->v);
    goto LABEL_27;
  }
  p_handler = v9 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v9 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_42;
  if ( *(_QWORD *)(v9 + 16) )
    goto LABEL_26;
LABEL_43:
  v10 = *(_BYTE *)(((p_function + 424) >> 3) + 0x7FFF8000);
  if ( v10 <= (char)((p_function - 88) & 7) && v10 )
  {
    __asan_report_load1(p_function + 424);
LABEL_49:
    __asan_report_store1(p_function);
    goto LABEL_50;
  }
  v11 = *(_BYTE *)((p_function >> 3) + 0x7FFF8000);
  if ( v11 <= (char)(p_function & 7) && v11 )
    goto LABEL_49;
  *(_BYTE *)p_function = *(_BYTE *)(p_function + 424);
  *(_QWORD *)(v9 + 16) = p_function;
LABEL_27:
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_50:
    __asan_report_store8();
    JUMPOUT(0x19C70565LL);
  }
  this->v = 0LL;
};

// Line 61: range 0000000019BBC406-0000000019BBC5B1
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::system::error_code,int>>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::system::error_code,int> >,std::allocator<void> >::ptr *const this)
{
  unsigned __int64 p; // rbp
  unsigned __int64 p_p; // rdi
  __int64 v4; // rax
  boost::beast::async_base<boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::handshake_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> > >,boost::asio::executor,std::allocator<void> > *p_v; // rdi
  char v6; // dl
  char v7; // dl

  p_p = (unsigned __int64)&this->p;
  if ( *(_BYTE *)((p_p >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(p_p);
LABEL_19:
    __asan_report_store8();
    goto LABEL_20;
  }
  p = (unsigned __int64)this->p;
  if ( !p )
    goto LABEL_6;
  p_p = p + 24;
  if ( *(_BYTE *)(((p + 24) >> 3) + 0x7FFF8000) )
    goto LABEL_19;
  *(_QWORD *)(p + 24) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                      + 2;
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(p + 24));
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(p + 8));
  p_p = (unsigned __int64)&this->p;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
  {
LABEL_20:
    __asan_report_store8();
    goto LABEL_21;
  }
  this->p = 0LL;
LABEL_6:
  p_p = (unsigned __int64)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_21:
    __asan_report_load8(p_p);
    goto LABEL_22;
  }
  p = (unsigned __int64)this->v;
  if ( !p )
    return;
  v4 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                  + __readfsqword(0));
  if ( v4 )
  {
    p_p = v4 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v4 + 8) >> 3) + 0x7FFF8000) )
    {
      v4 = *(_QWORD *)(v4 + 8);
      goto LABEL_11;
    }
LABEL_22:
    __asan_report_load8(p_p);
LABEL_23:
    v4 = __asan_report_load8(p_p);
    goto LABEL_24;
  }
LABEL_11:
  if ( !v4 )
  {
LABEL_14:
    operator delete(this->v);
    goto LABEL_15;
  }
  p_p = v4 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v4 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_23;
  if ( *(_QWORD *)(v4 + 16) )
    goto LABEL_14;
LABEL_24:
  v6 = *(_BYTE *)(((p + 264) >> 3) + 0x7FFF8000);
  if ( v6 <= (char)((p + 8) & 7) && v6 )
  {
    __asan_report_load1(p + 264);
LABEL_30:
    p_v = (boost::beast::async_base<boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::handshake_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> > >,boost::asio::executor,std::allocator<void> > *)p;
    __asan_report_store1(p);
    goto LABEL_31;
  }
  v7 = *(_BYTE *)((p >> 3) + 0x7FFF8000);
  if ( v7 <= (char)(p & 7) && v7 )
    goto LABEL_30;
  *(_BYTE *)p = *(_BYTE *)(p + 264);
  *(_QWORD *)(v4 + 16) = p;
LABEL_15:
  p_v = (boost::beast::async_base<boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::handshake_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> > >,boost::asio::executor,std::allocator<void> > *)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_31:
    __asan_report_store8();
    boost::beast::asio_handler_is_continuation<boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::handshake_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>>>,boost::asio::executor,std::allocator<void>>(p_v);
    return;
  }
  this->v = 0LL;
};

// Line 61: range 0000000019BA0A4C-0000000019BA2516
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > >,std::allocator<void> >::ptr *const this)
{
  unsigned __int64 p_function; // rbp
  boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > *v2; // rsi
  unsigned __int64 p_p; // rdi
  boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > >,std::allocator<void> > *p; // rdi
  __int64 v6; // rax
  boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::system::error_code,int> *p_v; // rdi
  char v8; // dl
  char v9; // dl
  boost::system::error_code *v10; // rdx
  int *v11; // rcx
  boost::system::error_code *v12; // r8
  int *v13; // r9

  p_p = (unsigned __int64)&this->p;
  if ( *(_BYTE *)((p_p >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(p_p);
LABEL_20:
    __asan_report_store8();
    goto LABEL_21;
  }
  p = this->p;
  if ( !p )
    goto LABEL_7;
  p_function = (unsigned __int64)&p->function_;
  p_p = (unsigned __int64)&p->function_.handler_;
  if ( *(_BYTE *)((p_p >> 3) + 0x7FFF8000) )
    goto LABEL_20;
  *(_QWORD *)(p_function + 16) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                               + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(p_function + 136));
  p_p = p_function + 24;
  if ( *(_BYTE *)(((p_function + 24) >> 3) + 0x7FFF8000) )
  {
LABEL_21:
    __asan_report_store8();
    goto LABEL_22;
  }
  *(_QWORD *)(p_function + 24) = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                               + 2;
  boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(p_function + 24));
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)p_function);
  p_p = (unsigned __int64)&this->p;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
  {
LABEL_22:
    __asan_report_store8();
    goto LABEL_23;
  }
  this->p = 0LL;
LABEL_7:
  p_p = (unsigned __int64)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_23:
    __asan_report_load8(p_p);
    goto LABEL_24;
  }
  p_function = (unsigned __int64)this->v;
  if ( !p_function )
    return;
  v6 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                  + __readfsqword(0));
  if ( v6 )
  {
    p_p = v6 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v6 + 8) >> 3) + 0x7FFF8000) )
    {
      v6 = *(_QWORD *)(v6 + 8);
      goto LABEL_12;
    }
LABEL_24:
    __asan_report_load8(p_p);
LABEL_25:
    v6 = __asan_report_load8(p_p);
    goto LABEL_26;
  }
LABEL_12:
  if ( !v6 )
  {
LABEL_15:
    operator delete(this->v);
    goto LABEL_16;
  }
  p_p = v6 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v6 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_25;
  if ( *(_QWORD *)(v6 + 16) )
    goto LABEL_15;
LABEL_26:
  v8 = *(_BYTE *)(((p_function + 200) >> 3) + 0x7FFF8000);
  if ( v8 <= (char)((p_function - 56) & 7) && v8 )
  {
    __asan_report_load1(p_function + 200);
LABEL_32:
    p_v = (boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::system::error_code,int> *)p_function;
    __asan_report_store1(p_function);
    goto LABEL_33;
  }
  v9 = *(_BYTE *)((p_function >> 3) + 0x7FFF8000);
  v2 = (boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > *)(p_function & 7);
  if ( v9 <= (char)v2 && v9 )
    goto LABEL_32;
  *(_BYTE *)p_function = *(_BYTE *)(p_function + 200);
  *(_QWORD *)(v6 + 16) = p_function;
LABEL_16:
  p_v = (boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::system::error_code,int> *)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_33:
    __asan_report_store8();
    boost::beast::bind_front_handler<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::system::error_code &,int>(
      p_v,
      v2,
      v10,
      v11,
      v12,
      v13);
    return;
  }
  this->v = 0LL;
};

// Line 61: range 0000000019BE9A20-0000000019BEA69E
void __fastcall boost::asio::detail::executor_function<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::system::error_code,int>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::system::error_code,int>,std::allocator<void> >::ptr *const this)
{
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::handshake_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *v; // rbp
  boost::asio::detail::executor_function<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::system::error_code,int>,std::allocator<void> > **p_p; // rdi
  boost::asio::detail::executor_function<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::system::error_code,int>,std::allocator<void> > *p; // rdi
  __int64 p_function; // rax
  __int64 p_v; // rdi
  __int64 v7; // rax
  boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::handshake_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *v8; // rdi
  char v9; // dl
  char v10; // dl

  p_p = &this->p;
  if ( *(_BYTE *)(((unsigned __int64)p_p >> 3) + 0x7FFF8000) )
  {
    p_function = __asan_report_load8(p_p);
LABEL_19:
    p_v = p_function;
    __asan_report_store8();
    goto LABEL_20;
  }
  p = this->p;
  if ( !p )
    goto LABEL_6;
  p_function = (__int64)&p->function_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_ >> 3) + 0x7FFF8000) )
    goto LABEL_19;
  p->function_.h_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                                                   + 2);
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base(&p->function_.h_);
  p_v = (__int64)&this->p;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
  {
LABEL_20:
    __asan_report_store8();
    goto LABEL_21;
  }
  this->p = 0LL;
LABEL_6:
  p_v = (__int64)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_21:
    __asan_report_load8(p_v);
    goto LABEL_22;
  }
  v = (boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::handshake_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *)this->v;
  if ( !v )
    return;
  v7 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                  + __readfsqword(0));
  if ( v7 )
  {
    p_v = v7 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v7 + 8) >> 3) + 0x7FFF8000) )
    {
      v7 = *(_QWORD *)(v7 + 8);
      goto LABEL_11;
    }
LABEL_22:
    __asan_report_load8(p_v);
LABEL_23:
    v7 = __asan_report_load8(p_v);
    goto LABEL_24;
  }
LABEL_11:
  if ( !v7 )
  {
LABEL_14:
    operator delete(this->v);
    goto LABEL_15;
  }
  p_v = v7 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v7 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_23;
  if ( *(_QWORD *)(v7 + 16) )
    goto LABEL_14;
LABEL_24:
  v9 = *(_BYTE *)(((unsigned __int64)&v[10].v >> 3) + 0x7FFF8000);
  if ( v9 <= (((unsigned __int8)v - 8) & 7) && v9 )
  {
    __asan_report_load1(&v[10].v);
LABEL_30:
    v8 = v;
    __asan_report_store1(v);
    goto LABEL_31;
  }
  v10 = *(_BYTE *)(((unsigned __int64)v >> 3) + 0x7FFF8000);
  if ( v10 <= ((unsigned __int8)v & 7) && v10 )
    goto LABEL_30;
  LOBYTE(v->a) = v[10].v;
  *(_QWORD *)(v7 + 16) = v;
LABEL_15:
  v8 = (boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,const boost::asio::mutable_buffer*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::handshake_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_31:
    __asan_report_store8();
    boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::asio::const_buffers_1,boost::asio::detail::write_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::mutable_buffer,boost::asio::mutable_buffer const*,boost::asio::detail::transfer_all_t,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::handshake_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset(v8);
    return;
  }
  this->v = 0LL;
};

// Line 61: range 0000000019BEA6A4-0000000019BEA855
void __fastcall boost::asio::detail::executor_function<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::system::error_code,int>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::system::error_code,int>,std::allocator<void> >::ptr *const this)
{
  unsigned __int64 v; // rbp
  std::size_t v2; // rsi
  boost::asio::detail::executor_function<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::system::error_code,int>,std::allocator<void> > **p_p; // rdi
  boost::asio::detail::executor_function<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::system::error_code,int>,std::allocator<void> > *p; // rdi
  __int64 p_function; // rax
  __int64 p_v; // rdi
  __int64 v8; // rax
  void **v9; // rdi
  char v10; // dl
  char v11; // dl
  boost::beast::async_base<boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int> >,boost::asio::executor,std::allocator<void> > *v12; // rdx

  p_p = &this->p;
  if ( *(_BYTE *)(((unsigned __int64)p_p >> 3) + 0x7FFF8000) )
  {
    p_function = __asan_report_load8(p_p);
LABEL_19:
    p_v = p_function;
    __asan_report_store8();
    goto LABEL_20;
  }
  p = this->p;
  if ( !p )
    goto LABEL_6;
  p_function = (__int64)&p->function_;
  if ( *(_BYTE *)(((unsigned __int64)&p->function_ >> 3) + 0x7FFF8000) )
    goto LABEL_19;
  p->function_.h_._vptr_async_base = (int (**)(...))(&`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                                                   + 2);
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base(&p->function_.h_);
  p_v = (__int64)&this->p;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
  {
LABEL_20:
    __asan_report_store8();
    goto LABEL_21;
  }
  this->p = 0LL;
LABEL_6:
  p_v = (__int64)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_21:
    __asan_report_load8(p_v);
    goto LABEL_22;
  }
  v = (unsigned __int64)this->v;
  if ( !v )
    return;
  v8 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                  + __readfsqword(0));
  if ( v8 )
  {
    p_v = v8 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v8 + 8) >> 3) + 0x7FFF8000) )
    {
      v8 = *(_QWORD *)(v8 + 8);
      goto LABEL_11;
    }
LABEL_22:
    __asan_report_load8(p_v);
LABEL_23:
    v8 = __asan_report_load8(p_v);
    goto LABEL_24;
  }
LABEL_11:
  if ( !v8 )
  {
LABEL_14:
    operator delete(this->v);
    goto LABEL_15;
  }
  p_v = v8 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v8 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_23;
  if ( *(_QWORD *)(v8 + 16) )
    goto LABEL_14;
LABEL_24:
  v10 = *(_BYTE *)(((v + 248) >> 3) + 0x7FFF8000);
  if ( v10 <= (char)((v - 8) & 7) && v10 )
  {
    __asan_report_load1(v + 248);
LABEL_30:
    v9 = (void **)v;
    __asan_report_store1(v);
    goto LABEL_31;
  }
  v11 = *(_BYTE *)((v >> 3) + 0x7FFF8000);
  v2 = v & 7;
  if ( v11 <= (char)v2 && v11 )
    goto LABEL_30;
  *(_BYTE *)v = *(_BYTE *)(v + 248);
  *(_QWORD *)(v8 + 16) = v;
LABEL_15:
  v9 = &this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_31:
    __asan_report_store8();
    boost::beast::asio_handler_deallocate<boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>,boost::asio::executor,std::allocator<void>>(
      v9,
      v2,
      v12);
    return;
  }
  this->v = 0LL;
};

// Line 65: range 000000000C6FEB76-000000000C6FEBB9
void __cdecl boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>>(
        boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> > *const this,
        boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code> *f,
        const std::allocator<void> *allocator)
{
  boost::asio::detail::executor_function_base::executor_function_base(
    this,
    (boost::asio::detail::executor_function_base::func_type)boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::do_complete);
  boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>::binder1(
    &this->function_,
    f);
};

// Line 65: range 000000000C6FF74E-000000000C6FF791
void __cdecl boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>>(
        boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> > *const this,
        boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code> *f,
        const std::allocator<void> *allocator)
{
  boost::asio::detail::executor_function_base::executor_function_base(
    this,
    (boost::asio::detail::executor_function_base::func_type)boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::do_complete);
  boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>::binder1(
    &this->function_,
    f);
};

// Line 65: range 000000000C6F3D84-000000000C6F3DC7
void __cdecl boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void>>::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>>(
        boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void> > *const this,
        boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void>,boost::system::error_code> *f,
        const std::allocator<void> *allocator)
{
  boost::asio::detail::executor_function_base::executor_function_base(
    this,
    (boost::asio::detail::executor_function_base::func_type)boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void>>::do_complete);
  boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>::binder1(
    &this->function_,
    f);
};

// Line 72: range 000000000C700899-000000000C700A63
void __cdecl boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // rbx
  char v5[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 48 11 function:85";
  *(_QWORD *)(v2 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::do_complete;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61953;
  v4[536862722] = -218959360;
  v4[536862723] = 62194;
  v4[536862725] = -202116109;
  *(_QWORD *)(v2 + 48) = std::addressof<std::allocator<void>>((std::allocator<void> *)(v2 + 32));
  *(_QWORD *)(v2 + 56) = base;
  *(_QWORD *)(v2 + 64) = base;
  boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>::binder1(
    (boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code> *const)(v2 + 112),
    (boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code> *)&base[1]);
  boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> >::ptr *const)(v2 + 48));
  if ( call )
    boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>::operator()((boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code> *const)(v2 + 112));
  boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::ptr::~ptr((boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<GateserverSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<GateserverSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> >::ptr *const)(v2 + 48));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 72: range 000000000C700FFF-000000000C7011C9
void __cdecl boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // rbx
  char v5[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 48 11 function:85";
  *(_QWORD *)(v2 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::do_complete;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61953;
  v4[536862722] = -218959360;
  v4[536862723] = 62194;
  v4[536862725] = -202116109;
  *(_QWORD *)(v2 + 48) = std::addressof<std::allocator<void>>((std::allocator<void> *)(v2 + 32));
  *(_QWORD *)(v2 + 56) = base;
  *(_QWORD *)(v2 + 64) = base;
  boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>::binder1(
    (boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code> *const)(v2 + 112),
    (boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code> *)&base[1]);
  boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> >::ptr *const)(v2 + 48));
  if ( call )
    boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>::operator()((boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code> *const)(v2 + 112));
  boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,boost::system::error_code const&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(void),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor> *>>>,boost::system::error_code>,std::allocator<void>>::ptr::~ptr((boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerMgr<HttpSession>,const boost::system::error_code&,boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*>,boost::_bi::list3<boost::_bi::value<common::minet::AServerMgr<HttpSession>*>,boost::arg<1> (*)(),boost::_bi::value<boost::asio::basic_deadline_timer<boost::posix_time::ptime,boost::asio::time_traits<boost::posix_time::ptime>,boost::asio::executor>*> > >,boost::system::error_code>,std::allocator<void> >::ptr *const)(v2 + 48));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 72: range 000000000C6F946D-000000000C6F966F
void __cdecl boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // rbx
  char v5[256]; // [rsp+20h] [rbp-100h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 72 11 function:85";
  *(_QWORD *)(v2 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void>>::do_complete;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61953;
  v4[536862722] = -218959360;
  v4[536862723] = 62194;
  v4[536862725] = -218103808;
  v4[536862726] = -202116109;
  *(_QWORD *)(v2 + 48) = std::addressof<std::allocator<void>>((std::allocator<void> *)(v2 + 32));
  *(_QWORD *)(v2 + 56) = base;
  *(_QWORD *)(v2 + 64) = base;
  boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>::binder1(
    (boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void>,boost::system::error_code> *const)(v2 + 112),
    (boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void>,boost::system::error_code> *)&base[1]);
  boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void> >::ptr *const)(v2 + 48));
  if ( call )
    boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>::operator()((boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void>,boost::system::error_code> *const)(v2 + 112));
  boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>::~binder1((boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void>,boost::system::error_code> *const)(v2 + 112));
  boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void>>::ptr::~ptr((boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void>,boost::system::error_code>,std::allocator<void> >::ptr *const)(v2 + 48));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8014) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
};

// Line 72: range 0000000014EECD1F-0000000014EED399
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerSession,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>,boost::system::error_code const&>,boost::_bi::list3<boost::_bi::value<std::shared_ptr<common::minet::AServerSession>>,boost::_bi::value<boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>>,boost::arg<1> (*)(void)>>,boost::system::error_code>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v2; // rbp
  unsigned __int64 v4; // r13
  unsigned __int64 v5; // rbx
  _DWORD *v6; // r14
  unsigned __int64 v7; // rdi
  boost::asio::detail::executor_function_base::func_type func; // rax
  __int64 (**v9)(void); // rax
  boost::asio::detail::executor_function_base *v10; // rdi
  __int64 v11; // rbp
  __int64 v12; // r12
  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *v13; // rdi
  __int64 v14; // rax
  __int64 v15; // rdi
  unsigned __int64 v16; // rax
  void (__fastcall *v17)(unsigned __int64, boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > *, unsigned __int64); // r12
  unsigned __int64 v18; // rdi
  __int64 v19; // rax
  char v20; // dl
  char v21; // dl
  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *v22; // rdi
  __int64 v23; // rbp
  __int64 v24; // r12
  unsigned __int64 v25; // rbp
  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *v26; // rdi
  __int64 v27; // rax
  __int64 v28; // rdi
  char v29; // dl
  char v30; // dl
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v31; // [rsp+10h] [rbp-198h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v32; // [rsp+40h] [rbp-168h] BYREF
  char v33[312]; // [rsp+70h] [rbp-138h] BYREF

  v4 = (unsigned __int64)v33;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v19 = __asan_stack_malloc_2(256LL);
    if ( v19 )
      v4 = v19;
  }
  v5 = v4 + 256;
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 1 12 allocator:76 64 24 4 p:77 128 96 11 function:85";
  *(_QWORD *)(v4 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::_bi::bind_t<void,boost::_mfi::mf2<void,common::minet::AServerSession,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>,boost::system::error_code const&>,boost::_bi::list3<boost::_bi::value<std::shared_ptr<common::minet::AServerSession>>,boost::_bi::value<boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>>,boost::arg<1> (*)(void)>>,boost::system::error_code>,std::allocator<void>>::do_complete;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -234881024;
  v6[536862723] = -218959118;
  v6[536862727] = -202116109;
  *(_QWORD *)(v4 + 64) = v4 + 48;
  *(_QWORD *)(v4 + 72) = base;
  *(_QWORD *)(v4 + 80) = base;
  if ( *(_WORD *)(((unsigned __int64)&base[1] >> 3) + 0x7FFF8000) )
  {
    __asan_report_load16(&base[1]);
    goto LABEL_39;
  }
  *(__m128i *)(v4 + 128) = _mm_loadu_si128((const __m128i *)&base[1]);
  v2 = (unsigned __int64)&base[3];
  if ( *(_BYTE *)(((unsigned __int64)&base[3] >> 3) + 0x7FFF8000) )
  {
LABEL_39:
    v7 = v2;
    __asan_report_load8(v2);
    goto LABEL_40;
  }
  *(boost::asio::detail::executor_function_base *)(v4 + 144) = base[3];
  *(_QWORD *)(v4 + 152) = 0LL;
  v7 = (unsigned __int64)&base[4];
  if ( *(_BYTE *)(((unsigned __int64)&base[4] >> 3) + 0x7FFF8000) )
  {
LABEL_40:
    __asan_report_load8(v7);
    goto LABEL_41;
  }
  func = base[4].func_;
  base[4].func_ = 0LL;
  *(_QWORD *)(v4 + 152) = func;
  base[3].func_ = 0LL;
  v7 = (unsigned __int64)&base[5];
  if ( *(_BYTE *)(((unsigned __int64)&base[5] >> 3) + 0x7FFF8000) )
  {
LABEL_41:
    __asan_report_load8(v7);
    goto LABEL_42;
  }
  *(boost::asio::detail::executor_function_base *)(v4 + 160) = base[5];
  v7 = (unsigned __int64)&base[6];
  if ( *(_BYTE *)(((unsigned __int64)&base[6] >> 3) + 0x7FFF8000) )
  {
LABEL_42:
    __asan_report_load8(v7);
    goto LABEL_43;
  }
  *(boost::asio::detail::executor_function_base *)(v4 + 168) = base[6];
  base[6].func_ = 0LL;
  base[5].func_ = 0LL;
  v7 = (unsigned __int64)&base[7];
  if ( *(_BYTE *)(((unsigned __int64)&base[7] >> 3) + 0x7FFF8000) )
  {
LABEL_43:
    __asan_report_load8(v7);
    goto LABEL_44;
  }
  *(boost::asio::detail::executor_function_base *)(v4 + 176) = base[7];
  v7 = (unsigned __int64)&base[8];
  if ( *(_BYTE *)(((unsigned __int64)&base[8] >> 3) + 0x7FFF8000) )
  {
LABEL_44:
    __asan_report_load8(v7);
LABEL_45:
    v9 = (__int64 (**)(void))__asan_report_load8(v7);
    goto LABEL_46;
  }
  v7 = (unsigned __int64)base[8].func_;
  if ( !v7 )
    goto LABEL_13;
  if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
    goto LABEL_45;
  v9 = *(__int64 (***)(void))v7;
  if ( *(_BYTE *)((*(_QWORD *)v7 >> 3) + 0x7FFF8000LL) )
  {
LABEL_46:
    v10 = (boost::asio::detail::executor_function_base *)v9;
    __asan_report_load8(v9);
    goto LABEL_47;
  }
  v7 = (*v9)();
LABEL_13:
  *(_QWORD *)(v4 + 184) = v7;
  v10 = base + 9;
  if ( *(_BYTE *)(((unsigned __int64)&base[9] >> 3) + 0x7FFF8000) )
  {
LABEL_47:
    __asan_report_load8(v10);
    goto LABEL_48;
  }
  *(boost::asio::detail::executor_function_base *)(v4 + 192) = base[9];
  v10 = base + 10;
  if ( *(_BYTE *)(((unsigned __int64)&base[10] >> 3) + 0x7FFF8000) )
  {
LABEL_48:
    __asan_report_load8(v10);
    goto LABEL_49;
  }
  *(boost::asio::detail::executor_function_base *)(v4 + 200) = base[10];
  v10 = base + 11;
  if ( *(_WORD *)(((unsigned __int64)&base[11] >> 3) + 0x7FFF8000) )
  {
LABEL_49:
    __asan_report_load16(v10);
    goto LABEL_50;
  }
  *(__m128i *)(v4 + 208) = _mm_loadu_si128((const __m128i *)&base[11]);
  v11 = *(_QWORD *)(v4 + 80);
  if ( !v11 )
    goto LABEL_21;
  v12 = v11 + 24;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context((boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > *const)(v11 + 40));
  v2 = v11 + 32;
  if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
  {
LABEL_50:
    v15 = v2;
    __asan_report_load8(v2);
    goto LABEL_51;
  }
  v13 = *(std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> **)(v12 + 8);
  if ( v13 )
    std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(v13);
  *(_QWORD *)(v4 + 80) = 0LL;
LABEL_21:
  v2 = *(_QWORD *)(v4 + 72);
  if ( !v2 )
    goto LABEL_30;
  v14 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v14 )
  {
    v15 = v14 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v14 + 8) >> 3) + 0x7FFF8000) )
    {
      v14 = *(_QWORD *)(v14 + 8);
      goto LABEL_25;
    }
LABEL_51:
    __asan_report_load8(v15);
    goto LABEL_52;
  }
LABEL_25:
  if ( v14 )
  {
    v15 = v14 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v14 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v14 + 16) )
        goto LABEL_28;
LABEL_53:
      v20 = *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000);
      if ( v20 <= (char)((v2 + 112) & 7) && v20 )
      {
        __asan_report_load1(v2 + 112);
      }
      else
      {
        v21 = *(_BYTE *)((v2 >> 3) + 0x7FFF8000);
        if ( v21 > (char)(v2 & 7) || !v21 )
        {
          *(_BYTE *)v2 = *(_BYTE *)(v2 + 112);
          *(_QWORD *)(v14 + 16) = v2;
          goto LABEL_29;
        }
      }
      __asan_report_store1(v2);
LABEL_60:
      v18 = v2;
      __asan_report_load8(v2);
      goto LABEL_61;
    }
LABEL_52:
    v14 = __asan_report_load8(v15);
    goto LABEL_53;
  }
LABEL_28:
  operator delete(*(void **)(v4 + 72));
LABEL_29:
  *(_QWORD *)(v4 + 72) = 0LL;
LABEL_30:
  if ( !call )
    goto LABEL_63;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v31,
    (const boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > *)(v4 + 160));
  v16 = (unsigned __int64)boost::get_pointer<common::minet::AServerSession>((const std::shared_ptr<common::minet::AServerSession> *)(v4 + 144))
      + *(_QWORD *)(v4 + 136);
  v2 = v16;
  v17 = *(void (__fastcall **)(unsigned __int64, boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > *, unsigned __int64))(v4 + 128);
  if ( ((unsigned __int8)v17 & 1) == 0 )
    goto LABEL_35;
  if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
    goto LABEL_60;
  v18 = (unsigned __int64)v17 + *(_QWORD *)v16 - 1;
  if ( *(_BYTE *)((v18 >> 3) + 0x7FFF8000) )
  {
LABEL_61:
    __asan_report_load8(v18);
    goto LABEL_62;
  }
  v17 = *(void (__fastcall **)(unsigned __int64, boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > *, unsigned __int64))v18;
LABEL_35:
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v32,
    &v31);
  v17(v2, &v32, v4 + 208);
LABEL_62:
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v32);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v31);
LABEL_63:
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context((boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > *const)(v4 + 160));
  v22 = *(std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> **)(v4 + 152);
  if ( v22 )
    std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(v22);
  v23 = *(_QWORD *)(v4 + 80);
  if ( v23 )
  {
    v24 = v23 + 24;
    boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context((boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > *const)(v23 + 40));
    v25 = v23 + 32;
    if ( *(_BYTE *)((v25 >> 3) + 0x7FFF8000) )
    {
      v28 = v25;
      __asan_report_load8(v25);
      goto LABEL_81;
    }
    v26 = *(std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> **)(v24 + 8);
    if ( v26 )
      std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(v26);
    *(_QWORD *)(v4 + 80) = 0LL;
  }
  v5 = *(_QWORD *)(v4 + 72);
  if ( !v5 )
    goto LABEL_78;
  v27 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v27 )
  {
    v28 = v27 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v27 + 8) >> 3) + 0x7FFF8000) )
    {
      v27 = *(_QWORD *)(v27 + 8);
      goto LABEL_74;
    }
LABEL_81:
    __asan_report_load8(v28);
LABEL_82:
    v27 = __asan_report_load8(v28);
    goto LABEL_83;
  }
LABEL_74:
  if ( !v27 )
  {
LABEL_77:
    operator delete((void *)v5);
    goto LABEL_78;
  }
  v28 = v27 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v27 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_82;
  if ( *(_QWORD *)(v27 + 16) )
    goto LABEL_77;
LABEL_83:
  v29 = *(_BYTE *)(((v5 + 112) >> 3) + 0x7FFF8000);
  if ( v29 <= (char)((v5 + 112) & 7) && v29 )
  {
    __asan_report_load1(v5 + 112);
LABEL_89:
    __asan_report_store1(v5);
    goto LABEL_90;
  }
  v30 = *(_BYTE *)((v5 >> 3) + 0x7FFF8000);
  if ( v30 <= (char)(v5 & 7) && v30 )
    goto LABEL_89;
  *(_BYTE *)v5 = *(_BYTE *)(v5 + 112);
  *(_QWORD *)(v27 + 16) = v5;
LABEL_78:
  if ( v33 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
    return;
  }
LABEL_90:
  *(_QWORD *)v4 = 1172321806LL;
  *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
};

// Line 72: range 0000000019B9F7F9-0000000019B9FCA8
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::executor_binder<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::timeout_handler,boost::asio::executor>,boost::system::error_code>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  boost::asio::detail::executor_function_base *v2; // rbx
  unsigned __int64 v3; // r12
  _DWORD *v4; // r13
  unsigned __int64 func; // rdi
  __int64 (**v6)(void); // rax
  __m128i *v7; // rdi
  __int64 v8; // rdi
  __int64 v9; // rax
  __int64 v10; // rsi OVERLAPPED
  __int64 v11; // rdx
  __int64 v12; // rax
  char v13; // dl
  char v14; // dl
  __int64 v15; // rdi
  unsigned __int64 v16; // rbx
  __int64 v17; // rax
  __int64 v18; // rdi
  char v19; // dl
  char v20; // dl
  struct _Unwind_Exception *v21; // rbx
  _BYTE v22[280]; // [rsp+0h] [rbp-118h] BYREF

  v2 = base;
  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v12 = __asan_stack_malloc_2(224LL);
    if ( v12 )
      v3 = v12;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 1 12 allocator:76 64 24 4 p:77 128 56 11 function:85";
  *(_QWORD *)(v3 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::executor_binder<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::timeout_handler,boost::asio::executor>,boost::system::error_code>,std::allocator<void>>::do_complete;
  v4 = (_DWORD *)(v3 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234881024;
  v4[536862723] = -218959118;
  v4[536862725] = -218103808;
  v4[536862726] = -202116109;
  *(_QWORD *)(v3 + 64) = v3 + 48;
  *(_QWORD *)(v3 + 72) = base;
  *(_QWORD *)(v3 + 80) = base;
  func = (unsigned __int64)&base[1];
  if ( *(_BYTE *)(((unsigned __int64)&v2[1] >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(func);
LABEL_28:
    v6 = (__int64 (**)(void))__asan_report_load8(func);
    goto LABEL_29;
  }
  func = (unsigned __int64)v2[1].func_;
  if ( !func )
    goto LABEL_7;
  if ( *(_BYTE *)((func >> 3) + 0x7FFF8000) )
    goto LABEL_28;
  v6 = *(__int64 (***)(void))func;
  if ( *(_BYTE *)((*(_QWORD *)func >> 3) + 0x7FFF8000LL) )
  {
LABEL_29:
    v7 = (__m128i *)v6;
    __asan_report_load8(v6);
    goto LABEL_30;
  }
  func = (*v6)();
LABEL_7:
  *(_QWORD *)(v3 + 128) = func;
  v7 = (__m128i *)&v2[2];
  if ( *(_BYTE *)(((unsigned __int64)&v2[2] >> 3) + 0x7FFF8000) )
  {
LABEL_30:
    __asan_report_load8(v7);
    goto LABEL_31;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 136) = v2[2];
  v7 = (__m128i *)&v2[3];
  if ( *(_BYTE *)(((unsigned __int64)&v2[3] >> 3) + 0x7FFF8000) )
  {
LABEL_31:
    __asan_report_load8(v7);
    goto LABEL_32;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 144) = v2[3];
  v7 = (__m128i *)&v2[4];
  if ( *(_BYTE *)(((unsigned __int64)&v2[4] >> 3) + 0x7FFF8000) )
  {
LABEL_32:
    __asan_report_load8(v7);
    goto LABEL_33;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 152) = v2[4];
  v2[4].func_ = 0LL;
  v2[3].func_ = 0LL;
  v7 = (__m128i *)&v2[5];
  if ( *(_BYTE *)(((unsigned __int64)&v2[5] >> 3) + 0x7FFF8000) )
  {
LABEL_33:
    __asan_report_load8(v7);
    goto LABEL_34;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 160) = v2[5];
  v7 = (__m128i *)&v2[6];
  if ( *(_WORD *)(((unsigned __int64)&v2[6] >> 3) + 0x7FFF8000) )
  {
LABEL_34:
    __asan_report_load16(v7);
    goto LABEL_35;
  }
  *(__m128i *)(v3 + 168) = _mm_loadu_si128((const __m128i *)&v2[6]);
  v8 = *(_QWORD *)(v3 + 80);
  if ( v8 )
  {
    boost::asio::detail::executor_binder_base<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::timeout_handler,boost::asio::executor,false>::~executor_binder_base((boost::asio::detail::executor_binder_base<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::timeout_handler,boost::asio::executor,false> *const)(v8 + 8));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v2 = *(boost::asio::detail::executor_function_base **)(v3 + 72);
  if ( !v2 )
    goto LABEL_23;
  v9 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                  + __readfsqword(0));
  if ( v9 )
  {
    v7 = (__m128i *)(v9 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v9 + 8) >> 3) + 0x7FFF8000) )
    {
      v9 = *(_QWORD *)(v9 + 8);
      goto LABEL_18;
    }
LABEL_35:
    __asan_report_load8(v7);
    goto LABEL_36;
  }
LABEL_18:
  if ( v9 )
  {
    v7 = (__m128i *)(v9 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v9 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v9 + 16) )
        goto LABEL_21;
LABEL_37:
      v13 = *(_BYTE *)(((unsigned __int64)&v2[9] >> 3) + 0x7FFF8000);
      if ( v13 <= (((unsigned __int8)v2 + 72) & 7) && v13 )
      {
        __asan_report_load1(&v2[9]);
      }
      else
      {
        v14 = *(_BYTE *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000);
        if ( v14 > ((unsigned __int8)v2 & 7) || !v14 )
        {
          LOBYTE(v2->func_) = v2[9].func_;
          *(_QWORD *)(v9 + 16) = v2;
          goto LABEL_22;
        }
      }
      __asan_report_store1(v2);
      goto LABEL_44;
    }
LABEL_36:
    v9 = __asan_report_load8(v7);
    goto LABEL_37;
  }
LABEL_21:
  operator delete(*(void **)(v3 + 72));
LABEL_22:
  *(_QWORD *)(v3 + 72) = 0LL;
LABEL_23:
  if ( call )
  {
    v10 = *(_QWORD *)(v3 + 168);
    v11 = *(_QWORD *)(v3 + 176);
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::timeout_handler::operator()(
      (boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::timeout_handler *const)(v3 + 136),
      *(boost::beast::error_code *)&v10);
  }
LABEL_44:
  boost::asio::detail::executor_binder_base<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::timeout_handler,boost::asio::executor,false>::~executor_binder_base((boost::asio::detail::executor_binder_base<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::timeout_handler,boost::asio::executor,false> *const)(v3 + 128));
  v15 = *(_QWORD *)(v3 + 80);
  if ( v15 )
  {
    boost::asio::detail::executor_binder_base<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::timeout_handler,boost::asio::executor,false>::~executor_binder_base((boost::asio::detail::executor_binder_base<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::timeout_handler,boost::asio::executor,false> *const)(v15 + 8));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v16 = *(_QWORD *)(v3 + 72);
  if ( v16 )
  {
    v17 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v17 )
    {
      v18 = v17 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v17 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v18);
        goto LABEL_57;
      }
      v17 = *(_QWORD *)(v17 + 8);
    }
    if ( !v17 )
    {
LABEL_53:
      operator delete(*(void **)(v3 + 72));
      goto LABEL_54;
    }
    v18 = v17 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v17 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v17 + 16) )
        goto LABEL_53;
LABEL_58:
      v19 = *(_BYTE *)(((v16 + 72) >> 3) + 0x7FFF8000);
      if ( v19 <= (char)((v16 + 72) & 7) && v19 )
      {
        __asan_report_load1(v16 + 72);
      }
      else
      {
        v20 = *(_BYTE *)((v16 >> 3) + 0x7FFF8000);
        if ( v20 > (char)(v16 & 7) || !v20 )
        {
          *(_BYTE *)v16 = *(_BYTE *)(v16 + 72);
          *(_QWORD *)(v17 + 16) = v16;
          goto LABEL_54;
        }
      }
      v21 = (struct _Unwind_Exception *)__asan_report_store1(v16);
      boost::asio::detail::executor_binder_base<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::timeout_handler,boost::asio::executor,false>::~executor_binder_base((boost::asio::detail::executor_binder_base<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::timeout_handler,boost::asio::executor,false> *const)(v3 + 128));
      boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::executor_binder<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::timeout_handler,boost::asio::executor>,boost::system::error_code>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::executor_binder<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::timeout_handler,boost::asio::executor>,boost::system::error_code>,std::allocator<void> >::ptr *const)(v3 + 64));
      __asan_handle_no_return(v3 + 64);
      _Unwind_Resume(v21);
    }
LABEL_57:
    v17 = __asan_report_load8(v18);
    goto LABEL_58;
  }
LABEL_54:
  if ( v22 == (_BYTE *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8014) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
};

// Line 72: range 0000000019BC455F-0000000019BC4A51
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::handshake_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>>,boost::system::error_code>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v3; // r12
  _DWORD *v4; // r13
  unsigned __int64 v5; // rbp
  boost::asio::detail::executor_function_base *v6; // rdi
  char v7; // al
  char v8; // dl
  char v9; // al
  __int64 v10; // rdi
  __int64 v11; // rax
  __int64 v12; // rsi OVERLAPPED
  __int64 v13; // rdx
  __int64 v14; // rax
  char v15; // dl
  char v16; // dl
  __int64 v17; // rdi
  unsigned __int64 v18; // rbx
  __int64 v19; // rax
  __int64 v20; // rdi
  char v21; // dl
  char v22; // dl
  struct _Unwind_Exception *v23; // rbp
  char v24[344]; // [rsp+10h] [rbp-158h] BYREF

  v3 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v14 = __asan_stack_malloc_3(288LL);
    if ( v14 )
      v3 = v14;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 1 12 allocator:76 64 24 4 p:77 128 128 11 function:85";
  *(_QWORD *)(v3 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::handshake_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>>,boost::system::error_code>,std::allocator<void>>::do_complete;
  v4 = (_DWORD *)(v3 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234881024;
  v4[536862723] = -218959118;
  v4[536862728] = -202116109;
  *(_QWORD *)(v3 + 64) = v3 + 48;
  *(_QWORD *)(v3 + 72) = base;
  *(_QWORD *)(v3 + 80) = base;
  v5 = (unsigned __int64)&base[1];
  if ( *(_BYTE *)(((unsigned __int64)&base[1] >> 3) + 0x7FFF8000) )
  {
    v6 = base + 1;
    __asan_report_load8(&base[1]);
    goto LABEL_29;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 128) = base[1];
  v6 = base + 2;
  if ( *(_BYTE *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) )
  {
LABEL_29:
    __asan_report_load8(v6);
LABEL_30:
    __asan_report_load4(v6);
LABEL_31:
    __asan_report_load4(v6);
LABEL_32:
    __asan_report_load4(v6);
    goto LABEL_33;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 136) = base[2];
  v6 = base + 3;
  v7 = *(_BYTE *)(((unsigned __int64)&base[3] >> 3) + 0x7FFF8000);
  if ( v7 && v7 <= 3 )
    goto LABEL_30;
  *(_DWORD *)(v3 + 144) = base[3].func_;
  v6 = (boost::asio::detail::executor_function_base *)((char *)base + 28);
  v8 = *(_BYTE *)((((unsigned __int64)&base[3].func_ + 4) >> 3) + 0x7FFF8000);
  if ( (char)((((_BYTE)base + 28) & 7) + 3) >= v8 && v8 )
    goto LABEL_31;
  *(_DWORD *)(v3 + 148) = HIDWORD(base[3].func_);
  v6 = base + 4;
  v9 = *(_BYTE *)(((unsigned __int64)&base[4] >> 3) + 0x7FFF8000);
  if ( v9 && v9 <= 3 )
    goto LABEL_32;
  *(_DWORD *)(v3 + 152) = base[4].func_;
  v6 = base + 5;
  if ( *(_WORD *)(((unsigned __int64)&base[5] >> 3) + 0x7FFF8000) )
  {
LABEL_33:
    __asan_report_load16(v6);
    goto LABEL_34;
  }
  *(__m128i *)(v3 + 160) = _mm_loadu_si128((const __m128i *)&base[5]);
  v6 = base + 7;
  if ( *(_BYTE *)(((unsigned __int64)&base[7] >> 3) + 0x7FFF8000) )
  {
LABEL_34:
    __asan_report_load8(v6);
    goto LABEL_35;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 176) = base[7];
  boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>::coro_handler(
    (boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> *const)(v3 + 184),
    (boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> *)&base[8]);
  v6 = base + 15;
  if ( *(_WORD *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000) )
  {
LABEL_35:
    __asan_report_load16(v6);
    goto LABEL_36;
  }
  *(__m128i *)(v3 + 240) = _mm_loadu_si128((const __m128i *)&base[15]);
  v10 = *(_QWORD *)(v3 + 80);
  if ( v10 )
  {
    boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>::~coro_handler((boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> *const)(v10 + 64));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v5 = *(_QWORD *)(v3 + 72);
  if ( !v5 )
    goto LABEL_24;
  v11 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v11 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v11 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v11 + 8) >> 3) + 0x7FFF8000) )
    {
      v11 = *(_QWORD *)(v11 + 8);
      goto LABEL_19;
    }
LABEL_36:
    __asan_report_load8(v6);
    goto LABEL_37;
  }
LABEL_19:
  if ( v11 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v11 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v11 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v11 + 16) )
        goto LABEL_22;
LABEL_38:
      v15 = *(_BYTE *)(((v5 + 144) >> 3) + 0x7FFF8000);
      if ( v15 <= (char)((v5 - 112) & 7) && v15 )
      {
        __asan_report_load1(v5 + 144);
      }
      else
      {
        v16 = *(_BYTE *)((v5 >> 3) + 0x7FFF8000);
        if ( v16 > (char)(v5 & 7) || !v16 )
        {
          *(_BYTE *)v5 = *(_BYTE *)(v5 + 144);
          *(_QWORD *)(v11 + 16) = v5;
          goto LABEL_23;
        }
      }
      __asan_report_store1(v5);
      goto LABEL_45;
    }
LABEL_37:
    v11 = __asan_report_load8(v6);
    goto LABEL_38;
  }
LABEL_22:
  operator delete(*(void **)(v3 + 72));
LABEL_23:
  *(_QWORD *)(v3 + 72) = 0LL;
LABEL_24:
  if ( call )
  {
    v12 = *(_QWORD *)(v3 + 240);
    v13 = *(_QWORD *)(v3 + 248);
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::handshake_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>>::operator()(
      (boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::handshake_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> > *const)(v3 + 128),
      *(boost::system::error_code *)&v12,
      0xFFFFFFFFFFFFFFFFLL,
      0);
  }
LABEL_45:
  boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>::~coro_handler((boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> *const)(v3 + 184));
  v17 = *(_QWORD *)(v3 + 80);
  if ( v17 )
  {
    boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>::~coro_handler((boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> *const)(v17 + 64));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v18 = *(_QWORD *)(v3 + 72);
  if ( v18 )
  {
    v19 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v19 )
    {
      v20 = v19 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v19 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v20);
        goto LABEL_58;
      }
      v19 = *(_QWORD *)(v19 + 8);
    }
    if ( !v19 )
    {
LABEL_54:
      operator delete((void *)v18);
      goto LABEL_55;
    }
    v20 = v19 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v19 + 16) )
        goto LABEL_54;
LABEL_59:
      v21 = *(_BYTE *)(((v18 + 144) >> 3) + 0x7FFF8000);
      if ( v21 <= (char)((v18 - 112) & 7) && v21 )
      {
        __asan_report_load1(v18 + 144);
      }
      else
      {
        v22 = *(_BYTE *)((v18 >> 3) + 0x7FFF8000);
        if ( v22 > (char)(v18 & 7) || !v22 )
        {
          *(_BYTE *)v18 = *(_BYTE *)(v18 + 144);
          *(_QWORD *)(v19 + 16) = v18;
          goto LABEL_55;
        }
      }
      v23 = (struct _Unwind_Exception *)__asan_report_store1(v18);
      boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>::~coro_handler((boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> *const)(v18 - 104));
      boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::handshake_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>>,boost::system::error_code>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::handshake_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> >,boost::system::error_code>,std::allocator<void> >::ptr *const)(v18 - 224));
      __asan_handle_no_return(v18 - 224);
      _Unwind_Resume(v23);
    }
LABEL_58:
    v19 = __asan_report_load8(v20);
    goto LABEL_59;
  }
LABEL_55:
  if ( v24 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
};

// Line 72: range 0000000019C16299-0000000019C16E31
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>,boost::system::error_code>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  __int64 (***v2)(void); // r13
  boost::asio::detail::executor_function_base *v3; // r14
  boost::asio::detail::executor_function_base *v4; // rbp
  unsigned __int64 v5; // rbx
  boost::asio::detail::executor_function_base *v6; // r12
  boost::asio::detail::executor_function_base *v7; // rdi
  char v8; // al
  char v9; // dl
  char v10; // al
  __int64 (***v11)(void); // rdi
  boost::asio::detail::executor_function_base::func_type func; // rax
  __int64 (**v13)(void); // rax
  __int64 v14; // rax
  boost::asio::detail::executor_function_base *v15; // rdi
  boost::asio::detail::executor_function_base::func_type v16; // rax
  char v17; // al
  __int64 v18; // rax
  __int64 v19; // rsi OVERLAPPED
  __int64 v20; // rdx
  __int64 v21; // rax
  char v22; // dl
  char v23; // dl
  __int64 v24; // rbp
  __int64 v25; // rdi
  __int64 v26; // rax
  char v27; // dl
  char v28; // dl
  struct _Unwind_Exception *v29; // rbp
  unsigned __int64 v30; // [rsp+0h] [rbp-218h]
  _DWORD *v31; // [rsp+10h] [rbp-208h]
  char v32[504]; // [rsp+20h] [rbp-1F8h] BYREF

  v4 = base;
  v30 = (unsigned __int64)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v21 = __asan_stack_malloc_3(448LL);
    if ( v21 )
      v30 = v21;
  }
  v5 = v30 + 448;
  *(_QWORD *)v30 = 1102416563LL;
  *(_QWORD *)(v30 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 272 11 function:85";
  *(_QWORD *)(v30 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>,boost::system::error_code>,std::allocator<void>>::do_complete;
  v31 = (_DWORD *)(v30 >> 3);
  v31[536862720] = -235802127;
  v31[536862721] = 61953;
  v31[536862722] = -218959360;
  v31[536862723] = 62194;
  v31[536862732] = -202116109;
  v31[536862733] = -202116109;
  *(_QWORD *)(v30 + 48) = v30 + 32;
  *(_QWORD *)(v30 + 56) = base;
  *(_QWORD *)(v30 + 64) = base;
  v6 = base + 1;
  if ( *(_BYTE *)(((unsigned __int64)&base[1] >> 3) + 0x7FFF8000) )
  {
    v7 = base + 1;
    __asan_report_load8(&v4[1]);
    goto LABEL_65;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 112) = base[1];
  v7 = base + 2;
  if ( *(_BYTE *)(((unsigned __int64)&v4[2] >> 3) + 0x7FFF8000) )
  {
LABEL_65:
    __asan_report_load8(v7);
    goto LABEL_66;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 120) = v4[2];
  v7 = v4 + 3;
  if ( *(_WORD *)(((unsigned __int64)&v4[3] >> 3) + 0x7FFF8000) )
  {
LABEL_66:
    __asan_report_load16(v7);
LABEL_67:
    __asan_report_load4(v7);
LABEL_68:
    __asan_report_load4(v7);
    goto LABEL_69;
  }
  *(__m128i *)(v30 + 128) = _mm_loadu_si128((const __m128i *)&v4[3]);
  v7 = v4 + 5;
  v8 = *(_BYTE *)(((unsigned __int64)&v4[5] >> 3) + 0x7FFF8000);
  if ( v8 && v8 <= 3 )
    goto LABEL_67;
  *(_DWORD *)(v30 + 144) = v4[5].func_;
  v7 = (boost::asio::detail::executor_function_base *)((char *)v4 + 44);
  v9 = *(_BYTE *)((((unsigned __int64)&v4[5].func_ + 4) >> 3) + 0x7FFF8000);
  if ( (char)((((_BYTE)v4 + 44) & 7) + 3) >= v9 && v9 )
    goto LABEL_68;
  *(_DWORD *)(v30 + 148) = HIDWORD(v4[5].func_);
  v7 = v4 + 6;
  if ( *(_WORD *)(((unsigned __int64)&v4[6] >> 3) + 0x7FFF8000) )
  {
LABEL_69:
    __asan_report_load16(v7);
    goto LABEL_70;
  }
  *(__m128i *)(v30 + 152) = _mm_loadu_si128((const __m128i *)&v4[6]);
  v7 = v4 + 8;
  if ( *(_BYTE *)(((unsigned __int64)&v4[8] >> 3) + 0x7FFF8000) )
  {
LABEL_70:
    __asan_report_load8(v7);
LABEL_71:
    __asan_report_load4(v7);
    goto LABEL_72;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 168) = v4[8];
  v4 += 9;
  v7 = v6 + 25;
  v10 = *(_BYTE *)(((unsigned __int64)&v6[25] >> 3) + 0x7FFF8000);
  if ( v10 && v10 <= 3 )
    goto LABEL_71;
  *(_DWORD *)(v30 + 312) = v6[25].func_;
  *(_QWORD *)(v30 + 176) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v30 + 184) = &`vtable for'boost::beast::async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v2 = (__int64 (***)(void))(v30 + 192);
  v3 = v6 + 10;
  if ( *(_BYTE *)(((unsigned __int64)&v6[10] >> 3) + 0x7FFF8000) )
  {
LABEL_72:
    __asan_report_load8(v3);
    goto LABEL_73;
  }
  if ( *(_BYTE *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) )
  {
LABEL_73:
    v11 = v2;
    __asan_report_store8();
    goto LABEL_74;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 192) = v6[10];
  v11 = (__int64 (***)(void))(v30 + 200);
  if ( *(_BYTE *)(((v30 + 200) >> 3) + 0x7FFF8000) )
  {
LABEL_74:
    __asan_report_store8();
    goto LABEL_75;
  }
  *(_QWORD *)(v30 + 200) = 0LL;
  v11 = (__int64 (***)(void))&v4[3];
  if ( *(_BYTE *)(((unsigned __int64)&v4[3] >> 3) + 0x7FFF8000) )
  {
LABEL_75:
    __asan_report_load8(v11);
    goto LABEL_76;
  }
  func = v4[3].func_;
  v4[3].func_ = 0LL;
  *(_QWORD *)(v30 + 200) = func;
  v6[10].func_ = 0LL;
  v11 = (__int64 (***)(void))&v4[4];
  if ( *(_BYTE *)(((unsigned __int64)&v4[4] >> 3) + 0x7FFF8000) )
  {
LABEL_76:
    __asan_report_load8(v11);
    goto LABEL_77;
  }
  v11 = (__int64 (***)(void))(v30 + 208);
  if ( *(_BYTE *)(((v30 + 208) >> 3) + 0x7FFF8000) )
  {
LABEL_77:
    __asan_report_store8();
    goto LABEL_78;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 208) = v4[4];
  v11 = (__int64 (***)(void))&v4[5];
  if ( *(_BYTE *)(((unsigned __int64)&v4[5] >> 3) + 0x7FFF8000) )
  {
LABEL_78:
    __asan_report_load8(v11);
LABEL_79:
    v13 = (__int64 (**)(void))__asan_report_load8(v11);
    goto LABEL_80;
  }
  v11 = (__int64 (***)(void))v4[5].func_;
  if ( !v11 )
    goto LABEL_24;
  if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
    goto LABEL_79;
  v13 = *v11;
  if ( *(_BYTE *)(((unsigned __int64)*v11 >> 3) + 0x7FFF8000) )
  {
LABEL_80:
    v14 = __asan_report_load8(v13);
    goto LABEL_81;
  }
  v11 = (__int64 (***)(void))(*v13)();
LABEL_24:
  v14 = v30 + 216;
  if ( *(_BYTE *)(((v30 + 216) >> 3) + 0x7FFF8000) )
  {
LABEL_81:
    v15 = (boost::asio::detail::executor_function_base *)v14;
    __asan_report_store8();
    goto LABEL_82;
  }
  *(_QWORD *)(v30 + 216) = v11;
  v15 = v4 + 6;
  if ( *(_BYTE *)(((unsigned __int64)&v4[6] >> 3) + 0x7FFF8000) )
  {
LABEL_82:
    __asan_report_load8(v15);
    goto LABEL_83;
  }
  v15 = (boost::asio::detail::executor_function_base *)(v30 + 224);
  if ( *(_BYTE *)(((v30 + 224) >> 3) + 0x7FFF8000) )
  {
LABEL_83:
    __asan_report_store8();
    goto LABEL_84;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 224) = v4[6];
  v15 = v4 + 7;
  if ( *(_BYTE *)(((unsigned __int64)&v4[7] >> 3) + 0x7FFF8000) )
  {
LABEL_84:
    __asan_report_load8(v15);
    goto LABEL_85;
  }
  v15 = (boost::asio::detail::executor_function_base *)(v30 + 232);
  if ( *(_BYTE *)(((v30 + 232) >> 3) + 0x7FFF8000) )
  {
LABEL_85:
    __asan_report_store8();
    goto LABEL_86;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 232) = v4[7];
  v15 = v4 + 8;
  if ( *(_BYTE *)(((unsigned __int64)&v4[8] >> 3) + 0x7FFF8000) )
  {
LABEL_86:
    __asan_report_load8(v15);
    goto LABEL_87;
  }
  v15 = (boost::asio::detail::executor_function_base *)(v30 + 240);
  if ( *(_BYTE *)(((v30 + 240) >> 3) + 0x7FFF8000) )
  {
LABEL_87:
    __asan_report_store8();
    goto LABEL_88;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 240) = v4[8];
  v15 = v4 + 9;
  if ( *(_BYTE *)(((unsigned __int64)&v4[9] >> 3) + 0x7FFF8000) )
  {
LABEL_88:
    __asan_report_load8(v15);
    goto LABEL_89;
  }
  v15 = (boost::asio::detail::executor_function_base *)(v30 + 248);
  if ( *(_BYTE *)(((v30 + 248) >> 3) + 0x7FFF8000) )
  {
LABEL_89:
    __asan_report_store8();
    goto LABEL_90;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 248) = v4[9];
  v15 = v4 + 10;
  if ( *(_BYTE *)(((unsigned __int64)&v4[10] >> 3) + 0x7FFF8000) )
  {
LABEL_90:
    __asan_report_load8(v15);
    goto LABEL_91;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 256) = v4[10];
  v4[10].func_ = 0LL;
  v15 = v4 + 11;
  if ( *(char *)(((unsigned __int64)&v4[11] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_91:
    __asan_report_load1(v15);
    goto LABEL_92;
  }
  *(_BYTE *)(v30 + 264) = v4[11].func_;
  LOBYTE(v4[11].func_) = 0;
  *(_QWORD *)(v30 + 184) = &`vtable for'boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v15 = v4 + 12;
  if ( *(_BYTE *)(((unsigned __int64)&v4[12] >> 3) + 0x7FFF8000) )
  {
LABEL_92:
    __asan_report_load8(v15);
LABEL_93:
    __asan_report_load4(v15);
    goto LABEL_94;
  }
  v16 = v4[12].func_;
  v4[12].func_ = 0LL;
  *(_QWORD *)(v30 + 272) = v16;
  v15 = v4 + 13;
  v17 = *(_BYTE *)(((unsigned __int64)&v4[13] >> 3) + 0x7FFF8000);
  if ( v17 && v17 <= 3 )
    goto LABEL_93;
  *(_DWORD *)(v30 + 280) = v4[13].func_;
  *(_QWORD *)(v30 + 184) = &`vtable for'boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>
                         + 2;
  v15 = v4 + 14;
  if ( *(_BYTE *)(((unsigned __int64)&v4[14] >> 3) + 0x7FFF8000) )
  {
LABEL_94:
    __asan_report_load8(v15);
    goto LABEL_95;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 288) = v4[14];
  v15 = v6 + 23;
  if ( *(_BYTE *)(((unsigned __int64)&v6[23] >> 3) + 0x7FFF8000) )
  {
LABEL_95:
    __asan_report_load8(v15);
    goto LABEL_96;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 296) = v6[23];
  v6[23].func_ = 0LL;
  v15 = v6 + 24;
  if ( *(char *)(((unsigned __int64)&v6[24] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_96:
    __asan_report_load1(v15);
    goto LABEL_97;
  }
  *(_BYTE *)(v30 + 304) = v6[24].func_;
  LOBYTE(v6[24].func_) = 0;
  *(_QWORD *)(v30 + 176) = &`vtable for'boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>
                         + 2;
  v15 = v6 + 26;
  if ( *(_BYTE *)(((unsigned __int64)&v6[26] >> 3) + 0x7FFF8000) )
  {
LABEL_97:
    __asan_report_load8(v15);
    goto LABEL_98;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 320) = v6[26];
  v15 = v6 + 27;
  if ( *(_BYTE *)(((unsigned __int64)&v6[27] >> 3) + 0x7FFF8000) )
  {
LABEL_98:
    __asan_report_load8(v15);
    goto LABEL_99;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 328) = v6[27];
  v15 = v6 + 28;
  if ( *(_BYTE *)(((unsigned __int64)&v6[28] >> 3) + 0x7FFF8000) )
  {
LABEL_99:
    __asan_report_load8(v15);
    goto LABEL_100;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 336) = v6[28];
  v15 = v6 + 29;
  if ( *(_WORD *)(((unsigned __int64)&v6[29] >> 3) + 0x7FFF8000) )
  {
LABEL_100:
    __asan_report_load16(v15);
    goto LABEL_101;
  }
  *(__m128i *)(v30 + 344) = _mm_loadu_si128((const __m128i *)&v6[29]);
  v15 = v6 + 31;
  if ( *(_BYTE *)(((unsigned __int64)&v6[31] >> 3) + 0x7FFF8000) )
  {
LABEL_101:
    __asan_report_load8(v15);
    goto LABEL_102;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 360) = v6[31];
  v15 = v6 + 32;
  if ( *(_WORD *)(((unsigned __int64)&v6[32] >> 3) + 0x7FFF8000) )
  {
LABEL_102:
    __asan_report_load16(v15);
LABEL_103:
    __asan_report_store8();
    goto LABEL_104;
  }
  *(__m128i *)(v30 + 368) = _mm_loadu_si128((const __m128i *)&v6[32]);
  v4 = *(boost::asio::detail::executor_function_base **)(v30 + 64);
  if ( !v4 )
    goto LABEL_51;
  v15 = v4 + 9;
  if ( *(_BYTE *)(((unsigned __int64)&v4[9] >> 3) + 0x7FFF8000) )
    goto LABEL_103;
  v4[9].func_ = (boost::asio::detail::executor_function_base::func_type)(&`vtable for'boost::beast::async_base<boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>,boost::asio::executor,std::allocator<void>>
                                                                       + 2);
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)&v4[24]);
  v15 = v4 + 10;
  if ( *(_BYTE *)(((unsigned __int64)&v4[10] >> 3) + 0x7FFF8000) )
  {
LABEL_104:
    __asan_report_store8();
    goto LABEL_105;
  }
  v4[10].func_ = (boost::asio::detail::executor_function_base::func_type)(&`vtable for'boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>
                                                                        + 2);
  boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)&v4[10]);
  *(_QWORD *)(v30 + 64) = 0LL;
LABEL_51:
  v4 = *(boost::asio::detail::executor_function_base **)(v30 + 56);
  if ( !v4 )
    goto LABEL_60;
  v18 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v18 )
  {
    v15 = (boost::asio::detail::executor_function_base *)(v18 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v18 + 8) >> 3) + 0x7FFF8000) )
    {
      v18 = *(_QWORD *)(v18 + 8);
      goto LABEL_55;
    }
LABEL_105:
    __asan_report_load8(v15);
    goto LABEL_106;
  }
LABEL_55:
  if ( v18 )
  {
    v15 = (boost::asio::detail::executor_function_base *)(v18 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v18 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v18 + 16) )
        goto LABEL_58;
LABEL_107:
      v22 = *(_BYTE *)(((unsigned __int64)&v4[36] >> 3) + 0x7FFF8000);
      if ( v22 <= (((unsigned __int8)v4 + 32) & 7) && v22 )
      {
        __asan_report_load1(&v4[36]);
      }
      else
      {
        v23 = *(_BYTE *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000);
        if ( v23 > ((unsigned __int8)v4 & 7) || !v23 )
        {
          LOBYTE(v4->func_) = v4[36].func_;
          *(_QWORD *)(v18 + 16) = v4;
          goto LABEL_59;
        }
      }
      __asan_report_store1(v4);
      goto LABEL_114;
    }
LABEL_106:
    v18 = __asan_report_load8(v15);
    goto LABEL_107;
  }
LABEL_58:
  operator delete(*(void **)(v30 + 56));
LABEL_59:
  *(_QWORD *)(v30 + 56) = 0LL;
LABEL_60:
  if ( call )
  {
    v19 = *(_QWORD *)(v30 + 368);
    v20 = *(_QWORD *)(v30 + 376);
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>::operator()(
      (boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int> > > > *const)(v30 + 112),
      *(boost::system::error_code *)&v19,
      0xFFFFFFFFFFFFFFFFLL,
      0);
  }
LABEL_114:
  *(_QWORD *)(v30 + 176) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v30 + 296));
  *(_QWORD *)(v30 + 184) = &`vtable for'boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>
                         + 2;
  boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(v30 + 184));
  v24 = *(_QWORD *)(v30 + 64);
  if ( !v24 )
    goto LABEL_118;
  v25 = v24 + 72;
  if ( *(_BYTE *)(((unsigned __int64)(v24 + 72) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store8();
    goto LABEL_129;
  }
  *(_QWORD *)(v24 + 72) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v24 + 192));
  v25 = v24 + 80;
  if ( *(_BYTE *)(((unsigned __int64)(v24 + 80) >> 3) + 0x7FFF8000) )
  {
LABEL_129:
    __asan_report_store8();
    goto LABEL_130;
  }
  *(_QWORD *)(v24 + 80) = &`vtable for'boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>
                        + 2;
  boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(v24 + 80));
  *(_QWORD *)(v30 + 64) = 0LL;
LABEL_118:
  v5 = *(_QWORD *)(v30 + 56);
  if ( !v5 )
    goto LABEL_126;
  v26 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v26 )
  {
    v25 = v26 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v26 + 8) >> 3) + 0x7FFF8000) )
    {
      v26 = *(_QWORD *)(v26 + 8);
      goto LABEL_122;
    }
LABEL_130:
    __asan_report_load8(v25);
LABEL_131:
    v26 = __asan_report_load8(v25);
    goto LABEL_132;
  }
LABEL_122:
  if ( !v26 )
  {
LABEL_125:
    operator delete((void *)v5);
    goto LABEL_126;
  }
  v25 = v26 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v26 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_131;
  if ( *(_QWORD *)(v26 + 16) )
    goto LABEL_125;
LABEL_132:
  v27 = *(_BYTE *)(((v5 + 288) >> 3) + 0x7FFF8000);
  if ( v27 <= (char)((v5 + 32) & 7) && v27 )
  {
    __asan_report_load1(v5 + 288);
    goto LABEL_138;
  }
  v28 = *(_BYTE *)((v5 >> 3) + 0x7FFF8000);
  if ( v28 <= (char)(v5 & 7) && v28 )
  {
LABEL_138:
    v29 = (struct _Unwind_Exception *)__asan_report_store1(v5);
    *(_QWORD *)(v5 - 272) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>,boost::asio::executor,std::allocator<void>>
                          + 2;
    boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v5 - 152));
    *(_QWORD *)(v5 - 264) = &`vtable for'boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>
                          + 2;
    boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(v5 - 264));
    boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>,boost::system::error_code>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int> > > >,boost::system::error_code>,std::allocator<void> >::ptr *const)(v5 - 400));
    __asan_handle_no_return(v5 - 400);
    _Unwind_Resume(v29);
  }
  *(_BYTE *)v5 = *(_BYTE *)(v5 + 288);
  *(_QWORD *)(v26 + 16) = v5;
LABEL_126:
  if ( v32 == (char *)v30 )
  {
    *(_QWORD *)((v30 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v30 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v30 >> 3) + 0x7FFF8030) = 0LL;
  }
  else
  {
    *(_QWORD *)v30 = 1172321806LL;
    *(_QWORD *)((v30 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v30 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v30 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v30 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v30 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v30 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v30 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 72: range 0000000019BCE6E7-0000000019BCEBA4
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::shutdown_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>>,boost::system::error_code>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  boost::asio::detail::executor_function_base *v2; // rbp
  unsigned __int64 v3; // r12
  _DWORD *v4; // r13
  boost::asio::detail::executor_function_base *v5; // rdi
  char v6; // dl
  char v7; // al
  __int64 v8; // rdi
  __int64 v9; // rax
  __int64 v10; // rsi OVERLAPPED
  __int64 v11; // rdx
  __int64 v12; // rax
  char v13; // dl
  char v14; // dl
  __int64 v15; // rdi
  unsigned __int64 v16; // rbx
  __int64 v17; // rax
  __int64 v18; // rdi
  char v19; // dl
  char v20; // dl
  struct _Unwind_Exception *v21; // rbp
  _BYTE v22[344]; // [rsp+0h] [rbp-158h] BYREF

  v2 = base;
  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v12 = __asan_stack_malloc_3(288LL);
    if ( v12 )
      v3 = v12;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 1 12 allocator:76 64 24 4 p:77 128 128 11 function:85";
  *(_QWORD *)(v3 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::shutdown_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>>,boost::system::error_code>,std::allocator<void>>::do_complete;
  v4 = (_DWORD *)(v3 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234881024;
  v4[536862723] = -218959118;
  v4[536862728] = -202116109;
  *(_QWORD *)(v3 + 64) = v3 + 48;
  *(_QWORD *)(v3 + 72) = base;
  *(_QWORD *)(v3 + 80) = base;
  v5 = base + 1;
  if ( *(_BYTE *)(((unsigned __int64)&v2[1] >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(v5);
    goto LABEL_27;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 128) = v2[1];
  v5 = v2 + 2;
  if ( *(_BYTE *)(((unsigned __int64)&v2[2] >> 3) + 0x7FFF8000) )
  {
LABEL_27:
    __asan_report_load8(v5);
LABEL_28:
    __asan_report_load4(v5);
LABEL_29:
    __asan_report_load4(v5);
    goto LABEL_30;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 136) = v2[2];
  v5 = (boost::asio::detail::executor_function_base *)((char *)v2 + 28);
  v6 = *(_BYTE *)((((unsigned __int64)&v2[3].func_ + 4) >> 3) + 0x7FFF8000);
  if ( (char)((((_BYTE)v2 + 28) & 7) + 3) >= v6 && v6 )
    goto LABEL_28;
  *(_DWORD *)(v3 + 148) = HIDWORD(v2[3].func_);
  v5 = v2 + 4;
  v7 = *(_BYTE *)(((unsigned __int64)&v2[4] >> 3) + 0x7FFF8000);
  if ( v7 && v7 <= 3 )
    goto LABEL_29;
  *(_DWORD *)(v3 + 152) = v2[4].func_;
  v5 = v2 + 5;
  if ( *(_WORD *)(((unsigned __int64)&v2[5] >> 3) + 0x7FFF8000) )
  {
LABEL_30:
    __asan_report_load16(v5);
    goto LABEL_31;
  }
  *(__m128i *)(v3 + 160) = _mm_loadu_si128((const __m128i *)&v2[5]);
  v5 = v2 + 7;
  if ( *(_BYTE *)(((unsigned __int64)&v2[7] >> 3) + 0x7FFF8000) )
  {
LABEL_31:
    __asan_report_load8(v5);
    goto LABEL_32;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 176) = v2[7];
  boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>::coro_handler(
    (boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> *const)(v3 + 184),
    (boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> *)&v2[8]);
  v5 = v2 + 15;
  if ( *(_WORD *)(((unsigned __int64)&v2[15] >> 3) + 0x7FFF8000) )
  {
LABEL_32:
    __asan_report_load16(v5);
    goto LABEL_33;
  }
  *(__m128i *)(v3 + 240) = _mm_loadu_si128((const __m128i *)&v2[15]);
  v8 = *(_QWORD *)(v3 + 80);
  if ( v8 )
  {
    boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>::~coro_handler((boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> *const)(v8 + 64));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v2 = *(boost::asio::detail::executor_function_base **)(v3 + 72);
  if ( !v2 )
    goto LABEL_22;
  v9 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                  + __readfsqword(0));
  if ( v9 )
  {
    v5 = (boost::asio::detail::executor_function_base *)(v9 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v9 + 8) >> 3) + 0x7FFF8000) )
    {
      v9 = *(_QWORD *)(v9 + 8);
      goto LABEL_17;
    }
LABEL_33:
    __asan_report_load8(v5);
    goto LABEL_34;
  }
LABEL_17:
  if ( v9 )
  {
    v5 = (boost::asio::detail::executor_function_base *)(v9 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v9 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v9 + 16) )
        goto LABEL_20;
LABEL_35:
      v13 = *(_BYTE *)(((unsigned __int64)&v2[18] >> 3) + 0x7FFF8000);
      if ( v13 <= (((unsigned __int8)v2 - 112) & 7) && v13 )
      {
        __asan_report_load1(&v2[18]);
      }
      else
      {
        v14 = *(_BYTE *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000);
        if ( v14 > ((unsigned __int8)v2 & 7) || !v14 )
        {
          LOBYTE(v2->func_) = v2[18].func_;
          *(_QWORD *)(v9 + 16) = v2;
          goto LABEL_21;
        }
      }
      __asan_report_store1(v2);
      goto LABEL_42;
    }
LABEL_34:
    v9 = __asan_report_load8(v5);
    goto LABEL_35;
  }
LABEL_20:
  operator delete(*(void **)(v3 + 72));
LABEL_21:
  *(_QWORD *)(v3 + 72) = 0LL;
LABEL_22:
  if ( call )
  {
    v10 = *(_QWORD *)(v3 + 240);
    v11 = *(_QWORD *)(v3 + 248);
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::shutdown_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>>::operator()(
      (boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::shutdown_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> > *const)(v3 + 128),
      *(boost::system::error_code *)&v10,
      0xFFFFFFFFFFFFFFFFLL,
      0);
  }
LABEL_42:
  boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>::~coro_handler((boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> *const)(v3 + 184));
  v15 = *(_QWORD *)(v3 + 80);
  if ( v15 )
  {
    boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>::~coro_handler((boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> *const)(v15 + 64));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v16 = *(_QWORD *)(v3 + 72);
  if ( v16 )
  {
    v17 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v17 )
    {
      v18 = v17 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v17 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v18);
        goto LABEL_55;
      }
      v17 = *(_QWORD *)(v17 + 8);
    }
    if ( !v17 )
    {
LABEL_51:
      operator delete((void *)v16);
      goto LABEL_52;
    }
    v18 = v17 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v17 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v17 + 16) )
        goto LABEL_51;
LABEL_56:
      v19 = *(_BYTE *)(((v16 + 144) >> 3) + 0x7FFF8000);
      if ( v19 <= (char)((v16 - 112) & 7) && v19 )
      {
        __asan_report_load1(v16 + 144);
      }
      else
      {
        v20 = *(_BYTE *)((v16 >> 3) + 0x7FFF8000);
        if ( v20 > (char)(v16 & 7) || !v20 )
        {
          *(_BYTE *)v16 = *(_BYTE *)(v16 + 144);
          *(_QWORD *)(v17 + 16) = v16;
          goto LABEL_52;
        }
      }
      v21 = (struct _Unwind_Exception *)__asan_report_store1(v16);
      boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>::~coro_handler((boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> *const)(v16 - 104));
      boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::shutdown_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,void>>,boost::system::error_code>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::shutdown_op,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,void> >,boost::system::error_code>,std::allocator<void> >::ptr *const)(v16 - 224));
      __asan_handle_no_return(v16 - 224);
      _Unwind_Resume(v21);
    }
LABEL_55:
    v17 = __asan_report_load8(v18);
    goto LABEL_56;
  }
LABEL_52:
  if ( v22 == (_BYTE *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
};

// Line 72: range 0000000019C8C621-0000000019C8CCA6
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v3; // r12
  unsigned __int64 v4; // rbx
  _DWORD *v5; // r13
  boost::asio::detail::executor_function_base *v6; // rbp
  boost::asio::detail::executor_function_base *v7; // rdi
  char v8; // al
  char v9; // dl
  char v10; // al
  __int64 v11; // rax
  __int64 v12; // rsi OVERLAPPED
  __int64 v13; // rdx
  __int64 v14; // rax
  char v15; // dl
  char v16; // dl
  __int64 v17; // rbp
  __int64 v18; // rdi
  __int64 v19; // rax
  char v20; // dl
  char v21; // dl
  struct _Unwind_Exception *v22; // rbp
  char v23[568]; // [rsp+10h] [rbp-238h] BYREF

  v3 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v14 = __asan_stack_malloc_3(512LL);
    if ( v14 )
      v3 = v14;
  }
  v4 = v3 + 512;
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 1 12 allocator:76 64 24 4 p:77 128 320 11 function:85";
  *(_QWORD *)(v3 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::do_complete;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234881024;
  v5[536862723] = -218959118;
  v5[536862734] = -202116109;
  v5[536862735] = -202116109;
  *(_QWORD *)(v3 + 64) = v3 + 48;
  *(_QWORD *)(v3 + 72) = base;
  *(_QWORD *)(v3 + 80) = base;
  v6 = base + 1;
  if ( *(_BYTE *)(((unsigned __int64)&base[1] >> 3) + 0x7FFF8000) )
  {
    v7 = base + 1;
    __asan_report_load8(&base[1]);
    goto LABEL_32;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 128) = base[1];
  v7 = base + 2;
  if ( *(_BYTE *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) )
  {
LABEL_32:
    __asan_report_load8(v7);
    goto LABEL_33;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 136) = base[2];
  v7 = base + 3;
  if ( *(_WORD *)(((unsigned __int64)&base[3] >> 3) + 0x7FFF8000) )
  {
LABEL_33:
    __asan_report_load16(v7);
LABEL_34:
    __asan_report_load4(v7);
LABEL_35:
    __asan_report_load4(v7);
    goto LABEL_36;
  }
  *(__m128i *)(v3 + 144) = _mm_loadu_si128((const __m128i *)&base[3]);
  v7 = base + 5;
  v8 = *(_BYTE *)(((unsigned __int64)&base[5] >> 3) + 0x7FFF8000);
  if ( v8 && v8 <= 3 )
    goto LABEL_34;
  *(_DWORD *)(v3 + 160) = base[5].func_;
  v7 = (boost::asio::detail::executor_function_base *)((char *)base + 44);
  v9 = *(_BYTE *)((((unsigned __int64)&base[5].func_ + 4) >> 3) + 0x7FFF8000);
  if ( (char)((((_BYTE)base + 44) & 7) + 3) >= v9 && v9 )
    goto LABEL_35;
  *(_DWORD *)(v3 + 164) = HIDWORD(base[5].func_);
  v7 = base + 6;
  if ( *(_WORD *)(((unsigned __int64)&base[6] >> 3) + 0x7FFF8000) )
  {
LABEL_36:
    __asan_report_load16(v7);
    goto LABEL_37;
  }
  *(__m128i *)(v3 + 168) = _mm_loadu_si128((const __m128i *)&base[6]);
  v7 = base + 8;
  if ( *(_BYTE *)(((unsigned __int64)&base[8] >> 3) + 0x7FFF8000) )
  {
LABEL_37:
    __asan_report_load8(v7);
LABEL_38:
    __asan_report_load4(v7);
    goto LABEL_39;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 184) = base[8];
  boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::async_base(
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 192),
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *)&base[9]);
  v7 = base + 38;
  v10 = *(_BYTE *)(((unsigned __int64)&base[38] >> 3) + 0x7FFF8000);
  if ( v10 && v10 <= 3 )
    goto LABEL_38;
  *(_DWORD *)(v3 + 424) = base[38].func_;
  *(_QWORD *)(v3 + 192) = &`vtable for'boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                        + 2;
  v7 = base + 39;
  if ( *(_WORD *)(((unsigned __int64)&base[39] >> 3) + 0x7FFF8000) )
  {
LABEL_39:
    __asan_report_load16(v7);
LABEL_40:
    __asan_report_store8();
    goto LABEL_41;
  }
  *(__m128i *)(v3 + 432) = _mm_loadu_si128((const __m128i *)&base[39]);
  v6 = *(boost::asio::detail::executor_function_base **)(v3 + 80);
  if ( !v6 )
    goto LABEL_18;
  v7 = v6 + 9;
  if ( *(_BYTE *)(((unsigned __int64)&v6[9] >> 3) + 0x7FFF8000) )
    goto LABEL_40;
  v6[9].func_ = (boost::asio::detail::executor_function_base::func_type)(&`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                                                                       + 2);
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)&v6[36]);
  v7 = v6 + 10;
  if ( *(_BYTE *)(((unsigned __int64)&v6[10] >> 3) + 0x7FFF8000) )
  {
LABEL_41:
    __asan_report_store8();
    goto LABEL_42;
  }
  v6[10].func_ = (boost::asio::detail::executor_function_base::func_type)(&`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                                                                        + 2);
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)&v6[10]);
  *(_QWORD *)(v3 + 80) = 0LL;
LABEL_18:
  v6 = *(boost::asio::detail::executor_function_base **)(v3 + 72);
  if ( !v6 )
    goto LABEL_27;
  v11 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v11 )
  {
    v7 = (boost::asio::detail::executor_function_base *)(v11 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v11 + 8) >> 3) + 0x7FFF8000) )
    {
      v11 = *(_QWORD *)(v11 + 8);
      goto LABEL_22;
    }
LABEL_42:
    __asan_report_load8(v7);
    goto LABEL_43;
  }
LABEL_22:
  if ( v11 )
  {
    v7 = (boost::asio::detail::executor_function_base *)(v11 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v11 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v11 + 16) )
        goto LABEL_25;
LABEL_44:
      v15 = *(_BYTE *)(((unsigned __int64)&v6[42] >> 3) + 0x7FFF8000);
      if ( v15 <= (((unsigned __int8)v6 + 80) & 7) && v15 )
      {
        __asan_report_load1(&v6[42]);
      }
      else
      {
        v16 = *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000);
        if ( v16 > ((unsigned __int8)v6 & 7) || !v16 )
        {
          LOBYTE(v6->func_) = v6[42].func_;
          *(_QWORD *)(v11 + 16) = v6;
          goto LABEL_26;
        }
      }
      __asan_report_store1(v6);
      goto LABEL_51;
    }
LABEL_43:
    v11 = __asan_report_load8(v7);
    goto LABEL_44;
  }
LABEL_25:
  operator delete(*(void **)(v3 + 72));
LABEL_26:
  *(_QWORD *)(v3 + 72) = 0LL;
LABEL_27:
  if ( call )
  {
    v12 = *(_QWORD *)(v3 + 432);
    v13 = *(_QWORD *)(v3 + 440);
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::operator()(
      (boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v3 + 128),
      *(boost::system::error_code *)&v12,
      0xFFFFFFFFFFFFFFFFLL,
      0);
  }
LABEL_51:
  *(_QWORD *)(v3 + 192) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v3 + 408));
  *(_QWORD *)(v3 + 200) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                        + 2;
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 200));
  v17 = *(_QWORD *)(v3 + 80);
  if ( !v17 )
    goto LABEL_55;
  v18 = v17 + 72;
  if ( *(_BYTE *)(((unsigned __int64)(v17 + 72) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store8();
    goto LABEL_66;
  }
  *(_QWORD *)(v17 + 72) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v17 + 288));
  v18 = v17 + 80;
  if ( *(_BYTE *)(((unsigned __int64)(v17 + 80) >> 3) + 0x7FFF8000) )
  {
LABEL_66:
    __asan_report_store8();
    goto LABEL_67;
  }
  *(_QWORD *)(v17 + 80) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                        + 2;
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v17 + 80));
  *(_QWORD *)(v3 + 80) = 0LL;
LABEL_55:
  v4 = *(_QWORD *)(v3 + 72);
  if ( !v4 )
    goto LABEL_63;
  v19 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v19 )
  {
    v18 = v19 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 8) >> 3) + 0x7FFF8000) )
    {
      v19 = *(_QWORD *)(v19 + 8);
      goto LABEL_59;
    }
LABEL_67:
    __asan_report_load8(v18);
LABEL_68:
    v19 = __asan_report_load8(v18);
    goto LABEL_69;
  }
LABEL_59:
  if ( !v19 )
  {
LABEL_62:
    operator delete((void *)v4);
    goto LABEL_63;
  }
  v18 = v19 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v19 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_68;
  if ( *(_QWORD *)(v19 + 16) )
    goto LABEL_62;
LABEL_69:
  v20 = *(_BYTE *)(((v4 + 336) >> 3) + 0x7FFF8000);
  if ( v20 <= (char)((v4 + 80) & 7) && v20 )
  {
    __asan_report_load1(v4 + 336);
    goto LABEL_75;
  }
  v21 = *(_BYTE *)((v4 >> 3) + 0x7FFF8000);
  if ( v21 <= (char)(v4 & 7) && v21 )
  {
LABEL_75:
    v22 = (struct _Unwind_Exception *)__asan_report_store1(v4);
    *(_QWORD *)(v4 - 320) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                          + 2;
    boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v4 - 104));
    *(_QWORD *)(v4 - 312) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                          + 2;
    boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v4 - 312));
    boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > >,boost::system::error_code>,std::allocator<void> >::ptr *const)(v4 - 448));
    __asan_handle_no_return(v4 - 448);
    _Unwind_Resume(v22);
  }
  *(_BYTE *)v4 = *(_BYTE *)(v4 + 336);
  *(_QWORD *)(v19 + 16) = v4;
LABEL_63:
  if ( v23 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 72: range 0000000019C9EE9D-0000000019C9F53D
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v3; // r13
  unsigned __int64 v4; // rbx
  _DWORD *v5; // r12
  boost::asio::detail::executor_function_base *v6; // rbp
  boost::asio::detail::executor_function_base *v7; // rdi
  char v8; // al
  char v9; // dl
  char v10; // al
  __int64 v11; // rax
  __int64 v12; // rsi OVERLAPPED
  __int64 v13; // rdx
  __int64 v14; // rax
  char v15; // dl
  char v16; // dl
  __int64 v17; // rbp
  __int64 v18; // rdi
  __int64 v19; // rax
  char v20; // dl
  char v21; // dl
  struct _Unwind_Exception *v22; // rbp
  char v23[600]; // [rsp+10h] [rbp-258h] BYREF

  v3 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v14 = __asan_stack_malloc_4(544LL);
    if ( v14 )
      v3 = v14;
  }
  v4 = v3 + 544;
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 360 11 function:85";
  *(_QWORD *)(v3 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::do_complete;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61953;
  v5[536862722] = -218959360;
  v5[536862723] = 62194;
  v5[536862734] = -218103808;
  v5[536862735] = -202116109;
  v5[536862736] = -202116109;
  *(_QWORD *)(v3 + 48) = v3 + 32;
  *(_QWORD *)(v3 + 56) = base;
  *(_QWORD *)(v3 + 64) = base;
  v6 = base + 1;
  if ( *(_BYTE *)(((unsigned __int64)&base[1] >> 3) + 0x7FFF8000) )
  {
    v7 = base + 1;
    __asan_report_load8(&base[1]);
    goto LABEL_31;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 112) = base[1];
  v7 = base + 2;
  if ( *(_BYTE *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) )
  {
LABEL_31:
    __asan_report_load8(v7);
LABEL_32:
    __asan_report_load4(v7);
LABEL_33:
    __asan_report_load4(v7);
    goto LABEL_34;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 120) = base[2];
  boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>>::buffers_prefix_view(
    (boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::asio::const_buffer>&> > > *const)(v3 + 128),
    (const boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::asio::const_buffer>&> > > *)&base[3]);
  v7 = base + 10;
  v8 = *(_BYTE *)(((unsigned __int64)&base[10] >> 3) + 0x7FFF8000);
  if ( v8 && v8 <= 3 )
    goto LABEL_32;
  *(_DWORD *)(v3 + 184) = base[10].func_;
  v7 = (boost::asio::detail::executor_function_base *)((char *)base + 84);
  v9 = *(_BYTE *)((((unsigned __int64)&base[10].func_ + 4) >> 3) + 0x7FFF8000);
  if ( (char)((((_BYTE)base + 84) & 7) + 3) >= v9 && v9 )
    goto LABEL_33;
  *(_DWORD *)(v3 + 188) = HIDWORD(base[10].func_);
  v7 = base + 11;
  if ( *(_WORD *)(((unsigned __int64)&base[11] >> 3) + 0x7FFF8000) )
  {
LABEL_34:
    __asan_report_load16(v7);
    goto LABEL_35;
  }
  *(__m128i *)(v3 + 192) = _mm_loadu_si128((const __m128i *)&base[11]);
  v7 = base + 13;
  if ( *(_BYTE *)(((unsigned __int64)&base[13] >> 3) + 0x7FFF8000) )
  {
LABEL_35:
    __asan_report_load8(v7);
LABEL_36:
    __asan_report_load4(v7);
    goto LABEL_37;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 208) = base[13];
  boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::async_base(
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 216),
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *)&base[14]);
  v7 = base + 43;
  v10 = *(_BYTE *)(((unsigned __int64)&base[43] >> 3) + 0x7FFF8000);
  if ( v10 && v10 <= 3 )
    goto LABEL_36;
  *(_DWORD *)(v3 + 448) = base[43].func_;
  *(_QWORD *)(v3 + 216) = &`vtable for'boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                        + 2;
  v7 = base + 44;
  if ( *(_WORD *)(((unsigned __int64)&base[44] >> 3) + 0x7FFF8000) )
  {
LABEL_37:
    __asan_report_load16(v7);
LABEL_38:
    __asan_report_store8();
    goto LABEL_39;
  }
  *(__m128i *)(v3 + 456) = _mm_loadu_si128((const __m128i *)&base[44]);
  v6 = *(boost::asio::detail::executor_function_base **)(v3 + 64);
  if ( !v6 )
    goto LABEL_17;
  v7 = v6 + 14;
  if ( *(_BYTE *)(((unsigned __int64)&v6[14] >> 3) + 0x7FFF8000) )
    goto LABEL_38;
  v6[14].func_ = (boost::asio::detail::executor_function_base::func_type)(&`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                                                                        + 2);
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)&v6[41]);
  v7 = v6 + 15;
  if ( *(_BYTE *)(((unsigned __int64)&v6[15] >> 3) + 0x7FFF8000) )
  {
LABEL_39:
    __asan_report_store8();
    goto LABEL_40;
  }
  v6[15].func_ = (boost::asio::detail::executor_function_base::func_type)(&`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                                                                        + 2);
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)&v6[15]);
  *(_QWORD *)(v3 + 64) = 0LL;
LABEL_17:
  v6 = *(boost::asio::detail::executor_function_base **)(v3 + 56);
  if ( !v6 )
    goto LABEL_26;
  v11 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v11 )
  {
    v7 = (boost::asio::detail::executor_function_base *)(v11 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v11 + 8) >> 3) + 0x7FFF8000) )
    {
      v11 = *(_QWORD *)(v11 + 8);
      goto LABEL_21;
    }
LABEL_40:
    __asan_report_load8(v7);
    goto LABEL_41;
  }
LABEL_21:
  if ( v11 )
  {
    v7 = (boost::asio::detail::executor_function_base *)(v11 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v11 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v11 + 16) )
        goto LABEL_24;
LABEL_42:
      v15 = *(_BYTE *)(((unsigned __int64)&v6[47] >> 3) + 0x7FFF8000);
      if ( v15 <= (((unsigned __int8)v6 + 120) & 7) && v15 )
      {
        __asan_report_load1(&v6[47]);
      }
      else
      {
        v16 = *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000);
        if ( v16 > ((unsigned __int8)v6 & 7) || !v16 )
        {
          LOBYTE(v6->func_) = v6[47].func_;
          *(_QWORD *)(v11 + 16) = v6;
          goto LABEL_25;
        }
      }
      __asan_report_store1(v6);
      goto LABEL_49;
    }
LABEL_41:
    v11 = __asan_report_load8(v7);
    goto LABEL_42;
  }
LABEL_24:
  operator delete(*(void **)(v3 + 56));
LABEL_25:
  *(_QWORD *)(v3 + 56) = 0LL;
LABEL_26:
  if ( call )
  {
    v12 = *(_QWORD *)(v3 + 456);
    v13 = *(_QWORD *)(v3 + 464);
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::operator()(
      (boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::asio::const_buffer>&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v3 + 112),
      *(boost::system::error_code *)&v12,
      0xFFFFFFFFFFFFFFFFLL,
      0);
  }
LABEL_49:
  *(_QWORD *)(v3 + 216) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v3 + 432));
  *(_QWORD *)(v3 + 224) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                        + 2;
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 224));
  v17 = *(_QWORD *)(v3 + 64);
  if ( !v17 )
    goto LABEL_53;
  v18 = v17 + 112;
  if ( *(_BYTE *)(((unsigned __int64)(v17 + 112) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store8();
    goto LABEL_64;
  }
  *(_QWORD *)(v17 + 112) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v17 + 328));
  v18 = v17 + 120;
  if ( *(_BYTE *)(((unsigned __int64)(v17 + 120) >> 3) + 0x7FFF8000) )
  {
LABEL_64:
    __asan_report_store8();
    goto LABEL_65;
  }
  *(_QWORD *)(v17 + 120) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v17 + 120));
  *(_QWORD *)(v3 + 64) = 0LL;
LABEL_53:
  v4 = *(_QWORD *)(v3 + 56);
  if ( !v4 )
    goto LABEL_61;
  v19 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v19 )
  {
    v18 = v19 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 8) >> 3) + 0x7FFF8000) )
    {
      v19 = *(_QWORD *)(v19 + 8);
      goto LABEL_57;
    }
LABEL_65:
    __asan_report_load8(v18);
LABEL_66:
    v19 = __asan_report_load8(v18);
    goto LABEL_67;
  }
LABEL_57:
  if ( !v19 )
  {
LABEL_60:
    operator delete((void *)v4);
    goto LABEL_61;
  }
  v18 = v19 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v19 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_66;
  if ( *(_QWORD *)(v19 + 16) )
    goto LABEL_60;
LABEL_67:
  v20 = *(_BYTE *)(((v4 + 376) >> 3) + 0x7FFF8000);
  if ( v20 <= (char)((v4 + 120) & 7) && v20 )
  {
    __asan_report_load1(v4 + 376);
    goto LABEL_73;
  }
  v21 = *(_BYTE *)((v4 >> 3) + 0x7FFF8000);
  if ( v21 <= (char)(v4 & 7) && v21 )
  {
LABEL_73:
    v22 = (struct _Unwind_Exception *)__asan_report_store1(v4);
    *(_QWORD *)(v4 - 328) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                          + 2;
    boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v4 - 112));
    *(_QWORD *)(v4 - 320) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                          + 2;
    boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v4 - 320));
    boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::asio::const_buffer>&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > >,boost::system::error_code>,std::allocator<void> >::ptr *const)(v4 - 496));
    __asan_handle_no_return(v4 - 496);
    _Unwind_Resume(v22);
  }
  *(_BYTE *)v4 = *(_BYTE *)(v4 + 376);
  *(_QWORD *)(v19 + 16) = v4;
LABEL_61:
  if ( v23 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = -168430091;
  }
};

// Line 72: range 0000000019CD35FB-0000000019CD3BC5
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v3; // r13
  _DWORD *v4; // r12
  unsigned __int64 v5; // rbp
  boost::asio::detail::executor_function_base *v6; // rdi
  char v7; // al
  char v8; // dl
  char v9; // al
  __int64 v10; // rdi
  __int64 v11; // rax
  __int64 v12; // rsi OVERLAPPED
  __int64 v13; // rdx
  __int64 v14; // rax
  char v15; // dl
  char v16; // dl
  __int64 v17; // rdi
  unsigned __int64 v18; // rbx
  __int64 v19; // rax
  __int64 v20; // rdi
  char v21; // dl
  char v22; // dl
  struct _Unwind_Exception *v23; // rbp
  boost::beast::detail::variant<const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,boost::beast::detail::buffers_cat_view_iterator_base::past_end>::destroy f; // [rsp+18h] [rbp-280h] BYREF
  char v25[632]; // [rsp+20h] [rbp-278h] BYREF

  v3 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v14 = __asan_stack_malloc_4(576LL);
    if ( v14 )
      v3 = v14;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 1 12 allocator:76 64 24 4 p:77 128 376 11 function:85";
  *(_QWORD *)(v3 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::do_complete;
  v4 = (_DWORD *)(v3 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234881024;
  v4[536862723] = -218959118;
  v4[536862735] = -218103808;
  v4[536862736] = -202116109;
  v4[536862737] = -202116109;
  *(_QWORD *)(v3 + 64) = v3 + 48;
  *(_QWORD *)(v3 + 72) = base;
  *(_QWORD *)(v3 + 80) = base;
  v5 = (unsigned __int64)&base[1];
  if ( *(_BYTE *)(((unsigned __int64)&base[1] >> 3) + 0x7FFF8000) )
  {
    v6 = base + 1;
    __asan_report_load8(&base[1]);
    goto LABEL_29;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 128) = base[1];
  v6 = base + 2;
  if ( *(_BYTE *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) )
  {
LABEL_29:
    __asan_report_load8(v6);
LABEL_30:
    __asan_report_load4(v6);
LABEL_31:
    __asan_report_load4(v6);
    goto LABEL_32;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 136) = base[2];
  boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>::buffers_prefix_view(
    (boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > *const)(v3 + 144),
    (const boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > *)&base[3]);
  v6 = base + 12;
  v7 = *(_BYTE *)(((unsigned __int64)&base[12] >> 3) + 0x7FFF8000);
  if ( v7 && v7 <= 3 )
    goto LABEL_30;
  *(_DWORD *)(v3 + 216) = base[12].func_;
  v6 = (boost::asio::detail::executor_function_base *)((char *)base + 100);
  v8 = *(_BYTE *)((((unsigned __int64)&base[12].func_ + 4) >> 3) + 0x7FFF8000);
  if ( (char)((((_BYTE)base + 100) & 7) + 3) >= v8 && v8 )
    goto LABEL_31;
  *(_DWORD *)(v3 + 220) = HIDWORD(base[12].func_);
  v6 = base + 13;
  if ( *(_WORD *)(((unsigned __int64)&base[13] >> 3) + 0x7FFF8000) )
  {
LABEL_32:
    __asan_report_load16(v6);
    goto LABEL_33;
  }
  *(__m128i *)(v3 + 224) = _mm_loadu_si128((const __m128i *)&base[13]);
  v6 = base + 15;
  if ( *(_BYTE *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000) )
  {
LABEL_33:
    __asan_report_load8(v6);
LABEL_34:
    __asan_report_load4(v6);
    goto LABEL_35;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 240) = base[15];
  boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::async_base(
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 248),
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *)&base[16]);
  v6 = base + 45;
  v9 = *(_BYTE *)(((unsigned __int64)&base[45] >> 3) + 0x7FFF8000);
  if ( v9 && v9 <= 3 )
    goto LABEL_34;
  *(_DWORD *)(v3 + 480) = base[45].func_;
  *(_QWORD *)(v3 + 248) = &`vtable for'boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                        + 2;
  v6 = base + 46;
  if ( *(_WORD *)(((unsigned __int64)&base[46] >> 3) + 0x7FFF8000) )
  {
LABEL_35:
    __asan_report_load16(v6);
    goto LABEL_36;
  }
  *(__m128i *)(v3 + 488) = _mm_loadu_si128((const __m128i *)&base[46]);
  v10 = *(_QWORD *)(v3 + 80);
  if ( v10 )
  {
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op((boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v10 + 8));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v5 = *(_QWORD *)(v3 + 72);
  if ( !v5 )
    goto LABEL_24;
  v11 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v11 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v11 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v11 + 8) >> 3) + 0x7FFF8000) )
    {
      v11 = *(_QWORD *)(v11 + 8);
      goto LABEL_19;
    }
LABEL_36:
    __asan_report_load8(v6);
    goto LABEL_37;
  }
LABEL_19:
  if ( v11 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v11 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v11 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v11 + 16) )
        goto LABEL_22;
LABEL_38:
      v15 = *(_BYTE *)(((v5 + 392) >> 3) + 0x7FFF8000);
      if ( v15 <= (char)((v5 - 120) & 7) && v15 )
      {
        __asan_report_load1(v5 + 392);
      }
      else
      {
        v16 = *(_BYTE *)((v5 >> 3) + 0x7FFF8000);
        if ( v16 > (char)(v5 & 7) || !v16 )
        {
          *(_BYTE *)v5 = *(_BYTE *)(v5 + 392);
          *(_QWORD *)(v11 + 16) = v5;
          goto LABEL_23;
        }
      }
      __asan_report_store1(v5);
      goto LABEL_45;
    }
LABEL_37:
    v11 = __asan_report_load8(v6);
    goto LABEL_38;
  }
LABEL_22:
  operator delete(*(void **)(v3 + 72));
LABEL_23:
  *(_QWORD *)(v3 + 72) = 0LL;
LABEL_24:
  if ( call )
  {
    v12 = *(_QWORD *)(v3 + 488);
    v13 = *(_QWORD *)(v3 + 496);
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::operator()(
      (boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v3 + 128),
      *(boost::system::error_code *)&v12,
      0xFFFFFFFFFFFFFFFFLL,
      0);
  }
LABEL_45:
  *(_QWORD *)(v3 + 248) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v3 + 464));
  *(_QWORD *)(v3 + 256) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                        + 2;
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 256));
  f.self = (boost::beast::detail::variant<const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,boost::beast::detail::buffers_cat_view_iterator_base::past_end> *)(v3 + 192);
  boost::mp11::mp_with_index<5ul,boost::beast::detail::variant<boost::asio::const_buffer const*,boost::asio::const_buffer const*,boost::asio::const_buffer const*,boost::beast::detail::buffers_cat_view_iterator_base::past_end>::destroy>(
    *(unsigned __int8 *)(v3 + 200),
    &f);
  v17 = *(_QWORD *)(v3 + 80);
  if ( v17 )
  {
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op((boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v17 + 8));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v18 = *(_QWORD *)(v3 + 72);
  if ( v18 )
  {
    v19 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v19 )
    {
      v20 = v19 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v19 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v20);
        goto LABEL_58;
      }
      v19 = *(_QWORD *)(v19 + 8);
    }
    if ( !v19 )
    {
LABEL_54:
      operator delete((void *)v18);
      goto LABEL_55;
    }
    v20 = v19 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v19 + 16) )
        goto LABEL_54;
LABEL_59:
      v21 = *(_BYTE *)(((v18 + 392) >> 3) + 0x7FFF8000);
      if ( v21 <= (char)((v18 - 120) & 7) && v21 )
      {
        __asan_report_load1(v18 + 392);
      }
      else
      {
        v22 = *(_BYTE *)((v18 >> 3) + 0x7FFF8000);
        if ( v22 > (char)(v18 & 7) || !v22 )
        {
          *(_BYTE *)v18 = *(_BYTE *)(v18 + 392);
          *(_QWORD *)(v19 + 16) = v18;
          goto LABEL_55;
        }
      }
      v23 = (struct _Unwind_Exception *)__asan_report_store1(v18);
      boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op((boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v18 - 448));
      boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > >,boost::system::error_code>,std::allocator<void> >::ptr *const)(v18 - 512));
      __asan_handle_no_return(v18 - 512);
      _Unwind_Resume(v23);
    }
LABEL_58:
    v19 = __asan_report_load8(v20);
    goto LABEL_59;
  }
LABEL_55:
  if ( v25 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 72: range 0000000019C95B61-0000000019C96134
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v3; // r13
  _DWORD *v4; // r12
  unsigned __int64 v5; // rbp
  boost::asio::detail::executor_function_base *v6; // rdi
  char v7; // al
  char v8; // dl
  char v9; // al
  __int64 v10; // rdi
  __int64 v11; // rax
  __int64 v12; // rsi OVERLAPPED
  __int64 v13; // rdx
  __int64 v14; // rax
  char v15; // dl
  char v16; // dl
  __int64 v17; // rdi
  unsigned __int64 v18; // rbx
  __int64 v19; // rax
  __int64 v20; // rdi
  char v21; // dl
  char v22; // dl
  struct _Unwind_Exception *v23; // rbp
  boost::beast::detail::variant<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf>::const_iterator,const boost::asio::const_buffer*,boost::beast::detail::buffers_cat_view_iterator_base::past_end>::destroy f; // [rsp+18h] [rbp-280h] BYREF
  char v25[632]; // [rsp+20h] [rbp-278h] BYREF

  v3 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v14 = __asan_stack_malloc_4(576LL);
    if ( v14 )
      v3 = v14;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 392 11 function:85";
  *(_QWORD *)(v3 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::do_complete;
  v4 = (_DWORD *)(v3 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61953;
  v4[536862722] = -218959360;
  v4[536862723] = 62194;
  v4[536862735] = -218103808;
  v4[536862736] = -202116109;
  v4[536862737] = -202116109;
  *(_QWORD *)(v3 + 48) = v3 + 32;
  *(_QWORD *)(v3 + 56) = base;
  *(_QWORD *)(v3 + 64) = base;
  v5 = (unsigned __int64)&base[1];
  if ( *(_BYTE *)(((unsigned __int64)&base[1] >> 3) + 0x7FFF8000) )
  {
    v6 = base + 1;
    __asan_report_load8(&base[1]);
    goto LABEL_29;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 112) = base[1];
  v6 = base + 2;
  if ( *(_BYTE *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) )
  {
LABEL_29:
    __asan_report_load8(v6);
LABEL_30:
    __asan_report_load4(v6);
LABEL_31:
    __asan_report_load4(v6);
    goto LABEL_32;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 120) = base[2];
  boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>>::buffers_prefix_view(
    (boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::asio::const_buffer> >&> > > *const)(v3 + 128),
    (const boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::asio::const_buffer> >&> > > *)&base[3]);
  v6 = base + 14;
  v7 = *(_BYTE *)(((unsigned __int64)&base[14] >> 3) + 0x7FFF8000);
  if ( v7 && v7 <= 3 )
    goto LABEL_30;
  *(_DWORD *)(v3 + 216) = base[14].func_;
  v6 = (boost::asio::detail::executor_function_base *)((char *)base + 116);
  v8 = *(_BYTE *)((((unsigned __int64)&base[14].func_ + 4) >> 3) + 0x7FFF8000);
  if ( (char)((((_BYTE)base + 116) & 7) + 3) >= v8 && v8 )
    goto LABEL_31;
  *(_DWORD *)(v3 + 220) = HIDWORD(base[14].func_);
  v6 = base + 15;
  if ( *(_WORD *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000) )
  {
LABEL_32:
    __asan_report_load16(v6);
    goto LABEL_33;
  }
  *(__m128i *)(v3 + 224) = _mm_loadu_si128((const __m128i *)&base[15]);
  v6 = base + 17;
  if ( *(_BYTE *)(((unsigned __int64)&base[17] >> 3) + 0x7FFF8000) )
  {
LABEL_33:
    __asan_report_load8(v6);
LABEL_34:
    __asan_report_load4(v6);
    goto LABEL_35;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 240) = base[17];
  boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::async_base(
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 248),
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *)&base[18]);
  v6 = base + 47;
  v9 = *(_BYTE *)(((unsigned __int64)&base[47] >> 3) + 0x7FFF8000);
  if ( v9 && v9 <= 3 )
    goto LABEL_34;
  *(_DWORD *)(v3 + 480) = base[47].func_;
  *(_QWORD *)(v3 + 248) = &`vtable for'boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                        + 2;
  v6 = base + 48;
  if ( *(_WORD *)(((unsigned __int64)&base[48] >> 3) + 0x7FFF8000) )
  {
LABEL_35:
    __asan_report_load16(v6);
    goto LABEL_36;
  }
  *(__m128i *)(v3 + 488) = _mm_loadu_si128((const __m128i *)&base[48]);
  v10 = *(_QWORD *)(v3 + 64);
  if ( v10 )
  {
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op((boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::asio::const_buffer> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v10 + 8));
    *(_QWORD *)(v3 + 64) = 0LL;
  }
  v5 = *(_QWORD *)(v3 + 56);
  if ( !v5 )
    goto LABEL_24;
  v11 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v11 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v11 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v11 + 8) >> 3) + 0x7FFF8000) )
    {
      v11 = *(_QWORD *)(v11 + 8);
      goto LABEL_19;
    }
LABEL_36:
    __asan_report_load8(v6);
    goto LABEL_37;
  }
LABEL_19:
  if ( v11 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v11 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v11 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v11 + 16) )
        goto LABEL_22;
LABEL_38:
      v15 = *(_BYTE *)(((v5 + 408) >> 3) + 0x7FFF8000);
      if ( v15 <= (char)((v5 - 104) & 7) && v15 )
      {
        __asan_report_load1(v5 + 408);
      }
      else
      {
        v16 = *(_BYTE *)((v5 >> 3) + 0x7FFF8000);
        if ( v16 > (char)(v5 & 7) || !v16 )
        {
          *(_BYTE *)v5 = *(_BYTE *)(v5 + 408);
          *(_QWORD *)(v11 + 16) = v5;
          goto LABEL_23;
        }
      }
      __asan_report_store1(v5);
      goto LABEL_45;
    }
LABEL_37:
    v11 = __asan_report_load8(v6);
    goto LABEL_38;
  }
LABEL_22:
  operator delete(*(void **)(v3 + 56));
LABEL_23:
  *(_QWORD *)(v3 + 56) = 0LL;
LABEL_24:
  if ( call )
  {
    v12 = *(_QWORD *)(v3 + 488);
    v13 = *(_QWORD *)(v3 + 496);
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::operator()(
      (boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::asio::const_buffer> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v3 + 112),
      *(boost::system::error_code *)&v12,
      0xFFFFFFFFFFFFFFFFLL,
      0);
  }
LABEL_45:
  *(_QWORD *)(v3 + 248) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v3 + 464));
  *(_QWORD *)(v3 + 256) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                        + 2;
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 256));
  f.self = (boost::beast::detail::variant<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf>::const_iterator,const boost::asio::const_buffer*,boost::beast::detail::buffers_cat_view_iterator_base::past_end> *)(v3 + 176);
  boost::mp11::mp_with_index<4ul,boost::beast::detail::variant<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>::const_iterator,boost::asio::const_buffer const*,boost::beast::detail::buffers_cat_view_iterator_base::past_end>::destroy>(
    *(unsigned __int8 *)(v3 + 200),
    &f);
  v17 = *(_QWORD *)(v3 + 64);
  if ( v17 )
  {
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op((boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::asio::const_buffer> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v17 + 8));
    *(_QWORD *)(v3 + 64) = 0LL;
  }
  v18 = *(_QWORD *)(v3 + 56);
  if ( v18 )
  {
    v19 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v19 )
    {
      v20 = v19 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v19 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v20);
        goto LABEL_58;
      }
      v19 = *(_QWORD *)(v19 + 8);
    }
    if ( !v19 )
    {
LABEL_54:
      operator delete((void *)v18);
      goto LABEL_55;
    }
    v20 = v19 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v19 + 16) )
        goto LABEL_54;
LABEL_59:
      v21 = *(_BYTE *)(((v18 + 408) >> 3) + 0x7FFF8000);
      if ( v21 <= (char)((v18 - 104) & 7) && v21 )
      {
        __asan_report_load1(v18 + 408);
      }
      else
      {
        v22 = *(_BYTE *)((v18 >> 3) + 0x7FFF8000);
        if ( v22 > (char)(v18 & 7) || !v22 )
        {
          *(_BYTE *)v18 = *(_BYTE *)(v18 + 408);
          *(_QWORD *)(v19 + 16) = v18;
          goto LABEL_55;
        }
      }
      v23 = (struct _Unwind_Exception *)__asan_report_store1(v18);
      boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op((boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::asio::const_buffer> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v18 - 464));
      boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::asio::const_buffer> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > >,boost::system::error_code>,std::allocator<void> >::ptr *const)(v18 - 528));
      __asan_handle_no_return(v18 - 528);
      _Unwind_Resume(v23);
    }
LABEL_58:
    v19 = __asan_report_load8(v20);
    goto LABEL_59;
  }
LABEL_55:
  if ( v25 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 72: range 0000000019CCC4B3-0000000019CCCA86
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v3; // r13
  _DWORD *v4; // r12
  unsigned __int64 v5; // rbp
  boost::asio::detail::executor_function_base *v6; // rdi
  char v7; // al
  char v8; // dl
  char v9; // al
  __int64 v10; // rdi
  __int64 v11; // rax
  __int64 v12; // rsi OVERLAPPED
  __int64 v13; // rdx
  __int64 v14; // rax
  char v15; // dl
  char v16; // dl
  __int64 v17; // rdi
  unsigned __int64 v18; // rbx
  __int64 v19; // rax
  __int64 v20; // rdi
  char v21; // dl
  char v22; // dl
  struct _Unwind_Exception *v23; // rbp
  boost::beast::detail::variant<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf>::const_iterator,const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,boost::beast::detail::buffers_cat_view_iterator_base::past_end>::destroy f; // [rsp+18h] [rbp-280h] BYREF
  char v25[632]; // [rsp+20h] [rbp-278h] BYREF

  v3 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v14 = __asan_stack_malloc_4(576LL);
    if ( v14 )
      v3 = v14;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 392 11 function:85";
  *(_QWORD *)(v3 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::do_complete;
  v4 = (_DWORD *)(v3 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61953;
  v4[536862722] = -218959360;
  v4[536862723] = 62194;
  v4[536862735] = -218103808;
  v4[536862736] = -202116109;
  v4[536862737] = -202116109;
  *(_QWORD *)(v3 + 48) = v3 + 32;
  *(_QWORD *)(v3 + 56) = base;
  *(_QWORD *)(v3 + 64) = base;
  v5 = (unsigned __int64)&base[1];
  if ( *(_BYTE *)(((unsigned __int64)&base[1] >> 3) + 0x7FFF8000) )
  {
    v6 = base + 1;
    __asan_report_load8(&base[1]);
    goto LABEL_29;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 112) = base[1];
  v6 = base + 2;
  if ( *(_BYTE *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) )
  {
LABEL_29:
    __asan_report_load8(v6);
LABEL_30:
    __asan_report_load4(v6);
LABEL_31:
    __asan_report_load4(v6);
    goto LABEL_32;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 120) = base[2];
  boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>::buffers_prefix_view(
    (boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > *const)(v3 + 128),
    (const boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > *)&base[3]);
  v6 = base + 14;
  v7 = *(_BYTE *)(((unsigned __int64)&base[14] >> 3) + 0x7FFF8000);
  if ( v7 && v7 <= 3 )
    goto LABEL_30;
  *(_DWORD *)(v3 + 216) = base[14].func_;
  v6 = (boost::asio::detail::executor_function_base *)((char *)base + 116);
  v8 = *(_BYTE *)((((unsigned __int64)&base[14].func_ + 4) >> 3) + 0x7FFF8000);
  if ( (char)((((_BYTE)base + 116) & 7) + 3) >= v8 && v8 )
    goto LABEL_31;
  *(_DWORD *)(v3 + 220) = HIDWORD(base[14].func_);
  v6 = base + 15;
  if ( *(_WORD *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000) )
  {
LABEL_32:
    __asan_report_load16(v6);
    goto LABEL_33;
  }
  *(__m128i *)(v3 + 224) = _mm_loadu_si128((const __m128i *)&base[15]);
  v6 = base + 17;
  if ( *(_BYTE *)(((unsigned __int64)&base[17] >> 3) + 0x7FFF8000) )
  {
LABEL_33:
    __asan_report_load8(v6);
LABEL_34:
    __asan_report_load4(v6);
    goto LABEL_35;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 240) = base[17];
  boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::async_base(
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 248),
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *)&base[18]);
  v6 = base + 47;
  v9 = *(_BYTE *)(((unsigned __int64)&base[47] >> 3) + 0x7FFF8000);
  if ( v9 && v9 <= 3 )
    goto LABEL_34;
  *(_DWORD *)(v3 + 480) = base[47].func_;
  *(_QWORD *)(v3 + 248) = &`vtable for'boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                        + 2;
  v6 = base + 48;
  if ( *(_WORD *)(((unsigned __int64)&base[48] >> 3) + 0x7FFF8000) )
  {
LABEL_35:
    __asan_report_load16(v6);
    goto LABEL_36;
  }
  *(__m128i *)(v3 + 488) = _mm_loadu_si128((const __m128i *)&base[48]);
  v10 = *(_QWORD *)(v3 + 64);
  if ( v10 )
  {
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op((boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v10 + 8));
    *(_QWORD *)(v3 + 64) = 0LL;
  }
  v5 = *(_QWORD *)(v3 + 56);
  if ( !v5 )
    goto LABEL_24;
  v11 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v11 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v11 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v11 + 8) >> 3) + 0x7FFF8000) )
    {
      v11 = *(_QWORD *)(v11 + 8);
      goto LABEL_19;
    }
LABEL_36:
    __asan_report_load8(v6);
    goto LABEL_37;
  }
LABEL_19:
  if ( v11 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v11 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v11 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v11 + 16) )
        goto LABEL_22;
LABEL_38:
      v15 = *(_BYTE *)(((v5 + 408) >> 3) + 0x7FFF8000);
      if ( v15 <= (char)((v5 - 104) & 7) && v15 )
      {
        __asan_report_load1(v5 + 408);
      }
      else
      {
        v16 = *(_BYTE *)((v5 >> 3) + 0x7FFF8000);
        if ( v16 > (char)(v5 & 7) || !v16 )
        {
          *(_BYTE *)v5 = *(_BYTE *)(v5 + 408);
          *(_QWORD *)(v11 + 16) = v5;
          goto LABEL_23;
        }
      }
      __asan_report_store1(v5);
      goto LABEL_45;
    }
LABEL_37:
    v11 = __asan_report_load8(v6);
    goto LABEL_38;
  }
LABEL_22:
  operator delete(*(void **)(v3 + 56));
LABEL_23:
  *(_QWORD *)(v3 + 56) = 0LL;
LABEL_24:
  if ( call )
  {
    v12 = *(_QWORD *)(v3 + 488);
    v13 = *(_QWORD *)(v3 + 496);
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::operator()(
      (boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v3 + 112),
      *(boost::system::error_code *)&v12,
      0xFFFFFFFFFFFFFFFFLL,
      0);
  }
LABEL_45:
  *(_QWORD *)(v3 + 248) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v3 + 464));
  *(_QWORD *)(v3 + 256) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                        + 2;
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 256));
  f.self = (boost::beast::detail::variant<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf>::const_iterator,const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,boost::beast::detail::buffers_cat_view_iterator_base::past_end> *)(v3 + 176);
  boost::mp11::mp_with_index<11ul,boost::beast::detail::variant<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>::const_iterator,boost::asio::const_buffer const*,boost::asio::const_buffer const*,boost::asio::const_buffer const*,boost::asio::const_buffer const*,boost::asio::const_buffer const*,boost::asio::const_buffer const*,boost::asio::const_buffer const*,boost::asio::const_buffer const*,boost::beast::detail::buffers_cat_view_iterator_base::past_end>::destroy>(
    *(unsigned __int8 *)(v3 + 200),
    &f);
  v17 = *(_QWORD *)(v3 + 64);
  if ( v17 )
  {
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op((boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v17 + 8));
    *(_QWORD *)(v3 + 64) = 0LL;
  }
  v18 = *(_QWORD *)(v3 + 56);
  if ( v18 )
  {
    v19 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v19 )
    {
      v20 = v19 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v19 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v20);
        goto LABEL_58;
      }
      v19 = *(_QWORD *)(v19 + 8);
    }
    if ( !v19 )
    {
LABEL_54:
      operator delete((void *)v18);
      goto LABEL_55;
    }
    v20 = v19 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v19 + 16) )
        goto LABEL_54;
LABEL_59:
      v21 = *(_BYTE *)(((v18 + 408) >> 3) + 0x7FFF8000);
      if ( v21 <= (char)((v18 - 104) & 7) && v21 )
      {
        __asan_report_load1(v18 + 408);
      }
      else
      {
        v22 = *(_BYTE *)((v18 >> 3) + 0x7FFF8000);
        if ( v22 > (char)(v18 & 7) || !v22 )
        {
          *(_BYTE *)v18 = *(_BYTE *)(v18 + 408);
          *(_QWORD *)(v19 + 16) = v18;
          goto LABEL_55;
        }
      }
      v23 = (struct _Unwind_Exception *)__asan_report_store1(v18);
      boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op((boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v18 - 464));
      boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > >,boost::system::error_code>,std::allocator<void> >::ptr *const)(v18 - 528));
      __asan_handle_no_return(v18 - 528);
      _Unwind_Resume(v23);
    }
LABEL_58:
    v19 = __asan_report_load8(v20);
    goto LABEL_59;
  }
LABEL_55:
  if ( v25 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 72: range 0000000019CA8371-0000000019CA8944
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v3; // r13
  _DWORD *v4; // r12
  unsigned __int64 v5; // rbp
  boost::asio::detail::executor_function_base *v6; // rdi
  char v7; // al
  char v8; // dl
  char v9; // al
  __int64 v10; // rdi
  __int64 v11; // rax
  __int64 v12; // rsi OVERLAPPED
  __int64 v13; // rdx
  __int64 v14; // rax
  char v15; // dl
  char v16; // dl
  __int64 v17; // rdi
  unsigned __int64 v18; // rbx
  __int64 v19; // rax
  __int64 v20; // rdi
  char v21; // dl
  char v22; // dl
  struct _Unwind_Exception *v23; // rbp
  boost::beast::detail::variant<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf>::const_iterator,const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,boost::beast::detail::buffers_cat_view_iterator_base::past_end>::destroy f; // [rsp+18h] [rbp-280h] BYREF
  char v25[632]; // [rsp+20h] [rbp-278h] BYREF

  v3 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v14 = __asan_stack_malloc_4(576LL);
    if ( v14 )
      v3 = v14;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 392 11 function:85";
  *(_QWORD *)(v3 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::do_complete;
  v4 = (_DWORD *)(v3 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61953;
  v4[536862722] = -218959360;
  v4[536862723] = 62194;
  v4[536862735] = -218103808;
  v4[536862736] = -202116109;
  v4[536862737] = -202116109;
  *(_QWORD *)(v3 + 48) = v3 + 32;
  *(_QWORD *)(v3 + 56) = base;
  *(_QWORD *)(v3 + 64) = base;
  v5 = (unsigned __int64)&base[1];
  if ( *(_BYTE *)(((unsigned __int64)&base[1] >> 3) + 0x7FFF8000) )
  {
    v6 = base + 1;
    __asan_report_load8(&base[1]);
    goto LABEL_29;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 112) = base[1];
  v6 = base + 2;
  if ( *(_BYTE *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) )
  {
LABEL_29:
    __asan_report_load8(v6);
LABEL_30:
    __asan_report_load4(v6);
LABEL_31:
    __asan_report_load4(v6);
    goto LABEL_32;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 120) = base[2];
  boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>::buffers_prefix_view(
    (boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > *const)(v3 + 128),
    (const boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > *)&base[3]);
  v6 = base + 14;
  v7 = *(_BYTE *)(((unsigned __int64)&base[14] >> 3) + 0x7FFF8000);
  if ( v7 && v7 <= 3 )
    goto LABEL_30;
  *(_DWORD *)(v3 + 216) = base[14].func_;
  v6 = (boost::asio::detail::executor_function_base *)((char *)base + 116);
  v8 = *(_BYTE *)((((unsigned __int64)&base[14].func_ + 4) >> 3) + 0x7FFF8000);
  if ( (char)((((_BYTE)base + 116) & 7) + 3) >= v8 && v8 )
    goto LABEL_31;
  *(_DWORD *)(v3 + 220) = HIDWORD(base[14].func_);
  v6 = base + 15;
  if ( *(_WORD *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000) )
  {
LABEL_32:
    __asan_report_load16(v6);
    goto LABEL_33;
  }
  *(__m128i *)(v3 + 224) = _mm_loadu_si128((const __m128i *)&base[15]);
  v6 = base + 17;
  if ( *(_BYTE *)(((unsigned __int64)&base[17] >> 3) + 0x7FFF8000) )
  {
LABEL_33:
    __asan_report_load8(v6);
LABEL_34:
    __asan_report_load4(v6);
    goto LABEL_35;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 240) = base[17];
  boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::async_base(
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 248),
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *)&base[18]);
  v6 = base + 47;
  v9 = *(_BYTE *)(((unsigned __int64)&base[47] >> 3) + 0x7FFF8000);
  if ( v9 && v9 <= 3 )
    goto LABEL_34;
  *(_DWORD *)(v3 + 480) = base[47].func_;
  *(_QWORD *)(v3 + 248) = &`vtable for'boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                        + 2;
  v6 = base + 48;
  if ( *(_WORD *)(((unsigned __int64)&base[48] >> 3) + 0x7FFF8000) )
  {
LABEL_35:
    __asan_report_load16(v6);
    goto LABEL_36;
  }
  *(__m128i *)(v3 + 488) = _mm_loadu_si128((const __m128i *)&base[48]);
  v10 = *(_QWORD *)(v3 + 64);
  if ( v10 )
  {
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op((boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v10 + 8));
    *(_QWORD *)(v3 + 64) = 0LL;
  }
  v5 = *(_QWORD *)(v3 + 56);
  if ( !v5 )
    goto LABEL_24;
  v11 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v11 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v11 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v11 + 8) >> 3) + 0x7FFF8000) )
    {
      v11 = *(_QWORD *)(v11 + 8);
      goto LABEL_19;
    }
LABEL_36:
    __asan_report_load8(v6);
    goto LABEL_37;
  }
LABEL_19:
  if ( v11 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v11 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v11 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v11 + 16) )
        goto LABEL_22;
LABEL_38:
      v15 = *(_BYTE *)(((v5 + 408) >> 3) + 0x7FFF8000);
      if ( v15 <= (char)((v5 - 104) & 7) && v15 )
      {
        __asan_report_load1(v5 + 408);
      }
      else
      {
        v16 = *(_BYTE *)((v5 >> 3) + 0x7FFF8000);
        if ( v16 > (char)(v5 & 7) || !v16 )
        {
          *(_BYTE *)v5 = *(_BYTE *)(v5 + 408);
          *(_QWORD *)(v11 + 16) = v5;
          goto LABEL_23;
        }
      }
      __asan_report_store1(v5);
      goto LABEL_45;
    }
LABEL_37:
    v11 = __asan_report_load8(v6);
    goto LABEL_38;
  }
LABEL_22:
  operator delete(*(void **)(v3 + 56));
LABEL_23:
  *(_QWORD *)(v3 + 56) = 0LL;
LABEL_24:
  if ( call )
  {
    v12 = *(_QWORD *)(v3 + 488);
    v13 = *(_QWORD *)(v3 + 496);
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::operator()(
      (boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v3 + 112),
      *(boost::system::error_code *)&v12,
      0xFFFFFFFFFFFFFFFFLL,
      0);
  }
LABEL_45:
  *(_QWORD *)(v3 + 248) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v3 + 464));
  *(_QWORD *)(v3 + 256) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                        + 2;
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 256));
  f.self = (boost::beast::detail::variant<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf>::const_iterator,const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,boost::beast::detail::buffers_cat_view_iterator_base::past_end> *)(v3 + 176);
  boost::mp11::mp_with_index<8ul,boost::beast::detail::variant<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>::const_iterator,boost::asio::const_buffer const*,boost::asio::const_buffer const*,boost::asio::const_buffer const*,boost::asio::const_buffer const*,boost::asio::const_buffer const*,boost::beast::detail::buffers_cat_view_iterator_base::past_end>::destroy>(
    *(unsigned __int8 *)(v3 + 200),
    &f);
  v17 = *(_QWORD *)(v3 + 64);
  if ( v17 )
  {
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op((boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v17 + 8));
    *(_QWORD *)(v3 + 64) = 0LL;
  }
  v18 = *(_QWORD *)(v3 + 56);
  if ( v18 )
  {
    v19 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v19 )
    {
      v20 = v19 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v19 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v20);
        goto LABEL_58;
      }
      v19 = *(_QWORD *)(v19 + 8);
    }
    if ( !v19 )
    {
LABEL_54:
      operator delete((void *)v18);
      goto LABEL_55;
    }
    v20 = v19 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v19 + 16) )
        goto LABEL_54;
LABEL_59:
      v21 = *(_BYTE *)(((v18 + 408) >> 3) + 0x7FFF8000);
      if ( v21 <= (char)((v18 - 104) & 7) && v21 )
      {
        __asan_report_load1(v18 + 408);
      }
      else
      {
        v22 = *(_BYTE *)((v18 >> 3) + 0x7FFF8000);
        if ( v22 > (char)(v18 & 7) || !v22 )
        {
          *(_BYTE *)v18 = *(_BYTE *)(v18 + 408);
          *(_QWORD *)(v19 + 16) = v18;
          goto LABEL_55;
        }
      }
      v23 = (struct _Unwind_Exception *)__asan_report_store1(v18);
      boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op((boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v18 - 464));
      boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > >,boost::system::error_code>,std::allocator<void> >::ptr *const)(v18 - 528));
      __asan_handle_no_return(v18 - 528);
      _Unwind_Resume(v23);
    }
LABEL_58:
    v19 = __asan_report_load8(v20);
    goto LABEL_59;
  }
LABEL_55:
  if ( v25 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 72: range 0000000019CC312D-0000000019CC36AD
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v3; // r13
  _DWORD *v4; // r12
  unsigned __int64 v5; // rbp
  boost::asio::detail::executor_function_base *v6; // rdi
  char v7; // al
  char v8; // dl
  char v9; // al
  __int64 v10; // rdi
  __int64 v11; // rax
  __int64 v12; // rsi OVERLAPPED
  __int64 v13; // rdx
  __int64 v14; // rax
  char v15; // dl
  char v16; // dl
  __int64 v17; // rdi
  unsigned __int64 v18; // rbx
  __int64 v19; // rax
  __int64 v20; // rdi
  char v21; // dl
  char v22; // dl
  struct _Unwind_Exception *v23; // rbp
  char v24[632]; // [rsp+10h] [rbp-278h] BYREF

  v3 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v14 = __asan_stack_malloc_4(576LL);
    if ( v14 )
      v3 = v14;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 1 12 allocator:76 64 24 4 p:77 128 376 11 function:85";
  *(_QWORD *)(v3 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::do_complete;
  v4 = (_DWORD *)(v3 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234881024;
  v4[536862723] = -218959118;
  v4[536862735] = -218103808;
  v4[536862736] = -202116109;
  v4[536862737] = -202116109;
  *(_QWORD *)(v3 + 64) = v3 + 48;
  *(_QWORD *)(v3 + 72) = base;
  *(_QWORD *)(v3 + 80) = base;
  v5 = (unsigned __int64)&base[1];
  if ( *(_BYTE *)(((unsigned __int64)&base[1] >> 3) + 0x7FFF8000) )
  {
    v6 = base + 1;
    __asan_report_load8(&base[1]);
    goto LABEL_29;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 128) = base[1];
  v6 = base + 2;
  if ( *(_BYTE *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) )
  {
LABEL_29:
    __asan_report_load8(v6);
LABEL_30:
    __asan_report_load4(v6);
LABEL_31:
    __asan_report_load4(v6);
    goto LABEL_32;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 136) = base[2];
  boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>::buffers_prefix_view(
    (boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > *const)(v3 + 144),
    (const boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > *)&base[3]);
  v6 = base + 12;
  v7 = *(_BYTE *)(((unsigned __int64)&base[12] >> 3) + 0x7FFF8000);
  if ( v7 && v7 <= 3 )
    goto LABEL_30;
  *(_DWORD *)(v3 + 216) = base[12].func_;
  v6 = (boost::asio::detail::executor_function_base *)((char *)base + 100);
  v8 = *(_BYTE *)((((unsigned __int64)&base[12].func_ + 4) >> 3) + 0x7FFF8000);
  if ( (char)((((_BYTE)base + 100) & 7) + 3) >= v8 && v8 )
    goto LABEL_31;
  *(_DWORD *)(v3 + 220) = HIDWORD(base[12].func_);
  v6 = base + 13;
  if ( *(_WORD *)(((unsigned __int64)&base[13] >> 3) + 0x7FFF8000) )
  {
LABEL_32:
    __asan_report_load16(v6);
    goto LABEL_33;
  }
  *(__m128i *)(v3 + 224) = _mm_loadu_si128((const __m128i *)&base[13]);
  v6 = base + 15;
  if ( *(_BYTE *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000) )
  {
LABEL_33:
    __asan_report_load8(v6);
LABEL_34:
    __asan_report_load4(v6);
    goto LABEL_35;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 240) = base[15];
  boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::async_base(
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 248),
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *)&base[16]);
  v6 = base + 45;
  v9 = *(_BYTE *)(((unsigned __int64)&base[45] >> 3) + 0x7FFF8000);
  if ( v9 && v9 <= 3 )
    goto LABEL_34;
  *(_DWORD *)(v3 + 480) = base[45].func_;
  *(_QWORD *)(v3 + 248) = &`vtable for'boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                        + 2;
  v6 = base + 46;
  if ( *(_WORD *)(((unsigned __int64)&base[46] >> 3) + 0x7FFF8000) )
  {
LABEL_35:
    __asan_report_load16(v6);
    goto LABEL_36;
  }
  *(__m128i *)(v3 + 488) = _mm_loadu_si128((const __m128i *)&base[46]);
  v10 = *(_QWORD *)(v3 + 80);
  if ( v10 )
  {
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op((boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v10 + 8));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v5 = *(_QWORD *)(v3 + 72);
  if ( !v5 )
    goto LABEL_24;
  v11 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v11 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v11 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v11 + 8) >> 3) + 0x7FFF8000) )
    {
      v11 = *(_QWORD *)(v11 + 8);
      goto LABEL_19;
    }
LABEL_36:
    __asan_report_load8(v6);
    goto LABEL_37;
  }
LABEL_19:
  if ( v11 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v11 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v11 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v11 + 16) )
        goto LABEL_22;
LABEL_38:
      v15 = *(_BYTE *)(((v5 + 392) >> 3) + 0x7FFF8000);
      if ( v15 <= (char)((v5 - 120) & 7) && v15 )
      {
        __asan_report_load1(v5 + 392);
      }
      else
      {
        v16 = *(_BYTE *)((v5 >> 3) + 0x7FFF8000);
        if ( v16 > (char)(v5 & 7) || !v16 )
        {
          *(_BYTE *)v5 = *(_BYTE *)(v5 + 392);
          *(_QWORD *)(v11 + 16) = v5;
          goto LABEL_23;
        }
      }
      __asan_report_store1(v5);
      goto LABEL_45;
    }
LABEL_37:
    v11 = __asan_report_load8(v6);
    goto LABEL_38;
  }
LABEL_22:
  operator delete(*(void **)(v3 + 72));
LABEL_23:
  *(_QWORD *)(v3 + 72) = 0LL;
LABEL_24:
  if ( call )
  {
    v12 = *(_QWORD *)(v3 + 488);
    v13 = *(_QWORD *)(v3 + 496);
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::operator()(
      (boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v3 + 128),
      *(boost::system::error_code *)&v12,
      0xFFFFFFFFFFFFFFFFLL,
      0);
  }
LABEL_45:
  boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op((boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v3 + 128));
  v17 = *(_QWORD *)(v3 + 80);
  if ( v17 )
  {
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op((boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v17 + 8));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v18 = *(_QWORD *)(v3 + 72);
  if ( v18 )
  {
    v19 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v19 )
    {
      v20 = v19 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v19 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v20);
        goto LABEL_58;
      }
      v19 = *(_QWORD *)(v19 + 8);
    }
    if ( !v19 )
    {
LABEL_54:
      operator delete((void *)v18);
      goto LABEL_55;
    }
    v20 = v19 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v19 + 16) )
        goto LABEL_54;
LABEL_59:
      v21 = *(_BYTE *)(((v18 + 392) >> 3) + 0x7FFF8000);
      if ( v21 <= (char)((v18 - 120) & 7) && v21 )
      {
        __asan_report_load1(v18 + 392);
      }
      else
      {
        v22 = *(_BYTE *)((v18 >> 3) + 0x7FFF8000);
        if ( v22 > (char)(v18 & 7) || !v22 )
        {
          *(_BYTE *)v18 = *(_BYTE *)(v18 + 392);
          *(_QWORD *)(v19 + 16) = v18;
          goto LABEL_55;
        }
      }
      v23 = (struct _Unwind_Exception *)__asan_report_store1(v18);
      boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op((boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v18 - 448));
      boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > >,boost::system::error_code>,std::allocator<void> >::ptr *const)(v18 - 512));
      __asan_handle_no_return(v18 - 512);
      _Unwind_Resume(v23);
    }
LABEL_58:
    v19 = __asan_report_load8(v20);
    goto LABEL_59;
  }
LABEL_55:
  if ( v24 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 72: range 0000000019CBA27B-0000000019CBA845
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v3; // r13
  _DWORD *v4; // r12
  unsigned __int64 v5; // rbp
  boost::asio::detail::executor_function_base *v6; // rdi
  char v7; // al
  char v8; // dl
  char v9; // al
  __int64 v10; // rdi
  __int64 v11; // rax
  __int64 v12; // rsi OVERLAPPED
  __int64 v13; // rdx
  __int64 v14; // rax
  char v15; // dl
  char v16; // dl
  __int64 v17; // rdi
  unsigned __int64 v18; // rbx
  __int64 v19; // rax
  __int64 v20; // rdi
  char v21; // dl
  char v22; // dl
  struct _Unwind_Exception *v23; // rbp
  boost::beast::detail::variant<const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,boost::beast::detail::buffers_cat_view_iterator_base::past_end>::destroy f; // [rsp+18h] [rbp-280h] BYREF
  char v25[632]; // [rsp+20h] [rbp-278h] BYREF

  v3 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v14 = __asan_stack_malloc_4(576LL);
    if ( v14 )
      v3 = v14;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 1 12 allocator:76 64 24 4 p:77 128 376 11 function:85";
  *(_QWORD *)(v3 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::do_complete;
  v4 = (_DWORD *)(v3 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234881024;
  v4[536862723] = -218959118;
  v4[536862735] = -218103808;
  v4[536862736] = -202116109;
  v4[536862737] = -202116109;
  *(_QWORD *)(v3 + 64) = v3 + 48;
  *(_QWORD *)(v3 + 72) = base;
  *(_QWORD *)(v3 + 80) = base;
  v5 = (unsigned __int64)&base[1];
  if ( *(_BYTE *)(((unsigned __int64)&base[1] >> 3) + 0x7FFF8000) )
  {
    v6 = base + 1;
    __asan_report_load8(&base[1]);
    goto LABEL_29;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 128) = base[1];
  v6 = base + 2;
  if ( *(_BYTE *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) )
  {
LABEL_29:
    __asan_report_load8(v6);
LABEL_30:
    __asan_report_load4(v6);
LABEL_31:
    __asan_report_load4(v6);
    goto LABEL_32;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 136) = base[2];
  boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>::buffers_prefix_view(
    (boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > *const)(v3 + 144),
    (const boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > *)&base[3]);
  v6 = base + 12;
  v7 = *(_BYTE *)(((unsigned __int64)&base[12] >> 3) + 0x7FFF8000);
  if ( v7 && v7 <= 3 )
    goto LABEL_30;
  *(_DWORD *)(v3 + 216) = base[12].func_;
  v6 = (boost::asio::detail::executor_function_base *)((char *)base + 100);
  v8 = *(_BYTE *)((((unsigned __int64)&base[12].func_ + 4) >> 3) + 0x7FFF8000);
  if ( (char)((((_BYTE)base + 100) & 7) + 3) >= v8 && v8 )
    goto LABEL_31;
  *(_DWORD *)(v3 + 220) = HIDWORD(base[12].func_);
  v6 = base + 13;
  if ( *(_WORD *)(((unsigned __int64)&base[13] >> 3) + 0x7FFF8000) )
  {
LABEL_32:
    __asan_report_load16(v6);
    goto LABEL_33;
  }
  *(__m128i *)(v3 + 224) = _mm_loadu_si128((const __m128i *)&base[13]);
  v6 = base + 15;
  if ( *(_BYTE *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000) )
  {
LABEL_33:
    __asan_report_load8(v6);
LABEL_34:
    __asan_report_load4(v6);
    goto LABEL_35;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 240) = base[15];
  boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::async_base(
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 248),
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *)&base[16]);
  v6 = base + 45;
  v9 = *(_BYTE *)(((unsigned __int64)&base[45] >> 3) + 0x7FFF8000);
  if ( v9 && v9 <= 3 )
    goto LABEL_34;
  *(_DWORD *)(v3 + 480) = base[45].func_;
  *(_QWORD *)(v3 + 248) = &`vtable for'boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                        + 2;
  v6 = base + 46;
  if ( *(_WORD *)(((unsigned __int64)&base[46] >> 3) + 0x7FFF8000) )
  {
LABEL_35:
    __asan_report_load16(v6);
    goto LABEL_36;
  }
  *(__m128i *)(v3 + 488) = _mm_loadu_si128((const __m128i *)&base[46]);
  v10 = *(_QWORD *)(v3 + 80);
  if ( v10 )
  {
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op((boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v10 + 8));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v5 = *(_QWORD *)(v3 + 72);
  if ( !v5 )
    goto LABEL_24;
  v11 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v11 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v11 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v11 + 8) >> 3) + 0x7FFF8000) )
    {
      v11 = *(_QWORD *)(v11 + 8);
      goto LABEL_19;
    }
LABEL_36:
    __asan_report_load8(v6);
    goto LABEL_37;
  }
LABEL_19:
  if ( v11 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v11 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v11 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v11 + 16) )
        goto LABEL_22;
LABEL_38:
      v15 = *(_BYTE *)(((v5 + 392) >> 3) + 0x7FFF8000);
      if ( v15 <= (char)((v5 - 120) & 7) && v15 )
      {
        __asan_report_load1(v5 + 392);
      }
      else
      {
        v16 = *(_BYTE *)((v5 >> 3) + 0x7FFF8000);
        if ( v16 > (char)(v5 & 7) || !v16 )
        {
          *(_BYTE *)v5 = *(_BYTE *)(v5 + 392);
          *(_QWORD *)(v11 + 16) = v5;
          goto LABEL_23;
        }
      }
      __asan_report_store1(v5);
      goto LABEL_45;
    }
LABEL_37:
    v11 = __asan_report_load8(v6);
    goto LABEL_38;
  }
LABEL_22:
  operator delete(*(void **)(v3 + 72));
LABEL_23:
  *(_QWORD *)(v3 + 72) = 0LL;
LABEL_24:
  if ( call )
  {
    v12 = *(_QWORD *)(v3 + 488);
    v13 = *(_QWORD *)(v3 + 496);
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::operator()(
      (boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v3 + 128),
      *(boost::system::error_code *)&v12,
      0xFFFFFFFFFFFFFFFFLL,
      0);
  }
LABEL_45:
  *(_QWORD *)(v3 + 248) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v3 + 464));
  *(_QWORD *)(v3 + 256) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                        + 2;
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 256));
  f.self = (boost::beast::detail::variant<const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,boost::beast::detail::buffers_cat_view_iterator_base::past_end> *)(v3 + 192);
  boost::mp11::mp_with_index<7ul,boost::beast::detail::variant<boost::asio::const_buffer const*,boost::asio::const_buffer const*,boost::asio::const_buffer const*,boost::asio::const_buffer const*,boost::asio::const_buffer const*,boost::beast::detail::buffers_cat_view_iterator_base::past_end>::destroy>(
    *(unsigned __int8 *)(v3 + 200),
    &f);
  v17 = *(_QWORD *)(v3 + 80);
  if ( v17 )
  {
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op((boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v17 + 8));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v18 = *(_QWORD *)(v3 + 72);
  if ( v18 )
  {
    v19 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v19 )
    {
      v20 = v19 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v19 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v20);
        goto LABEL_58;
      }
      v19 = *(_QWORD *)(v19 + 8);
    }
    if ( !v19 )
    {
LABEL_54:
      operator delete((void *)v18);
      goto LABEL_55;
    }
    v20 = v19 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v19 + 16) )
        goto LABEL_54;
LABEL_59:
      v21 = *(_BYTE *)(((v18 + 392) >> 3) + 0x7FFF8000);
      if ( v21 <= (char)((v18 - 120) & 7) && v21 )
      {
        __asan_report_load1(v18 + 392);
      }
      else
      {
        v22 = *(_BYTE *)((v18 >> 3) + 0x7FFF8000);
        if ( v22 > (char)(v18 & 7) || !v22 )
        {
          *(_BYTE *)v18 = *(_BYTE *)(v18 + 392);
          *(_QWORD *)(v19 + 16) = v18;
          goto LABEL_55;
        }
      }
      v23 = (struct _Unwind_Exception *)__asan_report_store1(v18);
      boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op((boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v18 - 448));
      boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > >,boost::system::error_code>,std::allocator<void> >::ptr *const)(v18 - 512));
      __asan_handle_no_return(v18 - 512);
      _Unwind_Resume(v23);
    }
LABEL_58:
    v19 = __asan_report_load8(v20);
    goto LABEL_59;
  }
LABEL_55:
  if ( v25 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 72: range 0000000019CB1449-0000000019CB1A13
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v3; // r13
  _DWORD *v4; // r12
  unsigned __int64 v5; // rbp
  boost::asio::detail::executor_function_base *v6; // rdi
  char v7; // al
  char v8; // dl
  char v9; // al
  __int64 v10; // rdi
  __int64 v11; // rax
  __int64 v12; // rsi OVERLAPPED
  __int64 v13; // rdx
  __int64 v14; // rax
  char v15; // dl
  char v16; // dl
  __int64 v17; // rdi
  unsigned __int64 v18; // rbx
  __int64 v19; // rax
  __int64 v20; // rdi
  char v21; // dl
  char v22; // dl
  struct _Unwind_Exception *v23; // rbp
  boost::beast::detail::variant<const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_iterator,const boost::asio::const_buffer*,boost::beast::detail::buffers_cat_view_iterator_base::past_end>::destroy f; // [rsp+18h] [rbp-280h] BYREF
  char v25[632]; // [rsp+20h] [rbp-278h] BYREF

  v3 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v14 = __asan_stack_malloc_4(576LL);
    if ( v14 )
      v3 = v14;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 1 12 allocator:76 64 24 4 p:77 128 376 11 function:85";
  *(_QWORD *)(v3 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::do_complete;
  v4 = (_DWORD *)(v3 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234881024;
  v4[536862723] = -218959118;
  v4[536862735] = -218103808;
  v4[536862736] = -202116109;
  v4[536862737] = -202116109;
  *(_QWORD *)(v3 + 64) = v3 + 48;
  *(_QWORD *)(v3 + 72) = base;
  *(_QWORD *)(v3 + 80) = base;
  v5 = (unsigned __int64)&base[1];
  if ( *(_BYTE *)(((unsigned __int64)&base[1] >> 3) + 0x7FFF8000) )
  {
    v6 = base + 1;
    __asan_report_load8(&base[1]);
    goto LABEL_29;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 128) = base[1];
  v6 = base + 2;
  if ( *(_BYTE *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) )
  {
LABEL_29:
    __asan_report_load8(v6);
LABEL_30:
    __asan_report_load4(v6);
LABEL_31:
    __asan_report_load4(v6);
    goto LABEL_32;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 136) = base[2];
  boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>> const&>>>::buffers_prefix_view(
    (boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> > >&> > > *const)(v3 + 144),
    (const boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> > >&> > > *)&base[3]);
  v6 = base + 12;
  v7 = *(_BYTE *)(((unsigned __int64)&base[12] >> 3) + 0x7FFF8000);
  if ( v7 && v7 <= 3 )
    goto LABEL_30;
  *(_DWORD *)(v3 + 216) = base[12].func_;
  v6 = (boost::asio::detail::executor_function_base *)((char *)base + 100);
  v8 = *(_BYTE *)((((unsigned __int64)&base[12].func_ + 4) >> 3) + 0x7FFF8000);
  if ( (char)((((_BYTE)base + 100) & 7) + 3) >= v8 && v8 )
    goto LABEL_31;
  *(_DWORD *)(v3 + 220) = HIDWORD(base[12].func_);
  v6 = base + 13;
  if ( *(_WORD *)(((unsigned __int64)&base[13] >> 3) + 0x7FFF8000) )
  {
LABEL_32:
    __asan_report_load16(v6);
    goto LABEL_33;
  }
  *(__m128i *)(v3 + 224) = _mm_loadu_si128((const __m128i *)&base[13]);
  v6 = base + 15;
  if ( *(_BYTE *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000) )
  {
LABEL_33:
    __asan_report_load8(v6);
LABEL_34:
    __asan_report_load4(v6);
    goto LABEL_35;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 240) = base[15];
  boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::async_base(
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 248),
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *)&base[16]);
  v6 = base + 45;
  v9 = *(_BYTE *)(((unsigned __int64)&base[45] >> 3) + 0x7FFF8000);
  if ( v9 && v9 <= 3 )
    goto LABEL_34;
  *(_DWORD *)(v3 + 480) = base[45].func_;
  *(_QWORD *)(v3 + 248) = &`vtable for'boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                        + 2;
  v6 = base + 46;
  if ( *(_WORD *)(((unsigned __int64)&base[46] >> 3) + 0x7FFF8000) )
  {
LABEL_35:
    __asan_report_load16(v6);
    goto LABEL_36;
  }
  *(__m128i *)(v3 + 488) = _mm_loadu_si128((const __m128i *)&base[46]);
  v10 = *(_QWORD *)(v3 + 80);
  if ( v10 )
  {
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op((boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> > >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v10 + 8));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v5 = *(_QWORD *)(v3 + 72);
  if ( !v5 )
    goto LABEL_24;
  v11 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v11 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v11 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v11 + 8) >> 3) + 0x7FFF8000) )
    {
      v11 = *(_QWORD *)(v11 + 8);
      goto LABEL_19;
    }
LABEL_36:
    __asan_report_load8(v6);
    goto LABEL_37;
  }
LABEL_19:
  if ( v11 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v11 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v11 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v11 + 16) )
        goto LABEL_22;
LABEL_38:
      v15 = *(_BYTE *)(((v5 + 392) >> 3) + 0x7FFF8000);
      if ( v15 <= (char)((v5 - 120) & 7) && v15 )
      {
        __asan_report_load1(v5 + 392);
      }
      else
      {
        v16 = *(_BYTE *)((v5 >> 3) + 0x7FFF8000);
        if ( v16 > (char)(v5 & 7) || !v16 )
        {
          *(_BYTE *)v5 = *(_BYTE *)(v5 + 392);
          *(_QWORD *)(v11 + 16) = v5;
          goto LABEL_23;
        }
      }
      __asan_report_store1(v5);
      goto LABEL_45;
    }
LABEL_37:
    v11 = __asan_report_load8(v6);
    goto LABEL_38;
  }
LABEL_22:
  operator delete(*(void **)(v3 + 72));
LABEL_23:
  *(_QWORD *)(v3 + 72) = 0LL;
LABEL_24:
  if ( call )
  {
    v12 = *(_QWORD *)(v3 + 488);
    v13 = *(_QWORD *)(v3 + 496);
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::operator()(
      (boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> > >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v3 + 128),
      *(boost::system::error_code *)&v12,
      0xFFFFFFFFFFFFFFFFLL,
      0);
  }
LABEL_45:
  *(_QWORD *)(v3 + 248) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v3 + 464));
  *(_QWORD *)(v3 + 256) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                        + 2;
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 256));
  f.self = (boost::beast::detail::variant<const boost::asio::const_buffer*,const boost::asio::const_buffer*,const boost::asio::const_buffer*,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_iterator,const boost::asio::const_buffer*,boost::beast::detail::buffers_cat_view_iterator_base::past_end> *)(v3 + 192);
  boost::mp11::mp_with_index<7ul,boost::beast::detail::variant<boost::asio::const_buffer const*,boost::asio::const_buffer const*,boost::asio::const_buffer const*,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_iterator,boost::asio::const_buffer const*,boost::beast::detail::buffers_cat_view_iterator_base::past_end>::destroy>(
    *(unsigned __int8 *)(v3 + 200),
    &f);
  v17 = *(_QWORD *)(v3 + 80);
  if ( v17 )
  {
    boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op((boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> > >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v17 + 8));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v18 = *(_QWORD *)(v3 + 72);
  if ( v18 )
  {
    v19 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v19 )
    {
      v20 = v19 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v19 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v20);
        goto LABEL_58;
      }
      v19 = *(_QWORD *)(v19 + 8);
    }
    if ( !v19 )
    {
LABEL_54:
      operator delete((void *)v18);
      goto LABEL_55;
    }
    v20 = v19 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v19 + 16) )
        goto LABEL_54;
LABEL_59:
      v21 = *(_BYTE *)(((v18 + 392) >> 3) + 0x7FFF8000);
      if ( v21 <= (char)((v18 - 120) & 7) && v21 )
      {
        __asan_report_load1(v18 + 392);
      }
      else
      {
        v22 = *(_BYTE *)((v18 >> 3) + 0x7FFF8000);
        if ( v22 > (char)(v18 & 7) || !v22 )
        {
          *(_BYTE *)v18 = *(_BYTE *)(v18 + 392);
          *(_QWORD *)(v19 + 16) = v18;
          goto LABEL_55;
        }
      }
      v23 = (struct _Unwind_Exception *)__asan_report_store1(v18);
      boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op((boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> > >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v18 - 448));
      boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::system::error_code>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder1<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> > >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > >,boost::system::error_code>,std::allocator<void> >::ptr *const)(v18 - 512));
      __asan_handle_no_return(v18 - 512);
      _Unwind_Resume(v23);
    }
LABEL_58:
    v19 = __asan_report_load8(v20);
    goto LABEL_59;
  }
LABEL_55:
  if ( v25 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 72: range 0000000014ECC2C2-0000000014ECC90A
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::asio::detail::write_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp,boost::asio::executor>,std::vector<boost::asio::const_buffer>,__gnu_cxx::__normal_iterator<boost::asio::const_buffer const*,std::vector<boost::asio::const_buffer>>,boost::asio::detail::transfer_all_t,common::minet::AServerSession::asyncSendFrontString(void)::{lambda(boost::system::error_code const&,unsigned long)#1}>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  boost::asio::detail::executor_function_base *v2; // rbx
  unsigned __int64 v3; // r12
  _DWORD *v4; // r13
  boost::asio::detail::executor_function_base *v5; // rdi
  char v6; // al
  __int64 func; // rax
  boost::asio::detail::executor_function_base *v8; // rdi
  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *v9; // rdi
  boost::asio::detail::executor_function_base::func_type v10; // rdi
  __int64 v11; // rax
  __int64 v12; // rax
  char v13; // dl
  char v14; // dl
  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *v15; // rdi
  void *v16; // rdi
  __int64 v17; // rdi
  unsigned __int64 v18; // rbx
  unsigned __int64 v19; // rdi
  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *v20; // rdi
  void *v21; // rdi
  __int64 v22; // rax
  char v23; // dl
  char v24; // dl
  struct _Unwind_Exception *v25; // rbx
  _BYTE v26[312]; // [rsp+0h] [rbp-138h] BYREF

  v2 = base;
  v3 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v12 = __asan_stack_malloc_2(256LL);
    if ( v12 )
      v3 = v12;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 112 11 function:85";
  *(_QWORD *)(v3 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::asio::detail::write_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp,boost::asio::executor>,std::vector<boost::asio::const_buffer>,__gnu_cxx::__normal_iterator<boost::asio::const_buffer const*,std::vector<boost::asio::const_buffer>>,boost::asio::detail::transfer_all_t,common::minet::AServerSession::asyncSendFrontString(void)::{lambda(boost::system::error_code const&,unsigned long)#1}>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete;
  v4 = (_DWORD *)(v3 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61953;
  v4[536862722] = -218959360;
  v4[536862723] = 62194;
  v4[536862727] = -202116109;
  *(_QWORD *)(v3 + 48) = v3 + 32;
  *(_QWORD *)(v3 + 56) = base;
  *(_QWORD *)(v3 + 64) = base;
  v5 = base + 1;
  if ( *(_BYTE *)(((unsigned __int64)&v2[1] >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(v5);
    goto LABEL_38;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 112) = v2[1];
  v5 = v2 + 2;
  if ( *(_BYTE *)(((unsigned __int64)&v2[2] >> 3) + 0x7FFF8000) )
  {
LABEL_38:
    __asan_report_load8(v5);
    goto LABEL_39;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 120) = v2[2];
  v5 = v2 + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v2[3] >> 3) + 0x7FFF8000) )
  {
LABEL_39:
    __asan_report_load8(v5);
    goto LABEL_40;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 128) = v2[3];
  v5 = v2 + 4;
  if ( *(_BYTE *)(((unsigned __int64)&v2[4] >> 3) + 0x7FFF8000) )
  {
LABEL_40:
    __asan_report_load8(v5);
    goto LABEL_41;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 136) = v2[4];
  v2[4].func_ = 0LL;
  v2[3].func_ = 0LL;
  v2[2].func_ = 0LL;
  v5 = v2 + 5;
  if ( *(_BYTE *)(((unsigned __int64)&v2[5] >> 3) + 0x7FFF8000) )
  {
LABEL_41:
    __asan_report_load8(v5);
    goto LABEL_42;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 144) = v2[5];
  v5 = v2 + 6;
  if ( *(_BYTE *)(((unsigned __int64)&v2[6] >> 3) + 0x7FFF8000) )
  {
LABEL_42:
    __asan_report_load8(v5);
    goto LABEL_43;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 152) = v2[6];
  v5 = v2 + 7;
  if ( *(_BYTE *)(((unsigned __int64)&v2[7] >> 3) + 0x7FFF8000) )
  {
LABEL_43:
    __asan_report_load8(v5);
    goto LABEL_44;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 160) = v2[7];
  v5 = v2 + 8;
  if ( *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) )
  {
LABEL_44:
    __asan_report_load8(v5);
LABEL_45:
    __asan_report_load4(v5);
    goto LABEL_46;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 168) = v2[8];
  v5 = v2 + 9;
  v6 = *(_BYTE *)(((unsigned __int64)&v2[9] >> 3) + 0x7FFF8000);
  if ( v6 && v6 <= 3 )
    goto LABEL_45;
  *(_DWORD *)(v3 + 176) = v2[9].func_;
  v5 = v2 + 10;
  if ( *(_BYTE *)(((unsigned __int64)&v2[10] >> 3) + 0x7FFF8000) )
  {
LABEL_46:
    __asan_report_load8(v5);
    goto LABEL_47;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 184) = v2[10];
  v5 = v2 + 11;
  if ( *(_BYTE *)(((unsigned __int64)&v2[11] >> 3) + 0x7FFF8000) )
  {
LABEL_47:
    __asan_report_load8(v5);
    goto LABEL_48;
  }
  func = (__int64)v2[11].func_;
  v2[11].func_ = 0LL;
  *(_QWORD *)(v3 + 192) = func;
  v2[10].func_ = 0LL;
  v5 = v2 + 12;
  if ( *(_WORD *)(((unsigned __int64)&v2[12] >> 3) + 0x7FFF8000) )
  {
LABEL_48:
    __asan_report_load16(v5);
    goto LABEL_49;
  }
  *(__m128i *)(v3 + 200) = _mm_loadu_si128((const __m128i *)&v2[12]);
  v5 = v2 + 14;
  if ( *(_BYTE *)(((unsigned __int64)&v2[14] >> 3) + 0x7FFF8000) )
  {
LABEL_49:
    __asan_report_load8(v5);
LABEL_50:
    __asan_report_load8(v5);
LABEL_51:
    __asan_report_load8(v5);
    goto LABEL_52;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 216) = v2[14];
  v8 = *(boost::asio::detail::executor_function_base **)(v3 + 64);
  if ( !v8 )
    goto LABEL_24;
  v2 = v8 + 1;
  v5 = v8 + 11;
  if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
    goto LABEL_50;
  v9 = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)v2[10].func_;
  if ( v9 )
    std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(v9);
  v5 = v2 + 1;
  if ( *(_BYTE *)(((unsigned __int64)&v2[1] >> 3) + 0x7FFF8000) )
    goto LABEL_51;
  v10 = v2[1].func_;
  if ( v10 )
    operator delete(v10);
  *(_QWORD *)(v3 + 64) = 0LL;
LABEL_24:
  v2 = *(boost::asio::detail::executor_function_base **)(v3 + 56);
  if ( !v2 )
    goto LABEL_33;
  v11 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v11 )
  {
    v5 = (boost::asio::detail::executor_function_base *)(v11 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v11 + 8) >> 3) + 0x7FFF8000) )
    {
      v11 = *(_QWORD *)(v11 + 8);
      goto LABEL_28;
    }
LABEL_52:
    __asan_report_load8(v5);
    goto LABEL_53;
  }
LABEL_28:
  if ( v11 )
  {
    v5 = (boost::asio::detail::executor_function_base *)(v11 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v11 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v11 + 16) )
        goto LABEL_31;
LABEL_54:
      v13 = *(_BYTE *)(((unsigned __int64)&v2[16] >> 3) + 0x7FFF8000);
      if ( v13 <= (((unsigned __int8)v2 + 0x80) & 7) && v13 )
      {
        __asan_report_load1(&v2[16]);
      }
      else
      {
        v14 = *(_BYTE *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000);
        if ( v14 > ((unsigned __int8)v2 & 7) || !v14 )
        {
          LOBYTE(v2->func_) = v2[16].func_;
          *(_QWORD *)(v11 + 16) = v2;
          goto LABEL_32;
        }
      }
      __asan_report_store1(v2);
      goto LABEL_61;
    }
LABEL_53:
    v11 = __asan_report_load8(v5);
    goto LABEL_54;
  }
LABEL_31:
  operator delete(*(void **)(v3 + 56));
LABEL_32:
  *(_QWORD *)(v3 + 56) = 0LL;
LABEL_33:
  if ( call )
    boost::asio::detail::write_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp,boost::asio::executor>,std::vector<boost::asio::const_buffer>,__gnu_cxx::__normal_iterator<boost::asio::const_buffer const*,std::vector<boost::asio::const_buffer>>,boost::asio::detail::transfer_all_t,common::minet::AServerSession::asyncSendFrontString(void)::{lambda(boost::system::error_code const&,unsigned long)#1}>::operator()(
      (boost::asio::detail::write_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp,boost::asio::executor>,std::vector<boost::asio::const_buffer>,__gnu_cxx::__normal_iterator<const boost::asio::const_buffer*,std::vector<boost::asio::const_buffer> >,boost::asio::detail::transfer_all_t,common::minet::AServerSession::asyncSendFrontString()::<lambda(const boost::system::error_code&,size_t)> > *const)(v3 + 112),
      (const boost::system::error_code *)(v3 + 200),
      *(_QWORD *)(v3 + 216),
      0);
LABEL_61:
  v15 = *(std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> **)(v3 + 192);
  if ( v15 )
    std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(v15);
  v16 = *(void **)(v3 + 120);
  if ( v16 )
    operator delete(v16);
  v17 = *(_QWORD *)(v3 + 64);
  if ( v17 )
  {
    v18 = v17 + 8;
    v19 = v17 + 88;
    if ( *(_BYTE *)((v19 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load8(v19);
    }
    else
    {
      v20 = *(std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> **)(v18 + 80);
      if ( v20 )
        std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(v20);
      v19 = v18 + 8;
      if ( !*(_BYTE *)(((v18 + 8) >> 3) + 0x7FFF8000) )
      {
        v21 = *(void **)(v18 + 8);
        if ( v21 )
          operator delete(v21);
        *(_QWORD *)(v3 + 64) = 0LL;
        goto LABEL_73;
      }
    }
    __asan_report_load8(v19);
    goto LABEL_85;
  }
LABEL_73:
  v18 = *(_QWORD *)(v3 + 56);
  if ( !v18 )
    goto LABEL_81;
  v22 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v22 )
  {
    v19 = v22 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v22 + 8) >> 3) + 0x7FFF8000) )
    {
      v22 = *(_QWORD *)(v22 + 8);
      goto LABEL_77;
    }
LABEL_85:
    __asan_report_load8(v19);
LABEL_86:
    v22 = __asan_report_load8(v19);
    goto LABEL_87;
  }
LABEL_77:
  if ( !v22 )
  {
LABEL_80:
    operator delete(*(void **)(v3 + 56));
    goto LABEL_81;
  }
  v19 = v22 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v22 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_86;
  if ( *(_QWORD *)(v22 + 16) )
    goto LABEL_80;
LABEL_87:
  v23 = *(_BYTE *)(((v18 + 128) >> 3) + 0x7FFF8000);
  if ( v23 <= (char)((v18 + 0x80) & 7) && v23 )
  {
    __asan_report_load1(v18 + 128);
    goto LABEL_93;
  }
  v24 = *(_BYTE *)((v18 >> 3) + 0x7FFF8000);
  if ( v24 <= (char)(v18 & 7) && v24 )
  {
LABEL_93:
    v25 = (struct _Unwind_Exception *)__asan_report_store1(v18);
    boost::asio::detail::write_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp,boost::asio::executor>,std::vector<boost::asio::const_buffer>,__gnu_cxx::__normal_iterator<boost::asio::const_buffer const*,std::vector<boost::asio::const_buffer>>,boost::asio::detail::transfer_all_t,common::minet::AServerSession::asyncSendFrontString(void)::{lambda(boost::system::error_code const&,unsigned long)#1}>::~write_op((boost::asio::detail::write_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp,boost::asio::executor>,std::vector<boost::asio::const_buffer>,__gnu_cxx::__normal_iterator<const boost::asio::const_buffer*,std::vector<boost::asio::const_buffer> >,boost::asio::detail::transfer_all_t,common::minet::AServerSession::asyncSendFrontString()::<lambda(const boost::system::error_code&,size_t)> > *const)(v3 + 112));
    boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::asio::detail::write_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp,boost::asio::executor>,std::vector<boost::asio::const_buffer>,__gnu_cxx::__normal_iterator<boost::asio::const_buffer const*,std::vector<boost::asio::const_buffer>>,boost::asio::detail::transfer_all_t,common::minet::AServerSession::asyncSendFrontString(void)::{lambda(boost::system::error_code const&,unsigned long)#1}>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::asio::detail::write_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp,boost::asio::executor>,std::vector<boost::asio::const_buffer>,__gnu_cxx::__normal_iterator<const boost::asio::const_buffer*,std::vector<boost::asio::const_buffer> >,boost::asio::detail::transfer_all_t,common::minet::AServerSession::asyncSendFrontString()::<lambda(const boost::system::error_code&,size_t)> >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const)(v3 + 48));
    __asan_handle_no_return(v3 + 48);
    _Unwind_Resume(v25);
  }
  *(_BYTE *)v18 = *(_BYTE *)(v18 + 128);
  *(_QWORD *)(v22 + 16) = v18;
LABEL_81:
  if ( v26 == (_BYTE *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 72: range 0000000019C3D6B3-0000000019C3E3C6
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  boost::asio::detail::executor_function_base *v2; // r13
  unsigned __int64 v3; // rbp
  unsigned __int64 v4; // r12
  unsigned __int64 v5; // rdi
  boost::asio::detail::executor_function_base::func_type func; // rax
  __int64 (**v7)(void); // rax
  __int64 v8; // rax
  boost::asio::detail::executor_function_base *v9; // rdi
  boost::asio::detail::executor_function_base *v10; // rdi
  boost::asio::detail::executor_function_base::func_type v11; // rax
  boost::asio::detail::executor_function_base *v12; // rdi
  char v13; // al
  char v14; // al
  boost::asio::detail::executor_function_base::func_type v15; // rax
  char v16; // al
  char v17; // al
  __int64 v18; // rdi
  __int64 v19; // rax
  __int64 v20; // rsi OVERLAPPED
  __int64 v21; // rdx
  __int64 v22; // rax
  char v23; // dl
  char v24; // dl
  __int64 v25; // rdi
  unsigned __int64 v26; // rbx
  __int64 v27; // rax
  __int64 v28; // rdi
  char v29; // dl
  char v30; // dl
  struct _Unwind_Exception *v31; // rbp
  unsigned __int64 v32; // [rsp+0h] [rbp-258h]
  unsigned __int64 v34; // [rsp+20h] [rbp-238h]
  _DWORD *v35; // [rsp+30h] [rbp-228h]
  char v36[536]; // [rsp+40h] [rbp-218h] BYREF

  v34 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v22 = __asan_stack_malloc_3(480LL);
    if ( v22 )
      v34 = v22;
  }
  *(_QWORD *)v34 = 1102416563LL;
  *(_QWORD *)(v34 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 304 11 function:85";
  *(_QWORD *)(v34 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete;
  v35 = (_DWORD *)(v34 >> 3);
  v35[536862720] = -235802127;
  v35[536862721] = 61953;
  v35[536862722] = -218959360;
  v35[536862723] = 62194;
  v35[536862733] = -202116109;
  v35[536862734] = -202116109;
  *(_QWORD *)(v34 + 48) = v34 + 32;
  *(_QWORD *)(v34 + 56) = base;
  *(_QWORD *)(v34 + 64) = base;
  v3 = (unsigned __int64)&base[1];
  *(_QWORD *)(v34 + 112) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v34 + 120) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v34 + 128) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v4 = v34 + 136;
  if ( *(_BYTE *)(((v34 + 136) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store8();
    goto LABEL_74;
  }
  *(_QWORD *)(v34 + 136) = &`vtable for'boost::beast::async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v32 = v34 + 144;
  v2 = base + 5;
  if ( *(_BYTE *)(((unsigned __int64)&base[5] >> 3) + 0x7FFF8000) )
  {
LABEL_74:
    __asan_report_load8(v2);
    goto LABEL_75;
  }
  if ( *(_BYTE *)((v32 >> 3) + 0x7FFF8000) )
  {
LABEL_75:
    v5 = v32;
    __asan_report_store8();
    goto LABEL_76;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 144) = base[5];
  v5 = v34 + 152;
  if ( *(_BYTE *)(((v34 + 152) >> 3) + 0x7FFF8000) )
  {
LABEL_76:
    __asan_report_store8();
    goto LABEL_77;
  }
  *(_QWORD *)(v34 + 152) = 0LL;
  v5 = (unsigned __int64)&base[6];
  if ( *(_BYTE *)(((unsigned __int64)&base[6] >> 3) + 0x7FFF8000) )
  {
LABEL_77:
    __asan_report_load8(v5);
    goto LABEL_78;
  }
  func = base[6].func_;
  base[6].func_ = 0LL;
  *(_QWORD *)(v34 + 152) = func;
  base[5].func_ = 0LL;
  v5 = (unsigned __int64)&base[7];
  if ( *(_BYTE *)(((unsigned __int64)&base[7] >> 3) + 0x7FFF8000) )
  {
LABEL_78:
    __asan_report_load8(v5);
    goto LABEL_79;
  }
  v5 = v34 + 160;
  if ( *(_BYTE *)(((v34 + 160) >> 3) + 0x7FFF8000) )
  {
LABEL_79:
    __asan_report_store8();
    goto LABEL_80;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 160) = base[7];
  v5 = (unsigned __int64)&base[8];
  if ( *(_BYTE *)(((unsigned __int64)&base[8] >> 3) + 0x7FFF8000) )
  {
LABEL_80:
    __asan_report_load8(v5);
LABEL_81:
    v7 = (__int64 (**)(void))__asan_report_load8(v5);
    goto LABEL_82;
  }
  v5 = (unsigned __int64)base[8].func_;
  if ( !v5 )
    goto LABEL_14;
  if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
    goto LABEL_81;
  v7 = *(__int64 (***)(void))v5;
  if ( *(_BYTE *)((*(_QWORD *)v5 >> 3) + 0x7FFF8000LL) )
  {
LABEL_82:
    v8 = __asan_report_load8(v7);
    goto LABEL_83;
  }
  v5 = (*v7)();
LABEL_14:
  v8 = v34 + 168;
  if ( *(_BYTE *)(((v34 + 168) >> 3) + 0x7FFF8000) )
  {
LABEL_83:
    v9 = (boost::asio::detail::executor_function_base *)v8;
    __asan_report_store8();
    goto LABEL_84;
  }
  *(_QWORD *)(v34 + 168) = v5;
  v9 = base + 9;
  if ( *(_BYTE *)(((unsigned __int64)&base[9] >> 3) + 0x7FFF8000) )
  {
LABEL_84:
    __asan_report_load8(v9);
    goto LABEL_85;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 176);
  if ( *(_BYTE *)(((v34 + 176) >> 3) + 0x7FFF8000) )
  {
LABEL_85:
    __asan_report_store8();
    goto LABEL_86;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 176) = base[9];
  v9 = base + 10;
  if ( *(_BYTE *)(((unsigned __int64)&base[10] >> 3) + 0x7FFF8000) )
  {
LABEL_86:
    __asan_report_load8(v9);
    goto LABEL_87;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 184);
  if ( *(_BYTE *)(((v34 + 184) >> 3) + 0x7FFF8000) )
  {
LABEL_87:
    __asan_report_store8();
    goto LABEL_88;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 184) = base[10];
  v9 = base + 11;
  if ( *(_BYTE *)(((unsigned __int64)&base[11] >> 3) + 0x7FFF8000) )
  {
LABEL_88:
    __asan_report_load8(v9);
    goto LABEL_89;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 192);
  if ( *(_BYTE *)(((v34 + 192) >> 3) + 0x7FFF8000) )
  {
LABEL_89:
    __asan_report_store8();
    goto LABEL_90;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 192) = base[11];
  v9 = base + 12;
  if ( *(_BYTE *)(((unsigned __int64)&base[12] >> 3) + 0x7FFF8000) )
  {
LABEL_90:
    __asan_report_load8(v9);
    goto LABEL_91;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 200);
  if ( *(_BYTE *)(((v34 + 200) >> 3) + 0x7FFF8000) )
  {
LABEL_91:
    __asan_report_store8();
    goto LABEL_92;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 200) = base[12];
  v9 = base + 13;
  if ( *(_BYTE *)(((unsigned __int64)&base[13] >> 3) + 0x7FFF8000) )
  {
LABEL_92:
    __asan_report_load8(v9);
    goto LABEL_93;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 208);
  if ( *(_BYTE *)(((v34 + 208) >> 3) + 0x7FFF8000) )
  {
LABEL_93:
    __asan_report_store8();
    goto LABEL_94;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 208) = base[13];
  base[13].func_ = 0LL;
  v9 = base + 14;
  if ( *(char *)(((unsigned __int64)&base[14] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_94:
    __asan_report_load1(v9);
    goto LABEL_95;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 216);
  if ( *(char *)(((v34 + 216) >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_95:
    __asan_report_store1(v9);
    goto LABEL_96;
  }
  *(_BYTE *)(v34 + 216) = base[14].func_;
  LOBYTE(base[14].func_) = 0;
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
  {
LABEL_96:
    v10 = (boost::asio::detail::executor_function_base *)(v34 + 136);
    __asan_report_store8();
    goto LABEL_97;
  }
  *(_QWORD *)v4 = &`vtable for'boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                + 2;
  v10 = base + 15;
  if ( *(_BYTE *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000) )
  {
LABEL_97:
    __asan_report_load8(v10);
    goto LABEL_98;
  }
  v11 = base[15].func_;
  base[15].func_ = 0LL;
  if ( *(_BYTE *)(((v34 + 224) >> 3) + 0x7FFF8000) )
  {
LABEL_98:
    __asan_report_store8();
    goto LABEL_99;
  }
  *(_QWORD *)(v34 + 224) = v11;
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
  {
LABEL_99:
    v12 = (boost::asio::detail::executor_function_base *)(v34 + 136);
    __asan_report_store8();
    goto LABEL_100;
  }
  *(_QWORD *)v4 = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                + 2;
  v12 = base + 16;
  if ( *(_BYTE *)(((unsigned __int64)&base[16] >> 3) + 0x7FFF8000) )
  {
LABEL_100:
    __asan_report_load8(v12);
    goto LABEL_101;
  }
  v12 = (boost::asio::detail::executor_function_base *)(v34 + 232);
  if ( *(_BYTE *)(((v34 + 232) >> 3) + 0x7FFF8000) )
  {
LABEL_101:
    __asan_report_store8();
    goto LABEL_102;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 232) = base[16];
  v12 = base + 17;
  if ( *(_BYTE *)(((unsigned __int64)&base[17] >> 3) + 0x7FFF8000) )
  {
LABEL_102:
    __asan_report_load8(v12);
    goto LABEL_103;
  }
  v12 = (boost::asio::detail::executor_function_base *)(v34 + 240);
  if ( *(_BYTE *)(((v34 + 240) >> 3) + 0x7FFF8000) )
  {
LABEL_103:
    __asan_report_store8();
    goto LABEL_104;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 240) = base[17];
  v12 = base + 18;
  if ( *(_BYTE *)(((unsigned __int64)&base[18] >> 3) + 0x7FFF8000) )
  {
LABEL_104:
    __asan_report_load8(v12);
    goto LABEL_105;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 248) = base[18];
  base[18].func_ = 0LL;
  v12 = base + 19;
  if ( *(char *)(((unsigned __int64)&base[19] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_105:
    __asan_report_load1(v12);
LABEL_106:
    __asan_report_load4(v12);
    goto LABEL_107;
  }
  *(_BYTE *)(v34 + 256) = base[19].func_;
  LOBYTE(base[19].func_) = 0;
  v12 = base + 20;
  v13 = *(_BYTE *)(((unsigned __int64)&base[20] >> 3) + 0x7FFF8000);
  if ( v13 && v13 <= 3 )
    goto LABEL_106;
  *(_DWORD *)(v34 + 264) = base[20].func_;
  *(_QWORD *)(v34 + 128) = &`vtable for'boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v12 = base + 21;
  if ( *(_BYTE *)(((unsigned __int64)&base[21] >> 3) + 0x7FFF8000) )
  {
LABEL_107:
    __asan_report_load8(v12);
    goto LABEL_108;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 272) = base[21];
  v12 = base + 22;
  if ( *(_BYTE *)(((unsigned __int64)&base[22] >> 3) + 0x7FFF8000) )
  {
LABEL_108:
    __asan_report_load8(v12);
    goto LABEL_109;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 280) = base[22];
  v12 = base + 23;
  if ( *(_BYTE *)(((unsigned __int64)&base[23] >> 3) + 0x7FFF8000) )
  {
LABEL_109:
    __asan_report_load8(v12);
    goto LABEL_110;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 288) = base[23];
  v12 = base + 24;
  if ( *(_BYTE *)(((unsigned __int64)&base[24] >> 3) + 0x7FFF8000) )
  {
LABEL_110:
    __asan_report_load8(v12);
    goto LABEL_111;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 296) = base[24];
  base[24].func_ = 0LL;
  v12 = base + 25;
  if ( *(char *)(((unsigned __int64)&base[25] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_111:
    __asan_report_load1(v12);
    goto LABEL_112;
  }
  *(_BYTE *)(v34 + 304) = base[25].func_;
  LOBYTE(base[25].func_) = 0;
  *(_QWORD *)(v34 + 120) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v12 = base + 26;
  if ( *(_BYTE *)(((unsigned __int64)&base[26] >> 3) + 0x7FFF8000) )
  {
LABEL_112:
    __asan_report_load8(v12);
    goto LABEL_113;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 312) = base[26];
  v12 = base + 27;
  if ( *(_BYTE *)(((unsigned __int64)&base[27] >> 3) + 0x7FFF8000) )
  {
LABEL_113:
    __asan_report_load8(v12);
    goto LABEL_114;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 320) = base[27];
  v12 = base + 28;
  if ( *(_BYTE *)(((unsigned __int64)&base[28] >> 3) + 0x7FFF8000) )
  {
LABEL_114:
    __asan_report_load8(v12);
    goto LABEL_115;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 328) = base[28];
  base[28].func_ = 0LL;
  v12 = base + 29;
  if ( *(char *)(((unsigned __int64)&base[29] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_115:
    __asan_report_load1(v12);
LABEL_116:
    __asan_report_load4(v12);
    goto LABEL_117;
  }
  *(_BYTE *)(v34 + 336) = base[29].func_;
  LOBYTE(base[29].func_) = 0;
  v12 = base + 30;
  v14 = *(_BYTE *)(((unsigned __int64)&base[30] >> 3) + 0x7FFF8000);
  if ( v14 && v14 <= 3 )
    goto LABEL_116;
  *(_DWORD *)(v34 + 344) = base[30].func_;
  *(_QWORD *)(v34 + 112) = &`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                         + 2;
  v12 = base + 31;
  if ( *(_BYTE *)(((unsigned __int64)&base[31] >> 3) + 0x7FFF8000) )
  {
LABEL_117:
    __asan_report_load8(v12);
    goto LABEL_118;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 352) = base[31];
  *(_QWORD *)(v34 + 360) = 0LL;
  v12 = base + 32;
  if ( *(_BYTE *)(((unsigned __int64)&base[32] >> 3) + 0x7FFF8000) )
  {
LABEL_118:
    __asan_report_load8(v12);
    goto LABEL_119;
  }
  v15 = base[32].func_;
  base[32].func_ = 0LL;
  *(_QWORD *)(v34 + 360) = v15;
  base[31].func_ = 0LL;
  v12 = base + 33;
  if ( *(_BYTE *)(((unsigned __int64)&base[33] >> 3) + 0x7FFF8000) )
  {
LABEL_119:
    __asan_report_load8(v12);
LABEL_120:
    __asan_report_load1(v12);
    goto LABEL_121;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 368) = base[33];
  v12 = base + 34;
  v16 = *(_BYTE *)(((unsigned __int64)&base[34] >> 3) + 0x7FFF8000);
  if ( v16 <= (((unsigned __int8)base + 16) & 7) && v16 )
    goto LABEL_120;
  v17 = (char)base[34].func_;
  LOBYTE(base[34].func_) = 0;
  *(_BYTE *)(v34 + 376) = v17;
  v12 = base + 35;
  if ( *(_BYTE *)(((unsigned __int64)&base[35] >> 3) + 0x7FFF8000) )
  {
LABEL_121:
    __asan_report_load8(v12);
    goto LABEL_122;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 384) = base[35];
  v12 = base + 36;
  if ( *(_WORD *)(((unsigned __int64)&base[36] >> 3) + 0x7FFF8000) )
  {
LABEL_122:
    __asan_report_load16(v12);
    goto LABEL_123;
  }
  *(__m128i *)(v34 + 392) = _mm_loadu_si128((const __m128i *)&base[36]);
  v12 = base + 38;
  if ( *(_BYTE *)(((unsigned __int64)&base[38] >> 3) + 0x7FFF8000) )
  {
LABEL_123:
    __asan_report_load8(v12);
    goto LABEL_124;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 408) = base[38];
  v18 = *(_QWORD *)(v34 + 64);
  if ( v18 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::asio::const_buffer>&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v18 + 8));
    *(_QWORD *)(v34 + 64) = 0LL;
  }
  v3 = *(_QWORD *)(v34 + 56);
  if ( !v3 )
    goto LABEL_69;
  v19 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v19 )
  {
    v12 = (boost::asio::detail::executor_function_base *)(v19 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 8) >> 3) + 0x7FFF8000) )
    {
      v19 = *(_QWORD *)(v19 + 8);
      goto LABEL_64;
    }
LABEL_124:
    __asan_report_load8(v12);
    goto LABEL_125;
  }
LABEL_64:
  if ( v19 )
  {
    v12 = (boost::asio::detail::executor_function_base *)(v19 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v19 + 16) )
        goto LABEL_67;
LABEL_126:
      v23 = *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000);
      if ( v23 <= (char)((v3 + 64) & 7) && v23 )
      {
        __asan_report_load1(v3 + 320);
      }
      else
      {
        v24 = *(_BYTE *)((v3 >> 3) + 0x7FFF8000);
        if ( v24 > (char)(v3 & 7) || !v24 )
        {
          *(_BYTE *)v3 = *(_BYTE *)(v3 + 320);
          *(_QWORD *)(v19 + 16) = v3;
          goto LABEL_68;
        }
      }
      __asan_report_store1(v3);
      goto LABEL_133;
    }
LABEL_125:
    v19 = __asan_report_load8(v12);
    goto LABEL_126;
  }
LABEL_67:
  operator delete(*(void **)(v34 + 56));
LABEL_68:
  *(_QWORD *)(v34 + 56) = 0LL;
LABEL_69:
  if ( call )
  {
    v20 = *(_QWORD *)(v34 + 392);
    v21 = *(_QWORD *)(v34 + 400);
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::operator()(
      (boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::asio::const_buffer>&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v34 + 112),
      *(boost::beast::error_code *)&v20,
      *(_QWORD *)(v34 + 408));
  }
LABEL_133:
  boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::asio::const_buffer>&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v34 + 112));
  v25 = *(_QWORD *)(v34 + 64);
  if ( v25 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::asio::const_buffer>&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v25 + 8));
    *(_QWORD *)(v34 + 64) = 0LL;
  }
  v26 = *(_QWORD *)(v34 + 56);
  if ( v26 )
  {
    v27 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v27 )
    {
      v28 = v27 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v27 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v28);
        goto LABEL_146;
      }
      v27 = *(_QWORD *)(v27 + 8);
    }
    if ( !v27 )
    {
LABEL_142:
      operator delete((void *)v26);
      goto LABEL_143;
    }
    v28 = v27 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v27 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v27 + 16) )
        goto LABEL_142;
LABEL_147:
      v29 = *(_BYTE *)(((v26 + 320) >> 3) + 0x7FFF8000);
      if ( v29 <= (char)((v26 + 64) & 7) && v29 )
      {
        __asan_report_load1(v26 + 320);
      }
      else
      {
        v30 = *(_BYTE *)((v26 >> 3) + 0x7FFF8000);
        if ( v30 > (char)(v26 & 7) || !v30 )
        {
          *(_BYTE *)v26 = *(_BYTE *)(v26 + 320);
          *(_QWORD *)(v27 + 16) = v26;
          goto LABEL_143;
        }
      }
      v31 = (struct _Unwind_Exception *)__asan_report_store1(v26);
      boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::asio::const_buffer>&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v26 - 368));
      boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::asio::const_buffer>&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const)(v26 - 432));
      __asan_handle_no_return(v26 - 432);
      _Unwind_Resume(v31);
    }
LABEL_146:
    v27 = __asan_report_load8(v28);
    goto LABEL_147;
  }
LABEL_143:
  if ( v36 == (char *)v34 )
  {
    *(_QWORD *)((v34 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8034) = 0LL;
  }
  else
  {
    *(_QWORD *)v34 = 1172321806LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v34 >> 3) + 0x7FFF8038) = -168430091;
  }
};

// Line 72: range 0000000019C4A169-0000000019C4AE7C
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  boost::asio::detail::executor_function_base *v2; // r13
  unsigned __int64 v3; // rbp
  unsigned __int64 v4; // r12
  unsigned __int64 v5; // rdi
  boost::asio::detail::executor_function_base::func_type func; // rax
  __int64 (**v7)(void); // rax
  __int64 v8; // rax
  boost::asio::detail::executor_function_base *v9; // rdi
  boost::asio::detail::executor_function_base *v10; // rdi
  boost::asio::detail::executor_function_base::func_type v11; // rax
  boost::asio::detail::executor_function_base *v12; // rdi
  char v13; // al
  char v14; // al
  boost::asio::detail::executor_function_base::func_type v15; // rax
  char v16; // al
  char v17; // al
  __int64 v18; // rdi
  __int64 v19; // rax
  __int64 v20; // rsi OVERLAPPED
  __int64 v21; // rdx
  __int64 v22; // rax
  char v23; // dl
  char v24; // dl
  __int64 v25; // rdi
  unsigned __int64 v26; // rbx
  __int64 v27; // rax
  __int64 v28; // rdi
  char v29; // dl
  char v30; // dl
  struct _Unwind_Exception *v31; // rbp
  unsigned __int64 v32; // [rsp+0h] [rbp-258h]
  unsigned __int64 v34; // [rsp+20h] [rbp-238h]
  _DWORD *v35; // [rsp+30h] [rbp-228h]
  char v36[536]; // [rsp+40h] [rbp-218h] BYREF

  v34 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v22 = __asan_stack_malloc_3(480LL);
    if ( v22 )
      v34 = v22;
  }
  *(_QWORD *)v34 = 1102416563LL;
  *(_QWORD *)(v34 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 304 11 function:85";
  *(_QWORD *)(v34 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete;
  v35 = (_DWORD *)(v34 >> 3);
  v35[536862720] = -235802127;
  v35[536862721] = 61953;
  v35[536862722] = -218959360;
  v35[536862723] = 62194;
  v35[536862733] = -202116109;
  v35[536862734] = -202116109;
  *(_QWORD *)(v34 + 48) = v34 + 32;
  *(_QWORD *)(v34 + 56) = base;
  *(_QWORD *)(v34 + 64) = base;
  v3 = (unsigned __int64)&base[1];
  *(_QWORD *)(v34 + 112) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v34 + 120) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v34 + 128) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v4 = v34 + 136;
  if ( *(_BYTE *)(((v34 + 136) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store8();
    goto LABEL_74;
  }
  *(_QWORD *)(v34 + 136) = &`vtable for'boost::beast::async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v32 = v34 + 144;
  v2 = base + 5;
  if ( *(_BYTE *)(((unsigned __int64)&base[5] >> 3) + 0x7FFF8000) )
  {
LABEL_74:
    __asan_report_load8(v2);
    goto LABEL_75;
  }
  if ( *(_BYTE *)((v32 >> 3) + 0x7FFF8000) )
  {
LABEL_75:
    v5 = v32;
    __asan_report_store8();
    goto LABEL_76;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 144) = base[5];
  v5 = v34 + 152;
  if ( *(_BYTE *)(((v34 + 152) >> 3) + 0x7FFF8000) )
  {
LABEL_76:
    __asan_report_store8();
    goto LABEL_77;
  }
  *(_QWORD *)(v34 + 152) = 0LL;
  v5 = (unsigned __int64)&base[6];
  if ( *(_BYTE *)(((unsigned __int64)&base[6] >> 3) + 0x7FFF8000) )
  {
LABEL_77:
    __asan_report_load8(v5);
    goto LABEL_78;
  }
  func = base[6].func_;
  base[6].func_ = 0LL;
  *(_QWORD *)(v34 + 152) = func;
  base[5].func_ = 0LL;
  v5 = (unsigned __int64)&base[7];
  if ( *(_BYTE *)(((unsigned __int64)&base[7] >> 3) + 0x7FFF8000) )
  {
LABEL_78:
    __asan_report_load8(v5);
    goto LABEL_79;
  }
  v5 = v34 + 160;
  if ( *(_BYTE *)(((v34 + 160) >> 3) + 0x7FFF8000) )
  {
LABEL_79:
    __asan_report_store8();
    goto LABEL_80;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 160) = base[7];
  v5 = (unsigned __int64)&base[8];
  if ( *(_BYTE *)(((unsigned __int64)&base[8] >> 3) + 0x7FFF8000) )
  {
LABEL_80:
    __asan_report_load8(v5);
LABEL_81:
    v7 = (__int64 (**)(void))__asan_report_load8(v5);
    goto LABEL_82;
  }
  v5 = (unsigned __int64)base[8].func_;
  if ( !v5 )
    goto LABEL_14;
  if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
    goto LABEL_81;
  v7 = *(__int64 (***)(void))v5;
  if ( *(_BYTE *)((*(_QWORD *)v5 >> 3) + 0x7FFF8000LL) )
  {
LABEL_82:
    v8 = __asan_report_load8(v7);
    goto LABEL_83;
  }
  v5 = (*v7)();
LABEL_14:
  v8 = v34 + 168;
  if ( *(_BYTE *)(((v34 + 168) >> 3) + 0x7FFF8000) )
  {
LABEL_83:
    v9 = (boost::asio::detail::executor_function_base *)v8;
    __asan_report_store8();
    goto LABEL_84;
  }
  *(_QWORD *)(v34 + 168) = v5;
  v9 = base + 9;
  if ( *(_BYTE *)(((unsigned __int64)&base[9] >> 3) + 0x7FFF8000) )
  {
LABEL_84:
    __asan_report_load8(v9);
    goto LABEL_85;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 176);
  if ( *(_BYTE *)(((v34 + 176) >> 3) + 0x7FFF8000) )
  {
LABEL_85:
    __asan_report_store8();
    goto LABEL_86;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 176) = base[9];
  v9 = base + 10;
  if ( *(_BYTE *)(((unsigned __int64)&base[10] >> 3) + 0x7FFF8000) )
  {
LABEL_86:
    __asan_report_load8(v9);
    goto LABEL_87;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 184);
  if ( *(_BYTE *)(((v34 + 184) >> 3) + 0x7FFF8000) )
  {
LABEL_87:
    __asan_report_store8();
    goto LABEL_88;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 184) = base[10];
  v9 = base + 11;
  if ( *(_BYTE *)(((unsigned __int64)&base[11] >> 3) + 0x7FFF8000) )
  {
LABEL_88:
    __asan_report_load8(v9);
    goto LABEL_89;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 192);
  if ( *(_BYTE *)(((v34 + 192) >> 3) + 0x7FFF8000) )
  {
LABEL_89:
    __asan_report_store8();
    goto LABEL_90;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 192) = base[11];
  v9 = base + 12;
  if ( *(_BYTE *)(((unsigned __int64)&base[12] >> 3) + 0x7FFF8000) )
  {
LABEL_90:
    __asan_report_load8(v9);
    goto LABEL_91;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 200);
  if ( *(_BYTE *)(((v34 + 200) >> 3) + 0x7FFF8000) )
  {
LABEL_91:
    __asan_report_store8();
    goto LABEL_92;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 200) = base[12];
  v9 = base + 13;
  if ( *(_BYTE *)(((unsigned __int64)&base[13] >> 3) + 0x7FFF8000) )
  {
LABEL_92:
    __asan_report_load8(v9);
    goto LABEL_93;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 208);
  if ( *(_BYTE *)(((v34 + 208) >> 3) + 0x7FFF8000) )
  {
LABEL_93:
    __asan_report_store8();
    goto LABEL_94;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 208) = base[13];
  base[13].func_ = 0LL;
  v9 = base + 14;
  if ( *(char *)(((unsigned __int64)&base[14] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_94:
    __asan_report_load1(v9);
    goto LABEL_95;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 216);
  if ( *(char *)(((v34 + 216) >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_95:
    __asan_report_store1(v9);
    goto LABEL_96;
  }
  *(_BYTE *)(v34 + 216) = base[14].func_;
  LOBYTE(base[14].func_) = 0;
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
  {
LABEL_96:
    v10 = (boost::asio::detail::executor_function_base *)(v34 + 136);
    __asan_report_store8();
    goto LABEL_97;
  }
  *(_QWORD *)v4 = &`vtable for'boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                + 2;
  v10 = base + 15;
  if ( *(_BYTE *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000) )
  {
LABEL_97:
    __asan_report_load8(v10);
    goto LABEL_98;
  }
  v11 = base[15].func_;
  base[15].func_ = 0LL;
  if ( *(_BYTE *)(((v34 + 224) >> 3) + 0x7FFF8000) )
  {
LABEL_98:
    __asan_report_store8();
    goto LABEL_99;
  }
  *(_QWORD *)(v34 + 224) = v11;
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
  {
LABEL_99:
    v12 = (boost::asio::detail::executor_function_base *)(v34 + 136);
    __asan_report_store8();
    goto LABEL_100;
  }
  *(_QWORD *)v4 = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                + 2;
  v12 = base + 16;
  if ( *(_BYTE *)(((unsigned __int64)&base[16] >> 3) + 0x7FFF8000) )
  {
LABEL_100:
    __asan_report_load8(v12);
    goto LABEL_101;
  }
  v12 = (boost::asio::detail::executor_function_base *)(v34 + 232);
  if ( *(_BYTE *)(((v34 + 232) >> 3) + 0x7FFF8000) )
  {
LABEL_101:
    __asan_report_store8();
    goto LABEL_102;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 232) = base[16];
  v12 = base + 17;
  if ( *(_BYTE *)(((unsigned __int64)&base[17] >> 3) + 0x7FFF8000) )
  {
LABEL_102:
    __asan_report_load8(v12);
    goto LABEL_103;
  }
  v12 = (boost::asio::detail::executor_function_base *)(v34 + 240);
  if ( *(_BYTE *)(((v34 + 240) >> 3) + 0x7FFF8000) )
  {
LABEL_103:
    __asan_report_store8();
    goto LABEL_104;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 240) = base[17];
  v12 = base + 18;
  if ( *(_BYTE *)(((unsigned __int64)&base[18] >> 3) + 0x7FFF8000) )
  {
LABEL_104:
    __asan_report_load8(v12);
    goto LABEL_105;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 248) = base[18];
  base[18].func_ = 0LL;
  v12 = base + 19;
  if ( *(char *)(((unsigned __int64)&base[19] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_105:
    __asan_report_load1(v12);
LABEL_106:
    __asan_report_load4(v12);
    goto LABEL_107;
  }
  *(_BYTE *)(v34 + 256) = base[19].func_;
  LOBYTE(base[19].func_) = 0;
  v12 = base + 20;
  v13 = *(_BYTE *)(((unsigned __int64)&base[20] >> 3) + 0x7FFF8000);
  if ( v13 && v13 <= 3 )
    goto LABEL_106;
  *(_DWORD *)(v34 + 264) = base[20].func_;
  *(_QWORD *)(v34 + 128) = &`vtable for'boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v12 = base + 21;
  if ( *(_BYTE *)(((unsigned __int64)&base[21] >> 3) + 0x7FFF8000) )
  {
LABEL_107:
    __asan_report_load8(v12);
    goto LABEL_108;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 272) = base[21];
  v12 = base + 22;
  if ( *(_BYTE *)(((unsigned __int64)&base[22] >> 3) + 0x7FFF8000) )
  {
LABEL_108:
    __asan_report_load8(v12);
    goto LABEL_109;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 280) = base[22];
  v12 = base + 23;
  if ( *(_BYTE *)(((unsigned __int64)&base[23] >> 3) + 0x7FFF8000) )
  {
LABEL_109:
    __asan_report_load8(v12);
    goto LABEL_110;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 288) = base[23];
  v12 = base + 24;
  if ( *(_BYTE *)(((unsigned __int64)&base[24] >> 3) + 0x7FFF8000) )
  {
LABEL_110:
    __asan_report_load8(v12);
    goto LABEL_111;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 296) = base[24];
  base[24].func_ = 0LL;
  v12 = base + 25;
  if ( *(char *)(((unsigned __int64)&base[25] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_111:
    __asan_report_load1(v12);
    goto LABEL_112;
  }
  *(_BYTE *)(v34 + 304) = base[25].func_;
  LOBYTE(base[25].func_) = 0;
  *(_QWORD *)(v34 + 120) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v12 = base + 26;
  if ( *(_BYTE *)(((unsigned __int64)&base[26] >> 3) + 0x7FFF8000) )
  {
LABEL_112:
    __asan_report_load8(v12);
    goto LABEL_113;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 312) = base[26];
  v12 = base + 27;
  if ( *(_BYTE *)(((unsigned __int64)&base[27] >> 3) + 0x7FFF8000) )
  {
LABEL_113:
    __asan_report_load8(v12);
    goto LABEL_114;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 320) = base[27];
  v12 = base + 28;
  if ( *(_BYTE *)(((unsigned __int64)&base[28] >> 3) + 0x7FFF8000) )
  {
LABEL_114:
    __asan_report_load8(v12);
    goto LABEL_115;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 328) = base[28];
  base[28].func_ = 0LL;
  v12 = base + 29;
  if ( *(char *)(((unsigned __int64)&base[29] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_115:
    __asan_report_load1(v12);
LABEL_116:
    __asan_report_load4(v12);
    goto LABEL_117;
  }
  *(_BYTE *)(v34 + 336) = base[29].func_;
  LOBYTE(base[29].func_) = 0;
  v12 = base + 30;
  v14 = *(_BYTE *)(((unsigned __int64)&base[30] >> 3) + 0x7FFF8000);
  if ( v14 && v14 <= 3 )
    goto LABEL_116;
  *(_DWORD *)(v34 + 344) = base[30].func_;
  *(_QWORD *)(v34 + 112) = &`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                         + 2;
  v12 = base + 31;
  if ( *(_BYTE *)(((unsigned __int64)&base[31] >> 3) + 0x7FFF8000) )
  {
LABEL_117:
    __asan_report_load8(v12);
    goto LABEL_118;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 352) = base[31];
  *(_QWORD *)(v34 + 360) = 0LL;
  v12 = base + 32;
  if ( *(_BYTE *)(((unsigned __int64)&base[32] >> 3) + 0x7FFF8000) )
  {
LABEL_118:
    __asan_report_load8(v12);
    goto LABEL_119;
  }
  v15 = base[32].func_;
  base[32].func_ = 0LL;
  *(_QWORD *)(v34 + 360) = v15;
  base[31].func_ = 0LL;
  v12 = base + 33;
  if ( *(_BYTE *)(((unsigned __int64)&base[33] >> 3) + 0x7FFF8000) )
  {
LABEL_119:
    __asan_report_load8(v12);
LABEL_120:
    __asan_report_load1(v12);
    goto LABEL_121;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 368) = base[33];
  v12 = base + 34;
  v16 = *(_BYTE *)(((unsigned __int64)&base[34] >> 3) + 0x7FFF8000);
  if ( v16 <= (((unsigned __int8)base + 16) & 7) && v16 )
    goto LABEL_120;
  v17 = (char)base[34].func_;
  LOBYTE(base[34].func_) = 0;
  *(_BYTE *)(v34 + 376) = v17;
  v12 = base + 35;
  if ( *(_BYTE *)(((unsigned __int64)&base[35] >> 3) + 0x7FFF8000) )
  {
LABEL_121:
    __asan_report_load8(v12);
    goto LABEL_122;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 384) = base[35];
  v12 = base + 36;
  if ( *(_WORD *)(((unsigned __int64)&base[36] >> 3) + 0x7FFF8000) )
  {
LABEL_122:
    __asan_report_load16(v12);
    goto LABEL_123;
  }
  *(__m128i *)(v34 + 392) = _mm_loadu_si128((const __m128i *)&base[36]);
  v12 = base + 38;
  if ( *(_BYTE *)(((unsigned __int64)&base[38] >> 3) + 0x7FFF8000) )
  {
LABEL_123:
    __asan_report_load8(v12);
    goto LABEL_124;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 408) = base[38];
  v18 = *(_QWORD *)(v34 + 64);
  if ( v18 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v18 + 8));
    *(_QWORD *)(v34 + 64) = 0LL;
  }
  v3 = *(_QWORD *)(v34 + 56);
  if ( !v3 )
    goto LABEL_69;
  v19 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v19 )
  {
    v12 = (boost::asio::detail::executor_function_base *)(v19 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 8) >> 3) + 0x7FFF8000) )
    {
      v19 = *(_QWORD *)(v19 + 8);
      goto LABEL_64;
    }
LABEL_124:
    __asan_report_load8(v12);
    goto LABEL_125;
  }
LABEL_64:
  if ( v19 )
  {
    v12 = (boost::asio::detail::executor_function_base *)(v19 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v19 + 16) )
        goto LABEL_67;
LABEL_126:
      v23 = *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000);
      if ( v23 <= (char)((v3 + 64) & 7) && v23 )
      {
        __asan_report_load1(v3 + 320);
      }
      else
      {
        v24 = *(_BYTE *)((v3 >> 3) + 0x7FFF8000);
        if ( v24 > (char)(v3 & 7) || !v24 )
        {
          *(_BYTE *)v3 = *(_BYTE *)(v3 + 320);
          *(_QWORD *)(v19 + 16) = v3;
          goto LABEL_68;
        }
      }
      __asan_report_store1(v3);
      goto LABEL_133;
    }
LABEL_125:
    v19 = __asan_report_load8(v12);
    goto LABEL_126;
  }
LABEL_67:
  operator delete(*(void **)(v34 + 56));
LABEL_68:
  *(_QWORD *)(v34 + 56) = 0LL;
LABEL_69:
  if ( call )
  {
    v20 = *(_QWORD *)(v34 + 392);
    v21 = *(_QWORD *)(v34 + 400);
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::operator()(
      (boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v34 + 112),
      *(boost::beast::error_code *)&v20,
      *(_QWORD *)(v34 + 408));
  }
LABEL_133:
  boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v34 + 112));
  v25 = *(_QWORD *)(v34 + 64);
  if ( v25 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v25 + 8));
    *(_QWORD *)(v34 + 64) = 0LL;
  }
  v26 = *(_QWORD *)(v34 + 56);
  if ( v26 )
  {
    v27 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v27 )
    {
      v28 = v27 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v27 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v28);
        goto LABEL_146;
      }
      v27 = *(_QWORD *)(v27 + 8);
    }
    if ( !v27 )
    {
LABEL_142:
      operator delete((void *)v26);
      goto LABEL_143;
    }
    v28 = v27 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v27 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v27 + 16) )
        goto LABEL_142;
LABEL_147:
      v29 = *(_BYTE *)(((v26 + 320) >> 3) + 0x7FFF8000);
      if ( v29 <= (char)((v26 + 64) & 7) && v29 )
      {
        __asan_report_load1(v26 + 320);
      }
      else
      {
        v30 = *(_BYTE *)((v26 >> 3) + 0x7FFF8000);
        if ( v30 > (char)(v26 & 7) || !v30 )
        {
          *(_BYTE *)v26 = *(_BYTE *)(v26 + 320);
          *(_QWORD *)(v27 + 16) = v26;
          goto LABEL_143;
        }
      }
      v31 = (struct _Unwind_Exception *)__asan_report_store1(v26);
      boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v26 - 368));
      boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const)(v26 - 432));
      __asan_handle_no_return(v26 - 432);
      _Unwind_Resume(v31);
    }
LABEL_146:
    v27 = __asan_report_load8(v28);
    goto LABEL_147;
  }
LABEL_143:
  if ( v36 == (char *)v34 )
  {
    *(_QWORD *)((v34 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8034) = 0LL;
  }
  else
  {
    *(_QWORD *)v34 = 1172321806LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v34 >> 3) + 0x7FFF8038) = -168430091;
  }
};

// Line 72: range 0000000019C3B217-0000000019C3BF2A
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  boost::asio::detail::executor_function_base *v2; // r13
  unsigned __int64 v3; // rbp
  unsigned __int64 v4; // r12
  unsigned __int64 v5; // rdi
  boost::asio::detail::executor_function_base::func_type func; // rax
  __int64 (**v7)(void); // rax
  __int64 v8; // rax
  boost::asio::detail::executor_function_base *v9; // rdi
  boost::asio::detail::executor_function_base *v10; // rdi
  boost::asio::detail::executor_function_base::func_type v11; // rax
  boost::asio::detail::executor_function_base *v12; // rdi
  char v13; // al
  char v14; // al
  boost::asio::detail::executor_function_base::func_type v15; // rax
  char v16; // al
  char v17; // al
  __int64 v18; // rdi
  __int64 v19; // rax
  __int64 v20; // rsi OVERLAPPED
  __int64 v21; // rdx
  __int64 v22; // rax
  char v23; // dl
  char v24; // dl
  __int64 v25; // rdi
  unsigned __int64 v26; // rbx
  __int64 v27; // rax
  __int64 v28; // rdi
  char v29; // dl
  char v30; // dl
  struct _Unwind_Exception *v31; // rbp
  unsigned __int64 v32; // [rsp+0h] [rbp-258h]
  unsigned __int64 v34; // [rsp+20h] [rbp-238h]
  _DWORD *v35; // [rsp+30h] [rbp-228h]
  char v36[536]; // [rsp+40h] [rbp-218h] BYREF

  v34 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v22 = __asan_stack_malloc_3(480LL);
    if ( v22 )
      v34 = v22;
  }
  *(_QWORD *)v34 = 1102416563LL;
  *(_QWORD *)(v34 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 304 11 function:85";
  *(_QWORD *)(v34 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete;
  v35 = (_DWORD *)(v34 >> 3);
  v35[536862720] = -235802127;
  v35[536862721] = 61953;
  v35[536862722] = -218959360;
  v35[536862723] = 62194;
  v35[536862733] = -202116109;
  v35[536862734] = -202116109;
  *(_QWORD *)(v34 + 48) = v34 + 32;
  *(_QWORD *)(v34 + 56) = base;
  *(_QWORD *)(v34 + 64) = base;
  v3 = (unsigned __int64)&base[1];
  *(_QWORD *)(v34 + 112) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v34 + 120) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v34 + 128) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v4 = v34 + 136;
  if ( *(_BYTE *)(((v34 + 136) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store8();
    goto LABEL_74;
  }
  *(_QWORD *)(v34 + 136) = &`vtable for'boost::beast::async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v32 = v34 + 144;
  v2 = base + 5;
  if ( *(_BYTE *)(((unsigned __int64)&base[5] >> 3) + 0x7FFF8000) )
  {
LABEL_74:
    __asan_report_load8(v2);
    goto LABEL_75;
  }
  if ( *(_BYTE *)((v32 >> 3) + 0x7FFF8000) )
  {
LABEL_75:
    v5 = v32;
    __asan_report_store8();
    goto LABEL_76;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 144) = base[5];
  v5 = v34 + 152;
  if ( *(_BYTE *)(((v34 + 152) >> 3) + 0x7FFF8000) )
  {
LABEL_76:
    __asan_report_store8();
    goto LABEL_77;
  }
  *(_QWORD *)(v34 + 152) = 0LL;
  v5 = (unsigned __int64)&base[6];
  if ( *(_BYTE *)(((unsigned __int64)&base[6] >> 3) + 0x7FFF8000) )
  {
LABEL_77:
    __asan_report_load8(v5);
    goto LABEL_78;
  }
  func = base[6].func_;
  base[6].func_ = 0LL;
  *(_QWORD *)(v34 + 152) = func;
  base[5].func_ = 0LL;
  v5 = (unsigned __int64)&base[7];
  if ( *(_BYTE *)(((unsigned __int64)&base[7] >> 3) + 0x7FFF8000) )
  {
LABEL_78:
    __asan_report_load8(v5);
    goto LABEL_79;
  }
  v5 = v34 + 160;
  if ( *(_BYTE *)(((v34 + 160) >> 3) + 0x7FFF8000) )
  {
LABEL_79:
    __asan_report_store8();
    goto LABEL_80;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 160) = base[7];
  v5 = (unsigned __int64)&base[8];
  if ( *(_BYTE *)(((unsigned __int64)&base[8] >> 3) + 0x7FFF8000) )
  {
LABEL_80:
    __asan_report_load8(v5);
LABEL_81:
    v7 = (__int64 (**)(void))__asan_report_load8(v5);
    goto LABEL_82;
  }
  v5 = (unsigned __int64)base[8].func_;
  if ( !v5 )
    goto LABEL_14;
  if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
    goto LABEL_81;
  v7 = *(__int64 (***)(void))v5;
  if ( *(_BYTE *)((*(_QWORD *)v5 >> 3) + 0x7FFF8000LL) )
  {
LABEL_82:
    v8 = __asan_report_load8(v7);
    goto LABEL_83;
  }
  v5 = (*v7)();
LABEL_14:
  v8 = v34 + 168;
  if ( *(_BYTE *)(((v34 + 168) >> 3) + 0x7FFF8000) )
  {
LABEL_83:
    v9 = (boost::asio::detail::executor_function_base *)v8;
    __asan_report_store8();
    goto LABEL_84;
  }
  *(_QWORD *)(v34 + 168) = v5;
  v9 = base + 9;
  if ( *(_BYTE *)(((unsigned __int64)&base[9] >> 3) + 0x7FFF8000) )
  {
LABEL_84:
    __asan_report_load8(v9);
    goto LABEL_85;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 176);
  if ( *(_BYTE *)(((v34 + 176) >> 3) + 0x7FFF8000) )
  {
LABEL_85:
    __asan_report_store8();
    goto LABEL_86;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 176) = base[9];
  v9 = base + 10;
  if ( *(_BYTE *)(((unsigned __int64)&base[10] >> 3) + 0x7FFF8000) )
  {
LABEL_86:
    __asan_report_load8(v9);
    goto LABEL_87;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 184);
  if ( *(_BYTE *)(((v34 + 184) >> 3) + 0x7FFF8000) )
  {
LABEL_87:
    __asan_report_store8();
    goto LABEL_88;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 184) = base[10];
  v9 = base + 11;
  if ( *(_BYTE *)(((unsigned __int64)&base[11] >> 3) + 0x7FFF8000) )
  {
LABEL_88:
    __asan_report_load8(v9);
    goto LABEL_89;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 192);
  if ( *(_BYTE *)(((v34 + 192) >> 3) + 0x7FFF8000) )
  {
LABEL_89:
    __asan_report_store8();
    goto LABEL_90;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 192) = base[11];
  v9 = base + 12;
  if ( *(_BYTE *)(((unsigned __int64)&base[12] >> 3) + 0x7FFF8000) )
  {
LABEL_90:
    __asan_report_load8(v9);
    goto LABEL_91;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 200);
  if ( *(_BYTE *)(((v34 + 200) >> 3) + 0x7FFF8000) )
  {
LABEL_91:
    __asan_report_store8();
    goto LABEL_92;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 200) = base[12];
  v9 = base + 13;
  if ( *(_BYTE *)(((unsigned __int64)&base[13] >> 3) + 0x7FFF8000) )
  {
LABEL_92:
    __asan_report_load8(v9);
    goto LABEL_93;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 208);
  if ( *(_BYTE *)(((v34 + 208) >> 3) + 0x7FFF8000) )
  {
LABEL_93:
    __asan_report_store8();
    goto LABEL_94;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 208) = base[13];
  base[13].func_ = 0LL;
  v9 = base + 14;
  if ( *(char *)(((unsigned __int64)&base[14] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_94:
    __asan_report_load1(v9);
    goto LABEL_95;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 216);
  if ( *(char *)(((v34 + 216) >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_95:
    __asan_report_store1(v9);
    goto LABEL_96;
  }
  *(_BYTE *)(v34 + 216) = base[14].func_;
  LOBYTE(base[14].func_) = 0;
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
  {
LABEL_96:
    v10 = (boost::asio::detail::executor_function_base *)(v34 + 136);
    __asan_report_store8();
    goto LABEL_97;
  }
  *(_QWORD *)v4 = &`vtable for'boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                + 2;
  v10 = base + 15;
  if ( *(_BYTE *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000) )
  {
LABEL_97:
    __asan_report_load8(v10);
    goto LABEL_98;
  }
  v11 = base[15].func_;
  base[15].func_ = 0LL;
  if ( *(_BYTE *)(((v34 + 224) >> 3) + 0x7FFF8000) )
  {
LABEL_98:
    __asan_report_store8();
    goto LABEL_99;
  }
  *(_QWORD *)(v34 + 224) = v11;
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
  {
LABEL_99:
    v12 = (boost::asio::detail::executor_function_base *)(v34 + 136);
    __asan_report_store8();
    goto LABEL_100;
  }
  *(_QWORD *)v4 = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                + 2;
  v12 = base + 16;
  if ( *(_BYTE *)(((unsigned __int64)&base[16] >> 3) + 0x7FFF8000) )
  {
LABEL_100:
    __asan_report_load8(v12);
    goto LABEL_101;
  }
  v12 = (boost::asio::detail::executor_function_base *)(v34 + 232);
  if ( *(_BYTE *)(((v34 + 232) >> 3) + 0x7FFF8000) )
  {
LABEL_101:
    __asan_report_store8();
    goto LABEL_102;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 232) = base[16];
  v12 = base + 17;
  if ( *(_BYTE *)(((unsigned __int64)&base[17] >> 3) + 0x7FFF8000) )
  {
LABEL_102:
    __asan_report_load8(v12);
    goto LABEL_103;
  }
  v12 = (boost::asio::detail::executor_function_base *)(v34 + 240);
  if ( *(_BYTE *)(((v34 + 240) >> 3) + 0x7FFF8000) )
  {
LABEL_103:
    __asan_report_store8();
    goto LABEL_104;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 240) = base[17];
  v12 = base + 18;
  if ( *(_BYTE *)(((unsigned __int64)&base[18] >> 3) + 0x7FFF8000) )
  {
LABEL_104:
    __asan_report_load8(v12);
    goto LABEL_105;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 248) = base[18];
  base[18].func_ = 0LL;
  v12 = base + 19;
  if ( *(char *)(((unsigned __int64)&base[19] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_105:
    __asan_report_load1(v12);
LABEL_106:
    __asan_report_load4(v12);
    goto LABEL_107;
  }
  *(_BYTE *)(v34 + 256) = base[19].func_;
  LOBYTE(base[19].func_) = 0;
  v12 = base + 20;
  v13 = *(_BYTE *)(((unsigned __int64)&base[20] >> 3) + 0x7FFF8000);
  if ( v13 && v13 <= 3 )
    goto LABEL_106;
  *(_DWORD *)(v34 + 264) = base[20].func_;
  *(_QWORD *)(v34 + 128) = &`vtable for'boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v12 = base + 21;
  if ( *(_BYTE *)(((unsigned __int64)&base[21] >> 3) + 0x7FFF8000) )
  {
LABEL_107:
    __asan_report_load8(v12);
    goto LABEL_108;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 272) = base[21];
  v12 = base + 22;
  if ( *(_BYTE *)(((unsigned __int64)&base[22] >> 3) + 0x7FFF8000) )
  {
LABEL_108:
    __asan_report_load8(v12);
    goto LABEL_109;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 280) = base[22];
  v12 = base + 23;
  if ( *(_BYTE *)(((unsigned __int64)&base[23] >> 3) + 0x7FFF8000) )
  {
LABEL_109:
    __asan_report_load8(v12);
    goto LABEL_110;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 288) = base[23];
  v12 = base + 24;
  if ( *(_BYTE *)(((unsigned __int64)&base[24] >> 3) + 0x7FFF8000) )
  {
LABEL_110:
    __asan_report_load8(v12);
    goto LABEL_111;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 296) = base[24];
  base[24].func_ = 0LL;
  v12 = base + 25;
  if ( *(char *)(((unsigned __int64)&base[25] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_111:
    __asan_report_load1(v12);
    goto LABEL_112;
  }
  *(_BYTE *)(v34 + 304) = base[25].func_;
  LOBYTE(base[25].func_) = 0;
  *(_QWORD *)(v34 + 120) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v12 = base + 26;
  if ( *(_BYTE *)(((unsigned __int64)&base[26] >> 3) + 0x7FFF8000) )
  {
LABEL_112:
    __asan_report_load8(v12);
    goto LABEL_113;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 312) = base[26];
  v12 = base + 27;
  if ( *(_BYTE *)(((unsigned __int64)&base[27] >> 3) + 0x7FFF8000) )
  {
LABEL_113:
    __asan_report_load8(v12);
    goto LABEL_114;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 320) = base[27];
  v12 = base + 28;
  if ( *(_BYTE *)(((unsigned __int64)&base[28] >> 3) + 0x7FFF8000) )
  {
LABEL_114:
    __asan_report_load8(v12);
    goto LABEL_115;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 328) = base[28];
  base[28].func_ = 0LL;
  v12 = base + 29;
  if ( *(char *)(((unsigned __int64)&base[29] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_115:
    __asan_report_load1(v12);
LABEL_116:
    __asan_report_load4(v12);
    goto LABEL_117;
  }
  *(_BYTE *)(v34 + 336) = base[29].func_;
  LOBYTE(base[29].func_) = 0;
  v12 = base + 30;
  v14 = *(_BYTE *)(((unsigned __int64)&base[30] >> 3) + 0x7FFF8000);
  if ( v14 && v14 <= 3 )
    goto LABEL_116;
  *(_DWORD *)(v34 + 344) = base[30].func_;
  *(_QWORD *)(v34 + 112) = &`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                         + 2;
  v12 = base + 31;
  if ( *(_BYTE *)(((unsigned __int64)&base[31] >> 3) + 0x7FFF8000) )
  {
LABEL_117:
    __asan_report_load8(v12);
    goto LABEL_118;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 352) = base[31];
  *(_QWORD *)(v34 + 360) = 0LL;
  v12 = base + 32;
  if ( *(_BYTE *)(((unsigned __int64)&base[32] >> 3) + 0x7FFF8000) )
  {
LABEL_118:
    __asan_report_load8(v12);
    goto LABEL_119;
  }
  v15 = base[32].func_;
  base[32].func_ = 0LL;
  *(_QWORD *)(v34 + 360) = v15;
  base[31].func_ = 0LL;
  v12 = base + 33;
  if ( *(_BYTE *)(((unsigned __int64)&base[33] >> 3) + 0x7FFF8000) )
  {
LABEL_119:
    __asan_report_load8(v12);
LABEL_120:
    __asan_report_load1(v12);
    goto LABEL_121;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 368) = base[33];
  v12 = base + 34;
  v16 = *(_BYTE *)(((unsigned __int64)&base[34] >> 3) + 0x7FFF8000);
  if ( v16 <= (((unsigned __int8)base + 16) & 7) && v16 )
    goto LABEL_120;
  v17 = (char)base[34].func_;
  LOBYTE(base[34].func_) = 0;
  *(_BYTE *)(v34 + 376) = v17;
  v12 = base + 35;
  if ( *(_BYTE *)(((unsigned __int64)&base[35] >> 3) + 0x7FFF8000) )
  {
LABEL_121:
    __asan_report_load8(v12);
    goto LABEL_122;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 384) = base[35];
  v12 = base + 36;
  if ( *(_WORD *)(((unsigned __int64)&base[36] >> 3) + 0x7FFF8000) )
  {
LABEL_122:
    __asan_report_load16(v12);
    goto LABEL_123;
  }
  *(__m128i *)(v34 + 392) = _mm_loadu_si128((const __m128i *)&base[36]);
  v12 = base + 38;
  if ( *(_BYTE *)(((unsigned __int64)&base[38] >> 3) + 0x7FFF8000) )
  {
LABEL_123:
    __asan_report_load8(v12);
    goto LABEL_124;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 408) = base[38];
  v18 = *(_QWORD *)(v34 + 64);
  if ( v18 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::asio::const_buffer> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v18 + 8));
    *(_QWORD *)(v34 + 64) = 0LL;
  }
  v3 = *(_QWORD *)(v34 + 56);
  if ( !v3 )
    goto LABEL_69;
  v19 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v19 )
  {
    v12 = (boost::asio::detail::executor_function_base *)(v19 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 8) >> 3) + 0x7FFF8000) )
    {
      v19 = *(_QWORD *)(v19 + 8);
      goto LABEL_64;
    }
LABEL_124:
    __asan_report_load8(v12);
    goto LABEL_125;
  }
LABEL_64:
  if ( v19 )
  {
    v12 = (boost::asio::detail::executor_function_base *)(v19 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v19 + 16) )
        goto LABEL_67;
LABEL_126:
      v23 = *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000);
      if ( v23 <= (char)((v3 + 64) & 7) && v23 )
      {
        __asan_report_load1(v3 + 320);
      }
      else
      {
        v24 = *(_BYTE *)((v3 >> 3) + 0x7FFF8000);
        if ( v24 > (char)(v3 & 7) || !v24 )
        {
          *(_BYTE *)v3 = *(_BYTE *)(v3 + 320);
          *(_QWORD *)(v19 + 16) = v3;
          goto LABEL_68;
        }
      }
      __asan_report_store1(v3);
      goto LABEL_133;
    }
LABEL_125:
    v19 = __asan_report_load8(v12);
    goto LABEL_126;
  }
LABEL_67:
  operator delete(*(void **)(v34 + 56));
LABEL_68:
  *(_QWORD *)(v34 + 56) = 0LL;
LABEL_69:
  if ( call )
  {
    v20 = *(_QWORD *)(v34 + 392);
    v21 = *(_QWORD *)(v34 + 400);
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::operator()(
      (boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::asio::const_buffer> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v34 + 112),
      *(boost::beast::error_code *)&v20,
      *(_QWORD *)(v34 + 408));
  }
LABEL_133:
  boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::asio::const_buffer> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v34 + 112));
  v25 = *(_QWORD *)(v34 + 64);
  if ( v25 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::asio::const_buffer> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v25 + 8));
    *(_QWORD *)(v34 + 64) = 0LL;
  }
  v26 = *(_QWORD *)(v34 + 56);
  if ( v26 )
  {
    v27 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v27 )
    {
      v28 = v27 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v27 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v28);
        goto LABEL_146;
      }
      v27 = *(_QWORD *)(v27 + 8);
    }
    if ( !v27 )
    {
LABEL_142:
      operator delete((void *)v26);
      goto LABEL_143;
    }
    v28 = v27 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v27 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v27 + 16) )
        goto LABEL_142;
LABEL_147:
      v29 = *(_BYTE *)(((v26 + 320) >> 3) + 0x7FFF8000);
      if ( v29 <= (char)((v26 + 64) & 7) && v29 )
      {
        __asan_report_load1(v26 + 320);
      }
      else
      {
        v30 = *(_BYTE *)((v26 >> 3) + 0x7FFF8000);
        if ( v30 > (char)(v26 & 7) || !v30 )
        {
          *(_BYTE *)v26 = *(_BYTE *)(v26 + 320);
          *(_QWORD *)(v27 + 16) = v26;
          goto LABEL_143;
        }
      }
      v31 = (struct _Unwind_Exception *)__asan_report_store1(v26);
      boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::asio::const_buffer> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v26 - 368));
      boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::asio::const_buffer> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const)(v26 - 432));
      __asan_handle_no_return(v26 - 432);
      _Unwind_Resume(v31);
    }
LABEL_146:
    v27 = __asan_report_load8(v28);
    goto LABEL_147;
  }
LABEL_143:
  if ( v36 == (char *)v34 )
  {
    *(_QWORD *)((v34 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8034) = 0LL;
  }
  else
  {
    *(_QWORD *)v34 = 1172321806LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v34 >> 3) + 0x7FFF8038) = -168430091;
  }
};

// Line 72: range 0000000019C38D4F-0000000019C39A62
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  boost::asio::detail::executor_function_base *v2; // r13
  unsigned __int64 v3; // rbp
  unsigned __int64 v4; // r12
  unsigned __int64 v5; // rdi
  boost::asio::detail::executor_function_base::func_type func; // rax
  __int64 (**v7)(void); // rax
  __int64 v8; // rax
  boost::asio::detail::executor_function_base *v9; // rdi
  boost::asio::detail::executor_function_base *v10; // rdi
  boost::asio::detail::executor_function_base::func_type v11; // rax
  boost::asio::detail::executor_function_base *v12; // rdi
  char v13; // al
  char v14; // al
  boost::asio::detail::executor_function_base::func_type v15; // rax
  char v16; // al
  char v17; // al
  __int64 v18; // rdi
  __int64 v19; // rax
  __int64 v20; // rsi OVERLAPPED
  __int64 v21; // rdx
  __int64 v22; // rax
  char v23; // dl
  char v24; // dl
  __int64 v25; // rdi
  unsigned __int64 v26; // rbx
  __int64 v27; // rax
  __int64 v28; // rdi
  char v29; // dl
  char v30; // dl
  struct _Unwind_Exception *v31; // rbp
  unsigned __int64 v32; // [rsp+0h] [rbp-258h]
  unsigned __int64 v34; // [rsp+20h] [rbp-238h]
  _DWORD *v35; // [rsp+30h] [rbp-228h]
  char v36[536]; // [rsp+40h] [rbp-218h] BYREF

  v34 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v22 = __asan_stack_malloc_3(480LL);
    if ( v22 )
      v34 = v22;
  }
  *(_QWORD *)v34 = 1102416563LL;
  *(_QWORD *)(v34 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 304 11 function:85";
  *(_QWORD *)(v34 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete;
  v35 = (_DWORD *)(v34 >> 3);
  v35[536862720] = -235802127;
  v35[536862721] = 61953;
  v35[536862722] = -218959360;
  v35[536862723] = 62194;
  v35[536862733] = -202116109;
  v35[536862734] = -202116109;
  *(_QWORD *)(v34 + 48) = v34 + 32;
  *(_QWORD *)(v34 + 56) = base;
  *(_QWORD *)(v34 + 64) = base;
  v3 = (unsigned __int64)&base[1];
  *(_QWORD *)(v34 + 112) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v34 + 120) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v34 + 128) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v4 = v34 + 136;
  if ( *(_BYTE *)(((v34 + 136) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store8();
    goto LABEL_74;
  }
  *(_QWORD *)(v34 + 136) = &`vtable for'boost::beast::async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v32 = v34 + 144;
  v2 = base + 5;
  if ( *(_BYTE *)(((unsigned __int64)&base[5] >> 3) + 0x7FFF8000) )
  {
LABEL_74:
    __asan_report_load8(v2);
    goto LABEL_75;
  }
  if ( *(_BYTE *)((v32 >> 3) + 0x7FFF8000) )
  {
LABEL_75:
    v5 = v32;
    __asan_report_store8();
    goto LABEL_76;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 144) = base[5];
  v5 = v34 + 152;
  if ( *(_BYTE *)(((v34 + 152) >> 3) + 0x7FFF8000) )
  {
LABEL_76:
    __asan_report_store8();
    goto LABEL_77;
  }
  *(_QWORD *)(v34 + 152) = 0LL;
  v5 = (unsigned __int64)&base[6];
  if ( *(_BYTE *)(((unsigned __int64)&base[6] >> 3) + 0x7FFF8000) )
  {
LABEL_77:
    __asan_report_load8(v5);
    goto LABEL_78;
  }
  func = base[6].func_;
  base[6].func_ = 0LL;
  *(_QWORD *)(v34 + 152) = func;
  base[5].func_ = 0LL;
  v5 = (unsigned __int64)&base[7];
  if ( *(_BYTE *)(((unsigned __int64)&base[7] >> 3) + 0x7FFF8000) )
  {
LABEL_78:
    __asan_report_load8(v5);
    goto LABEL_79;
  }
  v5 = v34 + 160;
  if ( *(_BYTE *)(((v34 + 160) >> 3) + 0x7FFF8000) )
  {
LABEL_79:
    __asan_report_store8();
    goto LABEL_80;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 160) = base[7];
  v5 = (unsigned __int64)&base[8];
  if ( *(_BYTE *)(((unsigned __int64)&base[8] >> 3) + 0x7FFF8000) )
  {
LABEL_80:
    __asan_report_load8(v5);
LABEL_81:
    v7 = (__int64 (**)(void))__asan_report_load8(v5);
    goto LABEL_82;
  }
  v5 = (unsigned __int64)base[8].func_;
  if ( !v5 )
    goto LABEL_14;
  if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
    goto LABEL_81;
  v7 = *(__int64 (***)(void))v5;
  if ( *(_BYTE *)((*(_QWORD *)v5 >> 3) + 0x7FFF8000LL) )
  {
LABEL_82:
    v8 = __asan_report_load8(v7);
    goto LABEL_83;
  }
  v5 = (*v7)();
LABEL_14:
  v8 = v34 + 168;
  if ( *(_BYTE *)(((v34 + 168) >> 3) + 0x7FFF8000) )
  {
LABEL_83:
    v9 = (boost::asio::detail::executor_function_base *)v8;
    __asan_report_store8();
    goto LABEL_84;
  }
  *(_QWORD *)(v34 + 168) = v5;
  v9 = base + 9;
  if ( *(_BYTE *)(((unsigned __int64)&base[9] >> 3) + 0x7FFF8000) )
  {
LABEL_84:
    __asan_report_load8(v9);
    goto LABEL_85;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 176);
  if ( *(_BYTE *)(((v34 + 176) >> 3) + 0x7FFF8000) )
  {
LABEL_85:
    __asan_report_store8();
    goto LABEL_86;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 176) = base[9];
  v9 = base + 10;
  if ( *(_BYTE *)(((unsigned __int64)&base[10] >> 3) + 0x7FFF8000) )
  {
LABEL_86:
    __asan_report_load8(v9);
    goto LABEL_87;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 184);
  if ( *(_BYTE *)(((v34 + 184) >> 3) + 0x7FFF8000) )
  {
LABEL_87:
    __asan_report_store8();
    goto LABEL_88;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 184) = base[10];
  v9 = base + 11;
  if ( *(_BYTE *)(((unsigned __int64)&base[11] >> 3) + 0x7FFF8000) )
  {
LABEL_88:
    __asan_report_load8(v9);
    goto LABEL_89;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 192);
  if ( *(_BYTE *)(((v34 + 192) >> 3) + 0x7FFF8000) )
  {
LABEL_89:
    __asan_report_store8();
    goto LABEL_90;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 192) = base[11];
  v9 = base + 12;
  if ( *(_BYTE *)(((unsigned __int64)&base[12] >> 3) + 0x7FFF8000) )
  {
LABEL_90:
    __asan_report_load8(v9);
    goto LABEL_91;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 200);
  if ( *(_BYTE *)(((v34 + 200) >> 3) + 0x7FFF8000) )
  {
LABEL_91:
    __asan_report_store8();
    goto LABEL_92;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 200) = base[12];
  v9 = base + 13;
  if ( *(_BYTE *)(((unsigned __int64)&base[13] >> 3) + 0x7FFF8000) )
  {
LABEL_92:
    __asan_report_load8(v9);
    goto LABEL_93;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 208);
  if ( *(_BYTE *)(((v34 + 208) >> 3) + 0x7FFF8000) )
  {
LABEL_93:
    __asan_report_store8();
    goto LABEL_94;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 208) = base[13];
  base[13].func_ = 0LL;
  v9 = base + 14;
  if ( *(char *)(((unsigned __int64)&base[14] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_94:
    __asan_report_load1(v9);
    goto LABEL_95;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 216);
  if ( *(char *)(((v34 + 216) >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_95:
    __asan_report_store1(v9);
    goto LABEL_96;
  }
  *(_BYTE *)(v34 + 216) = base[14].func_;
  LOBYTE(base[14].func_) = 0;
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
  {
LABEL_96:
    v10 = (boost::asio::detail::executor_function_base *)(v34 + 136);
    __asan_report_store8();
    goto LABEL_97;
  }
  *(_QWORD *)v4 = &`vtable for'boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                + 2;
  v10 = base + 15;
  if ( *(_BYTE *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000) )
  {
LABEL_97:
    __asan_report_load8(v10);
    goto LABEL_98;
  }
  v11 = base[15].func_;
  base[15].func_ = 0LL;
  if ( *(_BYTE *)(((v34 + 224) >> 3) + 0x7FFF8000) )
  {
LABEL_98:
    __asan_report_store8();
    goto LABEL_99;
  }
  *(_QWORD *)(v34 + 224) = v11;
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
  {
LABEL_99:
    v12 = (boost::asio::detail::executor_function_base *)(v34 + 136);
    __asan_report_store8();
    goto LABEL_100;
  }
  *(_QWORD *)v4 = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                + 2;
  v12 = base + 16;
  if ( *(_BYTE *)(((unsigned __int64)&base[16] >> 3) + 0x7FFF8000) )
  {
LABEL_100:
    __asan_report_load8(v12);
    goto LABEL_101;
  }
  v12 = (boost::asio::detail::executor_function_base *)(v34 + 232);
  if ( *(_BYTE *)(((v34 + 232) >> 3) + 0x7FFF8000) )
  {
LABEL_101:
    __asan_report_store8();
    goto LABEL_102;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 232) = base[16];
  v12 = base + 17;
  if ( *(_BYTE *)(((unsigned __int64)&base[17] >> 3) + 0x7FFF8000) )
  {
LABEL_102:
    __asan_report_load8(v12);
    goto LABEL_103;
  }
  v12 = (boost::asio::detail::executor_function_base *)(v34 + 240);
  if ( *(_BYTE *)(((v34 + 240) >> 3) + 0x7FFF8000) )
  {
LABEL_103:
    __asan_report_store8();
    goto LABEL_104;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 240) = base[17];
  v12 = base + 18;
  if ( *(_BYTE *)(((unsigned __int64)&base[18] >> 3) + 0x7FFF8000) )
  {
LABEL_104:
    __asan_report_load8(v12);
    goto LABEL_105;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 248) = base[18];
  base[18].func_ = 0LL;
  v12 = base + 19;
  if ( *(char *)(((unsigned __int64)&base[19] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_105:
    __asan_report_load1(v12);
LABEL_106:
    __asan_report_load4(v12);
    goto LABEL_107;
  }
  *(_BYTE *)(v34 + 256) = base[19].func_;
  LOBYTE(base[19].func_) = 0;
  v12 = base + 20;
  v13 = *(_BYTE *)(((unsigned __int64)&base[20] >> 3) + 0x7FFF8000);
  if ( v13 && v13 <= 3 )
    goto LABEL_106;
  *(_DWORD *)(v34 + 264) = base[20].func_;
  *(_QWORD *)(v34 + 128) = &`vtable for'boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v12 = base + 21;
  if ( *(_BYTE *)(((unsigned __int64)&base[21] >> 3) + 0x7FFF8000) )
  {
LABEL_107:
    __asan_report_load8(v12);
    goto LABEL_108;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 272) = base[21];
  v12 = base + 22;
  if ( *(_BYTE *)(((unsigned __int64)&base[22] >> 3) + 0x7FFF8000) )
  {
LABEL_108:
    __asan_report_load8(v12);
    goto LABEL_109;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 280) = base[22];
  v12 = base + 23;
  if ( *(_BYTE *)(((unsigned __int64)&base[23] >> 3) + 0x7FFF8000) )
  {
LABEL_109:
    __asan_report_load8(v12);
    goto LABEL_110;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 288) = base[23];
  v12 = base + 24;
  if ( *(_BYTE *)(((unsigned __int64)&base[24] >> 3) + 0x7FFF8000) )
  {
LABEL_110:
    __asan_report_load8(v12);
    goto LABEL_111;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 296) = base[24];
  base[24].func_ = 0LL;
  v12 = base + 25;
  if ( *(char *)(((unsigned __int64)&base[25] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_111:
    __asan_report_load1(v12);
    goto LABEL_112;
  }
  *(_BYTE *)(v34 + 304) = base[25].func_;
  LOBYTE(base[25].func_) = 0;
  *(_QWORD *)(v34 + 120) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v12 = base + 26;
  if ( *(_BYTE *)(((unsigned __int64)&base[26] >> 3) + 0x7FFF8000) )
  {
LABEL_112:
    __asan_report_load8(v12);
    goto LABEL_113;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 312) = base[26];
  v12 = base + 27;
  if ( *(_BYTE *)(((unsigned __int64)&base[27] >> 3) + 0x7FFF8000) )
  {
LABEL_113:
    __asan_report_load8(v12);
    goto LABEL_114;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 320) = base[27];
  v12 = base + 28;
  if ( *(_BYTE *)(((unsigned __int64)&base[28] >> 3) + 0x7FFF8000) )
  {
LABEL_114:
    __asan_report_load8(v12);
    goto LABEL_115;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 328) = base[28];
  base[28].func_ = 0LL;
  v12 = base + 29;
  if ( *(char *)(((unsigned __int64)&base[29] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_115:
    __asan_report_load1(v12);
LABEL_116:
    __asan_report_load4(v12);
    goto LABEL_117;
  }
  *(_BYTE *)(v34 + 336) = base[29].func_;
  LOBYTE(base[29].func_) = 0;
  v12 = base + 30;
  v14 = *(_BYTE *)(((unsigned __int64)&base[30] >> 3) + 0x7FFF8000);
  if ( v14 && v14 <= 3 )
    goto LABEL_116;
  *(_DWORD *)(v34 + 344) = base[30].func_;
  *(_QWORD *)(v34 + 112) = &`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                         + 2;
  v12 = base + 31;
  if ( *(_BYTE *)(((unsigned __int64)&base[31] >> 3) + 0x7FFF8000) )
  {
LABEL_117:
    __asan_report_load8(v12);
    goto LABEL_118;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 352) = base[31];
  *(_QWORD *)(v34 + 360) = 0LL;
  v12 = base + 32;
  if ( *(_BYTE *)(((unsigned __int64)&base[32] >> 3) + 0x7FFF8000) )
  {
LABEL_118:
    __asan_report_load8(v12);
    goto LABEL_119;
  }
  v15 = base[32].func_;
  base[32].func_ = 0LL;
  *(_QWORD *)(v34 + 360) = v15;
  base[31].func_ = 0LL;
  v12 = base + 33;
  if ( *(_BYTE *)(((unsigned __int64)&base[33] >> 3) + 0x7FFF8000) )
  {
LABEL_119:
    __asan_report_load8(v12);
LABEL_120:
    __asan_report_load1(v12);
    goto LABEL_121;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 368) = base[33];
  v12 = base + 34;
  v16 = *(_BYTE *)(((unsigned __int64)&base[34] >> 3) + 0x7FFF8000);
  if ( v16 <= (((unsigned __int8)base + 16) & 7) && v16 )
    goto LABEL_120;
  v17 = (char)base[34].func_;
  LOBYTE(base[34].func_) = 0;
  *(_BYTE *)(v34 + 376) = v17;
  v12 = base + 35;
  if ( *(_BYTE *)(((unsigned __int64)&base[35] >> 3) + 0x7FFF8000) )
  {
LABEL_121:
    __asan_report_load8(v12);
    goto LABEL_122;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 384) = base[35];
  v12 = base + 36;
  if ( *(_WORD *)(((unsigned __int64)&base[36] >> 3) + 0x7FFF8000) )
  {
LABEL_122:
    __asan_report_load16(v12);
    goto LABEL_123;
  }
  *(__m128i *)(v34 + 392) = _mm_loadu_si128((const __m128i *)&base[36]);
  v12 = base + 38;
  if ( *(_BYTE *)(((unsigned __int64)&base[38] >> 3) + 0x7FFF8000) )
  {
LABEL_123:
    __asan_report_load8(v12);
    goto LABEL_124;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 408) = base[38];
  v18 = *(_QWORD *)(v34 + 64);
  if ( v18 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v18 + 8));
    *(_QWORD *)(v34 + 64) = 0LL;
  }
  v3 = *(_QWORD *)(v34 + 56);
  if ( !v3 )
    goto LABEL_69;
  v19 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v19 )
  {
    v12 = (boost::asio::detail::executor_function_base *)(v19 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 8) >> 3) + 0x7FFF8000) )
    {
      v19 = *(_QWORD *)(v19 + 8);
      goto LABEL_64;
    }
LABEL_124:
    __asan_report_load8(v12);
    goto LABEL_125;
  }
LABEL_64:
  if ( v19 )
  {
    v12 = (boost::asio::detail::executor_function_base *)(v19 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v19 + 16) )
        goto LABEL_67;
LABEL_126:
      v23 = *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000);
      if ( v23 <= (char)((v3 + 64) & 7) && v23 )
      {
        __asan_report_load1(v3 + 320);
      }
      else
      {
        v24 = *(_BYTE *)((v3 >> 3) + 0x7FFF8000);
        if ( v24 > (char)(v3 & 7) || !v24 )
        {
          *(_BYTE *)v3 = *(_BYTE *)(v3 + 320);
          *(_QWORD *)(v19 + 16) = v3;
          goto LABEL_68;
        }
      }
      __asan_report_store1(v3);
      goto LABEL_133;
    }
LABEL_125:
    v19 = __asan_report_load8(v12);
    goto LABEL_126;
  }
LABEL_67:
  operator delete(*(void **)(v34 + 56));
LABEL_68:
  *(_QWORD *)(v34 + 56) = 0LL;
LABEL_69:
  if ( call )
  {
    v20 = *(_QWORD *)(v34 + 392);
    v21 = *(_QWORD *)(v34 + 400);
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::operator()(
      (boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v34 + 112),
      *(boost::beast::error_code *)&v20,
      *(_QWORD *)(v34 + 408));
  }
LABEL_133:
  boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v34 + 112));
  v25 = *(_QWORD *)(v34 + 64);
  if ( v25 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v25 + 8));
    *(_QWORD *)(v34 + 64) = 0LL;
  }
  v26 = *(_QWORD *)(v34 + 56);
  if ( v26 )
  {
    v27 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v27 )
    {
      v28 = v27 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v27 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v28);
        goto LABEL_146;
      }
      v27 = *(_QWORD *)(v27 + 8);
    }
    if ( !v27 )
    {
LABEL_142:
      operator delete((void *)v26);
      goto LABEL_143;
    }
    v28 = v27 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v27 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v27 + 16) )
        goto LABEL_142;
LABEL_147:
      v29 = *(_BYTE *)(((v26 + 320) >> 3) + 0x7FFF8000);
      if ( v29 <= (char)((v26 + 64) & 7) && v29 )
      {
        __asan_report_load1(v26 + 320);
      }
      else
      {
        v30 = *(_BYTE *)((v26 >> 3) + 0x7FFF8000);
        if ( v30 > (char)(v26 & 7) || !v30 )
        {
          *(_BYTE *)v26 = *(_BYTE *)(v26 + 320);
          *(_QWORD *)(v27 + 16) = v26;
          goto LABEL_143;
        }
      }
      v31 = (struct _Unwind_Exception *)__asan_report_store1(v26);
      boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v26 - 368));
      boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const)(v26 - 432));
      __asan_handle_no_return(v26 - 432);
      _Unwind_Resume(v31);
    }
LABEL_146:
    v27 = __asan_report_load8(v28);
    goto LABEL_147;
  }
LABEL_143:
  if ( v36 == (char *)v34 )
  {
    *(_QWORD *)((v34 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8034) = 0LL;
  }
  else
  {
    *(_QWORD *)v34 = 1172321806LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v34 >> 3) + 0x7FFF8038) = -168430091;
  }
};

// Line 72: range 0000000019C3FB7B-0000000019C4088E
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  boost::asio::detail::executor_function_base *v2; // r13
  unsigned __int64 v3; // rbp
  unsigned __int64 v4; // r12
  unsigned __int64 v5; // rdi
  boost::asio::detail::executor_function_base::func_type func; // rax
  __int64 (**v7)(void); // rax
  __int64 v8; // rax
  boost::asio::detail::executor_function_base *v9; // rdi
  boost::asio::detail::executor_function_base *v10; // rdi
  boost::asio::detail::executor_function_base::func_type v11; // rax
  boost::asio::detail::executor_function_base *v12; // rdi
  char v13; // al
  char v14; // al
  boost::asio::detail::executor_function_base::func_type v15; // rax
  char v16; // al
  char v17; // al
  __int64 v18; // rdi
  __int64 v19; // rax
  __int64 v20; // rsi OVERLAPPED
  __int64 v21; // rdx
  __int64 v22; // rax
  char v23; // dl
  char v24; // dl
  __int64 v25; // rdi
  unsigned __int64 v26; // rbx
  __int64 v27; // rax
  __int64 v28; // rdi
  char v29; // dl
  char v30; // dl
  struct _Unwind_Exception *v31; // rbp
  unsigned __int64 v32; // [rsp+0h] [rbp-258h]
  unsigned __int64 v34; // [rsp+20h] [rbp-238h]
  _DWORD *v35; // [rsp+30h] [rbp-228h]
  char v36[536]; // [rsp+40h] [rbp-218h] BYREF

  v34 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v22 = __asan_stack_malloc_3(480LL);
    if ( v22 )
      v34 = v22;
  }
  *(_QWORD *)v34 = 1102416563LL;
  *(_QWORD *)(v34 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 304 11 function:85";
  *(_QWORD *)(v34 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete;
  v35 = (_DWORD *)(v34 >> 3);
  v35[536862720] = -235802127;
  v35[536862721] = 61953;
  v35[536862722] = -218959360;
  v35[536862723] = 62194;
  v35[536862733] = -202116109;
  v35[536862734] = -202116109;
  *(_QWORD *)(v34 + 48) = v34 + 32;
  *(_QWORD *)(v34 + 56) = base;
  *(_QWORD *)(v34 + 64) = base;
  v3 = (unsigned __int64)&base[1];
  *(_QWORD *)(v34 + 112) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v34 + 120) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v34 + 128) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v4 = v34 + 136;
  if ( *(_BYTE *)(((v34 + 136) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store8();
    goto LABEL_74;
  }
  *(_QWORD *)(v34 + 136) = &`vtable for'boost::beast::async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v32 = v34 + 144;
  v2 = base + 5;
  if ( *(_BYTE *)(((unsigned __int64)&base[5] >> 3) + 0x7FFF8000) )
  {
LABEL_74:
    __asan_report_load8(v2);
    goto LABEL_75;
  }
  if ( *(_BYTE *)((v32 >> 3) + 0x7FFF8000) )
  {
LABEL_75:
    v5 = v32;
    __asan_report_store8();
    goto LABEL_76;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 144) = base[5];
  v5 = v34 + 152;
  if ( *(_BYTE *)(((v34 + 152) >> 3) + 0x7FFF8000) )
  {
LABEL_76:
    __asan_report_store8();
    goto LABEL_77;
  }
  *(_QWORD *)(v34 + 152) = 0LL;
  v5 = (unsigned __int64)&base[6];
  if ( *(_BYTE *)(((unsigned __int64)&base[6] >> 3) + 0x7FFF8000) )
  {
LABEL_77:
    __asan_report_load8(v5);
    goto LABEL_78;
  }
  func = base[6].func_;
  base[6].func_ = 0LL;
  *(_QWORD *)(v34 + 152) = func;
  base[5].func_ = 0LL;
  v5 = (unsigned __int64)&base[7];
  if ( *(_BYTE *)(((unsigned __int64)&base[7] >> 3) + 0x7FFF8000) )
  {
LABEL_78:
    __asan_report_load8(v5);
    goto LABEL_79;
  }
  v5 = v34 + 160;
  if ( *(_BYTE *)(((v34 + 160) >> 3) + 0x7FFF8000) )
  {
LABEL_79:
    __asan_report_store8();
    goto LABEL_80;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 160) = base[7];
  v5 = (unsigned __int64)&base[8];
  if ( *(_BYTE *)(((unsigned __int64)&base[8] >> 3) + 0x7FFF8000) )
  {
LABEL_80:
    __asan_report_load8(v5);
LABEL_81:
    v7 = (__int64 (**)(void))__asan_report_load8(v5);
    goto LABEL_82;
  }
  v5 = (unsigned __int64)base[8].func_;
  if ( !v5 )
    goto LABEL_14;
  if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
    goto LABEL_81;
  v7 = *(__int64 (***)(void))v5;
  if ( *(_BYTE *)((*(_QWORD *)v5 >> 3) + 0x7FFF8000LL) )
  {
LABEL_82:
    v8 = __asan_report_load8(v7);
    goto LABEL_83;
  }
  v5 = (*v7)();
LABEL_14:
  v8 = v34 + 168;
  if ( *(_BYTE *)(((v34 + 168) >> 3) + 0x7FFF8000) )
  {
LABEL_83:
    v9 = (boost::asio::detail::executor_function_base *)v8;
    __asan_report_store8();
    goto LABEL_84;
  }
  *(_QWORD *)(v34 + 168) = v5;
  v9 = base + 9;
  if ( *(_BYTE *)(((unsigned __int64)&base[9] >> 3) + 0x7FFF8000) )
  {
LABEL_84:
    __asan_report_load8(v9);
    goto LABEL_85;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 176);
  if ( *(_BYTE *)(((v34 + 176) >> 3) + 0x7FFF8000) )
  {
LABEL_85:
    __asan_report_store8();
    goto LABEL_86;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 176) = base[9];
  v9 = base + 10;
  if ( *(_BYTE *)(((unsigned __int64)&base[10] >> 3) + 0x7FFF8000) )
  {
LABEL_86:
    __asan_report_load8(v9);
    goto LABEL_87;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 184);
  if ( *(_BYTE *)(((v34 + 184) >> 3) + 0x7FFF8000) )
  {
LABEL_87:
    __asan_report_store8();
    goto LABEL_88;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 184) = base[10];
  v9 = base + 11;
  if ( *(_BYTE *)(((unsigned __int64)&base[11] >> 3) + 0x7FFF8000) )
  {
LABEL_88:
    __asan_report_load8(v9);
    goto LABEL_89;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 192);
  if ( *(_BYTE *)(((v34 + 192) >> 3) + 0x7FFF8000) )
  {
LABEL_89:
    __asan_report_store8();
    goto LABEL_90;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 192) = base[11];
  v9 = base + 12;
  if ( *(_BYTE *)(((unsigned __int64)&base[12] >> 3) + 0x7FFF8000) )
  {
LABEL_90:
    __asan_report_load8(v9);
    goto LABEL_91;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 200);
  if ( *(_BYTE *)(((v34 + 200) >> 3) + 0x7FFF8000) )
  {
LABEL_91:
    __asan_report_store8();
    goto LABEL_92;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 200) = base[12];
  v9 = base + 13;
  if ( *(_BYTE *)(((unsigned __int64)&base[13] >> 3) + 0x7FFF8000) )
  {
LABEL_92:
    __asan_report_load8(v9);
    goto LABEL_93;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 208);
  if ( *(_BYTE *)(((v34 + 208) >> 3) + 0x7FFF8000) )
  {
LABEL_93:
    __asan_report_store8();
    goto LABEL_94;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 208) = base[13];
  base[13].func_ = 0LL;
  v9 = base + 14;
  if ( *(char *)(((unsigned __int64)&base[14] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_94:
    __asan_report_load1(v9);
    goto LABEL_95;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 216);
  if ( *(char *)(((v34 + 216) >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_95:
    __asan_report_store1(v9);
    goto LABEL_96;
  }
  *(_BYTE *)(v34 + 216) = base[14].func_;
  LOBYTE(base[14].func_) = 0;
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
  {
LABEL_96:
    v10 = (boost::asio::detail::executor_function_base *)(v34 + 136);
    __asan_report_store8();
    goto LABEL_97;
  }
  *(_QWORD *)v4 = &`vtable for'boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                + 2;
  v10 = base + 15;
  if ( *(_BYTE *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000) )
  {
LABEL_97:
    __asan_report_load8(v10);
    goto LABEL_98;
  }
  v11 = base[15].func_;
  base[15].func_ = 0LL;
  if ( *(_BYTE *)(((v34 + 224) >> 3) + 0x7FFF8000) )
  {
LABEL_98:
    __asan_report_store8();
    goto LABEL_99;
  }
  *(_QWORD *)(v34 + 224) = v11;
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
  {
LABEL_99:
    v12 = (boost::asio::detail::executor_function_base *)(v34 + 136);
    __asan_report_store8();
    goto LABEL_100;
  }
  *(_QWORD *)v4 = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                + 2;
  v12 = base + 16;
  if ( *(_BYTE *)(((unsigned __int64)&base[16] >> 3) + 0x7FFF8000) )
  {
LABEL_100:
    __asan_report_load8(v12);
    goto LABEL_101;
  }
  v12 = (boost::asio::detail::executor_function_base *)(v34 + 232);
  if ( *(_BYTE *)(((v34 + 232) >> 3) + 0x7FFF8000) )
  {
LABEL_101:
    __asan_report_store8();
    goto LABEL_102;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 232) = base[16];
  v12 = base + 17;
  if ( *(_BYTE *)(((unsigned __int64)&base[17] >> 3) + 0x7FFF8000) )
  {
LABEL_102:
    __asan_report_load8(v12);
    goto LABEL_103;
  }
  v12 = (boost::asio::detail::executor_function_base *)(v34 + 240);
  if ( *(_BYTE *)(((v34 + 240) >> 3) + 0x7FFF8000) )
  {
LABEL_103:
    __asan_report_store8();
    goto LABEL_104;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 240) = base[17];
  v12 = base + 18;
  if ( *(_BYTE *)(((unsigned __int64)&base[18] >> 3) + 0x7FFF8000) )
  {
LABEL_104:
    __asan_report_load8(v12);
    goto LABEL_105;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 248) = base[18];
  base[18].func_ = 0LL;
  v12 = base + 19;
  if ( *(char *)(((unsigned __int64)&base[19] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_105:
    __asan_report_load1(v12);
LABEL_106:
    __asan_report_load4(v12);
    goto LABEL_107;
  }
  *(_BYTE *)(v34 + 256) = base[19].func_;
  LOBYTE(base[19].func_) = 0;
  v12 = base + 20;
  v13 = *(_BYTE *)(((unsigned __int64)&base[20] >> 3) + 0x7FFF8000);
  if ( v13 && v13 <= 3 )
    goto LABEL_106;
  *(_DWORD *)(v34 + 264) = base[20].func_;
  *(_QWORD *)(v34 + 128) = &`vtable for'boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v12 = base + 21;
  if ( *(_BYTE *)(((unsigned __int64)&base[21] >> 3) + 0x7FFF8000) )
  {
LABEL_107:
    __asan_report_load8(v12);
    goto LABEL_108;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 272) = base[21];
  v12 = base + 22;
  if ( *(_BYTE *)(((unsigned __int64)&base[22] >> 3) + 0x7FFF8000) )
  {
LABEL_108:
    __asan_report_load8(v12);
    goto LABEL_109;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 280) = base[22];
  v12 = base + 23;
  if ( *(_BYTE *)(((unsigned __int64)&base[23] >> 3) + 0x7FFF8000) )
  {
LABEL_109:
    __asan_report_load8(v12);
    goto LABEL_110;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 288) = base[23];
  v12 = base + 24;
  if ( *(_BYTE *)(((unsigned __int64)&base[24] >> 3) + 0x7FFF8000) )
  {
LABEL_110:
    __asan_report_load8(v12);
    goto LABEL_111;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 296) = base[24];
  base[24].func_ = 0LL;
  v12 = base + 25;
  if ( *(char *)(((unsigned __int64)&base[25] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_111:
    __asan_report_load1(v12);
    goto LABEL_112;
  }
  *(_BYTE *)(v34 + 304) = base[25].func_;
  LOBYTE(base[25].func_) = 0;
  *(_QWORD *)(v34 + 120) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v12 = base + 26;
  if ( *(_BYTE *)(((unsigned __int64)&base[26] >> 3) + 0x7FFF8000) )
  {
LABEL_112:
    __asan_report_load8(v12);
    goto LABEL_113;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 312) = base[26];
  v12 = base + 27;
  if ( *(_BYTE *)(((unsigned __int64)&base[27] >> 3) + 0x7FFF8000) )
  {
LABEL_113:
    __asan_report_load8(v12);
    goto LABEL_114;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 320) = base[27];
  v12 = base + 28;
  if ( *(_BYTE *)(((unsigned __int64)&base[28] >> 3) + 0x7FFF8000) )
  {
LABEL_114:
    __asan_report_load8(v12);
    goto LABEL_115;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 328) = base[28];
  base[28].func_ = 0LL;
  v12 = base + 29;
  if ( *(char *)(((unsigned __int64)&base[29] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_115:
    __asan_report_load1(v12);
LABEL_116:
    __asan_report_load4(v12);
    goto LABEL_117;
  }
  *(_BYTE *)(v34 + 336) = base[29].func_;
  LOBYTE(base[29].func_) = 0;
  v12 = base + 30;
  v14 = *(_BYTE *)(((unsigned __int64)&base[30] >> 3) + 0x7FFF8000);
  if ( v14 && v14 <= 3 )
    goto LABEL_116;
  *(_DWORD *)(v34 + 344) = base[30].func_;
  *(_QWORD *)(v34 + 112) = &`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                         + 2;
  v12 = base + 31;
  if ( *(_BYTE *)(((unsigned __int64)&base[31] >> 3) + 0x7FFF8000) )
  {
LABEL_117:
    __asan_report_load8(v12);
    goto LABEL_118;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 352) = base[31];
  *(_QWORD *)(v34 + 360) = 0LL;
  v12 = base + 32;
  if ( *(_BYTE *)(((unsigned __int64)&base[32] >> 3) + 0x7FFF8000) )
  {
LABEL_118:
    __asan_report_load8(v12);
    goto LABEL_119;
  }
  v15 = base[32].func_;
  base[32].func_ = 0LL;
  *(_QWORD *)(v34 + 360) = v15;
  base[31].func_ = 0LL;
  v12 = base + 33;
  if ( *(_BYTE *)(((unsigned __int64)&base[33] >> 3) + 0x7FFF8000) )
  {
LABEL_119:
    __asan_report_load8(v12);
LABEL_120:
    __asan_report_load1(v12);
    goto LABEL_121;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 368) = base[33];
  v12 = base + 34;
  v16 = *(_BYTE *)(((unsigned __int64)&base[34] >> 3) + 0x7FFF8000);
  if ( v16 <= (((unsigned __int8)base + 16) & 7) && v16 )
    goto LABEL_120;
  v17 = (char)base[34].func_;
  LOBYTE(base[34].func_) = 0;
  *(_BYTE *)(v34 + 376) = v17;
  v12 = base + 35;
  if ( *(_BYTE *)(((unsigned __int64)&base[35] >> 3) + 0x7FFF8000) )
  {
LABEL_121:
    __asan_report_load8(v12);
    goto LABEL_122;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 384) = base[35];
  v12 = base + 36;
  if ( *(_WORD *)(((unsigned __int64)&base[36] >> 3) + 0x7FFF8000) )
  {
LABEL_122:
    __asan_report_load16(v12);
    goto LABEL_123;
  }
  *(__m128i *)(v34 + 392) = _mm_loadu_si128((const __m128i *)&base[36]);
  v12 = base + 38;
  if ( *(_BYTE *)(((unsigned __int64)&base[38] >> 3) + 0x7FFF8000) )
  {
LABEL_123:
    __asan_report_load8(v12);
    goto LABEL_124;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 408) = base[38];
  v18 = *(_QWORD *)(v34 + 64);
  if ( v18 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v18 + 8));
    *(_QWORD *)(v34 + 64) = 0LL;
  }
  v3 = *(_QWORD *)(v34 + 56);
  if ( !v3 )
    goto LABEL_69;
  v19 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v19 )
  {
    v12 = (boost::asio::detail::executor_function_base *)(v19 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 8) >> 3) + 0x7FFF8000) )
    {
      v19 = *(_QWORD *)(v19 + 8);
      goto LABEL_64;
    }
LABEL_124:
    __asan_report_load8(v12);
    goto LABEL_125;
  }
LABEL_64:
  if ( v19 )
  {
    v12 = (boost::asio::detail::executor_function_base *)(v19 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v19 + 16) )
        goto LABEL_67;
LABEL_126:
      v23 = *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000);
      if ( v23 <= (char)((v3 + 64) & 7) && v23 )
      {
        __asan_report_load1(v3 + 320);
      }
      else
      {
        v24 = *(_BYTE *)((v3 >> 3) + 0x7FFF8000);
        if ( v24 > (char)(v3 & 7) || !v24 )
        {
          *(_BYTE *)v3 = *(_BYTE *)(v3 + 320);
          *(_QWORD *)(v19 + 16) = v3;
          goto LABEL_68;
        }
      }
      __asan_report_store1(v3);
      goto LABEL_133;
    }
LABEL_125:
    v19 = __asan_report_load8(v12);
    goto LABEL_126;
  }
LABEL_67:
  operator delete(*(void **)(v34 + 56));
LABEL_68:
  *(_QWORD *)(v34 + 56) = 0LL;
LABEL_69:
  if ( call )
  {
    v20 = *(_QWORD *)(v34 + 392);
    v21 = *(_QWORD *)(v34 + 400);
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::operator()(
      (boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v34 + 112),
      *(boost::beast::error_code *)&v20,
      *(_QWORD *)(v34 + 408));
  }
LABEL_133:
  boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v34 + 112));
  v25 = *(_QWORD *)(v34 + 64);
  if ( v25 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v25 + 8));
    *(_QWORD *)(v34 + 64) = 0LL;
  }
  v26 = *(_QWORD *)(v34 + 56);
  if ( v26 )
  {
    v27 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v27 )
    {
      v28 = v27 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v27 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v28);
        goto LABEL_146;
      }
      v27 = *(_QWORD *)(v27 + 8);
    }
    if ( !v27 )
    {
LABEL_142:
      operator delete((void *)v26);
      goto LABEL_143;
    }
    v28 = v27 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v27 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v27 + 16) )
        goto LABEL_142;
LABEL_147:
      v29 = *(_BYTE *)(((v26 + 320) >> 3) + 0x7FFF8000);
      if ( v29 <= (char)((v26 + 64) & 7) && v29 )
      {
        __asan_report_load1(v26 + 320);
      }
      else
      {
        v30 = *(_BYTE *)((v26 >> 3) + 0x7FFF8000);
        if ( v30 > (char)(v26 & 7) || !v30 )
        {
          *(_BYTE *)v26 = *(_BYTE *)(v26 + 320);
          *(_QWORD *)(v27 + 16) = v26;
          goto LABEL_143;
        }
      }
      v31 = (struct _Unwind_Exception *)__asan_report_store1(v26);
      boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v26 - 368));
      boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const)(v26 - 432));
      __asan_handle_no_return(v26 - 432);
      _Unwind_Resume(v31);
    }
LABEL_146:
    v27 = __asan_report_load8(v28);
    goto LABEL_147;
  }
LABEL_143:
  if ( v36 == (char *)v34 )
  {
    *(_QWORD *)((v34 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8034) = 0LL;
  }
  else
  {
    *(_QWORD *)v34 = 1172321806LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v34 >> 3) + 0x7FFF8038) = -168430091;
  }
};

// Line 72: range 0000000019C46C1F-0000000019C47932
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  boost::asio::detail::executor_function_base *v2; // r13
  unsigned __int64 v3; // rbp
  unsigned __int64 v4; // r12
  unsigned __int64 v5; // rdi
  boost::asio::detail::executor_function_base::func_type func; // rax
  __int64 (**v7)(void); // rax
  __int64 v8; // rax
  boost::asio::detail::executor_function_base *v9; // rdi
  boost::asio::detail::executor_function_base *v10; // rdi
  boost::asio::detail::executor_function_base::func_type v11; // rax
  boost::asio::detail::executor_function_base *v12; // rdi
  char v13; // al
  char v14; // al
  boost::asio::detail::executor_function_base::func_type v15; // rax
  char v16; // al
  char v17; // al
  __int64 v18; // rdi
  __int64 v19; // rax
  __int64 v20; // rsi OVERLAPPED
  __int64 v21; // rdx
  __int64 v22; // rax
  char v23; // dl
  char v24; // dl
  __int64 v25; // rdi
  unsigned __int64 v26; // rbx
  __int64 v27; // rax
  __int64 v28; // rdi
  char v29; // dl
  char v30; // dl
  struct _Unwind_Exception *v31; // rbp
  unsigned __int64 v32; // [rsp+0h] [rbp-258h]
  unsigned __int64 v34; // [rsp+20h] [rbp-238h]
  _DWORD *v35; // [rsp+30h] [rbp-228h]
  char v36[536]; // [rsp+40h] [rbp-218h] BYREF

  v34 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v22 = __asan_stack_malloc_3(480LL);
    if ( v22 )
      v34 = v22;
  }
  *(_QWORD *)v34 = 1102416563LL;
  *(_QWORD *)(v34 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 304 11 function:85";
  *(_QWORD *)(v34 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete;
  v35 = (_DWORD *)(v34 >> 3);
  v35[536862720] = -235802127;
  v35[536862721] = 61953;
  v35[536862722] = -218959360;
  v35[536862723] = 62194;
  v35[536862733] = -202116109;
  v35[536862734] = -202116109;
  *(_QWORD *)(v34 + 48) = v34 + 32;
  *(_QWORD *)(v34 + 56) = base;
  *(_QWORD *)(v34 + 64) = base;
  v3 = (unsigned __int64)&base[1];
  *(_QWORD *)(v34 + 112) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v34 + 120) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v34 + 128) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v4 = v34 + 136;
  if ( *(_BYTE *)(((v34 + 136) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store8();
    goto LABEL_74;
  }
  *(_QWORD *)(v34 + 136) = &`vtable for'boost::beast::async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v32 = v34 + 144;
  v2 = base + 5;
  if ( *(_BYTE *)(((unsigned __int64)&base[5] >> 3) + 0x7FFF8000) )
  {
LABEL_74:
    __asan_report_load8(v2);
    goto LABEL_75;
  }
  if ( *(_BYTE *)((v32 >> 3) + 0x7FFF8000) )
  {
LABEL_75:
    v5 = v32;
    __asan_report_store8();
    goto LABEL_76;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 144) = base[5];
  v5 = v34 + 152;
  if ( *(_BYTE *)(((v34 + 152) >> 3) + 0x7FFF8000) )
  {
LABEL_76:
    __asan_report_store8();
    goto LABEL_77;
  }
  *(_QWORD *)(v34 + 152) = 0LL;
  v5 = (unsigned __int64)&base[6];
  if ( *(_BYTE *)(((unsigned __int64)&base[6] >> 3) + 0x7FFF8000) )
  {
LABEL_77:
    __asan_report_load8(v5);
    goto LABEL_78;
  }
  func = base[6].func_;
  base[6].func_ = 0LL;
  *(_QWORD *)(v34 + 152) = func;
  base[5].func_ = 0LL;
  v5 = (unsigned __int64)&base[7];
  if ( *(_BYTE *)(((unsigned __int64)&base[7] >> 3) + 0x7FFF8000) )
  {
LABEL_78:
    __asan_report_load8(v5);
    goto LABEL_79;
  }
  v5 = v34 + 160;
  if ( *(_BYTE *)(((v34 + 160) >> 3) + 0x7FFF8000) )
  {
LABEL_79:
    __asan_report_store8();
    goto LABEL_80;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 160) = base[7];
  v5 = (unsigned __int64)&base[8];
  if ( *(_BYTE *)(((unsigned __int64)&base[8] >> 3) + 0x7FFF8000) )
  {
LABEL_80:
    __asan_report_load8(v5);
LABEL_81:
    v7 = (__int64 (**)(void))__asan_report_load8(v5);
    goto LABEL_82;
  }
  v5 = (unsigned __int64)base[8].func_;
  if ( !v5 )
    goto LABEL_14;
  if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
    goto LABEL_81;
  v7 = *(__int64 (***)(void))v5;
  if ( *(_BYTE *)((*(_QWORD *)v5 >> 3) + 0x7FFF8000LL) )
  {
LABEL_82:
    v8 = __asan_report_load8(v7);
    goto LABEL_83;
  }
  v5 = (*v7)();
LABEL_14:
  v8 = v34 + 168;
  if ( *(_BYTE *)(((v34 + 168) >> 3) + 0x7FFF8000) )
  {
LABEL_83:
    v9 = (boost::asio::detail::executor_function_base *)v8;
    __asan_report_store8();
    goto LABEL_84;
  }
  *(_QWORD *)(v34 + 168) = v5;
  v9 = base + 9;
  if ( *(_BYTE *)(((unsigned __int64)&base[9] >> 3) + 0x7FFF8000) )
  {
LABEL_84:
    __asan_report_load8(v9);
    goto LABEL_85;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 176);
  if ( *(_BYTE *)(((v34 + 176) >> 3) + 0x7FFF8000) )
  {
LABEL_85:
    __asan_report_store8();
    goto LABEL_86;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 176) = base[9];
  v9 = base + 10;
  if ( *(_BYTE *)(((unsigned __int64)&base[10] >> 3) + 0x7FFF8000) )
  {
LABEL_86:
    __asan_report_load8(v9);
    goto LABEL_87;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 184);
  if ( *(_BYTE *)(((v34 + 184) >> 3) + 0x7FFF8000) )
  {
LABEL_87:
    __asan_report_store8();
    goto LABEL_88;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 184) = base[10];
  v9 = base + 11;
  if ( *(_BYTE *)(((unsigned __int64)&base[11] >> 3) + 0x7FFF8000) )
  {
LABEL_88:
    __asan_report_load8(v9);
    goto LABEL_89;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 192);
  if ( *(_BYTE *)(((v34 + 192) >> 3) + 0x7FFF8000) )
  {
LABEL_89:
    __asan_report_store8();
    goto LABEL_90;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 192) = base[11];
  v9 = base + 12;
  if ( *(_BYTE *)(((unsigned __int64)&base[12] >> 3) + 0x7FFF8000) )
  {
LABEL_90:
    __asan_report_load8(v9);
    goto LABEL_91;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 200);
  if ( *(_BYTE *)(((v34 + 200) >> 3) + 0x7FFF8000) )
  {
LABEL_91:
    __asan_report_store8();
    goto LABEL_92;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 200) = base[12];
  v9 = base + 13;
  if ( *(_BYTE *)(((unsigned __int64)&base[13] >> 3) + 0x7FFF8000) )
  {
LABEL_92:
    __asan_report_load8(v9);
    goto LABEL_93;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 208);
  if ( *(_BYTE *)(((v34 + 208) >> 3) + 0x7FFF8000) )
  {
LABEL_93:
    __asan_report_store8();
    goto LABEL_94;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 208) = base[13];
  base[13].func_ = 0LL;
  v9 = base + 14;
  if ( *(char *)(((unsigned __int64)&base[14] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_94:
    __asan_report_load1(v9);
    goto LABEL_95;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 216);
  if ( *(char *)(((v34 + 216) >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_95:
    __asan_report_store1(v9);
    goto LABEL_96;
  }
  *(_BYTE *)(v34 + 216) = base[14].func_;
  LOBYTE(base[14].func_) = 0;
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
  {
LABEL_96:
    v10 = (boost::asio::detail::executor_function_base *)(v34 + 136);
    __asan_report_store8();
    goto LABEL_97;
  }
  *(_QWORD *)v4 = &`vtable for'boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                + 2;
  v10 = base + 15;
  if ( *(_BYTE *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000) )
  {
LABEL_97:
    __asan_report_load8(v10);
    goto LABEL_98;
  }
  v11 = base[15].func_;
  base[15].func_ = 0LL;
  if ( *(_BYTE *)(((v34 + 224) >> 3) + 0x7FFF8000) )
  {
LABEL_98:
    __asan_report_store8();
    goto LABEL_99;
  }
  *(_QWORD *)(v34 + 224) = v11;
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
  {
LABEL_99:
    v12 = (boost::asio::detail::executor_function_base *)(v34 + 136);
    __asan_report_store8();
    goto LABEL_100;
  }
  *(_QWORD *)v4 = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                + 2;
  v12 = base + 16;
  if ( *(_BYTE *)(((unsigned __int64)&base[16] >> 3) + 0x7FFF8000) )
  {
LABEL_100:
    __asan_report_load8(v12);
    goto LABEL_101;
  }
  v12 = (boost::asio::detail::executor_function_base *)(v34 + 232);
  if ( *(_BYTE *)(((v34 + 232) >> 3) + 0x7FFF8000) )
  {
LABEL_101:
    __asan_report_store8();
    goto LABEL_102;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 232) = base[16];
  v12 = base + 17;
  if ( *(_BYTE *)(((unsigned __int64)&base[17] >> 3) + 0x7FFF8000) )
  {
LABEL_102:
    __asan_report_load8(v12);
    goto LABEL_103;
  }
  v12 = (boost::asio::detail::executor_function_base *)(v34 + 240);
  if ( *(_BYTE *)(((v34 + 240) >> 3) + 0x7FFF8000) )
  {
LABEL_103:
    __asan_report_store8();
    goto LABEL_104;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 240) = base[17];
  v12 = base + 18;
  if ( *(_BYTE *)(((unsigned __int64)&base[18] >> 3) + 0x7FFF8000) )
  {
LABEL_104:
    __asan_report_load8(v12);
    goto LABEL_105;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 248) = base[18];
  base[18].func_ = 0LL;
  v12 = base + 19;
  if ( *(char *)(((unsigned __int64)&base[19] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_105:
    __asan_report_load1(v12);
LABEL_106:
    __asan_report_load4(v12);
    goto LABEL_107;
  }
  *(_BYTE *)(v34 + 256) = base[19].func_;
  LOBYTE(base[19].func_) = 0;
  v12 = base + 20;
  v13 = *(_BYTE *)(((unsigned __int64)&base[20] >> 3) + 0x7FFF8000);
  if ( v13 && v13 <= 3 )
    goto LABEL_106;
  *(_DWORD *)(v34 + 264) = base[20].func_;
  *(_QWORD *)(v34 + 128) = &`vtable for'boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v12 = base + 21;
  if ( *(_BYTE *)(((unsigned __int64)&base[21] >> 3) + 0x7FFF8000) )
  {
LABEL_107:
    __asan_report_load8(v12);
    goto LABEL_108;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 272) = base[21];
  v12 = base + 22;
  if ( *(_BYTE *)(((unsigned __int64)&base[22] >> 3) + 0x7FFF8000) )
  {
LABEL_108:
    __asan_report_load8(v12);
    goto LABEL_109;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 280) = base[22];
  v12 = base + 23;
  if ( *(_BYTE *)(((unsigned __int64)&base[23] >> 3) + 0x7FFF8000) )
  {
LABEL_109:
    __asan_report_load8(v12);
    goto LABEL_110;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 288) = base[23];
  v12 = base + 24;
  if ( *(_BYTE *)(((unsigned __int64)&base[24] >> 3) + 0x7FFF8000) )
  {
LABEL_110:
    __asan_report_load8(v12);
    goto LABEL_111;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 296) = base[24];
  base[24].func_ = 0LL;
  v12 = base + 25;
  if ( *(char *)(((unsigned __int64)&base[25] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_111:
    __asan_report_load1(v12);
    goto LABEL_112;
  }
  *(_BYTE *)(v34 + 304) = base[25].func_;
  LOBYTE(base[25].func_) = 0;
  *(_QWORD *)(v34 + 120) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v12 = base + 26;
  if ( *(_BYTE *)(((unsigned __int64)&base[26] >> 3) + 0x7FFF8000) )
  {
LABEL_112:
    __asan_report_load8(v12);
    goto LABEL_113;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 312) = base[26];
  v12 = base + 27;
  if ( *(_BYTE *)(((unsigned __int64)&base[27] >> 3) + 0x7FFF8000) )
  {
LABEL_113:
    __asan_report_load8(v12);
    goto LABEL_114;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 320) = base[27];
  v12 = base + 28;
  if ( *(_BYTE *)(((unsigned __int64)&base[28] >> 3) + 0x7FFF8000) )
  {
LABEL_114:
    __asan_report_load8(v12);
    goto LABEL_115;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 328) = base[28];
  base[28].func_ = 0LL;
  v12 = base + 29;
  if ( *(char *)(((unsigned __int64)&base[29] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_115:
    __asan_report_load1(v12);
LABEL_116:
    __asan_report_load4(v12);
    goto LABEL_117;
  }
  *(_BYTE *)(v34 + 336) = base[29].func_;
  LOBYTE(base[29].func_) = 0;
  v12 = base + 30;
  v14 = *(_BYTE *)(((unsigned __int64)&base[30] >> 3) + 0x7FFF8000);
  if ( v14 && v14 <= 3 )
    goto LABEL_116;
  *(_DWORD *)(v34 + 344) = base[30].func_;
  *(_QWORD *)(v34 + 112) = &`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                         + 2;
  v12 = base + 31;
  if ( *(_BYTE *)(((unsigned __int64)&base[31] >> 3) + 0x7FFF8000) )
  {
LABEL_117:
    __asan_report_load8(v12);
    goto LABEL_118;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 352) = base[31];
  *(_QWORD *)(v34 + 360) = 0LL;
  v12 = base + 32;
  if ( *(_BYTE *)(((unsigned __int64)&base[32] >> 3) + 0x7FFF8000) )
  {
LABEL_118:
    __asan_report_load8(v12);
    goto LABEL_119;
  }
  v15 = base[32].func_;
  base[32].func_ = 0LL;
  *(_QWORD *)(v34 + 360) = v15;
  base[31].func_ = 0LL;
  v12 = base + 33;
  if ( *(_BYTE *)(((unsigned __int64)&base[33] >> 3) + 0x7FFF8000) )
  {
LABEL_119:
    __asan_report_load8(v12);
LABEL_120:
    __asan_report_load1(v12);
    goto LABEL_121;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 368) = base[33];
  v12 = base + 34;
  v16 = *(_BYTE *)(((unsigned __int64)&base[34] >> 3) + 0x7FFF8000);
  if ( v16 <= (((unsigned __int8)base + 16) & 7) && v16 )
    goto LABEL_120;
  v17 = (char)base[34].func_;
  LOBYTE(base[34].func_) = 0;
  *(_BYTE *)(v34 + 376) = v17;
  v12 = base + 35;
  if ( *(_BYTE *)(((unsigned __int64)&base[35] >> 3) + 0x7FFF8000) )
  {
LABEL_121:
    __asan_report_load8(v12);
    goto LABEL_122;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 384) = base[35];
  v12 = base + 36;
  if ( *(_WORD *)(((unsigned __int64)&base[36] >> 3) + 0x7FFF8000) )
  {
LABEL_122:
    __asan_report_load16(v12);
    goto LABEL_123;
  }
  *(__m128i *)(v34 + 392) = _mm_loadu_si128((const __m128i *)&base[36]);
  v12 = base + 38;
  if ( *(_BYTE *)(((unsigned __int64)&base[38] >> 3) + 0x7FFF8000) )
  {
LABEL_123:
    __asan_report_load8(v12);
    goto LABEL_124;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 408) = base[38];
  v18 = *(_QWORD *)(v34 + 64);
  if ( v18 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v18 + 8));
    *(_QWORD *)(v34 + 64) = 0LL;
  }
  v3 = *(_QWORD *)(v34 + 56);
  if ( !v3 )
    goto LABEL_69;
  v19 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v19 )
  {
    v12 = (boost::asio::detail::executor_function_base *)(v19 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 8) >> 3) + 0x7FFF8000) )
    {
      v19 = *(_QWORD *)(v19 + 8);
      goto LABEL_64;
    }
LABEL_124:
    __asan_report_load8(v12);
    goto LABEL_125;
  }
LABEL_64:
  if ( v19 )
  {
    v12 = (boost::asio::detail::executor_function_base *)(v19 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v19 + 16) )
        goto LABEL_67;
LABEL_126:
      v23 = *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000);
      if ( v23 <= (char)((v3 + 64) & 7) && v23 )
      {
        __asan_report_load1(v3 + 320);
      }
      else
      {
        v24 = *(_BYTE *)((v3 >> 3) + 0x7FFF8000);
        if ( v24 > (char)(v3 & 7) || !v24 )
        {
          *(_BYTE *)v3 = *(_BYTE *)(v3 + 320);
          *(_QWORD *)(v19 + 16) = v3;
          goto LABEL_68;
        }
      }
      __asan_report_store1(v3);
      goto LABEL_133;
    }
LABEL_125:
    v19 = __asan_report_load8(v12);
    goto LABEL_126;
  }
LABEL_67:
  operator delete(*(void **)(v34 + 56));
LABEL_68:
  *(_QWORD *)(v34 + 56) = 0LL;
LABEL_69:
  if ( call )
  {
    v20 = *(_QWORD *)(v34 + 392);
    v21 = *(_QWORD *)(v34 + 400);
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::operator()(
      (boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v34 + 112),
      *(boost::beast::error_code *)&v20,
      *(_QWORD *)(v34 + 408));
  }
LABEL_133:
  boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v34 + 112));
  v25 = *(_QWORD *)(v34 + 64);
  if ( v25 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v25 + 8));
    *(_QWORD *)(v34 + 64) = 0LL;
  }
  v26 = *(_QWORD *)(v34 + 56);
  if ( v26 )
  {
    v27 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v27 )
    {
      v28 = v27 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v27 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v28);
        goto LABEL_146;
      }
      v27 = *(_QWORD *)(v27 + 8);
    }
    if ( !v27 )
    {
LABEL_142:
      operator delete((void *)v26);
      goto LABEL_143;
    }
    v28 = v27 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v27 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v27 + 16) )
        goto LABEL_142;
LABEL_147:
      v29 = *(_BYTE *)(((v26 + 320) >> 3) + 0x7FFF8000);
      if ( v29 <= (char)((v26 + 64) & 7) && v29 )
      {
        __asan_report_load1(v26 + 320);
      }
      else
      {
        v30 = *(_BYTE *)((v26 >> 3) + 0x7FFF8000);
        if ( v30 > (char)(v26 & 7) || !v30 )
        {
          *(_BYTE *)v26 = *(_BYTE *)(v26 + 320);
          *(_QWORD *)(v27 + 16) = v26;
          goto LABEL_143;
        }
      }
      v31 = (struct _Unwind_Exception *)__asan_report_store1(v26);
      boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v26 - 368));
      boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const)(v26 - 432));
      __asan_handle_no_return(v26 - 432);
      _Unwind_Resume(v31);
    }
LABEL_146:
    v27 = __asan_report_load8(v28);
    goto LABEL_147;
  }
LABEL_143:
  if ( v36 == (char *)v34 )
  {
    *(_QWORD *)((v34 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8034) = 0LL;
  }
  else
  {
    *(_QWORD *)v34 = 1172321806LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v34 >> 3) + 0x7FFF8038) = -168430091;
  }
};

// Line 72: range 0000000019C44757-0000000019C4546A
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  boost::asio::detail::executor_function_base *v2; // r13
  unsigned __int64 v3; // rbp
  unsigned __int64 v4; // r12
  unsigned __int64 v5; // rdi
  boost::asio::detail::executor_function_base::func_type func; // rax
  __int64 (**v7)(void); // rax
  __int64 v8; // rax
  boost::asio::detail::executor_function_base *v9; // rdi
  boost::asio::detail::executor_function_base *v10; // rdi
  boost::asio::detail::executor_function_base::func_type v11; // rax
  boost::asio::detail::executor_function_base *v12; // rdi
  char v13; // al
  char v14; // al
  boost::asio::detail::executor_function_base::func_type v15; // rax
  char v16; // al
  char v17; // al
  __int64 v18; // rdi
  __int64 v19; // rax
  __int64 v20; // rsi OVERLAPPED
  __int64 v21; // rdx
  __int64 v22; // rax
  char v23; // dl
  char v24; // dl
  __int64 v25; // rdi
  unsigned __int64 v26; // rbx
  __int64 v27; // rax
  __int64 v28; // rdi
  char v29; // dl
  char v30; // dl
  struct _Unwind_Exception *v31; // rbp
  unsigned __int64 v32; // [rsp+0h] [rbp-258h]
  unsigned __int64 v34; // [rsp+20h] [rbp-238h]
  _DWORD *v35; // [rsp+30h] [rbp-228h]
  char v36[536]; // [rsp+40h] [rbp-218h] BYREF

  v34 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v22 = __asan_stack_malloc_3(480LL);
    if ( v22 )
      v34 = v22;
  }
  *(_QWORD *)v34 = 1102416563LL;
  *(_QWORD *)(v34 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 304 11 function:85";
  *(_QWORD *)(v34 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete;
  v35 = (_DWORD *)(v34 >> 3);
  v35[536862720] = -235802127;
  v35[536862721] = 61953;
  v35[536862722] = -218959360;
  v35[536862723] = 62194;
  v35[536862733] = -202116109;
  v35[536862734] = -202116109;
  *(_QWORD *)(v34 + 48) = v34 + 32;
  *(_QWORD *)(v34 + 56) = base;
  *(_QWORD *)(v34 + 64) = base;
  v3 = (unsigned __int64)&base[1];
  *(_QWORD *)(v34 + 112) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v34 + 120) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v34 + 128) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v4 = v34 + 136;
  if ( *(_BYTE *)(((v34 + 136) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store8();
    goto LABEL_74;
  }
  *(_QWORD *)(v34 + 136) = &`vtable for'boost::beast::async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v32 = v34 + 144;
  v2 = base + 5;
  if ( *(_BYTE *)(((unsigned __int64)&base[5] >> 3) + 0x7FFF8000) )
  {
LABEL_74:
    __asan_report_load8(v2);
    goto LABEL_75;
  }
  if ( *(_BYTE *)((v32 >> 3) + 0x7FFF8000) )
  {
LABEL_75:
    v5 = v32;
    __asan_report_store8();
    goto LABEL_76;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 144) = base[5];
  v5 = v34 + 152;
  if ( *(_BYTE *)(((v34 + 152) >> 3) + 0x7FFF8000) )
  {
LABEL_76:
    __asan_report_store8();
    goto LABEL_77;
  }
  *(_QWORD *)(v34 + 152) = 0LL;
  v5 = (unsigned __int64)&base[6];
  if ( *(_BYTE *)(((unsigned __int64)&base[6] >> 3) + 0x7FFF8000) )
  {
LABEL_77:
    __asan_report_load8(v5);
    goto LABEL_78;
  }
  func = base[6].func_;
  base[6].func_ = 0LL;
  *(_QWORD *)(v34 + 152) = func;
  base[5].func_ = 0LL;
  v5 = (unsigned __int64)&base[7];
  if ( *(_BYTE *)(((unsigned __int64)&base[7] >> 3) + 0x7FFF8000) )
  {
LABEL_78:
    __asan_report_load8(v5);
    goto LABEL_79;
  }
  v5 = v34 + 160;
  if ( *(_BYTE *)(((v34 + 160) >> 3) + 0x7FFF8000) )
  {
LABEL_79:
    __asan_report_store8();
    goto LABEL_80;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 160) = base[7];
  v5 = (unsigned __int64)&base[8];
  if ( *(_BYTE *)(((unsigned __int64)&base[8] >> 3) + 0x7FFF8000) )
  {
LABEL_80:
    __asan_report_load8(v5);
LABEL_81:
    v7 = (__int64 (**)(void))__asan_report_load8(v5);
    goto LABEL_82;
  }
  v5 = (unsigned __int64)base[8].func_;
  if ( !v5 )
    goto LABEL_14;
  if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
    goto LABEL_81;
  v7 = *(__int64 (***)(void))v5;
  if ( *(_BYTE *)((*(_QWORD *)v5 >> 3) + 0x7FFF8000LL) )
  {
LABEL_82:
    v8 = __asan_report_load8(v7);
    goto LABEL_83;
  }
  v5 = (*v7)();
LABEL_14:
  v8 = v34 + 168;
  if ( *(_BYTE *)(((v34 + 168) >> 3) + 0x7FFF8000) )
  {
LABEL_83:
    v9 = (boost::asio::detail::executor_function_base *)v8;
    __asan_report_store8();
    goto LABEL_84;
  }
  *(_QWORD *)(v34 + 168) = v5;
  v9 = base + 9;
  if ( *(_BYTE *)(((unsigned __int64)&base[9] >> 3) + 0x7FFF8000) )
  {
LABEL_84:
    __asan_report_load8(v9);
    goto LABEL_85;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 176);
  if ( *(_BYTE *)(((v34 + 176) >> 3) + 0x7FFF8000) )
  {
LABEL_85:
    __asan_report_store8();
    goto LABEL_86;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 176) = base[9];
  v9 = base + 10;
  if ( *(_BYTE *)(((unsigned __int64)&base[10] >> 3) + 0x7FFF8000) )
  {
LABEL_86:
    __asan_report_load8(v9);
    goto LABEL_87;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 184);
  if ( *(_BYTE *)(((v34 + 184) >> 3) + 0x7FFF8000) )
  {
LABEL_87:
    __asan_report_store8();
    goto LABEL_88;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 184) = base[10];
  v9 = base + 11;
  if ( *(_BYTE *)(((unsigned __int64)&base[11] >> 3) + 0x7FFF8000) )
  {
LABEL_88:
    __asan_report_load8(v9);
    goto LABEL_89;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 192);
  if ( *(_BYTE *)(((v34 + 192) >> 3) + 0x7FFF8000) )
  {
LABEL_89:
    __asan_report_store8();
    goto LABEL_90;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 192) = base[11];
  v9 = base + 12;
  if ( *(_BYTE *)(((unsigned __int64)&base[12] >> 3) + 0x7FFF8000) )
  {
LABEL_90:
    __asan_report_load8(v9);
    goto LABEL_91;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 200);
  if ( *(_BYTE *)(((v34 + 200) >> 3) + 0x7FFF8000) )
  {
LABEL_91:
    __asan_report_store8();
    goto LABEL_92;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 200) = base[12];
  v9 = base + 13;
  if ( *(_BYTE *)(((unsigned __int64)&base[13] >> 3) + 0x7FFF8000) )
  {
LABEL_92:
    __asan_report_load8(v9);
    goto LABEL_93;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 208);
  if ( *(_BYTE *)(((v34 + 208) >> 3) + 0x7FFF8000) )
  {
LABEL_93:
    __asan_report_store8();
    goto LABEL_94;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 208) = base[13];
  base[13].func_ = 0LL;
  v9 = base + 14;
  if ( *(char *)(((unsigned __int64)&base[14] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_94:
    __asan_report_load1(v9);
    goto LABEL_95;
  }
  v9 = (boost::asio::detail::executor_function_base *)(v34 + 216);
  if ( *(char *)(((v34 + 216) >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_95:
    __asan_report_store1(v9);
    goto LABEL_96;
  }
  *(_BYTE *)(v34 + 216) = base[14].func_;
  LOBYTE(base[14].func_) = 0;
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
  {
LABEL_96:
    v10 = (boost::asio::detail::executor_function_base *)(v34 + 136);
    __asan_report_store8();
    goto LABEL_97;
  }
  *(_QWORD *)v4 = &`vtable for'boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                + 2;
  v10 = base + 15;
  if ( *(_BYTE *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000) )
  {
LABEL_97:
    __asan_report_load8(v10);
    goto LABEL_98;
  }
  v11 = base[15].func_;
  base[15].func_ = 0LL;
  if ( *(_BYTE *)(((v34 + 224) >> 3) + 0x7FFF8000) )
  {
LABEL_98:
    __asan_report_store8();
    goto LABEL_99;
  }
  *(_QWORD *)(v34 + 224) = v11;
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
  {
LABEL_99:
    v12 = (boost::asio::detail::executor_function_base *)(v34 + 136);
    __asan_report_store8();
    goto LABEL_100;
  }
  *(_QWORD *)v4 = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                + 2;
  v12 = base + 16;
  if ( *(_BYTE *)(((unsigned __int64)&base[16] >> 3) + 0x7FFF8000) )
  {
LABEL_100:
    __asan_report_load8(v12);
    goto LABEL_101;
  }
  v12 = (boost::asio::detail::executor_function_base *)(v34 + 232);
  if ( *(_BYTE *)(((v34 + 232) >> 3) + 0x7FFF8000) )
  {
LABEL_101:
    __asan_report_store8();
    goto LABEL_102;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 232) = base[16];
  v12 = base + 17;
  if ( *(_BYTE *)(((unsigned __int64)&base[17] >> 3) + 0x7FFF8000) )
  {
LABEL_102:
    __asan_report_load8(v12);
    goto LABEL_103;
  }
  v12 = (boost::asio::detail::executor_function_base *)(v34 + 240);
  if ( *(_BYTE *)(((v34 + 240) >> 3) + 0x7FFF8000) )
  {
LABEL_103:
    __asan_report_store8();
    goto LABEL_104;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 240) = base[17];
  v12 = base + 18;
  if ( *(_BYTE *)(((unsigned __int64)&base[18] >> 3) + 0x7FFF8000) )
  {
LABEL_104:
    __asan_report_load8(v12);
    goto LABEL_105;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 248) = base[18];
  base[18].func_ = 0LL;
  v12 = base + 19;
  if ( *(char *)(((unsigned __int64)&base[19] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_105:
    __asan_report_load1(v12);
LABEL_106:
    __asan_report_load4(v12);
    goto LABEL_107;
  }
  *(_BYTE *)(v34 + 256) = base[19].func_;
  LOBYTE(base[19].func_) = 0;
  v12 = base + 20;
  v13 = *(_BYTE *)(((unsigned __int64)&base[20] >> 3) + 0x7FFF8000);
  if ( v13 && v13 <= 3 )
    goto LABEL_106;
  *(_DWORD *)(v34 + 264) = base[20].func_;
  *(_QWORD *)(v34 + 128) = &`vtable for'boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v12 = base + 21;
  if ( *(_BYTE *)(((unsigned __int64)&base[21] >> 3) + 0x7FFF8000) )
  {
LABEL_107:
    __asan_report_load8(v12);
    goto LABEL_108;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 272) = base[21];
  v12 = base + 22;
  if ( *(_BYTE *)(((unsigned __int64)&base[22] >> 3) + 0x7FFF8000) )
  {
LABEL_108:
    __asan_report_load8(v12);
    goto LABEL_109;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 280) = base[22];
  v12 = base + 23;
  if ( *(_BYTE *)(((unsigned __int64)&base[23] >> 3) + 0x7FFF8000) )
  {
LABEL_109:
    __asan_report_load8(v12);
    goto LABEL_110;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 288) = base[23];
  v12 = base + 24;
  if ( *(_BYTE *)(((unsigned __int64)&base[24] >> 3) + 0x7FFF8000) )
  {
LABEL_110:
    __asan_report_load8(v12);
    goto LABEL_111;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 296) = base[24];
  base[24].func_ = 0LL;
  v12 = base + 25;
  if ( *(char *)(((unsigned __int64)&base[25] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_111:
    __asan_report_load1(v12);
    goto LABEL_112;
  }
  *(_BYTE *)(v34 + 304) = base[25].func_;
  LOBYTE(base[25].func_) = 0;
  *(_QWORD *)(v34 + 120) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v12 = base + 26;
  if ( *(_BYTE *)(((unsigned __int64)&base[26] >> 3) + 0x7FFF8000) )
  {
LABEL_112:
    __asan_report_load8(v12);
    goto LABEL_113;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 312) = base[26];
  v12 = base + 27;
  if ( *(_BYTE *)(((unsigned __int64)&base[27] >> 3) + 0x7FFF8000) )
  {
LABEL_113:
    __asan_report_load8(v12);
    goto LABEL_114;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 320) = base[27];
  v12 = base + 28;
  if ( *(_BYTE *)(((unsigned __int64)&base[28] >> 3) + 0x7FFF8000) )
  {
LABEL_114:
    __asan_report_load8(v12);
    goto LABEL_115;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 328) = base[28];
  base[28].func_ = 0LL;
  v12 = base + 29;
  if ( *(char *)(((unsigned __int64)&base[29] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_115:
    __asan_report_load1(v12);
LABEL_116:
    __asan_report_load4(v12);
    goto LABEL_117;
  }
  *(_BYTE *)(v34 + 336) = base[29].func_;
  LOBYTE(base[29].func_) = 0;
  v12 = base + 30;
  v14 = *(_BYTE *)(((unsigned __int64)&base[30] >> 3) + 0x7FFF8000);
  if ( v14 && v14 <= 3 )
    goto LABEL_116;
  *(_DWORD *)(v34 + 344) = base[30].func_;
  *(_QWORD *)(v34 + 112) = &`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                         + 2;
  v12 = base + 31;
  if ( *(_BYTE *)(((unsigned __int64)&base[31] >> 3) + 0x7FFF8000) )
  {
LABEL_117:
    __asan_report_load8(v12);
    goto LABEL_118;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 352) = base[31];
  *(_QWORD *)(v34 + 360) = 0LL;
  v12 = base + 32;
  if ( *(_BYTE *)(((unsigned __int64)&base[32] >> 3) + 0x7FFF8000) )
  {
LABEL_118:
    __asan_report_load8(v12);
    goto LABEL_119;
  }
  v15 = base[32].func_;
  base[32].func_ = 0LL;
  *(_QWORD *)(v34 + 360) = v15;
  base[31].func_ = 0LL;
  v12 = base + 33;
  if ( *(_BYTE *)(((unsigned __int64)&base[33] >> 3) + 0x7FFF8000) )
  {
LABEL_119:
    __asan_report_load8(v12);
LABEL_120:
    __asan_report_load1(v12);
    goto LABEL_121;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 368) = base[33];
  v12 = base + 34;
  v16 = *(_BYTE *)(((unsigned __int64)&base[34] >> 3) + 0x7FFF8000);
  if ( v16 <= (((unsigned __int8)base + 16) & 7) && v16 )
    goto LABEL_120;
  v17 = (char)base[34].func_;
  LOBYTE(base[34].func_) = 0;
  *(_BYTE *)(v34 + 376) = v17;
  v12 = base + 35;
  if ( *(_BYTE *)(((unsigned __int64)&base[35] >> 3) + 0x7FFF8000) )
  {
LABEL_121:
    __asan_report_load8(v12);
    goto LABEL_122;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 384) = base[35];
  v12 = base + 36;
  if ( *(_WORD *)(((unsigned __int64)&base[36] >> 3) + 0x7FFF8000) )
  {
LABEL_122:
    __asan_report_load16(v12);
    goto LABEL_123;
  }
  *(__m128i *)(v34 + 392) = _mm_loadu_si128((const __m128i *)&base[36]);
  v12 = base + 38;
  if ( *(_BYTE *)(((unsigned __int64)&base[38] >> 3) + 0x7FFF8000) )
  {
LABEL_123:
    __asan_report_load8(v12);
    goto LABEL_124;
  }
  *(boost::asio::detail::executor_function_base *)(v34 + 408) = base[38];
  v18 = *(_QWORD *)(v34 + 64);
  if ( v18 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v18 + 8));
    *(_QWORD *)(v34 + 64) = 0LL;
  }
  v3 = *(_QWORD *)(v34 + 56);
  if ( !v3 )
    goto LABEL_69;
  v19 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v19 )
  {
    v12 = (boost::asio::detail::executor_function_base *)(v19 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 8) >> 3) + 0x7FFF8000) )
    {
      v19 = *(_QWORD *)(v19 + 8);
      goto LABEL_64;
    }
LABEL_124:
    __asan_report_load8(v12);
    goto LABEL_125;
  }
LABEL_64:
  if ( v19 )
  {
    v12 = (boost::asio::detail::executor_function_base *)(v19 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v19 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v19 + 16) )
        goto LABEL_67;
LABEL_126:
      v23 = *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000);
      if ( v23 <= (char)((v3 + 64) & 7) && v23 )
      {
        __asan_report_load1(v3 + 320);
      }
      else
      {
        v24 = *(_BYTE *)((v3 >> 3) + 0x7FFF8000);
        if ( v24 > (char)(v3 & 7) || !v24 )
        {
          *(_BYTE *)v3 = *(_BYTE *)(v3 + 320);
          *(_QWORD *)(v19 + 16) = v3;
          goto LABEL_68;
        }
      }
      __asan_report_store1(v3);
      goto LABEL_133;
    }
LABEL_125:
    v19 = __asan_report_load8(v12);
    goto LABEL_126;
  }
LABEL_67:
  operator delete(*(void **)(v34 + 56));
LABEL_68:
  *(_QWORD *)(v34 + 56) = 0LL;
LABEL_69:
  if ( call )
  {
    v20 = *(_QWORD *)(v34 + 392);
    v21 = *(_QWORD *)(v34 + 400);
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::operator()(
      (boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v34 + 112),
      *(boost::beast::error_code *)&v20,
      *(_QWORD *)(v34 + 408));
  }
LABEL_133:
  boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v34 + 112));
  v25 = *(_QWORD *)(v34 + 64);
  if ( v25 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v25 + 8));
    *(_QWORD *)(v34 + 64) = 0LL;
  }
  v26 = *(_QWORD *)(v34 + 56);
  if ( v26 )
  {
    v27 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v27 )
    {
      v28 = v27 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v27 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v28);
        goto LABEL_146;
      }
      v27 = *(_QWORD *)(v27 + 8);
    }
    if ( !v27 )
    {
LABEL_142:
      operator delete((void *)v26);
      goto LABEL_143;
    }
    v28 = v27 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v27 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v27 + 16) )
        goto LABEL_142;
LABEL_147:
      v29 = *(_BYTE *)(((v26 + 320) >> 3) + 0x7FFF8000);
      if ( v29 <= (char)((v26 + 64) & 7) && v29 )
      {
        __asan_report_load1(v26 + 320);
      }
      else
      {
        v30 = *(_BYTE *)((v26 >> 3) + 0x7FFF8000);
        if ( v30 > (char)(v26 & 7) || !v30 )
        {
          *(_BYTE *)v26 = *(_BYTE *)(v26 + 320);
          *(_QWORD *)(v27 + 16) = v26;
          goto LABEL_143;
        }
      }
      v31 = (struct _Unwind_Exception *)__asan_report_store1(v26);
      boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v26 - 368));
      boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<false,boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> >,boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const)(v26 - 432));
      __asan_handle_no_return(v26 - 432);
      _Unwind_Resume(v31);
    }
LABEL_146:
    v27 = __asan_report_load8(v28);
    goto LABEL_147;
  }
LABEL_143:
  if ( v36 == (char *)v34 )
  {
    *(_QWORD *)((v34 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8034) = 0LL;
  }
  else
  {
    *(_QWORD *)v34 = 1172321806LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v34 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v34 >> 3) + 0x7FFF8038) = -168430091;
  }
};

// Line 72: range 0000000019C18675-0000000019C197E2
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v2; // r13
  boost::asio::detail::executor_function_base *v3; // r14
  unsigned __int64 v4; // rbx
  boost::asio::detail::executor_function_base *v5; // rsi
  unsigned __int64 v6; // rbp
  boost::asio::detail::executor_function_base *v7; // rdi
  char v8; // al
  char v9; // dl
  char v10; // al
  unsigned __int64 v11; // rdi
  boost::asio::detail::executor_function_base::func_type func; // rax
  __int64 (**v13)(void); // rax
  __int64 v14; // rax
  boost::asio::detail::executor_function_base *v15; // rdi
  boost::asio::detail::executor_function_base *v16; // rdi
  boost::asio::detail::executor_function_base::func_type v17; // rax
  char v18; // al
  char v19; // al
  boost::asio::detail::executor_function_base *v20; // rdi
  char v21; // al
  boost::asio::detail::executor_function_base::func_type v22; // rax
  char v23; // al
  char v24; // al
  __int64 v25; // r12
  unsigned __int64 v26; // rdi
  char v27; // al
  boost::detail::sp_counted_base *v28; // rdi
  __int64 v29; // rdi
  __int64 v30; // rax
  __int64 v31; // rsi OVERLAPPED
  __int64 v32; // rdx
  __int64 v33; // rax
  char v34; // dl
  char v35; // dl
  unsigned __int64 v36; // rdi
  char v37; // al
  boost::detail::sp_counted_base *v38; // rdi
  __int64 v39; // r12
  unsigned __int64 v40; // rdi
  char v41; // al
  boost::detail::sp_counted_base *v42; // rdi
  __int64 v43; // rdi
  __int64 v44; // rax
  char v45; // dl
  char v46; // dl
  struct _Unwind_Exception *v47; // rbp
  boost::asio::detail::executor_function_base *v48; // [rsp+0h] [rbp-298h]
  unsigned __int64 v50; // [rsp+20h] [rbp-278h]
  _DWORD *v51; // [rsp+30h] [rbp-268h]
  char v53[600]; // [rsp+40h] [rbp-258h] BYREF

  v50 = (unsigned __int64)v53;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v33 = __asan_stack_malloc_4(544LL);
    if ( v33 )
      v50 = v33;
  }
  v4 = v50 + 544;
  *(_QWORD *)v50 = 1102416563LL;
  *(_QWORD *)(v50 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 360 11 function:85";
  *(_QWORD *)(v50 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete;
  v51 = (_DWORD *)(v50 >> 3);
  v51[536862720] = -235802127;
  v51[536862721] = 61953;
  v51[536862722] = -218959360;
  v51[536862723] = 62194;
  v51[536862734] = -218103808;
  v51[536862735] = -202116109;
  v51[536862736] = -202116109;
  *(_QWORD *)(v50 + 48) = v50 + 32;
  v5 = base;
  *(_QWORD *)(v50 + 56) = base;
  *(_QWORD *)(v50 + 64) = base;
  v6 = (unsigned __int64)&base[1];
  *(_QWORD *)(v50 + 112) = &`vtable for'boost::beast::async_base<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v7 = base + 2;
  if ( *(_BYTE *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(v7);
    goto LABEL_96;
  }
  *(boost::asio::detail::executor_function_base *)(v50 + 120) = base[2];
  v7 = base + 3;
  if ( *(_BYTE *)(((unsigned __int64)&base[3] >> 3) + 0x7FFF8000) )
  {
LABEL_96:
    __asan_report_load8(v7);
    goto LABEL_97;
  }
  *(boost::asio::detail::executor_function_base *)(v50 + 128) = base[3];
  v7 = base + 4;
  if ( *(_WORD *)(((unsigned __int64)&base[4] >> 3) + 0x7FFF8000) )
  {
LABEL_97:
    __asan_report_load16(v7);
LABEL_98:
    __asan_report_load4(v7);
LABEL_99:
    __asan_report_load4(v7);
    goto LABEL_100;
  }
  *(__m128i *)(v50 + 136) = _mm_loadu_si128((const __m128i *)&base[4]);
  v7 = base + 6;
  v8 = *(_BYTE *)(((unsigned __int64)&base[6] >> 3) + 0x7FFF8000);
  if ( v8 && v8 <= 3 )
    goto LABEL_98;
  *(_DWORD *)(v50 + 152) = base[6].func_;
  v7 = (boost::asio::detail::executor_function_base *)((char *)base + 52);
  v9 = *(_BYTE *)((((unsigned __int64)&base[6].func_ + 4) >> 3) + 0x7FFF8000);
  if ( (char)((((_BYTE)base + 52) & 7) + 3) >= v9 && v9 )
    goto LABEL_99;
  *(_DWORD *)(v50 + 156) = HIDWORD(base[6].func_);
  v7 = base + 7;
  if ( *(_WORD *)(((unsigned __int64)&base[7] >> 3) + 0x7FFF8000) )
  {
LABEL_100:
    __asan_report_load16(v7);
    goto LABEL_101;
  }
  *(__m128i *)(v50 + 160) = _mm_loadu_si128((const __m128i *)&base[7]);
  v7 = base + 9;
  if ( *(_BYTE *)(((unsigned __int64)&base[9] >> 3) + 0x7FFF8000) )
  {
LABEL_101:
    __asan_report_load8(v7);
LABEL_102:
    __asan_report_load4(v7);
    goto LABEL_103;
  }
  *(boost::asio::detail::executor_function_base *)(v50 + 176) = base[9];
  v7 = base + 27;
  v10 = *(_BYTE *)(((unsigned __int64)&base[27] >> 3) + 0x7FFF8000);
  if ( v10 && v10 <= 3 )
    goto LABEL_102;
  *(_DWORD *)(v50 + 320) = base[27].func_;
  *(_QWORD *)(v50 + 184) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v48 = (boost::asio::detail::executor_function_base *)(v50 + 192);
  if ( *(_BYTE *)(((v50 + 192) >> 3) + 0x7FFF8000) )
  {
LABEL_103:
    __asan_report_store8();
    goto LABEL_104;
  }
  *(_QWORD *)(v50 + 192) = &`vtable for'boost::beast::async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v2 = v50 + 200;
  v3 = v5 + 12;
  if ( *(_BYTE *)(((unsigned __int64)&v5[12] >> 3) + 0x7FFF8000) )
  {
LABEL_104:
    __asan_report_load8(v3);
    goto LABEL_105;
  }
  if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
  {
LABEL_105:
    v11 = v2;
    __asan_report_store8();
    goto LABEL_106;
  }
  v5 = (boost::asio::detail::executor_function_base *)(v50 + 192);
  *(boost::asio::detail::executor_function_base *)(v50 + 200) = base[12];
  v11 = v50 + 208;
  if ( *(_BYTE *)(((v50 + 208) >> 3) + 0x7FFF8000) )
  {
LABEL_106:
    __asan_report_store8();
    goto LABEL_107;
  }
  *(_QWORD *)(v50 + 208) = 0LL;
  v11 = (unsigned __int64)&base[13];
  if ( *(_BYTE *)(((unsigned __int64)&base[13] >> 3) + 0x7FFF8000) )
  {
LABEL_107:
    __asan_report_load8(v11);
    goto LABEL_108;
  }
  func = base[13].func_;
  base[13].func_ = 0LL;
  *(_QWORD *)(v50 + 208) = func;
  base[12].func_ = 0LL;
  v11 = (unsigned __int64)&base[14];
  if ( *(_BYTE *)(((unsigned __int64)&base[14] >> 3) + 0x7FFF8000) )
  {
LABEL_108:
    __asan_report_load8(v11);
    goto LABEL_109;
  }
  v11 = v50 + 216;
  if ( *(_BYTE *)(((v50 + 216) >> 3) + 0x7FFF8000) )
  {
LABEL_109:
    __asan_report_store8();
    goto LABEL_110;
  }
  *(boost::asio::detail::executor_function_base *)(v50 + 216) = base[14];
  v11 = (unsigned __int64)&base[15];
  if ( *(_BYTE *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000) )
  {
LABEL_110:
    __asan_report_load8(v11);
LABEL_111:
    v13 = (__int64 (**)(void))__asan_report_load8(v11);
    goto LABEL_112;
  }
  v11 = (unsigned __int64)base[15].func_;
  if ( !v11 )
    goto LABEL_25;
  if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
    goto LABEL_111;
  v13 = *(__int64 (***)(void))v11;
  if ( *(_BYTE *)((*(_QWORD *)v11 >> 3) + 0x7FFF8000LL) )
  {
LABEL_112:
    v14 = __asan_report_load8(v13);
    goto LABEL_113;
  }
  v11 = (*v13)();
LABEL_25:
  v14 = v50 + 224;
  if ( *(_BYTE *)(((v50 + 224) >> 3) + 0x7FFF8000) )
  {
LABEL_113:
    v15 = (boost::asio::detail::executor_function_base *)v14;
    __asan_report_store8();
    goto LABEL_114;
  }
  *(_QWORD *)(v50 + 224) = v11;
  v15 = base + 16;
  if ( *(_BYTE *)(((unsigned __int64)&base[16] >> 3) + 0x7FFF8000) )
  {
LABEL_114:
    __asan_report_load8(v15);
    goto LABEL_115;
  }
  v15 = (boost::asio::detail::executor_function_base *)(v50 + 232);
  if ( *(_BYTE *)(((v50 + 232) >> 3) + 0x7FFF8000) )
  {
LABEL_115:
    __asan_report_store8();
    goto LABEL_116;
  }
  *(boost::asio::detail::executor_function_base *)(v50 + 232) = base[16];
  v15 = base + 17;
  if ( *(_BYTE *)(((unsigned __int64)&base[17] >> 3) + 0x7FFF8000) )
  {
LABEL_116:
    __asan_report_load8(v15);
    goto LABEL_117;
  }
  v15 = (boost::asio::detail::executor_function_base *)(v50 + 240);
  if ( *(_BYTE *)(((v50 + 240) >> 3) + 0x7FFF8000) )
  {
LABEL_117:
    __asan_report_store8();
    goto LABEL_118;
  }
  *(boost::asio::detail::executor_function_base *)(v50 + 240) = base[17];
  v15 = base + 18;
  if ( *(_BYTE *)(((unsigned __int64)&base[18] >> 3) + 0x7FFF8000) )
  {
LABEL_118:
    __asan_report_load8(v15);
    goto LABEL_119;
  }
  v15 = (boost::asio::detail::executor_function_base *)(v50 + 248);
  if ( *(_BYTE *)(((v50 + 248) >> 3) + 0x7FFF8000) )
  {
LABEL_119:
    __asan_report_store8();
    goto LABEL_120;
  }
  *(boost::asio::detail::executor_function_base *)(v50 + 248) = base[18];
  v15 = base + 19;
  if ( *(_BYTE *)(((unsigned __int64)&base[19] >> 3) + 0x7FFF8000) )
  {
LABEL_120:
    __asan_report_load8(v15);
    goto LABEL_121;
  }
  v15 = (boost::asio::detail::executor_function_base *)(v50 + 256);
  if ( *(_BYTE *)(((v50 + 256) >> 3) + 0x7FFF8000) )
  {
LABEL_121:
    __asan_report_store8();
    goto LABEL_122;
  }
  *(boost::asio::detail::executor_function_base *)(v50 + 256) = base[19];
  v15 = base + 20;
  if ( *(_BYTE *)(((unsigned __int64)&base[20] >> 3) + 0x7FFF8000) )
  {
LABEL_122:
    __asan_report_load8(v15);
    goto LABEL_123;
  }
  v5 = (boost::asio::detail::executor_function_base *)(v50 + 192);
  v15 = (boost::asio::detail::executor_function_base *)(v50 + 264);
  if ( *(_BYTE *)(((v50 + 264) >> 3) + 0x7FFF8000) )
  {
LABEL_123:
    __asan_report_store8();
    goto LABEL_124;
  }
  *(boost::asio::detail::executor_function_base *)(v50 + 264) = base[20];
  base[20].func_ = 0LL;
  v15 = base + 21;
  if ( *(char *)(((unsigned __int64)&base[21] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_124:
    __asan_report_load1(v15);
    goto LABEL_125;
  }
  v15 = (boost::asio::detail::executor_function_base *)(v50 + 272);
  if ( *(char *)(((v50 + 272) >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_125:
    __asan_report_store1(v15);
    goto LABEL_126;
  }
  *(_BYTE *)(v50 + 272) = base[21].func_;
  LOBYTE(base[21].func_) = 0;
  if ( *(_BYTE *)(((unsigned __int64)v48 >> 3) + 0x7FFF8000) )
  {
LABEL_126:
    v16 = v48;
    __asan_report_store8();
    goto LABEL_127;
  }
  *(_QWORD *)(v50 + 192) = &`vtable for'boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v16 = base + 22;
  if ( *(_BYTE *)(((unsigned __int64)&base[22] >> 3) + 0x7FFF8000) )
  {
LABEL_127:
    __asan_report_load8(v16);
    goto LABEL_128;
  }
  v17 = base[22].func_;
  base[22].func_ = 0LL;
  v5 = (boost::asio::detail::executor_function_base *)(v50 + 192);
  v16 = (boost::asio::detail::executor_function_base *)(v50 + 280);
  if ( *(_BYTE *)(((v50 + 280) >> 3) + 0x7FFF8000) )
  {
LABEL_128:
    __asan_report_store8();
LABEL_129:
    __asan_report_store4(v16);
LABEL_130:
    __asan_report_load4(v16);
    goto LABEL_131;
  }
  v5 = (boost::asio::detail::executor_function_base *)(v50 + 192);
  *(_QWORD *)(v50 + 280) = v17;
  v16 = (boost::asio::detail::executor_function_base *)(v50 + 288);
  v18 = *(_BYTE *)(((v50 + 288) >> 3) + 0x7FFF8000);
  if ( v18 && v18 <= 3 )
    goto LABEL_129;
  v16 = base + 23;
  v19 = *(_BYTE *)(((unsigned __int64)&base[23] >> 3) + 0x7FFF8000);
  if ( v19 && v19 <= 3 )
    goto LABEL_130;
  v5 = (boost::asio::detail::executor_function_base *)(v50 + 192);
  *(_DWORD *)(v50 + 288) = base[23].func_;
  if ( *(_BYTE *)(((unsigned __int64)v48 >> 3) + 0x7FFF8000) )
  {
LABEL_131:
    v20 = v5;
    __asan_report_store8();
    goto LABEL_132;
  }
  *(_QWORD *)(v50 + 192) = &`vtable for'boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>
                         + 2;
  v20 = base + 24;
  if ( *(_BYTE *)(((unsigned __int64)&base[24] >> 3) + 0x7FFF8000) )
  {
LABEL_132:
    __asan_report_load8(v20);
    goto LABEL_133;
  }
  v20 = (boost::asio::detail::executor_function_base *)(v50 + 296);
  if ( *(_BYTE *)(((v50 + 296) >> 3) + 0x7FFF8000) )
  {
LABEL_133:
    __asan_report_store8();
    goto LABEL_134;
  }
  *(boost::asio::detail::executor_function_base *)(v50 + 296) = base[24];
  v20 = base + 25;
  if ( *(_BYTE *)(((unsigned __int64)&base[25] >> 3) + 0x7FFF8000) )
  {
LABEL_134:
    __asan_report_load8(v20);
    goto LABEL_135;
  }
  *(boost::asio::detail::executor_function_base *)(v50 + 304) = base[25];
  base[25].func_ = 0LL;
  v20 = base + 26;
  if ( *(char *)(((unsigned __int64)&base[26] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_135:
    __asan_report_load1(v20);
    goto LABEL_136;
  }
  *(_BYTE *)(v50 + 312) = base[26].func_;
  LOBYTE(base[26].func_) = 0;
  *(_QWORD *)(v50 + 184) = &`vtable for'boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>
                         + 2;
  v20 = base + 28;
  if ( *(_BYTE *)(((unsigned __int64)&base[28] >> 3) + 0x7FFF8000) )
  {
LABEL_136:
    __asan_report_load8(v20);
    goto LABEL_137;
  }
  *(boost::asio::detail::executor_function_base *)(v50 + 328) = base[28];
  v20 = base + 29;
  if ( *(_BYTE *)(((unsigned __int64)&base[29] >> 3) + 0x7FFF8000) )
  {
LABEL_137:
    __asan_report_load8(v20);
    goto LABEL_138;
  }
  *(boost::asio::detail::executor_function_base *)(v50 + 336) = base[29];
  v20 = base + 30;
  if ( *(_BYTE *)(((unsigned __int64)&base[30] >> 3) + 0x7FFF8000) )
  {
LABEL_138:
    __asan_report_load8(v20);
    goto LABEL_139;
  }
  *(boost::asio::detail::executor_function_base *)(v50 + 344) = base[30];
  v20 = base + 31;
  if ( *(_WORD *)(((unsigned __int64)&base[31] >> 3) + 0x7FFF8000) )
  {
LABEL_139:
    __asan_report_load16(v20);
    goto LABEL_140;
  }
  *(__m128i *)(v50 + 352) = _mm_loadu_si128((const __m128i *)&base[31]);
  v20 = base + 33;
  if ( *(_BYTE *)(((unsigned __int64)&base[33] >> 3) + 0x7FFF8000) )
  {
LABEL_140:
    __asan_report_load8(v20);
    goto LABEL_141;
  }
  *(boost::asio::detail::executor_function_base *)(v50 + 368) = base[33];
  v20 = base + 34;
  if ( *(_BYTE *)(((unsigned __int64)&base[34] >> 3) + 0x7FFF8000) )
  {
LABEL_141:
    __asan_report_load8(v20);
    goto LABEL_142;
  }
  *(boost::asio::detail::executor_function_base *)(v50 + 376) = base[34];
  base[34].func_ = 0LL;
  v20 = base + 35;
  if ( *(char *)(((unsigned __int64)&base[35] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_142:
    __asan_report_load1(v20);
LABEL_143:
    __asan_report_load4(v20);
    goto LABEL_144;
  }
  *(_BYTE *)(v50 + 384) = base[35].func_;
  LOBYTE(base[35].func_) = 0;
  v20 = base + 36;
  v21 = *(_BYTE *)(((unsigned __int64)&base[36] >> 3) + 0x7FFF8000);
  if ( v21 && v21 <= 3 )
    goto LABEL_143;
  *(_DWORD *)(v50 + 392) = base[36].func_;
  *(_QWORD *)(v50 + 112) = &`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>>
                         + 2;
  v20 = base + 37;
  if ( *(_BYTE *)(((unsigned __int64)&base[37] >> 3) + 0x7FFF8000) )
  {
LABEL_144:
    __asan_report_load8(v20);
    goto LABEL_145;
  }
  *(boost::asio::detail::executor_function_base *)(v50 + 400) = base[37];
  *(_QWORD *)(v50 + 408) = 0LL;
  v20 = base + 38;
  if ( *(_BYTE *)(((unsigned __int64)&base[38] >> 3) + 0x7FFF8000) )
  {
LABEL_145:
    __asan_report_load8(v20);
    goto LABEL_146;
  }
  v22 = base[38].func_;
  base[38].func_ = 0LL;
  *(_QWORD *)(v50 + 408) = v22;
  base[37].func_ = 0LL;
  v20 = base + 39;
  if ( *(_BYTE *)(((unsigned __int64)&base[39] >> 3) + 0x7FFF8000) )
  {
LABEL_146:
    __asan_report_load8(v20);
LABEL_147:
    __asan_report_load1(v20);
    goto LABEL_148;
  }
  *(boost::asio::detail::executor_function_base *)(v50 + 416) = base[39];
  v20 = base + 40;
  v23 = *(_BYTE *)(((unsigned __int64)&base[40] >> 3) + 0x7FFF8000);
  if ( v23 <= (((unsigned __int8)base + 64) & 7) && v23 )
    goto LABEL_147;
  v24 = (char)base[40].func_;
  LOBYTE(base[40].func_) = 0;
  *(_BYTE *)(v50 + 424) = v24;
  v20 = base + 41;
  if ( *(_WORD *)(((unsigned __int64)&base[41] >> 3) + 0x7FFF8000) )
  {
LABEL_148:
    __asan_report_load16(v20);
    goto LABEL_149;
  }
  *(__m128i *)(v50 + 432) = _mm_loadu_si128((const __m128i *)&base[41]);
  v20 = base + 43;
  if ( *(_WORD *)(((unsigned __int64)&base[43] >> 3) + 0x7FFF8000) )
  {
LABEL_149:
    __asan_report_load16(v20);
    goto LABEL_150;
  }
  *(__m128i *)(v50 + 448) = _mm_loadu_si128((const __m128i *)&base[43]);
  v20 = base + 45;
  if ( *(_BYTE *)(((unsigned __int64)&base[45] >> 3) + 0x7FFF8000) )
  {
LABEL_150:
    __asan_report_load8(v20);
LABEL_151:
    v26 = v6;
    __asan_report_store8();
    goto LABEL_152;
  }
  *(boost::asio::detail::executor_function_base *)(v50 + 464) = base[45];
  v25 = *(_QWORD *)(v50 + 64);
  if ( !v25 )
    goto LABEL_82;
  v6 = v25 + 8;
  if ( *(_BYTE *)(((unsigned __int64)(v25 + 8) >> 3) + 0x7FFF8000) )
    goto LABEL_151;
  *(_QWORD *)(v25 + 8) = &`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>>
                       + 2;
  v26 = v25 + 320;
  if ( *(char *)(((unsigned __int64)(v25 + 320) >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_152:
    __asan_report_load1(v26);
LABEL_153:
    __asan_report_load8(v26);
LABEL_154:
    __asan_report_store1(v26);
    goto LABEL_155;
  }
  if ( !*(_BYTE *)(v25 + 320) )
    goto LABEL_75;
  v26 = v25 + 312;
  if ( *(_BYTE *)(((unsigned __int64)(v25 + 312) >> 3) + 0x7FFF8000) )
    goto LABEL_153;
  v26 = *(_QWORD *)(v25 + 312);
  v27 = *(_BYTE *)((v26 >> 3) + 0x7FFF8000);
  if ( v27 <= (*(_BYTE *)(v25 + 312) & 7) && v27 )
    goto LABEL_154;
  *(_BYTE *)v26 = 0;
LABEL_75:
  v26 = v25 + 304;
  if ( *(_BYTE *)(((unsigned __int64)(v25 + 304) >> 3) + 0x7FFF8000) )
  {
LABEL_155:
    __asan_report_load8(v26);
LABEL_156:
    v29 = v6;
    __asan_report_store8();
    goto LABEL_157;
  }
  v28 = *(boost::detail::sp_counted_base **)(v25 + 304);
  if ( v28 )
    boost::detail::sp_counted_base::release(v28);
  if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
    goto LABEL_156;
  *(_QWORD *)(v25 + 8) = &`vtable for'boost::beast::async_base<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>,boost::asio::executor,std::allocator<void>>
                       + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v25 + 272));
  v29 = v25 + 80;
  if ( *(_BYTE *)(((unsigned __int64)(v25 + 80) >> 3) + 0x7FFF8000) )
  {
LABEL_157:
    __asan_report_store8();
    goto LABEL_158;
  }
  *(_QWORD *)(v25 + 80) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v25 + 200));
  v29 = v25 + 88;
  if ( *(_BYTE *)(((unsigned __int64)(v25 + 88) >> 3) + 0x7FFF8000) )
  {
LABEL_158:
    __asan_report_store8();
    goto LABEL_159;
  }
  *(_QWORD *)(v25 + 88) = &`vtable for'boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>
                        + 2;
  boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(v25 + 88));
  *(_QWORD *)(v50 + 64) = 0LL;
LABEL_82:
  v6 = *(_QWORD *)(v50 + 56);
  if ( !v6 )
    goto LABEL_91;
  v30 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v30 )
  {
    v29 = v30 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v30 + 8) >> 3) + 0x7FFF8000) )
    {
      v30 = *(_QWORD *)(v30 + 8);
      goto LABEL_86;
    }
LABEL_159:
    __asan_report_load8(v29);
    goto LABEL_160;
  }
LABEL_86:
  if ( v30 )
  {
    v29 = v30 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v30 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v30 + 16) )
        goto LABEL_89;
LABEL_161:
      v34 = *(_BYTE *)(((v6 + 376) >> 3) + 0x7FFF8000);
      if ( v34 <= (char)((v6 + 120) & 7) && v34 )
      {
        __asan_report_load1(v6 + 376);
      }
      else
      {
        v35 = *(_BYTE *)((v6 >> 3) + 0x7FFF8000);
        if ( v35 > (char)(v6 & 7) || !v35 )
        {
          *(_BYTE *)v6 = *(_BYTE *)(v6 + 376);
          *(_QWORD *)(v30 + 16) = v6;
          goto LABEL_90;
        }
      }
      __asan_report_store1(v6);
      goto LABEL_168;
    }
LABEL_160:
    v30 = __asan_report_load8(v29);
    goto LABEL_161;
  }
LABEL_89:
  operator delete(*(void **)(v50 + 56));
LABEL_90:
  *(_QWORD *)(v50 + 56) = 0LL;
LABEL_91:
  if ( call )
  {
    v31 = *(_QWORD *)(v50 + 448);
    v32 = *(_QWORD *)(v50 + 456);
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>>::operator()(
      (boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int> > > > > *const)(v50 + 112),
      *(boost::beast::error_code *)&v31,
      *(_QWORD *)(v50 + 464));
  }
LABEL_168:
  *(_QWORD *)(v50 + 112) = &`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>>
                         + 2;
  if ( *(_BYTE *)(v50 + 424) )
  {
    v36 = *(_QWORD *)(v50 + 416);
    v37 = *(_BYTE *)((v36 >> 3) + 0x7FFF8000);
    if ( v37 <= (*(_BYTE *)(v50 + 416) & 7) && v37 )
    {
      __asan_report_store1(v36);
      goto LABEL_200;
    }
    *(_BYTE *)v36 = 0;
  }
  v38 = *(boost::detail::sp_counted_base **)(v50 + 408);
  if ( v38 )
    boost::detail::sp_counted_base::release(v38);
  *(_QWORD *)(v50 + 112) = &`vtable for'boost::beast::async_base<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v50 + 376));
  *(_QWORD *)(v50 + 184) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v50 + 304));
  *(_QWORD *)(v50 + 192) = &`vtable for'boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>
                         + 2;
  boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(v50 + 192));
  v39 = *(_QWORD *)(v50 + 64);
  if ( v39 )
  {
    v6 = v39 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v39 + 8) >> 3) + 0x7FFF8000) )
    {
      *(_QWORD *)(v39 + 8) = &`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>>
                           + 2;
      v40 = v39 + 320;
      if ( *(char *)(((unsigned __int64)(v39 + 320) >> 3) + 0x7FFF8000) >= 0 )
      {
        if ( !*(_BYTE *)(v39 + 320) )
          goto LABEL_182;
        v40 = v39 + 312;
        if ( !*(_BYTE *)(((unsigned __int64)(v39 + 312) >> 3) + 0x7FFF8000) )
        {
          v40 = *(_QWORD *)(v39 + 312);
          v41 = *(_BYTE *)((v40 >> 3) + 0x7FFF8000);
          if ( v41 > (*(_BYTE *)(v39 + 312) & 7) || !v41 )
          {
            *(_BYTE *)v40 = 0;
LABEL_182:
            v40 = v39 + 304;
            if ( !*(_BYTE *)(((unsigned __int64)(v39 + 304) >> 3) + 0x7FFF8000) )
            {
              v42 = *(boost::detail::sp_counted_base **)(v39 + 304);
              if ( v42 )
                boost::detail::sp_counted_base::release(v42);
              if ( !*(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
              {
                *(_QWORD *)(v39 + 8) = &`vtable for'boost::beast::async_base<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>,boost::asio::executor,std::allocator<void>>
                                     + 2;
                boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v39 + 272));
                v43 = v39 + 80;
                if ( !*(_BYTE *)(((unsigned __int64)(v39 + 80) >> 3) + 0x7FFF8000) )
                {
                  *(_QWORD *)(v39 + 80) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>,boost::asio::executor,std::allocator<void>>
                                        + 2;
                  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v39 + 200));
                  v43 = v39 + 88;
                  if ( !*(_BYTE *)(((unsigned __int64)(v39 + 88) >> 3) + 0x7FFF8000) )
                  {
                    *(_QWORD *)(v39 + 88) = &`vtable for'boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>
                                          + 2;
                    boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(v39 + 88));
                    *(_QWORD *)(v50 + 64) = 0LL;
                    goto LABEL_189;
                  }
LABEL_207:
                  __asan_report_store8();
                  goto LABEL_208;
                }
LABEL_206:
                __asan_report_store8();
                goto LABEL_207;
              }
LABEL_205:
              v43 = v6;
              __asan_report_store8();
              goto LABEL_206;
            }
LABEL_204:
            __asan_report_load8(v40);
            goto LABEL_205;
          }
LABEL_203:
          __asan_report_store1(v40);
          goto LABEL_204;
        }
LABEL_202:
        __asan_report_load8(v40);
        goto LABEL_203;
      }
LABEL_201:
      __asan_report_load1(v40);
      goto LABEL_202;
    }
LABEL_200:
    v40 = v6;
    __asan_report_store8();
    goto LABEL_201;
  }
LABEL_189:
  v4 = *(_QWORD *)(v50 + 56);
  if ( !v4 )
    goto LABEL_197;
  v44 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v44 )
  {
    v43 = v44 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v44 + 8) >> 3) + 0x7FFF8000) )
    {
      v44 = *(_QWORD *)(v44 + 8);
      goto LABEL_193;
    }
LABEL_208:
    __asan_report_load8(v43);
LABEL_209:
    v44 = __asan_report_load8(v43);
    goto LABEL_210;
  }
LABEL_193:
  if ( !v44 )
  {
LABEL_196:
    operator delete((void *)v4);
    goto LABEL_197;
  }
  v43 = v44 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v44 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_209;
  if ( *(_QWORD *)(v44 + 16) )
    goto LABEL_196;
LABEL_210:
  v45 = *(_BYTE *)(((v4 + 376) >> 3) + 0x7FFF8000);
  if ( v45 <= (char)((v4 + 120) & 7) && v45 )
  {
    __asan_report_load1(v4 + 376);
    goto LABEL_216;
  }
  v46 = *(_BYTE *)((v4 >> 3) + 0x7FFF8000);
  if ( v46 <= (char)(v4 & 7) && v46 )
  {
LABEL_216:
    v47 = (struct _Unwind_Exception *)__asan_report_store1(v4);
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int> > > > > *const)(v4 - 432));
    boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::basic_flat_buffer<std::allocator<char>>,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::read_op<boost::asio::mutable_buffer>,boost::beast::detail::dynamic_read_ops::read_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,boost::beast::http::detail::read_all_condition<false>,boost::beast::http::detail::read_msg_op<boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::basic_flat_buffer<std::allocator<char> >,false,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,std::allocator<char>,boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int> > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const)(v4 - 496));
    __asan_handle_no_return(v4 - 496);
    _Unwind_Resume(v47);
  }
  *(_BYTE *)v4 = *(_BYTE *)(v4 + 376);
  *(_QWORD *)(v44 + 16) = v4;
LABEL_197:
  if ( v53 == (char *)v50 )
  {
    *(_QWORD *)((v50 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v50 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v50 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v50 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v50 = 1172321806LL;
    *(_QWORD *)((v50 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v50 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v50 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v50 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v50 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v50 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v50 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v50 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v50 >> 3) + 0x7FFF8040) = -168430091;
  }
};

// Line 72: range 0000000019C8F771-0000000019C8FFBA
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v3; // r15
  unsigned __int64 v4; // rbx
  _DWORD *v5; // r14
  unsigned __int64 v6; // rbp
  boost::asio::detail::executor_function_base *v7; // rdi
  char v8; // al
  char v9; // dl
  char v10; // al
  char v11; // al
  boost::asio::detail::executor_function_base::func_type func; // rax
  char v13; // al
  char v14; // al
  __int64 v15; // rdi
  __int64 v16; // rax
  __int64 v17; // rsi OVERLAPPED
  __int64 v18; // rdx
  __int64 v19; // rax
  char v20; // dl
  char v21; // dl
  unsigned __int64 v22; // rdi
  char v23; // al
  boost::detail::sp_counted_base *v24; // rdi
  __int64 v25; // rdi
  __int64 v26; // rax
  char v27; // dl
  char v28; // dl
  struct _Unwind_Exception *v29; // rbp
  char v30[664]; // [rsp+10h] [rbp-298h] BYREF

  v3 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v19 = __asan_stack_malloc_4(608LL);
    if ( v19 )
      v3 = v19;
  }
  v4 = v3 + 608;
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 1 12 allocator:76 64 24 4 p:77 128 408 11 function:85";
  *(_QWORD *)(v3 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234881024;
  v5[536862723] = -218959118;
  v5[536862736] = -218103808;
  v5[536862737] = -202116109;
  v5[536862738] = -202116109;
  *(_QWORD *)(v3 + 64) = v3 + 48;
  *(_QWORD *)(v3 + 72) = base;
  *(_QWORD *)(v3 + 80) = base;
  v6 = (unsigned __int64)&base[1];
  *(_QWORD *)(v3 + 128) = &`vtable for'boost::beast::async_base<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  if ( *(_BYTE *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) )
  {
    v7 = base + 2;
    __asan_report_load8(&base[2]);
    goto LABEL_41;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 136) = base[2];
  v7 = base + 3;
  if ( *(_BYTE *)(((unsigned __int64)&base[3] >> 3) + 0x7FFF8000) )
  {
LABEL_41:
    __asan_report_load8(v7);
    goto LABEL_42;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 144) = base[3];
  v7 = base + 4;
  if ( *(_WORD *)(((unsigned __int64)&base[4] >> 3) + 0x7FFF8000) )
  {
LABEL_42:
    __asan_report_load16(v7);
LABEL_43:
    __asan_report_load4(v7);
LABEL_44:
    __asan_report_load4(v7);
    goto LABEL_45;
  }
  *(__m128i *)(v3 + 152) = _mm_loadu_si128((const __m128i *)&base[4]);
  v7 = base + 6;
  v8 = *(_BYTE *)(((unsigned __int64)&base[6] >> 3) + 0x7FFF8000);
  if ( v8 && v8 <= 3 )
    goto LABEL_43;
  *(_DWORD *)(v3 + 168) = base[6].func_;
  v7 = (boost::asio::detail::executor_function_base *)((char *)base + 52);
  v9 = *(_BYTE *)((((unsigned __int64)&base[6].func_ + 4) >> 3) + 0x7FFF8000);
  if ( (char)((((_BYTE)base + 52) & 7) + 3) >= v9 && v9 )
    goto LABEL_44;
  *(_DWORD *)(v3 + 172) = HIDWORD(base[6].func_);
  v7 = base + 7;
  if ( *(_WORD *)(((unsigned __int64)&base[7] >> 3) + 0x7FFF8000) )
  {
LABEL_45:
    __asan_report_load16(v7);
    goto LABEL_46;
  }
  *(__m128i *)(v3 + 176) = _mm_loadu_si128((const __m128i *)&base[7]);
  v7 = base + 9;
  if ( *(_BYTE *)(((unsigned __int64)&base[9] >> 3) + 0x7FFF8000) )
  {
LABEL_46:
    __asan_report_load8(v7);
LABEL_47:
    __asan_report_load4(v7);
    goto LABEL_48;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 192) = base[9];
  boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::async_base(
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 200),
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *)&base[10]);
  v7 = base + 39;
  v10 = *(_BYTE *)(((unsigned __int64)&base[39] >> 3) + 0x7FFF8000);
  if ( v10 && v10 <= 3 )
    goto LABEL_47;
  *(_DWORD *)(v3 + 432) = base[39].func_;
  *(_QWORD *)(v3 + 200) = &`vtable for'boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                        + 2;
  v7 = base + 40;
  if ( *(_BYTE *)(((unsigned __int64)&base[40] >> 3) + 0x7FFF8000) )
  {
LABEL_48:
    __asan_report_load8(v7);
    goto LABEL_49;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 440) = base[40];
  base[40].func_ = 0LL;
  v7 = base + 41;
  if ( *(char *)(((unsigned __int64)&base[41] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_49:
    __asan_report_load1(v7);
LABEL_50:
    __asan_report_load4(v7);
    goto LABEL_51;
  }
  *(_BYTE *)(v3 + 448) = base[41].func_;
  LOBYTE(base[41].func_) = 0;
  v7 = base + 42;
  v11 = *(_BYTE *)(((unsigned __int64)&base[42] >> 3) + 0x7FFF8000);
  if ( v11 && v11 <= 3 )
    goto LABEL_50;
  *(_DWORD *)(v3 + 456) = base[42].func_;
  *(_QWORD *)(v3 + 128) = &`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>
                        + 2;
  v7 = base + 43;
  if ( *(_BYTE *)(((unsigned __int64)&base[43] >> 3) + 0x7FFF8000) )
  {
LABEL_51:
    __asan_report_load8(v7);
    goto LABEL_52;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 464) = base[43];
  *(_QWORD *)(v3 + 472) = 0LL;
  v7 = base + 44;
  if ( *(_BYTE *)(((unsigned __int64)&base[44] >> 3) + 0x7FFF8000) )
  {
LABEL_52:
    __asan_report_load8(v7);
    goto LABEL_53;
  }
  func = base[44].func_;
  base[44].func_ = 0LL;
  *(_QWORD *)(v3 + 472) = func;
  base[43].func_ = 0LL;
  v7 = base + 45;
  if ( *(_BYTE *)(((unsigned __int64)&base[45] >> 3) + 0x7FFF8000) )
  {
LABEL_53:
    __asan_report_load8(v7);
LABEL_54:
    __asan_report_load1(v7);
    goto LABEL_55;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 480) = base[45];
  v7 = base + 46;
  v13 = *(_BYTE *)(((unsigned __int64)&base[46] >> 3) + 0x7FFF8000);
  if ( v13 <= (((unsigned __int8)base + 112) & 7) && v13 )
    goto LABEL_54;
  v14 = (char)base[46].func_;
  LOBYTE(base[46].func_) = 0;
  *(_BYTE *)(v3 + 488) = v14;
  v7 = base + 47;
  if ( *(_WORD *)(((unsigned __int64)&base[47] >> 3) + 0x7FFF8000) )
  {
LABEL_55:
    __asan_report_load16(v7);
    goto LABEL_56;
  }
  *(__m128i *)(v3 + 496) = _mm_loadu_si128((const __m128i *)&base[47]);
  v7 = base + 49;
  if ( *(_WORD *)(((unsigned __int64)&base[49] >> 3) + 0x7FFF8000) )
  {
LABEL_56:
    __asan_report_load16(v7);
    goto LABEL_57;
  }
  *(__m128i *)(v3 + 512) = _mm_loadu_si128((const __m128i *)&base[49]);
  v7 = base + 51;
  if ( *(_BYTE *)(((unsigned __int64)&base[51] >> 3) + 0x7FFF8000) )
  {
LABEL_57:
    __asan_report_load8(v7);
    goto LABEL_58;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 528) = base[51];
  v15 = *(_QWORD *)(v3 + 80);
  if ( v15 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v15 + 8));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v6 = *(_QWORD *)(v3 + 72);
  if ( !v6 )
    goto LABEL_36;
  v16 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v16 )
  {
    v7 = (boost::asio::detail::executor_function_base *)(v16 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v16 + 8) >> 3) + 0x7FFF8000) )
    {
      v16 = *(_QWORD *)(v16 + 8);
      goto LABEL_31;
    }
LABEL_58:
    __asan_report_load8(v7);
    goto LABEL_59;
  }
LABEL_31:
  if ( v16 )
  {
    v7 = (boost::asio::detail::executor_function_base *)(v16 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v16 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v16 + 16) )
        goto LABEL_34;
LABEL_60:
      v20 = *(_BYTE *)(((v6 + 424) >> 3) + 0x7FFF8000);
      if ( v20 <= (char)((v6 - 88) & 7) && v20 )
      {
        __asan_report_load1(v6 + 424);
      }
      else
      {
        v21 = *(_BYTE *)((v6 >> 3) + 0x7FFF8000);
        if ( v21 > (char)(v6 & 7) || !v21 )
        {
          *(_BYTE *)v6 = *(_BYTE *)(v6 + 424);
          *(_QWORD *)(v16 + 16) = v6;
          goto LABEL_35;
        }
      }
      __asan_report_store1(v6);
      goto LABEL_67;
    }
LABEL_59:
    v16 = __asan_report_load8(v7);
    goto LABEL_60;
  }
LABEL_34:
  operator delete(*(void **)(v3 + 72));
LABEL_35:
  *(_QWORD *)(v3 + 72) = 0LL;
LABEL_36:
  if ( call )
  {
    v17 = *(_QWORD *)(v3 + 512);
    v18 = *(_QWORD *)(v3 + 520);
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::operator()(
      (boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v3 + 128),
      *(boost::beast::error_code *)&v17,
      *(_QWORD *)(v3 + 528));
  }
LABEL_67:
  *(_QWORD *)(v3 + 128) = &`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>
                        + 2;
  if ( *(_BYTE *)(v3 + 488) )
  {
    v22 = *(_QWORD *)(v3 + 480);
    v23 = *(_BYTE *)((v22 >> 3) + 0x7FFF8000);
    if ( v23 <= (*(_BYTE *)(v3 + 480) & 7) && v23 )
    {
      __asan_report_store1(v22);
      goto LABEL_86;
    }
    *(_BYTE *)v22 = 0;
  }
  v24 = *(boost::detail::sp_counted_base **)(v3 + 472);
  if ( v24 )
    boost::detail::sp_counted_base::release(v24);
  *(_QWORD *)(v3 + 128) = &`vtable for'boost::beast::async_base<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v3 + 440));
  *(_QWORD *)(v3 + 200) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v3 + 416));
  *(_QWORD *)(v3 + 208) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                        + 2;
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 208));
  v25 = *(_QWORD *)(v3 + 80);
  if ( v25 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v25 + 8));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v4 = *(_QWORD *)(v3 + 72);
  if ( v4 )
  {
    v26 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( !v26 )
      goto LABEL_79;
    v22 = v26 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v26 + 8) >> 3) + 0x7FFF8000) )
    {
      v26 = *(_QWORD *)(v26 + 8);
LABEL_79:
      if ( !v26 )
      {
LABEL_82:
        operator delete((void *)v4);
        goto LABEL_83;
      }
      v22 = v26 + 16;
      if ( !*(_BYTE *)(((unsigned __int64)(v26 + 16) >> 3) + 0x7FFF8000) )
      {
        if ( *(_QWORD *)(v26 + 16) )
          goto LABEL_82;
LABEL_88:
        v27 = *(_BYTE *)(((v4 + 424) >> 3) + 0x7FFF8000);
        if ( v27 <= (char)((v4 - 88) & 7) && v27 )
        {
          __asan_report_load1(v4 + 424);
        }
        else
        {
          v28 = *(_BYTE *)((v4 >> 3) + 0x7FFF8000);
          if ( v28 > (char)(v4 & 7) || !v28 )
          {
            *(_BYTE *)v4 = *(_BYTE *)(v4 + 424);
            *(_QWORD *)(v26 + 16) = v4;
            goto LABEL_83;
          }
        }
        v29 = (struct _Unwind_Exception *)__asan_report_store1(v4);
        boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v4 - 480));
        boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::asio::mutable_buffer>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const)(v4 - 544));
        __asan_handle_no_return(v4 - 544);
        _Unwind_Resume(v29);
      }
LABEL_87:
      v26 = __asan_report_load8(v22);
      goto LABEL_88;
    }
LABEL_86:
    __asan_report_load8(v22);
    goto LABEL_87;
  }
LABEL_83:
  if ( v30 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8048) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8048) = -168430091;
  }
};

// Line 72: range 0000000019CA1FCB-0000000019CA27CB
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v3; // r14
  unsigned __int64 v4; // rbx
  _DWORD *v5; // r15
  unsigned __int64 v6; // rbp
  boost::asio::detail::executor_function_base *v7; // rdi
  char v8; // al
  char v9; // dl
  char v10; // al
  char v11; // al
  boost::asio::detail::executor_function_base::func_type func; // rax
  char v13; // al
  char v14; // al
  __int64 v15; // rdi
  __int64 v16; // rax
  __int64 v17; // rsi OVERLAPPED
  __int64 v18; // rdx
  __int64 v19; // rax
  char v20; // dl
  char v21; // dl
  unsigned __int64 v22; // rdi
  char v23; // al
  boost::detail::sp_counted_base *v24; // rdi
  __int64 v25; // rdi
  __int64 v26; // rax
  char v27; // dl
  char v28; // dl
  struct _Unwind_Exception *v29; // rbp
  char v30[696]; // [rsp+10h] [rbp-2B8h] BYREF

  v3 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v19 = __asan_stack_malloc_4(640LL);
    if ( v19 )
      v3 = v19;
  }
  v4 = v3 + 640;
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 1 12 allocator:76 64 24 4 p:77 128 448 11 function:85";
  *(_QWORD *)(v3 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234881024;
  v5[536862723] = -218959118;
  v5[536862738] = -202116109;
  v5[536862739] = -202116109;
  *(_QWORD *)(v3 + 64) = v3 + 48;
  *(_QWORD *)(v3 + 72) = base;
  *(_QWORD *)(v3 + 80) = base;
  v6 = (unsigned __int64)&base[1];
  *(_QWORD *)(v3 + 128) = &`vtable for'boost::beast::async_base<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  if ( *(_BYTE *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) )
  {
    v7 = base + 2;
    __asan_report_load8(&base[2]);
    goto LABEL_40;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 136) = base[2];
  v7 = base + 3;
  if ( *(_BYTE *)(((unsigned __int64)&base[3] >> 3) + 0x7FFF8000) )
  {
LABEL_40:
    __asan_report_load8(v7);
LABEL_41:
    __asan_report_load4(v7);
LABEL_42:
    __asan_report_load4(v7);
    goto LABEL_43;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 144) = base[3];
  boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>>::buffers_prefix_view(
    (boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::asio::const_buffer>&> > > *const)(v3 + 152),
    (const boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::asio::const_buffer>&> > > *)&base[4]);
  v7 = base + 11;
  v8 = *(_BYTE *)(((unsigned __int64)&base[11] >> 3) + 0x7FFF8000);
  if ( v8 && v8 <= 3 )
    goto LABEL_41;
  *(_DWORD *)(v3 + 208) = base[11].func_;
  v7 = (boost::asio::detail::executor_function_base *)((char *)base + 92);
  v9 = *(_BYTE *)((((unsigned __int64)&base[11].func_ + 4) >> 3) + 0x7FFF8000);
  if ( (char)((((_BYTE)base + 92) & 7) + 3) >= v9 && v9 )
    goto LABEL_42;
  *(_DWORD *)(v3 + 212) = HIDWORD(base[11].func_);
  v7 = base + 12;
  if ( *(_WORD *)(((unsigned __int64)&base[12] >> 3) + 0x7FFF8000) )
  {
LABEL_43:
    __asan_report_load16(v7);
    goto LABEL_44;
  }
  *(__m128i *)(v3 + 216) = _mm_loadu_si128((const __m128i *)&base[12]);
  v7 = base + 14;
  if ( *(_BYTE *)(((unsigned __int64)&base[14] >> 3) + 0x7FFF8000) )
  {
LABEL_44:
    __asan_report_load8(v7);
LABEL_45:
    __asan_report_load4(v7);
    goto LABEL_46;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 232) = base[14];
  boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::async_base(
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 240),
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *)&base[15]);
  v7 = base + 44;
  v10 = *(_BYTE *)(((unsigned __int64)&base[44] >> 3) + 0x7FFF8000);
  if ( v10 && v10 <= 3 )
    goto LABEL_45;
  *(_DWORD *)(v3 + 472) = base[44].func_;
  *(_QWORD *)(v3 + 240) = &`vtable for'boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                        + 2;
  v7 = base + 45;
  if ( *(_BYTE *)(((unsigned __int64)&base[45] >> 3) + 0x7FFF8000) )
  {
LABEL_46:
    __asan_report_load8(v7);
    goto LABEL_47;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 480) = base[45];
  base[45].func_ = 0LL;
  v7 = base + 46;
  if ( *(char *)(((unsigned __int64)&base[46] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_47:
    __asan_report_load1(v7);
LABEL_48:
    __asan_report_load4(v7);
    goto LABEL_49;
  }
  *(_BYTE *)(v3 + 488) = base[46].func_;
  LOBYTE(base[46].func_) = 0;
  v7 = base + 47;
  v11 = *(_BYTE *)(((unsigned __int64)&base[47] >> 3) + 0x7FFF8000);
  if ( v11 && v11 <= 3 )
    goto LABEL_48;
  *(_DWORD *)(v3 + 496) = base[47].func_;
  *(_QWORD *)(v3 + 128) = &`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>
                        + 2;
  v7 = base + 48;
  if ( *(_BYTE *)(((unsigned __int64)&base[48] >> 3) + 0x7FFF8000) )
  {
LABEL_49:
    __asan_report_load8(v7);
    goto LABEL_50;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 504) = base[48];
  *(_QWORD *)(v3 + 512) = 0LL;
  v7 = base + 49;
  if ( *(_BYTE *)(((unsigned __int64)&base[49] >> 3) + 0x7FFF8000) )
  {
LABEL_50:
    __asan_report_load8(v7);
    goto LABEL_51;
  }
  func = base[49].func_;
  base[49].func_ = 0LL;
  *(_QWORD *)(v3 + 512) = func;
  base[48].func_ = 0LL;
  v7 = base + 50;
  if ( *(_BYTE *)(((unsigned __int64)&base[50] >> 3) + 0x7FFF8000) )
  {
LABEL_51:
    __asan_report_load8(v7);
LABEL_52:
    __asan_report_load1(v7);
    goto LABEL_53;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 520) = base[50];
  v7 = base + 51;
  v13 = *(_BYTE *)(((unsigned __int64)&base[51] >> 3) + 0x7FFF8000);
  if ( v13 <= (((unsigned __int8)base - 104) & 7) && v13 )
    goto LABEL_52;
  v14 = (char)base[51].func_;
  LOBYTE(base[51].func_) = 0;
  *(_BYTE *)(v3 + 528) = v14;
  v7 = base + 52;
  if ( *(_WORD *)(((unsigned __int64)&base[52] >> 3) + 0x7FFF8000) )
  {
LABEL_53:
    __asan_report_load16(v7);
    goto LABEL_54;
  }
  *(__m128i *)(v3 + 536) = _mm_loadu_si128((const __m128i *)&base[52]);
  v7 = base + 54;
  if ( *(_WORD *)(((unsigned __int64)&base[54] >> 3) + 0x7FFF8000) )
  {
LABEL_54:
    __asan_report_load16(v7);
    goto LABEL_55;
  }
  *(__m128i *)(v3 + 552) = _mm_loadu_si128((const __m128i *)&base[54]);
  v7 = base + 56;
  if ( *(_BYTE *)(((unsigned __int64)&base[56] >> 3) + 0x7FFF8000) )
  {
LABEL_55:
    __asan_report_load8(v7);
    goto LABEL_56;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 568) = base[56];
  v15 = *(_QWORD *)(v3 + 80);
  if ( v15 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::asio::const_buffer>&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v15 + 8));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v6 = *(_QWORD *)(v3 + 72);
  if ( !v6 )
    goto LABEL_35;
  v16 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v16 )
  {
    v7 = (boost::asio::detail::executor_function_base *)(v16 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v16 + 8) >> 3) + 0x7FFF8000) )
    {
      v16 = *(_QWORD *)(v16 + 8);
      goto LABEL_30;
    }
LABEL_56:
    __asan_report_load8(v7);
    goto LABEL_57;
  }
LABEL_30:
  if ( v16 )
  {
    v7 = (boost::asio::detail::executor_function_base *)(v16 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v16 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v16 + 16) )
        goto LABEL_33;
LABEL_58:
      v20 = *(_BYTE *)(((v6 + 464) >> 3) + 0x7FFF8000);
      if ( v20 <= (char)((v6 - 48) & 7) && v20 )
      {
        __asan_report_load1(v6 + 464);
      }
      else
      {
        v21 = *(_BYTE *)((v6 >> 3) + 0x7FFF8000);
        if ( v21 > (char)(v6 & 7) || !v21 )
        {
          *(_BYTE *)v6 = *(_BYTE *)(v6 + 464);
          *(_QWORD *)(v16 + 16) = v6;
          goto LABEL_34;
        }
      }
      __asan_report_store1(v6);
      goto LABEL_65;
    }
LABEL_57:
    v16 = __asan_report_load8(v7);
    goto LABEL_58;
  }
LABEL_33:
  operator delete(*(void **)(v3 + 72));
LABEL_34:
  *(_QWORD *)(v3 + 72) = 0LL;
LABEL_35:
  if ( call )
  {
    v17 = *(_QWORD *)(v3 + 552);
    v18 = *(_QWORD *)(v3 + 560);
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::operator()(
      (boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::asio::const_buffer>&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v3 + 128),
      *(boost::beast::error_code *)&v17,
      *(_QWORD *)(v3 + 568));
  }
LABEL_65:
  *(_QWORD *)(v3 + 128) = &`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>
                        + 2;
  if ( *(_BYTE *)(v3 + 528) )
  {
    v22 = *(_QWORD *)(v3 + 520);
    v23 = *(_BYTE *)((v22 >> 3) + 0x7FFF8000);
    if ( v23 <= (*(_BYTE *)(v3 + 520) & 7) && v23 )
    {
      __asan_report_store1(v22);
      goto LABEL_84;
    }
    *(_BYTE *)v22 = 0;
  }
  v24 = *(boost::detail::sp_counted_base **)(v3 + 512);
  if ( v24 )
    boost::detail::sp_counted_base::release(v24);
  *(_QWORD *)(v3 + 128) = &`vtable for'boost::beast::async_base<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v3 + 480));
  *(_QWORD *)(v3 + 240) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v3 + 456));
  *(_QWORD *)(v3 + 248) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                        + 2;
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 248));
  v25 = *(_QWORD *)(v3 + 80);
  if ( v25 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::asio::const_buffer>&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v25 + 8));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v4 = *(_QWORD *)(v3 + 72);
  if ( v4 )
  {
    v26 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( !v26 )
      goto LABEL_77;
    v22 = v26 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v26 + 8) >> 3) + 0x7FFF8000) )
    {
      v26 = *(_QWORD *)(v26 + 8);
LABEL_77:
      if ( !v26 )
      {
LABEL_80:
        operator delete((void *)v4);
        goto LABEL_81;
      }
      v22 = v26 + 16;
      if ( !*(_BYTE *)(((unsigned __int64)(v26 + 16) >> 3) + 0x7FFF8000) )
      {
        if ( *(_QWORD *)(v26 + 16) )
          goto LABEL_80;
LABEL_86:
        v27 = *(_BYTE *)(((v4 + 464) >> 3) + 0x7FFF8000);
        if ( v27 <= (char)((v4 - 48) & 7) && v27 )
        {
          __asan_report_load1(v4 + 464);
        }
        else
        {
          v28 = *(_BYTE *)((v4 >> 3) + 0x7FFF8000);
          if ( v28 > (char)(v4 & 7) || !v28 )
          {
            *(_BYTE *)v4 = *(_BYTE *)(v4 + 464);
            *(_QWORD *)(v26 + 16) = v4;
            goto LABEL_81;
          }
        }
        v29 = (struct _Unwind_Exception *)__asan_report_store1(v4);
        boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::asio::const_buffer>&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v4 - 512));
        boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::asio::const_buffer> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::asio::const_buffer>&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const)(v4 - 576));
        __asan_handle_no_return(v4 - 576);
        _Unwind_Resume(v29);
      }
LABEL_85:
      v26 = __asan_report_load8(v22);
      goto LABEL_86;
    }
LABEL_84:
    __asan_report_load8(v22);
    goto LABEL_85;
  }
LABEL_81:
  if ( v30 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 72: range 0000000019CD663F-0000000019CD6D9F
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v3; // r14
  _DWORD *v4; // r15
  unsigned __int64 v5; // rbp
  boost::asio::detail::executor_function_base *v6; // rdi
  char v7; // al
  char v8; // dl
  char v9; // al
  char v10; // al
  boost::asio::detail::executor_function_base::func_type func; // rax
  char v12; // al
  char v13; // al
  __int64 v14; // rdi
  __int64 v15; // rax
  __int64 v16; // rsi OVERLAPPED
  __int64 v17; // rdx
  __int64 v18; // rax
  char v19; // dl
  char v20; // dl
  __int64 v21; // rdi
  unsigned __int64 v22; // rbx
  __int64 v23; // rax
  __int64 v24; // rdi
  char v25; // dl
  char v26; // dl
  struct _Unwind_Exception *v27; // rbp
  char v28[696]; // [rsp+10h] [rbp-2B8h] BYREF

  v3 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v18 = __asan_stack_malloc_4(640LL);
    if ( v18 )
      v3 = v18;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 464 11 function:85";
  *(_QWORD *)(v3 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete;
  v4 = (_DWORD *)(v3 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61953;
  v4[536862722] = -218959360;
  v4[536862723] = 62194;
  v4[536862738] = -202116109;
  v4[536862739] = -202116109;
  *(_QWORD *)(v3 + 48) = v3 + 32;
  *(_QWORD *)(v3 + 56) = base;
  *(_QWORD *)(v3 + 64) = base;
  v5 = (unsigned __int64)&base[1];
  *(_QWORD *)(v3 + 112) = &`vtable for'boost::beast::async_base<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  if ( *(_BYTE *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) )
  {
    v6 = base + 2;
    __asan_report_load8(&base[2]);
    goto LABEL_40;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 120) = base[2];
  v6 = base + 3;
  if ( *(_BYTE *)(((unsigned __int64)&base[3] >> 3) + 0x7FFF8000) )
  {
LABEL_40:
    __asan_report_load8(v6);
LABEL_41:
    __asan_report_load4(v6);
LABEL_42:
    __asan_report_load4(v6);
    goto LABEL_43;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 128) = base[3];
  boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>::buffers_prefix_view(
    (boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > *const)(v3 + 136),
    (const boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > *)&base[4]);
  v6 = base + 13;
  v7 = *(_BYTE *)(((unsigned __int64)&base[13] >> 3) + 0x7FFF8000);
  if ( v7 && v7 <= 3 )
    goto LABEL_41;
  *(_DWORD *)(v3 + 208) = base[13].func_;
  v6 = (boost::asio::detail::executor_function_base *)((char *)base + 108);
  v8 = *(_BYTE *)((((unsigned __int64)&base[13].func_ + 4) >> 3) + 0x7FFF8000);
  if ( (char)((((_BYTE)base + 108) & 7) + 3) >= v8 && v8 )
    goto LABEL_42;
  *(_DWORD *)(v3 + 212) = HIDWORD(base[13].func_);
  v6 = base + 14;
  if ( *(_WORD *)(((unsigned __int64)&base[14] >> 3) + 0x7FFF8000) )
  {
LABEL_43:
    __asan_report_load16(v6);
    goto LABEL_44;
  }
  *(__m128i *)(v3 + 216) = _mm_loadu_si128((const __m128i *)&base[14]);
  v6 = base + 16;
  if ( *(_BYTE *)(((unsigned __int64)&base[16] >> 3) + 0x7FFF8000) )
  {
LABEL_44:
    __asan_report_load8(v6);
LABEL_45:
    __asan_report_load4(v6);
    goto LABEL_46;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 232) = base[16];
  boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::async_base(
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 240),
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *)&base[17]);
  v6 = base + 46;
  v9 = *(_BYTE *)(((unsigned __int64)&base[46] >> 3) + 0x7FFF8000);
  if ( v9 && v9 <= 3 )
    goto LABEL_45;
  *(_DWORD *)(v3 + 472) = base[46].func_;
  *(_QWORD *)(v3 + 240) = &`vtable for'boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                        + 2;
  v6 = base + 47;
  if ( *(_BYTE *)(((unsigned __int64)&base[47] >> 3) + 0x7FFF8000) )
  {
LABEL_46:
    __asan_report_load8(v6);
    goto LABEL_47;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 480) = base[47];
  base[47].func_ = 0LL;
  v6 = base + 48;
  if ( *(char *)(((unsigned __int64)&base[48] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_47:
    __asan_report_load1(v6);
LABEL_48:
    __asan_report_load4(v6);
    goto LABEL_49;
  }
  *(_BYTE *)(v3 + 488) = base[48].func_;
  LOBYTE(base[48].func_) = 0;
  v6 = base + 49;
  v10 = *(_BYTE *)(((unsigned __int64)&base[49] >> 3) + 0x7FFF8000);
  if ( v10 && v10 <= 3 )
    goto LABEL_48;
  *(_DWORD *)(v3 + 496) = base[49].func_;
  *(_QWORD *)(v3 + 112) = &`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>
                        + 2;
  v6 = base + 50;
  if ( *(_BYTE *)(((unsigned __int64)&base[50] >> 3) + 0x7FFF8000) )
  {
LABEL_49:
    __asan_report_load8(v6);
    goto LABEL_50;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 504) = base[50];
  *(_QWORD *)(v3 + 512) = 0LL;
  v6 = base + 51;
  if ( *(_BYTE *)(((unsigned __int64)&base[51] >> 3) + 0x7FFF8000) )
  {
LABEL_50:
    __asan_report_load8(v6);
    goto LABEL_51;
  }
  func = base[51].func_;
  base[51].func_ = 0LL;
  *(_QWORD *)(v3 + 512) = func;
  base[50].func_ = 0LL;
  v6 = base + 52;
  if ( *(_BYTE *)(((unsigned __int64)&base[52] >> 3) + 0x7FFF8000) )
  {
LABEL_51:
    __asan_report_load8(v6);
LABEL_52:
    __asan_report_load1(v6);
    goto LABEL_53;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 520) = base[52];
  v6 = base + 53;
  v12 = *(_BYTE *)(((unsigned __int64)&base[53] >> 3) + 0x7FFF8000);
  if ( v12 <= (((unsigned __int8)base - 88) & 7) && v12 )
    goto LABEL_52;
  v13 = (char)base[53].func_;
  LOBYTE(base[53].func_) = 0;
  *(_BYTE *)(v3 + 528) = v13;
  v6 = base + 54;
  if ( *(_WORD *)(((unsigned __int64)&base[54] >> 3) + 0x7FFF8000) )
  {
LABEL_53:
    __asan_report_load16(v6);
    goto LABEL_54;
  }
  *(__m128i *)(v3 + 536) = _mm_loadu_si128((const __m128i *)&base[54]);
  v6 = base + 56;
  if ( *(_WORD *)(((unsigned __int64)&base[56] >> 3) + 0x7FFF8000) )
  {
LABEL_54:
    __asan_report_load16(v6);
    goto LABEL_55;
  }
  *(__m128i *)(v3 + 552) = _mm_loadu_si128((const __m128i *)&base[56]);
  v6 = base + 58;
  if ( *(_BYTE *)(((unsigned __int64)&base[58] >> 3) + 0x7FFF8000) )
  {
LABEL_55:
    __asan_report_load8(v6);
    goto LABEL_56;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 568) = base[58];
  v14 = *(_QWORD *)(v3 + 64);
  if ( v14 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v14 + 8));
    *(_QWORD *)(v3 + 64) = 0LL;
  }
  v5 = *(_QWORD *)(v3 + 56);
  if ( !v5 )
    goto LABEL_35;
  v15 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v15 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v15 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v15 + 8) >> 3) + 0x7FFF8000) )
    {
      v15 = *(_QWORD *)(v15 + 8);
      goto LABEL_30;
    }
LABEL_56:
    __asan_report_load8(v6);
    goto LABEL_57;
  }
LABEL_30:
  if ( v15 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v15 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v15 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v15 + 16) )
        goto LABEL_33;
LABEL_58:
      v19 = *(_BYTE *)(((v5 + 480) >> 3) + 0x7FFF8000);
      if ( v19 <= (char)((v5 - 32) & 7) && v19 )
      {
        __asan_report_load1(v5 + 480);
      }
      else
      {
        v20 = *(_BYTE *)((v5 >> 3) + 0x7FFF8000);
        if ( v20 > (char)(v5 & 7) || !v20 )
        {
          *(_BYTE *)v5 = *(_BYTE *)(v5 + 480);
          *(_QWORD *)(v15 + 16) = v5;
          goto LABEL_34;
        }
      }
      __asan_report_store1(v5);
      goto LABEL_65;
    }
LABEL_57:
    v15 = __asan_report_load8(v6);
    goto LABEL_58;
  }
LABEL_33:
  operator delete(*(void **)(v3 + 56));
LABEL_34:
  *(_QWORD *)(v3 + 56) = 0LL;
LABEL_35:
  if ( call )
  {
    v16 = *(_QWORD *)(v3 + 552);
    v17 = *(_QWORD *)(v3 + 560);
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::operator()(
      (boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v3 + 112),
      *(boost::beast::error_code *)&v16,
      *(_QWORD *)(v3 + 568));
  }
LABEL_65:
  boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v3 + 112));
  v21 = *(_QWORD *)(v3 + 64);
  if ( v21 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v21 + 8));
    *(_QWORD *)(v3 + 64) = 0LL;
  }
  v22 = *(_QWORD *)(v3 + 56);
  if ( v22 )
  {
    v23 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v23 )
    {
      v24 = v23 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v23 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v24);
        goto LABEL_78;
      }
      v23 = *(_QWORD *)(v23 + 8);
    }
    if ( !v23 )
    {
LABEL_74:
      operator delete((void *)v22);
      goto LABEL_75;
    }
    v24 = v23 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v23 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v23 + 16) )
        goto LABEL_74;
LABEL_79:
      v25 = *(_BYTE *)(((v22 + 480) >> 3) + 0x7FFF8000);
      if ( v25 <= (char)((v22 - 32) & 7) && v25 )
      {
        __asan_report_load1(v22 + 480);
      }
      else
      {
        v26 = *(_BYTE *)((v22 >> 3) + 0x7FFF8000);
        if ( v26 > (char)(v22 & 7) || !v26 )
        {
          *(_BYTE *)v22 = *(_BYTE *)(v22 + 480);
          *(_QWORD *)(v23 + 16) = v22;
          goto LABEL_75;
        }
      }
      v27 = (struct _Unwind_Exception *)__asan_report_store1(v22);
      boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v22 - 528));
      boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const)(v22 - 592));
      __asan_handle_no_return(v22 - 592);
      _Unwind_Resume(v27);
    }
LABEL_78:
    v23 = __asan_report_load8(v24);
    goto LABEL_79;
  }
LABEL_75:
  if ( v28 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 72: range 0000000019C98BCF-0000000019C99343
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v3; // r15
  _DWORD *v4; // r14
  unsigned __int64 v5; // rbp
  boost::asio::detail::executor_function_base *v6; // rdi
  char v7; // al
  char v8; // dl
  char v9; // al
  char v10; // al
  boost::asio::detail::executor_function_base::func_type func; // rax
  char v12; // al
  char v13; // al
  __int64 v14; // rdi
  __int64 v15; // rax
  __int64 v16; // rsi OVERLAPPED
  __int64 v17; // rdx
  __int64 v18; // rax
  char v19; // dl
  char v20; // dl
  __int64 v21; // rdi
  unsigned __int64 v22; // rbx
  __int64 v23; // rax
  __int64 v24; // rdi
  char v25; // dl
  char v26; // dl
  struct _Unwind_Exception *v27; // rbp
  char v28[728]; // [rsp+10h] [rbp-2D8h] BYREF

  v3 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v18 = __asan_stack_malloc_4(672LL);
    if ( v18 )
      v3 = v18;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 1 12 allocator:76 64 24 4 p:77 128 480 11 function:85";
  *(_QWORD *)(v3 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete;
  v4 = (_DWORD *)(v3 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234881024;
  v4[536862723] = -218959118;
  v4[536862739] = -202116109;
  v4[536862740] = -202116109;
  *(_QWORD *)(v3 + 64) = v3 + 48;
  *(_QWORD *)(v3 + 72) = base;
  *(_QWORD *)(v3 + 80) = base;
  v5 = (unsigned __int64)&base[1];
  *(_QWORD *)(v3 + 128) = &`vtable for'boost::beast::async_base<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  if ( *(_BYTE *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) )
  {
    v6 = base + 2;
    __asan_report_load8(&base[2]);
    goto LABEL_40;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 136) = base[2];
  v6 = base + 3;
  if ( *(_BYTE *)(((unsigned __int64)&base[3] >> 3) + 0x7FFF8000) )
  {
LABEL_40:
    __asan_report_load8(v6);
LABEL_41:
    __asan_report_load4(v6);
LABEL_42:
    __asan_report_load4(v6);
    goto LABEL_43;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 144) = base[3];
  boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>>::buffers_prefix_view(
    (boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::asio::const_buffer> >&> > > *const)(v3 + 152),
    (const boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::asio::const_buffer> >&> > > *)&base[4]);
  v6 = base + 15;
  v7 = *(_BYTE *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000);
  if ( v7 && v7 <= 3 )
    goto LABEL_41;
  *(_DWORD *)(v3 + 240) = base[15].func_;
  v6 = (boost::asio::detail::executor_function_base *)((char *)base + 124);
  v8 = *(_BYTE *)((((unsigned __int64)&base[15].func_ + 4) >> 3) + 0x7FFF8000);
  if ( (char)((((_BYTE)base + 124) & 7) + 3) >= v8 && v8 )
    goto LABEL_42;
  *(_DWORD *)(v3 + 244) = HIDWORD(base[15].func_);
  v6 = base + 16;
  if ( *(_WORD *)(((unsigned __int64)&base[16] >> 3) + 0x7FFF8000) )
  {
LABEL_43:
    __asan_report_load16(v6);
    goto LABEL_44;
  }
  *(__m128i *)(v3 + 248) = _mm_loadu_si128((const __m128i *)&base[16]);
  v6 = base + 18;
  if ( *(_BYTE *)(((unsigned __int64)&base[18] >> 3) + 0x7FFF8000) )
  {
LABEL_44:
    __asan_report_load8(v6);
LABEL_45:
    __asan_report_load4(v6);
    goto LABEL_46;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 264) = base[18];
  boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::async_base(
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 272),
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *)&base[19]);
  v6 = base + 48;
  v9 = *(_BYTE *)(((unsigned __int64)&base[48] >> 3) + 0x7FFF8000);
  if ( v9 && v9 <= 3 )
    goto LABEL_45;
  *(_DWORD *)(v3 + 504) = base[48].func_;
  *(_QWORD *)(v3 + 272) = &`vtable for'boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                        + 2;
  v6 = base + 49;
  if ( *(_BYTE *)(((unsigned __int64)&base[49] >> 3) + 0x7FFF8000) )
  {
LABEL_46:
    __asan_report_load8(v6);
    goto LABEL_47;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 512) = base[49];
  base[49].func_ = 0LL;
  v6 = base + 50;
  if ( *(char *)(((unsigned __int64)&base[50] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_47:
    __asan_report_load1(v6);
LABEL_48:
    __asan_report_load4(v6);
    goto LABEL_49;
  }
  *(_BYTE *)(v3 + 520) = base[50].func_;
  LOBYTE(base[50].func_) = 0;
  v6 = base + 51;
  v10 = *(_BYTE *)(((unsigned __int64)&base[51] >> 3) + 0x7FFF8000);
  if ( v10 && v10 <= 3 )
    goto LABEL_48;
  *(_DWORD *)(v3 + 528) = base[51].func_;
  *(_QWORD *)(v3 + 128) = &`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>
                        + 2;
  v6 = base + 52;
  if ( *(_BYTE *)(((unsigned __int64)&base[52] >> 3) + 0x7FFF8000) )
  {
LABEL_49:
    __asan_report_load8(v6);
    goto LABEL_50;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 536) = base[52];
  *(_QWORD *)(v3 + 544) = 0LL;
  v6 = base + 53;
  if ( *(_BYTE *)(((unsigned __int64)&base[53] >> 3) + 0x7FFF8000) )
  {
LABEL_50:
    __asan_report_load8(v6);
    goto LABEL_51;
  }
  func = base[53].func_;
  base[53].func_ = 0LL;
  *(_QWORD *)(v3 + 544) = func;
  base[52].func_ = 0LL;
  v6 = base + 54;
  if ( *(_BYTE *)(((unsigned __int64)&base[54] >> 3) + 0x7FFF8000) )
  {
LABEL_51:
    __asan_report_load8(v6);
LABEL_52:
    __asan_report_load1(v6);
    goto LABEL_53;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 552) = base[54];
  v6 = base + 55;
  v12 = *(_BYTE *)(((unsigned __int64)&base[55] >> 3) + 0x7FFF8000);
  if ( v12 <= (((unsigned __int8)base - 72) & 7) && v12 )
    goto LABEL_52;
  v13 = (char)base[55].func_;
  LOBYTE(base[55].func_) = 0;
  *(_BYTE *)(v3 + 560) = v13;
  v6 = base + 56;
  if ( *(_WORD *)(((unsigned __int64)&base[56] >> 3) + 0x7FFF8000) )
  {
LABEL_53:
    __asan_report_load16(v6);
    goto LABEL_54;
  }
  *(__m128i *)(v3 + 568) = _mm_loadu_si128((const __m128i *)&base[56]);
  v6 = base + 58;
  if ( *(_WORD *)(((unsigned __int64)&base[58] >> 3) + 0x7FFF8000) )
  {
LABEL_54:
    __asan_report_load16(v6);
    goto LABEL_55;
  }
  *(__m128i *)(v3 + 584) = _mm_loadu_si128((const __m128i *)&base[58]);
  v6 = base + 60;
  if ( *(_BYTE *)(((unsigned __int64)&base[60] >> 3) + 0x7FFF8000) )
  {
LABEL_55:
    __asan_report_load8(v6);
    goto LABEL_56;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 600) = base[60];
  v14 = *(_QWORD *)(v3 + 80);
  if ( v14 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::asio::const_buffer> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v14 + 8));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v5 = *(_QWORD *)(v3 + 72);
  if ( !v5 )
    goto LABEL_35;
  v15 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v15 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v15 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v15 + 8) >> 3) + 0x7FFF8000) )
    {
      v15 = *(_QWORD *)(v15 + 8);
      goto LABEL_30;
    }
LABEL_56:
    __asan_report_load8(v6);
    goto LABEL_57;
  }
LABEL_30:
  if ( v15 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v15 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v15 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v15 + 16) )
        goto LABEL_33;
LABEL_58:
      v19 = *(_BYTE *)(((v5 + 496) >> 3) + 0x7FFF8000);
      if ( v19 <= (char)((v5 - 16) & 7) && v19 )
      {
        __asan_report_load1(v5 + 496);
      }
      else
      {
        v20 = *(_BYTE *)((v5 >> 3) + 0x7FFF8000);
        if ( v20 > (char)(v5 & 7) || !v20 )
        {
          *(_BYTE *)v5 = *(_BYTE *)(v5 + 496);
          *(_QWORD *)(v15 + 16) = v5;
          goto LABEL_34;
        }
      }
      __asan_report_store1(v5);
      goto LABEL_65;
    }
LABEL_57:
    v15 = __asan_report_load8(v6);
    goto LABEL_58;
  }
LABEL_33:
  operator delete(*(void **)(v3 + 72));
LABEL_34:
  *(_QWORD *)(v3 + 72) = 0LL;
LABEL_35:
  if ( call )
  {
    v16 = *(_QWORD *)(v3 + 584);
    v17 = *(_QWORD *)(v3 + 592);
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::operator()(
      (boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::asio::const_buffer> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v3 + 128),
      *(boost::beast::error_code *)&v16,
      *(_QWORD *)(v3 + 600));
  }
LABEL_65:
  boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::asio::const_buffer> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v3 + 128));
  v21 = *(_QWORD *)(v3 + 80);
  if ( v21 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::asio::const_buffer> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v21 + 8));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v22 = *(_QWORD *)(v3 + 72);
  if ( v22 )
  {
    v23 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v23 )
    {
      v24 = v23 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v23 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v24);
        goto LABEL_78;
      }
      v23 = *(_QWORD *)(v23 + 8);
    }
    if ( !v23 )
    {
LABEL_74:
      operator delete((void *)v22);
      goto LABEL_75;
    }
    v24 = v23 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v23 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v23 + 16) )
        goto LABEL_74;
LABEL_79:
      v25 = *(_BYTE *)(((v22 + 496) >> 3) + 0x7FFF8000);
      if ( v25 <= (char)((v22 - 16) & 7) && v25 )
      {
        __asan_report_load1(v22 + 496);
      }
      else
      {
        v26 = *(_BYTE *)((v22 >> 3) + 0x7FFF8000);
        if ( v26 > (char)(v22 & 7) || !v26 )
        {
          *(_BYTE *)v22 = *(_BYTE *)(v22 + 496);
          *(_QWORD *)(v23 + 16) = v22;
          goto LABEL_75;
        }
      }
      v27 = (struct _Unwind_Exception *)__asan_report_store1(v22);
      boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::asio::const_buffer> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v22 - 544));
      boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::asio::const_buffer>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::asio::const_buffer> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const)(v22 - 608));
      __asan_handle_no_return(v22 - 608);
      _Unwind_Resume(v27);
    }
LABEL_78:
    v23 = __asan_report_load8(v24);
    goto LABEL_79;
  }
LABEL_75:
  if ( v28 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF804C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8050) = -168430091;
  }
};

// Line 72: range 0000000019CCF521-0000000019CCFC95
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v3; // r15
  _DWORD *v4; // r14
  unsigned __int64 v5; // rbp
  boost::asio::detail::executor_function_base *v6; // rdi
  char v7; // al
  char v8; // dl
  char v9; // al
  char v10; // al
  boost::asio::detail::executor_function_base::func_type func; // rax
  char v12; // al
  char v13; // al
  __int64 v14; // rdi
  __int64 v15; // rax
  __int64 v16; // rsi OVERLAPPED
  __int64 v17; // rdx
  __int64 v18; // rax
  char v19; // dl
  char v20; // dl
  __int64 v21; // rdi
  unsigned __int64 v22; // rbx
  __int64 v23; // rax
  __int64 v24; // rdi
  char v25; // dl
  char v26; // dl
  struct _Unwind_Exception *v27; // rbp
  char v28[728]; // [rsp+10h] [rbp-2D8h] BYREF

  v3 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v18 = __asan_stack_malloc_4(672LL);
    if ( v18 )
      v3 = v18;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 1 12 allocator:76 64 24 4 p:77 128 480 11 function:85";
  *(_QWORD *)(v3 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete;
  v4 = (_DWORD *)(v3 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234881024;
  v4[536862723] = -218959118;
  v4[536862739] = -202116109;
  v4[536862740] = -202116109;
  *(_QWORD *)(v3 + 64) = v3 + 48;
  *(_QWORD *)(v3 + 72) = base;
  *(_QWORD *)(v3 + 80) = base;
  v5 = (unsigned __int64)&base[1];
  *(_QWORD *)(v3 + 128) = &`vtable for'boost::beast::async_base<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  if ( *(_BYTE *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) )
  {
    v6 = base + 2;
    __asan_report_load8(&base[2]);
    goto LABEL_40;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 136) = base[2];
  v6 = base + 3;
  if ( *(_BYTE *)(((unsigned __int64)&base[3] >> 3) + 0x7FFF8000) )
  {
LABEL_40:
    __asan_report_load8(v6);
LABEL_41:
    __asan_report_load4(v6);
LABEL_42:
    __asan_report_load4(v6);
    goto LABEL_43;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 144) = base[3];
  boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>::buffers_prefix_view(
    (boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > *const)(v3 + 152),
    (const boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > *)&base[4]);
  v6 = base + 15;
  v7 = *(_BYTE *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000);
  if ( v7 && v7 <= 3 )
    goto LABEL_41;
  *(_DWORD *)(v3 + 240) = base[15].func_;
  v6 = (boost::asio::detail::executor_function_base *)((char *)base + 124);
  v8 = *(_BYTE *)((((unsigned __int64)&base[15].func_ + 4) >> 3) + 0x7FFF8000);
  if ( (char)((((_BYTE)base + 124) & 7) + 3) >= v8 && v8 )
    goto LABEL_42;
  *(_DWORD *)(v3 + 244) = HIDWORD(base[15].func_);
  v6 = base + 16;
  if ( *(_WORD *)(((unsigned __int64)&base[16] >> 3) + 0x7FFF8000) )
  {
LABEL_43:
    __asan_report_load16(v6);
    goto LABEL_44;
  }
  *(__m128i *)(v3 + 248) = _mm_loadu_si128((const __m128i *)&base[16]);
  v6 = base + 18;
  if ( *(_BYTE *)(((unsigned __int64)&base[18] >> 3) + 0x7FFF8000) )
  {
LABEL_44:
    __asan_report_load8(v6);
LABEL_45:
    __asan_report_load4(v6);
    goto LABEL_46;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 264) = base[18];
  boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::async_base(
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 272),
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *)&base[19]);
  v6 = base + 48;
  v9 = *(_BYTE *)(((unsigned __int64)&base[48] >> 3) + 0x7FFF8000);
  if ( v9 && v9 <= 3 )
    goto LABEL_45;
  *(_DWORD *)(v3 + 504) = base[48].func_;
  *(_QWORD *)(v3 + 272) = &`vtable for'boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                        + 2;
  v6 = base + 49;
  if ( *(_BYTE *)(((unsigned __int64)&base[49] >> 3) + 0x7FFF8000) )
  {
LABEL_46:
    __asan_report_load8(v6);
    goto LABEL_47;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 512) = base[49];
  base[49].func_ = 0LL;
  v6 = base + 50;
  if ( *(char *)(((unsigned __int64)&base[50] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_47:
    __asan_report_load1(v6);
LABEL_48:
    __asan_report_load4(v6);
    goto LABEL_49;
  }
  *(_BYTE *)(v3 + 520) = base[50].func_;
  LOBYTE(base[50].func_) = 0;
  v6 = base + 51;
  v10 = *(_BYTE *)(((unsigned __int64)&base[51] >> 3) + 0x7FFF8000);
  if ( v10 && v10 <= 3 )
    goto LABEL_48;
  *(_DWORD *)(v3 + 528) = base[51].func_;
  *(_QWORD *)(v3 + 128) = &`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>
                        + 2;
  v6 = base + 52;
  if ( *(_BYTE *)(((unsigned __int64)&base[52] >> 3) + 0x7FFF8000) )
  {
LABEL_49:
    __asan_report_load8(v6);
    goto LABEL_50;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 536) = base[52];
  *(_QWORD *)(v3 + 544) = 0LL;
  v6 = base + 53;
  if ( *(_BYTE *)(((unsigned __int64)&base[53] >> 3) + 0x7FFF8000) )
  {
LABEL_50:
    __asan_report_load8(v6);
    goto LABEL_51;
  }
  func = base[53].func_;
  base[53].func_ = 0LL;
  *(_QWORD *)(v3 + 544) = func;
  base[52].func_ = 0LL;
  v6 = base + 54;
  if ( *(_BYTE *)(((unsigned __int64)&base[54] >> 3) + 0x7FFF8000) )
  {
LABEL_51:
    __asan_report_load8(v6);
LABEL_52:
    __asan_report_load1(v6);
    goto LABEL_53;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 552) = base[54];
  v6 = base + 55;
  v12 = *(_BYTE *)(((unsigned __int64)&base[55] >> 3) + 0x7FFF8000);
  if ( v12 <= (((unsigned __int8)base - 72) & 7) && v12 )
    goto LABEL_52;
  v13 = (char)base[55].func_;
  LOBYTE(base[55].func_) = 0;
  *(_BYTE *)(v3 + 560) = v13;
  v6 = base + 56;
  if ( *(_WORD *)(((unsigned __int64)&base[56] >> 3) + 0x7FFF8000) )
  {
LABEL_53:
    __asan_report_load16(v6);
    goto LABEL_54;
  }
  *(__m128i *)(v3 + 568) = _mm_loadu_si128((const __m128i *)&base[56]);
  v6 = base + 58;
  if ( *(_WORD *)(((unsigned __int64)&base[58] >> 3) + 0x7FFF8000) )
  {
LABEL_54:
    __asan_report_load16(v6);
    goto LABEL_55;
  }
  *(__m128i *)(v3 + 584) = _mm_loadu_si128((const __m128i *)&base[58]);
  v6 = base + 60;
  if ( *(_BYTE *)(((unsigned __int64)&base[60] >> 3) + 0x7FFF8000) )
  {
LABEL_55:
    __asan_report_load8(v6);
    goto LABEL_56;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 600) = base[60];
  v14 = *(_QWORD *)(v3 + 80);
  if ( v14 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v14 + 8));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v5 = *(_QWORD *)(v3 + 72);
  if ( !v5 )
    goto LABEL_35;
  v15 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v15 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v15 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v15 + 8) >> 3) + 0x7FFF8000) )
    {
      v15 = *(_QWORD *)(v15 + 8);
      goto LABEL_30;
    }
LABEL_56:
    __asan_report_load8(v6);
    goto LABEL_57;
  }
LABEL_30:
  if ( v15 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v15 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v15 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v15 + 16) )
        goto LABEL_33;
LABEL_58:
      v19 = *(_BYTE *)(((v5 + 496) >> 3) + 0x7FFF8000);
      if ( v19 <= (char)((v5 - 16) & 7) && v19 )
      {
        __asan_report_load1(v5 + 496);
      }
      else
      {
        v20 = *(_BYTE *)((v5 >> 3) + 0x7FFF8000);
        if ( v20 > (char)(v5 & 7) || !v20 )
        {
          *(_BYTE *)v5 = *(_BYTE *)(v5 + 496);
          *(_QWORD *)(v15 + 16) = v5;
          goto LABEL_34;
        }
      }
      __asan_report_store1(v5);
      goto LABEL_65;
    }
LABEL_57:
    v15 = __asan_report_load8(v6);
    goto LABEL_58;
  }
LABEL_33:
  operator delete(*(void **)(v3 + 72));
LABEL_34:
  *(_QWORD *)(v3 + 72) = 0LL;
LABEL_35:
  if ( call )
  {
    v16 = *(_QWORD *)(v3 + 584);
    v17 = *(_QWORD *)(v3 + 592);
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::operator()(
      (boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v3 + 128),
      *(boost::beast::error_code *)&v16,
      *(_QWORD *)(v3 + 600));
  }
LABEL_65:
  boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v3 + 128));
  v21 = *(_QWORD *)(v3 + 80);
  if ( v21 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v21 + 8));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v22 = *(_QWORD *)(v3 + 72);
  if ( v22 )
  {
    v23 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v23 )
    {
      v24 = v23 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v23 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v24);
        goto LABEL_78;
      }
      v23 = *(_QWORD *)(v23 + 8);
    }
    if ( !v23 )
    {
LABEL_74:
      operator delete((void *)v22);
      goto LABEL_75;
    }
    v24 = v23 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v23 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v23 + 16) )
        goto LABEL_74;
LABEL_79:
      v25 = *(_BYTE *)(((v22 + 496) >> 3) + 0x7FFF8000);
      if ( v25 <= (char)((v22 - 16) & 7) && v25 )
      {
        __asan_report_load1(v22 + 496);
      }
      else
      {
        v26 = *(_BYTE *)((v22 >> 3) + 0x7FFF8000);
        if ( v26 > (char)(v22 & 7) || !v26 )
        {
          *(_BYTE *)v22 = *(_BYTE *)(v22 + 496);
          *(_QWORD *)(v23 + 16) = v22;
          goto LABEL_75;
        }
      }
      v27 = (struct _Unwind_Exception *)__asan_report_store1(v22);
      boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v22 - 544));
      boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const)(v22 - 608));
      __asan_handle_no_return(v22 - 608);
      _Unwind_Resume(v27);
    }
LABEL_78:
    v23 = __asan_report_load8(v24);
    goto LABEL_79;
  }
LABEL_75:
  if ( v28 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF804C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8050) = -168430091;
  }
};

// Line 72: range 0000000019CAB3DF-0000000019CABB53
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v3; // r15
  _DWORD *v4; // r14
  unsigned __int64 v5; // rbp
  boost::asio::detail::executor_function_base *v6; // rdi
  char v7; // al
  char v8; // dl
  char v9; // al
  char v10; // al
  boost::asio::detail::executor_function_base::func_type func; // rax
  char v12; // al
  char v13; // al
  __int64 v14; // rdi
  __int64 v15; // rax
  __int64 v16; // rsi OVERLAPPED
  __int64 v17; // rdx
  __int64 v18; // rax
  char v19; // dl
  char v20; // dl
  __int64 v21; // rdi
  unsigned __int64 v22; // rbx
  __int64 v23; // rax
  __int64 v24; // rdi
  char v25; // dl
  char v26; // dl
  struct _Unwind_Exception *v27; // rbp
  char v28[728]; // [rsp+10h] [rbp-2D8h] BYREF

  v3 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v18 = __asan_stack_malloc_4(672LL);
    if ( v18 )
      v3 = v18;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 1 12 allocator:76 64 24 4 p:77 128 480 11 function:85";
  *(_QWORD *)(v3 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete;
  v4 = (_DWORD *)(v3 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234881024;
  v4[536862723] = -218959118;
  v4[536862739] = -202116109;
  v4[536862740] = -202116109;
  *(_QWORD *)(v3 + 64) = v3 + 48;
  *(_QWORD *)(v3 + 72) = base;
  *(_QWORD *)(v3 + 80) = base;
  v5 = (unsigned __int64)&base[1];
  *(_QWORD *)(v3 + 128) = &`vtable for'boost::beast::async_base<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  if ( *(_BYTE *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) )
  {
    v6 = base + 2;
    __asan_report_load8(&base[2]);
    goto LABEL_40;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 136) = base[2];
  v6 = base + 3;
  if ( *(_BYTE *)(((unsigned __int64)&base[3] >> 3) + 0x7FFF8000) )
  {
LABEL_40:
    __asan_report_load8(v6);
LABEL_41:
    __asan_report_load4(v6);
LABEL_42:
    __asan_report_load4(v6);
    goto LABEL_43;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 144) = base[3];
  boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>::buffers_prefix_view(
    (boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > *const)(v3 + 152),
    (const boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > *)&base[4]);
  v6 = base + 15;
  v7 = *(_BYTE *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000);
  if ( v7 && v7 <= 3 )
    goto LABEL_41;
  *(_DWORD *)(v3 + 240) = base[15].func_;
  v6 = (boost::asio::detail::executor_function_base *)((char *)base + 124);
  v8 = *(_BYTE *)((((unsigned __int64)&base[15].func_ + 4) >> 3) + 0x7FFF8000);
  if ( (char)((((_BYTE)base + 124) & 7) + 3) >= v8 && v8 )
    goto LABEL_42;
  *(_DWORD *)(v3 + 244) = HIDWORD(base[15].func_);
  v6 = base + 16;
  if ( *(_WORD *)(((unsigned __int64)&base[16] >> 3) + 0x7FFF8000) )
  {
LABEL_43:
    __asan_report_load16(v6);
    goto LABEL_44;
  }
  *(__m128i *)(v3 + 248) = _mm_loadu_si128((const __m128i *)&base[16]);
  v6 = base + 18;
  if ( *(_BYTE *)(((unsigned __int64)&base[18] >> 3) + 0x7FFF8000) )
  {
LABEL_44:
    __asan_report_load8(v6);
LABEL_45:
    __asan_report_load4(v6);
    goto LABEL_46;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 264) = base[18];
  boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::async_base(
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 272),
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *)&base[19]);
  v6 = base + 48;
  v9 = *(_BYTE *)(((unsigned __int64)&base[48] >> 3) + 0x7FFF8000);
  if ( v9 && v9 <= 3 )
    goto LABEL_45;
  *(_DWORD *)(v3 + 504) = base[48].func_;
  *(_QWORD *)(v3 + 272) = &`vtable for'boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                        + 2;
  v6 = base + 49;
  if ( *(_BYTE *)(((unsigned __int64)&base[49] >> 3) + 0x7FFF8000) )
  {
LABEL_46:
    __asan_report_load8(v6);
    goto LABEL_47;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 512) = base[49];
  base[49].func_ = 0LL;
  v6 = base + 50;
  if ( *(char *)(((unsigned __int64)&base[50] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_47:
    __asan_report_load1(v6);
LABEL_48:
    __asan_report_load4(v6);
    goto LABEL_49;
  }
  *(_BYTE *)(v3 + 520) = base[50].func_;
  LOBYTE(base[50].func_) = 0;
  v6 = base + 51;
  v10 = *(_BYTE *)(((unsigned __int64)&base[51] >> 3) + 0x7FFF8000);
  if ( v10 && v10 <= 3 )
    goto LABEL_48;
  *(_DWORD *)(v3 + 528) = base[51].func_;
  *(_QWORD *)(v3 + 128) = &`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>
                        + 2;
  v6 = base + 52;
  if ( *(_BYTE *)(((unsigned __int64)&base[52] >> 3) + 0x7FFF8000) )
  {
LABEL_49:
    __asan_report_load8(v6);
    goto LABEL_50;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 536) = base[52];
  *(_QWORD *)(v3 + 544) = 0LL;
  v6 = base + 53;
  if ( *(_BYTE *)(((unsigned __int64)&base[53] >> 3) + 0x7FFF8000) )
  {
LABEL_50:
    __asan_report_load8(v6);
    goto LABEL_51;
  }
  func = base[53].func_;
  base[53].func_ = 0LL;
  *(_QWORD *)(v3 + 544) = func;
  base[52].func_ = 0LL;
  v6 = base + 54;
  if ( *(_BYTE *)(((unsigned __int64)&base[54] >> 3) + 0x7FFF8000) )
  {
LABEL_51:
    __asan_report_load8(v6);
LABEL_52:
    __asan_report_load1(v6);
    goto LABEL_53;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 552) = base[54];
  v6 = base + 55;
  v12 = *(_BYTE *)(((unsigned __int64)&base[55] >> 3) + 0x7FFF8000);
  if ( v12 <= (((unsigned __int8)base - 72) & 7) && v12 )
    goto LABEL_52;
  v13 = (char)base[55].func_;
  LOBYTE(base[55].func_) = 0;
  *(_BYTE *)(v3 + 560) = v13;
  v6 = base + 56;
  if ( *(_WORD *)(((unsigned __int64)&base[56] >> 3) + 0x7FFF8000) )
  {
LABEL_53:
    __asan_report_load16(v6);
    goto LABEL_54;
  }
  *(__m128i *)(v3 + 568) = _mm_loadu_si128((const __m128i *)&base[56]);
  v6 = base + 58;
  if ( *(_WORD *)(((unsigned __int64)&base[58] >> 3) + 0x7FFF8000) )
  {
LABEL_54:
    __asan_report_load16(v6);
    goto LABEL_55;
  }
  *(__m128i *)(v3 + 584) = _mm_loadu_si128((const __m128i *)&base[58]);
  v6 = base + 60;
  if ( *(_BYTE *)(((unsigned __int64)&base[60] >> 3) + 0x7FFF8000) )
  {
LABEL_55:
    __asan_report_load8(v6);
    goto LABEL_56;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 600) = base[60];
  v14 = *(_QWORD *)(v3 + 80);
  if ( v14 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v14 + 8));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v5 = *(_QWORD *)(v3 + 72);
  if ( !v5 )
    goto LABEL_35;
  v15 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v15 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v15 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v15 + 8) >> 3) + 0x7FFF8000) )
    {
      v15 = *(_QWORD *)(v15 + 8);
      goto LABEL_30;
    }
LABEL_56:
    __asan_report_load8(v6);
    goto LABEL_57;
  }
LABEL_30:
  if ( v15 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v15 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v15 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v15 + 16) )
        goto LABEL_33;
LABEL_58:
      v19 = *(_BYTE *)(((v5 + 496) >> 3) + 0x7FFF8000);
      if ( v19 <= (char)((v5 - 16) & 7) && v19 )
      {
        __asan_report_load1(v5 + 496);
      }
      else
      {
        v20 = *(_BYTE *)((v5 >> 3) + 0x7FFF8000);
        if ( v20 > (char)(v5 & 7) || !v20 )
        {
          *(_BYTE *)v5 = *(_BYTE *)(v5 + 496);
          *(_QWORD *)(v15 + 16) = v5;
          goto LABEL_34;
        }
      }
      __asan_report_store1(v5);
      goto LABEL_65;
    }
LABEL_57:
    v15 = __asan_report_load8(v6);
    goto LABEL_58;
  }
LABEL_33:
  operator delete(*(void **)(v3 + 72));
LABEL_34:
  *(_QWORD *)(v3 + 72) = 0LL;
LABEL_35:
  if ( call )
  {
    v16 = *(_QWORD *)(v3 + 584);
    v17 = *(_QWORD *)(v3 + 592);
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::operator()(
      (boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v3 + 128),
      *(boost::beast::error_code *)&v16,
      *(_QWORD *)(v3 + 600));
  }
LABEL_65:
  boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v3 + 128));
  v21 = *(_QWORD *)(v3 + 80);
  if ( v21 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v21 + 8));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v22 = *(_QWORD *)(v3 + 72);
  if ( v22 )
  {
    v23 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v23 )
    {
      v24 = v23 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v23 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v24);
        goto LABEL_78;
      }
      v23 = *(_QWORD *)(v23 + 8);
    }
    if ( !v23 )
    {
LABEL_74:
      operator delete((void *)v22);
      goto LABEL_75;
    }
    v24 = v23 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v23 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v23 + 16) )
        goto LABEL_74;
LABEL_79:
      v25 = *(_BYTE *)(((v22 + 496) >> 3) + 0x7FFF8000);
      if ( v25 <= (char)((v22 - 16) & 7) && v25 )
      {
        __asan_report_load1(v22 + 496);
      }
      else
      {
        v26 = *(_BYTE *)((v22 >> 3) + 0x7FFF8000);
        if ( v26 > (char)(v22 & 7) || !v26 )
        {
          *(_BYTE *)v22 = *(_BYTE *)(v22 + 496);
          *(_QWORD *)(v23 + 16) = v22;
          goto LABEL_75;
        }
      }
      v27 = (struct _Unwind_Exception *)__asan_report_store1(v22);
      boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v22 - 544));
      boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> >,boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const)(v22 - 608));
      __asan_handle_no_return(v22 - 608);
      _Unwind_Resume(v27);
    }
LABEL_78:
    v23 = __asan_report_load8(v24);
    goto LABEL_79;
  }
LABEL_75:
  if ( v28 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF804C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8050) = -168430091;
  }
};

// Line 72: range 0000000019CC613D-0000000019CC690D
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v3; // r14
  unsigned __int64 v4; // rbx
  _DWORD *v5; // r15
  unsigned __int64 v6; // rbp
  boost::asio::detail::executor_function_base *v7; // rdi
  char v8; // al
  char v9; // dl
  char v10; // al
  char v11; // al
  boost::asio::detail::executor_function_base::func_type func; // rax
  char v13; // al
  char v14; // al
  __int64 v15; // rdi
  __int64 v16; // rax
  __int64 v17; // rsi OVERLAPPED
  __int64 v18; // rdx
  __int64 v19; // rax
  char v20; // dl
  char v21; // dl
  unsigned __int64 v22; // rdi
  char v23; // al
  boost::detail::sp_counted_base *v24; // rdi
  __int64 v25; // rdi
  __int64 v26; // rax
  char v27; // dl
  char v28; // dl
  struct _Unwind_Exception *v29; // rbp
  char v30[696]; // [rsp+10h] [rbp-2B8h] BYREF

  v3 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v19 = __asan_stack_malloc_4(640LL);
    if ( v19 )
      v3 = v19;
  }
  v4 = v3 + 640;
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 464 11 function:85";
  *(_QWORD *)(v3 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61953;
  v5[536862722] = -218959360;
  v5[536862723] = 62194;
  v5[536862738] = -202116109;
  v5[536862739] = -202116109;
  *(_QWORD *)(v3 + 48) = v3 + 32;
  *(_QWORD *)(v3 + 56) = base;
  *(_QWORD *)(v3 + 64) = base;
  v6 = (unsigned __int64)&base[1];
  *(_QWORD *)(v3 + 112) = &`vtable for'boost::beast::async_base<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  if ( *(_BYTE *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) )
  {
    v7 = base + 2;
    __asan_report_load8(&base[2]);
    goto LABEL_40;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 120) = base[2];
  v7 = base + 3;
  if ( *(_BYTE *)(((unsigned __int64)&base[3] >> 3) + 0x7FFF8000) )
  {
LABEL_40:
    __asan_report_load8(v7);
LABEL_41:
    __asan_report_load4(v7);
LABEL_42:
    __asan_report_load4(v7);
    goto LABEL_43;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 128) = base[3];
  boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>::buffers_prefix_view(
    (boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > *const)(v3 + 136),
    (const boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > *)&base[4]);
  v7 = base + 13;
  v8 = *(_BYTE *)(((unsigned __int64)&base[13] >> 3) + 0x7FFF8000);
  if ( v8 && v8 <= 3 )
    goto LABEL_41;
  *(_DWORD *)(v3 + 208) = base[13].func_;
  v7 = (boost::asio::detail::executor_function_base *)((char *)base + 108);
  v9 = *(_BYTE *)((((unsigned __int64)&base[13].func_ + 4) >> 3) + 0x7FFF8000);
  if ( (char)((((_BYTE)base + 108) & 7) + 3) >= v9 && v9 )
    goto LABEL_42;
  *(_DWORD *)(v3 + 212) = HIDWORD(base[13].func_);
  v7 = base + 14;
  if ( *(_WORD *)(((unsigned __int64)&base[14] >> 3) + 0x7FFF8000) )
  {
LABEL_43:
    __asan_report_load16(v7);
    goto LABEL_44;
  }
  *(__m128i *)(v3 + 216) = _mm_loadu_si128((const __m128i *)&base[14]);
  v7 = base + 16;
  if ( *(_BYTE *)(((unsigned __int64)&base[16] >> 3) + 0x7FFF8000) )
  {
LABEL_44:
    __asan_report_load8(v7);
LABEL_45:
    __asan_report_load4(v7);
    goto LABEL_46;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 232) = base[16];
  boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::async_base(
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 240),
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *)&base[17]);
  v7 = base + 46;
  v10 = *(_BYTE *)(((unsigned __int64)&base[46] >> 3) + 0x7FFF8000);
  if ( v10 && v10 <= 3 )
    goto LABEL_45;
  *(_DWORD *)(v3 + 472) = base[46].func_;
  *(_QWORD *)(v3 + 240) = &`vtable for'boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                        + 2;
  v7 = base + 47;
  if ( *(_BYTE *)(((unsigned __int64)&base[47] >> 3) + 0x7FFF8000) )
  {
LABEL_46:
    __asan_report_load8(v7);
    goto LABEL_47;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 480) = base[47];
  base[47].func_ = 0LL;
  v7 = base + 48;
  if ( *(char *)(((unsigned __int64)&base[48] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_47:
    __asan_report_load1(v7);
LABEL_48:
    __asan_report_load4(v7);
    goto LABEL_49;
  }
  *(_BYTE *)(v3 + 488) = base[48].func_;
  LOBYTE(base[48].func_) = 0;
  v7 = base + 49;
  v11 = *(_BYTE *)(((unsigned __int64)&base[49] >> 3) + 0x7FFF8000);
  if ( v11 && v11 <= 3 )
    goto LABEL_48;
  *(_DWORD *)(v3 + 496) = base[49].func_;
  *(_QWORD *)(v3 + 112) = &`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>
                        + 2;
  v7 = base + 50;
  if ( *(_BYTE *)(((unsigned __int64)&base[50] >> 3) + 0x7FFF8000) )
  {
LABEL_49:
    __asan_report_load8(v7);
    goto LABEL_50;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 504) = base[50];
  *(_QWORD *)(v3 + 512) = 0LL;
  v7 = base + 51;
  if ( *(_BYTE *)(((unsigned __int64)&base[51] >> 3) + 0x7FFF8000) )
  {
LABEL_50:
    __asan_report_load8(v7);
    goto LABEL_51;
  }
  func = base[51].func_;
  base[51].func_ = 0LL;
  *(_QWORD *)(v3 + 512) = func;
  base[50].func_ = 0LL;
  v7 = base + 52;
  if ( *(_BYTE *)(((unsigned __int64)&base[52] >> 3) + 0x7FFF8000) )
  {
LABEL_51:
    __asan_report_load8(v7);
LABEL_52:
    __asan_report_load1(v7);
    goto LABEL_53;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 520) = base[52];
  v7 = base + 53;
  v13 = *(_BYTE *)(((unsigned __int64)&base[53] >> 3) + 0x7FFF8000);
  if ( v13 <= (((unsigned __int8)base - 88) & 7) && v13 )
    goto LABEL_52;
  v14 = (char)base[53].func_;
  LOBYTE(base[53].func_) = 0;
  *(_BYTE *)(v3 + 528) = v14;
  v7 = base + 54;
  if ( *(_WORD *)(((unsigned __int64)&base[54] >> 3) + 0x7FFF8000) )
  {
LABEL_53:
    __asan_report_load16(v7);
    goto LABEL_54;
  }
  *(__m128i *)(v3 + 536) = _mm_loadu_si128((const __m128i *)&base[54]);
  v7 = base + 56;
  if ( *(_WORD *)(((unsigned __int64)&base[56] >> 3) + 0x7FFF8000) )
  {
LABEL_54:
    __asan_report_load16(v7);
    goto LABEL_55;
  }
  *(__m128i *)(v3 + 552) = _mm_loadu_si128((const __m128i *)&base[56]);
  v7 = base + 58;
  if ( *(_BYTE *)(((unsigned __int64)&base[58] >> 3) + 0x7FFF8000) )
  {
LABEL_55:
    __asan_report_load8(v7);
    goto LABEL_56;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 568) = base[58];
  v15 = *(_QWORD *)(v3 + 64);
  if ( v15 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v15 + 8));
    *(_QWORD *)(v3 + 64) = 0LL;
  }
  v6 = *(_QWORD *)(v3 + 56);
  if ( !v6 )
    goto LABEL_35;
  v16 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v16 )
  {
    v7 = (boost::asio::detail::executor_function_base *)(v16 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v16 + 8) >> 3) + 0x7FFF8000) )
    {
      v16 = *(_QWORD *)(v16 + 8);
      goto LABEL_30;
    }
LABEL_56:
    __asan_report_load8(v7);
    goto LABEL_57;
  }
LABEL_30:
  if ( v16 )
  {
    v7 = (boost::asio::detail::executor_function_base *)(v16 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v16 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v16 + 16) )
        goto LABEL_33;
LABEL_58:
      v20 = *(_BYTE *)(((v6 + 480) >> 3) + 0x7FFF8000);
      if ( v20 <= (char)((v6 - 32) & 7) && v20 )
      {
        __asan_report_load1(v6 + 480);
      }
      else
      {
        v21 = *(_BYTE *)((v6 >> 3) + 0x7FFF8000);
        if ( v21 > (char)(v6 & 7) || !v21 )
        {
          *(_BYTE *)v6 = *(_BYTE *)(v6 + 480);
          *(_QWORD *)(v16 + 16) = v6;
          goto LABEL_34;
        }
      }
      __asan_report_store1(v6);
      goto LABEL_65;
    }
LABEL_57:
    v16 = __asan_report_load8(v7);
    goto LABEL_58;
  }
LABEL_33:
  operator delete(*(void **)(v3 + 56));
LABEL_34:
  *(_QWORD *)(v3 + 56) = 0LL;
LABEL_35:
  if ( call )
  {
    v17 = *(_QWORD *)(v3 + 552);
    v18 = *(_QWORD *)(v3 + 560);
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::operator()(
      (boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v3 + 112),
      *(boost::beast::error_code *)&v17,
      *(_QWORD *)(v3 + 568));
  }
LABEL_65:
  *(_QWORD *)(v3 + 112) = &`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>
                        + 2;
  if ( *(_BYTE *)(v3 + 528) )
  {
    v22 = *(_QWORD *)(v3 + 520);
    v23 = *(_BYTE *)((v22 >> 3) + 0x7FFF8000);
    if ( v23 <= (*(_BYTE *)(v3 + 520) & 7) && v23 )
    {
      __asan_report_store1(v22);
      goto LABEL_84;
    }
    *(_BYTE *)v22 = 0;
  }
  v24 = *(boost::detail::sp_counted_base **)(v3 + 512);
  if ( v24 )
    boost::detail::sp_counted_base::release(v24);
  *(_QWORD *)(v3 + 112) = &`vtable for'boost::beast::async_base<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v3 + 480));
  boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>::~io_op((boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > *const)(v3 + 120));
  v25 = *(_QWORD *)(v3 + 64);
  if ( v25 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v25 + 8));
    *(_QWORD *)(v3 + 64) = 0LL;
  }
  v4 = *(_QWORD *)(v3 + 56);
  if ( v4 )
  {
    v26 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( !v26 )
      goto LABEL_77;
    v22 = v26 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v26 + 8) >> 3) + 0x7FFF8000) )
    {
      v26 = *(_QWORD *)(v26 + 8);
LABEL_77:
      if ( !v26 )
      {
LABEL_80:
        operator delete((void *)v4);
        goto LABEL_81;
      }
      v22 = v26 + 16;
      if ( !*(_BYTE *)(((unsigned __int64)(v26 + 16) >> 3) + 0x7FFF8000) )
      {
        if ( *(_QWORD *)(v26 + 16) )
          goto LABEL_80;
LABEL_86:
        v27 = *(_BYTE *)(((v4 + 480) >> 3) + 0x7FFF8000);
        if ( v27 <= (char)((v4 - 32) & 7) && v27 )
        {
          __asan_report_load1(v4 + 480);
        }
        else
        {
          v28 = *(_BYTE *)((v4 >> 3) + 0x7FFF8000);
          if ( v28 > (char)(v4 & 7) || !v28 )
          {
            *(_BYTE *)v4 = *(_BYTE *)(v4 + 480);
            *(_QWORD *)(v26 + 16) = v4;
            goto LABEL_81;
          }
        }
        v29 = (struct _Unwind_Exception *)__asan_report_store1(v4);
        boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v4 - 528));
        boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const)(v4 - 592));
        __asan_handle_no_return(v4 - 592);
        _Unwind_Resume(v29);
      }
LABEL_85:
      v26 = __asan_report_load8(v22);
      goto LABEL_86;
    }
LABEL_84:
    __asan_report_load8(v22);
    goto LABEL_85;
  }
LABEL_81:
  if ( v30 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 72: range 0000000019CBD2BF-0000000019CBDA1F
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v3; // r14
  _DWORD *v4; // r15
  unsigned __int64 v5; // rbp
  boost::asio::detail::executor_function_base *v6; // rdi
  char v7; // al
  char v8; // dl
  char v9; // al
  char v10; // al
  boost::asio::detail::executor_function_base::func_type func; // rax
  char v12; // al
  char v13; // al
  __int64 v14; // rdi
  __int64 v15; // rax
  __int64 v16; // rsi OVERLAPPED
  __int64 v17; // rdx
  __int64 v18; // rax
  char v19; // dl
  char v20; // dl
  __int64 v21; // rdi
  unsigned __int64 v22; // rbx
  __int64 v23; // rax
  __int64 v24; // rdi
  char v25; // dl
  char v26; // dl
  struct _Unwind_Exception *v27; // rbp
  char v28[696]; // [rsp+10h] [rbp-2B8h] BYREF

  v3 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v18 = __asan_stack_malloc_4(640LL);
    if ( v18 )
      v3 = v18;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 464 11 function:85";
  *(_QWORD *)(v3 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete;
  v4 = (_DWORD *)(v3 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61953;
  v4[536862722] = -218959360;
  v4[536862723] = 62194;
  v4[536862738] = -202116109;
  v4[536862739] = -202116109;
  *(_QWORD *)(v3 + 48) = v3 + 32;
  *(_QWORD *)(v3 + 56) = base;
  *(_QWORD *)(v3 + 64) = base;
  v5 = (unsigned __int64)&base[1];
  *(_QWORD *)(v3 + 112) = &`vtable for'boost::beast::async_base<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  if ( *(_BYTE *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) )
  {
    v6 = base + 2;
    __asan_report_load8(&base[2]);
    goto LABEL_40;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 120) = base[2];
  v6 = base + 3;
  if ( *(_BYTE *)(((unsigned __int64)&base[3] >> 3) + 0x7FFF8000) )
  {
LABEL_40:
    __asan_report_load8(v6);
LABEL_41:
    __asan_report_load4(v6);
LABEL_42:
    __asan_report_load4(v6);
    goto LABEL_43;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 128) = base[3];
  boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>::buffers_prefix_view(
    (boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > *const)(v3 + 136),
    (const boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > *)&base[4]);
  v6 = base + 13;
  v7 = *(_BYTE *)(((unsigned __int64)&base[13] >> 3) + 0x7FFF8000);
  if ( v7 && v7 <= 3 )
    goto LABEL_41;
  *(_DWORD *)(v3 + 208) = base[13].func_;
  v6 = (boost::asio::detail::executor_function_base *)((char *)base + 108);
  v8 = *(_BYTE *)((((unsigned __int64)&base[13].func_ + 4) >> 3) + 0x7FFF8000);
  if ( (char)((((_BYTE)base + 108) & 7) + 3) >= v8 && v8 )
    goto LABEL_42;
  *(_DWORD *)(v3 + 212) = HIDWORD(base[13].func_);
  v6 = base + 14;
  if ( *(_WORD *)(((unsigned __int64)&base[14] >> 3) + 0x7FFF8000) )
  {
LABEL_43:
    __asan_report_load16(v6);
    goto LABEL_44;
  }
  *(__m128i *)(v3 + 216) = _mm_loadu_si128((const __m128i *)&base[14]);
  v6 = base + 16;
  if ( *(_BYTE *)(((unsigned __int64)&base[16] >> 3) + 0x7FFF8000) )
  {
LABEL_44:
    __asan_report_load8(v6);
LABEL_45:
    __asan_report_load4(v6);
    goto LABEL_46;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 232) = base[16];
  boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::async_base(
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 240),
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *)&base[17]);
  v6 = base + 46;
  v9 = *(_BYTE *)(((unsigned __int64)&base[46] >> 3) + 0x7FFF8000);
  if ( v9 && v9 <= 3 )
    goto LABEL_45;
  *(_DWORD *)(v3 + 472) = base[46].func_;
  *(_QWORD *)(v3 + 240) = &`vtable for'boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                        + 2;
  v6 = base + 47;
  if ( *(_BYTE *)(((unsigned __int64)&base[47] >> 3) + 0x7FFF8000) )
  {
LABEL_46:
    __asan_report_load8(v6);
    goto LABEL_47;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 480) = base[47];
  base[47].func_ = 0LL;
  v6 = base + 48;
  if ( *(char *)(((unsigned __int64)&base[48] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_47:
    __asan_report_load1(v6);
LABEL_48:
    __asan_report_load4(v6);
    goto LABEL_49;
  }
  *(_BYTE *)(v3 + 488) = base[48].func_;
  LOBYTE(base[48].func_) = 0;
  v6 = base + 49;
  v10 = *(_BYTE *)(((unsigned __int64)&base[49] >> 3) + 0x7FFF8000);
  if ( v10 && v10 <= 3 )
    goto LABEL_48;
  *(_DWORD *)(v3 + 496) = base[49].func_;
  *(_QWORD *)(v3 + 112) = &`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>
                        + 2;
  v6 = base + 50;
  if ( *(_BYTE *)(((unsigned __int64)&base[50] >> 3) + 0x7FFF8000) )
  {
LABEL_49:
    __asan_report_load8(v6);
    goto LABEL_50;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 504) = base[50];
  *(_QWORD *)(v3 + 512) = 0LL;
  v6 = base + 51;
  if ( *(_BYTE *)(((unsigned __int64)&base[51] >> 3) + 0x7FFF8000) )
  {
LABEL_50:
    __asan_report_load8(v6);
    goto LABEL_51;
  }
  func = base[51].func_;
  base[51].func_ = 0LL;
  *(_QWORD *)(v3 + 512) = func;
  base[50].func_ = 0LL;
  v6 = base + 52;
  if ( *(_BYTE *)(((unsigned __int64)&base[52] >> 3) + 0x7FFF8000) )
  {
LABEL_51:
    __asan_report_load8(v6);
LABEL_52:
    __asan_report_load1(v6);
    goto LABEL_53;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 520) = base[52];
  v6 = base + 53;
  v12 = *(_BYTE *)(((unsigned __int64)&base[53] >> 3) + 0x7FFF8000);
  if ( v12 <= (((unsigned __int8)base - 88) & 7) && v12 )
    goto LABEL_52;
  v13 = (char)base[53].func_;
  LOBYTE(base[53].func_) = 0;
  *(_BYTE *)(v3 + 528) = v13;
  v6 = base + 54;
  if ( *(_WORD *)(((unsigned __int64)&base[54] >> 3) + 0x7FFF8000) )
  {
LABEL_53:
    __asan_report_load16(v6);
    goto LABEL_54;
  }
  *(__m128i *)(v3 + 536) = _mm_loadu_si128((const __m128i *)&base[54]);
  v6 = base + 56;
  if ( *(_WORD *)(((unsigned __int64)&base[56] >> 3) + 0x7FFF8000) )
  {
LABEL_54:
    __asan_report_load16(v6);
    goto LABEL_55;
  }
  *(__m128i *)(v3 + 552) = _mm_loadu_si128((const __m128i *)&base[56]);
  v6 = base + 58;
  if ( *(_BYTE *)(((unsigned __int64)&base[58] >> 3) + 0x7FFF8000) )
  {
LABEL_55:
    __asan_report_load8(v6);
    goto LABEL_56;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 568) = base[58];
  v14 = *(_QWORD *)(v3 + 64);
  if ( v14 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v14 + 8));
    *(_QWORD *)(v3 + 64) = 0LL;
  }
  v5 = *(_QWORD *)(v3 + 56);
  if ( !v5 )
    goto LABEL_35;
  v15 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v15 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v15 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v15 + 8) >> 3) + 0x7FFF8000) )
    {
      v15 = *(_QWORD *)(v15 + 8);
      goto LABEL_30;
    }
LABEL_56:
    __asan_report_load8(v6);
    goto LABEL_57;
  }
LABEL_30:
  if ( v15 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v15 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v15 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v15 + 16) )
        goto LABEL_33;
LABEL_58:
      v19 = *(_BYTE *)(((v5 + 480) >> 3) + 0x7FFF8000);
      if ( v19 <= (char)((v5 - 32) & 7) && v19 )
      {
        __asan_report_load1(v5 + 480);
      }
      else
      {
        v20 = *(_BYTE *)((v5 >> 3) + 0x7FFF8000);
        if ( v20 > (char)(v5 & 7) || !v20 )
        {
          *(_BYTE *)v5 = *(_BYTE *)(v5 + 480);
          *(_QWORD *)(v15 + 16) = v5;
          goto LABEL_34;
        }
      }
      __asan_report_store1(v5);
      goto LABEL_65;
    }
LABEL_57:
    v15 = __asan_report_load8(v6);
    goto LABEL_58;
  }
LABEL_33:
  operator delete(*(void **)(v3 + 56));
LABEL_34:
  *(_QWORD *)(v3 + 56) = 0LL;
LABEL_35:
  if ( call )
  {
    v16 = *(_QWORD *)(v3 + 552);
    v17 = *(_QWORD *)(v3 + 560);
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::operator()(
      (boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v3 + 112),
      *(boost::beast::error_code *)&v16,
      *(_QWORD *)(v3 + 568));
  }
LABEL_65:
  boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v3 + 112));
  v21 = *(_QWORD *)(v3 + 64);
  if ( v21 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v21 + 8));
    *(_QWORD *)(v3 + 64) = 0LL;
  }
  v22 = *(_QWORD *)(v3 + 56);
  if ( v22 )
  {
    v23 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v23 )
    {
      v24 = v23 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v23 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v24);
        goto LABEL_78;
      }
      v23 = *(_QWORD *)(v23 + 8);
    }
    if ( !v23 )
    {
LABEL_74:
      operator delete((void *)v22);
      goto LABEL_75;
    }
    v24 = v23 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v23 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v23 + 16) )
        goto LABEL_74;
LABEL_79:
      v25 = *(_BYTE *)(((v22 + 480) >> 3) + 0x7FFF8000);
      if ( v25 <= (char)((v22 - 32) & 7) && v25 )
      {
        __asan_report_load1(v22 + 480);
      }
      else
      {
        v26 = *(_BYTE *)((v22 >> 3) + 0x7FFF8000);
        if ( v26 > (char)(v22 & 7) || !v26 )
        {
          *(_BYTE *)v22 = *(_BYTE *)(v22 + 480);
          *(_QWORD *)(v23 + 16) = v22;
          goto LABEL_75;
        }
      }
      v27 = (struct _Unwind_Exception *)__asan_report_store1(v22);
      boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v22 - 528));
      boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::buffers_cat_view<boost::beast::http::detail::chunk_size,boost::asio::const_buffer,boost::beast::http::chunk_crlf,boost::asio::const_buffer,boost::beast::http::chunk_crlf> >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const)(v22 - 592));
      __asan_handle_no_return(v22 - 592);
      _Unwind_Resume(v27);
    }
LABEL_78:
    v23 = __asan_report_load8(v24);
    goto LABEL_79;
  }
LABEL_75:
  if ( v28 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 72: range 0000000019CB448D-0000000019CB4BED
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v3; // r14
  _DWORD *v4; // r15
  unsigned __int64 v5; // rbp
  boost::asio::detail::executor_function_base *v6; // rdi
  char v7; // al
  char v8; // dl
  char v9; // al
  char v10; // al
  boost::asio::detail::executor_function_base::func_type func; // rax
  char v12; // al
  char v13; // al
  __int64 v14; // rdi
  __int64 v15; // rax
  __int64 v16; // rsi OVERLAPPED
  __int64 v17; // rdx
  __int64 v18; // rax
  char v19; // dl
  char v20; // dl
  __int64 v21; // rdi
  unsigned __int64 v22; // rbx
  __int64 v23; // rax
  __int64 v24; // rdi
  char v25; // dl
  char v26; // dl
  struct _Unwind_Exception *v27; // rbp
  char v28[696]; // [rsp+10h] [rbp-2B8h] BYREF

  v3 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v18 = __asan_stack_malloc_4(640LL);
    if ( v18 )
      v3 = v18;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 464 11 function:85";
  *(_QWORD *)(v3 + 16) = boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::do_complete;
  v4 = (_DWORD *)(v3 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61953;
  v4[536862722] = -218959360;
  v4[536862723] = 62194;
  v4[536862738] = -202116109;
  v4[536862739] = -202116109;
  *(_QWORD *)(v3 + 48) = v3 + 32;
  *(_QWORD *)(v3 + 56) = base;
  *(_QWORD *)(v3 + 64) = base;
  v5 = (unsigned __int64)&base[1];
  *(_QWORD *)(v3 + 112) = &`vtable for'boost::beast::async_base<boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  if ( *(_BYTE *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) )
  {
    v6 = base + 2;
    __asan_report_load8(&base[2]);
    goto LABEL_40;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 120) = base[2];
  v6 = base + 3;
  if ( *(_BYTE *)(((unsigned __int64)&base[3] >> 3) + 0x7FFF8000) )
  {
LABEL_40:
    __asan_report_load8(v6);
LABEL_41:
    __asan_report_load4(v6);
LABEL_42:
    __asan_report_load4(v6);
    goto LABEL_43;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 128) = base[3];
  boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>> const&>>>::buffers_prefix_view(
    (boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> > >&> > > *const)(v3 + 136),
    (const boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> > >&> > > *)&base[4]);
  v6 = base + 13;
  v7 = *(_BYTE *)(((unsigned __int64)&base[13] >> 3) + 0x7FFF8000);
  if ( v7 && v7 <= 3 )
    goto LABEL_41;
  *(_DWORD *)(v3 + 208) = base[13].func_;
  v6 = (boost::asio::detail::executor_function_base *)((char *)base + 108);
  v8 = *(_BYTE *)((((unsigned __int64)&base[13].func_ + 4) >> 3) + 0x7FFF8000);
  if ( (char)((((_BYTE)base + 108) & 7) + 3) >= v8 && v8 )
    goto LABEL_42;
  *(_DWORD *)(v3 + 212) = HIDWORD(base[13].func_);
  v6 = base + 14;
  if ( *(_WORD *)(((unsigned __int64)&base[14] >> 3) + 0x7FFF8000) )
  {
LABEL_43:
    __asan_report_load16(v6);
    goto LABEL_44;
  }
  *(__m128i *)(v3 + 216) = _mm_loadu_si128((const __m128i *)&base[14]);
  v6 = base + 16;
  if ( *(_BYTE *)(((unsigned __int64)&base[16] >> 3) + 0x7FFF8000) )
  {
LABEL_44:
    __asan_report_load8(v6);
LABEL_45:
    __asan_report_load4(v6);
    goto LABEL_46;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 232) = base[16];
  boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::async_base(
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v3 + 240),
    (boost::beast::async_base<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *)&base[17]);
  v6 = base + 46;
  v9 = *(_BYTE *)(((unsigned __int64)&base[46] >> 3) + 0x7FFF8000);
  if ( v9 && v9 <= 3 )
    goto LABEL_45;
  *(_DWORD *)(v3 + 472) = base[46].func_;
  *(_QWORD *)(v3 + 240) = &`vtable for'boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>
                        + 2;
  v6 = base + 47;
  if ( *(_BYTE *)(((unsigned __int64)&base[47] >> 3) + 0x7FFF8000) )
  {
LABEL_46:
    __asan_report_load8(v6);
    goto LABEL_47;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 480) = base[47];
  base[47].func_ = 0LL;
  v6 = base + 48;
  if ( *(char *)(((unsigned __int64)&base[48] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_47:
    __asan_report_load1(v6);
LABEL_48:
    __asan_report_load4(v6);
    goto LABEL_49;
  }
  *(_BYTE *)(v3 + 488) = base[48].func_;
  LOBYTE(base[48].func_) = 0;
  v6 = base + 49;
  v10 = *(_BYTE *)(((unsigned __int64)&base[49] >> 3) + 0x7FFF8000);
  if ( v10 && v10 <= 3 )
    goto LABEL_48;
  *(_DWORD *)(v3 + 496) = base[49].func_;
  *(_QWORD *)(v3 + 112) = &`vtable for'boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>
                        + 2;
  v6 = base + 50;
  if ( *(_BYTE *)(((unsigned __int64)&base[50] >> 3) + 0x7FFF8000) )
  {
LABEL_49:
    __asan_report_load8(v6);
    goto LABEL_50;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 504) = base[50];
  *(_QWORD *)(v3 + 512) = 0LL;
  v6 = base + 51;
  if ( *(_BYTE *)(((unsigned __int64)&base[51] >> 3) + 0x7FFF8000) )
  {
LABEL_50:
    __asan_report_load8(v6);
    goto LABEL_51;
  }
  func = base[51].func_;
  base[51].func_ = 0LL;
  *(_QWORD *)(v3 + 512) = func;
  base[50].func_ = 0LL;
  v6 = base + 52;
  if ( *(_BYTE *)(((unsigned __int64)&base[52] >> 3) + 0x7FFF8000) )
  {
LABEL_51:
    __asan_report_load8(v6);
LABEL_52:
    __asan_report_load1(v6);
    goto LABEL_53;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 520) = base[52];
  v6 = base + 53;
  v12 = *(_BYTE *)(((unsigned __int64)&base[53] >> 3) + 0x7FFF8000);
  if ( v12 <= (((unsigned __int8)base - 88) & 7) && v12 )
    goto LABEL_52;
  v13 = (char)base[53].func_;
  LOBYTE(base[53].func_) = 0;
  *(_BYTE *)(v3 + 528) = v13;
  v6 = base + 54;
  if ( *(_WORD *)(((unsigned __int64)&base[54] >> 3) + 0x7FFF8000) )
  {
LABEL_53:
    __asan_report_load16(v6);
    goto LABEL_54;
  }
  *(__m128i *)(v3 + 536) = _mm_loadu_si128((const __m128i *)&base[54]);
  v6 = base + 56;
  if ( *(_WORD *)(((unsigned __int64)&base[56] >> 3) + 0x7FFF8000) )
  {
LABEL_54:
    __asan_report_load16(v6);
    goto LABEL_55;
  }
  *(__m128i *)(v3 + 552) = _mm_loadu_si128((const __m128i *)&base[56]);
  v6 = base + 58;
  if ( *(_BYTE *)(((unsigned __int64)&base[58] >> 3) + 0x7FFF8000) )
  {
LABEL_55:
    __asan_report_load8(v6);
    goto LABEL_56;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 568) = base[58];
  v14 = *(_QWORD *)(v3 + 64);
  if ( v14 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> > >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v14 + 8));
    *(_QWORD *)(v3 + 64) = 0LL;
  }
  v5 = *(_QWORD *)(v3 + 56);
  if ( !v5 )
    goto LABEL_35;
  v15 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v15 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v15 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v15 + 8) >> 3) + 0x7FFF8000) )
    {
      v15 = *(_QWORD *)(v15 + 8);
      goto LABEL_30;
    }
LABEL_56:
    __asan_report_load8(v6);
    goto LABEL_57;
  }
LABEL_30:
  if ( v15 )
  {
    v6 = (boost::asio::detail::executor_function_base *)(v15 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v15 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v15 + 16) )
        goto LABEL_33;
LABEL_58:
      v19 = *(_BYTE *)(((v5 + 480) >> 3) + 0x7FFF8000);
      if ( v19 <= (char)((v5 - 32) & 7) && v19 )
      {
        __asan_report_load1(v5 + 480);
      }
      else
      {
        v20 = *(_BYTE *)((v5 >> 3) + 0x7FFF8000);
        if ( v20 > (char)(v5 & 7) || !v20 )
        {
          *(_BYTE *)v5 = *(_BYTE *)(v5 + 480);
          *(_QWORD *)(v15 + 16) = v5;
          goto LABEL_34;
        }
      }
      __asan_report_store1(v5);
      goto LABEL_65;
    }
LABEL_57:
    v15 = __asan_report_load8(v6);
    goto LABEL_58;
  }
LABEL_33:
  operator delete(*(void **)(v3 + 56));
LABEL_34:
  *(_QWORD *)(v3 + 56) = 0LL;
LABEL_35:
  if ( call )
  {
    v16 = *(_QWORD *)(v3 + 552);
    v17 = *(_QWORD *)(v3 + 560);
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::operator()(
      (boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> > >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v3 + 112),
      *(boost::beast::error_code *)&v16,
      *(_QWORD *)(v3 + 568));
  }
LABEL_65:
  boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> > >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v3 + 112));
  v21 = *(_QWORD *)(v3 + 64);
  if ( v21 )
  {
    boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> > >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v21 + 8));
    *(_QWORD *)(v3 + 64) = 0LL;
  }
  v22 = *(_QWORD *)(v3 + 56);
  if ( v22 )
  {
    v23 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v23 )
    {
      v24 = v23 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v23 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v24);
        goto LABEL_78;
      }
      v23 = *(_QWORD *)(v23 + 8);
    }
    if ( !v23 )
    {
LABEL_74:
      operator delete((void *)v22);
      goto LABEL_75;
    }
    v24 = v23 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v23 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v23 + 16) )
        goto LABEL_74;
LABEL_79:
      v25 = *(_BYTE *)(((v22 + 480) >> 3) + 0x7FFF8000);
      if ( v25 <= (char)((v22 - 32) & 7) && v25 )
      {
        __asan_report_load1(v22 + 480);
      }
      else
      {
        v26 = *(_BYTE *)((v22 >> 3) + 0x7FFF8000);
        if ( v26 > (char)(v22 & 7) || !v26 )
        {
          *(_BYTE *)v22 = *(_BYTE *)(v22 + 480);
          *(_QWORD *)(v23 + 16) = v22;
          goto LABEL_75;
        }
      }
      v27 = (struct _Unwind_Exception *)__asan_report_store1(v22);
      boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>::~transfer_op((boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> > >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > > *const)(v22 - 528));
      boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>> const&>>>>,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>>::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::binder2<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::transfer_op<true,boost::asio::mutable_buffers_1,boost::asio::ssl::detail::io_op<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::asio::ssl::detail::write_op<boost::beast::buffers_prefix_view<boost::beast::detail::buffers_ref<boost::beast::buffers_prefix_view<const boost::beast::buffers_suffix<boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> > >&> > > >,boost::beast::flat_stream<boost::asio::ssl::stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> > >::ops::write_op<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > > >,boost::system::error_code,long unsigned int>,std::allocator<void> >::ptr *const)(v22 - 592));
      __asan_handle_no_return(v22 - 592);
      _Unwind_Resume(v27);
    }
LABEL_78:
    v23 = __asan_report_load8(v24);
    goto LABEL_79;
  }
LABEL_75:
  if ( v28 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 72: range 0000000019BB8D2C-0000000019BB928C
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::asio::detail::binder1<boost::asio::detail::range_connect_op<boost::asio::ip::tcp,boost::asio::executor,boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>,boost::beast::detail::any_endpoint,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::connect_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp>>>>,boost::system::error_code>>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  boost::asio::detail::executor_function_base *v2; // rbp
  unsigned __int64 v3; // r12
  _DWORD *v4; // r13
  boost::asio::detail::executor_function_base *v5; // rdi
  __int64 v6; // rbp
  __int64 v7; // rax
  unsigned __int64 v8; // rdi
  __int64 (**v9)(void); // rax
  __int64 v10; // rax
  char v11; // dl
  char v12; // dl
  unsigned __int64 v13; // rdx
  __int64 v14; // rbp
  unsigned __int64 v15; // rbx
  __int64 v16; // rax
  __int64 v17; // rdi
  struct _Unwind_Exception *v18; // rbp
  boost::asio::executor::impl_base *impl; // rdi
  __int64 vptr_impl_base; // rax
  char v21; // dl
  char v22; // dl
  boost::asio::executor v23; // [rsp+8h] [rbp-1E0h] BYREF
  char v24[472]; // [rsp+10h] [rbp-1D8h] BYREF

  v2 = base;
  v3 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v10 = __asan_stack_malloc_3(416LL);
    if ( v10 )
      v3 = v10;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 1 12 allocator:76 48 1 5 alloc 64 24 4 p:77 128 224 11 function:85";
  *(_QWORD *)(v3 + 16) = boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::asio::detail::binder1<boost::asio::detail::range_connect_op<boost::asio::ip::tcp,boost::asio::executor,boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>,boost::beast::detail::any_endpoint,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::connect_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp>>>>,boost::system::error_code>>,std::allocator<void>>::do_complete;
  v4 = (_DWORD *)(v3 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234881024;
  v4[536862723] = -218959118;
  v4[536862731] = -202116109;
  v4[536862732] = -202116109;
  *(_QWORD *)(v3 + 64) = v3 + 32;
  *(_QWORD *)(v3 + 72) = base;
  *(_QWORD *)(v3 + 80) = base;
  v5 = base + 1;
  if ( *(_BYTE *)(((unsigned __int64)&v2[1] >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(v5);
    goto LABEL_25;
  }
  *(boost::asio::detail::executor_function_base *)(v3 + 128) = v2[1];
  v2[1].func_ = 0LL;
  v5 = v2 + 2;
  if ( *(char *)(((unsigned __int64)&v2[2] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_25:
    __asan_report_load1(v5);
    goto LABEL_26;
  }
  *(_BYTE *)(v3 + 136) = v2[2].func_;
  LOBYTE(v2[2].func_) = 0;
  boost::asio::detail::range_connect_op<boost::asio::ip::tcp,boost::asio::executor,boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>,boost::beast::detail::any_endpoint,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::connect_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp>>>>::range_connect_op(
    (boost::asio::detail::range_connect_op<boost::asio::ip::tcp,boost::asio::executor,boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>,boost::beast::detail::any_endpoint,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::connect_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp> > > > *const)(v3 + 144),
    (boost::asio::detail::range_connect_op<boost::asio::ip::tcp,boost::asio::executor,boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>,boost::beast::detail::any_endpoint,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::connect_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp> > > > *)&v2[3]);
  v5 = v2 + 27;
  if ( *(_WORD *)(((unsigned __int64)&v2[27] >> 3) + 0x7FFF8000) )
  {
LABEL_26:
    __asan_report_load16(v5);
    goto LABEL_27;
  }
  *(__m128i *)(v3 + 336) = _mm_loadu_si128((const __m128i *)&v2[27]);
  v6 = *(_QWORD *)(v3 + 80);
  if ( v6 )
  {
    boost::asio::detail::range_connect_op<boost::asio::ip::tcp,boost::asio::executor,boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>,boost::beast::detail::any_endpoint,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::connect_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp>>>>::~range_connect_op((boost::asio::detail::range_connect_op<boost::asio::ip::tcp,boost::asio::executor,boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>,boost::beast::detail::any_endpoint,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::connect_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp> > > > *const)(v6 + 24));
    boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v6 + 8));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v2 = *(boost::asio::detail::executor_function_base **)(v3 + 72);
  if ( v2 )
  {
    v7 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                    + __readfsqword(0));
    if ( !v7 )
      goto LABEL_11;
    v5 = (boost::asio::detail::executor_function_base *)(v7 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v7 + 8) >> 3) + 0x7FFF8000) )
    {
      v7 = *(_QWORD *)(v7 + 8);
LABEL_11:
      if ( !v7 )
      {
LABEL_14:
        operator delete(*(void **)(v3 + 72));
LABEL_15:
        *(_QWORD *)(v3 + 72) = 0LL;
        goto LABEL_16;
      }
      v5 = (boost::asio::detail::executor_function_base *)(v7 + 16);
      if ( !*(_BYTE *)(((unsigned __int64)(v7 + 16) >> 3) + 0x7FFF8000) )
      {
        if ( *(_QWORD *)(v7 + 16) )
          goto LABEL_14;
LABEL_29:
        v11 = *(_BYTE *)(((unsigned __int64)&v2[30] >> 3) + 0x7FFF8000);
        if ( v11 <= (((unsigned __int8)v2 - 16) & 7) && v11 )
        {
          __asan_report_load1(&v2[30]);
        }
        else
        {
          v12 = *(_BYTE *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000);
          if ( v12 > ((unsigned __int8)v2 & 7) || !v12 )
          {
            LOBYTE(v2->func_) = v2[30].func_;
            *(_QWORD *)(v7 + 16) = v2;
            goto LABEL_15;
          }
        }
        v8 = (unsigned __int64)v2;
        __asan_report_store1(v2);
LABEL_36:
        v9 = (__int64 (**)(void))__asan_report_load8(v8);
        goto LABEL_37;
      }
LABEL_28:
      v7 = __asan_report_load8(v5);
      goto LABEL_29;
    }
LABEL_27:
    __asan_report_load8(v5);
    goto LABEL_28;
  }
LABEL_16:
  if ( !call )
    goto LABEL_43;
  v8 = *(_QWORD *)(v3 + 128);
  if ( !v8 )
    goto LABEL_21;
  if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
    goto LABEL_36;
  v9 = *(__int64 (***)(void))v8;
  if ( !*(_BYTE *)((*(_QWORD *)v8 >> 3) + 0x7FFF8000LL) )
  {
    v8 = (*v9)();
LABEL_21:
    v23.impl_ = (boost::asio::executor::impl_base *)v8;
    boost::asio::executor::dispatch<boost::asio::detail::binder1<boost::asio::detail::range_connect_op<boost::asio::ip::tcp,boost::asio::executor,boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>,boost::beast::detail::any_endpoint,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::connect_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp>>>>,boost::system::error_code>,std::allocator<void>>(
      &v23,
      (boost::asio::detail::binder1<boost::asio::detail::range_connect_op<boost::asio::ip::tcp,boost::asio::executor,boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>,boost::beast::detail::any_endpoint,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::connect_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp> > > >,boost::system::error_code> *)(v3 + 144),
      (const std::allocator<void> *)(v3 + 48));
    goto LABEL_38;
  }
LABEL_37:
  __asan_report_load8(v9);
LABEL_38:
  if ( v23.impl_ )
  {
    if ( *(_BYTE *)(((unsigned __int64)v23.impl_ >> 3) + 0x7FFF8000) )
    {
      __asan_report_load8(v23.impl_);
    }
    else
    {
      v13 = (unsigned __int64)(v23.impl_->_vptr_impl_base + 1);
      if ( !*(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
      {
        (*((void (**)(void))v23.impl_->_vptr_impl_base + 1))();
        goto LABEL_42;
      }
    }
    v18 = (struct _Unwind_Exception *)__asan_report_load8(v13);
    impl = v23.impl_;
    if ( v23.impl_ )
    {
      if ( *(_BYTE *)(((unsigned __int64)v23.impl_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(v23.impl_);
      vptr_impl_base = (__int64)impl->_vptr_impl_base;
      if ( *(_BYTE *)(((unsigned __int64)(impl->_vptr_impl_base + 1) >> 3) + 0x7FFF8000) )
        vptr_impl_base = __asan_report_load8(impl->_vptr_impl_base + 1);
      (*(void (**)(void))(vptr_impl_base + 8))();
    }
    boost::asio::detail::range_connect_op<boost::asio::ip::tcp,boost::asio::executor,boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>,boost::beast::detail::any_endpoint,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::connect_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp>>>>::~range_connect_op((boost::asio::detail::range_connect_op<boost::asio::ip::tcp,boost::asio::executor,boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>,boost::beast::detail::any_endpoint,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::connect_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp> > > > *const)(v3 + 144));
    boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v3 + 128));
    boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::asio::detail::binder1<boost::asio::detail::range_connect_op<boost::asio::ip::tcp,boost::asio::executor,boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>,boost::beast::detail::any_endpoint,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::connect_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp>>>>,boost::system::error_code>>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::asio::detail::binder1<boost::asio::detail::range_connect_op<boost::asio::ip::tcp,boost::asio::executor,boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>,boost::beast::detail::any_endpoint,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::connect_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp> > > >,boost::system::error_code> >,std::allocator<void> >::ptr *const)(v3 + 64));
    __asan_handle_no_return(v3 + 64);
    _Unwind_Resume(v18);
  }
LABEL_42:
  boost::asio::executor_work_guard<boost::asio::executor>::reset((boost::asio::executor_work_guard<boost::asio::executor> *const)(v3 + 128));
LABEL_43:
  boost::asio::detail::range_connect_op<boost::asio::ip::tcp,boost::asio::executor,boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>,boost::beast::detail::any_endpoint,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::connect_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp>>>>::~range_connect_op((boost::asio::detail::range_connect_op<boost::asio::ip::tcp,boost::asio::executor,boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>,boost::beast::detail::any_endpoint,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::connect_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp> > > > *const)(v3 + 144));
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v3 + 128));
  v14 = *(_QWORD *)(v3 + 80);
  if ( v14 )
  {
    boost::asio::detail::range_connect_op<boost::asio::ip::tcp,boost::asio::executor,boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>,boost::beast::detail::any_endpoint,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::connect_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp>>>>::~range_connect_op((boost::asio::detail::range_connect_op<boost::asio::ip::tcp,boost::asio::executor,boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>,boost::beast::detail::any_endpoint,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>::ops::connect_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp> > > > *const)(v14 + 24));
    boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v14 + 8));
    *(_QWORD *)(v3 + 80) = 0LL;
  }
  v15 = *(_QWORD *)(v3 + 72);
  if ( v15 )
  {
    v16 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                     + __readfsqword(0));
    if ( v16 )
    {
      v17 = v16 + 8;
      if ( *(_BYTE *)(((unsigned __int64)(v16 + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load8(v17);
        goto LABEL_64;
      }
      v16 = *(_QWORD *)(v16 + 8);
    }
    if ( !v16 )
    {
LABEL_52:
      operator delete((void *)v15);
      goto LABEL_53;
    }
    v17 = v16 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v16 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v16 + 16) )
        goto LABEL_52;
LABEL_65:
      v21 = *(_BYTE *)(((v15 + 240) >> 3) + 0x7FFF8000);
      if ( v21 <= (char)((v15 - 16) & 7) && v21 )
      {
        __asan_report_load1(v15 + 240);
      }
      else
      {
        v22 = *(_BYTE *)((v15 >> 3) + 0x7FFF8000);
        if ( v22 > (char)(v15 & 7) || !v22 )
        {
          *(_BYTE *)v15 = *(_BYTE *)(v15 + 240);
          *(_QWORD *)(v16 + 16) = v15;
          goto LABEL_53;
        }
      }
      __asan_report_store1(v15);
      goto LABEL_72;
    }
LABEL_64:
    v16 = __asan_report_load8(v17);
    goto LABEL_65;
  }
LABEL_53:
  if ( v24 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF802C) = 0LL;
    return;
  }
LABEL_72:
  *(_QWORD *)v3 = 1172321806LL;
  *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  *(_DWORD *)((v3 >> 3) + 0x7FFF8030) = -168430091;
};

// Line 72: range 0000000019C49525-0000000019C4A164
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::system::error_code,int>>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v2; // rbp
  boost::asio::detail::executor_function_base *v3; // r12
  unsigned __int64 v4; // rbx
  boost::asio::detail::executor_function_base *v5; // rdi
  __int64 v6; // rsi
  unsigned __int64 v7; // rdi
  boost::asio::detail::executor_function_base::func_type func; // rax
  __int64 (**v9)(void); // rax
  __int64 v10; // rax
  boost::asio::detail::executor_function_base *v11; // rdi
  boost::asio::detail::executor_function_base::func_type v12; // rax
  char v13; // al
  char v14; // dl
  __int64 v15; // rax
  unsigned __int64 v16; // rdi
  __int64 (**v17)(void); // rax
  __int64 v18; // rax
  char v19; // dl
  char v20; // dl
  unsigned __int64 v21; // rdx
  __int64 v22; // rbp
  __int64 v23; // rdi
  __int64 v24; // rax
  struct _Unwind_Exception *v25; // rbp
  boost::asio::executor::impl_base *impl; // rdi
  __int64 vptr_impl_base; // rax
  char v28; // dl
  char v29; // dl
  unsigned __int64 v31; // [rsp+10h] [rbp-228h]
  _DWORD *v32; // [rsp+20h] [rbp-218h]
  boost::asio::executor v34; // [rsp+38h] [rbp-200h] BYREF
  char v35[504]; // [rsp+40h] [rbp-1F8h] BYREF

  v31 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v18 = __asan_stack_malloc_3(448LL);
    if ( v18 )
      v31 = v18;
  }
  v4 = v31 + 448;
  *(_QWORD *)v31 = 1102416563LL;
  *(_QWORD *)(v31 + 8) = "4 32 1 12 allocator:76 48 1 5 alloc 64 24 4 p:77 128 248 11 function:85";
  *(_QWORD *)(v31 + 16) = boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::system::error_code,int>>,std::allocator<void>>::do_complete;
  v32 = (_DWORD *)(v31 >> 3);
  v32[536862720] = -235802127;
  v32[536862721] = -234753535;
  v32[536862722] = -234881024;
  v32[536862723] = -218959118;
  v32[536862731] = -218103808;
  v32[536862732] = -202116109;
  v32[536862733] = -202116109;
  *(_QWORD *)(v31 + 64) = v31 + 32;
  *(_QWORD *)(v31 + 72) = base;
  *(_QWORD *)(v31 + 80) = base;
  v5 = base + 1;
  if ( *(_BYTE *)(((unsigned __int64)&base[1] >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(v5);
    goto LABEL_63;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 128) = base[1];
  base[1].func_ = 0LL;
  v5 = base + 2;
  if ( *(char *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_63:
    __asan_report_load1(v5);
    goto LABEL_64;
  }
  v6 = (__int64)base;
  *(_BYTE *)(v31 + 136) = base[2].func_;
  LOBYTE(base[2].func_) = 0;
  *(_QWORD *)(v31 + 144) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v31 + 152) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v31 + 160) = &`vtable for'boost::beast::async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v2 = v31 + 168;
  v3 = base + 6;
  if ( *(_BYTE *)(((unsigned __int64)&base[6] >> 3) + 0x7FFF8000) )
  {
LABEL_64:
    __asan_report_load8(v3);
    goto LABEL_65;
  }
  if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
  {
LABEL_65:
    v7 = v2;
    __asan_report_store8();
    goto LABEL_66;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 168) = base[6];
  v7 = v31 + 176;
  if ( *(_BYTE *)(((v31 + 176) >> 3) + 0x7FFF8000) )
  {
LABEL_66:
    __asan_report_store8();
    goto LABEL_67;
  }
  *(_QWORD *)(v31 + 176) = 0LL;
  v7 = (unsigned __int64)&base[7];
  if ( *(_BYTE *)(((unsigned __int64)&base[7] >> 3) + 0x7FFF8000) )
  {
LABEL_67:
    __asan_report_load8(v7);
    goto LABEL_68;
  }
  func = base[7].func_;
  base[7].func_ = 0LL;
  *(_QWORD *)(v31 + 176) = func;
  base[6].func_ = 0LL;
  v7 = (unsigned __int64)&base[8];
  if ( *(_BYTE *)(((unsigned __int64)&base[8] >> 3) + 0x7FFF8000) )
  {
LABEL_68:
    __asan_report_load8(v7);
    goto LABEL_69;
  }
  v7 = v31 + 184;
  if ( *(_BYTE *)(((v31 + 184) >> 3) + 0x7FFF8000) )
  {
LABEL_69:
    __asan_report_store8();
    goto LABEL_70;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 184) = base[8];
  v7 = (unsigned __int64)&base[9];
  if ( *(_BYTE *)(((unsigned __int64)&base[9] >> 3) + 0x7FFF8000) )
  {
LABEL_70:
    __asan_report_load8(v7);
LABEL_71:
    v9 = (__int64 (**)(void))__asan_report_load8(v7);
    goto LABEL_72;
  }
  v7 = (unsigned __int64)base[9].func_;
  if ( !v7 )
    goto LABEL_15;
  if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
    goto LABEL_71;
  v9 = *(__int64 (***)(void))v7;
  if ( *(_BYTE *)((*(_QWORD *)v7 >> 3) + 0x7FFF8000LL) )
  {
LABEL_72:
    v10 = __asan_report_load8(v9);
    goto LABEL_73;
  }
  v7 = (*v9)();
LABEL_15:
  v10 = v31 + 192;
  if ( *(_BYTE *)(((v31 + 192) >> 3) + 0x7FFF8000) )
  {
LABEL_73:
    v11 = (boost::asio::detail::executor_function_base *)v10;
    __asan_report_store8();
    goto LABEL_74;
  }
  *(_QWORD *)(v31 + 192) = v7;
  v11 = base + 10;
  if ( *(_BYTE *)(((unsigned __int64)&base[10] >> 3) + 0x7FFF8000) )
  {
LABEL_74:
    __asan_report_load8(v11);
    goto LABEL_75;
  }
  v11 = (boost::asio::detail::executor_function_base *)(v31 + 200);
  if ( *(_BYTE *)(((v31 + 200) >> 3) + 0x7FFF8000) )
  {
LABEL_75:
    __asan_report_store8();
    goto LABEL_76;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 200) = base[10];
  v11 = base + 11;
  if ( *(_BYTE *)(((unsigned __int64)&base[11] >> 3) + 0x7FFF8000) )
  {
LABEL_76:
    __asan_report_load8(v11);
    goto LABEL_77;
  }
  v11 = (boost::asio::detail::executor_function_base *)(v31 + 208);
  if ( *(_BYTE *)(((v31 + 208) >> 3) + 0x7FFF8000) )
  {
LABEL_77:
    __asan_report_store8();
    goto LABEL_78;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 208) = base[11];
  v11 = base + 12;
  if ( *(_BYTE *)(((unsigned __int64)&base[12] >> 3) + 0x7FFF8000) )
  {
LABEL_78:
    __asan_report_load8(v11);
    goto LABEL_79;
  }
  v11 = (boost::asio::detail::executor_function_base *)(v31 + 216);
  if ( *(_BYTE *)(((v31 + 216) >> 3) + 0x7FFF8000) )
  {
LABEL_79:
    __asan_report_store8();
    goto LABEL_80;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 216) = base[12];
  v11 = base + 13;
  if ( *(_BYTE *)(((unsigned __int64)&base[13] >> 3) + 0x7FFF8000) )
  {
LABEL_80:
    __asan_report_load8(v11);
    goto LABEL_81;
  }
  v11 = (boost::asio::detail::executor_function_base *)(v31 + 224);
  if ( *(_BYTE *)(((v31 + 224) >> 3) + 0x7FFF8000) )
  {
LABEL_81:
    __asan_report_store8();
    goto LABEL_82;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 224) = base[13];
  v11 = base + 14;
  if ( *(_BYTE *)(((unsigned __int64)&base[14] >> 3) + 0x7FFF8000) )
  {
LABEL_82:
    __asan_report_load8(v11);
    goto LABEL_83;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 232) = base[14];
  base[14].func_ = 0LL;
  v11 = base + 15;
  if ( *(char *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_83:
    __asan_report_load1(v11);
    goto LABEL_84;
  }
  *(_BYTE *)(v31 + 240) = base[15].func_;
  LOBYTE(base[15].func_) = 0;
  *(_QWORD *)(v31 + 160) = &`vtable for'boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v11 = base + 16;
  if ( *(_BYTE *)(((unsigned __int64)&base[16] >> 3) + 0x7FFF8000) )
  {
LABEL_84:
    __asan_report_load8(v11);
    goto LABEL_85;
  }
  v12 = base[16].func_;
  base[16].func_ = 0LL;
  *(_QWORD *)(v31 + 248) = v12;
  *(_QWORD *)(v31 + 160) = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v11 = base + 17;
  if ( *(_BYTE *)(((unsigned __int64)&base[17] >> 3) + 0x7FFF8000) )
  {
LABEL_85:
    __asan_report_load8(v11);
    goto LABEL_86;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 256) = base[17];
  v11 = base + 18;
  if ( *(_BYTE *)(((unsigned __int64)&base[18] >> 3) + 0x7FFF8000) )
  {
LABEL_86:
    __asan_report_load8(v11);
    goto LABEL_87;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 264) = base[18];
  v11 = base + 19;
  if ( *(_BYTE *)(((unsigned __int64)&base[19] >> 3) + 0x7FFF8000) )
  {
LABEL_87:
    __asan_report_load8(v11);
    goto LABEL_88;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 272) = base[19];
  base[19].func_ = 0LL;
  v11 = base + 20;
  if ( *(char *)(((unsigned __int64)&base[20] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_88:
    __asan_report_load1(v11);
LABEL_89:
    __asan_report_load4(v11);
    goto LABEL_90;
  }
  *(_BYTE *)(v31 + 280) = base[20].func_;
  LOBYTE(base[20].func_) = 0;
  v11 = base + 21;
  v13 = *(_BYTE *)(((unsigned __int64)&base[21] >> 3) + 0x7FFF8000);
  if ( v13 && v13 <= 3 )
    goto LABEL_89;
  *(_DWORD *)(v31 + 288) = base[21].func_;
  *(_QWORD *)(v31 + 152) = &`vtable for'boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v11 = base + 22;
  if ( *(_BYTE *)(((unsigned __int64)&base[22] >> 3) + 0x7FFF8000) )
  {
LABEL_90:
    __asan_report_load8(v11);
    goto LABEL_91;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 296) = base[22];
  v11 = base + 23;
  if ( *(_BYTE *)(((unsigned __int64)&base[23] >> 3) + 0x7FFF8000) )
  {
LABEL_91:
    __asan_report_load8(v11);
    goto LABEL_92;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 304) = base[23];
  v11 = base + 24;
  if ( *(_BYTE *)(((unsigned __int64)&base[24] >> 3) + 0x7FFF8000) )
  {
LABEL_92:
    __asan_report_load8(v11);
    goto LABEL_93;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 312) = base[24];
  v11 = base + 25;
  if ( *(_BYTE *)(((unsigned __int64)&base[25] >> 3) + 0x7FFF8000) )
  {
LABEL_93:
    __asan_report_load8(v11);
    goto LABEL_94;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 320) = base[25];
  base[25].func_ = 0LL;
  v11 = base + 26;
  if ( *(char *)(((unsigned __int64)&base[26] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_94:
    __asan_report_load1(v11);
    goto LABEL_95;
  }
  *(_BYTE *)(v31 + 328) = base[26].func_;
  LOBYTE(base[26].func_) = 0;
  *(_QWORD *)(v31 + 144) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v11 = base + 27;
  if ( *(_BYTE *)(((unsigned __int64)&base[27] >> 3) + 0x7FFF8000) )
  {
LABEL_95:
    __asan_report_load8(v11);
    goto LABEL_96;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 336) = base[27];
  v11 = base + 28;
  if ( *(_BYTE *)(((unsigned __int64)&base[28] >> 3) + 0x7FFF8000) )
  {
LABEL_96:
    __asan_report_load8(v11);
LABEL_97:
    v6 = 24LL;
    __asan_report_load_n(v11, 24LL);
    goto LABEL_98;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 344) = base[28];
  v11 = base + 29;
  v14 = *(_BYTE *)((((unsigned __int64)&base[31].func_ + 7) >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v14 <= (((unsigned __int8)base - 1) & 7);
  if ( ((v14 != 0) & (unsigned __int8)v6) != 0 || *(char *)(((unsigned __int64)&base[29] >> 3) + 0x7FFF8000) < 0 )
    goto LABEL_97;
  *(__m128i *)(v31 + 352) = _mm_loadu_si128((const __m128i *)&base[29]);
  *(boost::asio::detail::executor_function_base *)(v31 + 368) = base[31];
  v2 = *(_QWORD *)(v31 + 80);
  if ( !v2 )
    goto LABEL_45;
  v11 = (boost::asio::detail::executor_function_base *)(v2 + 24);
  if ( *(_BYTE *)(((v2 + 24) >> 3) + 0x7FFF8000) )
  {
LABEL_98:
    __asan_report_store8();
    goto LABEL_99;
  }
  *(_QWORD *)(v2 + 24) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                       + 2;
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v2 + 24));
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v2 + 8));
  *(_QWORD *)(v31 + 80) = 0LL;
LABEL_45:
  v2 = *(_QWORD *)(v31 + 72);
  if ( !v2 )
    goto LABEL_54;
  v15 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v15 )
  {
    v11 = (boost::asio::detail::executor_function_base *)(v15 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v15 + 8) >> 3) + 0x7FFF8000) )
    {
      v15 = *(_QWORD *)(v15 + 8);
      goto LABEL_49;
    }
LABEL_99:
    __asan_report_load8(v11);
    goto LABEL_100;
  }
LABEL_49:
  if ( v15 )
  {
    v11 = (boost::asio::detail::executor_function_base *)(v15 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v15 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v15 + 16) )
        goto LABEL_52;
LABEL_101:
      v19 = *(_BYTE *)(((v2 + 264) >> 3) + 0x7FFF8000);
      if ( v19 <= (char)((v2 + 8) & 7) && v19 )
      {
        __asan_report_load1(v2 + 264);
      }
      else
      {
        v20 = *(_BYTE *)((v2 >> 3) + 0x7FFF8000);
        v6 = v2 & 7;
        if ( v20 > (char)v6 || !v20 )
        {
          *(_BYTE *)v2 = *(_BYTE *)(v2 + 264);
          *(_QWORD *)(v15 + 16) = v2;
          goto LABEL_53;
        }
      }
      v16 = v2;
      __asan_report_store1(v2);
LABEL_108:
      v17 = (__int64 (**)(void))__asan_report_load8(v16);
      goto LABEL_109;
    }
LABEL_100:
    v15 = __asan_report_load8(v11);
    goto LABEL_101;
  }
LABEL_52:
  operator delete(*(void **)(v31 + 72));
LABEL_53:
  *(_QWORD *)(v31 + 72) = 0LL;
LABEL_54:
  if ( !call )
    goto LABEL_115;
  v16 = *(_QWORD *)(v31 + 128);
  if ( !v16 )
    goto LABEL_59;
  if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
    goto LABEL_108;
  v17 = *(__int64 (***)(void))v16;
  if ( !*(_BYTE *)((*(_QWORD *)v16 >> 3) + 0x7FFF8000LL) )
  {
    v16 = (*v17)();
LABEL_59:
    v34.impl_ = (boost::asio::executor::impl_base *)v16;
    v6 = v31 + 144;
    boost::asio::executor::dispatch<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::system::error_code,int>,std::allocator<void>>(
      &v34,
      (boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::system::error_code,int> *)(v31 + 144),
      (const std::allocator<void> *)(v31 + 48));
    goto LABEL_110;
  }
LABEL_109:
  __asan_report_load8(v17);
LABEL_110:
  if ( v34.impl_ )
  {
    if ( *(_BYTE *)(((unsigned __int64)v34.impl_ >> 3) + 0x7FFF8000) )
    {
      __asan_report_load8(v34.impl_);
    }
    else
    {
      v21 = (unsigned __int64)(v34.impl_->_vptr_impl_base + 1);
      if ( !*(_BYTE *)((v21 >> 3) + 0x7FFF8000) )
      {
        (*((void (**)(void))v34.impl_->_vptr_impl_base + 1))();
        goto LABEL_114;
      }
    }
    v25 = (struct _Unwind_Exception *)__asan_report_load8(v21);
    impl = v34.impl_;
    if ( v34.impl_ )
    {
      if ( *(_BYTE *)(((unsigned __int64)v34.impl_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(v34.impl_);
      vptr_impl_base = (__int64)impl->_vptr_impl_base;
      if ( *(_BYTE *)(((unsigned __int64)(impl->_vptr_impl_base + 1) >> 3) + 0x7FFF8000) )
        vptr_impl_base = __asan_report_load8(impl->_vptr_impl_base + 1);
      (*(void (**)(void))(vptr_impl_base + 8))();
    }
    *(_QWORD *)(v31 + 144) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                           + 2;
    boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v31 + 144));
    boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v31 + 128));
    boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::system::error_code,int>>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::system::error_code,int> >,std::allocator<void> >::ptr *const)(v31 + 64));
    __asan_handle_no_return(v31 + 64);
    _Unwind_Resume(v25);
  }
LABEL_114:
  boost::asio::executor_work_guard<boost::asio::executor>::reset((boost::asio::executor_work_guard<boost::asio::executor> *const)(v31 + 128));
LABEL_115:
  *(_QWORD *)(v31 + 144) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v31 + 144));
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v31 + 128));
  v22 = *(_QWORD *)(v31 + 80);
  if ( v22 )
  {
    v23 = v22 + 24;
    if ( *(_BYTE *)(((unsigned __int64)(v22 + 24) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store8();
      goto LABEL_137;
    }
    *(_QWORD *)(v22 + 24) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                          + 2;
    boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v22 + 24));
    boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v22 + 8));
    *(_QWORD *)(v31 + 80) = 0LL;
  }
  v4 = *(_QWORD *)(v31 + 72);
  if ( !v4 )
    goto LABEL_126;
  v24 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v24 )
  {
    v23 = v24 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v24 + 8) >> 3) + 0x7FFF8000) )
    {
      v24 = *(_QWORD *)(v24 + 8);
      goto LABEL_122;
    }
LABEL_137:
    __asan_report_load8(v23);
LABEL_138:
    v24 = __asan_report_load8(v23);
    goto LABEL_139;
  }
LABEL_122:
  if ( !v24 )
  {
LABEL_125:
    operator delete((void *)v4);
    goto LABEL_126;
  }
  v23 = v24 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v24 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_138;
  if ( *(_QWORD *)(v24 + 16) )
    goto LABEL_125;
LABEL_139:
  v28 = *(_BYTE *)(((v4 + 264) >> 3) + 0x7FFF8000);
  if ( v28 <= (char)((v4 + 8) & 7) && v28 )
  {
    __asan_report_load1(v4 + 264);
LABEL_145:
    __asan_report_store1(v4);
    goto LABEL_146;
  }
  v29 = *(_BYTE *)((v4 >> 3) + 0x7FFF8000);
  v6 = v4 & 7;
  if ( v29 <= (char)v6 && v29 )
    goto LABEL_145;
  *(_BYTE *)v4 = *(_BYTE *)(v4 + 264);
  *(_QWORD *)(v24 + 16) = v4;
LABEL_126:
  v6 = v31;
  if ( v35 == (char *)v31 )
  {
    *(_QWORD *)((v31 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v31 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v31 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v31 >> 3) + 0x7FFF8034) = 0;
    return;
  }
LABEL_146:
  *(_QWORD *)v6 = 1172321806LL;
  *(_QWORD *)((v31 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v31 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v31 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v31 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v31 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v31 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v31 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
};

// Line 72: range 0000000019CD184F-0000000019CD248E
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::system::error_code,int>>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v2; // rbp
  boost::asio::detail::executor_function_base *v3; // r12
  unsigned __int64 v4; // rbx
  boost::asio::detail::executor_function_base *v5; // rdi
  __int64 v6; // rsi
  unsigned __int64 v7; // rdi
  boost::asio::detail::executor_function_base::func_type func; // rax
  __int64 (**v9)(void); // rax
  __int64 v10; // rax
  boost::asio::detail::executor_function_base *v11; // rdi
  boost::asio::detail::executor_function_base::func_type v12; // rax
  char v13; // al
  char v14; // dl
  __int64 v15; // rax
  unsigned __int64 v16; // rdi
  __int64 (**v17)(void); // rax
  __int64 v18; // rax
  char v19; // dl
  char v20; // dl
  unsigned __int64 v21; // rdx
  __int64 v22; // rbp
  __int64 v23; // rdi
  __int64 v24; // rax
  struct _Unwind_Exception *v25; // rbp
  boost::asio::executor::impl_base *impl; // rdi
  __int64 vptr_impl_base; // rax
  char v28; // dl
  char v29; // dl
  unsigned __int64 v31; // [rsp+10h] [rbp-228h]
  _DWORD *v32; // [rsp+20h] [rbp-218h]
  boost::asio::executor v34; // [rsp+38h] [rbp-200h] BYREF
  char v35[504]; // [rsp+40h] [rbp-1F8h] BYREF

  v31 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v18 = __asan_stack_malloc_3(448LL);
    if ( v18 )
      v31 = v18;
  }
  v4 = v31 + 448;
  *(_QWORD *)v31 = 1102416563LL;
  *(_QWORD *)(v31 + 8) = "4 32 1 12 allocator:76 48 1 5 alloc 64 24 4 p:77 128 248 11 function:85";
  *(_QWORD *)(v31 + 16) = boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::system::error_code,int>>,std::allocator<void>>::do_complete;
  v32 = (_DWORD *)(v31 >> 3);
  v32[536862720] = -235802127;
  v32[536862721] = -234753535;
  v32[536862722] = -234881024;
  v32[536862723] = -218959118;
  v32[536862731] = -218103808;
  v32[536862732] = -202116109;
  v32[536862733] = -202116109;
  *(_QWORD *)(v31 + 64) = v31 + 32;
  *(_QWORD *)(v31 + 72) = base;
  *(_QWORD *)(v31 + 80) = base;
  v5 = base + 1;
  if ( *(_BYTE *)(((unsigned __int64)&base[1] >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(v5);
    goto LABEL_63;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 128) = base[1];
  base[1].func_ = 0LL;
  v5 = base + 2;
  if ( *(char *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_63:
    __asan_report_load1(v5);
    goto LABEL_64;
  }
  v6 = (__int64)base;
  *(_BYTE *)(v31 + 136) = base[2].func_;
  LOBYTE(base[2].func_) = 0;
  *(_QWORD *)(v31 + 144) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v31 + 152) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v31 + 160) = &`vtable for'boost::beast::async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v2 = v31 + 168;
  v3 = base + 6;
  if ( *(_BYTE *)(((unsigned __int64)&base[6] >> 3) + 0x7FFF8000) )
  {
LABEL_64:
    __asan_report_load8(v3);
    goto LABEL_65;
  }
  if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
  {
LABEL_65:
    v7 = v2;
    __asan_report_store8();
    goto LABEL_66;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 168) = base[6];
  v7 = v31 + 176;
  if ( *(_BYTE *)(((v31 + 176) >> 3) + 0x7FFF8000) )
  {
LABEL_66:
    __asan_report_store8();
    goto LABEL_67;
  }
  *(_QWORD *)(v31 + 176) = 0LL;
  v7 = (unsigned __int64)&base[7];
  if ( *(_BYTE *)(((unsigned __int64)&base[7] >> 3) + 0x7FFF8000) )
  {
LABEL_67:
    __asan_report_load8(v7);
    goto LABEL_68;
  }
  func = base[7].func_;
  base[7].func_ = 0LL;
  *(_QWORD *)(v31 + 176) = func;
  base[6].func_ = 0LL;
  v7 = (unsigned __int64)&base[8];
  if ( *(_BYTE *)(((unsigned __int64)&base[8] >> 3) + 0x7FFF8000) )
  {
LABEL_68:
    __asan_report_load8(v7);
    goto LABEL_69;
  }
  v7 = v31 + 184;
  if ( *(_BYTE *)(((v31 + 184) >> 3) + 0x7FFF8000) )
  {
LABEL_69:
    __asan_report_store8();
    goto LABEL_70;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 184) = base[8];
  v7 = (unsigned __int64)&base[9];
  if ( *(_BYTE *)(((unsigned __int64)&base[9] >> 3) + 0x7FFF8000) )
  {
LABEL_70:
    __asan_report_load8(v7);
LABEL_71:
    v9 = (__int64 (**)(void))__asan_report_load8(v7);
    goto LABEL_72;
  }
  v7 = (unsigned __int64)base[9].func_;
  if ( !v7 )
    goto LABEL_15;
  if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
    goto LABEL_71;
  v9 = *(__int64 (***)(void))v7;
  if ( *(_BYTE *)((*(_QWORD *)v7 >> 3) + 0x7FFF8000LL) )
  {
LABEL_72:
    v10 = __asan_report_load8(v9);
    goto LABEL_73;
  }
  v7 = (*v9)();
LABEL_15:
  v10 = v31 + 192;
  if ( *(_BYTE *)(((v31 + 192) >> 3) + 0x7FFF8000) )
  {
LABEL_73:
    v11 = (boost::asio::detail::executor_function_base *)v10;
    __asan_report_store8();
    goto LABEL_74;
  }
  *(_QWORD *)(v31 + 192) = v7;
  v11 = base + 10;
  if ( *(_BYTE *)(((unsigned __int64)&base[10] >> 3) + 0x7FFF8000) )
  {
LABEL_74:
    __asan_report_load8(v11);
    goto LABEL_75;
  }
  v11 = (boost::asio::detail::executor_function_base *)(v31 + 200);
  if ( *(_BYTE *)(((v31 + 200) >> 3) + 0x7FFF8000) )
  {
LABEL_75:
    __asan_report_store8();
    goto LABEL_76;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 200) = base[10];
  v11 = base + 11;
  if ( *(_BYTE *)(((unsigned __int64)&base[11] >> 3) + 0x7FFF8000) )
  {
LABEL_76:
    __asan_report_load8(v11);
    goto LABEL_77;
  }
  v11 = (boost::asio::detail::executor_function_base *)(v31 + 208);
  if ( *(_BYTE *)(((v31 + 208) >> 3) + 0x7FFF8000) )
  {
LABEL_77:
    __asan_report_store8();
    goto LABEL_78;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 208) = base[11];
  v11 = base + 12;
  if ( *(_BYTE *)(((unsigned __int64)&base[12] >> 3) + 0x7FFF8000) )
  {
LABEL_78:
    __asan_report_load8(v11);
    goto LABEL_79;
  }
  v11 = (boost::asio::detail::executor_function_base *)(v31 + 216);
  if ( *(_BYTE *)(((v31 + 216) >> 3) + 0x7FFF8000) )
  {
LABEL_79:
    __asan_report_store8();
    goto LABEL_80;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 216) = base[12];
  v11 = base + 13;
  if ( *(_BYTE *)(((unsigned __int64)&base[13] >> 3) + 0x7FFF8000) )
  {
LABEL_80:
    __asan_report_load8(v11);
    goto LABEL_81;
  }
  v11 = (boost::asio::detail::executor_function_base *)(v31 + 224);
  if ( *(_BYTE *)(((v31 + 224) >> 3) + 0x7FFF8000) )
  {
LABEL_81:
    __asan_report_store8();
    goto LABEL_82;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 224) = base[13];
  v11 = base + 14;
  if ( *(_BYTE *)(((unsigned __int64)&base[14] >> 3) + 0x7FFF8000) )
  {
LABEL_82:
    __asan_report_load8(v11);
    goto LABEL_83;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 232) = base[14];
  base[14].func_ = 0LL;
  v11 = base + 15;
  if ( *(char *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_83:
    __asan_report_load1(v11);
    goto LABEL_84;
  }
  *(_BYTE *)(v31 + 240) = base[15].func_;
  LOBYTE(base[15].func_) = 0;
  *(_QWORD *)(v31 + 160) = &`vtable for'boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v11 = base + 16;
  if ( *(_BYTE *)(((unsigned __int64)&base[16] >> 3) + 0x7FFF8000) )
  {
LABEL_84:
    __asan_report_load8(v11);
    goto LABEL_85;
  }
  v12 = base[16].func_;
  base[16].func_ = 0LL;
  *(_QWORD *)(v31 + 248) = v12;
  *(_QWORD *)(v31 + 160) = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v11 = base + 17;
  if ( *(_BYTE *)(((unsigned __int64)&base[17] >> 3) + 0x7FFF8000) )
  {
LABEL_85:
    __asan_report_load8(v11);
    goto LABEL_86;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 256) = base[17];
  v11 = base + 18;
  if ( *(_BYTE *)(((unsigned __int64)&base[18] >> 3) + 0x7FFF8000) )
  {
LABEL_86:
    __asan_report_load8(v11);
    goto LABEL_87;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 264) = base[18];
  v11 = base + 19;
  if ( *(_BYTE *)(((unsigned __int64)&base[19] >> 3) + 0x7FFF8000) )
  {
LABEL_87:
    __asan_report_load8(v11);
    goto LABEL_88;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 272) = base[19];
  base[19].func_ = 0LL;
  v11 = base + 20;
  if ( *(char *)(((unsigned __int64)&base[20] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_88:
    __asan_report_load1(v11);
LABEL_89:
    __asan_report_load4(v11);
    goto LABEL_90;
  }
  *(_BYTE *)(v31 + 280) = base[20].func_;
  LOBYTE(base[20].func_) = 0;
  v11 = base + 21;
  v13 = *(_BYTE *)(((unsigned __int64)&base[21] >> 3) + 0x7FFF8000);
  if ( v13 && v13 <= 3 )
    goto LABEL_89;
  *(_DWORD *)(v31 + 288) = base[21].func_;
  *(_QWORD *)(v31 + 152) = &`vtable for'boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v11 = base + 22;
  if ( *(_BYTE *)(((unsigned __int64)&base[22] >> 3) + 0x7FFF8000) )
  {
LABEL_90:
    __asan_report_load8(v11);
    goto LABEL_91;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 296) = base[22];
  v11 = base + 23;
  if ( *(_BYTE *)(((unsigned __int64)&base[23] >> 3) + 0x7FFF8000) )
  {
LABEL_91:
    __asan_report_load8(v11);
    goto LABEL_92;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 304) = base[23];
  v11 = base + 24;
  if ( *(_BYTE *)(((unsigned __int64)&base[24] >> 3) + 0x7FFF8000) )
  {
LABEL_92:
    __asan_report_load8(v11);
    goto LABEL_93;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 312) = base[24];
  v11 = base + 25;
  if ( *(_BYTE *)(((unsigned __int64)&base[25] >> 3) + 0x7FFF8000) )
  {
LABEL_93:
    __asan_report_load8(v11);
    goto LABEL_94;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 320) = base[25];
  base[25].func_ = 0LL;
  v11 = base + 26;
  if ( *(char *)(((unsigned __int64)&base[26] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_94:
    __asan_report_load1(v11);
    goto LABEL_95;
  }
  *(_BYTE *)(v31 + 328) = base[26].func_;
  LOBYTE(base[26].func_) = 0;
  *(_QWORD *)(v31 + 144) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v11 = base + 27;
  if ( *(_BYTE *)(((unsigned __int64)&base[27] >> 3) + 0x7FFF8000) )
  {
LABEL_95:
    __asan_report_load8(v11);
    goto LABEL_96;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 336) = base[27];
  v11 = base + 28;
  if ( *(_BYTE *)(((unsigned __int64)&base[28] >> 3) + 0x7FFF8000) )
  {
LABEL_96:
    __asan_report_load8(v11);
LABEL_97:
    v6 = 24LL;
    __asan_report_load_n(v11, 24LL);
    goto LABEL_98;
  }
  *(boost::asio::detail::executor_function_base *)(v31 + 344) = base[28];
  v11 = base + 29;
  v14 = *(_BYTE *)((((unsigned __int64)&base[31].func_ + 7) >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v14 <= (((unsigned __int8)base - 1) & 7);
  if ( ((v14 != 0) & (unsigned __int8)v6) != 0 || *(char *)(((unsigned __int64)&base[29] >> 3) + 0x7FFF8000) < 0 )
    goto LABEL_97;
  *(__m128i *)(v31 + 352) = _mm_loadu_si128((const __m128i *)&base[29]);
  *(boost::asio::detail::executor_function_base *)(v31 + 368) = base[31];
  v2 = *(_QWORD *)(v31 + 80);
  if ( !v2 )
    goto LABEL_45;
  v11 = (boost::asio::detail::executor_function_base *)(v2 + 24);
  if ( *(_BYTE *)(((v2 + 24) >> 3) + 0x7FFF8000) )
  {
LABEL_98:
    __asan_report_store8();
    goto LABEL_99;
  }
  *(_QWORD *)(v2 + 24) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                       + 2;
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v2 + 24));
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v2 + 8));
  *(_QWORD *)(v31 + 80) = 0LL;
LABEL_45:
  v2 = *(_QWORD *)(v31 + 72);
  if ( !v2 )
    goto LABEL_54;
  v15 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v15 )
  {
    v11 = (boost::asio::detail::executor_function_base *)(v15 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v15 + 8) >> 3) + 0x7FFF8000) )
    {
      v15 = *(_QWORD *)(v15 + 8);
      goto LABEL_49;
    }
LABEL_99:
    __asan_report_load8(v11);
    goto LABEL_100;
  }
LABEL_49:
  if ( v15 )
  {
    v11 = (boost::asio::detail::executor_function_base *)(v15 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v15 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v15 + 16) )
        goto LABEL_52;
LABEL_101:
      v19 = *(_BYTE *)(((v2 + 264) >> 3) + 0x7FFF8000);
      if ( v19 <= (char)((v2 + 8) & 7) && v19 )
      {
        __asan_report_load1(v2 + 264);
      }
      else
      {
        v20 = *(_BYTE *)((v2 >> 3) + 0x7FFF8000);
        v6 = v2 & 7;
        if ( v20 > (char)v6 || !v20 )
        {
          *(_BYTE *)v2 = *(_BYTE *)(v2 + 264);
          *(_QWORD *)(v15 + 16) = v2;
          goto LABEL_53;
        }
      }
      v16 = v2;
      __asan_report_store1(v2);
LABEL_108:
      v17 = (__int64 (**)(void))__asan_report_load8(v16);
      goto LABEL_109;
    }
LABEL_100:
    v15 = __asan_report_load8(v11);
    goto LABEL_101;
  }
LABEL_52:
  operator delete(*(void **)(v31 + 72));
LABEL_53:
  *(_QWORD *)(v31 + 72) = 0LL;
LABEL_54:
  if ( !call )
    goto LABEL_115;
  v16 = *(_QWORD *)(v31 + 128);
  if ( !v16 )
    goto LABEL_59;
  if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
    goto LABEL_108;
  v17 = *(__int64 (***)(void))v16;
  if ( !*(_BYTE *)((*(_QWORD *)v16 >> 3) + 0x7FFF8000LL) )
  {
    v16 = (*v17)();
LABEL_59:
    v34.impl_ = (boost::asio::executor::impl_base *)v16;
    v6 = v31 + 144;
    boost::asio::executor::dispatch<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::system::error_code,int>,std::allocator<void>>(
      &v34,
      (boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::system::error_code,int> *)(v31 + 144),
      (const std::allocator<void> *)(v31 + 48));
    goto LABEL_110;
  }
LABEL_109:
  __asan_report_load8(v17);
LABEL_110:
  if ( v34.impl_ )
  {
    if ( *(_BYTE *)(((unsigned __int64)v34.impl_ >> 3) + 0x7FFF8000) )
    {
      __asan_report_load8(v34.impl_);
    }
    else
    {
      v21 = (unsigned __int64)(v34.impl_->_vptr_impl_base + 1);
      if ( !*(_BYTE *)((v21 >> 3) + 0x7FFF8000) )
      {
        (*((void (**)(void))v34.impl_->_vptr_impl_base + 1))();
        goto LABEL_114;
      }
    }
    v25 = (struct _Unwind_Exception *)__asan_report_load8(v21);
    impl = v34.impl_;
    if ( v34.impl_ )
    {
      if ( *(_BYTE *)(((unsigned __int64)v34.impl_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(v34.impl_);
      vptr_impl_base = (__int64)impl->_vptr_impl_base;
      if ( *(_BYTE *)(((unsigned __int64)(impl->_vptr_impl_base + 1) >> 3) + 0x7FFF8000) )
        vptr_impl_base = __asan_report_load8(impl->_vptr_impl_base + 1);
      (*(void (**)(void))(vptr_impl_base + 8))();
    }
    *(_QWORD *)(v31 + 144) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                           + 2;
    boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v31 + 144));
    boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v31 + 128));
    boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::system::error_code,int>>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::system::error_code,int> >,std::allocator<void> >::ptr *const)(v31 + 64));
    __asan_handle_no_return(v31 + 64);
    _Unwind_Resume(v25);
  }
LABEL_114:
  boost::asio::executor_work_guard<boost::asio::executor>::reset((boost::asio::executor_work_guard<boost::asio::executor> *const)(v31 + 128));
LABEL_115:
  *(_QWORD *)(v31 + 144) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v31 + 144));
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v31 + 128));
  v22 = *(_QWORD *)(v31 + 80);
  if ( v22 )
  {
    v23 = v22 + 24;
    if ( *(_BYTE *)(((unsigned __int64)(v22 + 24) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store8();
      goto LABEL_137;
    }
    *(_QWORD *)(v22 + 24) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                          + 2;
    boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v22 + 24));
    boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v22 + 8));
    *(_QWORD *)(v31 + 80) = 0LL;
  }
  v4 = *(_QWORD *)(v31 + 72);
  if ( !v4 )
    goto LABEL_126;
  v24 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v24 )
  {
    v23 = v24 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v24 + 8) >> 3) + 0x7FFF8000) )
    {
      v24 = *(_QWORD *)(v24 + 8);
      goto LABEL_122;
    }
LABEL_137:
    __asan_report_load8(v23);
LABEL_138:
    v24 = __asan_report_load8(v23);
    goto LABEL_139;
  }
LABEL_122:
  if ( !v24 )
  {
LABEL_125:
    operator delete((void *)v4);
    goto LABEL_126;
  }
  v23 = v24 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v24 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_138;
  if ( *(_QWORD *)(v24 + 16) )
    goto LABEL_125;
LABEL_139:
  v28 = *(_BYTE *)(((v4 + 264) >> 3) + 0x7FFF8000);
  if ( v28 <= (char)((v4 + 8) & 7) && v28 )
  {
    __asan_report_load1(v4 + 264);
LABEL_145:
    __asan_report_store1(v4);
    goto LABEL_146;
  }
  v29 = *(_BYTE *)((v4 >> 3) + 0x7FFF8000);
  v6 = v4 & 7;
  if ( v29 <= (char)v6 && v29 )
    goto LABEL_145;
  *(_BYTE *)v4 = *(_BYTE *)(v4 + 264);
  *(_QWORD *)(v24 + 16) = v4;
LABEL_126:
  v6 = v31;
  if ( v35 == (char *)v31 )
  {
    *(_QWORD *)((v31 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v31 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v31 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v31 >> 3) + 0x7FFF8034) = 0;
    return;
  }
LABEL_146:
  *(_QWORD *)v6 = 1172321806LL;
  *(_QWORD *)((v31 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v31 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v31 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v31 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v31 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v31 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v31 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
};

// Line 72: range 0000000019C3654C-0000000019C36F7A
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v2; // rbp
  unsigned __int64 v4; // rbx
  _DWORD *v5; // r15
  boost::asio::detail::executor_function_base *v6; // rdi
  unsigned __int64 v7; // rdi
  boost::asio::detail::executor_function_base::func_type func; // rax
  __int64 (**v9)(void); // rax
  boost::asio::detail::executor_function_base *v10; // rdi
  boost::asio::detail::executor_function_base::func_type v11; // rax
  char v12; // al
  boost::asio::detail::executor_function_base *v13; // rdi
  __int64 v14; // rax
  unsigned __int64 v15; // rdi
  __int64 (**v16)(void); // rax
  __int64 v17; // rax
  char v18; // dl
  char v19; // dl
  unsigned __int64 v20; // rdx
  __int64 v21; // rdi
  __int64 v22; // rbp
  unsigned __int64 v23; // rdi
  __int64 v24; // rax
  struct _Unwind_Exception *v25; // rbp
  boost::asio::executor::impl_base *impl; // rdi
  __int64 vptr_impl_base; // rax
  char v28; // dl
  char v29; // dl
  unsigned __int64 v30; // [rsp+8h] [rbp-1E0h]
  bool v31; // [rsp+1Ch] [rbp-1CCh]
  boost::asio::executor v32; // [rsp+28h] [rbp-1C0h] BYREF
  char v33[440]; // [rsp+30h] [rbp-1B8h] BYREF

  v31 = call;
  v30 = (unsigned __int64)v33;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v17 = __asan_stack_malloc_3(384LL);
    if ( v17 )
      v30 = v17;
  }
  v4 = v30 + 384;
  *(_QWORD *)v30 = 1102416563LL;
  *(_QWORD *)(v30 + 8) = "4 32 1 12 allocator:76 48 1 5 alloc 64 24 4 p:77 128 184 11 function:85";
  *(_QWORD *)(v30 + 16) = boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,std::allocator<void>>::do_complete;
  v5 = (_DWORD *)(v30 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753535;
  v5[536862722] = -234881024;
  v5[536862723] = -218959118;
  v5[536862729] = -218103808;
  v5[536862730] = -202116109;
  v5[536862731] = -202116109;
  *(_QWORD *)(v30 + 64) = v30 + 32;
  *(_QWORD *)(v30 + 72) = base;
  *(_QWORD *)(v30 + 80) = base;
  v6 = base + 1;
  if ( *(_BYTE *)(((unsigned __int64)&base[1] >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(v6);
    goto LABEL_50;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 128) = base[1];
  base[1].func_ = 0LL;
  v6 = base + 2;
  if ( *(char *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_50:
    __asan_report_load1(v6);
    goto LABEL_51;
  }
  *(_BYTE *)(v30 + 136) = base[2].func_;
  LOBYTE(base[2].func_) = 0;
  *(_QWORD *)(v30 + 144) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v30 + 152) = &`vtable for'boost::beast::async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v2 = (unsigned __int64)&base[5];
  if ( *(_BYTE *)(((unsigned __int64)&base[5] >> 3) + 0x7FFF8000) )
  {
LABEL_51:
    v7 = v2;
    __asan_report_load8(v2);
    goto LABEL_52;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 160) = base[5];
  *(_QWORD *)(v30 + 168) = 0LL;
  v7 = (unsigned __int64)&base[6];
  if ( *(_BYTE *)(((unsigned __int64)&base[6] >> 3) + 0x7FFF8000) )
  {
LABEL_52:
    __asan_report_load8(v7);
    goto LABEL_53;
  }
  func = base[6].func_;
  base[6].func_ = 0LL;
  *(_QWORD *)(v30 + 168) = func;
  base[5].func_ = 0LL;
  v7 = (unsigned __int64)&base[7];
  if ( *(_BYTE *)(((unsigned __int64)&base[7] >> 3) + 0x7FFF8000) )
  {
LABEL_53:
    __asan_report_load8(v7);
    goto LABEL_54;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 176) = base[7];
  v7 = (unsigned __int64)&base[8];
  if ( *(_BYTE *)(((unsigned __int64)&base[8] >> 3) + 0x7FFF8000) )
  {
LABEL_54:
    __asan_report_load8(v7);
LABEL_55:
    v9 = (__int64 (**)(void))__asan_report_load8(v7);
    goto LABEL_56;
  }
  v7 = (unsigned __int64)base[8].func_;
  if ( !v7 )
    goto LABEL_12;
  if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
    goto LABEL_55;
  v9 = *(__int64 (***)(void))v7;
  if ( *(_BYTE *)((*(_QWORD *)v7 >> 3) + 0x7FFF8000LL) )
  {
LABEL_56:
    v10 = (boost::asio::detail::executor_function_base *)v9;
    __asan_report_load8(v9);
    goto LABEL_57;
  }
  v7 = (*v9)();
LABEL_12:
  *(_QWORD *)(v30 + 184) = v7;
  v10 = base + 9;
  if ( *(_BYTE *)(((unsigned __int64)&base[9] >> 3) + 0x7FFF8000) )
  {
LABEL_57:
    __asan_report_load8(v10);
    goto LABEL_58;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 192) = base[9];
  v10 = base + 10;
  if ( *(_BYTE *)(((unsigned __int64)&base[10] >> 3) + 0x7FFF8000) )
  {
LABEL_58:
    __asan_report_load8(v10);
    goto LABEL_59;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 200) = base[10];
  v10 = base + 11;
  if ( *(_BYTE *)(((unsigned __int64)&base[11] >> 3) + 0x7FFF8000) )
  {
LABEL_59:
    __asan_report_load8(v10);
    goto LABEL_60;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 208) = base[11];
  v10 = base + 12;
  if ( *(_BYTE *)(((unsigned __int64)&base[12] >> 3) + 0x7FFF8000) )
  {
LABEL_60:
    __asan_report_load8(v10);
    goto LABEL_61;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 216) = base[12];
  v10 = base + 13;
  if ( *(_BYTE *)(((unsigned __int64)&base[13] >> 3) + 0x7FFF8000) )
  {
LABEL_61:
    __asan_report_load8(v10);
    goto LABEL_62;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 224) = base[13];
  base[13].func_ = 0LL;
  v10 = base + 14;
  if ( *(char *)(((unsigned __int64)&base[14] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_62:
    __asan_report_load1(v10);
    goto LABEL_63;
  }
  *(_BYTE *)(v30 + 232) = base[14].func_;
  LOBYTE(base[14].func_) = 0;
  *(_QWORD *)(v30 + 152) = &`vtable for'boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v10 = base + 15;
  if ( *(_BYTE *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000) )
  {
LABEL_63:
    __asan_report_load8(v10);
    goto LABEL_64;
  }
  v11 = base[15].func_;
  base[15].func_ = 0LL;
  *(_QWORD *)(v30 + 240) = v11;
  *(_QWORD *)(v30 + 152) = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v10 = base + 16;
  if ( *(_BYTE *)(((unsigned __int64)&base[16] >> 3) + 0x7FFF8000) )
  {
LABEL_64:
    __asan_report_load8(v10);
    goto LABEL_65;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 248) = base[16];
  v10 = base + 17;
  if ( *(_BYTE *)(((unsigned __int64)&base[17] >> 3) + 0x7FFF8000) )
  {
LABEL_65:
    __asan_report_load8(v10);
    goto LABEL_66;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 256) = base[17];
  v10 = base + 18;
  if ( *(_BYTE *)(((unsigned __int64)&base[18] >> 3) + 0x7FFF8000) )
  {
LABEL_66:
    __asan_report_load8(v10);
    goto LABEL_67;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 264) = base[18];
  base[18].func_ = 0LL;
  v10 = base + 19;
  if ( *(char *)(((unsigned __int64)&base[19] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_67:
    __asan_report_load1(v10);
LABEL_68:
    __asan_report_load4(v10);
    goto LABEL_69;
  }
  *(_BYTE *)(v30 + 272) = base[19].func_;
  LOBYTE(base[19].func_) = 0;
  v10 = base + 20;
  v12 = *(_BYTE *)(((unsigned __int64)&base[20] >> 3) + 0x7FFF8000);
  if ( v12 && v12 <= 3 )
    goto LABEL_68;
  *(_DWORD *)(v30 + 280) = base[20].func_;
  *(_QWORD *)(v30 + 144) = &`vtable for'boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v10 = base + 21;
  if ( *(_BYTE *)(((unsigned __int64)&base[21] >> 3) + 0x7FFF8000) )
  {
LABEL_69:
    __asan_report_load8(v10);
    goto LABEL_70;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 288) = base[21];
  v10 = base + 22;
  if ( *(_BYTE *)(((unsigned __int64)&base[22] >> 3) + 0x7FFF8000) )
  {
LABEL_70:
    __asan_report_load8(v10);
    goto LABEL_71;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 296) = base[22];
  v10 = base + 23;
  if ( *(_BYTE *)(((unsigned __int64)&base[23] >> 3) + 0x7FFF8000) )
  {
LABEL_71:
    __asan_report_load8(v10);
LABEL_72:
    __asan_report_store8();
    goto LABEL_73;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 304) = base[23];
  v13 = *(boost::asio::detail::executor_function_base **)(v30 + 80);
  if ( !v13 )
    goto LABEL_32;
  v2 = (unsigned __int64)&v13[1];
  v10 = v13 + 3;
  if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
    goto LABEL_72;
  *(_QWORD *)(v2 + 16) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                       + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v2 + 136));
  v10 = (boost::asio::detail::executor_function_base *)(v2 + 24);
  if ( *(_BYTE *)(((v2 + 24) >> 3) + 0x7FFF8000) )
  {
LABEL_73:
    __asan_report_store8();
    goto LABEL_74;
  }
  *(_QWORD *)(v2 + 24) = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                       + 2;
  boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(v2 + 24));
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)v2);
  *(_QWORD *)(v30 + 80) = 0LL;
LABEL_32:
  v2 = *(_QWORD *)(v30 + 72);
  if ( !v2 )
    goto LABEL_41;
  v14 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v14 )
  {
    v10 = (boost::asio::detail::executor_function_base *)(v14 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v14 + 8) >> 3) + 0x7FFF8000) )
    {
      v14 = *(_QWORD *)(v14 + 8);
      goto LABEL_36;
    }
LABEL_74:
    __asan_report_load8(v10);
    goto LABEL_75;
  }
LABEL_36:
  if ( v14 )
  {
    v10 = (boost::asio::detail::executor_function_base *)(v14 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v14 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v14 + 16) )
        goto LABEL_39;
LABEL_76:
      v18 = *(_BYTE *)(((v2 + 200) >> 3) + 0x7FFF8000);
      if ( v18 <= (char)((v2 - 56) & 7) && v18 )
      {
        __asan_report_load1(v2 + 200);
      }
      else
      {
        v19 = *(_BYTE *)((v2 >> 3) + 0x7FFF8000);
        *(_QWORD *)&call = v2 & 7;
        if ( v19 > call || !v19 )
        {
          *(_BYTE *)v2 = *(_BYTE *)(v2 + 200);
          *(_QWORD *)(v14 + 16) = v2;
          goto LABEL_40;
        }
      }
      v15 = v2;
      __asan_report_store1(v2);
LABEL_83:
      v16 = (__int64 (**)(void))__asan_report_load8(v15);
      goto LABEL_84;
    }
LABEL_75:
    v14 = __asan_report_load8(v10);
    goto LABEL_76;
  }
LABEL_39:
  operator delete(*(void **)(v30 + 72));
LABEL_40:
  *(_QWORD *)(v30 + 72) = 0LL;
LABEL_41:
  if ( !v31 )
    goto LABEL_90;
  v15 = *(_QWORD *)(v30 + 128);
  if ( !v15 )
    goto LABEL_46;
  if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
    goto LABEL_83;
  v16 = *(__int64 (***)(void))v15;
  if ( !*(_BYTE *)((*(_QWORD *)v15 >> 3) + 0x7FFF8000LL) )
  {
    v15 = (*v16)();
LABEL_46:
    v32.impl_ = (boost::asio::executor::impl_base *)v15;
    *(_QWORD *)&call = v30 + 144;
    boost::asio::executor::dispatch<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,std::allocator<void>>(
      &v32,
      (boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > *)(v30 + 144),
      (const std::allocator<void> *)(v30 + 48));
    goto LABEL_85;
  }
LABEL_84:
  __asan_report_load8(v16);
LABEL_85:
  if ( v32.impl_ )
  {
    if ( *(_BYTE *)(((unsigned __int64)v32.impl_ >> 3) + 0x7FFF8000) )
    {
      __asan_report_load8(v32.impl_);
    }
    else
    {
      v20 = (unsigned __int64)(v32.impl_->_vptr_impl_base + 1);
      if ( !*(_BYTE *)((v20 >> 3) + 0x7FFF8000) )
      {
        (*((void (**)(void))v32.impl_->_vptr_impl_base + 1))();
        goto LABEL_89;
      }
    }
    v25 = (struct _Unwind_Exception *)__asan_report_load8(v20);
    impl = v32.impl_;
    if ( v32.impl_ )
    {
      if ( *(_BYTE *)(((unsigned __int64)v32.impl_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(v32.impl_);
      vptr_impl_base = (__int64)impl->_vptr_impl_base;
      if ( *(_BYTE *)(((unsigned __int64)(impl->_vptr_impl_base + 1) >> 3) + 0x7FFF8000) )
        vptr_impl_base = __asan_report_load8(impl->_vptr_impl_base + 1);
      (*(void (**)(void))(vptr_impl_base + 8))();
    }
    boost::asio::detail::work_dispatcher<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~work_dispatcher((boost::asio::detail::work_dispatcher<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v30 + 128));
    boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > >,std::allocator<void> >::ptr *const)(v30 + 64));
    __asan_handle_no_return(v30 + 64);
    _Unwind_Resume(v25);
  }
LABEL_89:
  boost::asio::executor_work_guard<boost::asio::executor>::reset((boost::asio::executor_work_guard<boost::asio::executor> *const)(v30 + 128));
LABEL_90:
  *(_QWORD *)(v30 + 144) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v30 + 264));
  *(_QWORD *)(v30 + 152) = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(v30 + 152));
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v30 + 128));
  v21 = *(_QWORD *)(v30 + 80);
  if ( !v21 )
    goto LABEL_94;
  v22 = v21 + 8;
  v23 = v21 + 24;
  if ( *(_BYTE *)((v23 >> 3) + 0x7FFF8000) )
  {
    __asan_report_store8();
    goto LABEL_113;
  }
  *(_QWORD *)(v22 + 16) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v22 + 136));
  v23 = v22 + 24;
  if ( *(_BYTE *)(((unsigned __int64)(v22 + 24) >> 3) + 0x7FFF8000) )
  {
LABEL_113:
    __asan_report_store8();
    goto LABEL_114;
  }
  *(_QWORD *)(v22 + 24) = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                        + 2;
  boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(v22 + 24));
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)v22);
  *(_QWORD *)(v30 + 80) = 0LL;
LABEL_94:
  v4 = *(_QWORD *)(v30 + 72);
  if ( !v4 )
    goto LABEL_102;
  v24 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v24 )
  {
    v23 = v24 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v24 + 8) >> 3) + 0x7FFF8000) )
    {
      v24 = *(_QWORD *)(v24 + 8);
      goto LABEL_98;
    }
LABEL_114:
    __asan_report_load8(v23);
LABEL_115:
    v24 = __asan_report_load8(v23);
    goto LABEL_116;
  }
LABEL_98:
  if ( !v24 )
  {
LABEL_101:
    operator delete((void *)v4);
    goto LABEL_102;
  }
  v23 = v24 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v24 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_115;
  if ( *(_QWORD *)(v24 + 16) )
    goto LABEL_101;
LABEL_116:
  v28 = *(_BYTE *)(((v4 + 200) >> 3) + 0x7FFF8000);
  if ( v28 <= (char)((v4 - 56) & 7) && v28 )
  {
    __asan_report_load1(v4 + 200);
LABEL_122:
    __asan_report_store1(v4);
    goto LABEL_123;
  }
  v29 = *(_BYTE *)((v4 >> 3) + 0x7FFF8000);
  *(_QWORD *)&call = v4 & 7;
  if ( v29 <= call && v29 )
    goto LABEL_122;
  *(_BYTE *)v4 = *(_BYTE *)(v4 + 200);
  *(_QWORD *)(v24 + 16) = v4;
LABEL_102:
  *(_QWORD *)&call = v30;
  if ( v33 == (char *)v30 )
  {
    *(_QWORD *)((v30 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v30 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v30 >> 3) + 0x7FFF8024) = 0LL;
    *(_DWORD *)((v30 >> 3) + 0x7FFF802C) = 0;
    return;
  }
LABEL_123:
  *(_QWORD *)call = 1172321806LL;
  *(_QWORD *)((v30 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v30 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v30 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v30 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v30 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v30 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
};

// Line 72: range 0000000019C86636-0000000019C87064
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v2; // rbp
  unsigned __int64 v4; // rbx
  _DWORD *v5; // r15
  boost::asio::detail::executor_function_base *v6; // rdi
  unsigned __int64 v7; // rdi
  boost::asio::detail::executor_function_base::func_type func; // rax
  __int64 (**v9)(void); // rax
  boost::asio::detail::executor_function_base *v10; // rdi
  boost::asio::detail::executor_function_base::func_type v11; // rax
  char v12; // al
  boost::asio::detail::executor_function_base *v13; // rdi
  __int64 v14; // rax
  unsigned __int64 v15; // rdi
  __int64 (**v16)(void); // rax
  __int64 v17; // rax
  char v18; // dl
  char v19; // dl
  unsigned __int64 v20; // rdx
  __int64 v21; // rdi
  __int64 v22; // rbp
  unsigned __int64 v23; // rdi
  __int64 v24; // rax
  struct _Unwind_Exception *v25; // rbp
  boost::asio::executor::impl_base *impl; // rdi
  __int64 vptr_impl_base; // rax
  char v28; // dl
  char v29; // dl
  unsigned __int64 v30; // [rsp+8h] [rbp-1E0h]
  bool v31; // [rsp+1Ch] [rbp-1CCh]
  boost::asio::executor v32; // [rsp+28h] [rbp-1C0h] BYREF
  char v33[440]; // [rsp+30h] [rbp-1B8h] BYREF

  v31 = call;
  v30 = (unsigned __int64)v33;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v17 = __asan_stack_malloc_3(384LL);
    if ( v17 )
      v30 = v17;
  }
  v4 = v30 + 384;
  *(_QWORD *)v30 = 1102416563LL;
  *(_QWORD *)(v30 + 8) = "4 32 1 12 allocator:76 48 1 5 alloc 64 24 4 p:77 128 184 11 function:85";
  *(_QWORD *)(v30 + 16) = boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,std::allocator<void>>::do_complete;
  v5 = (_DWORD *)(v30 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753535;
  v5[536862722] = -234881024;
  v5[536862723] = -218959118;
  v5[536862729] = -218103808;
  v5[536862730] = -202116109;
  v5[536862731] = -202116109;
  *(_QWORD *)(v30 + 64) = v30 + 32;
  *(_QWORD *)(v30 + 72) = base;
  *(_QWORD *)(v30 + 80) = base;
  v6 = base + 1;
  if ( *(_BYTE *)(((unsigned __int64)&base[1] >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(v6);
    goto LABEL_50;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 128) = base[1];
  base[1].func_ = 0LL;
  v6 = base + 2;
  if ( *(char *)(((unsigned __int64)&base[2] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_50:
    __asan_report_load1(v6);
    goto LABEL_51;
  }
  *(_BYTE *)(v30 + 136) = base[2].func_;
  LOBYTE(base[2].func_) = 0;
  *(_QWORD *)(v30 + 144) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v30 + 152) = &`vtable for'boost::beast::async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v2 = (unsigned __int64)&base[5];
  if ( *(_BYTE *)(((unsigned __int64)&base[5] >> 3) + 0x7FFF8000) )
  {
LABEL_51:
    v7 = v2;
    __asan_report_load8(v2);
    goto LABEL_52;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 160) = base[5];
  *(_QWORD *)(v30 + 168) = 0LL;
  v7 = (unsigned __int64)&base[6];
  if ( *(_BYTE *)(((unsigned __int64)&base[6] >> 3) + 0x7FFF8000) )
  {
LABEL_52:
    __asan_report_load8(v7);
    goto LABEL_53;
  }
  func = base[6].func_;
  base[6].func_ = 0LL;
  *(_QWORD *)(v30 + 168) = func;
  base[5].func_ = 0LL;
  v7 = (unsigned __int64)&base[7];
  if ( *(_BYTE *)(((unsigned __int64)&base[7] >> 3) + 0x7FFF8000) )
  {
LABEL_53:
    __asan_report_load8(v7);
    goto LABEL_54;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 176) = base[7];
  v7 = (unsigned __int64)&base[8];
  if ( *(_BYTE *)(((unsigned __int64)&base[8] >> 3) + 0x7FFF8000) )
  {
LABEL_54:
    __asan_report_load8(v7);
LABEL_55:
    v9 = (__int64 (**)(void))__asan_report_load8(v7);
    goto LABEL_56;
  }
  v7 = (unsigned __int64)base[8].func_;
  if ( !v7 )
    goto LABEL_12;
  if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
    goto LABEL_55;
  v9 = *(__int64 (***)(void))v7;
  if ( *(_BYTE *)((*(_QWORD *)v7 >> 3) + 0x7FFF8000LL) )
  {
LABEL_56:
    v10 = (boost::asio::detail::executor_function_base *)v9;
    __asan_report_load8(v9);
    goto LABEL_57;
  }
  v7 = (*v9)();
LABEL_12:
  *(_QWORD *)(v30 + 184) = v7;
  v10 = base + 9;
  if ( *(_BYTE *)(((unsigned __int64)&base[9] >> 3) + 0x7FFF8000) )
  {
LABEL_57:
    __asan_report_load8(v10);
    goto LABEL_58;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 192) = base[9];
  v10 = base + 10;
  if ( *(_BYTE *)(((unsigned __int64)&base[10] >> 3) + 0x7FFF8000) )
  {
LABEL_58:
    __asan_report_load8(v10);
    goto LABEL_59;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 200) = base[10];
  v10 = base + 11;
  if ( *(_BYTE *)(((unsigned __int64)&base[11] >> 3) + 0x7FFF8000) )
  {
LABEL_59:
    __asan_report_load8(v10);
    goto LABEL_60;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 208) = base[11];
  v10 = base + 12;
  if ( *(_BYTE *)(((unsigned __int64)&base[12] >> 3) + 0x7FFF8000) )
  {
LABEL_60:
    __asan_report_load8(v10);
    goto LABEL_61;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 216) = base[12];
  v10 = base + 13;
  if ( *(_BYTE *)(((unsigned __int64)&base[13] >> 3) + 0x7FFF8000) )
  {
LABEL_61:
    __asan_report_load8(v10);
    goto LABEL_62;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 224) = base[13];
  base[13].func_ = 0LL;
  v10 = base + 14;
  if ( *(char *)(((unsigned __int64)&base[14] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_62:
    __asan_report_load1(v10);
    goto LABEL_63;
  }
  *(_BYTE *)(v30 + 232) = base[14].func_;
  LOBYTE(base[14].func_) = 0;
  *(_QWORD *)(v30 + 152) = &`vtable for'boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v10 = base + 15;
  if ( *(_BYTE *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000) )
  {
LABEL_63:
    __asan_report_load8(v10);
    goto LABEL_64;
  }
  v11 = base[15].func_;
  base[15].func_ = 0LL;
  *(_QWORD *)(v30 + 240) = v11;
  *(_QWORD *)(v30 + 152) = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v10 = base + 16;
  if ( *(_BYTE *)(((unsigned __int64)&base[16] >> 3) + 0x7FFF8000) )
  {
LABEL_64:
    __asan_report_load8(v10);
    goto LABEL_65;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 248) = base[16];
  v10 = base + 17;
  if ( *(_BYTE *)(((unsigned __int64)&base[17] >> 3) + 0x7FFF8000) )
  {
LABEL_65:
    __asan_report_load8(v10);
    goto LABEL_66;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 256) = base[17];
  v10 = base + 18;
  if ( *(_BYTE *)(((unsigned __int64)&base[18] >> 3) + 0x7FFF8000) )
  {
LABEL_66:
    __asan_report_load8(v10);
    goto LABEL_67;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 264) = base[18];
  base[18].func_ = 0LL;
  v10 = base + 19;
  if ( *(char *)(((unsigned __int64)&base[19] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_67:
    __asan_report_load1(v10);
LABEL_68:
    __asan_report_load4(v10);
    goto LABEL_69;
  }
  *(_BYTE *)(v30 + 272) = base[19].func_;
  LOBYTE(base[19].func_) = 0;
  v10 = base + 20;
  v12 = *(_BYTE *)(((unsigned __int64)&base[20] >> 3) + 0x7FFF8000);
  if ( v12 && v12 <= 3 )
    goto LABEL_68;
  *(_DWORD *)(v30 + 280) = base[20].func_;
  *(_QWORD *)(v30 + 144) = &`vtable for'boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v10 = base + 21;
  if ( *(_BYTE *)(((unsigned __int64)&base[21] >> 3) + 0x7FFF8000) )
  {
LABEL_69:
    __asan_report_load8(v10);
    goto LABEL_70;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 288) = base[21];
  v10 = base + 22;
  if ( *(_BYTE *)(((unsigned __int64)&base[22] >> 3) + 0x7FFF8000) )
  {
LABEL_70:
    __asan_report_load8(v10);
    goto LABEL_71;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 296) = base[22];
  v10 = base + 23;
  if ( *(_BYTE *)(((unsigned __int64)&base[23] >> 3) + 0x7FFF8000) )
  {
LABEL_71:
    __asan_report_load8(v10);
LABEL_72:
    __asan_report_store8();
    goto LABEL_73;
  }
  *(boost::asio::detail::executor_function_base *)(v30 + 304) = base[23];
  v13 = *(boost::asio::detail::executor_function_base **)(v30 + 80);
  if ( !v13 )
    goto LABEL_32;
  v2 = (unsigned __int64)&v13[1];
  v10 = v13 + 3;
  if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
    goto LABEL_72;
  *(_QWORD *)(v2 + 16) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                       + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v2 + 136));
  v10 = (boost::asio::detail::executor_function_base *)(v2 + 24);
  if ( *(_BYTE *)(((v2 + 24) >> 3) + 0x7FFF8000) )
  {
LABEL_73:
    __asan_report_store8();
    goto LABEL_74;
  }
  *(_QWORD *)(v2 + 24) = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                       + 2;
  boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(v2 + 24));
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)v2);
  *(_QWORD *)(v30 + 80) = 0LL;
LABEL_32:
  v2 = *(_QWORD *)(v30 + 72);
  if ( !v2 )
    goto LABEL_41;
  v14 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v14 )
  {
    v10 = (boost::asio::detail::executor_function_base *)(v14 + 8);
    if ( !*(_BYTE *)(((unsigned __int64)(v14 + 8) >> 3) + 0x7FFF8000) )
    {
      v14 = *(_QWORD *)(v14 + 8);
      goto LABEL_36;
    }
LABEL_74:
    __asan_report_load8(v10);
    goto LABEL_75;
  }
LABEL_36:
  if ( v14 )
  {
    v10 = (boost::asio::detail::executor_function_base *)(v14 + 16);
    if ( !*(_BYTE *)(((unsigned __int64)(v14 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v14 + 16) )
        goto LABEL_39;
LABEL_76:
      v18 = *(_BYTE *)(((v2 + 200) >> 3) + 0x7FFF8000);
      if ( v18 <= (char)((v2 - 56) & 7) && v18 )
      {
        __asan_report_load1(v2 + 200);
      }
      else
      {
        v19 = *(_BYTE *)((v2 >> 3) + 0x7FFF8000);
        *(_QWORD *)&call = v2 & 7;
        if ( v19 > call || !v19 )
        {
          *(_BYTE *)v2 = *(_BYTE *)(v2 + 200);
          *(_QWORD *)(v14 + 16) = v2;
          goto LABEL_40;
        }
      }
      v15 = v2;
      __asan_report_store1(v2);
LABEL_83:
      v16 = (__int64 (**)(void))__asan_report_load8(v15);
      goto LABEL_84;
    }
LABEL_75:
    v14 = __asan_report_load8(v10);
    goto LABEL_76;
  }
LABEL_39:
  operator delete(*(void **)(v30 + 72));
LABEL_40:
  *(_QWORD *)(v30 + 72) = 0LL;
LABEL_41:
  if ( !v31 )
    goto LABEL_90;
  v15 = *(_QWORD *)(v30 + 128);
  if ( !v15 )
    goto LABEL_46;
  if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
    goto LABEL_83;
  v16 = *(__int64 (***)(void))v15;
  if ( !*(_BYTE *)((*(_QWORD *)v15 >> 3) + 0x7FFF8000LL) )
  {
    v15 = (*v16)();
LABEL_46:
    v32.impl_ = (boost::asio::executor::impl_base *)v15;
    *(_QWORD *)&call = v30 + 144;
    boost::asio::executor::dispatch<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,std::allocator<void>>(
      &v32,
      (boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > *)(v30 + 144),
      (const std::allocator<void> *)(v30 + 48));
    goto LABEL_85;
  }
LABEL_84:
  __asan_report_load8(v16);
LABEL_85:
  if ( v32.impl_ )
  {
    if ( *(_BYTE *)(((unsigned __int64)v32.impl_ >> 3) + 0x7FFF8000) )
    {
      __asan_report_load8(v32.impl_);
    }
    else
    {
      v20 = (unsigned __int64)(v32.impl_->_vptr_impl_base + 1);
      if ( !*(_BYTE *)((v20 >> 3) + 0x7FFF8000) )
      {
        (*((void (**)(void))v32.impl_->_vptr_impl_base + 1))();
        goto LABEL_89;
      }
    }
    v25 = (struct _Unwind_Exception *)__asan_report_load8(v20);
    impl = v32.impl_;
    if ( v32.impl_ )
    {
      if ( *(_BYTE *)(((unsigned __int64)v32.impl_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(v32.impl_);
      vptr_impl_base = (__int64)impl->_vptr_impl_base;
      if ( *(_BYTE *)(((unsigned __int64)(impl->_vptr_impl_base + 1) >> 3) + 0x7FFF8000) )
        vptr_impl_base = __asan_report_load8(impl->_vptr_impl_base + 1);
      (*(void (**)(void))(vptr_impl_base + 8))();
    }
    boost::asio::detail::work_dispatcher<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>::~work_dispatcher((boost::asio::detail::work_dispatcher<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > > *const)(v30 + 128));
    boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::asio::detail::work_dispatcher<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > >,std::allocator<void> >::ptr *const)(v30 + 64));
    __asan_handle_no_return(v30 + 64);
    _Unwind_Resume(v25);
  }
LABEL_89:
  boost::asio::executor_work_guard<boost::asio::executor>::reset((boost::asio::executor_work_guard<boost::asio::executor> *const)(v30 + 128));
LABEL_90:
  *(_QWORD *)(v30 + 144) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v30 + 264));
  *(_QWORD *)(v30 + 152) = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(v30 + 152));
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v30 + 128));
  v21 = *(_QWORD *)(v30 + 80);
  if ( !v21 )
    goto LABEL_94;
  v22 = v21 + 8;
  v23 = v21 + 24;
  if ( *(_BYTE *)((v23 >> 3) + 0x7FFF8000) )
  {
    __asan_report_store8();
    goto LABEL_113;
  }
  *(_QWORD *)(v22 + 16) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v22 + 136));
  v23 = v22 + 24;
  if ( *(_BYTE *)(((unsigned __int64)(v22 + 24) >> 3) + 0x7FFF8000) )
  {
LABEL_113:
    __asan_report_store8();
    goto LABEL_114;
  }
  *(_QWORD *)(v22 + 24) = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                        + 2;
  boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(v22 + 24));
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)v22);
  *(_QWORD *)(v30 + 80) = 0LL;
LABEL_94:
  v4 = *(_QWORD *)(v30 + 72);
  if ( !v4 )
    goto LABEL_102;
  v24 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v24 )
  {
    v23 = v24 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v24 + 8) >> 3) + 0x7FFF8000) )
    {
      v24 = *(_QWORD *)(v24 + 8);
      goto LABEL_98;
    }
LABEL_114:
    __asan_report_load8(v23);
LABEL_115:
    v24 = __asan_report_load8(v23);
    goto LABEL_116;
  }
LABEL_98:
  if ( !v24 )
  {
LABEL_101:
    operator delete((void *)v4);
    goto LABEL_102;
  }
  v23 = v24 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v24 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_115;
  if ( *(_QWORD *)(v24 + 16) )
    goto LABEL_101;
LABEL_116:
  v28 = *(_BYTE *)(((v4 + 200) >> 3) + 0x7FFF8000);
  if ( v28 <= (char)((v4 - 56) & 7) && v28 )
  {
    __asan_report_load1(v4 + 200);
LABEL_122:
    __asan_report_store1(v4);
    goto LABEL_123;
  }
  v29 = *(_BYTE *)((v4 >> 3) + 0x7FFF8000);
  *(_QWORD *)&call = v4 & 7;
  if ( v29 <= call && v29 )
    goto LABEL_122;
  *(_BYTE *)v4 = *(_BYTE *)(v4 + 200);
  *(_QWORD *)(v24 + 16) = v4;
LABEL_102:
  *(_QWORD *)&call = v30;
  if ( v33 == (char *)v30 )
  {
    *(_QWORD *)((v30 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v30 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v30 >> 3) + 0x7FFF8024) = 0LL;
    *(_DWORD *)((v30 >> 3) + 0x7FFF802C) = 0;
    return;
  }
LABEL_123:
  *(_QWORD *)call = 1172321806LL;
  *(_QWORD *)((v30 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v30 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v30 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v30 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v30 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  *(_QWORD *)((v30 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
};

// Line 72: range 0000000019C47937-0000000019C484D8
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::system::error_code,int>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v2; // rbx
  boost::asio::detail::executor_function_base *cat; // r13
  boost::asio::detail::executor_function_base *v4; // rbp
  std::size_t v5; // r12
  unsigned __int64 v6; // rdi
  boost::asio::detail::executor_function_base::func_type func; // rax
  __int64 (**v8)(void); // rax
  __int64 v9; // rax
  boost::asio::detail::executor_function_base *v10; // rdi
  boost::asio::detail::executor_function_base::func_type v11; // rax
  char v12; // al
  __int64 v13; // rdi
  __int64 n; // rax
  __int64 v15; // rax
  __int64 v16; // rdi
  unsigned __int64 v17; // rax
  char v18; // cl
  boost::system::error_code *v19; // rax
  void (__fastcall **v20)(char *); // rax
  __int64 v21; // rax
  char v22; // dl
  char v23; // dl
  boost::asio::detail::executor_function_base *v24; // rsi OVERLAPPED
  boost::asio::detail::executor_function_base *v25; // rdx
  __int64 v26; // rdi
  __int64 v27; // rax
  __int64 v28; // rdi
  char v29; // dl
  char v30; // dl
  struct _Unwind_Exception *v31; // rbp
  unsigned __int64 v33; // [rsp+10h] [rbp-1F8h]
  _DWORD *v34; // [rsp+20h] [rbp-1E8h]
  char v35[472]; // [rsp+30h] [rbp-1D8h] BYREF

  v33 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v21 = __asan_stack_malloc_3(416LL);
    if ( v21 )
      v33 = v21;
  }
  v2 = v33 + 416;
  *(_QWORD *)v33 = 1102416563LL;
  *(_QWORD *)(v33 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 232 11 function:85";
  *(_QWORD *)(v33 + 16) = boost::asio::detail::executor_function<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::system::error_code,int>,std::allocator<void>>::do_complete;
  v34 = (_DWORD *)(v33 >> 3);
  v34[536862720] = -235802127;
  v34[536862721] = 61953;
  v34[536862722] = -218959360;
  v34[536862723] = 62194;
  v34[536862730] = -218103808;
  v34[536862731] = -202116109;
  v34[536862732] = -202116109;
  *(_QWORD *)(v33 + 48) = v33 + 32;
  *(_QWORD *)(v33 + 56) = base;
  *(_QWORD *)(v33 + 64) = base;
  cat = base + 1;
  *(_QWORD *)(v33 + 112) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v33 + 120) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v33 + 128) = &`vtable for'boost::beast::async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v4 = (boost::asio::detail::executor_function_base *)(v33 + 136);
  v5 = (std::size_t)&base[4];
  if ( *(_BYTE *)(((unsigned __int64)&base[4] >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(&base[4]);
    goto LABEL_62;
  }
  if ( *(_BYTE *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000) )
  {
LABEL_62:
    v6 = v33 + 136;
    __asan_report_store8();
    goto LABEL_63;
  }
  v4->func_ = base[4].func_;
  v6 = v33 + 144;
  if ( *(_BYTE *)(((v33 + 144) >> 3) + 0x7FFF8000) )
  {
LABEL_63:
    __asan_report_store8();
    goto LABEL_64;
  }
  *(_QWORD *)(v33 + 144) = 0LL;
  v6 = (unsigned __int64)&base[5];
  if ( *(_BYTE *)(((unsigned __int64)&base[5] >> 3) + 0x7FFF8000) )
  {
LABEL_64:
    __asan_report_load8(v6);
    goto LABEL_65;
  }
  func = base[5].func_;
  base[5].func_ = 0LL;
  *(_QWORD *)(v33 + 144) = func;
  base[4].func_ = 0LL;
  v6 = (unsigned __int64)&base[6];
  if ( *(_BYTE *)(((unsigned __int64)&base[6] >> 3) + 0x7FFF8000) )
  {
LABEL_65:
    __asan_report_load8(v6);
    goto LABEL_66;
  }
  v6 = v33 + 152;
  if ( *(_BYTE *)(((v33 + 152) >> 3) + 0x7FFF8000) )
  {
LABEL_66:
    __asan_report_store8();
    goto LABEL_67;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 152) = base[6];
  v6 = (unsigned __int64)&base[7];
  if ( *(_BYTE *)(((unsigned __int64)&base[7] >> 3) + 0x7FFF8000) )
  {
LABEL_67:
    __asan_report_load8(v6);
LABEL_68:
    v8 = (__int64 (**)(void))__asan_report_load8(v6);
    goto LABEL_69;
  }
  v6 = (unsigned __int64)base[7].func_;
  if ( !v6 )
    goto LABEL_13;
  if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
    goto LABEL_68;
  v8 = *(__int64 (***)(void))v6;
  if ( *(_BYTE *)((*(_QWORD *)v6 >> 3) + 0x7FFF8000LL) )
  {
LABEL_69:
    v9 = __asan_report_load8(v8);
    goto LABEL_70;
  }
  v6 = (*v8)();
LABEL_13:
  v9 = v33 + 160;
  if ( *(_BYTE *)(((v33 + 160) >> 3) + 0x7FFF8000) )
  {
LABEL_70:
    v10 = (boost::asio::detail::executor_function_base *)v9;
    __asan_report_store8();
    goto LABEL_71;
  }
  *(_QWORD *)(v33 + 160) = v6;
  v10 = base + 8;
  if ( *(_BYTE *)(((unsigned __int64)&base[8] >> 3) + 0x7FFF8000) )
  {
LABEL_71:
    __asan_report_load8(v10);
    goto LABEL_72;
  }
  v10 = (boost::asio::detail::executor_function_base *)(v33 + 168);
  if ( *(_BYTE *)(((v33 + 168) >> 3) + 0x7FFF8000) )
  {
LABEL_72:
    __asan_report_store8();
    goto LABEL_73;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 168) = base[8];
  v10 = base + 9;
  if ( *(_BYTE *)(((unsigned __int64)&base[9] >> 3) + 0x7FFF8000) )
  {
LABEL_73:
    __asan_report_load8(v10);
    goto LABEL_74;
  }
  v10 = (boost::asio::detail::executor_function_base *)(v33 + 176);
  if ( *(_BYTE *)(((v33 + 176) >> 3) + 0x7FFF8000) )
  {
LABEL_74:
    __asan_report_store8();
    goto LABEL_75;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 176) = base[9];
  v10 = base + 10;
  if ( *(_BYTE *)(((unsigned __int64)&base[10] >> 3) + 0x7FFF8000) )
  {
LABEL_75:
    __asan_report_load8(v10);
    goto LABEL_76;
  }
  v10 = (boost::asio::detail::executor_function_base *)(v33 + 184);
  if ( *(_BYTE *)(((v33 + 184) >> 3) + 0x7FFF8000) )
  {
LABEL_76:
    __asan_report_store8();
    goto LABEL_77;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 184) = base[10];
  v10 = base + 11;
  if ( *(_BYTE *)(((unsigned __int64)&base[11] >> 3) + 0x7FFF8000) )
  {
LABEL_77:
    __asan_report_load8(v10);
    goto LABEL_78;
  }
  v10 = (boost::asio::detail::executor_function_base *)(v33 + 192);
  if ( *(_BYTE *)(((v33 + 192) >> 3) + 0x7FFF8000) )
  {
LABEL_78:
    __asan_report_store8();
    goto LABEL_79;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 192) = base[11];
  v10 = base + 12;
  if ( *(_BYTE *)(((unsigned __int64)&base[12] >> 3) + 0x7FFF8000) )
  {
LABEL_79:
    __asan_report_load8(v10);
    goto LABEL_80;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 200) = base[12];
  base[12].func_ = 0LL;
  v10 = base + 13;
  if ( *(char *)(((unsigned __int64)&base[13] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_80:
    __asan_report_load1(v10);
    goto LABEL_81;
  }
  *(_BYTE *)(v33 + 208) = base[13].func_;
  LOBYTE(base[13].func_) = 0;
  *(_QWORD *)(v33 + 128) = &`vtable for'boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v10 = base + 14;
  if ( *(_BYTE *)(((unsigned __int64)&base[14] >> 3) + 0x7FFF8000) )
  {
LABEL_81:
    __asan_report_load8(v10);
    goto LABEL_82;
  }
  v11 = base[14].func_;
  base[14].func_ = 0LL;
  *(_QWORD *)(v33 + 216) = v11;
  *(_QWORD *)(v33 + 128) = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v10 = base + 15;
  if ( *(_BYTE *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000) )
  {
LABEL_82:
    __asan_report_load8(v10);
    goto LABEL_83;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 224) = base[15];
  v10 = base + 16;
  if ( *(_BYTE *)(((unsigned __int64)&base[16] >> 3) + 0x7FFF8000) )
  {
LABEL_83:
    __asan_report_load8(v10);
    goto LABEL_84;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 232) = base[16];
  v10 = base + 17;
  if ( *(_BYTE *)(((unsigned __int64)&base[17] >> 3) + 0x7FFF8000) )
  {
LABEL_84:
    __asan_report_load8(v10);
    goto LABEL_85;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 240) = base[17];
  base[17].func_ = 0LL;
  v10 = base + 18;
  if ( *(char *)(((unsigned __int64)&base[18] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_85:
    __asan_report_load1(v10);
LABEL_86:
    __asan_report_load4(v10);
    goto LABEL_87;
  }
  *(_BYTE *)(v33 + 248) = base[18].func_;
  LOBYTE(base[18].func_) = 0;
  v10 = base + 19;
  v12 = *(_BYTE *)(((unsigned __int64)&base[19] >> 3) + 0x7FFF8000);
  if ( v12 && v12 <= 3 )
    goto LABEL_86;
  *(_DWORD *)(v33 + 256) = base[19].func_;
  *(_QWORD *)(v33 + 120) = &`vtable for'boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v10 = base + 20;
  if ( *(_BYTE *)(((unsigned __int64)&base[20] >> 3) + 0x7FFF8000) )
  {
LABEL_87:
    __asan_report_load8(v10);
    goto LABEL_88;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 264) = base[20];
  v10 = base + 21;
  if ( *(_BYTE *)(((unsigned __int64)&base[21] >> 3) + 0x7FFF8000) )
  {
LABEL_88:
    __asan_report_load8(v10);
    goto LABEL_89;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 272) = base[21];
  v10 = base + 22;
  if ( *(_BYTE *)(((unsigned __int64)&base[22] >> 3) + 0x7FFF8000) )
  {
LABEL_89:
    __asan_report_load8(v10);
    goto LABEL_90;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 280) = base[22];
  v10 = base + 23;
  if ( *(_BYTE *)(((unsigned __int64)&base[23] >> 3) + 0x7FFF8000) )
  {
LABEL_90:
    __asan_report_load8(v10);
    goto LABEL_91;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 288) = base[23];
  base[23].func_ = 0LL;
  v10 = base + 24;
  if ( *(char *)(((unsigned __int64)&base[24] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_91:
    __asan_report_load1(v10);
    goto LABEL_92;
  }
  *(_BYTE *)(v33 + 296) = base[24].func_;
  LOBYTE(base[24].func_) = 0;
  *(_QWORD *)(v33 + 112) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v10 = base + 25;
  if ( *(_BYTE *)(((unsigned __int64)&base[25] >> 3) + 0x7FFF8000) )
  {
LABEL_92:
    __asan_report_load8(v10);
    goto LABEL_93;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 304) = base[25];
  v10 = base + 26;
  if ( *(_BYTE *)(((unsigned __int64)&base[26] >> 3) + 0x7FFF8000) )
  {
LABEL_93:
    __asan_report_load8(v10);
LABEL_94:
    n = __asan_report_load_n(v10, 24LL);
    goto LABEL_95;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 312) = base[26];
  v10 = base + 27;
  if ( *(_BYTE *)((((unsigned __int64)&base[29].func_ + 7) >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)((((unsigned __int64)&base[29].func_ + 7) >> 3) + 0x7FFF8000) <= (((unsigned __int8)base - 17) & 7)
    || *(char *)(((unsigned __int64)&base[27] >> 3) + 0x7FFF8000) < 0 )
  {
    goto LABEL_94;
  }
  *(__m128i *)(v33 + 320) = _mm_loadu_si128((const __m128i *)&base[27]);
  *(boost::asio::detail::executor_function_base *)(v33 + 336) = base[29];
  v13 = *(_QWORD *)(v33 + 64);
  if ( !v13 )
    goto LABEL_43;
  n = v13 + 8;
  if ( *(_BYTE *)(((unsigned __int64)(v13 + 8) >> 3) + 0x7FFF8000) )
  {
LABEL_95:
    v16 = n;
    __asan_report_store8();
    goto LABEL_96;
  }
  *(_QWORD *)(v13 + 8) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                       + 2;
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v13 + 8));
  *(_QWORD *)(v33 + 64) = 0LL;
LABEL_43:
  v4 = *(boost::asio::detail::executor_function_base **)(v33 + 56);
  if ( !v4 )
    goto LABEL_52;
  v15 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v15 )
  {
    v16 = v15 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v15 + 8) >> 3) + 0x7FFF8000) )
    {
      v15 = *(_QWORD *)(v15 + 8);
      goto LABEL_47;
    }
LABEL_96:
    __asan_report_load8(v16);
    goto LABEL_97;
  }
LABEL_47:
  if ( v15 )
  {
    v16 = v15 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v15 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v15 + 16) )
        goto LABEL_50;
LABEL_98:
      v22 = *(_BYTE *)(((unsigned __int64)&v4[31] >> 3) + 0x7FFF8000);
      if ( v22 <= (((unsigned __int8)v4 - 8) & 7) && v22 )
      {
        __asan_report_load1(&v4[31]);
      }
      else
      {
        v23 = *(_BYTE *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000);
        if ( v23 > ((unsigned __int8)v4 & 7) || !v23 )
        {
          LOBYTE(v4->func_) = v4[31].func_;
          *(_QWORD *)(v15 + 16) = v4;
          goto LABEL_51;
        }
      }
      v17 = __asan_report_store1(v4);
LABEL_105:
      __asan_report_load4(v17);
      goto LABEL_106;
    }
LABEL_97:
    v15 = __asan_report_load8(v16);
    goto LABEL_98;
  }
LABEL_50:
  operator delete(*(void **)(v33 + 56));
LABEL_51:
  *(_QWORD *)(v33 + 56) = 0LL;
LABEL_52:
  if ( !call )
    goto LABEL_110;
  v17 = (unsigned __int64)boost::beast::detail::get<1ul,int>((boost::beast::detail::tuple_element_impl<1,int> *)(v33 + 336));
  v18 = *(_BYTE *)((v17 >> 3) + 0x7FFF8000);
  if ( (char)((v17 & 7) + 3) >= v18 && v18 )
    goto LABEL_105;
  v5 = *(int *)v17;
  v19 = boost::beast::detail::get<0ul,boost::system::error_code>((boost::beast::detail::tuple_element_impl<0,boost::system::error_code> *)(v33 + 320));
  if ( *(_WORD *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) )
  {
LABEL_106:
    __asan_report_load16(v19);
    goto LABEL_107;
  }
  v4 = *(boost::asio::detail::executor_function_base **)&v19->val_;
  cat = (boost::asio::detail::executor_function_base *)v19->cat_;
  if ( !(unsigned int)*(_QWORD *)&v19->val_ )
LABEL_107:
    boost::beast::http::serializer<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>::consume(
      *(boost::beast::http::serializer<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > *const *)(v33 + 312),
      v5);
  v20 = *(void (__fastcall ***)(char *))(v33 + 112);
  if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
    __asan_report_load8(v20);
  else
    (*v20)((char *)(v33 + 112));
  boost::asio::executor_work_guard<boost::asio::executor>::reset((boost::asio::executor_work_guard<boost::asio::executor> *const)(v33 + 288));
  v24 = v4;
  v25 = cat;
  boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>::operator()(
    (boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > *const)(v33 + 120),
    *(boost::beast::error_code *)&v24,
    v5);
LABEL_110:
  *(_QWORD *)(v33 + 112) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v33 + 288));
  *(_QWORD *)(v33 + 120) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v33 + 240));
  *(_QWORD *)(v33 + 128) = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(v33 + 128));
  v26 = *(_QWORD *)(v33 + 64);
  if ( v26 )
  {
    if ( *(_BYTE *)(((unsigned __int64)(v26 + 8) >> 3) + 0x7FFF8000) )
    {
      v28 = v26 + 8;
      __asan_report_store8();
      goto LABEL_124;
    }
    *(_QWORD *)(v26 + 8) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
    boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v26 + 8));
    *(_QWORD *)(v33 + 64) = 0LL;
  }
  v2 = *(_QWORD *)(v33 + 56);
  if ( !v2 )
    goto LABEL_121;
  v27 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v27 )
  {
    v28 = v27 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v27 + 8) >> 3) + 0x7FFF8000) )
    {
      v27 = *(_QWORD *)(v27 + 8);
      goto LABEL_117;
    }
LABEL_124:
    __asan_report_load8(v28);
LABEL_125:
    v27 = __asan_report_load8(v28);
    goto LABEL_126;
  }
LABEL_117:
  if ( !v27 )
  {
LABEL_120:
    operator delete((void *)v2);
    goto LABEL_121;
  }
  v28 = v27 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v27 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_125;
  if ( *(_QWORD *)(v27 + 16) )
    goto LABEL_120;
LABEL_126:
  v29 = *(_BYTE *)(((v2 + 248) >> 3) + 0x7FFF8000);
  if ( v29 <= (char)((v2 - 8) & 7) && v29 )
  {
    __asan_report_load1(v2 + 248);
    goto LABEL_132;
  }
  v30 = *(_BYTE *)((v2 >> 3) + 0x7FFF8000);
  if ( v30 <= (char)(v2 & 7) && v30 )
  {
LABEL_132:
    v31 = (struct _Unwind_Exception *)__asan_report_store1(v2);
    *(_QWORD *)(v2 - 304) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                          + 2;
    boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v2 - 304));
    boost::asio::detail::executor_function<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::system::error_code,int>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::system::error_code,int>,std::allocator<void> >::ptr *const)(v2 - 368));
    __asan_handle_no_return(v2 - 368);
    _Unwind_Resume(v31);
  }
  *(_BYTE *)v2 = *(_BYTE *)(v2 + 248);
  *(_QWORD *)(v27 + 16) = v2;
LABEL_121:
  if ( v35 == (char *)v33 )
  {
    *(_QWORD *)((v33 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v33 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v33 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v33 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v33 = 1172321806LL;
    *(_QWORD *)((v33 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v33 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v33 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v33 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v33 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v33 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v33 >> 3) + 0x7FFF8030) = -168430091;
  }
};

// Line 72: range 0000000019CCFC9A-0000000019CD0802
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::system::error_code,int>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v2; // rbx
  boost::asio::detail::executor_function_base *cat; // r13
  boost::asio::detail::executor_function_base *v4; // rbp
  std::size_t v5; // r12
  unsigned __int64 v6; // rdi
  boost::asio::detail::executor_function_base::func_type func; // rax
  __int64 (**v8)(void); // rax
  __int64 v9; // rax
  boost::asio::detail::executor_function_base *v10; // rdi
  boost::asio::detail::executor_function_base::func_type v11; // rax
  char v12; // al
  __int64 v13; // rdi
  __int64 n; // rax
  __int64 v15; // rax
  __int64 v16; // rdi
  unsigned __int64 v17; // rax
  char v18; // cl
  boost::system::error_code *v19; // rax
  void (__fastcall **v20)(char *); // rax
  __int64 v21; // rax
  char v22; // dl
  char v23; // dl
  boost::asio::detail::executor_function_base *v24; // rsi OVERLAPPED
  boost::asio::detail::executor_function_base *v25; // rdx
  __int64 v26; // rdi
  __int64 v27; // rax
  __int64 v28; // rdi
  char v29; // dl
  char v30; // dl
  struct _Unwind_Exception *v31; // rbp
  unsigned __int64 v33; // [rsp+10h] [rbp-1F8h]
  _DWORD *v34; // [rsp+20h] [rbp-1E8h]
  char v35[472]; // [rsp+30h] [rbp-1D8h] BYREF

  v33 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v21 = __asan_stack_malloc_3(416LL);
    if ( v21 )
      v33 = v21;
  }
  v2 = v33 + 416;
  *(_QWORD *)v33 = 1102416563LL;
  *(_QWORD *)(v33 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 232 11 function:85";
  *(_QWORD *)(v33 + 16) = boost::asio::detail::executor_function<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::system::error_code,int>,std::allocator<void>>::do_complete;
  v34 = (_DWORD *)(v33 >> 3);
  v34[536862720] = -235802127;
  v34[536862721] = 61953;
  v34[536862722] = -218959360;
  v34[536862723] = 62194;
  v34[536862730] = -218103808;
  v34[536862731] = -202116109;
  v34[536862732] = -202116109;
  *(_QWORD *)(v33 + 48) = v33 + 32;
  *(_QWORD *)(v33 + 56) = base;
  *(_QWORD *)(v33 + 64) = base;
  cat = base + 1;
  *(_QWORD *)(v33 + 112) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v33 + 120) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                         + 2;
  *(_QWORD *)(v33 + 128) = &`vtable for'boost::beast::async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v4 = (boost::asio::detail::executor_function_base *)(v33 + 136);
  v5 = (std::size_t)&base[4];
  if ( *(_BYTE *)(((unsigned __int64)&base[4] >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(&base[4]);
    goto LABEL_62;
  }
  if ( *(_BYTE *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000) )
  {
LABEL_62:
    v6 = v33 + 136;
    __asan_report_store8();
    goto LABEL_63;
  }
  v4->func_ = base[4].func_;
  v6 = v33 + 144;
  if ( *(_BYTE *)(((v33 + 144) >> 3) + 0x7FFF8000) )
  {
LABEL_63:
    __asan_report_store8();
    goto LABEL_64;
  }
  *(_QWORD *)(v33 + 144) = 0LL;
  v6 = (unsigned __int64)&base[5];
  if ( *(_BYTE *)(((unsigned __int64)&base[5] >> 3) + 0x7FFF8000) )
  {
LABEL_64:
    __asan_report_load8(v6);
    goto LABEL_65;
  }
  func = base[5].func_;
  base[5].func_ = 0LL;
  *(_QWORD *)(v33 + 144) = func;
  base[4].func_ = 0LL;
  v6 = (unsigned __int64)&base[6];
  if ( *(_BYTE *)(((unsigned __int64)&base[6] >> 3) + 0x7FFF8000) )
  {
LABEL_65:
    __asan_report_load8(v6);
    goto LABEL_66;
  }
  v6 = v33 + 152;
  if ( *(_BYTE *)(((v33 + 152) >> 3) + 0x7FFF8000) )
  {
LABEL_66:
    __asan_report_store8();
    goto LABEL_67;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 152) = base[6];
  v6 = (unsigned __int64)&base[7];
  if ( *(_BYTE *)(((unsigned __int64)&base[7] >> 3) + 0x7FFF8000) )
  {
LABEL_67:
    __asan_report_load8(v6);
LABEL_68:
    v8 = (__int64 (**)(void))__asan_report_load8(v6);
    goto LABEL_69;
  }
  v6 = (unsigned __int64)base[7].func_;
  if ( !v6 )
    goto LABEL_13;
  if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
    goto LABEL_68;
  v8 = *(__int64 (***)(void))v6;
  if ( *(_BYTE *)((*(_QWORD *)v6 >> 3) + 0x7FFF8000LL) )
  {
LABEL_69:
    v9 = __asan_report_load8(v8);
    goto LABEL_70;
  }
  v6 = (*v8)();
LABEL_13:
  v9 = v33 + 160;
  if ( *(_BYTE *)(((v33 + 160) >> 3) + 0x7FFF8000) )
  {
LABEL_70:
    v10 = (boost::asio::detail::executor_function_base *)v9;
    __asan_report_store8();
    goto LABEL_71;
  }
  *(_QWORD *)(v33 + 160) = v6;
  v10 = base + 8;
  if ( *(_BYTE *)(((unsigned __int64)&base[8] >> 3) + 0x7FFF8000) )
  {
LABEL_71:
    __asan_report_load8(v10);
    goto LABEL_72;
  }
  v10 = (boost::asio::detail::executor_function_base *)(v33 + 168);
  if ( *(_BYTE *)(((v33 + 168) >> 3) + 0x7FFF8000) )
  {
LABEL_72:
    __asan_report_store8();
    goto LABEL_73;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 168) = base[8];
  v10 = base + 9;
  if ( *(_BYTE *)(((unsigned __int64)&base[9] >> 3) + 0x7FFF8000) )
  {
LABEL_73:
    __asan_report_load8(v10);
    goto LABEL_74;
  }
  v10 = (boost::asio::detail::executor_function_base *)(v33 + 176);
  if ( *(_BYTE *)(((v33 + 176) >> 3) + 0x7FFF8000) )
  {
LABEL_74:
    __asan_report_store8();
    goto LABEL_75;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 176) = base[9];
  v10 = base + 10;
  if ( *(_BYTE *)(((unsigned __int64)&base[10] >> 3) + 0x7FFF8000) )
  {
LABEL_75:
    __asan_report_load8(v10);
    goto LABEL_76;
  }
  v10 = (boost::asio::detail::executor_function_base *)(v33 + 184);
  if ( *(_BYTE *)(((v33 + 184) >> 3) + 0x7FFF8000) )
  {
LABEL_76:
    __asan_report_store8();
    goto LABEL_77;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 184) = base[10];
  v10 = base + 11;
  if ( *(_BYTE *)(((unsigned __int64)&base[11] >> 3) + 0x7FFF8000) )
  {
LABEL_77:
    __asan_report_load8(v10);
    goto LABEL_78;
  }
  v10 = (boost::asio::detail::executor_function_base *)(v33 + 192);
  if ( *(_BYTE *)(((v33 + 192) >> 3) + 0x7FFF8000) )
  {
LABEL_78:
    __asan_report_store8();
    goto LABEL_79;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 192) = base[11];
  v10 = base + 12;
  if ( *(_BYTE *)(((unsigned __int64)&base[12] >> 3) + 0x7FFF8000) )
  {
LABEL_79:
    __asan_report_load8(v10);
    goto LABEL_80;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 200) = base[12];
  base[12].func_ = 0LL;
  v10 = base + 13;
  if ( *(char *)(((unsigned __int64)&base[13] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_80:
    __asan_report_load1(v10);
    goto LABEL_81;
  }
  *(_BYTE *)(v33 + 208) = base[13].func_;
  LOBYTE(base[13].func_) = 0;
  *(_QWORD *)(v33 + 128) = &`vtable for'boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>
                         + 2;
  v10 = base + 14;
  if ( *(_BYTE *)(((unsigned __int64)&base[14] >> 3) + 0x7FFF8000) )
  {
LABEL_81:
    __asan_report_load8(v10);
    goto LABEL_82;
  }
  v11 = base[14].func_;
  base[14].func_ = 0LL;
  *(_QWORD *)(v33 + 216) = v11;
  *(_QWORD *)(v33 + 128) = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v10 = base + 15;
  if ( *(_BYTE *)(((unsigned __int64)&base[15] >> 3) + 0x7FFF8000) )
  {
LABEL_82:
    __asan_report_load8(v10);
    goto LABEL_83;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 224) = base[15];
  v10 = base + 16;
  if ( *(_BYTE *)(((unsigned __int64)&base[16] >> 3) + 0x7FFF8000) )
  {
LABEL_83:
    __asan_report_load8(v10);
    goto LABEL_84;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 232) = base[16];
  v10 = base + 17;
  if ( *(_BYTE *)(((unsigned __int64)&base[17] >> 3) + 0x7FFF8000) )
  {
LABEL_84:
    __asan_report_load8(v10);
    goto LABEL_85;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 240) = base[17];
  base[17].func_ = 0LL;
  v10 = base + 18;
  if ( *(char *)(((unsigned __int64)&base[18] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_85:
    __asan_report_load1(v10);
LABEL_86:
    __asan_report_load4(v10);
    goto LABEL_87;
  }
  *(_BYTE *)(v33 + 248) = base[18].func_;
  LOBYTE(base[18].func_) = 0;
  v10 = base + 19;
  v12 = *(_BYTE *)(((unsigned __int64)&base[19] >> 3) + 0x7FFF8000);
  if ( v12 && v12 <= 3 )
    goto LABEL_86;
  *(_DWORD *)(v33 + 256) = base[19].func_;
  *(_QWORD *)(v33 + 120) = &`vtable for'boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v10 = base + 20;
  if ( *(_BYTE *)(((unsigned __int64)&base[20] >> 3) + 0x7FFF8000) )
  {
LABEL_87:
    __asan_report_load8(v10);
    goto LABEL_88;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 264) = base[20];
  v10 = base + 21;
  if ( *(_BYTE *)(((unsigned __int64)&base[21] >> 3) + 0x7FFF8000) )
  {
LABEL_88:
    __asan_report_load8(v10);
    goto LABEL_89;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 272) = base[21];
  v10 = base + 22;
  if ( *(_BYTE *)(((unsigned __int64)&base[22] >> 3) + 0x7FFF8000) )
  {
LABEL_89:
    __asan_report_load8(v10);
    goto LABEL_90;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 280) = base[22];
  v10 = base + 23;
  if ( *(_BYTE *)(((unsigned __int64)&base[23] >> 3) + 0x7FFF8000) )
  {
LABEL_90:
    __asan_report_load8(v10);
    goto LABEL_91;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 288) = base[23];
  base[23].func_ = 0LL;
  v10 = base + 24;
  if ( *(char *)(((unsigned __int64)&base[24] >> 3) + 0x7FFF8000) < 0 )
  {
LABEL_91:
    __asan_report_load1(v10);
    goto LABEL_92;
  }
  *(_BYTE *)(v33 + 296) = base[24].func_;
  LOBYTE(base[24].func_) = 0;
  *(_QWORD *)(v33 + 112) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  v10 = base + 25;
  if ( *(_BYTE *)(((unsigned __int64)&base[25] >> 3) + 0x7FFF8000) )
  {
LABEL_92:
    __asan_report_load8(v10);
    goto LABEL_93;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 304) = base[25];
  v10 = base + 26;
  if ( *(_BYTE *)(((unsigned __int64)&base[26] >> 3) + 0x7FFF8000) )
  {
LABEL_93:
    __asan_report_load8(v10);
LABEL_94:
    n = __asan_report_load_n(v10, 24LL);
    goto LABEL_95;
  }
  *(boost::asio::detail::executor_function_base *)(v33 + 312) = base[26];
  v10 = base + 27;
  if ( *(_BYTE *)((((unsigned __int64)&base[29].func_ + 7) >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)((((unsigned __int64)&base[29].func_ + 7) >> 3) + 0x7FFF8000) <= (((unsigned __int8)base - 17) & 7)
    || *(char *)(((unsigned __int64)&base[27] >> 3) + 0x7FFF8000) < 0 )
  {
    goto LABEL_94;
  }
  *(__m128i *)(v33 + 320) = _mm_loadu_si128((const __m128i *)&base[27]);
  *(boost::asio::detail::executor_function_base *)(v33 + 336) = base[29];
  v13 = *(_QWORD *)(v33 + 64);
  if ( !v13 )
    goto LABEL_43;
  n = v13 + 8;
  if ( *(_BYTE *)(((unsigned __int64)(v13 + 8) >> 3) + 0x7FFF8000) )
  {
LABEL_95:
    v16 = n;
    __asan_report_store8();
    goto LABEL_96;
  }
  *(_QWORD *)(v13 + 8) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                       + 2;
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v13 + 8));
  *(_QWORD *)(v33 + 64) = 0LL;
LABEL_43:
  v4 = *(boost::asio::detail::executor_function_base **)(v33 + 56);
  if ( !v4 )
    goto LABEL_52;
  v15 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v15 )
  {
    v16 = v15 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v15 + 8) >> 3) + 0x7FFF8000) )
    {
      v15 = *(_QWORD *)(v15 + 8);
      goto LABEL_47;
    }
LABEL_96:
    __asan_report_load8(v16);
    goto LABEL_97;
  }
LABEL_47:
  if ( v15 )
  {
    v16 = v15 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v15 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v15 + 16) )
        goto LABEL_50;
LABEL_98:
      v22 = *(_BYTE *)(((unsigned __int64)&v4[31] >> 3) + 0x7FFF8000);
      if ( v22 <= (((unsigned __int8)v4 - 8) & 7) && v22 )
      {
        __asan_report_load1(&v4[31]);
      }
      else
      {
        v23 = *(_BYTE *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000);
        if ( v23 > ((unsigned __int8)v4 & 7) || !v23 )
        {
          LOBYTE(v4->func_) = v4[31].func_;
          *(_QWORD *)(v15 + 16) = v4;
          goto LABEL_51;
        }
      }
      v17 = __asan_report_store1(v4);
LABEL_105:
      __asan_report_load4(v17);
      goto LABEL_106;
    }
LABEL_97:
    v15 = __asan_report_load8(v16);
    goto LABEL_98;
  }
LABEL_50:
  operator delete(*(void **)(v33 + 56));
LABEL_51:
  *(_QWORD *)(v33 + 56) = 0LL;
LABEL_52:
  if ( !call )
    goto LABEL_110;
  v17 = (unsigned __int64)boost::beast::detail::get<1ul,int>((boost::beast::detail::tuple_element_impl<1,int> *)(v33 + 336));
  v18 = *(_BYTE *)((v17 >> 3) + 0x7FFF8000);
  if ( (char)((v17 & 7) + 3) >= v18 && v18 )
    goto LABEL_105;
  v5 = *(int *)v17;
  v19 = boost::beast::detail::get<0ul,boost::system::error_code>((boost::beast::detail::tuple_element_impl<0,boost::system::error_code> *)(v33 + 320));
  if ( *(_WORD *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) )
  {
LABEL_106:
    __asan_report_load16(v19);
    goto LABEL_107;
  }
  v4 = *(boost::asio::detail::executor_function_base **)&v19->val_;
  cat = (boost::asio::detail::executor_function_base *)v19->cat_;
  if ( !(unsigned int)*(_QWORD *)&v19->val_ )
LABEL_107:
    boost::beast::http::serializer<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>::consume(
      *(boost::beast::http::serializer<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > *const *)(v33 + 312),
      v5);
  v20 = *(void (__fastcall ***)(char *))(v33 + 112);
  if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
    __asan_report_load8(v20);
  else
    (*v20)((char *)(v33 + 112));
  boost::asio::executor_work_guard<boost::asio::executor>::reset((boost::asio::executor_work_guard<boost::asio::executor> *const)(v33 + 288));
  v24 = v4;
  v25 = cat;
  boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>::operator()(
    (boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > *const)(v33 + 120),
    *(boost::beast::error_code *)&v24,
    v5);
LABEL_110:
  *(_QWORD *)(v33 + 112) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
  boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v33 + 112));
  v26 = *(_QWORD *)(v33 + 64);
  if ( v26 )
  {
    if ( *(_BYTE *)(((unsigned __int64)(v26 + 8) >> 3) + 0x7FFF8000) )
    {
      v28 = v26 + 8;
      __asan_report_store8();
      goto LABEL_124;
    }
    *(_QWORD *)(v26 + 8) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                         + 2;
    boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v26 + 8));
    *(_QWORD *)(v33 + 64) = 0LL;
  }
  v2 = *(_QWORD *)(v33 + 56);
  if ( !v2 )
    goto LABEL_121;
  v27 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v27 )
  {
    v28 = v27 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v27 + 8) >> 3) + 0x7FFF8000) )
    {
      v27 = *(_QWORD *)(v27 + 8);
      goto LABEL_117;
    }
LABEL_124:
    __asan_report_load8(v28);
LABEL_125:
    v27 = __asan_report_load8(v28);
    goto LABEL_126;
  }
LABEL_117:
  if ( !v27 )
  {
LABEL_120:
    operator delete((void *)v2);
    goto LABEL_121;
  }
  v28 = v27 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v27 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_125;
  if ( *(_QWORD *)(v27 + 16) )
    goto LABEL_120;
LABEL_126:
  v29 = *(_BYTE *)(((v2 + 248) >> 3) + 0x7FFF8000);
  if ( v29 <= (char)((v2 - 8) & 7) && v29 )
  {
    __asan_report_load1(v2 + 248);
    goto LABEL_132;
  }
  v30 = *(_BYTE *)((v2 >> 3) + 0x7FFF8000);
  if ( v30 <= (char)(v2 & 7) && v30 )
  {
LABEL_132:
    v31 = (struct _Unwind_Exception *)__asan_report_store1(v2);
    *(_QWORD *)(v2 - 304) = &`vtable for'boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                          + 2;
    boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>::~async_base((boost::beast::async_base<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::asio::executor,std::allocator<void> > *const)(v2 - 304));
    boost::asio::detail::executor_function<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::system::error_code,int>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::beast::detail::bind_front_wrapper<boost::beast::http::detail::write_some_op<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::system::error_code,int>,std::allocator<void> >::ptr *const)(v2 - 368));
    __asan_handle_no_return(v2 - 368);
    _Unwind_Resume(v31);
  }
  *(_BYTE *)v2 = *(_BYTE *)(v2 + 248);
  *(_QWORD *)(v27 + 16) = v2;
LABEL_121:
  if ( v35 == (char *)v33 )
  {
    *(_QWORD *)((v33 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v33 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v33 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v33 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v33 = 1172321806LL;
    *(_QWORD *)((v33 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v33 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v33 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v33 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v33 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v33 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v33 >> 3) + 0x7FFF8030) = -168430091;
  }
};

// Line 72: range 0000000019C36F7F-0000000019C37460
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v2; // r12
  unsigned __int64 v3; // rbx
  _DWORD *v4; // rbp
  unsigned __int64 v5; // r13
  __int64 v6; // rdi
  __int64 v7; // rax
  __int64 v8; // rsi OVERLAPPED
  const boost::system::detail::system_error_category *v9; // rdx
  __int64 v10; // rax
  char v11; // dl
  char v12; // dl
  __int64 v13; // r13
  __int64 v14; // rdi
  __int64 v15; // rax
  char v16; // dl
  char v17; // dl
  struct _Unwind_Exception *v18; // rbp
  _BYTE v19[408]; // [rsp+0h] [rbp-198h] BYREF

  v2 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v10 = __asan_stack_malloc_3(352LL);
    if ( v10 )
      v2 = v10;
  }
  v3 = v2 + 352;
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 168 11 function:85";
  *(_QWORD *)(v2 + 16) = boost::asio::detail::executor_function<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,std::allocator<void>>::do_complete;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61953;
  v4[536862722] = -218959360;
  v4[536862723] = 62194;
  v4[536862728] = -218103808;
  v4[536862729] = -202116109;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 48) = v2 + 32;
  *(_QWORD *)(v2 + 56) = base;
  *(_QWORD *)(v2 + 64) = base;
  boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>::write_op(
    (boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > *const)(v2 + 112),
    (boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > *)(v2 >> 3));
  v5 = *(_QWORD *)(v2 + 64);
  if ( v5 )
  {
    v6 = v5 + 8;
    if ( *(_BYTE *)(((v5 + 8) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store8();
    }
    else
    {
      *(_QWORD *)(v5 + 8) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                          + 2;
      boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v5 + 128));
      v6 = v5 + 16;
      if ( !*(_BYTE *)(((v5 + 16) >> 3) + 0x7FFF8000) )
      {
        *(_QWORD *)(v5 + 16) = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                             + 2;
        boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(v5 + 16));
        *(_QWORD *)(v2 + 64) = 0LL;
        goto LABEL_6;
      }
    }
    __asan_report_store8();
    goto LABEL_21;
  }
LABEL_6:
  v5 = *(_QWORD *)(v2 + 56);
  if ( !v5 )
    goto LABEL_15;
  v7 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                  + __readfsqword(0));
  if ( v7 )
  {
    v6 = v7 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v7 + 8) >> 3) + 0x7FFF8000) )
    {
      v7 = *(_QWORD *)(v7 + 8);
      goto LABEL_10;
    }
LABEL_21:
    __asan_report_load8(v6);
    goto LABEL_22;
  }
LABEL_10:
  if ( v7 )
  {
    v6 = v7 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v7 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v7 + 16) )
        goto LABEL_13;
LABEL_23:
      v11 = *(_BYTE *)(((v5 + 184) >> 3) + 0x7FFF8000);
      if ( v11 <= (char)((v5 - 72) & 7) && v11 )
      {
        __asan_report_load1(v5 + 184);
      }
      else
      {
        v12 = *(_BYTE *)((v5 >> 3) + 0x7FFF8000);
        if ( v12 > (char)(v5 & 7) || !v12 )
        {
          *(_BYTE *)v5 = *(_BYTE *)(v5 + 184);
          *(_QWORD *)(v7 + 16) = v5;
          goto LABEL_14;
        }
      }
      __asan_report_store1(v5);
      goto LABEL_30;
    }
LABEL_22:
    v7 = __asan_report_load8(v6);
    goto LABEL_23;
  }
LABEL_13:
  operator delete(*(void **)(v2 + 56));
LABEL_14:
  *(_QWORD *)(v2 + 56) = 0LL;
LABEL_15:
  if ( call )
  {
    v8 = 0LL;
    v9 = &boost::system::detail::cat_holder<void>::system_category_instance;
    boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>::operator()(
      (boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > *const)(v2 + 112),
      *(boost::beast::error_code *)&v8,
      0LL);
  }
LABEL_30:
  *(_QWORD *)(v2 + 112) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v2 + 232));
  *(_QWORD *)(v2 + 120) = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                        + 2;
  boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(v2 + 120));
  v13 = *(_QWORD *)(v2 + 64);
  if ( !v13 )
    goto LABEL_34;
  v14 = v13 + 8;
  if ( *(_BYTE *)(((unsigned __int64)(v13 + 8) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store8();
    goto LABEL_45;
  }
  *(_QWORD *)(v13 + 8) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                       + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v13 + 128));
  v14 = v13 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v13 + 16) >> 3) + 0x7FFF8000) )
  {
LABEL_45:
    __asan_report_store8();
    goto LABEL_46;
  }
  *(_QWORD *)(v13 + 16) = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                        + 2;
  boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(v13 + 16));
  *(_QWORD *)(v2 + 64) = 0LL;
LABEL_34:
  v3 = *(_QWORD *)(v2 + 56);
  if ( !v3 )
    goto LABEL_42;
  v15 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v15 )
  {
    v14 = v15 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v15 + 8) >> 3) + 0x7FFF8000) )
    {
      v15 = *(_QWORD *)(v15 + 8);
      goto LABEL_38;
    }
LABEL_46:
    __asan_report_load8(v14);
LABEL_47:
    v15 = __asan_report_load8(v14);
    goto LABEL_48;
  }
LABEL_38:
  if ( !v15 )
  {
LABEL_41:
    operator delete((void *)v3);
    goto LABEL_42;
  }
  v14 = v15 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v15 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_47;
  if ( *(_QWORD *)(v15 + 16) )
    goto LABEL_41;
LABEL_48:
  v16 = *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000);
  if ( v16 <= (char)((v3 - 72) & 7) && v16 )
  {
    __asan_report_load1(v3 + 184);
    goto LABEL_54;
  }
  v17 = *(_BYTE *)((v3 >> 3) + 0x7FFF8000);
  if ( v17 <= (char)(v3 & 7) && v17 )
  {
LABEL_54:
    v18 = (struct _Unwind_Exception *)__asan_report_store1(v3);
    *(_QWORD *)(v3 - 240) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                          + 2;
    boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v3 - 120));
    *(_QWORD *)(v3 - 232) = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                          + 2;
    boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(v3 - 232));
    boost::asio::detail::executor_function<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,std::allocator<void> >::ptr *const)(v3 - 304));
    __asan_handle_no_return(v3 - 304);
    _Unwind_Resume(v18);
  }
  *(_BYTE *)v3 = *(_BYTE *)(v3 + 184);
  *(_QWORD *)(v15 + 16) = v3;
LABEL_42:
  if ( v19 == (_BYTE *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
};

// Line 72: range 0000000019C87069-0000000019C8754A
// local variable allocation has failed, the output may be wrong!
void __fastcall boost::asio::detail::executor_function<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,std::allocator<void>>::do_complete(
        boost::asio::detail::executor_function_base *base,
        bool call)
{
  unsigned __int64 v2; // r12
  unsigned __int64 v3; // rbx
  _DWORD *v4; // rbp
  unsigned __int64 v5; // r13
  __int64 v6; // rdi
  __int64 v7; // rax
  __int64 v8; // rsi OVERLAPPED
  const boost::system::detail::system_error_category *v9; // rdx
  __int64 v10; // rax
  char v11; // dl
  char v12; // dl
  __int64 v13; // r13
  __int64 v14; // rdi
  __int64 v15; // rax
  char v16; // dl
  char v17; // dl
  struct _Unwind_Exception *v18; // rbp
  _BYTE v19[408]; // [rsp+0h] [rbp-198h] BYREF

  v2 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v10 = __asan_stack_malloc_3(352LL);
    if ( v10 )
      v2 = v10;
  }
  v3 = v2 + 352;
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 1 12 allocator:76 48 24 4 p:77 112 168 11 function:85";
  *(_QWORD *)(v2 + 16) = boost::asio::detail::executor_function<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,std::allocator<void>>::do_complete;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61953;
  v4[536862722] = -218959360;
  v4[536862723] = 62194;
  v4[536862728] = -218103808;
  v4[536862729] = -202116109;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 48) = v2 + 32;
  *(_QWORD *)(v2 + 56) = base;
  *(_QWORD *)(v2 + 64) = base;
  boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>::write_op(
    (boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > *const)(v2 + 112),
    (boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > *)(v2 >> 3));
  v5 = *(_QWORD *)(v2 + 64);
  if ( v5 )
  {
    v6 = v5 + 8;
    if ( *(_BYTE *)(((v5 + 8) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store8();
    }
    else
    {
      *(_QWORD *)(v5 + 8) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                          + 2;
      boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v5 + 128));
      v6 = v5 + 16;
      if ( !*(_BYTE *)(((v5 + 16) >> 3) + 0x7FFF8000) )
      {
        *(_QWORD *)(v5 + 16) = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                             + 2;
        boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(v5 + 16));
        *(_QWORD *)(v2 + 64) = 0LL;
        goto LABEL_6;
      }
    }
    __asan_report_store8();
    goto LABEL_21;
  }
LABEL_6:
  v5 = *(_QWORD *)(v2 + 56);
  if ( !v5 )
    goto LABEL_15;
  v7 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                  + __readfsqword(0));
  if ( v7 )
  {
    v6 = v7 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v7 + 8) >> 3) + 0x7FFF8000) )
    {
      v7 = *(_QWORD *)(v7 + 8);
      goto LABEL_10;
    }
LABEL_21:
    __asan_report_load8(v6);
    goto LABEL_22;
  }
LABEL_10:
  if ( v7 )
  {
    v6 = v7 + 16;
    if ( !*(_BYTE *)(((unsigned __int64)(v7 + 16) >> 3) + 0x7FFF8000) )
    {
      if ( *(_QWORD *)(v7 + 16) )
        goto LABEL_13;
LABEL_23:
      v11 = *(_BYTE *)(((v5 + 184) >> 3) + 0x7FFF8000);
      if ( v11 <= (char)((v5 - 72) & 7) && v11 )
      {
        __asan_report_load1(v5 + 184);
      }
      else
      {
        v12 = *(_BYTE *)((v5 >> 3) + 0x7FFF8000);
        if ( v12 > (char)(v5 & 7) || !v12 )
        {
          *(_BYTE *)v5 = *(_BYTE *)(v5 + 184);
          *(_QWORD *)(v7 + 16) = v5;
          goto LABEL_14;
        }
      }
      __asan_report_store1(v5);
      goto LABEL_30;
    }
LABEL_22:
    v7 = __asan_report_load8(v6);
    goto LABEL_23;
  }
LABEL_13:
  operator delete(*(void **)(v2 + 56));
LABEL_14:
  *(_QWORD *)(v2 + 56) = 0LL;
LABEL_15:
  if ( call )
  {
    v8 = 0LL;
    v9 = &boost::system::detail::cat_holder<void>::system_category_instance;
    boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>::operator()(
      (boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > > *const)(v2 + 112),
      *(boost::beast::error_code *)&v8,
      0LL);
  }
LABEL_30:
  *(_QWORD *)(v2 + 112) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                        + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v2 + 232));
  *(_QWORD *)(v2 + 120) = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                        + 2;
  boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(v2 + 120));
  v13 = *(_QWORD *)(v2 + 64);
  if ( !v13 )
    goto LABEL_34;
  v14 = v13 + 8;
  if ( *(_BYTE *)(((unsigned __int64)(v13 + 8) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store8();
    goto LABEL_45;
  }
  *(_QWORD *)(v13 + 8) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                       + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v13 + 128));
  v14 = v13 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v13 + 16) >> 3) + 0x7FFF8000) )
  {
LABEL_45:
    __asan_report_store8();
    goto LABEL_46;
  }
  *(_QWORD *)(v13 + 16) = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                        + 2;
  boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(v13 + 16));
  *(_QWORD *)(v2 + 64) = 0LL;
LABEL_34:
  v3 = *(_QWORD *)(v2 + 56);
  if ( !v3 )
    goto LABEL_42;
  v15 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                   + __readfsqword(0));
  if ( v15 )
  {
    v14 = v15 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v15 + 8) >> 3) + 0x7FFF8000) )
    {
      v15 = *(_QWORD *)(v15 + 8);
      goto LABEL_38;
    }
LABEL_46:
    __asan_report_load8(v14);
LABEL_47:
    v15 = __asan_report_load8(v14);
    goto LABEL_48;
  }
LABEL_38:
  if ( !v15 )
  {
LABEL_41:
    operator delete((void *)v3);
    goto LABEL_42;
  }
  v14 = v15 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v15 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_47;
  if ( *(_QWORD *)(v15 + 16) )
    goto LABEL_41;
LABEL_48:
  v16 = *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000);
  if ( v16 <= (char)((v3 - 72) & 7) && v16 )
  {
    __asan_report_load1(v3 + 184);
    goto LABEL_54;
  }
  v17 = *(_BYTE *)((v3 >> 3) + 0x7FFF8000);
  if ( v17 <= (char)(v3 & 7) && v17 )
  {
LABEL_54:
    v18 = (struct _Unwind_Exception *)__asan_report_store1(v3);
    *(_QWORD *)(v3 - 240) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                          + 2;
    boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(v3 - 120));
    *(_QWORD *)(v3 - 232) = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                          + 2;
    boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(v3 - 232));
    boost::asio::detail::executor_function<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,std::allocator<void>>::ptr::reset((boost::asio::detail::executor_function<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,std::allocator<void> >::ptr *const)(v3 - 304));
    __asan_handle_no_return(v3 - 304);
    _Unwind_Resume(v18);
  }
  *(_BYTE *)v3 = *(_BYTE *)(v3 + 184);
  *(_QWORD *)(v15 + 16) = v3;
LABEL_42:
  if ( v19 == (_BYTE *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
};

// Line 199: range 0000000019BB4114-0000000019BB42F0
void __fastcall boost::asio::detail::executor_function<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,std::allocator<void>>::ptr::reset(
        boost::asio::detail::executor_function<boost::beast::http::detail::write_op<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy> >,boost::beast::http::detail::serializer_is_done,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char> >,boost::beast::http::basic_fields<std::allocator<char> > >,std::allocator<void> >::ptr *const this)
{
  unsigned __int64 p; // rbp
  unsigned __int64 p_p; // rdi
  __int64 v4; // rax
  const boost::beast::detail::tuple_element_impl<0,boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> > > *p_v; // rdi
  char v6; // dl
  char v7; // dl

  p_p = (unsigned __int64)&this->p;
  if ( *(_BYTE *)((p_p >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(p_p);
LABEL_20:
    __asan_report_store8();
    goto LABEL_21;
  }
  p = (unsigned __int64)this->p;
  if ( !p )
    goto LABEL_7;
  p_p = p + 8;
  if ( *(_BYTE *)(((p + 8) >> 3) + 0x7FFF8000) )
    goto LABEL_20;
  *(_QWORD *)(p + 8) = &`vtable for'boost::beast::async_base<boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>,boost::asio::executor,std::allocator<void>>
                     + 2;
  boost::asio::executor_work_guard<boost::asio::executor>::~executor_work_guard((boost::asio::executor_work_guard<boost::asio::executor> *const)(p + 128));
  p_p = p + 16;
  if ( *(_BYTE *)(((p + 16) >> 3) + 0x7FFF8000) )
  {
LABEL_21:
    __asan_report_store8();
    goto LABEL_22;
  }
  *(_QWORD *)(p + 16) = &`vtable for'boost::beast::http::detail::write_msg_op<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::beast::ssl_stream<boost::beast::basic_stream<boost::asio::ip::tcp,boost::asio::executor,boost::beast::unlimited_rate_policy>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>
                      + 2;
  boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(void),boost::asio::executor>,unsigned long>,boost::asio::executor,std::allocator<void>>::~stable_async_base((boost::beast::stable_async_base<boost::asio::detail::coro_handler<boost::asio::executor_binder<void (*)(),boost::asio::executor>,long unsigned int>,boost::asio::executor,std::allocator<void> > *const)(p + 16));
  p_p = (unsigned __int64)&this->p;
  if ( *(_BYTE *)(((unsigned __int64)&this->p >> 3) + 0x7FFF8000) )
  {
LABEL_22:
    __asan_report_store8();
    goto LABEL_23;
  }
  this->p = 0LL;
LABEL_7:
  p_p = (unsigned __int64)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_23:
    __asan_report_load8(p_p);
    goto LABEL_24;
  }
  p = (unsigned __int64)this->v;
  if ( !p )
    return;
  v4 = *(__int64 *)((char *)&boost::asio::detail::keyword_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::value_
                  + __readfsqword(0));
  if ( v4 )
  {
    p_p = v4 + 8;
    if ( !*(_BYTE *)(((unsigned __int64)(v4 + 8) >> 3) + 0x7FFF8000) )
    {
      v4 = *(_QWORD *)(v4 + 8);
      goto LABEL_12;
    }
LABEL_24:
    __asan_report_load8(p_p);
LABEL_25:
    v4 = __asan_report_load8(p_p);
    goto LABEL_26;
  }
LABEL_12:
  if ( !v4 )
  {
LABEL_15:
    operator delete(this->v);
    goto LABEL_16;
  }
  p_p = v4 + 16;
  if ( *(_BYTE *)(((unsigned __int64)(v4 + 16) >> 3) + 0x7FFF8000) )
    goto LABEL_25;
  if ( *(_QWORD *)(v4 + 16) )
    goto LABEL_15;
LABEL_26:
  v6 = *(_BYTE *)(((p + 184) >> 3) + 0x7FFF8000);
  if ( v6 <= (char)((p - 72) & 7) && v6 )
  {
    __asan_report_load1(p + 184);
LABEL_32:
    p_v = (const boost::beast::detail::tuple_element_impl<0,boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> > > *)p;
    __asan_report_store1(p);
    goto LABEL_33;
  }
  v7 = *(_BYTE *)((p >> 3) + 0x7FFF8000);
  if ( v7 <= (char)(p & 7) && v7 )
    goto LABEL_32;
  *(_BYTE *)p = *(_BYTE *)(p + 184);
  *(_QWORD *)(v4 + 16) = p;
LABEL_16:
  p_v = (const boost::beast::detail::tuple_element_impl<0,boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char> >::writer::field_range,boost::beast::http::chunk_crlf> > > *)&this->v;
  if ( *(_BYTE *)(((unsigned __int64)&this->v >> 3) + 0x7FFF8000) )
  {
LABEL_33:
    __asan_report_store8();
    boost::beast::detail::get<0ul,boost::beast::detail::buffers_ref<boost::beast::buffers_cat_view<boost::asio::const_buffer,boost::asio::const_buffer,boost::asio::const_buffer,boost::beast::http::basic_fields<std::allocator<char>>::writer::field_range,boost::beast::http::chunk_crlf>>>(p_v);
    return;
  }
  this->v = 0LL;
};
