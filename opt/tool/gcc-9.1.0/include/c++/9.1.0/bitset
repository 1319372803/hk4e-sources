// File: /opt/tool/gcc-9.1.0/include/c++/9.1.0/bitset

// Line 82: range 000000000D46FEFA-000000000D46FF48
void __cdecl std::_Base_bitset<4ul>::_Base_bitset(std::_Base_bitset<4> *const this)
{
  std::_Base_bitset<4> *v1; // rax
  __int64 i; // rdx

  v1 = this;
  for ( i = 3LL; i >= 0; --i )
  {
    if ( *(_BYTE *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) )
      __asan_report_store8();
    v1->_M_w[0] = 0LL;
    v1 = (std::_Base_bitset<4> *)((char *)v1 + 8);
  }
};

// Line 99: range 000000000D4837E3-000000000D4837F4
std::size_t __cdecl std::_Base_bitset<4ul>::_S_whichword(std::size_t __pos)
{
  return __pos >> 6;
};

// Line 107: range 000000000D47EA6E-000000000D47EA7E
std::size_t __cdecl std::_Base_bitset<4ul>::_S_whichbit(std::size_t __pos)
{
  return __pos & 0x3F;
};

// Line 111: range 000000000D47EA7F-000000000D47EAA5
std::_Base_bitset<4>::_WordT __cdecl std::_Base_bitset<4ul>::_S_maskbit(std::size_t __pos)
{
  return 1LL << std::_Base_bitset<4ul>::_S_whichbit(__pos);
};

// Line 115: range 000000000D4837F6-000000000D483822
std::_Base_bitset<4>::_WordT *__cdecl std::_Base_bitset<4ul>::_M_getword(
        std::_Base_bitset<4> *const this,
        std::size_t __pos)
{
  return &this->_M_w[std::_Base_bitset<4ul>::_S_whichword(__pos)];
};

// Line 119: range 000000000D487B8A-000000000D487BDB
std::_Base_bitset<4>::_WordT __cdecl std::_Base_bitset<4ul>::_M_getword(
        const std::_Base_bitset<4> *const this,
        std::size_t __pos)
{
  std::size_t v2; // rax

  v2 = std::_Base_bitset<4ul>::_S_whichword(__pos);
  if ( *(_BYTE *)(((unsigned __int64)&this->_M_w[v2] >> 3) + 0x7FFF8000) )
    v2 = __asan_report_load8(&this->_M_w[v2]);
  return this->_M_w[v2];
};

// Line 813: range 000000000D47DA62-000000000D47DAEC
void __cdecl std::bitset<256ul>::reference::reference(
        std::bitset<256>::reference *const this,
        std::bitset<256> *__b,
        std::size_t __pos)
{
  std::_Base_bitset<4>::_WordT *v3; // rax
  std::size_t v4; // rax

  v3 = std::_Base_bitset<4ul>::_M_getword(__b, __pos);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8();
  this->_M_wp = v3;
  v4 = std::_Base_bitset<4ul>::_S_whichbit(__pos);
  if ( *(_BYTE *)(((unsigned __int64)&this->_M_bpos >> 3) + 0x7FFF8000) )
    __asan_report_store8();
  this->_M_bpos = v4;
};

// Line 823: range 000000000D47125E-000000000D471268
void __cdecl std::bitset<256ul>::reference::~reference(std::bitset<256>::reference *const this)
{
  ;
};

// Line 828: range 000000000D471EF4-000000000D472080
std::bitset<256>::reference *__cdecl std::bitset<256ul>::reference::operator=(
        std::bitset<256>::reference *const this,
        bool __x)
{
  std::_Base_bitset<4>::_WordT v2; // rcx
  std::bitset<256>::_WordT *M_wp; // rax
  std::bitset<256>::_WordT v4; // rdx
  std::bitset<256>::_WordT *v5; // rax
  std::_Base_bitset<4>::_WordT v6; // rsi
  std::_Base_bitset<4>::_WordT v7; // rsi
  std::bitset<256>::_WordT *v8; // rax
  std::bitset<256>::_WordT v9; // rdx
  std::bitset<256>::_WordT *v10; // rax
  std::_Base_bitset<4>::_WordT v11; // rsi

  if ( __x )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->_M_bpos >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->_M_bpos);
    v2 = std::_Base_bitset<4ul>::_S_maskbit(this->_M_bpos);
    if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_load8(this);
    M_wp = this->_M_wp;
    if ( *(_BYTE *)(((unsigned __int64)this->_M_wp >> 3) + 0x7FFF8000) )
      M_wp = (std::bitset<256>::_WordT *)__asan_report_load8(this->_M_wp);
    v4 = *M_wp;
    v5 = this->_M_wp;
    v6 = v4 | v2;
    if ( *(_BYTE *)(((unsigned __int64)this->_M_wp >> 3) + 0x7FFF8000) )
      __asan_report_store8();
    *v5 = v6;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->_M_bpos >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->_M_bpos);
    v7 = ~std::_Base_bitset<4ul>::_S_maskbit(this->_M_bpos);
    if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_load8(this);
    v8 = this->_M_wp;
    if ( *(_BYTE *)(((unsigned __int64)this->_M_wp >> 3) + 0x7FFF8000) )
      v8 = (std::bitset<256>::_WordT *)__asan_report_load8(this->_M_wp);
    v9 = *v8;
    v10 = this->_M_wp;
    v11 = v9 & v7;
    if ( *(_BYTE *)(((unsigned __int64)this->_M_wp >> 3) + 0x7FFF8000) )
      __asan_report_store8();
    *v10 = v11;
  }
  return this;
};

// Line 869: range 000000000D4637A8-000000000D4637C2
void __cdecl std::bitset<256ul>::bitset(std::bitset<256> *const this)
{
  std::_Base_bitset<4ul>::_Base_bitset(this);
};

// Line 1065: range 000000000D487BDC-000000000D487C1E
bool __cdecl std::bitset<256ul>::_Unchecked_test(const std::bitset<256> *const this, std::size_t __pos)
{
  std::_Base_bitset<4>::_WordT v2; // rbx

  v2 = std::_Base_bitset<4ul>::_M_getword(this, __pos);
  return (v2 & std::_Base_bitset<4ul>::_S_maskbit(__pos)) != 0;
};

// Line 1163: range 000000000D47122C-000000000D47125C
std::bitset<256>::reference __cdecl std::bitset<256ul>::operator[](
        std::bitset<256> *const this,
        std::size_t __position)
{
  std::size_t v2; // rdx
  std::bitset<256>::reference result; // rax

  std::bitset<256ul>::reference::reference((std::bitset<256>::reference *const)this, (std::bitset<256> *)__position, v2);
  result._M_wp = (std::bitset<256>::_WordT *)this;
  return result;
};

// Line 1167: range 000000000D4841C2-000000000D4841E6
bool __cdecl std::bitset<256ul>::operator[](const std::bitset<256> *const this, std::size_t __position)
{
  return std::bitset<256ul>::_Unchecked_test(this, __position);
};

// Line 1300: range 000000000D47121C-000000000D47122A
std::size_t __cdecl std::bitset<256ul>::size(const std::bitset<256> *const this)
{
  return 256LL;
};
