// File: /opt/tool/gcc-9.1.0/include/c++/9.1.0/thread

// Line 82: range 000000000C63703A-000000000C637074
void __cdecl std::thread::id::id(std::thread::id *const this)
{
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8();
  this->_M_thread = 0LL;
};

// Line 112: range 000000000C63EAE2-000000000C63EAFC
void __cdecl std::thread::thread(std::thread *const this)
{
  std::thread::id::id(&this->_M_id);
};

// Line 136: range 000000000C637076-000000000C63709E
void __cdecl std::thread::~thread(std::thread *const this)
{
  if ( std::thread::joinable(this) )
  {
    __asan_handle_no_return(this);
    std::terminate();
  }
};

// Line 162: range 000000000C6370A0-000000000C6370F0
bool __cdecl std::thread::joinable(const std::thread *const this)
{
  std::thread::id __y; // [rsp+18h] [rbp-8h] BYREF

  std::thread::id::id(&__y);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_load8(this);
  return !std::operator==(this->_M_id, __y);
};

// Line 163: range 0000000014EB7730-0000000014EB77B7
bool __fastcall PacketLogMgr::isRun(PacketLogMgr *const this)
{
  if ( *(_BYTE *)(((unsigned __int64)&this->work_thread_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(&this->work_thread_);
    JUMPOUT(0x14EB775FLL);
  }
  return this->work_thread_._M_id._M_thread != 0;
};

// Line 163: range 0000000014EB0BE4-0000000014EB0C6E
bool __fastcall StatLogMgr::isRun(StatLogMgr *const this)
{
  if ( *(_BYTE *)(((unsigned __int64)&this->work_thread_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(&this->work_thread_);
    JUMPOUT(0x14EB0C13LL);
  }
  return this->work_thread_._M_id._M_thread != 0;
};

// Line 187: range 0000000014E6F110-0000000014E6F210
void __fastcall std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<int (AsyncTaskMgr::*)(unsigned int) ()(AsyncTaskMgr*,unsigned int)>>>>::~_State_impl(
        std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<int (AsyncTaskMgr::*(AsyncTaskMgr*,unsigned int))(unsigned int)> > > > *const this)
{
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
  {
    __asan_report_store8();
    JUMPOUT(0x14E6F141LL);
  }
  *(_QWORD *)this->baseclass_0 = &`vtable for'std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<int (AsyncTaskMgr::*)(unsigned int) ()(AsyncTaskMgr*,unsigned int)>>>>
                               + 2;
  std::thread::_State::~_State((std::thread::_State *)this);
};

// Line 187: range 0000000014E38DF4-0000000014E38EF4
void __fastcall std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<void (MonitorReport::*)(void) ()(MonitorReport*)>>>>::~_State_impl(
        std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<void (MonitorReport::*(MonitorReport*))()> > > > *const this)
{
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
  {
    __asan_report_store8();
    JUMPOUT(0x14E38E25LL);
  }
  *(_QWORD *)this->baseclass_0 = &`vtable for'std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<void (MonitorReport::*)(void) ()(MonitorReport*)>>>>
                               + 2;
  std::thread::_State::~_State((std::thread::_State *)this);
};

// Line 187: range 0000000014E613D0-0000000014E614D0
void __fastcall std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<void (ServiceBase::*)(unsigned int) ()(ServiceBase*,unsigned int)>>>>::~_State_impl(
        std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<void (ServiceBase::*(ServiceBase*,unsigned int))(unsigned int)> > > > *const this)
{
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
  {
    __asan_report_store8();
    JUMPOUT(0x14E61401LL);
  }
  *(_QWORD *)this->baseclass_0 = &`vtable for'std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<void (ServiceBase::*)(unsigned int) ()(ServiceBase*,unsigned int)>>>>
                               + 2;
  std::thread::_State::~_State((std::thread::_State *)this);
};

// Line 195: range 0000000014EB915C-0000000014EB99D7
void __fastcall std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<int (PacketLogMgr::*)(void) ()(PacketLogMgr*)>>>>::_M_run(
        std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<int (PacketLogMgr::*(PacketLogMgr*))()> > > > *const this)
{
  __int64 v1; // rsi
  _BYTE *v2; // rdx
  unsigned __int64 v3; // rax
  std::thread::_Invoker<std::tuple<std::_Bind<int (PacketLogMgr::*(PacketLogMgr*))()> > > *p_M_func; // rdx
  int (*M_f)(PacketLogMgr *); // rdx
  int (*v6)(PacketLogMgr *); // rcx
  unsigned __int64 v7; // rdi

  if ( *(_BYTE *)(((unsigned __int64)&this->_M_func._M_t._M_head_impl._M_bound_args >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(&this->_M_func._M_t._M_head_impl._M_bound_args);
    goto LABEL_10;
  }
  v2 = this->_M_func._M_t._M_head_impl.gap8;
  if ( *(_BYTE *)(((unsigned __int64)this->_M_func._M_t._M_head_impl.gap8 >> 3) + 0x7FFF8000) )
  {
LABEL_10:
    __asan_report_load8(v2);
    goto LABEL_11;
  }
  v3 = (unsigned __int64)this->_M_func._M_t._M_head_impl._M_bound_args._M_head_impl
     + *(_QWORD *)this->_M_func._M_t._M_head_impl.gap8;
  p_M_func = &this->_M_func;
  if ( *(_BYTE *)(((unsigned __int64)&this->_M_func >> 3) + 0x7FFF8000) )
  {
LABEL_11:
    v3 = __asan_report_load8(p_M_func);
LABEL_12:
    v7 = v3;
    __asan_report_load8(v3);
    goto LABEL_13;
  }
  M_f = this->_M_func._M_t._M_head_impl._M_f;
  v6 = M_f;
  if ( ((unsigned __int8)M_f & 1) == 0 )
  {
LABEL_8:
    ((void (__fastcall *)(unsigned __int64, __int64, int (*)(PacketLogMgr *), int (*)(PacketLogMgr *)))M_f)(
      v3,
      v1,
      M_f,
      v6);
    return;
  }
  if ( *(_BYTE *)((v3 >> 3) + 0x7FFF8000) )
    goto LABEL_12;
  v7 = (unsigned __int64)M_f + *(_QWORD *)v3 - 1;
  if ( !*(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
  {
    M_f = *(int (**)(PacketLogMgr *))v7;
    goto LABEL_8;
  }
LABEL_13:
  __asan_report_load8(v7);
  std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<int (PacketLogMgr::*)(void) ()(PacketLogMgr*)>>>>::~_State_impl((std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<int (PacketLogMgr::*(PacketLogMgr*))()> > > > *const)v7);
};

// Line 195: range 0000000014E38C3E-0000000014E38CEC
void __fastcall std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<void (MonitorReport::*)(void) ()(MonitorReport*)>>>>::_M_run(
        std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<void (MonitorReport::*(MonitorReport*))()> > > > *const this)
{
  __int64 v1; // rsi
  _BYTE *v2; // rdx
  unsigned __int64 v3; // rax
  std::thread::_Invoker<std::tuple<std::_Bind<void (MonitorReport::*(MonitorReport*))()> > > *p_M_func; // rdx
  void (*M_f)(MonitorReport *); // rdx
  void (*v6)(MonitorReport *); // rcx
  unsigned __int64 v7; // rdi

  if ( *(_BYTE *)(((unsigned __int64)&this->_M_func._M_t._M_head_impl._M_bound_args >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(&this->_M_func._M_t._M_head_impl._M_bound_args);
    goto LABEL_10;
  }
  v2 = this->_M_func._M_t._M_head_impl.gap8;
  if ( *(_BYTE *)(((unsigned __int64)this->_M_func._M_t._M_head_impl.gap8 >> 3) + 0x7FFF8000) )
  {
LABEL_10:
    __asan_report_load8(v2);
    goto LABEL_11;
  }
  v3 = (unsigned __int64)this->_M_func._M_t._M_head_impl._M_bound_args._M_head_impl
     + *(_QWORD *)this->_M_func._M_t._M_head_impl.gap8;
  p_M_func = &this->_M_func;
  if ( *(_BYTE *)(((unsigned __int64)&this->_M_func >> 3) + 0x7FFF8000) )
  {
LABEL_11:
    v3 = __asan_report_load8(p_M_func);
LABEL_12:
    v7 = v3;
    __asan_report_load8(v3);
    goto LABEL_13;
  }
  M_f = this->_M_func._M_t._M_head_impl._M_f;
  v6 = M_f;
  if ( ((unsigned __int8)M_f & 1) == 0 )
  {
LABEL_8:
    ((void (__fastcall *)(unsigned __int64, __int64, void (*)(MonitorReport *), void (*)(MonitorReport *)))M_f)(
      v3,
      v1,
      M_f,
      v6);
    return;
  }
  if ( *(_BYTE *)((v3 >> 3) + 0x7FFF8000) )
    goto LABEL_12;
  v7 = (unsigned __int64)M_f + *(_QWORD *)v3 - 1;
  if ( !*(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
  {
    M_f = *(void (**)(MonitorReport *))v7;
    goto LABEL_8;
  }
LABEL_13:
  __asan_report_load8(v7);
  std::_Sp_counted_ptr_inplace<MonitorValue,std::allocator<MonitorValue>,(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace((std::_Sp_counted_ptr_inplace<MonitorValue,std::allocator<MonitorValue>,(__gnu_cxx::_Lock_policy)2> *const)v7);
};

// Line 195: range 0000000014E611D2-0000000014E612BC
void __fastcall std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<void (ServiceBase::*)(unsigned int) ()(ServiceBase*,unsigned int)>>>>::_M_run(
        std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<void (ServiceBase::*(ServiceBase*,unsigned int))(unsigned int)> > > > *const this)
{
  std::tuple<ServiceBase*,unsigned int> *p_M_bound_args; // rsi
  void (**v2)(ServiceBase *, unsigned int); // rdx
  unsigned __int64 v3; // rax
  std::thread::_Invoker<std::tuple<std::_Bind<void (ServiceBase::*(ServiceBase*,unsigned int))(unsigned int)> > > *p_M_func; // rdx
  void (*M_f)(ServiceBase *, unsigned int); // rdx
  void (*v6)(ServiceBase *, unsigned int); // rcx
  void (**v7)(ServiceBase *, unsigned int); // rdx
  char v8; // r8

  if ( *(_BYTE *)(((unsigned __int64)&this->_M_func._M_t._M_head_impl._M_bound_args.std::_Head_base<0,ServiceBase*,false> >> 3)
                + 0x7FFF8000) )
  {
    __asan_report_load8(&this->_M_func._M_t._M_head_impl._M_bound_args.std::_Head_base<0,ServiceBase*,false>);
    goto LABEL_12;
  }
  v2 = &this->_M_func._M_t._M_head_impl._M_f + 1;
  if ( *(_BYTE *)(((unsigned __int64)(&this->_M_func._M_t._M_head_impl._M_f + 1) >> 3) + 0x7FFF8000) )
  {
LABEL_12:
    __asan_report_load8(v2);
    goto LABEL_13;
  }
  v3 = (unsigned __int64)this->_M_func._M_t._M_head_impl._M_bound_args._M_head_impl
     + *((_QWORD *)&this->_M_func._M_t._M_head_impl._M_f + 1);
  p_M_func = &this->_M_func;
  if ( *(_BYTE *)(((unsigned __int64)&this->_M_func >> 3) + 0x7FFF8000) )
  {
LABEL_13:
    v3 = __asan_report_load8(p_M_func);
    goto LABEL_14;
  }
  M_f = this->_M_func._M_t._M_head_impl._M_f;
  v6 = M_f;
  if ( ((unsigned __int8)M_f & 1) != 0 )
  {
    if ( !*(_BYTE *)((v3 >> 3) + 0x7FFF8000) )
    {
      v7 = (void (**)(ServiceBase *, unsigned int))((char *)M_f + *(_QWORD *)v3 - 1);
      if ( !*(_BYTE *)((((unsigned __int64)v6 + *(_QWORD *)v3 - 1) >> 3) + 0x7FFF8000) )
      {
        M_f = *v7;
        goto LABEL_8;
      }
LABEL_15:
      __asan_report_load8(v7);
      goto LABEL_16;
    }
LABEL_14:
    __asan_report_load8(v3);
    goto LABEL_15;
  }
LABEL_8:
  p_M_bound_args = &this->_M_func._M_t._M_head_impl._M_bound_args;
  v8 = *(_BYTE *)(((unsigned __int64)&this->_M_func._M_t._M_head_impl._M_bound_args >> 3) + 0x7FFF8000);
  if ( (char)((((_BYTE)this + 24) & 7) + 3) < v8 || !v8 )
  {
    M_f((ServiceBase *)v3, this->_M_func._M_t._M_head_impl._M_bound_args._M_head_impl);
    return;
  }
LABEL_16:
  __asan_report_load4(p_M_bound_args);
  std::_Sp_counted_ptr_inplace<common::tools::TimerMgr,std::allocator<common::tools::TimerMgr>,(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace((std::_Sp_counted_ptr_inplace<common::tools::TimerMgr,std::allocator<common::tools::TimerMgr>,(__gnu_cxx::_Lock_policy)2> *const)p_M_bound_args);
};

// Line 218: range 0000000014EB593E-0000000014EB6699
void __fastcall std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<int (StatLogMgr::*)(void) ()(StatLogMgr*)>>>>::_M_run(
        std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<int (StatLogMgr::*(StatLogMgr*))()> > > > *const this)
{
  __int64 v1; // rsi
  _BYTE *v2; // rdx
  unsigned __int64 v3; // rax
  std::thread::_Invoker<std::tuple<std::_Bind<int (StatLogMgr::*(StatLogMgr*))()> > > *p_M_func; // rdx
  int (*M_f)(StatLogMgr *); // rdx
  int (*v6)(StatLogMgr *); // rcx
  unsigned __int64 v7; // rdi

  if ( *(_BYTE *)(((unsigned __int64)&this->_M_func._M_t._M_head_impl._M_bound_args >> 3) + 0x7FFF8000) )
  {
    __asan_report_load8(&this->_M_func._M_t._M_head_impl._M_bound_args);
    goto LABEL_10;
  }
  v2 = this->_M_func._M_t._M_head_impl.gap8;
  if ( *(_BYTE *)(((unsigned __int64)this->_M_func._M_t._M_head_impl.gap8 >> 3) + 0x7FFF8000) )
  {
LABEL_10:
    __asan_report_load8(v2);
    goto LABEL_11;
  }
  v3 = (unsigned __int64)this->_M_func._M_t._M_head_impl._M_bound_args._M_head_impl
     + *(_QWORD *)this->_M_func._M_t._M_head_impl.gap8;
  p_M_func = &this->_M_func;
  if ( *(_BYTE *)(((unsigned __int64)&this->_M_func >> 3) + 0x7FFF8000) )
  {
LABEL_11:
    v3 = __asan_report_load8(p_M_func);
LABEL_12:
    v7 = v3;
    __asan_report_load8(v3);
    goto LABEL_13;
  }
  M_f = this->_M_func._M_t._M_head_impl._M_f;
  v6 = M_f;
  if ( ((unsigned __int8)M_f & 1) == 0 )
  {
LABEL_8:
    ((void (__fastcall *)(unsigned __int64, __int64, int (*)(StatLogMgr *), int (*)(StatLogMgr *)))M_f)(v3, v1, M_f, v6);
    return;
  }
  if ( *(_BYTE *)((v3 >> 3) + 0x7FFF8000) )
    goto LABEL_12;
  v7 = (unsigned __int64)M_f + *(_QWORD *)v3 - 1;
  if ( !*(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
  {
    M_f = *(int (**)(StatLogMgr *))v7;
    goto LABEL_8;
  }
LABEL_13:
  __asan_report_load8(v7);
  std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<int (StatLogMgr::*)(void) ()(StatLogMgr*)>>>>::~_State_impl((std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<int (StatLogMgr::*(StatLogMgr*))()> > > > *const)v7);
};

// Line 277: range 000000000C6370F1-000000000C63721C
__int64 __fastcall std::operator==(std::thread::id __x, std::thread::id __y)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  char *v4; // rdx
  _DWORD *v5; // rax
  char *v6; // rdi
  char *v7; // rdx
  char v9[112]; // [rsp+10h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  v4 = (char *)(v2 + 96);
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 7 __x:276 64 8 7 __y:276";
  *(_QWORD *)(v2 + 16) = std::operator==;
  v5 = (_DWORD *)(v2 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -202116352;
  *(std::thread::id *)(v2 + 32) = __x;
  *(std::thread::id *)(v2 + 64) = __y;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    v5 = (_DWORD *)__asan_report_load8(v2 + 32);
  v6 = (char *)*((_QWORD *)v4 - 8);
  if ( *(_BYTE *)(((unsigned __int64)(v4 - 32) >> 3) + 0x7FFF8000) )
  {
    v6 = v4 - 32;
    v5 = (_DWORD *)__asan_report_load8(v4 - 32);
  }
  v7 = (char *)*((_QWORD *)v4 - 4);
  LOBYTE(v7) = v6 == v7;
  if ( v9 == (char *)v2 )
  {
    *((_QWORD *)v5 + 268431360) = 0LL;
    v5[536862722] = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *((_QWORD *)v5 + 268431360) = 0xF5F5F5F5F5F5F5F5LL;
    v5[536862722] = -168430091;
  }
  return (unsigned int)v7;
};
